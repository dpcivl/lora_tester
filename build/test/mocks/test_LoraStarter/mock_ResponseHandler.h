/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_RESPONSEHANDLER_H
#define _MOCK_RESPONSEHANDLER_H

#include "unity.h"
#include "ResponseHandler.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_ResponseHandler_Init(void);
void mock_ResponseHandler_Destroy(void);
void mock_ResponseHandler_Verify(void);




#define is_response_ok_Ignore() TEST_FAIL_MESSAGE("is_response_ok requires _IgnoreAndReturn");
#define is_response_ok_IgnoreAndReturn(cmock_retval) is_response_ok_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_response_ok_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_response_ok_StopIgnore() is_response_ok_CMockStopIgnore()
void is_response_ok_CMockStopIgnore(void);
#define is_response_ok_Expect(response) TEST_FAIL_MESSAGE("is_response_ok requires _ExpectAndReturn");
#define is_response_ok_ExpectAndReturn(response, cmock_retval) is_response_ok_CMockExpectAndReturn(__LINE__, response, cmock_retval)
void is_response_ok_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* response, bool cmock_to_return);
typedef bool (* CMOCK_is_response_ok_CALLBACK)(const char* response, int cmock_num_calls);
void is_response_ok_AddCallback(CMOCK_is_response_ok_CALLBACK Callback);
void is_response_ok_Stub(CMOCK_is_response_ok_CALLBACK Callback);
#define is_response_ok_StubWithCallback is_response_ok_Stub
#define is_join_response_ok_Ignore() TEST_FAIL_MESSAGE("is_join_response_ok requires _IgnoreAndReturn");
#define is_join_response_ok_IgnoreAndReturn(cmock_retval) is_join_response_ok_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_join_response_ok_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_join_response_ok_StopIgnore() is_join_response_ok_CMockStopIgnore()
void is_join_response_ok_CMockStopIgnore(void);
#define is_join_response_ok_Expect(response) TEST_FAIL_MESSAGE("is_join_response_ok requires _ExpectAndReturn");
#define is_join_response_ok_ExpectAndReturn(response, cmock_retval) is_join_response_ok_CMockExpectAndReturn(__LINE__, response, cmock_retval)
void is_join_response_ok_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* response, bool cmock_to_return);
typedef bool (* CMOCK_is_join_response_ok_CALLBACK)(const char* response, int cmock_num_calls);
void is_join_response_ok_AddCallback(CMOCK_is_join_response_ok_CALLBACK Callback);
void is_join_response_ok_Stub(CMOCK_is_join_response_ok_CALLBACK Callback);
#define is_join_response_ok_StubWithCallback is_join_response_ok_Stub
#define ResponseHandler_ParseSendResponse_Ignore() TEST_FAIL_MESSAGE("ResponseHandler_ParseSendResponse requires _IgnoreAndReturn");
#define ResponseHandler_ParseSendResponse_IgnoreAndReturn(cmock_retval) ResponseHandler_ParseSendResponse_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ResponseHandler_ParseSendResponse_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ResponseType cmock_to_return);
#define ResponseHandler_ParseSendResponse_StopIgnore() ResponseHandler_ParseSendResponse_CMockStopIgnore()
void ResponseHandler_ParseSendResponse_CMockStopIgnore(void);
#define ResponseHandler_ParseSendResponse_Expect(response) TEST_FAIL_MESSAGE("ResponseHandler_ParseSendResponse requires _ExpectAndReturn");
#define ResponseHandler_ParseSendResponse_ExpectAndReturn(response, cmock_retval) ResponseHandler_ParseSendResponse_CMockExpectAndReturn(__LINE__, response, cmock_retval)
void ResponseHandler_ParseSendResponse_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* response, ResponseType cmock_to_return);
typedef ResponseType (* CMOCK_ResponseHandler_ParseSendResponse_CALLBACK)(const char* response, int cmock_num_calls);
void ResponseHandler_ParseSendResponse_AddCallback(CMOCK_ResponseHandler_ParseSendResponse_CALLBACK Callback);
void ResponseHandler_ParseSendResponse_Stub(CMOCK_ResponseHandler_ParseSendResponse_CALLBACK Callback);
#define ResponseHandler_ParseSendResponse_StubWithCallback ResponseHandler_ParseSendResponse_Stub

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
