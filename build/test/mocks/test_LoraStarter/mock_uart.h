/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_UART_H
#define _MOCK_UART_H

#include "unity.h"
#include "uart.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_uart_Init(void);
void mock_uart_Destroy(void);
void mock_uart_Verify(void);




#define UART_Connect_Ignore() TEST_FAIL_MESSAGE("UART_Connect requires _IgnoreAndReturn");
#define UART_Connect_IgnoreAndReturn(cmock_retval) UART_Connect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Connect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Connect_StopIgnore() UART_Connect_CMockStopIgnore()
void UART_Connect_CMockStopIgnore(void);
#define UART_Connect_Expect(port) TEST_FAIL_MESSAGE("UART_Connect requires _ExpectAndReturn");
#define UART_Connect_ExpectAndReturn(port, cmock_retval) UART_Connect_CMockExpectAndReturn(__LINE__, port, cmock_retval)
void UART_Connect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* port, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Connect_CALLBACK)(const char* port, int cmock_num_calls);
void UART_Connect_AddCallback(CMOCK_UART_Connect_CALLBACK Callback);
void UART_Connect_Stub(CMOCK_UART_Connect_CALLBACK Callback);
#define UART_Connect_StubWithCallback UART_Connect_Stub
#define UART_Disconnect_Ignore() TEST_FAIL_MESSAGE("UART_Disconnect requires _IgnoreAndReturn");
#define UART_Disconnect_IgnoreAndReturn(cmock_retval) UART_Disconnect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Disconnect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Disconnect_StopIgnore() UART_Disconnect_CMockStopIgnore()
void UART_Disconnect_CMockStopIgnore(void);
#define UART_Disconnect_Expect() TEST_FAIL_MESSAGE("UART_Disconnect requires _ExpectAndReturn");
#define UART_Disconnect_ExpectAndReturn(cmock_retval) UART_Disconnect_CMockExpectAndReturn(__LINE__, cmock_retval)
void UART_Disconnect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Disconnect_CALLBACK)(int cmock_num_calls);
void UART_Disconnect_AddCallback(CMOCK_UART_Disconnect_CALLBACK Callback);
void UART_Disconnect_Stub(CMOCK_UART_Disconnect_CALLBACK Callback);
#define UART_Disconnect_StubWithCallback UART_Disconnect_Stub
#define UART_Send_Ignore() TEST_FAIL_MESSAGE("UART_Send requires _IgnoreAndReturn");
#define UART_Send_IgnoreAndReturn(cmock_retval) UART_Send_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Send_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Send_StopIgnore() UART_Send_CMockStopIgnore()
void UART_Send_CMockStopIgnore(void);
#define UART_Send_Expect(data) TEST_FAIL_MESSAGE("UART_Send requires _ExpectAndReturn");
#define UART_Send_ExpectAndReturn(data, cmock_retval) UART_Send_CMockExpectAndReturn(__LINE__, data, cmock_retval)
void UART_Send_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* data, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Send_CALLBACK)(const char* data, int cmock_num_calls);
void UART_Send_AddCallback(CMOCK_UART_Send_CALLBACK Callback);
void UART_Send_Stub(CMOCK_UART_Send_CALLBACK Callback);
#define UART_Send_StubWithCallback UART_Send_Stub
#define UART_Receive_Ignore() TEST_FAIL_MESSAGE("UART_Receive requires _IgnoreAndReturn");
#define UART_Receive_IgnoreAndReturn(cmock_retval) UART_Receive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Receive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Receive_StopIgnore() UART_Receive_CMockStopIgnore()
void UART_Receive_CMockStopIgnore(void);
#define UART_Receive_Expect(buffer, buffer_size, bytes_received) TEST_FAIL_MESSAGE("UART_Receive requires _ExpectAndReturn");
#define UART_Receive_ExpectAndReturn(buffer, buffer_size, bytes_received, cmock_retval) UART_Receive_CMockExpectAndReturn(__LINE__, buffer, buffer_size, bytes_received, cmock_retval)
void UART_Receive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* buffer, int buffer_size, int* bytes_received, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Receive_CALLBACK)(char* buffer, int buffer_size, int* bytes_received, int cmock_num_calls);
void UART_Receive_AddCallback(CMOCK_UART_Receive_CALLBACK Callback);
void UART_Receive_Stub(CMOCK_UART_Receive_CALLBACK Callback);
#define UART_Receive_StubWithCallback UART_Receive_Stub
#define UART_ReceiveWithTimeout_Ignore() TEST_FAIL_MESSAGE("UART_ReceiveWithTimeout requires _IgnoreAndReturn");
#define UART_ReceiveWithTimeout_IgnoreAndReturn(cmock_retval) UART_ReceiveWithTimeout_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_ReceiveWithTimeout_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_ReceiveWithTimeout_StopIgnore() UART_ReceiveWithTimeout_CMockStopIgnore()
void UART_ReceiveWithTimeout_CMockStopIgnore(void);
#define UART_ReceiveWithTimeout_Expect(buffer, buffer_size, bytes_received, timeout_ms) TEST_FAIL_MESSAGE("UART_ReceiveWithTimeout requires _ExpectAndReturn");
#define UART_ReceiveWithTimeout_ExpectAndReturn(buffer, buffer_size, bytes_received, timeout_ms, cmock_retval) UART_ReceiveWithTimeout_CMockExpectAndReturn(__LINE__, buffer, buffer_size, bytes_received, timeout_ms, cmock_retval)
void UART_ReceiveWithTimeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* buffer, int buffer_size, int* bytes_received, uint32_t timeout_ms, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_ReceiveWithTimeout_CALLBACK)(char* buffer, int buffer_size, int* bytes_received, uint32_t timeout_ms, int cmock_num_calls);
void UART_ReceiveWithTimeout_AddCallback(CMOCK_UART_ReceiveWithTimeout_CALLBACK Callback);
void UART_ReceiveWithTimeout_Stub(CMOCK_UART_ReceiveWithTimeout_CALLBACK Callback);
#define UART_ReceiveWithTimeout_StubWithCallback UART_ReceiveWithTimeout_Stub
#define UART_Configure_Ignore() TEST_FAIL_MESSAGE("UART_Configure requires _IgnoreAndReturn");
#define UART_Configure_IgnoreAndReturn(cmock_retval) UART_Configure_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Configure_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Configure_StopIgnore() UART_Configure_CMockStopIgnore()
void UART_Configure_CMockStopIgnore(void);
#define UART_Configure_Expect(config) TEST_FAIL_MESSAGE("UART_Configure requires _ExpectAndReturn");
#define UART_Configure_ExpectAndReturn(config, cmock_retval) UART_Configure_CMockExpectAndReturn(__LINE__, config, cmock_retval)
void UART_Configure_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const UartConfig* config, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Configure_CALLBACK)(const UartConfig* config, int cmock_num_calls);
void UART_Configure_AddCallback(CMOCK_UART_Configure_CALLBACK Callback);
void UART_Configure_Stub(CMOCK_UART_Configure_CALLBACK Callback);
#define UART_Configure_StubWithCallback UART_Configure_Stub
#define UART_IsConnected_Ignore() TEST_FAIL_MESSAGE("UART_IsConnected requires _IgnoreAndReturn");
#define UART_IsConnected_IgnoreAndReturn(cmock_retval) UART_IsConnected_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_IsConnected_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define UART_IsConnected_StopIgnore() UART_IsConnected_CMockStopIgnore()
void UART_IsConnected_CMockStopIgnore(void);
#define UART_IsConnected_Expect() TEST_FAIL_MESSAGE("UART_IsConnected requires _ExpectAndReturn");
#define UART_IsConnected_ExpectAndReturn(cmock_retval) UART_IsConnected_CMockExpectAndReturn(__LINE__, cmock_retval)
void UART_IsConnected_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_UART_IsConnected_CALLBACK)(int cmock_num_calls);
void UART_IsConnected_AddCallback(CMOCK_UART_IsConnected_CALLBACK Callback);
void UART_IsConnected_Stub(CMOCK_UART_IsConnected_CALLBACK Callback);
#define UART_IsConnected_StubWithCallback UART_IsConnected_Stub
#define UART_Platform_Connect_Ignore() TEST_FAIL_MESSAGE("UART_Platform_Connect requires _IgnoreAndReturn");
#define UART_Platform_Connect_IgnoreAndReturn(cmock_retval) UART_Platform_Connect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Platform_Connect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Platform_Connect_StopIgnore() UART_Platform_Connect_CMockStopIgnore()
void UART_Platform_Connect_CMockStopIgnore(void);
#define UART_Platform_Connect_Expect(port) TEST_FAIL_MESSAGE("UART_Platform_Connect requires _ExpectAndReturn");
#define UART_Platform_Connect_ExpectAndReturn(port, cmock_retval) UART_Platform_Connect_CMockExpectAndReturn(__LINE__, port, cmock_retval)
void UART_Platform_Connect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* port, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Platform_Connect_CALLBACK)(const char* port, int cmock_num_calls);
void UART_Platform_Connect_AddCallback(CMOCK_UART_Platform_Connect_CALLBACK Callback);
void UART_Platform_Connect_Stub(CMOCK_UART_Platform_Connect_CALLBACK Callback);
#define UART_Platform_Connect_StubWithCallback UART_Platform_Connect_Stub
#define UART_Platform_Disconnect_Ignore() TEST_FAIL_MESSAGE("UART_Platform_Disconnect requires _IgnoreAndReturn");
#define UART_Platform_Disconnect_IgnoreAndReturn(cmock_retval) UART_Platform_Disconnect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Platform_Disconnect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Platform_Disconnect_StopIgnore() UART_Platform_Disconnect_CMockStopIgnore()
void UART_Platform_Disconnect_CMockStopIgnore(void);
#define UART_Platform_Disconnect_Expect() TEST_FAIL_MESSAGE("UART_Platform_Disconnect requires _ExpectAndReturn");
#define UART_Platform_Disconnect_ExpectAndReturn(cmock_retval) UART_Platform_Disconnect_CMockExpectAndReturn(__LINE__, cmock_retval)
void UART_Platform_Disconnect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Platform_Disconnect_CALLBACK)(int cmock_num_calls);
void UART_Platform_Disconnect_AddCallback(CMOCK_UART_Platform_Disconnect_CALLBACK Callback);
void UART_Platform_Disconnect_Stub(CMOCK_UART_Platform_Disconnect_CALLBACK Callback);
#define UART_Platform_Disconnect_StubWithCallback UART_Platform_Disconnect_Stub
#define UART_Platform_Send_Ignore() TEST_FAIL_MESSAGE("UART_Platform_Send requires _IgnoreAndReturn");
#define UART_Platform_Send_IgnoreAndReturn(cmock_retval) UART_Platform_Send_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Platform_Send_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Platform_Send_StopIgnore() UART_Platform_Send_CMockStopIgnore()
void UART_Platform_Send_CMockStopIgnore(void);
#define UART_Platform_Send_Expect(data) TEST_FAIL_MESSAGE("UART_Platform_Send requires _ExpectAndReturn");
#define UART_Platform_Send_ExpectAndReturn(data, cmock_retval) UART_Platform_Send_CMockExpectAndReturn(__LINE__, data, cmock_retval)
void UART_Platform_Send_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* data, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Platform_Send_CALLBACK)(const char* data, int cmock_num_calls);
void UART_Platform_Send_AddCallback(CMOCK_UART_Platform_Send_CALLBACK Callback);
void UART_Platform_Send_Stub(CMOCK_UART_Platform_Send_CALLBACK Callback);
#define UART_Platform_Send_StubWithCallback UART_Platform_Send_Stub
#define UART_Platform_Receive_Ignore() TEST_FAIL_MESSAGE("UART_Platform_Receive requires _IgnoreAndReturn");
#define UART_Platform_Receive_IgnoreAndReturn(cmock_retval) UART_Platform_Receive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Platform_Receive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Platform_Receive_StopIgnore() UART_Platform_Receive_CMockStopIgnore()
void UART_Platform_Receive_CMockStopIgnore(void);
#define UART_Platform_Receive_Expect(buffer, buffer_size, bytes_received) TEST_FAIL_MESSAGE("UART_Platform_Receive requires _ExpectAndReturn");
#define UART_Platform_Receive_ExpectAndReturn(buffer, buffer_size, bytes_received, cmock_retval) UART_Platform_Receive_CMockExpectAndReturn(__LINE__, buffer, buffer_size, bytes_received, cmock_retval)
void UART_Platform_Receive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* buffer, int buffer_size, int* bytes_received, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Platform_Receive_CALLBACK)(char* buffer, int buffer_size, int* bytes_received, int cmock_num_calls);
void UART_Platform_Receive_AddCallback(CMOCK_UART_Platform_Receive_CALLBACK Callback);
void UART_Platform_Receive_Stub(CMOCK_UART_Platform_Receive_CALLBACK Callback);
#define UART_Platform_Receive_StubWithCallback UART_Platform_Receive_Stub
#define UART_Platform_Configure_Ignore() TEST_FAIL_MESSAGE("UART_Platform_Configure requires _IgnoreAndReturn");
#define UART_Platform_Configure_IgnoreAndReturn(cmock_retval) UART_Platform_Configure_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_Platform_Configure_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UartStatus cmock_to_return);
#define UART_Platform_Configure_StopIgnore() UART_Platform_Configure_CMockStopIgnore()
void UART_Platform_Configure_CMockStopIgnore(void);
#define UART_Platform_Configure_Expect(config) TEST_FAIL_MESSAGE("UART_Platform_Configure requires _ExpectAndReturn");
#define UART_Platform_Configure_ExpectAndReturn(config, cmock_retval) UART_Platform_Configure_CMockExpectAndReturn(__LINE__, config, cmock_retval)
void UART_Platform_Configure_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const UartConfig* config, UartStatus cmock_to_return);
typedef UartStatus (* CMOCK_UART_Platform_Configure_CALLBACK)(const UartConfig* config, int cmock_num_calls);
void UART_Platform_Configure_AddCallback(CMOCK_UART_Platform_Configure_CALLBACK Callback);
void UART_Platform_Configure_Stub(CMOCK_UART_Platform_Configure_CALLBACK Callback);
#define UART_Platform_Configure_StubWithCallback UART_Platform_Configure_Stub
#define UART_Mock_Reset_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("UART_Mock_Reset requires _Ignore (not AndReturn)");
#define UART_Mock_Reset_Ignore() UART_Mock_Reset_CMockIgnore()
void UART_Mock_Reset_CMockIgnore(void);
#define UART_Mock_Reset_StopIgnore() UART_Mock_Reset_CMockStopIgnore()
void UART_Mock_Reset_CMockStopIgnore(void);
#define UART_Mock_Reset_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("UART_Mock_Reset requires _Expect (not AndReturn)");
#define UART_Mock_Reset_Expect() UART_Mock_Reset_CMockExpect(__LINE__)
void UART_Mock_Reset_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_UART_Mock_Reset_CALLBACK)(int cmock_num_calls);
void UART_Mock_Reset_AddCallback(CMOCK_UART_Mock_Reset_CALLBACK Callback);
void UART_Mock_Reset_Stub(CMOCK_UART_Mock_Reset_CALLBACK Callback);
#define UART_Mock_Reset_StubWithCallback UART_Mock_Reset_Stub
#define UART_Mock_SetReceiveData_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("UART_Mock_SetReceiveData requires _Ignore (not AndReturn)");
#define UART_Mock_SetReceiveData_Ignore() UART_Mock_SetReceiveData_CMockIgnore()
void UART_Mock_SetReceiveData_CMockIgnore(void);
#define UART_Mock_SetReceiveData_StopIgnore() UART_Mock_SetReceiveData_CMockStopIgnore()
void UART_Mock_SetReceiveData_CMockStopIgnore(void);
#define UART_Mock_SetReceiveData_ExpectAndReturn(data, cmock_retval) TEST_FAIL_MESSAGE("UART_Mock_SetReceiveData requires _Expect (not AndReturn)");
#define UART_Mock_SetReceiveData_Expect(data) UART_Mock_SetReceiveData_CMockExpect(__LINE__, data)
void UART_Mock_SetReceiveData_CMockExpect(UNITY_LINE_TYPE cmock_line, const char* data);
typedef void (* CMOCK_UART_Mock_SetReceiveData_CALLBACK)(const char* data, int cmock_num_calls);
void UART_Mock_SetReceiveData_AddCallback(CMOCK_UART_Mock_SetReceiveData_CALLBACK Callback);
void UART_Mock_SetReceiveData_Stub(CMOCK_UART_Mock_SetReceiveData_CALLBACK Callback);
#define UART_Mock_SetReceiveData_StubWithCallback UART_Mock_SetReceiveData_Stub
#define UART_Mock_SetDelayedResponse_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("UART_Mock_SetDelayedResponse requires _Ignore (not AndReturn)");
#define UART_Mock_SetDelayedResponse_Ignore() UART_Mock_SetDelayedResponse_CMockIgnore()
void UART_Mock_SetDelayedResponse_CMockIgnore(void);
#define UART_Mock_SetDelayedResponse_StopIgnore() UART_Mock_SetDelayedResponse_CMockStopIgnore()
void UART_Mock_SetDelayedResponse_CMockStopIgnore(void);
#define UART_Mock_SetDelayedResponse_ExpectAndReturn(delay_ms, data, cmock_retval) TEST_FAIL_MESSAGE("UART_Mock_SetDelayedResponse requires _Expect (not AndReturn)");
#define UART_Mock_SetDelayedResponse_Expect(delay_ms, data) UART_Mock_SetDelayedResponse_CMockExpect(__LINE__, delay_ms, data)
void UART_Mock_SetDelayedResponse_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t delay_ms, const char* data);
typedef void (* CMOCK_UART_Mock_SetDelayedResponse_CALLBACK)(uint32_t delay_ms, const char* data, int cmock_num_calls);
void UART_Mock_SetDelayedResponse_AddCallback(CMOCK_UART_Mock_SetDelayedResponse_CALLBACK Callback);
void UART_Mock_SetDelayedResponse_Stub(CMOCK_UART_Mock_SetDelayedResponse_CALLBACK Callback);
#define UART_Mock_SetDelayedResponse_StubWithCallback UART_Mock_SetDelayedResponse_Stub

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
