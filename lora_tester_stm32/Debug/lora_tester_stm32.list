
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff8  0801bdf4  0801bdf4  0001cdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801edec  0801edec  00020220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801edec  0801edec  0001fdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801edf4  0801edf4  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801edf4  0801edf4  0001fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801edf8  0801edf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0801edfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000e0  0801eedc  000200e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000180  0801ef7c  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ac90  20000220  0801f01c  00020220  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000aeb0  0801f01c  00020eb0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004651a  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009d10  00000000  00000000  0006676a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003960  00000000  00000000  00070480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c8c  00000000  00000000  00073de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000394ea  00000000  00000000  00076a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000507a3  00000000  00000000  000aff56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d592  00000000  00000000  001006f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022dc8b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f83c  00000000  00000000  0022dcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0023d50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801bddc 	.word	0x0801bddc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0801bddc 	.word	0x0801bddc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fad0 	bl	8004bd0 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f01a ffd2 	bl	801b5e8 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f01a ff16 	bl	801b4a0 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 faa0 	bl	8004bd0 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 fb71 	bl	8004d78 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 fa92 	bl	8004bd0 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 fa8a 	bl	8004bd0 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 fa85 	bl	8004bd0 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0801bdf4 	.word	0x0801bdf4
 80006d4:	0801be10 	.word	0x0801be10
 80006d8:	0801be18 	.word	0x0801be18
 80006dc:	0801be30 	.word	0x0801be30
 80006e0:	0801be60 	.word	0x0801be60
 80006e4:	0801be98 	.word	0x0801be98

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0801bf04 	.word	0x0801bf04
 800076c:	0801bf0c 	.word	0x0801bf0c
 8000770:	0801bf18 	.word	0x0801bf18
 8000774:	0801bf20 	.word	0x0801bf20
 8000778:	0801bf2c 	.word	0x0801bf2c
 800077c:	0801bf3c 	.word	0x0801bf3c
 8000780:	0801bf4c 	.word	0x0801bf4c
 8000784:	0801bf60 	.word	0x0801bf60
 8000788:	0801bf74 	.word	0x0801bf74
 800078c:	0801bf80 	.word	0x0801bf80
 8000790:	0801bf88 	.word	0x0801bf88
 8000794:	0801bf90 	.word	0x0801bf90

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 f9e2 	bl	8004bd0 <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	0801bfb4 	.word	0x0801bfb4
 8000820:	000493e0 	.word	0x000493e0
 8000824:	0801bfbc 	.word	0x0801bfbc

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8283 	beq.w	8000d40 <LoraStarter_Process+0x518>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 825b 	bhi.w	8000d02 <LoraStarter_Process+0x4da>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c29 	.word	0x08000c29
 8000874:	08000c8f 	.word	0x08000c8f
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 f986 	bl	8004bd0 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e224      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 f96c 	bl	8004bd0 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e1fd      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1f9      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f1 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa91 	bl	8000e4c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 f948 	bl	8004bd0 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1d9      	b.n	8000d06 <LoraStarter_Process+0x4de>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f01a fe62 	bl	801b61e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f01a fe5b 	bl	801b61e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81cb 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 f928 	bl	8004bd0 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 f915 	bl	8004bd0 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1ab      	b.n	8000d06 <LoraStarter_Process+0x4de>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 f909 	bl	8004bd0 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e197      	b.n	8000d06 <LoraStarter_Process+0x4de>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2001      	movs	r0, #1
 80009da:	f004 f8f9 	bl	8004bd0 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e191      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 818b 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa91 	bl	8000f1c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 8184 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2001      	movs	r0, #1
 8000a06:	f004 f8e3 	bl	8004bd0 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2001      	movs	r0, #1
 8000a34:	f004 f8cc 	bl	8004bd0 <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e167      	b.n	8000d0a <LoraStarter_Process+0x4e2>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f01a fd44 	bl	801b50c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f01a fcef 	bl	801b4a0 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f004 f881 	bl	8004bd0 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 f86d 	bl	8004bd0 <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e10b      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8107 	beq.w	8000d0e <LoraStarter_Process+0x4e6>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa8f 	bl	8001024 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8080 	bgt.w	8000c1a <LoraStarter_Process+0x3f2>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e07a      	b.n	8000c1a <LoraStarter_Process+0x3f2>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2001      	movs	r0, #1
 8000b28:	f004 f852 	bl	8004bd0 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f003 ffdc 	bl	8004afc <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e06c      	b.n	8000c26 <LoraStarter_Process+0x3fe>
 8000b4c:	0801bffc 	.word	0x0801bffc
 8000b50:	0801c004 	.word	0x0801c004
 8000b54:	0801c03c 	.word	0x0801c03c
 8000b58:	0801c060 	.word	0x0801c060
 8000b5c:	0801bf88 	.word	0x0801bf88
 8000b60:	0801c080 	.word	0x0801c080
 8000b64:	0801c098 	.word	0x0801c098
 8000b68:	0801c0b8 	.word	0x0801c0b8
 8000b6c:	0801c0e4 	.word	0x0801c0e4
 8000b70:	0801c120 	.word	0x0801c120
 8000b74:	0801c13c 	.word	0x0801c13c
 8000b78:	0801c148 	.word	0x0801c148
 8000b7c:	0801c160 	.word	0x0801c160
 8000b80:	0801c190 	.word	0x0801c190
 8000b84:	0801c198 	.word	0x0801c198
 8000b88:	0801c1a8 	.word	0x0801c1a8
 8000b8c:	0801c1c0 	.word	0x0801c1c0
 8000b90:	0801c1d8 	.word	0x0801c1d8
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496c      	ldr	r1, [pc, #432]	@ (8000d48 <LoraStarter_Process+0x520>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f004 f81a 	bl	8004bd0 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f003 ffa4 	bl	8004afc <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e034      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a63      	ldr	r2, [pc, #396]	@ (8000d4c <LoraStarter_Process+0x524>)
 8000bbe:	4964      	ldr	r1, [pc, #400]	@ (8000d50 <LoraStarter_Process+0x528>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f004 f805 	bl	8004bd0 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	495f      	ldr	r1, [pc, #380]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f003 fff9 	bl	8004bd0 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da0b      	bge.n	8000c0a <LoraStarter_Process+0x3e2>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	4957      	ldr	r1, [pc, #348]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f003 ffe7 	bl	8004bd0 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2208      	movs	r2, #8
 8000c06:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c08:	e00d      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c0a:	4954      	ldr	r1, [pc, #336]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f003 ffdf 	bl	8004bd0 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	220a      	movs	r2, #10
 8000c16:	701a      	strb	r2, [r3, #0]
                        break;
 8000c18:	e005      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4950      	ldr	r1, [pc, #320]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f003 ffd6 	bl	8004bd0 <LOGGER_SendFormatted>
                        break;
 8000c24:	bf00      	nop
                }
            }
            break;
 8000c26:	e072      	b.n	8000d0e <LoraStarter_Process+0x4e6>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c28:	f003 ff68 	bl	8004afc <TIME_GetCurrentMs>
 8000c2c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <LoraStarter_Process+0x416>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	e001      	b.n	8000c42 <LoraStarter_Process+0x41a>
 8000c3e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d809      	bhi.n	8000c6c <LoraStarter_Process+0x444>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c5c:	4941      	ldr	r1, [pc, #260]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f003 ffb6 	bl	8004bd0 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2205      	movs	r2, #5
 8000c68:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c6a:	e051      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c80:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c84:	4938      	ldr	r1, [pc, #224]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f003 ffa2 	bl	8004bd0 <LOGGER_SendFormatted>
            break;
 8000c8c:	e040      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c8e:	f003 ff35 	bl	8004afc <TIME_GetCurrentMs>
 8000c92:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10b      	bne.n	8000cb6 <LoraStarter_Process+0x48e>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c9e:	4933      	ldr	r1, [pc, #204]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f003 ff95 	bl	8004bd0 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cb4:	e02c      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d30e      	bcc.n	8000ce6 <LoraStarter_Process+0x4be>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 ff7d 	bl	8004bd0 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	701a      	strb	r2, [r3, #0]
            break;
 8000ce4:	e014      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	491e      	ldr	r1, [pc, #120]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f003 ff68 	bl	8004bd0 <LOGGER_SendFormatted>
            break;
 8000d00:	e006      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d02:	bf00      	nop
 8000d04:	e004      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d06:	bf00      	nop
 8000d08:	e002      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0e:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d012      	beq.n	8000d42 <LoraStarter_Process+0x51a>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d1c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fce1 	bl	80006e8 <get_state_name>
 8000d26:	4604      	mov	r4, r0
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4622      	mov	r2, r4
 8000d36:	4910      	ldr	r1, [pc, #64]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f003 ff49 	bl	8004bd0 <LOGGER_SendFormatted>
 8000d3e:	e000      	b.n	8000d42 <LoraStarter_Process+0x51a>
    if (ctx == NULL) return;
 8000d40:	bf00      	nop
    }
}
 8000d42:	37f4      	adds	r7, #244	@ 0xf4
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	0801c1f0 	.word	0x0801c1f0
 8000d4c:	0801c204 	.word	0x0801c204
 8000d50:	0801c214 	.word	0x0801c214
 8000d54:	0801c22c 	.word	0x0801c22c
 8000d58:	0801c244 	.word	0x0801c244
 8000d5c:	0801c260 	.word	0x0801c260
 8000d60:	0801c284 	.word	0x0801c284
 8000d64:	0801c2a0 	.word	0x0801c2a0
 8000d68:	0801c2dc 	.word	0x0801c2dc
 8000d6c:	0801c310 	.word	0x0801c310
 8000d70:	0801c328 	.word	0x0801c328
 8000d74:	0801c350 	.word	0x0801c350
 8000d78:	0801c384 	.word	0x0801c384

08000d7c <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <Network_SendBinary+0x8c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000d94:	f06f 0301 	mvn.w	r3, #1
 8000d98:	e032      	b.n	8000e00 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <Network_SendBinary+0x2a>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000da6:	f06f 0303 	mvn.w	r3, #3
 8000daa:	e029      	b.n	8000e00 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <Network_SendBinary+0x90>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <Network_SendBinary+0x3e>
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d002      	beq.n	8000dbe <Network_SendBinary+0x42>
 8000db8:	e020      	b.n	8000dfc <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e020      	b.n	8000e00 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 fa9f 	bl	8001304 <SDStorage_WriteLog>
 8000dc6:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <Network_SendBinary+0x6a>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dc10      	bgt.n	8000df6 <Network_SendBinary+0x7a>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f113 0f05 	cmn.w	r3, #5
 8000dda:	d009      	beq.n	8000df0 <Network_SendBinary+0x74>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f113 0f02 	cmn.w	r3, #2
 8000de2:	d002      	beq.n	8000dea <Network_SendBinary+0x6e>
 8000de4:	e007      	b.n	8000df6 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e00a      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000dea:	f06f 0301 	mvn.w	r3, #1
 8000dee:	e007      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000df0:	f06f 0303 	mvn.w	r3, #3
 8000df4:	e004      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e001      	b.n	8000e00 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000023c 	.word	0x2000023c
 8000e0c:	2000023d 	.word	0x2000023d

08000e10 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <Network_IsConnected+0x34>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d10f      	bne.n	8000e3c <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <Network_IsConnected+0x38>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <Network_IsConnected+0x22>
 8000e24:	f000 fada 	bl	80013dc <SDStorage_IsReady>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <Network_IsConnected+0x22>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <Network_IsConnected+0x24>
 8000e32:	2300      	movs	r3, #0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	e001      	b.n	8000e40 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	@ (8000e48 <Network_IsConnected+0x38>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000023d 	.word	0x2000023d
 8000e48:	2000023c 	.word	0x2000023c

08000e4c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000e5a:	4925      	ldr	r1, [pc, #148]	@ (8000ef0 <is_response_ok+0xa4>)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f003 feb7 	bl	8004bd0 <LOGGER_SendFormatted>
        return false;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e03f      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4922      	ldr	r1, [pc, #136]	@ (8000ef4 <is_response_ok+0xa8>)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f003 feb0 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000e70:	4921      	ldr	r1, [pc, #132]	@ (8000ef8 <is_response_ok+0xac>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9cc 	bl	8000210 <strcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d105      	bne.n	8000e8a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000e7e:	491f      	ldr	r1, [pc, #124]	@ (8000efc <is_response_ok+0xb0>)
 8000e80:	2000      	movs	r0, #0
 8000e82:	f003 fea5 	bl	8004bd0 <LOGGER_SendFormatted>
        return true;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e02d      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000e8a:	491d      	ldr	r1, [pc, #116]	@ (8000f00 <is_response_ok+0xb4>)
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff f9bf 	bl	8000210 <strcmp>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d105      	bne.n	8000ea4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000e98:	491a      	ldr	r1, [pc, #104]	@ (8000f04 <is_response_ok+0xb8>)
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f003 fe98 	bl	8004bd0 <LOGGER_SendFormatted>
        return true;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e020      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000ea4:	4918      	ldr	r1, [pc, #96]	@ (8000f08 <is_response_ok+0xbc>)
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff f9b2 	bl	8000210 <strcmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d105      	bne.n	8000ebe <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000eb2:	4916      	ldr	r1, [pc, #88]	@ (8000f0c <is_response_ok+0xc0>)
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f003 fe8b 	bl	8004bd0 <LOGGER_SendFormatted>
        return true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e013      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000ebe:	4914      	ldr	r1, [pc, #80]	@ (8000f10 <is_response_ok+0xc4>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f01a fbac 	bl	801b61e <strstr>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4911      	ldr	r1, [pc, #68]	@ (8000f14 <is_response_ok+0xc8>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f003 fe7d 	bl	8004bd0 <LOGGER_SendFormatted>
        return true;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e005      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	490e      	ldr	r1, [pc, #56]	@ (8000f18 <is_response_ok+0xcc>)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f003 fe76 	bl	8004bd0 <LOGGER_SendFormatted>
    return false;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	0801c3a4 	.word	0x0801c3a4
 8000ef4:	0801c3d4 	.word	0x0801c3d4
 8000ef8:	0801c404 	.word	0x0801c404
 8000efc:	0801c408 	.word	0x0801c408
 8000f00:	0801c430 	.word	0x0801c430
 8000f04:	0801c438 	.word	0x0801c438
 8000f08:	0801c46c 	.word	0x0801c46c
 8000f0c:	0801c470 	.word	0x0801c470
 8000f10:	0801c4a4 	.word	0x0801c4a4
 8000f14:	0801c4ac 	.word	0x0801c4ac
 8000f18:	0801c4e0 	.word	0x0801c4e0

08000f1c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f2c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f32:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f3c:	4934      	ldr	r1, [pc, #208]	@ (8001010 <is_join_response_ok+0xf4>)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f003 fe46 	bl	8004bd0 <LOGGER_SendFormatted>
        return false;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e05e      	b.n	8001006 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f48:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f4c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4930      	ldr	r1, [pc, #192]	@ (8001014 <is_join_response_ok+0xf8>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f003 fe3b 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000f5a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f5e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f62:	f107 0008 	add.w	r0, r7, #8
 8000f66:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	f01a fb44 	bl	801b5f8 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000f70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f74:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f86:	e013      	b.n	8000fb0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000f88:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b0d      	cmp	r3, #13
 8000f90:	d004      	beq.n	8000f9c <is_join_response_ok+0x80>
 8000f92:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b0a      	cmp	r3, #10
 8000f9a:	d104      	bne.n	8000fa6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000f9c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
            break;
 8000fa4:	e009      	b.n	8000fba <is_join_response_ok+0x9e>
        }
        pos++;
 8000fa6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fb0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1e6      	bne.n	8000f88 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4916      	ldr	r1, [pc, #88]	@ (8001018 <is_join_response_ok+0xfc>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f925 	bl	8000210 <strcmp>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf0c      	ite	eq
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	2300      	movne	r3, #0
 8000fd0:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000fd4:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d009      	beq.n	8000ff0 <is_join_response_ok+0xd4>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 8000fdc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fe0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <is_join_response_ok+0x100>)
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f003 fdf1 	bl	8004bd0 <LOGGER_SendFormatted>
 8000fee:	e008      	b.n	8001002 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000ff0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ff4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4909      	ldr	r1, [pc, #36]	@ (8001020 <is_join_response_ok+0x104>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f003 fde7 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    
    return result;
 8001002:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001006:	4618      	mov	r0, r3
 8001008:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801c50c 	.word	0x0801c50c
 8001014:	0801c544 	.word	0x0801c544
 8001018:	0801c574 	.word	0x0801c574
 800101c:	0801c580 	.word	0x0801c580
 8001020:	0801c5b0 	.word	0x0801c5b0

08001024 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8001032:	491e      	ldr	r1, [pc, #120]	@ (80010ac <ResponseHandler_ParseSendResponse+0x88>)
 8001034:	2000      	movs	r0, #0
 8001036:	f003 fdcb 	bl	8004bd0 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 800103a:	2303      	movs	r3, #3
 800103c:	e031      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	491b      	ldr	r1, [pc, #108]	@ (80010b0 <ResponseHandler_ParseSendResponse+0x8c>)
 8001042:	2000      	movs	r0, #0
 8001044:	f003 fdc4 	bl	8004bd0 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8001048:	491a      	ldr	r1, [pc, #104]	@ (80010b4 <ResponseHandler_ParseSendResponse+0x90>)
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f01a fae7 	bl	801b61e <strstr>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8001056:	4918      	ldr	r1, [pc, #96]	@ (80010b8 <ResponseHandler_ParseSendResponse+0x94>)
 8001058:	2001      	movs	r0, #1
 800105a:	f003 fdb9 	bl	8004bd0 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e01f      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8001062:	4916      	ldr	r1, [pc, #88]	@ (80010bc <ResponseHandler_ParseSendResponse+0x98>)
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f01a fada 	bl	801b61e <strstr>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001070:	4913      	ldr	r1, [pc, #76]	@ (80010c0 <ResponseHandler_ParseSendResponse+0x9c>)
 8001072:	2002      	movs	r0, #2
 8001074:	f003 fdac 	bl	8004bd0 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e012      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 800107c:	4911      	ldr	r1, [pc, #68]	@ (80010c4 <ResponseHandler_ParseSendResponse+0xa0>)
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff f8c6 	bl	8000210 <strcmp>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d105      	bne.n	8001096 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800108a:	490f      	ldr	r1, [pc, #60]	@ (80010c8 <ResponseHandler_ParseSendResponse+0xa4>)
 800108c:	2002      	movs	r0, #2
 800108e:	f003 fd9f 	bl	8004bd0 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001092:	2302      	movs	r3, #2
 8001094:	e005      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <ResponseHandler_ParseSendResponse+0xa8>)
 800109a:	2000      	movs	r0, #0
 800109c:	f003 fd98 	bl	8004bd0 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 80010a0:	2303      	movs	r3, #3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0801c5dc 	.word	0x0801c5dc
 80010b0:	0801c610 	.word	0x0801c610
 80010b4:	0801c640 	.word	0x0801c640
 80010b8:	0801c658 	.word	0x0801c658
 80010bc:	0801c688 	.word	0x0801c688
 80010c0:	0801c6a4 	.word	0x0801c6a4
 80010c4:	0801c6d8 	.word	0x0801c6d8
 80010c8:	0801c6e0 	.word	0x0801c6e0
 80010cc:	0801c70c 	.word	0x0801c70c

080010d0 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
static uint32_t _get_current_timestamp(void);

int SDStorage_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 80010d6:	496e      	ldr	r1, [pc, #440]	@ (8001290 <SDStorage_Init+0x1c0>)
 80010d8:	2001      	movs	r0, #1
 80010da:	f003 fd79 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // 1. 하드웨어 상태 진단
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 80010de:	486d      	ldr	r0, [pc, #436]	@ (8001294 <SDStorage_Init+0x1c4>)
 80010e0:	f00c fa22 	bl	800d528 <HAL_SD_GetCardState>
 80010e4:	60f8      	str	r0, [r7, #12]
    LOG_INFO("[SDStorage] HAL SD card state: %d", card_state);
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	496b      	ldr	r1, [pc, #428]	@ (8001298 <SDStorage_Init+0x1c8>)
 80010ea:	2001      	movs	r0, #1
 80010ec:	f003 fd70 	bl	8004bd0 <LOGGER_SendFormatted>
    
    DSTATUS disk_status = disk_initialize(0);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f013 fe15 	bl	8014d20 <disk_initialize>
 80010f6:	4603      	mov	r3, r0
 80010f8:	72fb      	strb	r3, [r7, #11]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4967      	ldr	r1, [pc, #412]	@ (800129c <SDStorage_Init+0x1cc>)
 8001100:	2001      	movs	r0, #1
 8001102:	f003 fd65 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00a      	beq.n	8001122 <SDStorage_Init+0x52>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 800110c:	4964      	ldr	r1, [pc, #400]	@ (80012a0 <SDStorage_Init+0x1d0>)
 800110e:	2003      	movs	r0, #3
 8001110:	f003 fd5e 	bl	8004bd0 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001114:	4963      	ldr	r1, [pc, #396]	@ (80012a4 <SDStorage_Init+0x1d4>)
 8001116:	2003      	movs	r0, #3
 8001118:	f003 fd5a 	bl	8004bd0 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	e0b1      	b.n	8001286 <SDStorage_Init+0x1b6>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 8001122:	4961      	ldr	r1, [pc, #388]	@ (80012a8 <SDStorage_Init+0x1d8>)
 8001124:	2001      	movs	r0, #1
 8001126:	f003 fd53 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 약간의 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	@ 0x64
 800112c:	f004 faec 	bl	8005708 <HAL_Delay>
    #endif
    
    // 지연 마운트: 실제 파일 접근 시까지 마운트 지연 (거의 항상 성공)
    FRESULT mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	495e      	ldr	r1, [pc, #376]	@ (80012ac <SDStorage_Init+0x1dc>)
 8001134:	485e      	ldr	r0, [pc, #376]	@ (80012b0 <SDStorage_Init+0x1e0>)
 8001136:	f015 fb5f 	bl	80167f8 <f_mount>
 800113a:	4603      	mov	r3, r0
 800113c:	72bb      	strb	r3, [r7, #10]
    LOG_INFO("[SDStorage] f_mount(deferred) result: %d", mount_result);
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	461a      	mov	r2, r3
 8001142:	495c      	ldr	r1, [pc, #368]	@ (80012b4 <SDStorage_Init+0x1e4>)
 8001144:	2001      	movs	r0, #1
 8001146:	f003 fd43 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // 지연 마운트 성공 시 실제 SD 상태는 첫 파일 작업에서 확인됨
    if (mount_result == FR_OK) {
 800114a:	7abb      	ldrb	r3, [r7, #10]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <SDStorage_Init+0x88>
        LOG_INFO("[SDStorage] Deferred mount successful - SD will be tested on first file operation");
 8001150:	4959      	ldr	r1, [pc, #356]	@ (80012b8 <SDStorage_Init+0x1e8>)
 8001152:	2001      	movs	r0, #1
 8001154:	f003 fd3c 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 8001158:	7abb      	ldrb	r3, [r7, #10]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d062      	beq.n	8001224 <SDStorage_Init+0x154>
        LOG_WARN("[SDStorage] f_mount failed, attempting file system creation...");
 800115e:	4957      	ldr	r1, [pc, #348]	@ (80012bc <SDStorage_Init+0x1ec>)
 8001160:	2002      	movs	r0, #2
 8001162:	f003 fd35 	bl	8004bd0 <LOGGER_SendFormatted>
        
        // 3. 파일시스템 자동 생성 시도 (ST 커뮤니티 가이드 기반)
        if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001166:	7abb      	ldrb	r3, [r7, #10]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d002      	beq.n	8001172 <SDStorage_Init+0xa2>
 800116c:	7abb      	ldrb	r3, [r7, #10]
 800116e:	2b0d      	cmp	r3, #13
 8001170:	d14e      	bne.n	8001210 <SDStorage_Init+0x140>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // FM_ANY로 먼저 시도
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4b51      	ldr	r3, [pc, #324]	@ (80012c0 <SDStorage_Init+0x1f0>)
 800117a:	2200      	movs	r2, #0
 800117c:	2107      	movs	r1, #7
 800117e:	484b      	ldr	r0, [pc, #300]	@ (80012ac <SDStorage_Init+0x1dc>)
 8001180:	f016 f8ca 	bl	8017318 <f_mkfs>
 8001184:	4603      	mov	r3, r0
 8001186:	727b      	strb	r3, [r7, #9]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 8001188:	7a7b      	ldrb	r3, [r7, #9]
 800118a:	461a      	mov	r2, r3
 800118c:	494d      	ldr	r1, [pc, #308]	@ (80012c4 <SDStorage_Init+0x1f4>)
 800118e:	2001      	movs	r0, #1
 8001190:	f003 fd1e 	bl	8004bd0 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001194:	7a7b      	ldrb	r3, [r7, #9]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d021      	beq.n	80011de <SDStorage_Init+0x10e>
                // FAT32 강제 생성 시도 (4096 클러스터 사이즈)
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 800119a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4b47      	ldr	r3, [pc, #284]	@ (80012c0 <SDStorage_Init+0x1f0>)
 80011a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a6:	2102      	movs	r1, #2
 80011a8:	4840      	ldr	r0, [pc, #256]	@ (80012ac <SDStorage_Init+0x1dc>)
 80011aa:	f016 f8b5 	bl	8017318 <f_mkfs>
 80011ae:	4603      	mov	r3, r0
 80011b0:	727b      	strb	r3, [r7, #9]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 80011b2:	7a7b      	ldrb	r3, [r7, #9]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4944      	ldr	r1, [pc, #272]	@ (80012c8 <SDStorage_Init+0x1f8>)
 80011b8:	2001      	movs	r0, #1
 80011ba:	f003 fd09 	bl	8004bd0 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 80011be:	7a7b      	ldrb	r3, [r7, #9]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00c      	beq.n	80011de <SDStorage_Init+0x10e>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 80011c4:	7a7b      	ldrb	r3, [r7, #9]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4940      	ldr	r1, [pc, #256]	@ (80012cc <SDStorage_Init+0x1fc>)
 80011ca:	2003      	movs	r0, #3
 80011cc:	f003 fd00 	bl	8004bd0 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 80011d0:	493f      	ldr	r1, [pc, #252]	@ (80012d0 <SDStorage_Init+0x200>)
 80011d2:	2003      	movs	r0, #3
 80011d4:	f003 fcfc 	bl	8004bd0 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	e053      	b.n	8001286 <SDStorage_Init+0x1b6>
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	4932      	ldr	r1, [pc, #200]	@ (80012ac <SDStorage_Init+0x1dc>)
 80011e2:	4833      	ldr	r0, [pc, #204]	@ (80012b0 <SDStorage_Init+0x1e0>)
 80011e4:	f015 fb08 	bl	80167f8 <f_mount>
 80011e8:	4603      	mov	r3, r0
 80011ea:	72bb      	strb	r3, [r7, #10]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 80011ec:	7abb      	ldrb	r3, [r7, #10]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4938      	ldr	r1, [pc, #224]	@ (80012d4 <SDStorage_Init+0x204>)
 80011f2:	2001      	movs	r0, #1
 80011f4:	f003 fcec 	bl	8004bd0 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 80011f8:	7abb      	ldrb	r3, [r7, #10]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d011      	beq.n	8001222 <SDStorage_Init+0x152>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 80011fe:	7abb      	ldrb	r3, [r7, #10]
 8001200:	461a      	mov	r2, r3
 8001202:	4935      	ldr	r1, [pc, #212]	@ (80012d8 <SDStorage_Init+0x208>)
 8001204:	2003      	movs	r0, #3
 8001206:	f003 fce3 	bl	8004bd0 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	e03a      	b.n	8001286 <SDStorage_Init+0x1b6>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 8001210:	7abb      	ldrb	r3, [r7, #10]
 8001212:	461a      	mov	r2, r3
 8001214:	4931      	ldr	r1, [pc, #196]	@ (80012dc <SDStorage_Init+0x20c>)
 8001216:	2003      	movs	r0, #3
 8001218:	f003 fcda 	bl	8004bd0 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e031      	b.n	8001286 <SDStorage_Init+0x1b6>
        if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001222:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 8001224:	492e      	ldr	r1, [pc, #184]	@ (80012e0 <SDStorage_Init+0x210>)
 8001226:	2001      	movs	r0, #1
 8001228:	f003 fcd2 	bl	8004bd0 <LOGGER_SendFormatted>
    // PC/테스트 환경: 시뮬레이션
    LOG_INFO("[SDStorage] Test environment - simulating successful initialization");
#endif

    // 로그 디렉토리 생성 (지연 마운트 후 첫 실제 파일 작업)
    LOG_INFO("[SDStorage] Creating log directory (first real SD operation)...");
 800122c:	492d      	ldr	r1, [pc, #180]	@ (80012e4 <SDStorage_Init+0x214>)
 800122e:	2001      	movs	r0, #1
 8001230:	f003 fcce 	bl	8004bd0 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 8001234:	f000 f958 	bl	80014e8 <_create_log_directory>
 8001238:	6078      	str	r0, [r7, #4]
    if (dir_result != SDSTORAGE_OK) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00d      	beq.n	800125c <SDStorage_Init+0x18c>
        LOG_ERROR("[SDStorage] Failed to create log directory - SD card may have write issues");
 8001240:	4929      	ldr	r1, [pc, #164]	@ (80012e8 <SDStorage_Init+0x218>)
 8001242:	2003      	movs	r0, #3
 8001244:	f003 fcc4 	bl	8004bd0 <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] Continuing without SD logging - terminal only mode");
 8001248:	4928      	ldr	r1, [pc, #160]	@ (80012ec <SDStorage_Init+0x21c>)
 800124a:	2002      	movs	r0, #2
 800124c:	f003 fcc0 	bl	8004bd0 <LOGGER_SendFormatted>
        // SD 문제가 있어도 계속 진행 (terminal logging만 사용)
        g_sd_ready = false;  // SD 비활성화
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <SDStorage_Init+0x220>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_ERROR;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e014      	b.n	8001286 <SDStorage_Init+0x1b6>
    }
    LOG_INFO("[SDStorage] Log directory created successfully");
 800125c:	4925      	ldr	r1, [pc, #148]	@ (80012f4 <SDStorage_Init+0x224>)
 800125e:	2001      	movs	r0, #1
 8001260:	f003 fcb6 	bl	8004bd0 <LOGGER_SendFormatted>
    
    g_sd_ready = true;
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <SDStorage_Init+0x220>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 800126a:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <SDStorage_Init+0x228>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001270:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001274:	2100      	movs	r1, #0
 8001276:	4821      	ldr	r0, [pc, #132]	@ (80012fc <SDStorage_Init+0x22c>)
 8001278:	f01a f9b6 	bl	801b5e8 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 800127c:	4920      	ldr	r1, [pc, #128]	@ (8001300 <SDStorage_Init+0x230>)
 800127e:	2001      	movs	r0, #1
 8001280:	f003 fca6 	bl	8004bd0 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	0801c73c 	.word	0x0801c73c
 8001294:	20001478 	.word	0x20001478
 8001298:	0801c76c 	.word	0x0801c76c
 800129c:	0801c790 	.word	0x0801c790
 80012a0:	0801c7bc 	.word	0x0801c7bc
 80012a4:	0801c7f4 	.word	0x0801c7f4
 80012a8:	0801c840 	.word	0x0801c840
 80012ac:	200021a4 	.word	0x200021a4
 80012b0:	200021a8 	.word	0x200021a8
 80012b4:	0801c880 	.word	0x0801c880
 80012b8:	0801c8ac 	.word	0x0801c8ac
 80012bc:	0801c900 	.word	0x0801c900
 80012c0:	20000578 	.word	0x20000578
 80012c4:	0801c940 	.word	0x0801c940
 80012c8:	0801c968 	.word	0x0801c968
 80012cc:	0801c990 	.word	0x0801c990
 80012d0:	0801c9bc 	.word	0x0801c9bc
 80012d4:	0801ca00 	.word	0x0801ca00
 80012d8:	0801ca2c 	.word	0x0801ca2c
 80012dc:	0801ca58 	.word	0x0801ca58
 80012e0:	0801ca90 	.word	0x0801ca90
 80012e4:	0801cabc 	.word	0x0801cabc
 80012e8:	0801cafc 	.word	0x0801cafc
 80012ec:	0801cb48 	.word	0x0801cb48
 80012f0:	2000023e 	.word	0x2000023e
 80012f4:	0801cb88 	.word	0x0801cb88
 80012f8:	20000340 	.word	0x20000340
 80012fc:	20000240 	.word	0x20000240
 8001300:	0801cbb8 	.word	0x0801cbb8

08001304 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800130e:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <SDStorage_WriteLog+0xc4>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 800131c:	f06f 0301 	mvn.w	r3, #1
 8001320:	e04e      	b.n	80013c0 <SDStorage_WriteLog+0xbc>
    }
    
    if (data == NULL || size == 0) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SDStorage_WriteLog+0x2a>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 800132e:	f06f 0304 	mvn.w	r3, #4
 8001332:	e045      	b.n	80013c0 <SDStorage_WriteLog+0xbc>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <SDStorage_WriteLog+0xc8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 800133c:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <SDStorage_WriteLog+0xcc>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 8001344:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001348:	d907      	bls.n	800135a <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 800134a:	f000 f853 	bl	80013f4 <SDStorage_CreateNewLogFile>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 8001354:	f06f 0302 	mvn.w	r3, #2
 8001358:	e032      	b.n	80013c0 <SDStorage_WriteLog+0xbc>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs를 사용한 파일 쓰기
    if (!g_file_open) {
 800135a:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <SDStorage_WriteLog+0xd0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f083 0301 	eor.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00d      	beq.n	8001384 <SDStorage_WriteLog+0x80>
        if (f_open(&g_log_file, g_current_log_file, FA_WRITE | FA_OPEN_APPEND) != FR_OK) {
 8001368:	2232      	movs	r2, #50	@ 0x32
 800136a:	4918      	ldr	r1, [pc, #96]	@ (80013cc <SDStorage_WriteLog+0xc8>)
 800136c:	481a      	ldr	r0, [pc, #104]	@ (80013d8 <SDStorage_WriteLog+0xd4>)
 800136e:	f015 faa7 	bl	80168c0 <f_open>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <SDStorage_WriteLog+0x7a>
            return SDSTORAGE_FILE_ERROR;
 8001378:	f06f 0302 	mvn.w	r3, #2
 800137c:	e020      	b.n	80013c0 <SDStorage_WriteLog+0xbc>
        }
        g_file_open = true;
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <SDStorage_WriteLog+0xd0>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
    }
    
    UINT bytes_written;
    if (f_write(&g_log_file, data, size, &bytes_written) != FR_OK) {
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <SDStorage_WriteLog+0xd4>)
 800138e:	f015 fc58 	bl	8016c42 <f_write>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <SDStorage_WriteLog+0x9a>
        return SDSTORAGE_FILE_ERROR;
 8001398:	f06f 0302 	mvn.w	r3, #2
 800139c:	e010      	b.n	80013c0 <SDStorage_WriteLog+0xbc>
    }
    
    if (bytes_written != size) {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d002      	beq.n	80013ac <SDStorage_WriteLog+0xa8>
        return SDSTORAGE_DISK_FULL;
 80013a6:	f06f 0303 	mvn.w	r3, #3
 80013aa:	e009      	b.n	80013c0 <SDStorage_WriteLog+0xbc>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    f_sync(&g_log_file);
 80013ac:	480a      	ldr	r0, [pc, #40]	@ (80013d8 <SDStorage_WriteLog+0xd4>)
 80013ae:	f015 fdec 	bl	8016f8a <f_sync>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <SDStorage_WriteLog+0xcc>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <SDStorage_WriteLog+0xcc>)
 80013bc:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000023e 	.word	0x2000023e
 80013cc:	20000240 	.word	0x20000240
 80013d0:	20000340 	.word	0x20000340
 80013d4:	20000574 	.word	0x20000574
 80013d8:	20000344 	.word	0x20000344

080013dc <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
    return g_sd_ready;
 80013e0:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <SDStorage_IsReady+0x14>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	2000023e 	.word	0x2000023e

080013f4 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 80013fa:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <SDStorage_CreateNewLogFile+0xc4>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f083 0301 	eor.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <SDStorage_CreateNewLogFile+0x1a>
        return SDSTORAGE_NOT_READY;
 8001408:	f06f 0301 	mvn.w	r3, #1
 800140c:	e04f      	b.n	80014ae <SDStorage_CreateNewLogFile+0xba>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <SDStorage_CreateNewLogFile+0xc8>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <SDStorage_CreateNewLogFile+0x2e>
        f_close(&g_log_file);
 8001416:	482a      	ldr	r0, [pc, #168]	@ (80014c0 <SDStorage_CreateNewLogFile+0xcc>)
 8001418:	f015 fe40 	bl	801709c <f_close>
        g_file_open = false;
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <SDStorage_CreateNewLogFile+0xc8>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001426:	4827      	ldr	r0, [pc, #156]	@ (80014c4 <SDStorage_CreateNewLogFile+0xd0>)
 8001428:	f000 f930 	bl	800168c <_generate_log_filename>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <SDStorage_CreateNewLogFile+0x44>
        return SDSTORAGE_ERROR;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e03a      	b.n	80014ae <SDStorage_CreateNewLogFile+0xba>
    }
    
    // 파일 생성 확인 (SD 쓰기 문제로 인한 블로킹 방지)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Attempting to create log file: %s", g_current_log_file);
 8001438:	4a22      	ldr	r2, [pc, #136]	@ (80014c4 <SDStorage_CreateNewLogFile+0xd0>)
 800143a:	4923      	ldr	r1, [pc, #140]	@ (80014c8 <SDStorage_CreateNewLogFile+0xd4>)
 800143c:	2001      	movs	r0, #1
 800143e:	f003 fbc7 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // f_open 호출 전 로깅
    LOG_INFO("[SDStorage] Calling f_open with FA_CREATE_NEW | FA_WRITE...");
 8001442:	4922      	ldr	r1, [pc, #136]	@ (80014cc <SDStorage_CreateNewLogFile+0xd8>)
 8001444:	2001      	movs	r0, #1
 8001446:	f003 fbc3 	bl	8004bd0 <LOGGER_SendFormatted>
    FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE);
 800144a:	2206      	movs	r2, #6
 800144c:	491d      	ldr	r1, [pc, #116]	@ (80014c4 <SDStorage_CreateNewLogFile+0xd0>)
 800144e:	481c      	ldr	r0, [pc, #112]	@ (80014c0 <SDStorage_CreateNewLogFile+0xcc>)
 8001450:	f015 fa36 	bl	80168c0 <f_open>
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	461a      	mov	r2, r3
 800145c:	491c      	ldr	r1, [pc, #112]	@ (80014d0 <SDStorage_CreateNewLogFile+0xdc>)
 800145e:	2001      	movs	r0, #1
 8001460:	f003 fbb6 	bl	8004bd0 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00f      	beq.n	800148a <SDStorage_CreateNewLogFile+0x96>
        LOG_ERROR("[SDStorage] f_open failed: %d - SD write problem detected", open_result);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	461a      	mov	r2, r3
 800146e:	4919      	ldr	r1, [pc, #100]	@ (80014d4 <SDStorage_CreateNewLogFile+0xe0>)
 8001470:	2003      	movs	r0, #3
 8001472:	f003 fbad 	bl	8004bd0 <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001476:	4918      	ldr	r1, [pc, #96]	@ (80014d8 <SDStorage_CreateNewLogFile+0xe4>)
 8001478:	2002      	movs	r0, #2
 800147a:	f003 fba9 	bl	8004bd0 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <SDStorage_CreateNewLogFile+0xc4>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001484:	f06f 0302 	mvn.w	r3, #2
 8001488:	e011      	b.n	80014ae <SDStorage_CreateNewLogFile+0xba>
    }
    
    LOG_INFO("[SDStorage] File created successfully, closing...");
 800148a:	4914      	ldr	r1, [pc, #80]	@ (80014dc <SDStorage_CreateNewLogFile+0xe8>)
 800148c:	2001      	movs	r0, #1
 800148e:	f003 fb9f 	bl	8004bd0 <LOGGER_SendFormatted>
    f_close(&g_log_file);
 8001492:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <SDStorage_CreateNewLogFile+0xcc>)
 8001494:	f015 fe02 	bl	801709c <f_close>
    g_file_open = false;
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <SDStorage_CreateNewLogFile+0xc8>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[SDStorage] File closed, ready for logging");
 800149e:	4910      	ldr	r1, [pc, #64]	@ (80014e0 <SDStorage_CreateNewLogFile+0xec>)
 80014a0:	2001      	movs	r0, #1
 80014a2:	f003 fb95 	bl	8004bd0 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <SDStorage_CreateNewLogFile+0xf0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000023e 	.word	0x2000023e
 80014bc:	20000574 	.word	0x20000574
 80014c0:	20000344 	.word	0x20000344
 80014c4:	20000240 	.word	0x20000240
 80014c8:	0801cbec 	.word	0x0801cbec
 80014cc:	0801cc1c 	.word	0x0801cc1c
 80014d0:	0801cc58 	.word	0x0801cc58
 80014d4:	0801cc78 	.word	0x0801cc78
 80014d8:	0801ccb4 	.word	0x0801ccb4
 80014dc:	0801ccf4 	.word	0x0801ccf4
 80014e0:	0801cd28 	.word	0x0801cd28
 80014e4:	20000340 	.word	0x20000340

080014e8 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32: SD카드 저수준 테스트 먼저 수행
    LOG_INFO("[SDStorage] Testing SD card at HAL level before f_mkdir...");
 80014ee:	4952      	ldr	r1, [pc, #328]	@ (8001638 <_create_log_directory+0x150>)
 80014f0:	2001      	movs	r0, #1
 80014f2:	f003 fb6d 	bl	8004bd0 <LOGGER_SendFormatted>
    
    extern SD_HandleTypeDef hsd1;
    
    // 1. SD카드 읽기 테스트 (섹터 0 읽기)
    static uint8_t read_buffer[512];
    HAL_StatusTypeDef read_result = HAL_SD_ReadBlocks(&hsd1, read_buffer, 0, 1, 5000);
 80014f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	2200      	movs	r2, #0
 8001500:	494e      	ldr	r1, [pc, #312]	@ (800163c <_create_log_directory+0x154>)
 8001502:	484f      	ldr	r0, [pc, #316]	@ (8001640 <_create_log_directory+0x158>)
 8001504:	f00b f90a 	bl	800c71c <HAL_SD_ReadBlocks>
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] HAL_SD_ReadBlocks result: %d", read_result);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	461a      	mov	r2, r3
 8001510:	494c      	ldr	r1, [pc, #304]	@ (8001644 <_create_log_directory+0x15c>)
 8001512:	2001      	movs	r0, #1
 8001514:	f003 fb5c 	bl	8004bd0 <LOGGER_SendFormatted>
    
    if (read_result != HAL_OK) {
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <_create_log_directory+0x44>
        LOG_ERROR("[SDStorage] SD card read test failed - hardware problem");
 800151e:	494a      	ldr	r1, [pc, #296]	@ (8001648 <_create_log_directory+0x160>)
 8001520:	2003      	movs	r0, #3
 8001522:	f003 fb55 	bl	8004bd0 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e080      	b.n	800162e <_create_log_directory+0x146>
    }
    
    // 2. SD카드 쓰기 테스트 (임시 섹터에 쓰기)
    static uint8_t write_buffer[512];
    memset(write_buffer, 0xAA, 512);  // 테스트 패턴
 800152c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001530:	21aa      	movs	r1, #170	@ 0xaa
 8001532:	4846      	ldr	r0, [pc, #280]	@ (800164c <_create_log_directory+0x164>)
 8001534:	f01a f858 	bl	801b5e8 <memset>
    
    LOG_INFO("[SDStorage] Testing SD card write capability...");
 8001538:	4945      	ldr	r1, [pc, #276]	@ (8001650 <_create_log_directory+0x168>)
 800153a:	2001      	movs	r0, #1
 800153c:	f003 fb48 	bl	8004bd0 <LOGGER_SendFormatted>
    HAL_StatusTypeDef write_result = HAL_SD_WriteBlocks(&hsd1, write_buffer, 1000, 1, 5000);
 8001540:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800154c:	493f      	ldr	r1, [pc, #252]	@ (800164c <_create_log_directory+0x164>)
 800154e:	483c      	ldr	r0, [pc, #240]	@ (8001640 <_create_log_directory+0x158>)
 8001550:	f00b fac2 	bl	800cad8 <HAL_SD_WriteBlocks>
 8001554:	4603      	mov	r3, r0
 8001556:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] HAL_SD_WriteBlocks result: %d", write_result);
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	461a      	mov	r2, r3
 800155c:	493d      	ldr	r1, [pc, #244]	@ (8001654 <_create_log_directory+0x16c>)
 800155e:	2001      	movs	r0, #1
 8001560:	f003 fb36 	bl	8004bd0 <LOGGER_SendFormatted>
    
    if (write_result != HAL_OK) {
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <_create_log_directory+0x90>
        LOG_ERROR("[SDStorage] SD card write test failed - card may be write-protected or damaged");
 800156a:	493b      	ldr	r1, [pc, #236]	@ (8001658 <_create_log_directory+0x170>)
 800156c:	2003      	movs	r0, #3
 800156e:	f003 fb2f 	bl	8004bd0 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	e05a      	b.n	800162e <_create_log_directory+0x146>
    }
    
    // 3. 쓰기 검증 (방금 쓴 데이터 읽기)
    static uint8_t verify_buffer[512];
    HAL_StatusTypeDef verify_result = HAL_SD_ReadBlocks(&hsd1, verify_buffer, 1000, 1, 5000);
 8001578:	f241 3388 	movw	r3, #5000	@ 0x1388
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001584:	4935      	ldr	r1, [pc, #212]	@ (800165c <_create_log_directory+0x174>)
 8001586:	482e      	ldr	r0, [pc, #184]	@ (8001640 <_create_log_directory+0x158>)
 8001588:	f00b f8c8 	bl	800c71c <HAL_SD_ReadBlocks>
 800158c:	4603      	mov	r3, r0
 800158e:	717b      	strb	r3, [r7, #5]
    LOG_INFO("[SDStorage] HAL_SD_ReadBlocks(verify) result: %d", verify_result);
 8001590:	797b      	ldrb	r3, [r7, #5]
 8001592:	461a      	mov	r2, r3
 8001594:	4932      	ldr	r1, [pc, #200]	@ (8001660 <_create_log_directory+0x178>)
 8001596:	2001      	movs	r0, #1
 8001598:	f003 fb1a 	bl	8004bd0 <LOGGER_SendFormatted>
    
    if (verify_result == HAL_OK) {
 800159c:	797b      	ldrb	r3, [r7, #5]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d111      	bne.n	80015c6 <_create_log_directory+0xde>
        if (memcmp(write_buffer, verify_buffer, 512) == 0) {
 80015a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a6:	492d      	ldr	r1, [pc, #180]	@ (800165c <_create_log_directory+0x174>)
 80015a8:	4828      	ldr	r0, [pc, #160]	@ (800164c <_create_log_directory+0x164>)
 80015aa:	f01a f80d 	bl	801b5c8 <memcmp>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d104      	bne.n	80015be <_create_log_directory+0xd6>
            LOG_INFO("[SDStorage] ✅ SD card read/write test successful - hardware is OK");
 80015b4:	492b      	ldr	r1, [pc, #172]	@ (8001664 <_create_log_directory+0x17c>)
 80015b6:	2001      	movs	r0, #1
 80015b8:	f003 fb0a 	bl	8004bd0 <LOGGER_SendFormatted>
 80015bc:	e003      	b.n	80015c6 <_create_log_directory+0xde>
        } else {
            LOG_WARN("[SDStorage] ⚠️ SD card data verification failed - possible data corruption");
 80015be:	492a      	ldr	r1, [pc, #168]	@ (8001668 <_create_log_directory+0x180>)
 80015c0:	2002      	movs	r0, #2
 80015c2:	f003 fb05 	bl	8004bd0 <LOGGER_SendFormatted>
        }
    }
    
    // 4. HAL 테스트에서 검증 실패가 있어도 f_mkdir 시도 (블로킹 방지를 위해 스킵)
    if (verify_result != HAL_OK) {
 80015c6:	797b      	ldrb	r3, [r7, #5]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d009      	beq.n	80015e0 <_create_log_directory+0xf8>
        LOG_WARN("[SDStorage] Verify read failed - skipping f_mkdir to avoid blocking");
 80015cc:	4927      	ldr	r1, [pc, #156]	@ (800166c <_create_log_directory+0x184>)
 80015ce:	2002      	movs	r0, #2
 80015d0:	f003 fafe 	bl	8004bd0 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation instead of directory");
 80015d4:	4926      	ldr	r1, [pc, #152]	@ (8001670 <_create_log_directory+0x188>)
 80015d6:	2001      	movs	r0, #1
 80015d8:	f003 fafa 	bl	8004bd0 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 없이도 파일 생성 시도
 80015dc:	2300      	movs	r3, #0
 80015de:	e026      	b.n	800162e <_create_log_directory+0x146>
    }
    
    LOG_INFO("[SDStorage] HAL tests fully passed - attempting f_mkdir for '%s'...", SDSTORAGE_LOG_DIR);
 80015e0:	4a24      	ldr	r2, [pc, #144]	@ (8001674 <_create_log_directory+0x18c>)
 80015e2:	4925      	ldr	r1, [pc, #148]	@ (8001678 <_create_log_directory+0x190>)
 80015e4:	2001      	movs	r0, #1
 80015e6:	f003 faf3 	bl	8004bd0 <LOGGER_SendFormatted>
    FRESULT mkdir_result = f_mkdir(SDSTORAGE_LOG_DIR);
 80015ea:	4822      	ldr	r0, [pc, #136]	@ (8001674 <_create_log_directory+0x18c>)
 80015ec:	f015 fd85 	bl	80170fa <f_mkdir>
 80015f0:	4603      	mov	r3, r0
 80015f2:	713b      	strb	r3, [r7, #4]
    LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 80015f4:	793b      	ldrb	r3, [r7, #4]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4920      	ldr	r1, [pc, #128]	@ (800167c <_create_log_directory+0x194>)
 80015fa:	2001      	movs	r0, #1
 80015fc:	f003 fae8 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001600:	793b      	ldrb	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <_create_log_directory+0x124>
 8001606:	793b      	ldrb	r3, [r7, #4]
 8001608:	2b08      	cmp	r3, #8
 800160a:	d105      	bne.n	8001618 <_create_log_directory+0x130>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 800160c:	491c      	ldr	r1, [pc, #112]	@ (8001680 <_create_log_directory+0x198>)
 800160e:	2001      	movs	r0, #1
 8001610:	f003 fade 	bl	8004bd0 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e00a      	b.n	800162e <_create_log_directory+0x146>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001618:	793b      	ldrb	r3, [r7, #4]
 800161a:	461a      	mov	r2, r3
 800161c:	4919      	ldr	r1, [pc, #100]	@ (8001684 <_create_log_directory+0x19c>)
 800161e:	2003      	movs	r0, #3
 8001620:	f003 fad6 	bl	8004bd0 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001624:	4918      	ldr	r1, [pc, #96]	@ (8001688 <_create_log_directory+0x1a0>)
 8001626:	2001      	movs	r0, #1
 8001628:	f003 fad2 	bl	8004bd0 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 실패해도 루트에 파일 생성 시도
 800162c:	2300      	movs	r3, #0
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	0801cd54 	.word	0x0801cd54
 800163c:	20000778 	.word	0x20000778
 8001640:	20001478 	.word	0x20001478
 8001644:	0801cd90 	.word	0x0801cd90
 8001648:	0801cdbc 	.word	0x0801cdbc
 800164c:	20000978 	.word	0x20000978
 8001650:	0801cdf4 	.word	0x0801cdf4
 8001654:	0801ce24 	.word	0x0801ce24
 8001658:	0801ce50 	.word	0x0801ce50
 800165c:	20000b78 	.word	0x20000b78
 8001660:	0801cea0 	.word	0x0801cea0
 8001664:	0801ced4 	.word	0x0801ced4
 8001668:	0801cf18 	.word	0x0801cf18
 800166c:	0801cf68 	.word	0x0801cf68
 8001670:	0801cfac 	.word	0x0801cfac
 8001674:	0801cfec 	.word	0x0801cfec
 8001678:	0801cff8 	.word	0x0801cff8
 800167c:	0801d03c 	.word	0x0801d03c
 8001680:	0801d05c 	.word	0x0801d05c
 8001684:	0801d094 	.word	0x0801d094
 8001688:	0801d0cc 	.word	0x0801d0cc

0800168c <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	b095      	sub	sp, #84	@ 0x54
 8001690:	af08      	add	r7, sp, #32
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
    uint32_t timestamp = _get_current_timestamp();
 8001696:	f000 f86b 	bl	8001770 <_get_current_timestamp>
 800169a:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 800169c:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 80016a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4825      	ldr	r0, [pc, #148]	@ (8001760 <_generate_log_filename+0xd4>)
 80016ca:	f00a fa3f 	bl	800bb4c <HAL_RTC_GetTime>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11c      	bne.n	800170e <_generate_log_filename+0x82>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	4820      	ldr	r0, [pc, #128]	@ (8001760 <_generate_log_filename+0xd4>)
 80016de:	f00a fb17 	bl	800bd10 <HAL_RTC_GetDate>
 80016e2:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d112      	bne.n	800170e <_generate_log_filename+0x82>
        year = 2000 + sDate.Year;
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80016ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 80016f0:	7a7b      	ldrb	r3, [r7, #9]
 80016f2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 80016f6:	7abb      	ldrb	r3, [r7, #10]
 80016f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 80016fc:	7b3b      	ldrb	r3, [r7, #12]
 80016fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 8001702:	7b7b      	ldrb	r3, [r7, #13]
 8001704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    // 디렉토리가 없을 경우를 대비해 루트에 파일 생성
    int result = snprintf(filename, max_len, 
 800170e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001710:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001714:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001718:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800171c:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 8001720:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 8001724:	4e0f      	ldr	r6, [pc, #60]	@ (8001764 <_generate_log_filename+0xd8>)
 8001726:	9606      	str	r6, [sp, #24]
 8001728:	9505      	str	r5, [sp, #20]
 800172a:	9404      	str	r4, [sp, #16]
 800172c:	9003      	str	r0, [sp, #12]
 800172e:	9102      	str	r1, [sp, #8]
 8001730:	9201      	str	r2, [sp, #4]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <_generate_log_filename+0xdc>)
 8001736:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <_generate_log_filename+0xe0>)
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f019 feb0 	bl	801b4a0 <sniprintf>
 8001740:	6238      	str	r0, [r7, #32]
                         "%s%04d%02d%02d_%02d%02d%02d%s",
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db03      	blt.n	8001750 <_generate_log_filename+0xc4>
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d802      	bhi.n	8001756 <_generate_log_filename+0xca>
        return SDSTORAGE_ERROR;
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	e000      	b.n	8001758 <_generate_log_filename+0xcc>
    }
    
    return SDSTORAGE_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3734      	adds	r7, #52	@ 0x34
 800175c:	46bd      	mov	sp, r7
 800175e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001760:	20001350 	.word	0x20001350
 8001764:	0801d134 	.word	0x0801d134
 8001768:	0801d108 	.word	0x0801d108
 800176c:	0801d114 	.word	0x0801d114

08001770 <_get_current_timestamp>:

static uint32_t _get_current_timestamp(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    return HAL_GetTick();
 8001774:	f003 ffbc 	bl	80056f0 <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
#else
    return (uint32_t)time(NULL);
#endif
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}

0800177e <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <vApplicationGetIdleTaskMemory+0x2c>)
 80017c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <vApplicationGetIdleTaskMemory+0x30>)
 80017c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2280      	movs	r2, #128	@ 0x80
 80017cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000d78 	.word	0x20000d78
 80017e0:	20000dd0 	.word	0x20000dd0

080017e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e4:	b5b0      	push	{r4, r5, r7, lr}
 80017e6:	b08e      	sub	sp, #56	@ 0x38
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 80017ea:	4b70      	ldr	r3, [pc, #448]	@ (80019ac <main+0x1c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a6e      	ldr	r2, [pc, #440]	@ (80019ac <main+0x1c8>)
 80017f2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f4:	f003 ff5b 	bl	80056ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f8:	f000 f900 	bl	80019fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017fc:	f000 f970 	bl	8001ae0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f001 f932 	bl	8002a68 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001804:	f001 ff56 	bl	80036b4 <MX_DMA_Init>
//  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
  MX_ADC3_Init();
 8001808:	f000 f99c 	bl	8001b44 <MX_ADC3_Init>
  MX_CRC_Init();
 800180c:	f000 f9ec 	bl	8001be8 <MX_CRC_Init>
  MX_DCMI_Init();
 8001810:	f000 fa0c 	bl	8001c2c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001814:	f000 fa3e 	bl	8001c94 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001818:	f000 fa6e 	bl	8001cf8 <MX_ETH_Init>
  MX_FMC_Init();
 800181c:	f001 f8d4 	bl	80029c8 <MX_FMC_Init>
  MX_I2C1_Init();
 8001820:	f000 fab8 	bl	8001d94 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001824:	f000 faf6 	bl	8001e14 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001828:	f000 fb34 	bl	8001e94 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800182c:	f000 fbb4 	bl	8001f98 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001830:	f000 fbde 	bl	8001ff0 <MX_RTC_Init>
  MX_SAI2_Init();
 8001834:	f000 fc80 	bl	8002138 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001838:	f000 fd26 	bl	8002288 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800183c:	f000 fd4a 	bl	80022d4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001840:	f000 fd78 	bl	8002334 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001844:	f000 fdb4 	bl	80023b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001848:	f000 fe5e 	bl	8002508 <MX_TIM2_Init>
  MX_TIM3_Init();
 800184c:	f000 fed2 	bl	80025f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001850:	f000 ff48 	bl	80026e4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001854:	f000 ffbe 	bl	80027d4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001858:	f001 f810 	bl	800287c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800185c:	f001 f854 	bl	8002908 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001860:	f001 f882 	bl	8002968 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001864:	4b52      	ldr	r3, [pc, #328]	@ (80019b0 <main+0x1cc>)
 8001866:	4a53      	ldr	r2, [pc, #332]	@ (80019b4 <main+0x1d0>)
 8001868:	675a      	str	r2, [r3, #116]	@ 0x74
 800186a:	4b52      	ldr	r3, [pc, #328]	@ (80019b4 <main+0x1d0>)
 800186c:	4a50      	ldr	r2, [pc, #320]	@ (80019b0 <main+0x1cc>)
 800186e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001870:	4b4f      	ldr	r3, [pc, #316]	@ (80019b0 <main+0x1cc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b4e      	ldr	r3, [pc, #312]	@ (80019b0 <main+0x1cc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0210 	orr.w	r2, r2, #16
 800187e:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001880:	f010 fdf2 	bl	8012468 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001884:	2100      	movs	r1, #0
 8001886:	484c      	ldr	r0, [pc, #304]	@ (80019b8 <main+0x1d4>)
 8001888:	f003 f946 	bl	8004b18 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 800188c:	4b47      	ldr	r3, [pc, #284]	@ (80019ac <main+0x1c8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	494a      	ldr	r1, [pc, #296]	@ (80019bc <main+0x1d8>)
 8001894:	2001      	movs	r0, #1
 8001896:	f003 f99b 	bl	8004bd0 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 800189a:	4b49      	ldr	r3, [pc, #292]	@ (80019c0 <main+0x1dc>)
 800189c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <main+0xca>
 80018a6:	4947      	ldr	r1, [pc, #284]	@ (80019c4 <main+0x1e0>)
 80018a8:	2002      	movs	r0, #2
 80018aa:	f003 f991 	bl	8004bd0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 80018ae:	4b44      	ldr	r3, [pc, #272]	@ (80019c0 <main+0x1dc>)
 80018b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <main+0xde>
 80018ba:	4943      	ldr	r1, [pc, #268]	@ (80019c8 <main+0x1e4>)
 80018bc:	2002      	movs	r0, #2
 80018be:	f003 f987 	bl	8004bd0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 80018c2:	4b3f      	ldr	r3, [pc, #252]	@ (80019c0 <main+0x1dc>)
 80018c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <main+0xf2>
 80018ce:	493f      	ldr	r1, [pc, #252]	@ (80019cc <main+0x1e8>)
 80018d0:	2002      	movs	r0, #2
 80018d2:	f003 f97d 	bl	8004bd0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 80018d6:	4b3a      	ldr	r3, [pc, #232]	@ (80019c0 <main+0x1dc>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <main+0x106>
 80018e2:	493b      	ldr	r1, [pc, #236]	@ (80019d0 <main+0x1ec>)
 80018e4:	2002      	movs	r0, #2
 80018e6:	f003 f973 	bl	8004bd0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80018ea:	4b35      	ldr	r3, [pc, #212]	@ (80019c0 <main+0x1dc>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <main+0x11a>
 80018f6:	4937      	ldr	r1, [pc, #220]	@ (80019d4 <main+0x1f0>)
 80018f8:	2002      	movs	r0, #2
 80018fa:	f003 f969 	bl	8004bd0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 80018fe:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <main+0x1dc>)
 8001900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001902:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <main+0x12e>
 800190a:	4933      	ldr	r1, [pc, #204]	@ (80019d8 <main+0x1f4>)
 800190c:	2002      	movs	r0, #2
 800190e:	f003 f95f 	bl	8004bd0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001912:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <main+0x1dc>)
 8001914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001916:	2b00      	cmp	r3, #0
 8001918:	da03      	bge.n	8001922 <main+0x13e>
 800191a:	4930      	ldr	r1, [pc, #192]	@ (80019dc <main+0x1f8>)
 800191c:	2002      	movs	r0, #2
 800191e:	f003 f957 	bl	8004bd0 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001922:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <main+0x1dc>)
 8001924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001926:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <main+0x1dc>)
 8001928:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192c:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 800192e:	492c      	ldr	r1, [pc, #176]	@ (80019e0 <main+0x1fc>)
 8001930:	2001      	movs	r0, #1
 8001932:	f003 f94d 	bl	8004bd0 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <main+0x200>)
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화
  LOG_INFO("🔄 Initializing UART DMA after SD preparation...");
 800193e:	492a      	ldr	r1, [pc, #168]	@ (80019e8 <main+0x204>)
 8001940:	2001      	movs	r0, #1
 8001942:	f003 f945 	bl	8004bd0 <LOGGER_SendFormatted>
  MX_USART6_DMA_Init();
 8001946:	f001 fedb 	bl	8003700 <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <main+0x1cc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <main+0x1cc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0210 	orr.w	r2, r2, #16
 8001958:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800195a:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <main+0x208>)
 800195c:	f107 041c 	add.w	r4, r7, #28
 8001960:	461d      	mov	r5, r3
 8001962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001966:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800196a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f016 f9ef 	bl	8017d58 <osThreadCreate>
 800197a:	4603      	mov	r3, r0
 800197c:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <main+0x20c>)
 800197e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 8001980:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <main+0x210>)
 8001982:	463c      	mov	r4, r7
 8001984:	461d      	mov	r5, r3
 8001986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800198a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800198e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8001992:	463b      	mov	r3, r7
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f016 f9de 	bl	8017d58 <osThreadCreate>
 800199c:	4603      	mov	r3, r0
 800199e:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <main+0x214>)
 80019a0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019a2:	f016 f9b6 	bl	8017d12 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019a6:	bf00      	nop
 80019a8:	e7fd      	b.n	80019a6 <main+0x1c2>
 80019aa:	bf00      	nop
 80019ac:	20001b28 	.word	0x20001b28
 80019b0:	200017fc 	.word	0x200017fc
 80019b4:	20001ac8 	.word	0x20001ac8
 80019b8:	0801d13c 	.word	0x0801d13c
 80019bc:	0801d144 	.word	0x0801d144
 80019c0:	40023800 	.word	0x40023800
 80019c4:	0801d168 	.word	0x0801d168
 80019c8:	0801d180 	.word	0x0801d180
 80019cc:	0801d198 	.word	0x0801d198
 80019d0:	0801d1b0 	.word	0x0801d1b0
 80019d4:	0801d1c0 	.word	0x0801d1c0
 80019d8:	0801d1d8 	.word	0x0801d1d8
 80019dc:	0801d1f8 	.word	0x0801d1f8
 80019e0:	0801d210 	.word	0x0801d210
 80019e4:	20000014 	.word	0x20000014
 80019e8:	0801d250 	.word	0x0801d250
 80019ec:	0801d290 	.word	0x0801d290
 80019f0:	200018b8 	.word	0x200018b8
 80019f4:	0801d2b8 	.word	0x0801d2b8
 80019f8:	200018bc 	.word	0x200018bc

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	@ 0x50
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	2230      	movs	r2, #48	@ 0x30
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f019 fdec 	bl	801b5e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a20:	f008 fc6a 	bl	800a2f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad8 <SystemClock_Config+0xdc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad8 <SystemClock_Config+0xdc>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <SystemClock_Config+0xdc>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <SystemClock_Config+0xe0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a26      	ldr	r2, [pc, #152]	@ (8001adc <SystemClock_Config+0xe0>)
 8001a42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <SystemClock_Config+0xe0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a54:	2309      	movs	r3, #9
 8001a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2302      	movs	r3, #2
 8001a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a6c:	2319      	movs	r3, #25
 8001a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001a70:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001a74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001a7a:	2309      	movs	r3, #9
 8001a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	4618      	mov	r0, r3
 8001a84:	f008 fd5a 	bl	800a53c <HAL_RCC_OscConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a8e:	f001 fe0b 	bl	80036a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a92:	f008 fc41 	bl	800a318 <HAL_PWREx_EnableOverDrive>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001a9c:	f001 fe04 	bl	80036a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2106      	movs	r1, #6
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 ffe0 	bl	800aa84 <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001aca:	f001 fded 	bl	80036a8 <Error_Handler>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3750      	adds	r7, #80	@ 0x50
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0a2      	sub	sp, #136	@ 0x88
 8001ae4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2284      	movs	r2, #132	@ 0x84
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f019 fd7b 	bl	801b5e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <PeriphCommonClock_Config+0x60>)
 8001af4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001af6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001afa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001afc:	2305      	movs	r3, #5
 8001afe:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001b04:	2303      	movs	r3, #3
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001b12:	2300      	movs	r3, #0
 8001b14:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001b16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001b1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f009 f9c4 	bl	800aeb4 <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001b32:	f001 fdb9 	bl	80036a8 <Error_Handler>
  }
}
 8001b36:	bf00      	nop
 8001b38:	3788      	adds	r7, #136	@ 0x88
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	00b00008 	.word	0x00b00008

08001b44 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b58:	4a21      	ldr	r2, [pc, #132]	@ (8001be0 <MX_ADC3_Init+0x9c>)
 8001b5a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b62:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b84:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <MX_ADC3_Init+0xa0>)
 8001b88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ba4:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001ba6:	f003 fdd3 	bl	8005750 <HAL_ADC_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001bb0:	f001 fd7a 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	@ (8001bdc <MX_ADC3_Init+0x98>)
 8001bc6:	f003 fe07 	bl	80057d8 <HAL_ADC_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001bd0:	f001 fd6a 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20001008 	.word	0x20001008
 8001be0:	40012200 	.word	0x40012200
 8001be4:	0f000001 	.word	0x0f000001

08001be8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <MX_CRC_Init+0x3c>)
 8001bee:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <MX_CRC_Init+0x40>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <MX_CRC_Init+0x3c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <MX_CRC_Init+0x3c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <MX_CRC_Init+0x3c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001c04:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <MX_CRC_Init+0x3c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <MX_CRC_Init+0x3c>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c10:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <MX_CRC_Init+0x3c>)
 8001c12:	f004 f917 	bl	8005e44 <HAL_CRC_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001c1c:	f001 fd44 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20001050 	.word	0x20001050
 8001c28:	40023000 	.word	0x40023000

08001c2c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <MX_DCMI_Init+0x64>)
 8001c34:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001c48:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	@ (8001c8c <MX_DCMI_Init+0x60>)
 8001c7a:	f004 f9d5 	bl	8006028 <HAL_DCMI_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001c84:	f001 fd10 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20001074 	.word	0x20001074
 8001c90:	50050000 	.word	0x50050000

08001c94 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001c9a:	4a16      	ldr	r2, [pc, #88]	@ (8001cf4 <MX_DMA2D_Init+0x60>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001cca:	f004 fe9b 	bl	8006a04 <HAL_DMA2D_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001cd4:	f001 fce8 	bl	80036a8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_DMA2D_Init+0x5c>)
 8001cdc:	f004 ffec 	bl	8006cb8 <HAL_DMA2D_ConfigLayer>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001ce6:	f001 fcdf 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200010c4 	.word	0x200010c4
 8001cf4:	4002b000 	.word	0x4002b000

08001cf8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d7c <MX_ETH_Init+0x84>)
 8001cfe:	4a20      	ldr	r2, [pc, #128]	@ (8001d80 <MX_ETH_Init+0x88>)
 8001d00:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <MX_ETH_Init+0x8c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001d08:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <MX_ETH_Init+0x8c>)
 8001d0a:	2280      	movs	r2, #128	@ 0x80
 8001d0c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <MX_ETH_Init+0x8c>)
 8001d10:	22e1      	movs	r2, #225	@ 0xe1
 8001d12:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <MX_ETH_Init+0x8c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_ETH_Init+0x8c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <MX_ETH_Init+0x8c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <MX_ETH_Init+0x84>)
 8001d28:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <MX_ETH_Init+0x8c>)
 8001d2a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <MX_ETH_Init+0x84>)
 8001d2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d32:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d34:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <MX_ETH_Init+0x84>)
 8001d36:	4a14      	ldr	r2, [pc, #80]	@ (8001d88 <MX_ETH_Init+0x90>)
 8001d38:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <MX_ETH_Init+0x84>)
 8001d3c:	4a13      	ldr	r2, [pc, #76]	@ (8001d8c <MX_ETH_Init+0x94>)
 8001d3e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d40:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <MX_ETH_Init+0x84>)
 8001d42:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001d46:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d48:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <MX_ETH_Init+0x84>)
 8001d4a:	f005 f847 	bl	8006ddc <HAL_ETH_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d54:	f001 fca8 	bl	80036a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d58:	2238      	movs	r2, #56	@ 0x38
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	480c      	ldr	r0, [pc, #48]	@ (8001d90 <MX_ETH_Init+0x98>)
 8001d5e:	f019 fc43 	bl	801b5e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <MX_ETH_Init+0x98>)
 8001d64:	2221      	movs	r2, #33	@ 0x21
 8001d66:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_ETH_Init+0x98>)
 8001d6a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001d6e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d70:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <MX_ETH_Init+0x98>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20001104 	.word	0x20001104
 8001d80:	40028000 	.word	0x40028000
 8001d84:	20001b2c 	.word	0x20001b2c
 8001d88:	20000180 	.word	0x20000180
 8001d8c:	200000e0 	.word	0x200000e0
 8001d90:	20000fd0 	.word	0x20000fd0

08001d94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <MX_I2C1_Init+0x78>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001da0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <MX_I2C1_Init+0x7c>)
 8001da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dce:	480e      	ldr	r0, [pc, #56]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001dd0:	f007 fe4c 	bl	8009a6c <HAL_I2C_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dda:	f001 fc65 	bl	80036a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dde:	2100      	movs	r1, #0
 8001de0:	4809      	ldr	r0, [pc, #36]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001de2:	f007 fedf 	bl	8009ba4 <HAL_I2CEx_ConfigAnalogFilter>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dec:	f001 fc5c 	bl	80036a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001df0:	2100      	movs	r1, #0
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_I2C1_Init+0x74>)
 8001df4:	f007 ff21 	bl	8009c3a <HAL_I2CEx_ConfigDigitalFilter>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dfe:	f001 fc53 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200011b4 	.word	0x200011b4
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	00c0eaff 	.word	0x00c0eaff

08001e14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e8c <MX_I2C3_Init+0x78>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e20:	4a1b      	ldr	r2, [pc, #108]	@ (8001e90 <MX_I2C3_Init+0x7c>)
 8001e22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001e24:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e30:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001e36:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e4e:	480e      	ldr	r0, [pc, #56]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e50:	f007 fe0c 	bl	8009a6c <HAL_I2C_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001e5a:	f001 fc25 	bl	80036a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4809      	ldr	r0, [pc, #36]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e62:	f007 fe9f 	bl	8009ba4 <HAL_I2CEx_ConfigAnalogFilter>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001e6c:	f001 fc1c 	bl	80036a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <MX_I2C3_Init+0x74>)
 8001e74:	f007 fee1 	bl	8009c3a <HAL_I2CEx_ConfigDigitalFilter>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001e7e:	f001 fc13 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20001208 	.word	0x20001208
 8001e8c:	40005c00 	.word	0x40005c00
 8001e90:	00c0eaff 	.word	0x00c0eaff

08001e94 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	@ 0x38
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	2234      	movs	r2, #52	@ 0x34
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f019 fba1 	bl	801b5e8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8001f94 <MX_LTDC_Init+0x100>)
 8001eaa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001eac:	4b38      	ldr	r3, [pc, #224]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001eb2:	4b37      	ldr	r3, [pc, #220]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001eb8:	4b35      	ldr	r3, [pc, #212]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001ec4:	4b32      	ldr	r3, [pc, #200]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ec6:	2228      	movs	r2, #40	@ 0x28
 8001ec8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001eca:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ecc:	2209      	movs	r2, #9
 8001ece:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ed2:	2235      	movs	r2, #53	@ 0x35
 8001ed4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ed8:	220b      	movs	r2, #11
 8001eda:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001edc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ede:	f240 2215 	movw	r2, #533	@ 0x215
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ee6:	f240 121b 	movw	r2, #283	@ 0x11b
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001eee:	f240 2235 	movw	r2, #565	@ 0x235
 8001ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001ef6:	f240 121d 	movw	r2, #285	@ 0x11d
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001efc:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f04:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f0c:	4b20      	ldr	r3, [pc, #128]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f14:	481e      	ldr	r0, [pc, #120]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001f16:	f007 fedc 	bl	8009cd2 <HAL_LTDC_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001f20:	f001 fbc2 	bl	80036a8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001f28:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f2c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001f32:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001f36:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001f3c:	23ff      	movs	r3, #255	@ 0xff
 8001f3e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f48:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001f4e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001f54:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001f5a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <MX_LTDC_Init+0xfc>)
 8001f7a:	f008 f809 	bl	8009f90 <HAL_LTDC_ConfigLayer>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001f84:	f001 fb90 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	3738      	adds	r7, #56	@ 0x38
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000125c 	.word	0x2000125c
 8001f94:	40016800 	.word	0x40016800

08001f98 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001f9e:	4a13      	ldr	r2, [pc, #76]	@ (8001fec <MX_QUADSPI_Init+0x54>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001faa:	2204      	movs	r2, #4
 8001fac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001fb6:	2218      	movs	r2, #24
 8001fb8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001fbc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001fc0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <MX_QUADSPI_Init+0x50>)
 8001fd6:	f008 f9ef 	bl	800a3b8 <HAL_QSPI_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001fe0:	f001 fb62 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20001304 	.word	0x20001304
 8001fec:	a0001000 	.word	0xa0001000

08001ff0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b090      	sub	sp, #64	@ 0x40
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ff6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002006:	2300      	movs	r3, #0
 8002008:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800200a:	463b      	mov	r3, r7
 800200c:	2228      	movs	r2, #40	@ 0x28
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f019 fae9 	bl	801b5e8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002016:	4b46      	ldr	r3, [pc, #280]	@ (8002130 <MX_RTC_Init+0x140>)
 8002018:	4a46      	ldr	r2, [pc, #280]	@ (8002134 <MX_RTC_Init+0x144>)
 800201a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800201c:	4b44      	ldr	r3, [pc, #272]	@ (8002130 <MX_RTC_Init+0x140>)
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002022:	4b43      	ldr	r3, [pc, #268]	@ (8002130 <MX_RTC_Init+0x140>)
 8002024:	227f      	movs	r2, #127	@ 0x7f
 8002026:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002028:	4b41      	ldr	r3, [pc, #260]	@ (8002130 <MX_RTC_Init+0x140>)
 800202a:	22ff      	movs	r2, #255	@ 0xff
 800202c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800202e:	4b40      	ldr	r3, [pc, #256]	@ (8002130 <MX_RTC_Init+0x140>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002034:	4b3e      	ldr	r3, [pc, #248]	@ (8002130 <MX_RTC_Init+0x140>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800203a:	4b3d      	ldr	r3, [pc, #244]	@ (8002130 <MX_RTC_Init+0x140>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002040:	483b      	ldr	r0, [pc, #236]	@ (8002130 <MX_RTC_Init+0x140>)
 8002042:	f009 fc67 	bl	800b914 <HAL_RTC_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800204c:	f001 fb2c 	bl	80036a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002062:	2300      	movs	r3, #0
 8002064:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800206a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	482f      	ldr	r0, [pc, #188]	@ (8002130 <MX_RTC_Init+0x140>)
 8002074:	f009 fcd0 	bl	800ba18 <HAL_RTC_SetTime>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800207e:	f001 fb13 	bl	80036a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800209a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800209e:	2201      	movs	r2, #1
 80020a0:	4619      	mov	r1, r3
 80020a2:	4823      	ldr	r0, [pc, #140]	@ (8002130 <MX_RTC_Init+0x140>)
 80020a4:	f009 fdb0 	bl	800bc08 <HAL_RTC_SetDate>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80020ae:	f001 fafb 	bl	80036a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80020dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020e2:	463b      	mov	r3, r7
 80020e4:	2201      	movs	r2, #1
 80020e6:	4619      	mov	r1, r3
 80020e8:	4811      	ldr	r0, [pc, #68]	@ (8002130 <MX_RTC_Init+0x140>)
 80020ea:	f009 fe61 	bl	800bdb0 <HAL_RTC_SetAlarm>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80020f4:	f001 fad8 	bl	80036a8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80020f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020fe:	463b      	mov	r3, r7
 8002100:	2201      	movs	r2, #1
 8002102:	4619      	mov	r1, r3
 8002104:	480a      	ldr	r0, [pc, #40]	@ (8002130 <MX_RTC_Init+0x140>)
 8002106:	f009 fe53 	bl	800bdb0 <HAL_RTC_SetAlarm>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002110:	f001 faca 	bl	80036a8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002114:	2202      	movs	r2, #2
 8002116:	2100      	movs	r1, #0
 8002118:	4805      	ldr	r0, [pc, #20]	@ (8002130 <MX_RTC_Init+0x140>)
 800211a:	f00a f831 	bl	800c180 <HAL_RTCEx_SetTimeStamp>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002124:	f001 fac0 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3740      	adds	r7, #64	@ 0x40
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20001350 	.word	0x20001350
 8002134:	40002800 	.word	0x40002800

08002138 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800213c:	4b4d      	ldr	r3, [pc, #308]	@ (8002274 <MX_SAI2_Init+0x13c>)
 800213e:	4a4e      	ldr	r2, [pc, #312]	@ (8002278 <MX_SAI2_Init+0x140>)
 8002140:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002142:	4b4c      	ldr	r3, [pc, #304]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002148:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <MX_SAI2_Init+0x13c>)
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800214e:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002150:	2240      	movs	r2, #64	@ 0x40
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002154:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002156:	2200      	movs	r2, #0
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800215a:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <MX_SAI2_Init+0x13c>)
 800215c:	2200      	movs	r2, #0
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002160:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002166:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800216c:	4b41      	ldr	r3, [pc, #260]	@ (8002274 <MX_SAI2_Init+0x13c>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002172:	4b40      	ldr	r3, [pc, #256]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002178:	4b3e      	ldr	r3, [pc, #248]	@ (8002274 <MX_SAI2_Init+0x13c>)
 800217a:	4a40      	ldr	r2, [pc, #256]	@ (800227c <MX_SAI2_Init+0x144>)
 800217c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800217e:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002184:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800218a:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <MX_SAI2_Init+0x13c>)
 800218c:	2200      	movs	r2, #0
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002190:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002192:	2200      	movs	r2, #0
 8002194:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002196:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <MX_SAI2_Init+0x13c>)
 8002198:	2208      	movs	r2, #8
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800219c:	4b35      	ldr	r3, [pc, #212]	@ (8002274 <MX_SAI2_Init+0x13c>)
 800219e:	2201      	movs	r2, #1
 80021a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80021a2:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <MX_SAI2_Init+0x13c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80021a8:	4b32      	ldr	r3, [pc, #200]	@ (8002274 <MX_SAI2_Init+0x13c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <MX_SAI2_Init+0x13c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80021b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <MX_SAI2_Init+0x13c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <MX_SAI2_Init+0x13c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80021c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002274 <MX_SAI2_Init+0x13c>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80021c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <MX_SAI2_Init+0x13c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80021cc:	4829      	ldr	r0, [pc, #164]	@ (8002274 <MX_SAI2_Init+0x13c>)
 80021ce:	f00a f83f 	bl	800c250 <HAL_SAI_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80021d8:	f001 fa66 	bl	80036a8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80021dc:	4b28      	ldr	r3, [pc, #160]	@ (8002280 <MX_SAI2_Init+0x148>)
 80021de:	4a29      	ldr	r2, [pc, #164]	@ (8002284 <MX_SAI2_Init+0x14c>)
 80021e0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80021e2:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <MX_SAI2_Init+0x148>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80021e8:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <MX_SAI2_Init+0x148>)
 80021ea:	2203      	movs	r2, #3
 80021ec:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <MX_SAI2_Init+0x148>)
 80021f0:	2240      	movs	r2, #64	@ 0x40
 80021f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80021f4:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <MX_SAI2_Init+0x148>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80021fa:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <MX_SAI2_Init+0x148>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002202:	2201      	movs	r2, #1
 8002204:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002206:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <MX_SAI2_Init+0x148>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002212:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002218:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <MX_SAI2_Init+0x148>)
 800221a:	2200      	movs	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800221e:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002220:	2200      	movs	r2, #0
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002224:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002226:	2200      	movs	r2, #0
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <MX_SAI2_Init+0x148>)
 800222c:	2208      	movs	r2, #8
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002232:	2201      	movs	r2, #1
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002236:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002238:	2200      	movs	r2, #0
 800223a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800223c:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <MX_SAI2_Init+0x148>)
 800223e:	2200      	movs	r2, #0
 8002240:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002242:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002244:	2200      	movs	r2, #0
 8002246:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002248:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <MX_SAI2_Init+0x148>)
 800224a:	2200      	movs	r2, #0
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800224e:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002250:	2200      	movs	r2, #0
 8002252:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002254:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002256:	2201      	movs	r2, #1
 8002258:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <MX_SAI2_Init+0x148>)
 800225c:	2200      	movs	r2, #0
 800225e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002260:	4807      	ldr	r0, [pc, #28]	@ (8002280 <MX_SAI2_Init+0x148>)
 8002262:	f009 fff5 	bl	800c250 <HAL_SAI_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800226c:	f001 fa1c 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20001370 	.word	0x20001370
 8002278:	40015c04 	.word	0x40015c04
 800227c:	0002ee00 	.word	0x0002ee00
 8002280:	200013f4 	.word	0x200013f4
 8002284:	40015c24 	.word	0x40015c24

08002288 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800228c:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <MX_SDMMC1_SD_Init+0x44>)
 800228e:	4a10      	ldr	r2, [pc, #64]	@ (80022d0 <MX_SDMMC1_SD_Init+0x48>)
 8002290:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <MX_SDMMC1_SD_Init+0x44>)
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <MX_SDMMC1_SD_Init+0x44>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <MX_SDMMC1_SD_Init+0x44>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 80022a4:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <MX_SDMMC1_SD_Init+0x44>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <MX_SDMMC1_SD_Init+0x44>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;  // 클럭 속도 낮춤 (새로운 SD카드 호환성 개선)
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <MX_SDMMC1_SD_Init+0x44>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	@ (80022cc <MX_SDMMC1_SD_Init+0x44>)
 80022b8:	f00a f980 	bl	800c5bc <HAL_SD_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80022c2:	f001 f9f1 	bl	80036a8 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20001478 	.word	0x20001478
 80022d0:	40012c00 	.word	0x40012c00

080022d4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 80022da:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80022de:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80022e0:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80022e6:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80022ec:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80022f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 8002318:	2200      	movs	r2, #0
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800231c:	4804      	ldr	r0, [pc, #16]	@ (8002330 <MX_SPDIFRX_Init+0x5c>)
 800231e:	f00b fb7b 	bl	800da18 <HAL_SPDIFRX_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002328:	f001 f9be 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200014fc 	.word	0x200014fc

08002334 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002338:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <MX_SPI2_Init+0x74>)
 800233a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <MX_SPI2_Init+0x78>)
 800233c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002340:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002344:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002346:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <MX_SPI2_Init+0x74>)
 800234e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002352:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <MX_SPI2_Init+0x74>)
 800235c:	2200      	movs	r2, #0
 800235e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002366:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002368:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <MX_SPI2_Init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <MX_SPI2_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002382:	2207      	movs	r2, #7
 8002384:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <MX_SPI2_Init+0x74>)
 800238e:	2208      	movs	r2, #8
 8002390:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <MX_SPI2_Init+0x74>)
 8002394:	f00b fb9c 	bl	800dad0 <HAL_SPI_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800239e:	f001 f983 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20001548 	.word	0x20001548
 80023ac:	40003800 	.word	0x40003800

080023b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b09a      	sub	sp, #104	@ 0x68
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
 80023e0:	615a      	str	r2, [r3, #20]
 80023e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	222c      	movs	r2, #44	@ 0x2c
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f019 f8fc 	bl	801b5e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f0:	4b43      	ldr	r3, [pc, #268]	@ (8002500 <MX_TIM1_Init+0x150>)
 80023f2:	4a44      	ldr	r2, [pc, #272]	@ (8002504 <MX_TIM1_Init+0x154>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023f6:	4b42      	ldr	r3, [pc, #264]	@ (8002500 <MX_TIM1_Init+0x150>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <MX_TIM1_Init+0x150>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002402:	4b3f      	ldr	r3, [pc, #252]	@ (8002500 <MX_TIM1_Init+0x150>)
 8002404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002408:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <MX_TIM1_Init+0x150>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002410:	4b3b      	ldr	r3, [pc, #236]	@ (8002500 <MX_TIM1_Init+0x150>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002416:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <MX_TIM1_Init+0x150>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800241c:	4838      	ldr	r0, [pc, #224]	@ (8002500 <MX_TIM1_Init+0x150>)
 800241e:	f00b fc02 	bl	800dc26 <HAL_TIM_Base_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002428:	f001 f93e 	bl	80036a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002430:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002432:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002436:	4619      	mov	r1, r3
 8002438:	4831      	ldr	r0, [pc, #196]	@ (8002500 <MX_TIM1_Init+0x150>)
 800243a:	f00b ff35 	bl	800e2a8 <HAL_TIM_ConfigClockSource>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002444:	f001 f930 	bl	80036a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002448:	482d      	ldr	r0, [pc, #180]	@ (8002500 <MX_TIM1_Init+0x150>)
 800244a:	f00b fcbb 	bl	800ddc4 <HAL_TIM_PWM_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002454:	f001 f928 	bl	80036a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002464:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002468:	4619      	mov	r1, r3
 800246a:	4825      	ldr	r0, [pc, #148]	@ (8002500 <MX_TIM1_Init+0x150>)
 800246c:	f00c fbac 	bl	800ebc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002476:	f001 f917 	bl	80036a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247a:	2360      	movs	r3, #96	@ 0x60
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002482:	2300      	movs	r3, #0
 8002484:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002486:	2300      	movs	r3, #0
 8002488:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002496:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800249a:	2200      	movs	r2, #0
 800249c:	4619      	mov	r1, r3
 800249e:	4818      	ldr	r0, [pc, #96]	@ (8002500 <MX_TIM1_Init+0x150>)
 80024a0:	f00b fdee 	bl	800e080 <HAL_TIM_PWM_ConfigChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80024aa:	f001 f8fd 	bl	80036a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4807      	ldr	r0, [pc, #28]	@ (8002500 <MX_TIM1_Init+0x150>)
 80024e4:	f00c fbfe 	bl	800ece4 <HAL_TIMEx_ConfigBreakDeadTime>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80024ee:	f001 f8db 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024f2:	4803      	ldr	r0, [pc, #12]	@ (8002500 <MX_TIM1_Init+0x150>)
 80024f4:	f001 ff40 	bl	8004378 <HAL_TIM_MspPostInit>

}
 80024f8:	bf00      	nop
 80024fa:	3768      	adds	r7, #104	@ 0x68
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200015ac 	.word	0x200015ac
 8002504:	40010000 	.word	0x40010000

08002508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08e      	sub	sp, #56	@ 0x38
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002528:	463b      	mov	r3, r7
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]
 8002536:	615a      	str	r2, [r3, #20]
 8002538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800253a:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 800253c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002540:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002542:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002548:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800254e:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002556:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002562:	4823      	ldr	r0, [pc, #140]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002564:	f00b fb5f 	bl	800dc26 <HAL_TIM_Base_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800256e:	f001 f89b 	bl	80036a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800257c:	4619      	mov	r1, r3
 800257e:	481c      	ldr	r0, [pc, #112]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002580:	f00b fe92 	bl	800e2a8 <HAL_TIM_ConfigClockSource>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800258a:	f001 f88d 	bl	80036a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800258e:	4818      	ldr	r0, [pc, #96]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002590:	f00b fc18 	bl	800ddc4 <HAL_TIM_PWM_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800259a:	f001 f885 	bl	80036a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	4810      	ldr	r0, [pc, #64]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 80025ae:	f00c fb0b 	bl	800ebc8 <HAL_TIMEx_MasterConfigSynchronization>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80025b8:	f001 f876 	bl	80036a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025bc:	2360      	movs	r3, #96	@ 0x60
 80025be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025cc:	463b      	mov	r3, r7
 80025ce:	2200      	movs	r2, #0
 80025d0:	4619      	mov	r1, r3
 80025d2:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 80025d4:	f00b fd54 	bl	800e080 <HAL_TIM_PWM_ConfigChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80025de:	f001 f863 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025e2:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 80025e4:	f001 fec8 	bl	8004378 <HAL_TIM_MspPostInit>

}
 80025e8:	bf00      	nop
 80025ea:	3738      	adds	r7, #56	@ 0x38
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200015f8 	.word	0x200015f8

080025f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	@ 0x38
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002614:	463b      	mov	r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	611a      	str	r2, [r3, #16]
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002626:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <MX_TIM3_Init+0xe8>)
 8002628:	4a2d      	ldr	r2, [pc, #180]	@ (80026e0 <MX_TIM3_Init+0xec>)
 800262a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800262c:	4b2b      	ldr	r3, [pc, #172]	@ (80026dc <MX_TIM3_Init+0xe8>)
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <MX_TIM3_Init+0xe8>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002638:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <MX_TIM3_Init+0xe8>)
 800263a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800263e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002640:	4b26      	ldr	r3, [pc, #152]	@ (80026dc <MX_TIM3_Init+0xe8>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002646:	4b25      	ldr	r3, [pc, #148]	@ (80026dc <MX_TIM3_Init+0xe8>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800264c:	4823      	ldr	r0, [pc, #140]	@ (80026dc <MX_TIM3_Init+0xe8>)
 800264e:	f00b faea 	bl	800dc26 <HAL_TIM_Base_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002658:	f001 f826 	bl	80036a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002666:	4619      	mov	r1, r3
 8002668:	481c      	ldr	r0, [pc, #112]	@ (80026dc <MX_TIM3_Init+0xe8>)
 800266a:	f00b fe1d 	bl	800e2a8 <HAL_TIM_ConfigClockSource>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002674:	f001 f818 	bl	80036a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002678:	4818      	ldr	r0, [pc, #96]	@ (80026dc <MX_TIM3_Init+0xe8>)
 800267a:	f00b fba3 	bl	800ddc4 <HAL_TIM_PWM_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002684:	f001 f810 	bl	80036a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	4619      	mov	r1, r3
 8002696:	4811      	ldr	r0, [pc, #68]	@ (80026dc <MX_TIM3_Init+0xe8>)
 8002698:	f00c fa96 	bl	800ebc8 <HAL_TIMEx_MasterConfigSynchronization>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80026a2:	f001 f801 	bl	80036a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a6:	2360      	movs	r3, #96	@ 0x60
 80026a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b6:	463b      	mov	r3, r7
 80026b8:	2200      	movs	r2, #0
 80026ba:	4619      	mov	r1, r3
 80026bc:	4807      	ldr	r0, [pc, #28]	@ (80026dc <MX_TIM3_Init+0xe8>)
 80026be:	f00b fcdf 	bl	800e080 <HAL_TIM_PWM_ConfigChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80026c8:	f000 ffee 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026cc:	4803      	ldr	r0, [pc, #12]	@ (80026dc <MX_TIM3_Init+0xe8>)
 80026ce:	f001 fe53 	bl	8004378 <HAL_TIM_MspPostInit>

}
 80026d2:	bf00      	nop
 80026d4:	3738      	adds	r7, #56	@ 0x38
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20001644 	.word	0x20001644
 80026e0:	40000400 	.word	0x40000400

080026e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08e      	sub	sp, #56	@ 0x38
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002704:	463b      	mov	r3, r7
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002716:	4b2d      	ldr	r3, [pc, #180]	@ (80027cc <MX_TIM5_Init+0xe8>)
 8002718:	4a2d      	ldr	r2, [pc, #180]	@ (80027d0 <MX_TIM5_Init+0xec>)
 800271a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800271c:	4b2b      	ldr	r3, [pc, #172]	@ (80027cc <MX_TIM5_Init+0xe8>)
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002722:	4b2a      	ldr	r3, [pc, #168]	@ (80027cc <MX_TIM5_Init+0xe8>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <MX_TIM5_Init+0xe8>)
 800272a:	f04f 32ff 	mov.w	r2, #4294967295
 800272e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002730:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <MX_TIM5_Init+0xe8>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002736:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <MX_TIM5_Init+0xe8>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800273c:	4823      	ldr	r0, [pc, #140]	@ (80027cc <MX_TIM5_Init+0xe8>)
 800273e:	f00b fa72 	bl	800dc26 <HAL_TIM_Base_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002748:	f000 ffae 	bl	80036a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002756:	4619      	mov	r1, r3
 8002758:	481c      	ldr	r0, [pc, #112]	@ (80027cc <MX_TIM5_Init+0xe8>)
 800275a:	f00b fda5 	bl	800e2a8 <HAL_TIM_ConfigClockSource>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002764:	f000 ffa0 	bl	80036a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002768:	4818      	ldr	r0, [pc, #96]	@ (80027cc <MX_TIM5_Init+0xe8>)
 800276a:	f00b fb2b 	bl	800ddc4 <HAL_TIM_PWM_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002774:	f000 ff98 	bl	80036a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	4619      	mov	r1, r3
 8002786:	4811      	ldr	r0, [pc, #68]	@ (80027cc <MX_TIM5_Init+0xe8>)
 8002788:	f00c fa1e 	bl	800ebc8 <HAL_TIMEx_MasterConfigSynchronization>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002792:	f000 ff89 	bl	80036a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002796:	2360      	movs	r3, #96	@ 0x60
 8002798:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027a6:	463b      	mov	r3, r7
 80027a8:	220c      	movs	r2, #12
 80027aa:	4619      	mov	r1, r3
 80027ac:	4807      	ldr	r0, [pc, #28]	@ (80027cc <MX_TIM5_Init+0xe8>)
 80027ae:	f00b fc67 	bl	800e080 <HAL_TIM_PWM_ConfigChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80027b8:	f000 ff76 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80027bc:	4803      	ldr	r0, [pc, #12]	@ (80027cc <MX_TIM5_Init+0xe8>)
 80027be:	f001 fddb 	bl	8004378 <HAL_TIM_MspPostInit>

}
 80027c2:	bf00      	nop
 80027c4:	3738      	adds	r7, #56	@ 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20001690 	.word	0x20001690
 80027d0:	40000c00 	.word	0x40000c00

080027d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <MX_TIM8_Init+0xa0>)
 80027f4:	4a20      	ldr	r2, [pc, #128]	@ (8002878 <MX_TIM8_Init+0xa4>)
 80027f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <MX_TIM8_Init+0xa0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <MX_TIM8_Init+0xa0>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <MX_TIM8_Init+0xa0>)
 8002806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800280a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <MX_TIM8_Init+0xa0>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <MX_TIM8_Init+0xa0>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002818:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <MX_TIM8_Init+0xa0>)
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800281e:	4815      	ldr	r0, [pc, #84]	@ (8002874 <MX_TIM8_Init+0xa0>)
 8002820:	f00b fa01 	bl	800dc26 <HAL_TIM_Base_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800282a:	f000 ff3d 	bl	80036a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4619      	mov	r1, r3
 800283a:	480e      	ldr	r0, [pc, #56]	@ (8002874 <MX_TIM8_Init+0xa0>)
 800283c:	f00b fd34 	bl	800e2a8 <HAL_TIM_ConfigClockSource>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002846:	f000 ff2f 	bl	80036a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4806      	ldr	r0, [pc, #24]	@ (8002874 <MX_TIM8_Init+0xa0>)
 800285c:	f00c f9b4 	bl	800ebc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002866:	f000 ff1f 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200016dc 	.word	0x200016dc
 8002878:	40010400 	.word	0x40010400

0800287c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
 8002890:	615a      	str	r2, [r3, #20]
 8002892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002894:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <MX_TIM12_Init+0x84>)
 8002896:	4a1b      	ldr	r2, [pc, #108]	@ (8002904 <MX_TIM12_Init+0x88>)
 8002898:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800289a:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <MX_TIM12_Init+0x84>)
 800289c:	2200      	movs	r2, #0
 800289e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <MX_TIM12_Init+0x84>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80028a6:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <MX_TIM12_Init+0x84>)
 80028a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028ac:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ae:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <MX_TIM12_Init+0x84>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b4:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <MX_TIM12_Init+0x84>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80028ba:	4811      	ldr	r0, [pc, #68]	@ (8002900 <MX_TIM12_Init+0x84>)
 80028bc:	f00b fa82 	bl	800ddc4 <HAL_TIM_PWM_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80028c6:	f000 feef 	bl	80036a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ca:	2360      	movs	r3, #96	@ 0x60
 80028cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2200      	movs	r2, #0
 80028de:	4619      	mov	r1, r3
 80028e0:	4807      	ldr	r0, [pc, #28]	@ (8002900 <MX_TIM12_Init+0x84>)
 80028e2:	f00b fbcd 	bl	800e080 <HAL_TIM_PWM_ConfigChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80028ec:	f000 fedc 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80028f0:	4803      	ldr	r0, [pc, #12]	@ (8002900 <MX_TIM12_Init+0x84>)
 80028f2:	f001 fd41 	bl	8004378 <HAL_TIM_MspPostInit>

}
 80028f6:	bf00      	nop
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20001728 	.word	0x20001728
 8002904:	40001800 	.word	0x40001800

08002908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800290c:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 800290e:	4a15      	ldr	r2, [pc, #84]	@ (8002964 <MX_USART1_UART_Init+0x5c>)
 8002910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 8002914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002926:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002944:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800294a:	4805      	ldr	r0, [pc, #20]	@ (8002960 <MX_USART1_UART_Init+0x58>)
 800294c:	f00c fa66 	bl	800ee1c <HAL_UART_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002956:	f000 fea7 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20001774 	.word	0x20001774
 8002964:	40011000 	.word	0x40011000

08002968 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 800296e:	4a15      	ldr	r2, [pc, #84]	@ (80029c4 <MX_USART6_UART_Init+0x5c>)
 8002970:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 8002974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002978:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002986:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 800298e:	220c      	movs	r2, #12
 8002990:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800299e:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80029aa:	4805      	ldr	r0, [pc, #20]	@ (80029c0 <MX_USART6_UART_Init+0x58>)
 80029ac:	f00c fa36 	bl	800ee1c <HAL_UART_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80029b6:	f000 fe77 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200017fc 	.word	0x200017fc
 80029c4:	40011400 	.word	0x40011400

080029c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	615a      	str	r2, [r3, #20]
 80029de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80029e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a60 <MX_FMC_Init+0x98>)
 80029e2:	4a20      	ldr	r2, [pc, #128]	@ (8002a64 <MX_FMC_Init+0x9c>)
 80029e4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80029e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <MX_FMC_Init+0x98>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80029ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <MX_FMC_Init+0x98>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80029f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <MX_FMC_Init+0x98>)
 80029f4:	2204      	movs	r2, #4
 80029f6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <MX_FMC_Init+0x98>)
 80029fa:	2210      	movs	r2, #16
 80029fc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80029fe:	4b18      	ldr	r3, [pc, #96]	@ (8002a60 <MX_FMC_Init+0x98>)
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002a04:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <MX_FMC_Init+0x98>)
 8002a06:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a0a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <MX_FMC_Init+0x98>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002a12:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <MX_FMC_Init+0x98>)
 8002a14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a18:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <MX_FMC_Init+0x98>)
 8002a1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002a22:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <MX_FMC_Init+0x98>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002a30:	2304      	movs	r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002a34:	2307      	movs	r3, #7
 8002a36:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002a40:	2302      	movs	r3, #2
 8002a42:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <MX_FMC_Init+0x98>)
 8002a4a:	f00a ffb1 	bl	800d9b0 <HAL_SDRAM_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002a54:	f000 fe28 	bl	80036a8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002a58:	bf00      	nop
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20001884 	.word	0x20001884
 8002a64:	a0000140 	.word	0xa0000140

08002a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b090      	sub	sp, #64	@ 0x40
 8002a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	60da      	str	r2, [r3, #12]
 8002a7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a7e:	4bb0      	ldr	r3, [pc, #704]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4aaf      	ldr	r2, [pc, #700]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002a84:	f043 0310 	orr.w	r3, r3, #16
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4bad      	ldr	r3, [pc, #692]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a96:	4baa      	ldr	r3, [pc, #680]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4aa9      	ldr	r2, [pc, #676]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4ba7      	ldr	r3, [pc, #668]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	4ba4      	ldr	r3, [pc, #656]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4aa3      	ldr	r2, [pc, #652]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4ba1      	ldr	r3, [pc, #644]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac6:	4b9e      	ldr	r3, [pc, #632]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	4a9d      	ldr	r2, [pc, #628]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad2:	4b9b      	ldr	r3, [pc, #620]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ade:	4b98      	ldr	r3, [pc, #608]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	4a97      	ldr	r2, [pc, #604]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aea:	4b95      	ldr	r3, [pc, #596]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b92      	ldr	r3, [pc, #584]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a91      	ldr	r2, [pc, #580]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b8f      	ldr	r3, [pc, #572]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b0e:	4b8c      	ldr	r3, [pc, #560]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	4a8b      	ldr	r2, [pc, #556]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1a:	4b89      	ldr	r3, [pc, #548]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b26:	4b86      	ldr	r3, [pc, #536]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	4a85      	ldr	r2, [pc, #532]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b32:	4b83      	ldr	r3, [pc, #524]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b3e:	4b80      	ldr	r3, [pc, #512]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	4a7f      	ldr	r2, [pc, #508]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b56:	4b7a      	ldr	r3, [pc, #488]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	4a79      	ldr	r2, [pc, #484]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b5c:	f043 0320 	orr.w	r3, r3, #32
 8002b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b62:	4b77      	ldr	r3, [pc, #476]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b6e:	4b74      	ldr	r3, [pc, #464]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a73      	ldr	r2, [pc, #460]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b71      	ldr	r3, [pc, #452]	@ (8002d40 <MX_GPIO_Init+0x2d8>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b86:	2201      	movs	r2, #1
 8002b88:	2120      	movs	r1, #32
 8002b8a:	486e      	ldr	r0, [pc, #440]	@ (8002d44 <MX_GPIO_Init+0x2dc>)
 8002b8c:	f004 fe20 	bl	80077d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	210c      	movs	r1, #12
 8002b94:	486c      	ldr	r0, [pc, #432]	@ (8002d48 <MX_GPIO_Init+0x2e0>)
 8002b96:	f004 fe1b 	bl	80077d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2108      	movs	r1, #8
 8002b9e:	486b      	ldr	r0, [pc, #428]	@ (8002d4c <MX_GPIO_Init+0x2e4>)
 8002ba0:	f004 fe16 	bl	80077d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002baa:	4867      	ldr	r0, [pc, #412]	@ (8002d48 <MX_GPIO_Init+0x2e0>)
 8002bac:	f004 fe10 	bl	80077d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bb6:	4866      	ldr	r0, [pc, #408]	@ (8002d50 <MX_GPIO_Init+0x2e8>)
 8002bb8:	f004 fe0a 	bl	80077d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	21c8      	movs	r1, #200	@ 0xc8
 8002bc0:	4864      	ldr	r0, [pc, #400]	@ (8002d54 <MX_GPIO_Init+0x2ec>)
 8002bc2:	f004 fe05 	bl	80077d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	485f      	ldr	r0, [pc, #380]	@ (8002d58 <MX_GPIO_Init+0x2f0>)
 8002bda:	f004 fc4d 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002bde:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4858      	ldr	r0, [pc, #352]	@ (8002d5c <MX_GPIO_Init+0x2f4>)
 8002bfc:	f004 fc3c 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c12:	4619      	mov	r1, r3
 8002c14:	4852      	ldr	r0, [pc, #328]	@ (8002d60 <MX_GPIO_Init+0x2f8>)
 8002c16:	f004 fc2f 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002c1a:	2340      	movs	r3, #64	@ 0x40
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c1e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002c22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4845      	ldr	r0, [pc, #276]	@ (8002d44 <MX_GPIO_Init+0x2dc>)
 8002c30:	f004 fc22 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002c34:	2320      	movs	r3, #32
 8002c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c48:	4619      	mov	r1, r3
 8002c4a:	483e      	ldr	r0, [pc, #248]	@ (8002d44 <MX_GPIO_Init+0x2dc>)
 8002c4c:	f004 fc14 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002c50:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c66:	4619      	mov	r1, r3
 8002c68:	4837      	ldr	r0, [pc, #220]	@ (8002d48 <MX_GPIO_Init+0x2e0>)
 8002c6a:	f004 fc05 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c74:	2300      	movs	r3, #0
 8002c76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c80:	4619      	mov	r1, r3
 8002c82:	4838      	ldr	r0, [pc, #224]	@ (8002d64 <MX_GPIO_Init+0x2fc>)
 8002c84:	f004 fbf8 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c94:	2300      	movs	r3, #0
 8002c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	482b      	ldr	r0, [pc, #172]	@ (8002d4c <MX_GPIO_Init+0x2e4>)
 8002ca0:	f004 fbea 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4823      	ldr	r0, [pc, #140]	@ (8002d44 <MX_GPIO_Init+0x2dc>)
 8002cb8:	f004 fbde 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002cbc:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	481f      	ldr	r0, [pc, #124]	@ (8002d50 <MX_GPIO_Init+0x2e8>)
 8002cd2:	f004 fbd1 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cec:	4619      	mov	r1, r3
 8002cee:	4818      	ldr	r0, [pc, #96]	@ (8002d50 <MX_GPIO_Init+0x2e8>)
 8002cf0:	f004 fbc2 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002cf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002cfa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d08:	4619      	mov	r1, r3
 8002d0a:	480f      	ldr	r0, [pc, #60]	@ (8002d48 <MX_GPIO_Init+0x2e0>)
 8002d0c:	f004 fbb4 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d10:	2310      	movs	r3, #16
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d20:	230a      	movs	r3, #10
 8002d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4809      	ldr	r0, [pc, #36]	@ (8002d50 <MX_GPIO_Init+0x2e8>)
 8002d2c:	f004 fba4 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002d30:	23c8      	movs	r3, #200	@ 0xc8
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d34:	2301      	movs	r3, #1
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d3c:	e014      	b.n	8002d68 <MX_GPIO_Init+0x300>
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40022800 	.word	0x40022800
 8002d50:	40021c00 	.word	0x40021c00
 8002d54:	40021800 	.word	0x40021800
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40022400 	.word	0x40022400
 8002d64:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d70:	4619      	mov	r1, r3
 8002d72:	4819      	ldr	r0, [pc, #100]	@ (8002dd8 <MX_GPIO_Init+0x370>)
 8002d74:	f004 fb80 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002d78:	2305      	movs	r3, #5
 8002d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d88:	230a      	movs	r3, #10
 8002d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d90:	4619      	mov	r1, r3
 8002d92:	4812      	ldr	r0, [pc, #72]	@ (8002ddc <MX_GPIO_Init+0x374>)
 8002d94:	f004 fb70 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002d98:	2304      	movs	r3, #4
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002da4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002da8:	4619      	mov	r1, r3
 8002daa:	480b      	ldr	r0, [pc, #44]	@ (8002dd8 <MX_GPIO_Init+0x370>)
 8002dac:	f004 fb64 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002db0:	2328      	movs	r3, #40	@ 0x28
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002dc0:	230a      	movs	r3, #10
 8002dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4805      	ldr	r0, [pc, #20]	@ (8002de0 <MX_GPIO_Init+0x378>)
 8002dcc:	f004 fb54 	bl	8007478 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002dd0:	bf00      	nop
 8002dd2:	3740      	adds	r7, #64	@ 0x40
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021800 	.word	0x40021800
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020000 	.word	0x40020000

08002de4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b0a4      	sub	sp, #144	@ 0x90
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002dec:	f017 ffa2 	bl	801ad34 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 8002df0:	49b0      	ldr	r1, [pc, #704]	@ (80030b4 <StartDefaultTask+0x2d0>)
 8002df2:	2001      	movs	r0, #1
 8002df4:	f001 feec 	bl	8004bd0 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8002df8:	49af      	ldr	r1, [pc, #700]	@ (80030b8 <StartDefaultTask+0x2d4>)
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f001 fee8 	bl	8004bd0 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8002e00:	4bae      	ldr	r3, [pc, #696]	@ (80030bc <StartDefaultTask+0x2d8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4aae      	ldr	r2, [pc, #696]	@ (80030c0 <StartDefaultTask+0x2dc>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	49ad      	ldr	r1, [pc, #692]	@ (80030c4 <StartDefaultTask+0x2e0>)
 8002e10:	2001      	movs	r0, #1
 8002e12:	f001 fedd 	bl	8004bd0 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8002e16:	49ac      	ldr	r1, [pc, #688]	@ (80030c8 <StartDefaultTask+0x2e4>)
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f001 fed9 	bl	8004bd0 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8002e1e:	49ab      	ldr	r1, [pc, #684]	@ (80030cc <StartDefaultTask+0x2e8>)
 8002e20:	2001      	movs	r0, #1
 8002e22:	f001 fed5 	bl	8004bd0 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8002e26:	49aa      	ldr	r1, [pc, #680]	@ (80030d0 <StartDefaultTask+0x2ec>)
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f001 fed1 	bl	8004bd0 <LOGGER_SendFormatted>
  
  // FreeRTOS 커널 시작 후 SD카드 초기화
  LOG_INFO("📤 [TX_TASK] Initializing SD card storage (after FreeRTOS start)...");
 8002e2e:	49a9      	ldr	r1, [pc, #676]	@ (80030d4 <StartDefaultTask+0x2f0>)
 8002e30:	2001      	movs	r0, #1
 8002e32:	f001 fecd 	bl	8004bd0 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 8002e36:	f7fe f94b 	bl	80010d0 <SDStorage_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4aa6      	ldr	r2, [pc, #664]	@ (80030d8 <StartDefaultTask+0x2f4>)
 8002e3e:	6013      	str	r3, [r2, #0]
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8002e40:	4ba5      	ldr	r3, [pc, #660]	@ (80030d8 <StartDefaultTask+0x2f4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <StartDefaultTask+0x6e>
    LOG_INFO("📤 [TX_TASK] ✅ SD card initialized successfully - dual logging enabled");
 8002e48:	49a4      	ldr	r1, [pc, #656]	@ (80030dc <StartDefaultTask+0x2f8>)
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f001 fec0 	bl	8004bd0 <LOGGER_SendFormatted>
 8002e50:	e006      	b.n	8002e60 <StartDefaultTask+0x7c>
  } else {
    LOG_WARN("📤 [TX_TASK] ⚠️ SD card init failed (code: %d) - terminal logging only", g_sd_initialization_result);
 8002e52:	4ba1      	ldr	r3, [pc, #644]	@ (80030d8 <StartDefaultTask+0x2f4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	49a1      	ldr	r1, [pc, #644]	@ (80030e0 <StartDefaultTask+0x2fc>)
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	f001 feb8 	bl	8004bd0 <LOGGER_SendFormatted>
  }

  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 8002e60:	49a0      	ldr	r1, [pc, #640]	@ (80030e4 <StartDefaultTask+0x300>)
 8002e62:	2001      	movs	r0, #1
 8002e64:	f001 feb4 	bl	8004bd0 <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 8002e68:	489f      	ldr	r0, [pc, #636]	@ (80030e8 <StartDefaultTask+0x304>)
 8002e6a:	f001 ff4d 	bl	8004d08 <UART_Connect>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (uart_status == UART_STATUS_OK) {
 8002e74:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <StartDefaultTask+0xac>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 8002e7c:	499b      	ldr	r1, [pc, #620]	@ (80030ec <StartDefaultTask+0x308>)
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f001 fea6 	bl	8004bd0 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 8002e84:	f002 f816 	bl	8004eb4 <UART_IsConnected>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d035      	beq.n	8002efa <StartDefaultTask+0x116>
 8002e8e:	e00b      	b.n	8002ea8 <StartDefaultTask+0xc4>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8002e90:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e94:	461a      	mov	r2, r3
 8002e96:	4996      	ldr	r1, [pc, #600]	@ (80030f0 <StartDefaultTask+0x30c>)
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f001 fe99 	bl	8004bd0 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002e9e:	4995      	ldr	r1, [pc, #596]	@ (80030f4 <StartDefaultTask+0x310>)
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	f001 fe95 	bl	8004bd0 <LOGGER_SendFormatted>
    goto idle_loop;
 8002ea6:	e22b      	b.n	8003300 <StartDefaultTask+0x51c>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 8002ea8:	4993      	ldr	r1, [pc, #588]	@ (80030f8 <StartDefaultTask+0x314>)
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f001 fe90 	bl	8004bd0 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8002eb0:	4992      	ldr	r1, [pc, #584]	@ (80030fc <StartDefaultTask+0x318>)
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f001 fe8c 	bl	8004bd0 <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 8002eb8:	4991      	ldr	r1, [pc, #580]	@ (8003100 <StartDefaultTask+0x31c>)
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f001 fe88 	bl	8004bd0 <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8002ec0:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002ec4:	f014 ff94 	bl	8017df0 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 8002ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ecc:	498d      	ldr	r1, [pc, #564]	@ (8003104 <StartDefaultTask+0x320>)
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fc62 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 8002ed4:	498c      	ldr	r1, [pc, #560]	@ (8003108 <StartDefaultTask+0x324>)
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f001 fe7a 	bl	8004bd0 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8002edc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ede:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4989      	ldr	r1, [pc, #548]	@ (800310c <StartDefaultTask+0x328>)
 8002ee8:	2001      	movs	r0, #1
 8002eea:	f001 fe71 	bl	8004bd0 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 기본 쓰기 기능 테스트
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8002eee:	4b7a      	ldr	r3, [pc, #488]	@ (80030d8 <StartDefaultTask+0x2f4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 8176 	bne.w	80031e4 <StartDefaultTask+0x400>
 8002ef8:	e008      	b.n	8002f0c <StartDefaultTask+0x128>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 8002efa:	4985      	ldr	r1, [pc, #532]	@ (8003110 <StartDefaultTask+0x32c>)
 8002efc:	2003      	movs	r0, #3
 8002efe:	f001 fe67 	bl	8004bd0 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002f02:	497c      	ldr	r1, [pc, #496]	@ (80030f4 <StartDefaultTask+0x310>)
 8002f04:	2003      	movs	r0, #3
 8002f06:	f001 fe63 	bl	8004bd0 <LOGGER_SendFormatted>
    goto idle_loop;
 8002f0a:	e1f9      	b.n	8003300 <StartDefaultTask+0x51c>
    LOG_INFO("🧪 Testing basic SD card write functionality...");
 8002f0c:	4981      	ldr	r1, [pc, #516]	@ (8003114 <StartDefaultTask+0x330>)
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f001 fe5e 	bl	8004bd0 <LOGGER_SendFormatted>
    extern SD_HandleTypeDef hsd1;
    static uint8_t test_write_buffer[512];
    static uint8_t test_read_buffer[512];
    
    // 테스트 데이터 준비 (간단한 패턴)
    for(int i = 0; i < 512; i++) {
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f1a:	e012      	b.n	8002f42 <StartDefaultTask+0x15e>
      test_write_buffer[i] = (uint8_t)(i % 256);
 8002f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f20:	425a      	negs	r2, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	bf58      	it	pl
 8002f28:	4253      	negpl	r3, r2
 8002f2a:	b2d9      	uxtb	r1, r3
 8002f2c:	4a7a      	ldr	r2, [pc, #488]	@ (8003118 <StartDefaultTask+0x334>)
 8002f2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f32:	4413      	add	r3, r2
 8002f34:	460a      	mov	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 512; i++) {
 8002f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f4a:	dbe7      	blt.n	8002f1c <StartDefaultTask+0x138>
    }
    
    // SD카드 상태 재확인
    HAL_SD_CardStateTypeDef card_state_before = HAL_SD_GetCardState(&hsd1);
 8002f4c:	4873      	ldr	r0, [pc, #460]	@ (800311c <StartDefaultTask+0x338>)
 8002f4e:	f00a faeb 	bl	800d528 <HAL_SD_GetCardState>
 8002f52:	66b8      	str	r0, [r7, #104]	@ 0x68
    LOG_INFO("📋 SD card state before write: %d", card_state_before);
 8002f54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002f56:	4972      	ldr	r1, [pc, #456]	@ (8003120 <StartDefaultTask+0x33c>)
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f001 fe39 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // SD카드 정보 확인
    HAL_SD_CardInfoTypeDef card_info;
    HAL_StatusTypeDef info_result = HAL_SD_GetCardInfo(&hsd1, &card_info);
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4619      	mov	r1, r3
 8002f64:	486d      	ldr	r0, [pc, #436]	@ (800311c <StartDefaultTask+0x338>)
 8002f66:	f00a fab3 	bl	800d4d0 <HAL_SD_GetCardInfo>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    LOG_INFO("📋 HAL_SD_GetCardInfo result: %d", info_result);
 8002f70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002f74:	461a      	mov	r2, r3
 8002f76:	496b      	ldr	r1, [pc, #428]	@ (8003124 <StartDefaultTask+0x340>)
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f001 fe29 	bl	8004bd0 <LOGGER_SendFormatted>
    if(info_result == HAL_OK) {
 8002f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <StartDefaultTask+0x1ba>
      LOG_INFO("📋 Card LogBlockNbr: %lu, LogBlockSize: %lu", card_info.LogBlockNbr, card_info.LogBlockSize);
 8002f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	4967      	ldr	r1, [pc, #412]	@ (8003128 <StartDefaultTask+0x344>)
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f001 fe1f 	bl	8004bd0 <LOGGER_SendFormatted>
      LOG_INFO("📋 Card Type: %lu, Class: %lu", card_info.CardType, card_info.Class);
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4965      	ldr	r1, [pc, #404]	@ (800312c <StartDefaultTask+0x348>)
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f001 fe19 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    
    LOG_INFO("📝 Writing test pattern to sector 2000...");
 8002f9e:	4964      	ldr	r1, [pc, #400]	@ (8003130 <StartDefaultTask+0x34c>)
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f001 fe15 	bl	8004bd0 <LOGGER_SendFormatted>
    HAL_StatusTypeDef write_result = HAL_SD_WriteBlocks(&hsd1, test_write_buffer, 2000, 1, 5000);
 8002fa6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2301      	movs	r3, #1
 8002fae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002fb2:	4959      	ldr	r1, [pc, #356]	@ (8003118 <StartDefaultTask+0x334>)
 8002fb4:	4859      	ldr	r0, [pc, #356]	@ (800311c <StartDefaultTask+0x338>)
 8002fb6:	f009 fd8f 	bl	800cad8 <HAL_SD_WriteBlocks>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    LOG_INFO("📝 HAL_SD_WriteBlocks result: %d", write_result);
 8002fc0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	495b      	ldr	r1, [pc, #364]	@ (8003134 <StartDefaultTask+0x350>)
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f001 fe01 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // 쓰기 실패 시 에러 상태 분석
    if(write_result != HAL_OK) {
 8002fce:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d031      	beq.n	800303a <StartDefaultTask+0x256>
      HAL_SD_CardStateTypeDef card_state_after = HAL_SD_GetCardState(&hsd1);
 8002fd6:	4851      	ldr	r0, [pc, #324]	@ (800311c <StartDefaultTask+0x338>)
 8002fd8:	f00a faa6 	bl	800d528 <HAL_SD_GetCardState>
 8002fdc:	6638      	str	r0, [r7, #96]	@ 0x60
      LOG_ERROR("📋 SD card state after failed write: %d", card_state_after);
 8002fde:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002fe0:	4955      	ldr	r1, [pc, #340]	@ (8003138 <StartDefaultTask+0x354>)
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	f001 fdf4 	bl	8004bd0 <LOGGER_SendFormatted>
      LOG_ERROR("📋 SDMMC ErrorCode: 0x%08lX", hsd1.ErrorCode);
 8002fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800311c <StartDefaultTask+0x338>)
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	461a      	mov	r2, r3
 8002fee:	4953      	ldr	r1, [pc, #332]	@ (800313c <StartDefaultTask+0x358>)
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	f001 fded 	bl	8004bd0 <LOGGER_SendFormatted>
      
      // 일반적인 HAL 상태 코드 해석
      switch(write_result) {
 8002ff6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d010      	beq.n	8003020 <StartDefaultTask+0x23c>
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	dc13      	bgt.n	800302a <StartDefaultTask+0x246>
 8003002:	2b01      	cmp	r3, #1
 8003004:	d002      	beq.n	800300c <StartDefaultTask+0x228>
 8003006:	2b02      	cmp	r3, #2
 8003008:	d005      	beq.n	8003016 <StartDefaultTask+0x232>
 800300a:	e00e      	b.n	800302a <StartDefaultTask+0x246>
        case HAL_ERROR:
          LOG_ERROR("📋 HAL_ERROR - General error occurred");
 800300c:	494c      	ldr	r1, [pc, #304]	@ (8003140 <StartDefaultTask+0x35c>)
 800300e:	2003      	movs	r0, #3
 8003010:	f001 fdde 	bl	8004bd0 <LOGGER_SendFormatted>
          break;
 8003014:	e011      	b.n	800303a <StartDefaultTask+0x256>
        case HAL_BUSY:
          LOG_ERROR("📋 HAL_BUSY - SD card is busy");
 8003016:	494b      	ldr	r1, [pc, #300]	@ (8003144 <StartDefaultTask+0x360>)
 8003018:	2003      	movs	r0, #3
 800301a:	f001 fdd9 	bl	8004bd0 <LOGGER_SendFormatted>
          break;
 800301e:	e00c      	b.n	800303a <StartDefaultTask+0x256>
        case HAL_TIMEOUT:
          LOG_ERROR("📋 HAL_TIMEOUT - Operation timed out");
 8003020:	4949      	ldr	r1, [pc, #292]	@ (8003148 <StartDefaultTask+0x364>)
 8003022:	2003      	movs	r0, #3
 8003024:	f001 fdd4 	bl	8004bd0 <LOGGER_SendFormatted>
          break;
 8003028:	e007      	b.n	800303a <StartDefaultTask+0x256>
        default:
          LOG_ERROR("📋 Unknown HAL status: %d", write_result);
 800302a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800302e:	461a      	mov	r2, r3
 8003030:	4946      	ldr	r1, [pc, #280]	@ (800314c <StartDefaultTask+0x368>)
 8003032:	2003      	movs	r0, #3
 8003034:	f001 fdcc 	bl	8004bd0 <LOGGER_SendFormatted>
          break;
 8003038:	bf00      	nop
      }
    }
    
    if(write_result == HAL_OK) {
 800303a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 80c7 	bne.w	80031d2 <StartDefaultTask+0x3ee>
      // 쓰기 후 약간의 지연
      osDelay(100);
 8003044:	2064      	movs	r0, #100	@ 0x64
 8003046:	f014 fed3 	bl	8017df0 <osDelay>
      
      LOG_INFO("📖 Reading back from sector 2000...");
 800304a:	4941      	ldr	r1, [pc, #260]	@ (8003150 <StartDefaultTask+0x36c>)
 800304c:	2001      	movs	r0, #1
 800304e:	f001 fdbf 	bl	8004bd0 <LOGGER_SendFormatted>
      HAL_StatusTypeDef read_result = HAL_SD_ReadBlocks(&hsd1, test_read_buffer, 2000, 1, 5000);
 8003052:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2301      	movs	r3, #1
 800305a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800305e:	493d      	ldr	r1, [pc, #244]	@ (8003154 <StartDefaultTask+0x370>)
 8003060:	482e      	ldr	r0, [pc, #184]	@ (800311c <StartDefaultTask+0x338>)
 8003062:	f009 fb5b 	bl	800c71c <HAL_SD_ReadBlocks>
 8003066:	4603      	mov	r3, r0
 8003068:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      LOG_INFO("📖 HAL_SD_ReadBlocks result: %d", read_result);
 800306c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003070:	461a      	mov	r2, r3
 8003072:	4939      	ldr	r1, [pc, #228]	@ (8003158 <StartDefaultTask+0x374>)
 8003074:	2001      	movs	r0, #1
 8003076:	f001 fdab 	bl	8004bd0 <LOGGER_SendFormatted>
      
      if(read_result == HAL_OK) {
 800307a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 80a2 	bne.w	80031c8 <StartDefaultTask+0x3e4>
        // 데이터 검증
        int match_count = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        int mismatch_count = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        
        for(int i = 0; i < 512; i++) {
 800308e:	2300      	movs	r3, #0
 8003090:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003092:	e07c      	b.n	800318e <StartDefaultTask+0x3aa>
          if(test_write_buffer[i] == test_read_buffer[i]) {
 8003094:	4a20      	ldr	r2, [pc, #128]	@ (8003118 <StartDefaultTask+0x334>)
 8003096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003098:	4413      	add	r3, r2
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	492d      	ldr	r1, [pc, #180]	@ (8003154 <StartDefaultTask+0x370>)
 800309e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030a0:	440b      	add	r3, r1
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d159      	bne.n	800315c <StartDefaultTask+0x378>
            match_count++;
 80030a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030ac:	3301      	adds	r3, #1
 80030ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030b2:	e069      	b.n	8003188 <StartDefaultTask+0x3a4>
 80030b4:	0801d2d4 	.word	0x0801d2d4
 80030b8:	0801d31c 	.word	0x0801d31c
 80030bc:	20000018 	.word	0x20000018
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	0801d348 	.word	0x0801d348
 80030c8:	0801d360 	.word	0x0801d360
 80030cc:	0801d388 	.word	0x0801d388
 80030d0:	0801d3d4 	.word	0x0801d3d4
 80030d4:	0801d410 	.word	0x0801d410
 80030d8:	20000014 	.word	0x20000014
 80030dc:	0801d458 	.word	0x0801d458
 80030e0:	0801d4a4 	.word	0x0801d4a4
 80030e4:	0801d4f4 	.word	0x0801d4f4
 80030e8:	0801d520 	.word	0x0801d520
 80030ec:	0801d528 	.word	0x0801d528
 80030f0:	0801d554 	.word	0x0801d554
 80030f4:	0801d58c 	.word	0x0801d58c
 80030f8:	0801d5d0 	.word	0x0801d5d0
 80030fc:	0801d62c 	.word	0x0801d62c
 8003100:	0801d664 	.word	0x0801d664
 8003104:	0801d6a4 	.word	0x0801d6a4
 8003108:	0801d6ac 	.word	0x0801d6ac
 800310c:	0801d6c8 	.word	0x0801d6c8
 8003110:	0801d600 	.word	0x0801d600
 8003114:	0801d6f8 	.word	0x0801d6f8
 8003118:	20001b34 	.word	0x20001b34
 800311c:	20001478 	.word	0x20001478
 8003120:	0801d72c 	.word	0x0801d72c
 8003124:	0801d750 	.word	0x0801d750
 8003128:	0801d774 	.word	0x0801d774
 800312c:	0801d7a4 	.word	0x0801d7a4
 8003130:	0801d7c4 	.word	0x0801d7c4
 8003134:	0801d7f0 	.word	0x0801d7f0
 8003138:	0801d814 	.word	0x0801d814
 800313c:	0801d840 	.word	0x0801d840
 8003140:	0801d860 	.word	0x0801d860
 8003144:	0801d888 	.word	0x0801d888
 8003148:	0801d8a8 	.word	0x0801d8a8
 800314c:	0801d8d0 	.word	0x0801d8d0
 8003150:	0801d8ec 	.word	0x0801d8ec
 8003154:	20001d34 	.word	0x20001d34
 8003158:	0801d914 	.word	0x0801d914
          } else {
            mismatch_count++;
 800315c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800315e:	3301      	adds	r3, #1
 8003160:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if(mismatch_count <= 5) { // 처음 5개 불일치만 출력
 8003162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003164:	2b05      	cmp	r3, #5
 8003166:	dc0f      	bgt.n	8003188 <StartDefaultTask+0x3a4>
              LOG_WARN("📊 Mismatch at byte %d: wrote 0x%02X, read 0x%02X", 
 8003168:	4a70      	ldr	r2, [pc, #448]	@ (800332c <StartDefaultTask+0x548>)
 800316a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800316c:	4413      	add	r3, r2
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	4a6f      	ldr	r2, [pc, #444]	@ (8003330 <StartDefaultTask+0x54c>)
 8003174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	460b      	mov	r3, r1
 800317e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003180:	496c      	ldr	r1, [pc, #432]	@ (8003334 <StartDefaultTask+0x550>)
 8003182:	2002      	movs	r0, #2
 8003184:	f001 fd24 	bl	8004bd0 <LOGGER_SendFormatted>
        for(int i = 0; i < 512; i++) {
 8003188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800318a:	3301      	adds	r3, #1
 800318c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800318e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003194:	f6ff af7e 	blt.w	8003094 <StartDefaultTask+0x2b0>
                       i, test_write_buffer[i], test_read_buffer[i]);
            }
          }
        }
        
        LOG_INFO("📊 Data verification: %d matches, %d mismatches out of 512 bytes", 
 8003198:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800319a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800319e:	4966      	ldr	r1, [pc, #408]	@ (8003338 <StartDefaultTask+0x554>)
 80031a0:	2001      	movs	r0, #1
 80031a2:	f001 fd15 	bl	8004bd0 <LOGGER_SendFormatted>
                 match_count, mismatch_count);
        
        if(mismatch_count == 0) {
 80031a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <StartDefaultTask+0x3d2>
          LOG_INFO("✅ SD card basic write/read test PASSED - data integrity OK");
 80031ac:	4963      	ldr	r1, [pc, #396]	@ (800333c <StartDefaultTask+0x558>)
 80031ae:	2001      	movs	r0, #1
 80031b0:	f001 fd0e 	bl	8004bd0 <LOGGER_SendFormatted>
 80031b4:	e011      	b.n	80031da <StartDefaultTask+0x3f6>
        } else {
          LOG_WARN("⚠️ SD card write/read test FAILED - data corruption detected");
 80031b6:	4962      	ldr	r1, [pc, #392]	@ (8003340 <StartDefaultTask+0x55c>)
 80031b8:	2002      	movs	r0, #2
 80031ba:	f001 fd09 	bl	8004bd0 <LOGGER_SendFormatted>
          LOG_WARN("💡 SD card may have wear-out or controller issues");
 80031be:	4961      	ldr	r1, [pc, #388]	@ (8003344 <StartDefaultTask+0x560>)
 80031c0:	2002      	movs	r0, #2
 80031c2:	f001 fd05 	bl	8004bd0 <LOGGER_SendFormatted>
 80031c6:	e008      	b.n	80031da <StartDefaultTask+0x3f6>
        }
      } else {
        LOG_ERROR("❌ Read back failed after successful write");
 80031c8:	495f      	ldr	r1, [pc, #380]	@ (8003348 <StartDefaultTask+0x564>)
 80031ca:	2003      	movs	r0, #3
 80031cc:	f001 fd00 	bl	8004bd0 <LOGGER_SendFormatted>
 80031d0:	e003      	b.n	80031da <StartDefaultTask+0x3f6>
      }
    } else {
      LOG_ERROR("❌ Basic write test failed");
 80031d2:	495e      	ldr	r1, [pc, #376]	@ (800334c <StartDefaultTask+0x568>)
 80031d4:	2003      	movs	r0, #3
 80031d6:	f001 fcfb 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    
    LOG_INFO("📺 Continuing with terminal-only logging for LoRa operations");
 80031da:	495d      	ldr	r1, [pc, #372]	@ (8003350 <StartDefaultTask+0x56c>)
 80031dc:	2001      	movs	r0, #1
 80031de:	f001 fcf7 	bl	8004bd0 <LOGGER_SendFormatted>
 80031e2:	e003      	b.n	80031ec <StartDefaultTask+0x408>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 80031e4:	495b      	ldr	r1, [pc, #364]	@ (8003354 <StartDefaultTask+0x570>)
 80031e6:	2001      	movs	r0, #1
 80031e8:	f001 fcf2 	bl	8004bd0 <LOGGER_SendFormatted>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	677b      	str	r3, [r7, #116]	@ 0x74
    if (lora_new_response) {
 80031f0:	4b59      	ldr	r3, [pc, #356]	@ (8003358 <StartDefaultTask+0x574>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <StartDefaultTask+0x42a>
      rx_data = lora_rx_response;
 80031fa:	4b58      	ldr	r3, [pc, #352]	@ (800335c <StartDefaultTask+0x578>)
 80031fc:	677b      	str	r3, [r7, #116]	@ 0x74
      lora_new_response = false; // 플래그 클리어
 80031fe:	4b56      	ldr	r3, [pc, #344]	@ (8003358 <StartDefaultTask+0x574>)
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8003204:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003206:	4956      	ldr	r1, [pc, #344]	@ (8003360 <StartDefaultTask+0x57c>)
 8003208:	2000      	movs	r0, #0
 800320a:	f001 fce1 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 800320e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003212:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd fb07 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 800321a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800321e:	4619      	mov	r1, r3
 8003220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	460a      	mov	r2, r1
 800322a:	494e      	ldr	r1, [pc, #312]	@ (8003364 <StartDefaultTask+0x580>)
 800322c:	2000      	movs	r0, #0
 800322e:	f001 fccf 	bl	8004bd0 <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 8003232:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003236:	2b0a      	cmp	r3, #10
 8003238:	d85c      	bhi.n	80032f4 <StartDefaultTask+0x510>
 800323a:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <StartDefaultTask+0x45c>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	0800326d 	.word	0x0800326d
 8003244:	08003277 	.word	0x08003277
 8003248:	0800328f 	.word	0x0800328f
 800324c:	080032a7 	.word	0x080032a7
 8003250:	080032b1 	.word	0x080032b1
 8003254:	080032a7 	.word	0x080032a7
 8003258:	080032b1 	.word	0x080032b1
 800325c:	080032bb 	.word	0x080032bb
 8003260:	080032d1 	.word	0x080032d1
 8003264:	080032db 	.word	0x080032db
 8003268:	080032db 	.word	0x080032db
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 800326c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003270:	f014 fdbe 	bl	8017df0 <osDelay>
        break;
 8003274:	e043      	b.n	80032fe <StartDefaultTask+0x51a>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	493a      	ldr	r1, [pc, #232]	@ (8003368 <StartDefaultTask+0x584>)
 800327e:	2001      	movs	r0, #1
 8003280:	f001 fca6 	bl	8004bd0 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8003284:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003288:	f014 fdb2 	bl	8017df0 <osDelay>
        break;
 800328c:	e037      	b.n	80032fe <StartDefaultTask+0x51a>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 800328e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003290:	3301      	adds	r3, #1
 8003292:	461a      	mov	r2, r3
 8003294:	4935      	ldr	r1, [pc, #212]	@ (800336c <StartDefaultTask+0x588>)
 8003296:	2000      	movs	r0, #0
 8003298:	f001 fc9a 	bl	8004bd0 <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 800329c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80032a0:	f014 fda6 	bl	8017df0 <osDelay>
        break;
 80032a4:	e02b      	b.n	80032fe <StartDefaultTask+0x51a>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 80032a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80032aa:	f014 fda1 	bl	8017df0 <osDelay>
        break;
 80032ae:	e026      	b.n	80032fe <StartDefaultTask+0x51a>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 80032b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80032b4:	f014 fd9c 	bl	8017df0 <osDelay>
        break;
 80032b8:	e021      	b.n	80032fe <StartDefaultTask+0x51a>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 80032ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032bc:	461a      	mov	r2, r3
 80032be:	492c      	ldr	r1, [pc, #176]	@ (8003370 <StartDefaultTask+0x58c>)
 80032c0:	2000      	movs	r0, #0
 80032c2:	f001 fc85 	bl	8004bd0 <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 80032c6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80032ca:	f014 fd91 	bl	8017df0 <osDelay>
        break;
 80032ce:	e016      	b.n	80032fe <StartDefaultTask+0x51a>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 80032d0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80032d4:	f014 fd8c 	bl	8017df0 <osDelay>
        break;
 80032d8:	e011      	b.n	80032fe <StartDefaultTask+0x51a>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 80032da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80032de:	2b09      	cmp	r3, #9
 80032e0:	d101      	bne.n	80032e6 <StartDefaultTask+0x502>
 80032e2:	4b24      	ldr	r3, [pc, #144]	@ (8003374 <StartDefaultTask+0x590>)
 80032e4:	e000      	b.n	80032e8 <StartDefaultTask+0x504>
 80032e6:	4b24      	ldr	r3, [pc, #144]	@ (8003378 <StartDefaultTask+0x594>)
 80032e8:	461a      	mov	r2, r3
 80032ea:	4924      	ldr	r1, [pc, #144]	@ (800337c <StartDefaultTask+0x598>)
 80032ec:	2001      	movs	r0, #1
 80032ee:	f001 fc6f 	bl	8004bd0 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 80032f2:	e005      	b.n	8003300 <StartDefaultTask+0x51c>
      default:
        osDelay(1000);
 80032f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032f8:	f014 fd7a 	bl	8017df0 <osDelay>
        break;
 80032fc:	bf00      	nop
  {
 80032fe:	e775      	b.n	80031ec <StartDefaultTask+0x408>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003300:	491f      	ldr	r1, [pc, #124]	@ (8003380 <StartDefaultTask+0x59c>)
 8003302:	2001      	movs	r0, #1
 8003304:	f001 fc64 	bl	8004bd0 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	673b      	str	r3, [r7, #112]	@ 0x70
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 800330c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003310:	f014 fd6e 	bl	8017df0 <osDelay>
    idle_counter++;
 8003314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003316:	3301      	adds	r3, #1
 8003318:	673b      	str	r3, [r7, #112]	@ 0x70
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 800331a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	461a      	mov	r2, r3
 8003320:	4918      	ldr	r1, [pc, #96]	@ (8003384 <StartDefaultTask+0x5a0>)
 8003322:	2001      	movs	r0, #1
 8003324:	f001 fc54 	bl	8004bd0 <LOGGER_SendFormatted>
    osDelay(30000);
 8003328:	bf00      	nop
 800332a:	e7ef      	b.n	800330c <StartDefaultTask+0x528>
 800332c:	20001b34 	.word	0x20001b34
 8003330:	20001d34 	.word	0x20001d34
 8003334:	0801d938 	.word	0x0801d938
 8003338:	0801d96c 	.word	0x0801d96c
 800333c:	0801d9b0 	.word	0x0801d9b0
 8003340:	0801d9f0 	.word	0x0801d9f0
 8003344:	0801da34 	.word	0x0801da34
 8003348:	0801da68 	.word	0x0801da68
 800334c:	0801da94 	.word	0x0801da94
 8003350:	0801dab0 	.word	0x0801dab0
 8003354:	0801daf0 	.word	0x0801daf0
 8003358:	20001ac4 	.word	0x20001ac4
 800335c:	200018c4 	.word	0x200018c4
 8003360:	0801db38 	.word	0x0801db38
 8003364:	0801db68 	.word	0x0801db68
 8003368:	0801db94 	.word	0x0801db94
 800336c:	0801dbbc 	.word	0x0801dbbc
 8003370:	0801dbf0 	.word	0x0801dbf0
 8003374:	0801dc20 	.word	0x0801dc20
 8003378:	0801dc28 	.word	0x0801dc28
 800337c:	0801dc30 	.word	0x0801dc30
 8003380:	0801dc68 	.word	0x0801dc68
 8003384:	0801dc90 	.word	0x0801dc90

08003388 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800338e:	af02      	add	r7, sp, #8
 8003390:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003394:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003398:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 800339a:	49a4      	ldr	r1, [pc, #656]	@ (800362c <StartReceiveTask+0x2a4>)
 800339c:	2001      	movs	r0, #1
 800339e:	f001 fc17 	bl	8004bd0 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 80033a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033a6:	f014 fd23 	bl	8017df0 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 80033aa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80033ae:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 80033b6:	f107 0208 	add.w	r2, r7, #8
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fd1c 	bl	8004e00 <UART_Receive>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 80033ce:	4b98      	ldr	r3, [pc, #608]	@ (8003630 <StartReceiveTask+0x2a8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a96      	ldr	r2, [pc, #600]	@ (8003630 <StartReceiveTask+0x2a8>)
 80033d6:	6013      	str	r3, [r2, #0]
    if (debug_counter % 200 == 0 && status != UART_STATUS_TIMEOUT) {  // 10초마다, 타임아웃 제외
 80033d8:	4b95      	ldr	r3, [pc, #596]	@ (8003630 <StartReceiveTask+0x2a8>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b95      	ldr	r3, [pc, #596]	@ (8003634 <StartReceiveTask+0x2ac>)
 80033de:	fba3 1302 	umull	r1, r3, r3, r2
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	21c8      	movs	r1, #200	@ 0xc8
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d116      	bne.n	800341e <StartReceiveTask+0x96>
 80033f0:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d012      	beq.n	800341e <StartReceiveTask+0x96>
      LOG_INFO("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 80033f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003630 <StartReceiveTask+0x2a8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a8d      	ldr	r2, [pc, #564]	@ (8003634 <StartReceiveTask+0x2ac>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	099a      	lsrs	r2, r3, #6
 8003404:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003408:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800340c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	4988      	ldr	r1, [pc, #544]	@ (8003638 <StartReceiveTask+0x2b0>)
 8003418:	2001      	movs	r0, #1
 800341a:	f001 fbd9 	bl	8004bd0 <LOGGER_SendFormatted>
               debug_counter / 200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 800341e:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 80fd 	bne.w	8003622 <StartReceiveTask+0x29a>
 8003428:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800342c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f340 80f5 	ble.w	8003622 <StartReceiveTask+0x29a>
      // 수신 완료 - TDD ResponseHandler로 분석
      LOG_INFO("📥 RECV: '%s' (%d bytes)", local_buffer, local_bytes_received);
 8003438:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800343c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f107 020c 	add.w	r2, r7, #12
 8003446:	497d      	ldr	r1, [pc, #500]	@ (800363c <StartReceiveTask+0x2b4>)
 8003448:	2001      	movs	r0, #1
 800344a:	f001 fbc1 	bl	8004bd0 <LOGGER_SendFormatted>
      
      // TDD ResponseHandler를 사용하여 응답 분석
      if (is_response_ok(local_buffer)) {
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fcfa 	bl	8000e4c <is_response_ok>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <StartReceiveTask+0xe0>
        LOG_INFO("✅ OK response");
 800345e:	4978      	ldr	r1, [pc, #480]	@ (8003640 <StartReceiveTask+0x2b8>)
 8003460:	2001      	movs	r0, #1
 8003462:	f001 fbb5 	bl	8004bd0 <LOGGER_SendFormatted>
 8003466:	e04a      	b.n	80034fe <StartReceiveTask+0x176>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	4975      	ldr	r1, [pc, #468]	@ (8003644 <StartReceiveTask+0x2bc>)
 800346e:	4618      	mov	r0, r3
 8003470:	f018 f8d5 	bl	801b61e <strstr>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d004      	beq.n	8003484 <StartReceiveTask+0xfc>
        LOG_INFO("✅ JOIN response");
 800347a:	4973      	ldr	r1, [pc, #460]	@ (8003648 <StartReceiveTask+0x2c0>)
 800347c:	2001      	movs	r0, #1
 800347e:	f001 fba7 	bl	8004bd0 <LOGGER_SendFormatted>
 8003482:	e03c      	b.n	80034fe <StartReceiveTask+0x176>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	4970      	ldr	r1, [pc, #448]	@ (800364c <StartReceiveTask+0x2c4>)
 800348a:	4618      	mov	r0, r3
 800348c:	f018 f8c7 	bl	801b61e <strstr>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <StartReceiveTask+0x118>
        LOG_INFO("📡 LoRa module boot message (ignored)");
 8003496:	496e      	ldr	r1, [pc, #440]	@ (8003650 <StartReceiveTask+0x2c8>)
 8003498:	2001      	movs	r0, #1
 800349a:	f001 fb99 	bl	8004bd0 <LOGGER_SendFormatted>
 800349e:	e02e      	b.n	80034fe <StartReceiveTask+0x176>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fdbd 	bl	8001024 <ResponseHandler_ParseSendResponse>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        switch (response_type) {
 80034b0:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d822      	bhi.n	80034fe <StartReceiveTask+0x176>
 80034b8:	a201      	add	r2, pc, #4	@ (adr r2, 80034c0 <StartReceiveTask+0x138>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034d1 	.word	0x080034d1
 80034c4:	080034db 	.word	0x080034db
 80034c8:	080034e5 	.word	0x080034e5
 80034cc:	080034ef 	.word	0x080034ef
          case RESPONSE_OK:
            LOG_INFO("✅ OK");
 80034d0:	4960      	ldr	r1, [pc, #384]	@ (8003654 <StartReceiveTask+0x2cc>)
 80034d2:	2001      	movs	r0, #1
 80034d4:	f001 fb7c 	bl	8004bd0 <LOGGER_SendFormatted>
            break;
 80034d8:	e011      	b.n	80034fe <StartReceiveTask+0x176>
          case RESPONSE_ERROR:
            LOG_WARN("⚠️ ERROR");
 80034da:	495f      	ldr	r1, [pc, #380]	@ (8003658 <StartReceiveTask+0x2d0>)
 80034dc:	2002      	movs	r0, #2
 80034de:	f001 fb77 	bl	8004bd0 <LOGGER_SendFormatted>
            break;
 80034e2:	e00c      	b.n	80034fe <StartReceiveTask+0x176>
          case RESPONSE_TIMEOUT:
            LOG_WARN("⚠️ TIMEOUT");
 80034e4:	495d      	ldr	r1, [pc, #372]	@ (800365c <StartReceiveTask+0x2d4>)
 80034e6:	2002      	movs	r0, #2
 80034e8:	f001 fb72 	bl	8004bd0 <LOGGER_SendFormatted>
            break;
 80034ec:	e007      	b.n	80034fe <StartReceiveTask+0x176>
          case RESPONSE_UNKNOWN:
            LOG_INFO("❓ UNKNOWN format: %.20s...", local_buffer);  // 처음 20자만 표시
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	461a      	mov	r2, r3
 80034f4:	495a      	ldr	r1, [pc, #360]	@ (8003660 <StartReceiveTask+0x2d8>)
 80034f6:	2001      	movs	r0, #1
 80034f8:	f001 fb6a 	bl	8004bd0 <LOGGER_SendFormatted>
            break;
 80034fc:	bf00      	nop
        }
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 80034fe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003502:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	4619      	mov	r1, r3
 8003510:	4854      	ldr	r0, [pc, #336]	@ (8003664 <StartReceiveTask+0x2dc>)
 8003512:	f018 f8d7 	bl	801b6c4 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003516:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800351a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a51      	ldr	r2, [pc, #324]	@ (8003668 <StartReceiveTask+0x2e0>)
 8003522:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd fc8c 	bl	8000e4c <is_response_ok>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <StartReceiveTask+0x1ba>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003540:	e03f      	b.n	80035c2 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	493f      	ldr	r1, [pc, #252]	@ (8003644 <StartReceiveTask+0x2bc>)
 8003548:	4618      	mov	r0, r3
 800354a:	f018 f868 	bl	801b61e <strstr>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <StartReceiveTask+0x1d4>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800355a:	e032      	b.n	80035c2 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 800355c:	f107 030c 	add.w	r3, r7, #12
 8003560:	4942      	ldr	r1, [pc, #264]	@ (800366c <StartReceiveTask+0x2e4>)
 8003562:	4618      	mov	r0, r3
 8003564:	f018 f85b 	bl	801b61e <strstr>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <StartReceiveTask+0x1ee>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003574:	e025      	b.n	80035c2 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003576:	f107 030c 	add.w	r3, r7, #12
 800357a:	4934      	ldr	r1, [pc, #208]	@ (800364c <StartReceiveTask+0x2c4>)
 800357c:	4618      	mov	r0, r3
 800357e:	f018 f84e 	bl	801b61e <strstr>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d108      	bne.n	800359a <StartReceiveTask+0x212>
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	4938      	ldr	r1, [pc, #224]	@ (8003670 <StartReceiveTask+0x2e8>)
 800358e:	4618      	mov	r0, r3
 8003590:	f018 f845 	bl	801b61e <strstr>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <StartReceiveTask+0x21c>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 800359a:	4936      	ldr	r1, [pc, #216]	@ (8003674 <StartReceiveTask+0x2ec>)
 800359c:	2000      	movs	r0, #0
 800359e:	f001 fb17 	bl	8004bd0 <LOGGER_SendFormatted>
 80035a2:	e00e      	b.n	80035c2 <StartReceiveTask+0x23a>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fd3b 	bl	8001024 <ResponseHandler_ParseSendResponse>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (response_type != RESPONSE_UNKNOWN) {
 80035b4:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d002      	beq.n	80035c2 <StartReceiveTask+0x23a>
          is_lora_command_response = true;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 80035c2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01d      	beq.n	8003606 <StartReceiveTask+0x27e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 80035ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80035ce:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	4619      	mov	r1, r3
 80035dc:	4826      	ldr	r0, [pc, #152]	@ (8003678 <StartReceiveTask+0x2f0>)
 80035de:	f018 f871 	bl	801b6c4 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 80035e2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80035e6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <StartReceiveTask+0x2f0>)
 80035ee:	2100      	movs	r1, #0
 80035f0:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 80035f2:	4b22      	ldr	r3, [pc, #136]	@ (800367c <StartReceiveTask+0x2f4>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	461a      	mov	r2, r3
 80035fe:	4920      	ldr	r1, [pc, #128]	@ (8003680 <StartReceiveTask+0x2f8>)
 8003600:	2000      	movs	r0, #0
 8003602:	f001 fae5 	bl	8004bd0 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8003606:	f107 030c 	add.w	r3, r7, #12
 800360a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f017 ffe9 	bl	801b5e8 <memset>
      local_bytes_received = 0;
 8003616:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800361a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8003622:	2032      	movs	r0, #50	@ 0x32
 8003624:	f014 fbe4 	bl	8017df0 <osDelay>
  {
 8003628:	e6c5      	b.n	80033b6 <StartReceiveTask+0x2e>
 800362a:	bf00      	nop
 800362c:	0801dcc0 	.word	0x0801dcc0
 8003630:	20001f34 	.word	0x20001f34
 8003634:	51eb851f 	.word	0x51eb851f
 8003638:	0801dce8 	.word	0x0801dce8
 800363c:	0801dd1c 	.word	0x0801dd1c
 8003640:	0801dd38 	.word	0x0801dd38
 8003644:	0801dd48 	.word	0x0801dd48
 8003648:	0801dd54 	.word	0x0801dd54
 800364c:	0801dd68 	.word	0x0801dd68
 8003650:	0801dd74 	.word	0x0801dd74
 8003654:	0801dd9c 	.word	0x0801dd9c
 8003658:	0801dda4 	.word	0x0801dda4
 800365c:	0801ddb4 	.word	0x0801ddb4
 8003660:	0801ddc4 	.word	0x0801ddc4
 8003664:	20001f98 	.word	0x20001f98
 8003668:	200018c0 	.word	0x200018c0
 800366c:	0801dde4 	.word	0x0801dde4
 8003670:	0801ddec 	.word	0x0801ddec
 8003674:	0801ddfc 	.word	0x0801ddfc
 8003678:	200018c4 	.word	0x200018c4
 800367c:	20001ac4 	.word	0x20001ac4
 8003680:	0801de38 	.word	0x0801de38

08003684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a04      	ldr	r2, [pc, #16]	@ (80036a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003696:	f002 f817 	bl	80056c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40001000 	.word	0x40001000

080036a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <Error_Handler+0x8>

080036b4 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <MX_DMA_Init+0x48>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	4a0f      	ldr	r2, [pc, #60]	@ (80036fc <MX_DMA_Init+0x48>)
 80036c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <MX_DMA_Init+0x48>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80036d2:	2200      	movs	r2, #0
 80036d4:	2105      	movs	r1, #5
 80036d6:	2039      	movs	r0, #57	@ 0x39
 80036d8:	f002 fb8a 	bl	8005df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80036dc:	2039      	movs	r0, #57	@ 0x39
 80036de:	f002 fba3 	bl	8005e28 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2105      	movs	r1, #5
 80036e6:	2047      	movs	r0, #71	@ 0x47
 80036e8:	f002 fb82 	bl	8005df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80036ec:	2047      	movs	r0, #71	@ 0x47
 80036ee:	f002 fb9b 	bl	8005e28 <HAL_NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800

08003700 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8003704:	4b18      	ldr	r3, [pc, #96]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 8003706:	4a19      	ldr	r2, [pc, #100]	@ (800376c <MX_USART6_DMA_Init+0x6c>)
 8003708:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800370a:	4b17      	ldr	r3, [pc, #92]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 800370c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003710:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003712:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003718:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800371e:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 8003720:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003724:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003726:	4b10      	ldr	r3, [pc, #64]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 8003728:	2200      	movs	r2, #0
 800372a:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800372c:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 800372e:	2200      	movs	r2, #0
 8003730:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 8003734:	2200      	movs	r2, #0
 8003736:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 800373a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800373e:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003740:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 8003742:	2200      	movs	r2, #0
 8003744:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003746:	4808      	ldr	r0, [pc, #32]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 8003748:	f002 fce8 	bl	800611c <HAL_DMA_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_USART6_DMA_Init+0x56>
  {
    Error_Handler();
 8003752:	f7ff ffa9 	bl	80036a8 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <MX_USART6_DMA_Init+0x70>)
 8003758:	4a03      	ldr	r2, [pc, #12]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 800375a:	675a      	str	r2, [r3, #116]	@ 0x74
 800375c:	4b02      	ldr	r3, [pc, #8]	@ (8003768 <MX_USART6_DMA_Init+0x68>)
 800375e:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <MX_USART6_DMA_Init+0x70>)
 8003760:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20001ac8 	.word	0x20001ac8
 800376c:	40026428 	.word	0x40026428
 8003770:	200017fc 	.word	0x200017fc

08003774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_MspInit+0x4c>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <HAL_MspInit+0x4c>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	@ 0x40
 8003786:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_MspInit+0x4c>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003792:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_MspInit+0x4c>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	4a0a      	ldr	r2, [pc, #40]	@ (80037c0 <HAL_MspInit+0x4c>)
 8003798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800379c:	6453      	str	r3, [r2, #68]	@ 0x44
 800379e:	4b08      	ldr	r3, [pc, #32]	@ (80037c0 <HAL_MspInit+0x4c>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037aa:	2200      	movs	r2, #0
 80037ac:	210f      	movs	r1, #15
 80037ae:	f06f 0001 	mvn.w	r0, #1
 80037b2:	f002 fb1d 	bl	8005df0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800

080037c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	@ 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a21      	ldr	r2, [pc, #132]	@ (8003868 <HAL_ADC_MspInit+0xa4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d13c      	bne.n	8003860 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80037e6:	4b21      	ldr	r3, [pc, #132]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	4a20      	ldr	r2, [pc, #128]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 80037ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f2:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037fe:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	4a1a      	ldr	r2, [pc, #104]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 8003804:	f043 0320 	orr.w	r3, r3, #32
 8003808:	6313      	str	r3, [r2, #48]	@ 0x30
 800380a:	4b18      	ldr	r3, [pc, #96]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003816:	4b15      	ldr	r3, [pc, #84]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	4a14      	ldr	r2, [pc, #80]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6313      	str	r3, [r2, #48]	@ 0x30
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <HAL_ADC_MspInit+0xa8>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800382e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8003832:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003834:	2303      	movs	r3, #3
 8003836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	4619      	mov	r1, r3
 8003842:	480b      	ldr	r0, [pc, #44]	@ (8003870 <HAL_ADC_MspInit+0xac>)
 8003844:	f003 fe18 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003848:	2301      	movs	r3, #1
 800384a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800384c:	2303      	movs	r3, #3
 800384e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	4619      	mov	r1, r3
 800385a:	4806      	ldr	r0, [pc, #24]	@ (8003874 <HAL_ADC_MspInit+0xb0>)
 800385c:	f003 fe0c 	bl	8007478 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003860:	bf00      	nop
 8003862:	3728      	adds	r7, #40	@ 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40012200 	.word	0x40012200
 800386c:	40023800 	.word	0x40023800
 8003870:	40021400 	.word	0x40021400
 8003874:	40020000 	.word	0x40020000

08003878 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0a      	ldr	r2, [pc, #40]	@ (80038b0 <HAL_CRC_MspInit+0x38>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10b      	bne.n	80038a2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800388a:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_CRC_MspInit+0x3c>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	4a09      	ldr	r2, [pc, #36]	@ (80038b4 <HAL_CRC_MspInit+0x3c>)
 8003890:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003894:	6313      	str	r3, [r2, #48]	@ 0x30
 8003896:	4b07      	ldr	r3, [pc, #28]	@ (80038b4 <HAL_CRC_MspInit+0x3c>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40023000 	.word	0x40023000
 80038b4:	40023800 	.word	0x40023800

080038b8 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08e      	sub	sp, #56	@ 0x38
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a50      	ldr	r2, [pc, #320]	@ (8003a18 <HAL_DCMI_MspInit+0x160>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	f040 809a 	bne.w	8003a10 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80038dc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	4a4e      	ldr	r2, [pc, #312]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80038e8:	4b4c      	ldr	r3, [pc, #304]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 80038ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038f4:	4b49      	ldr	r3, [pc, #292]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f8:	4a48      	ldr	r2, [pc, #288]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 80038fa:	f043 0310 	orr.w	r3, r3, #16
 80038fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003900:	4b46      	ldr	r3, [pc, #280]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800390c:	4b43      	ldr	r3, [pc, #268]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	4a42      	ldr	r2, [pc, #264]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 8003912:	f043 0308 	orr.w	r3, r3, #8
 8003916:	6313      	str	r3, [r2, #48]	@ 0x30
 8003918:	4b40      	ldr	r3, [pc, #256]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003924:	4b3d      	ldr	r3, [pc, #244]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	4a3c      	ldr	r2, [pc, #240]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 800392a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800392e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003930:	4b3a      	ldr	r3, [pc, #232]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800393c:	4b37      	ldr	r3, [pc, #220]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	4a36      	ldr	r2, [pc, #216]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 8003942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003946:	6313      	str	r3, [r2, #48]	@ 0x30
 8003948:	4b34      	ldr	r3, [pc, #208]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003954:	4b31      	ldr	r3, [pc, #196]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003958:	4a30      	ldr	r2, [pc, #192]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003960:	4b2e      	ldr	r3, [pc, #184]	@ (8003a1c <HAL_DCMI_MspInit+0x164>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800396c:	2360      	movs	r3, #96	@ 0x60
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003978:	2300      	movs	r3, #0
 800397a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800397c:	230d      	movs	r3, #13
 800397e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003984:	4619      	mov	r1, r3
 8003986:	4826      	ldr	r0, [pc, #152]	@ (8003a20 <HAL_DCMI_MspInit+0x168>)
 8003988:	f003 fd76 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800398c:	2308      	movs	r3, #8
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003998:	2300      	movs	r3, #0
 800399a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800399c:	230d      	movs	r3, #13
 800399e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a4:	4619      	mov	r1, r3
 80039a6:	481f      	ldr	r0, [pc, #124]	@ (8003a24 <HAL_DCMI_MspInit+0x16c>)
 80039a8:	f003 fd66 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80039ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b2:	2302      	movs	r3, #2
 80039b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ba:	2300      	movs	r3, #0
 80039bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80039be:	230d      	movs	r3, #13
 80039c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80039c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039c6:	4619      	mov	r1, r3
 80039c8:	4817      	ldr	r0, [pc, #92]	@ (8003a28 <HAL_DCMI_MspInit+0x170>)
 80039ca:	f003 fd55 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80039ce:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039dc:	2300      	movs	r3, #0
 80039de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80039e0:	230d      	movs	r3, #13
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039e8:	4619      	mov	r1, r3
 80039ea:	4810      	ldr	r0, [pc, #64]	@ (8003a2c <HAL_DCMI_MspInit+0x174>)
 80039ec:	f003 fd44 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80039f0:	2350      	movs	r3, #80	@ 0x50
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	2300      	movs	r3, #0
 80039fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a00:	230d      	movs	r3, #13
 8003a02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4809      	ldr	r0, [pc, #36]	@ (8003a30 <HAL_DCMI_MspInit+0x178>)
 8003a0c:	f003 fd34 	bl	8007478 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8003a10:	bf00      	nop
 8003a12:	3738      	adds	r7, #56	@ 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	50050000 	.word	0x50050000
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40020c00 	.word	0x40020c00
 8003a28:	40021800 	.word	0x40021800
 8003a2c:	40021c00 	.word	0x40021c00
 8003a30:	40020000 	.word	0x40020000

08003a34 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0d      	ldr	r2, [pc, #52]	@ (8003a78 <HAL_DMA2D_MspInit+0x44>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d113      	bne.n	8003a6e <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003a46:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <HAL_DMA2D_MspInit+0x48>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a7c <HAL_DMA2D_MspInit+0x48>)
 8003a4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a52:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <HAL_DMA2D_MspInit+0x48>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2105      	movs	r1, #5
 8003a62:	205a      	movs	r0, #90	@ 0x5a
 8003a64:	f002 f9c4 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003a68:	205a      	movs	r0, #90	@ 0x5a
 8003a6a:	f002 f9dd 	bl	8005e28 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	4002b000 	.word	0x4002b000
 8003a7c:	40023800 	.word	0x40023800

08003a80 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	@ 0x38
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8003b9c <HAL_ETH_MspInit+0x11c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d178      	bne.n	8003b94 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003aa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aae:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	623b      	str	r3, [r7, #32]
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	4b39      	ldr	r3, [pc, #228]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	4a38      	ldr	r2, [pc, #224]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003ac0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac6:	4b36      	ldr	r3, [pc, #216]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4b33      	ldr	r3, [pc, #204]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	4a32      	ldr	r2, [pc, #200]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003ad8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ade:	4b30      	ldr	r3, [pc, #192]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b02:	4b27      	ldr	r3, [pc, #156]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1a:	4b21      	ldr	r3, [pc, #132]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba0 <HAL_ETH_MspInit+0x120>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003b32:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b40:	2303      	movs	r3, #3
 8003b42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b44:	230b      	movs	r3, #11
 8003b46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4815      	ldr	r0, [pc, #84]	@ (8003ba4 <HAL_ETH_MspInit+0x124>)
 8003b50:	f003 fc92 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003b54:	2332      	movs	r3, #50	@ 0x32
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b60:	2303      	movs	r3, #3
 8003b62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b64:	230b      	movs	r3, #11
 8003b66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	480e      	ldr	r0, [pc, #56]	@ (8003ba8 <HAL_ETH_MspInit+0x128>)
 8003b70:	f003 fc82 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003b74:	2386      	movs	r3, #134	@ 0x86
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b80:	2303      	movs	r3, #3
 8003b82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b84:	230b      	movs	r3, #11
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4807      	ldr	r0, [pc, #28]	@ (8003bac <HAL_ETH_MspInit+0x12c>)
 8003b90:	f003 fc72 	bl	8007478 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003b94:	bf00      	nop
 8003b96:	3738      	adds	r7, #56	@ 0x38
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40028000 	.word	0x40028000
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40021800 	.word	0x40021800
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	40020000 	.word	0x40020000

08003bb0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0ac      	sub	sp, #176	@ 0xb0
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bc8:	f107 0318 	add.w	r3, r7, #24
 8003bcc:	2284      	movs	r2, #132	@ 0x84
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f017 fd09 	bl	801b5e8 <memset>
  if(hi2c->Instance==I2C1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a44      	ldr	r2, [pc, #272]	@ (8003cec <HAL_I2C_MspInit+0x13c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d13d      	bne.n	8003c5c <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003be4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003be6:	2300      	movs	r3, #0
 8003be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bea:	f107 0318 	add.w	r3, r7, #24
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f007 f960 	bl	800aeb4 <HAL_RCCEx_PeriphCLKConfig>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003bfa:	f7ff fd55 	bl	80036a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	4a3b      	ldr	r2, [pc, #236]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c0a:	4b39      	ldr	r3, [pc, #228]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003c16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c1e:	2312      	movs	r3, #18
 8003c20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c30:	2304      	movs	r3, #4
 8003c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	482d      	ldr	r0, [pc, #180]	@ (8003cf4 <HAL_I2C_MspInit+0x144>)
 8003c3e:	f003 fc1b 	bl	8007478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c42:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4e:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003c5a:	e042      	b.n	8003ce2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a25      	ldr	r2, [pc, #148]	@ (8003cf8 <HAL_I2C_MspInit+0x148>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d13d      	bne.n	8003ce2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003c66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c72:	f107 0318 	add.w	r3, r7, #24
 8003c76:	4618      	mov	r0, r3
 8003c78:	f007 f91c 	bl	800aeb4 <HAL_RCCEx_PeriphCLKConfig>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003c82:	f7ff fd11 	bl	80036a8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c86:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	4a19      	ldr	r2, [pc, #100]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c92:	4b17      	ldr	r3, [pc, #92]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003c9e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003ca2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ca6:	2312      	movs	r3, #18
 8003ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003cb8:	2304      	movs	r3, #4
 8003cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003cbe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	480d      	ldr	r0, [pc, #52]	@ (8003cfc <HAL_I2C_MspInit+0x14c>)
 8003cc6:	f003 fbd7 	bl	8007478 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003cd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_I2C_MspInit+0x140>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
}
 8003ce2:	bf00      	nop
 8003ce4:	37b0      	adds	r7, #176	@ 0xb0
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40005400 	.word	0x40005400
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020400 	.word	0x40020400
 8003cf8:	40005c00 	.word	0x40005c00
 8003cfc:	40021c00 	.word	0x40021c00

08003d00 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	@ 0x38
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a55      	ldr	r2, [pc, #340]	@ (8003e74 <HAL_LTDC_MspInit+0x174>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f040 80a3 	bne.w	8003e6a <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003d24:	4b54      	ldr	r3, [pc, #336]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	4a53      	ldr	r2, [pc, #332]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d30:	4b51      	ldr	r3, [pc, #324]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	4a4d      	ldr	r2, [pc, #308]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d42:	f043 0310 	orr.w	r3, r3, #16
 8003d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d48:	4b4b      	ldr	r3, [pc, #300]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003d54:	4b48      	ldr	r3, [pc, #288]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	4a47      	ldr	r2, [pc, #284]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d60:	4b45      	ldr	r3, [pc, #276]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003d6c:	4b42      	ldr	r3, [pc, #264]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d70:	4a41      	ldr	r2, [pc, #260]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d78:	4b3f      	ldr	r3, [pc, #252]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d84:	4b3c      	ldr	r3, [pc, #240]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	4a3b      	ldr	r2, [pc, #236]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d90:	4b39      	ldr	r3, [pc, #228]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d9c:	4b36      	ldr	r3, [pc, #216]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da0:	4a35      	ldr	r2, [pc, #212]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da8:	4b33      	ldr	r3, [pc, #204]	@ (8003e78 <HAL_LTDC_MspInit+0x178>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003db4:	2310      	movs	r3, #16
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003dc4:	230e      	movs	r3, #14
 8003dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dcc:	4619      	mov	r1, r3
 8003dce:	482b      	ldr	r0, [pc, #172]	@ (8003e7c <HAL_LTDC_MspInit+0x17c>)
 8003dd0:	f003 fb52 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003dd4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003de6:	230e      	movs	r3, #14
 8003de8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dee:	4619      	mov	r1, r3
 8003df0:	4823      	ldr	r0, [pc, #140]	@ (8003e80 <HAL_LTDC_MspInit+0x180>)
 8003df2:	f003 fb41 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003df6:	23f7      	movs	r3, #247	@ 0xf7
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e02:	2300      	movs	r3, #0
 8003e04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e06:	230e      	movs	r3, #14
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e0e:	4619      	mov	r1, r3
 8003e10:	481c      	ldr	r0, [pc, #112]	@ (8003e84 <HAL_LTDC_MspInit+0x184>)
 8003e12:	f003 fb31 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	2300      	movs	r3, #0
 8003e26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003e28:	2309      	movs	r3, #9
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e30:	4619      	mov	r1, r3
 8003e32:	4815      	ldr	r0, [pc, #84]	@ (8003e88 <HAL_LTDC_MspInit+0x188>)
 8003e34:	f003 fb20 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003e38:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e46:	2300      	movs	r3, #0
 8003e48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e4a:	230e      	movs	r3, #14
 8003e4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e52:	4619      	mov	r1, r3
 8003e54:	480d      	ldr	r0, [pc, #52]	@ (8003e8c <HAL_LTDC_MspInit+0x18c>)
 8003e56:	f003 fb0f 	bl	8007478 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2105      	movs	r1, #5
 8003e5e:	2058      	movs	r0, #88	@ 0x58
 8003e60:	f001 ffc6 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003e64:	2058      	movs	r0, #88	@ 0x58
 8003e66:	f001 ffdf 	bl	8005e28 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003e6a:	bf00      	nop
 8003e6c:	3738      	adds	r7, #56	@ 0x38
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40016800 	.word	0x40016800
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40022400 	.word	0x40022400
 8003e84:	40022800 	.word	0x40022800
 8003e88:	40021800 	.word	0x40021800
 8003e8c:	40022000 	.word	0x40022000

08003e90 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	@ 0x30
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e98:	f107 031c 	add.w	r3, r7, #28
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3b      	ldr	r2, [pc, #236]	@ (8003f9c <HAL_QSPI_MspInit+0x10c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d170      	bne.n	8003f94 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	4a3a      	ldr	r2, [pc, #232]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	6393      	str	r3, [r2, #56]	@ 0x38
 8003ebe:	4b38      	ldr	r3, [pc, #224]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eca:	4b35      	ldr	r3, [pc, #212]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	4a34      	ldr	r2, [pc, #208]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003ed0:	f043 0310 	orr.w	r3, r3, #16
 8003ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed6:	4b32      	ldr	r3, [pc, #200]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003ee8:	f043 0302 	orr.w	r3, r3, #2
 8003eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eee:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efa:	4b29      	ldr	r3, [pc, #164]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	4a28      	ldr	r2, [pc, #160]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f06:	4b26      	ldr	r3, [pc, #152]	@ (8003fa0 <HAL_QSPI_MspInit+0x110>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003f12:	2304      	movs	r3, #4
 8003f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003f22:	2309      	movs	r3, #9
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003f26:	f107 031c 	add.w	r3, r7, #28
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	481d      	ldr	r0, [pc, #116]	@ (8003fa4 <HAL_QSPI_MspInit+0x114>)
 8003f2e:	f003 faa3 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003f32:	2340      	movs	r3, #64	@ 0x40
 8003f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f36:	2302      	movs	r3, #2
 8003f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003f42:	230a      	movs	r3, #10
 8003f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003f46:	f107 031c 	add.w	r3, r7, #28
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4816      	ldr	r0, [pc, #88]	@ (8003fa8 <HAL_QSPI_MspInit+0x118>)
 8003f4e:	f003 fa93 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f52:	2304      	movs	r3, #4
 8003f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f56:	2302      	movs	r3, #2
 8003f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003f62:	2309      	movs	r3, #9
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f66:	f107 031c 	add.w	r3, r7, #28
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	480e      	ldr	r0, [pc, #56]	@ (8003fa8 <HAL_QSPI_MspInit+0x118>)
 8003f6e:	f003 fa83 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003f72:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f80:	2303      	movs	r3, #3
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003f84:	2309      	movs	r3, #9
 8003f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f88:	f107 031c 	add.w	r3, r7, #28
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4807      	ldr	r0, [pc, #28]	@ (8003fac <HAL_QSPI_MspInit+0x11c>)
 8003f90:	f003 fa72 	bl	8007478 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003f94:	bf00      	nop
 8003f96:	3730      	adds	r7, #48	@ 0x30
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	a0001000 	.word	0xa0001000
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40020400 	.word	0x40020400
 8003fac:	40020c00 	.word	0x40020c00

08003fb0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b0a4      	sub	sp, #144	@ 0x90
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	2284      	movs	r2, #132	@ 0x84
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f017 fb11 	bl	801b5e8 <memset>
  if(hrtc->Instance==RTC)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a0e      	ldr	r2, [pc, #56]	@ (8004004 <HAL_RTC_MspInit+0x54>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d114      	bne.n	8003ffa <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fda:	f107 030c 	add.w	r3, r7, #12
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f006 ff68 	bl	800aeb4 <HAL_RCCEx_PeriphCLKConfig>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003fea:	f7ff fb5d 	bl	80036a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fee:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <HAL_RTC_MspInit+0x58>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a05      	ldr	r2, [pc, #20]	@ (8004008 <HAL_RTC_MspInit+0x58>)
 8003ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003ffa:	bf00      	nop
 8003ffc:	3790      	adds	r7, #144	@ 0x90
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40002800 	.word	0x40002800
 8004008:	40023800 	.word	0x40023800

0800400c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	@ 0x28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a25      	ldr	r2, [pc, #148]	@ (80040c0 <HAL_SD_MspInit+0xb4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d144      	bne.n	80040b8 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800402e:	4b25      	ldr	r3, [pc, #148]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	4a24      	ldr	r2, [pc, #144]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 8004034:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004038:	6453      	str	r3, [r2, #68]	@ 0x44
 800403a:	4b22      	ldr	r3, [pc, #136]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004046:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	6313      	str	r3, [r2, #48]	@ 0x30
 8004052:	4b1c      	ldr	r3, [pc, #112]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800405e:	4b19      	ldr	r3, [pc, #100]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	4a18      	ldr	r2, [pc, #96]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 8004064:	f043 0308 	orr.w	r3, r3, #8
 8004068:	6313      	str	r3, [r2, #48]	@ 0x30
 800406a:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <HAL_SD_MspInit+0xb8>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004076:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800407a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407c:	2302      	movs	r3, #2
 800407e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004084:	2303      	movs	r3, #3
 8004086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004088:	230c      	movs	r3, #12
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	4619      	mov	r1, r3
 8004092:	480d      	ldr	r0, [pc, #52]	@ (80040c8 <HAL_SD_MspInit+0xbc>)
 8004094:	f003 f9f0 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004098:	2304      	movs	r3, #4
 800409a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80040a8:	230c      	movs	r3, #12
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4619      	mov	r1, r3
 80040b2:	4806      	ldr	r0, [pc, #24]	@ (80040cc <HAL_SD_MspInit+0xc0>)
 80040b4:	f003 f9e0 	bl	8007478 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80040b8:	bf00      	nop
 80040ba:	3728      	adds	r7, #40	@ 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020c00 	.word	0x40020c00

080040d0 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b0aa      	sub	sp, #168	@ 0xa8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040e8:	f107 0310 	add.w	r3, r7, #16
 80040ec:	2284      	movs	r2, #132	@ 0x84
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f017 fa79 	bl	801b5e8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80040fe:	d143      	bne.n	8004188 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004104:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004106:	2364      	movs	r3, #100	@ 0x64
 8004108:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800410a:	2302      	movs	r3, #2
 800410c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800410e:	2302      	movs	r3, #2
 8004110:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004112:	2302      	movs	r3, #2
 8004114:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004116:	2301      	movs	r3, #1
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800411a:	f107 0310 	add.w	r3, r7, #16
 800411e:	4618      	mov	r0, r3
 8004120:	f006 fec8 	bl	800aeb4 <HAL_RCCEx_PeriphCLKConfig>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800412a:	f7ff fabd 	bl	80036a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800412e:	4b18      	ldr	r3, [pc, #96]	@ (8004190 <HAL_SPDIFRX_MspInit+0xc0>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	4a17      	ldr	r2, [pc, #92]	@ (8004190 <HAL_SPDIFRX_MspInit+0xc0>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004138:	6413      	str	r3, [r2, #64]	@ 0x40
 800413a:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <HAL_SPDIFRX_MspInit+0xc0>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004146:	4b12      	ldr	r3, [pc, #72]	@ (8004190 <HAL_SPDIFRX_MspInit+0xc0>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	4a11      	ldr	r2, [pc, #68]	@ (8004190 <HAL_SPDIFRX_MspInit+0xc0>)
 800414c:	f043 0308 	orr.w	r3, r3, #8
 8004150:	6313      	str	r3, [r2, #48]	@ 0x30
 8004152:	4b0f      	ldr	r3, [pc, #60]	@ (8004190 <HAL_SPDIFRX_MspInit+0xc0>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004164:	2302      	movs	r3, #2
 8004166:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004170:	2300      	movs	r3, #0
 8004172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004176:	2308      	movs	r3, #8
 8004178:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800417c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004180:	4619      	mov	r1, r3
 8004182:	4804      	ldr	r0, [pc, #16]	@ (8004194 <HAL_SPDIFRX_MspInit+0xc4>)
 8004184:	f003 f978 	bl	8007478 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004188:	bf00      	nop
 800418a:	37a8      	adds	r7, #168	@ 0xa8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	40020c00 	.word	0x40020c00

08004198 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a25      	ldr	r2, [pc, #148]	@ (800424c <HAL_SPI_MspInit+0xb4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d144      	bne.n	8004244 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041ba:	4b25      	ldr	r3, [pc, #148]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	4a24      	ldr	r2, [pc, #144]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041c6:	4b22      	ldr	r3, [pc, #136]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80041d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041de:	4b1c      	ldr	r3, [pc, #112]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ea:	4b19      	ldr	r3, [pc, #100]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ee:	4a18      	ldr	r2, [pc, #96]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041f6:	4b16      	ldr	r3, [pc, #88]	@ (8004250 <HAL_SPI_MspInit+0xb8>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004202:	2302      	movs	r3, #2
 8004204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004206:	2302      	movs	r3, #2
 8004208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004212:	2305      	movs	r3, #5
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004216:	f107 0314 	add.w	r3, r7, #20
 800421a:	4619      	mov	r1, r3
 800421c:	480d      	ldr	r0, [pc, #52]	@ (8004254 <HAL_SPI_MspInit+0xbc>)
 800421e:	f003 f92b 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004222:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	2302      	movs	r3, #2
 800422a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004230:	2300      	movs	r3, #0
 8004232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004234:	2305      	movs	r3, #5
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4619      	mov	r1, r3
 800423e:	4806      	ldr	r0, [pc, #24]	@ (8004258 <HAL_SPI_MspInit+0xc0>)
 8004240:	f003 f91a 	bl	8007478 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004244:	bf00      	nop
 8004246:	3728      	adds	r7, #40	@ 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40003800 	.word	0x40003800
 8004250:	40023800 	.word	0x40023800
 8004254:	40022000 	.word	0x40022000
 8004258:	40020400 	.word	0x40020400

0800425c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	@ 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2e      	ldr	r2, [pc, #184]	@ (8004324 <HAL_TIM_Base_MspInit+0xc8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10c      	bne.n	8004288 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800426e:	4b2e      	ldr	r3, [pc, #184]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004272:	4a2d      	ldr	r2, [pc, #180]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6453      	str	r3, [r2, #68]	@ 0x44
 800427a:	4b2b      	ldr	r3, [pc, #172]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004286:	e046      	b.n	8004316 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004290:	d10c      	bne.n	80042ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004292:	4b25      	ldr	r3, [pc, #148]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	4a24      	ldr	r2, [pc, #144]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6413      	str	r3, [r2, #64]	@ 0x40
 800429e:	4b22      	ldr	r3, [pc, #136]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	69bb      	ldr	r3, [r7, #24]
}
 80042aa:	e034      	b.n	8004316 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1e      	ldr	r2, [pc, #120]	@ (800432c <HAL_TIM_Base_MspInit+0xd0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10c      	bne.n	80042d0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042c2:	4b19      	ldr	r3, [pc, #100]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697b      	ldr	r3, [r7, #20]
}
 80042ce:	e022      	b.n	8004316 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a16      	ldr	r2, [pc, #88]	@ (8004330 <HAL_TIM_Base_MspInit+0xd4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10c      	bne.n	80042f4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042da:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	4a12      	ldr	r2, [pc, #72]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 80042e0:	f043 0308 	orr.w	r3, r3, #8
 80042e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]
}
 80042f2:	e010      	b.n	8004316 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <HAL_TIM_Base_MspInit+0xd8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10b      	bne.n	8004316 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	6453      	str	r3, [r2, #68]	@ 0x44
 800430a:	4b07      	ldr	r3, [pc, #28]	@ (8004328 <HAL_TIM_Base_MspInit+0xcc>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
}
 8004316:	bf00      	nop
 8004318:	3724      	adds	r7, #36	@ 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40023800 	.word	0x40023800
 800432c:	40000400 	.word	0x40000400
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40010400 	.word	0x40010400

08004338 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0a      	ldr	r2, [pc, #40]	@ (8004370 <HAL_TIM_PWM_MspInit+0x38>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10b      	bne.n	8004362 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800434a:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <HAL_TIM_PWM_MspInit+0x3c>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	4a09      	ldr	r2, [pc, #36]	@ (8004374 <HAL_TIM_PWM_MspInit+0x3c>)
 8004350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004354:	6413      	str	r3, [r2, #64]	@ 0x40
 8004356:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <HAL_TIM_PWM_MspInit+0x3c>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40001800 	.word	0x40001800
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	@ 0x30
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 031c 	add.w	r3, r7, #28
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a56      	ldr	r2, [pc, #344]	@ (80044f0 <HAL_TIM_MspPostInit+0x178>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d11d      	bne.n	80043d6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	4b56      	ldr	r3, [pc, #344]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	4a55      	ldr	r2, [pc, #340]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a6:	4b53      	ldr	r3, [pc, #332]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80043b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043c4:	2301      	movs	r3, #1
 80043c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80043c8:	f107 031c 	add.w	r3, r7, #28
 80043cc:	4619      	mov	r1, r3
 80043ce:	484a      	ldr	r0, [pc, #296]	@ (80044f8 <HAL_TIM_MspPostInit+0x180>)
 80043d0:	f003 f852 	bl	8007478 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80043d4:	e087      	b.n	80044e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043de:	d11d      	bne.n	800441c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e0:	4b44      	ldr	r3, [pc, #272]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	4a43      	ldr	r2, [pc, #268]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ec:	4b41      	ldr	r3, [pc, #260]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80043f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800440a:	2301      	movs	r3, #1
 800440c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800440e:	f107 031c 	add.w	r3, r7, #28
 8004412:	4619      	mov	r1, r3
 8004414:	4838      	ldr	r0, [pc, #224]	@ (80044f8 <HAL_TIM_MspPostInit+0x180>)
 8004416:	f003 f82f 	bl	8007478 <HAL_GPIO_Init>
}
 800441a:	e064      	b.n	80044e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a36      	ldr	r2, [pc, #216]	@ (80044fc <HAL_TIM_MspPostInit+0x184>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d11c      	bne.n	8004460 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004426:	4b33      	ldr	r3, [pc, #204]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	4a32      	ldr	r2, [pc, #200]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	6313      	str	r3, [r2, #48]	@ 0x30
 8004432:	4b30      	ldr	r3, [pc, #192]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800443e:	2310      	movs	r3, #16
 8004440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004442:	2302      	movs	r3, #2
 8004444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004446:	2300      	movs	r3, #0
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444a:	2300      	movs	r3, #0
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800444e:	2302      	movs	r3, #2
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004452:	f107 031c 	add.w	r3, r7, #28
 8004456:	4619      	mov	r1, r3
 8004458:	4829      	ldr	r0, [pc, #164]	@ (8004500 <HAL_TIM_MspPostInit+0x188>)
 800445a:	f003 f80d 	bl	8007478 <HAL_GPIO_Init>
}
 800445e:	e042      	b.n	80044e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a27      	ldr	r2, [pc, #156]	@ (8004504 <HAL_TIM_MspPostInit+0x18c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d11c      	bne.n	80044a4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800446a:	4b22      	ldr	r3, [pc, #136]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	4a21      	ldr	r2, [pc, #132]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004474:	6313      	str	r3, [r2, #48]	@ 0x30
 8004476:	4b1f      	ldr	r3, [pc, #124]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004486:	2302      	movs	r3, #2
 8004488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448e:	2300      	movs	r3, #0
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004492:	2302      	movs	r3, #2
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004496:	f107 031c 	add.w	r3, r7, #28
 800449a:	4619      	mov	r1, r3
 800449c:	481a      	ldr	r0, [pc, #104]	@ (8004508 <HAL_TIM_MspPostInit+0x190>)
 800449e:	f002 ffeb 	bl	8007478 <HAL_GPIO_Init>
}
 80044a2:	e020      	b.n	80044e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a18      	ldr	r2, [pc, #96]	@ (800450c <HAL_TIM_MspPostInit+0x194>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d11b      	bne.n	80044e6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ae:	4b11      	ldr	r3, [pc, #68]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	4a10      	ldr	r2, [pc, #64]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 80044b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ba:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <HAL_TIM_MspPostInit+0x17c>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80044c6:	2340      	movs	r3, #64	@ 0x40
 80044c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d2:	2300      	movs	r3, #0
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80044d6:	2309      	movs	r3, #9
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80044da:	f107 031c 	add.w	r3, r7, #28
 80044de:	4619      	mov	r1, r3
 80044e0:	480b      	ldr	r0, [pc, #44]	@ (8004510 <HAL_TIM_MspPostInit+0x198>)
 80044e2:	f002 ffc9 	bl	8007478 <HAL_GPIO_Init>
}
 80044e6:	bf00      	nop
 80044e8:	3730      	adds	r7, #48	@ 0x30
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40020000 	.word	0x40020000
 80044fc:	40000400 	.word	0x40000400
 8004500:	40020400 	.word	0x40020400
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40022000 	.word	0x40022000
 800450c:	40001800 	.word	0x40001800
 8004510:	40021c00 	.word	0x40021c00

08004514 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b0ae      	sub	sp, #184	@ 0xb8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800452c:	f107 0320 	add.w	r3, r7, #32
 8004530:	2284      	movs	r2, #132	@ 0x84
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f017 f857 	bl	801b5e8 <memset>
  if(huart->Instance==USART1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a53      	ldr	r2, [pc, #332]	@ (800468c <HAL_UART_MspInit+0x178>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d15d      	bne.n	8004600 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004544:	2340      	movs	r3, #64	@ 0x40
 8004546:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004548:	2300      	movs	r3, #0
 800454a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800454c:	f107 0320 	add.w	r3, r7, #32
 8004550:	4618      	mov	r0, r3
 8004552:	f006 fcaf 	bl	800aeb4 <HAL_RCCEx_PeriphCLKConfig>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800455c:	f7ff f8a4 	bl	80036a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004560:	4b4b      	ldr	r3, [pc, #300]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 8004562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004564:	4a4a      	ldr	r2, [pc, #296]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 8004566:	f043 0310 	orr.w	r3, r3, #16
 800456a:	6453      	str	r3, [r2, #68]	@ 0x44
 800456c:	4b48      	ldr	r3, [pc, #288]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 800456e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004578:	4b45      	ldr	r3, [pc, #276]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	4a44      	ldr	r2, [pc, #272]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	6313      	str	r3, [r2, #48]	@ 0x30
 8004584:	4b42      	ldr	r3, [pc, #264]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004590:	4b3f      	ldr	r3, [pc, #252]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	4a3e      	ldr	r2, [pc, #248]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6313      	str	r3, [r2, #48]	@ 0x30
 800459c:	4b3c      	ldr	r3, [pc, #240]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ae:	2302      	movs	r3, #2
 80045b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ba:	2300      	movs	r3, #0
 80045bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045c0:	2307      	movs	r3, #7
 80045c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80045c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4831      	ldr	r0, [pc, #196]	@ (8004694 <HAL_UART_MspInit+0x180>)
 80045ce:	f002 ff53 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80045d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045ec:	2307      	movs	r3, #7
 80045ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80045f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4827      	ldr	r0, [pc, #156]	@ (8004698 <HAL_UART_MspInit+0x184>)
 80045fa:	f002 ff3d 	bl	8007478 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80045fe:	e040      	b.n	8004682 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a25      	ldr	r2, [pc, #148]	@ (800469c <HAL_UART_MspInit+0x188>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d13b      	bne.n	8004682 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800460a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800460e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004610:	2300      	movs	r3, #0
 8004612:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004614:	f107 0320 	add.w	r3, r7, #32
 8004618:	4618      	mov	r0, r3
 800461a:	f006 fc4b 	bl	800aeb4 <HAL_RCCEx_PeriphCLKConfig>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004624:	f7ff f840 	bl	80036a8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004628:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 800462a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462c:	4a18      	ldr	r2, [pc, #96]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 800462e:	f043 0320 	orr.w	r3, r3, #32
 8004632:	6453      	str	r3, [r2, #68]	@ 0x44
 8004634:	4b16      	ldr	r3, [pc, #88]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 8004636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004640:	4b13      	ldr	r3, [pc, #76]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 8004642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004644:	4a12      	ldr	r2, [pc, #72]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6313      	str	r3, [r2, #48]	@ 0x30
 800464c:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <HAL_UART_MspInit+0x17c>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004658:	23c0      	movs	r3, #192	@ 0xc0
 800465a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465e:	2302      	movs	r3, #2
 8004660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466a:	2303      	movs	r3, #3
 800466c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004670:	2308      	movs	r3, #8
 8004672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004676:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800467a:	4619      	mov	r1, r3
 800467c:	4808      	ldr	r0, [pc, #32]	@ (80046a0 <HAL_UART_MspInit+0x18c>)
 800467e:	f002 fefb 	bl	8007478 <HAL_GPIO_Init>
}
 8004682:	bf00      	nop
 8004684:	37b8      	adds	r7, #184	@ 0xb8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40011000 	.word	0x40011000
 8004690:	40023800 	.word	0x40023800
 8004694:	40020400 	.word	0x40020400
 8004698:	40020000 	.word	0x40020000
 800469c:	40011400 	.word	0x40011400
 80046a0:	40020800 	.word	0x40020800

080046a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	60da      	str	r2, [r3, #12]
 80046b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80046b8:	4b3a      	ldr	r3, [pc, #232]	@ (80047a4 <HAL_FMC_MspInit+0x100>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d16d      	bne.n	800479c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80046c0:	4b38      	ldr	r3, [pc, #224]	@ (80047a4 <HAL_FMC_MspInit+0x100>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80046c6:	4b38      	ldr	r3, [pc, #224]	@ (80047a8 <HAL_FMC_MspInit+0x104>)
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	4a37      	ldr	r2, [pc, #220]	@ (80047a8 <HAL_FMC_MspInit+0x104>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80046d2:	4b35      	ldr	r3, [pc, #212]	@ (80047a8 <HAL_FMC_MspInit+0x104>)
 80046d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80046de:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80046e2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e4:	2302      	movs	r3, #2
 80046e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ec:	2303      	movs	r3, #3
 80046ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80046f0:	230c      	movs	r3, #12
 80046f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	482c      	ldr	r0, [pc, #176]	@ (80047ac <HAL_FMC_MspInit+0x108>)
 80046fa:	f002 febd 	bl	8007478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80046fe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004702:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470c:	2303      	movs	r3, #3
 800470e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004710:	230c      	movs	r3, #12
 8004712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004714:	1d3b      	adds	r3, r7, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4825      	ldr	r0, [pc, #148]	@ (80047b0 <HAL_FMC_MspInit+0x10c>)
 800471a:	f002 fead 	bl	8007478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800471e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004722:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004724:	2302      	movs	r3, #2
 8004726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472c:	2303      	movs	r3, #3
 800472e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004730:	230c      	movs	r3, #12
 8004732:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	4619      	mov	r1, r3
 8004738:	481e      	ldr	r0, [pc, #120]	@ (80047b4 <HAL_FMC_MspInit+0x110>)
 800473a:	f002 fe9d 	bl	8007478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800473e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004742:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	2302      	movs	r3, #2
 8004746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474c:	2303      	movs	r3, #3
 800474e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004750:	230c      	movs	r3, #12
 8004752:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4817      	ldr	r0, [pc, #92]	@ (80047b8 <HAL_FMC_MspInit+0x114>)
 800475a:	f002 fe8d 	bl	8007478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800475e:	2328      	movs	r3, #40	@ 0x28
 8004760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004762:	2302      	movs	r3, #2
 8004764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476a:	2303      	movs	r3, #3
 800476c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800476e:	230c      	movs	r3, #12
 8004770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4811      	ldr	r0, [pc, #68]	@ (80047bc <HAL_FMC_MspInit+0x118>)
 8004778:	f002 fe7e 	bl	8007478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800477c:	2308      	movs	r3, #8
 800477e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004780:	2302      	movs	r3, #2
 8004782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004788:	2303      	movs	r3, #3
 800478a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800478c:	230c      	movs	r3, #12
 800478e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	4619      	mov	r1, r3
 8004794:	480a      	ldr	r0, [pc, #40]	@ (80047c0 <HAL_FMC_MspInit+0x11c>)
 8004796:	f002 fe6f 	bl	8007478 <HAL_GPIO_Init>
 800479a:	e000      	b.n	800479e <HAL_FMC_MspInit+0xfa>
    return;
 800479c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20001f38 	.word	0x20001f38
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40021800 	.word	0x40021800
 80047b4:	40020c00 	.word	0x40020c00
 80047b8:	40021400 	.word	0x40021400
 80047bc:	40021c00 	.word	0x40021c00
 80047c0:	40020800 	.word	0x40020800

080047c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80047cc:	f7ff ff6a 	bl	80046a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	@ 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004894 <HAL_SAI_MspInit+0xbc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d124      	bne.n	8004834 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80047ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <HAL_SAI_MspInit+0xc0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80047f2:	4b2a      	ldr	r3, [pc, #168]	@ (800489c <HAL_SAI_MspInit+0xc4>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f6:	4a29      	ldr	r2, [pc, #164]	@ (800489c <HAL_SAI_MspInit+0xc4>)
 80047f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80047fe:	4b27      	ldr	r3, [pc, #156]	@ (800489c <HAL_SAI_MspInit+0xc4>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800480a:	4b23      	ldr	r3, [pc, #140]	@ (8004898 <HAL_SAI_MspInit+0xc0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	4a21      	ldr	r2, [pc, #132]	@ (8004898 <HAL_SAI_MspInit+0xc0>)
 8004812:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004814:	23f0      	movs	r3, #240	@ 0xf0
 8004816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004824:	230a      	movs	r3, #10
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	4619      	mov	r1, r3
 800482e:	481c      	ldr	r0, [pc, #112]	@ (80048a0 <HAL_SAI_MspInit+0xc8>)
 8004830:	f002 fe22 	bl	8007478 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1a      	ldr	r2, [pc, #104]	@ (80048a4 <HAL_SAI_MspInit+0xcc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d125      	bne.n	800488a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800483e:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <HAL_SAI_MspInit+0xc0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004846:	4b15      	ldr	r3, [pc, #84]	@ (800489c <HAL_SAI_MspInit+0xc4>)
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	4a14      	ldr	r2, [pc, #80]	@ (800489c <HAL_SAI_MspInit+0xc4>)
 800484c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004850:	6453      	str	r3, [r2, #68]	@ 0x44
 8004852:	4b12      	ldr	r3, [pc, #72]	@ (800489c <HAL_SAI_MspInit+0xc4>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800485e:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <HAL_SAI_MspInit+0xc0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	4a0c      	ldr	r2, [pc, #48]	@ (8004898 <HAL_SAI_MspInit+0xc0>)
 8004866:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800486c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486e:	2302      	movs	r3, #2
 8004870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800487a:	230a      	movs	r3, #10
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800487e:	f107 0314 	add.w	r3, r7, #20
 8004882:	4619      	mov	r1, r3
 8004884:	4808      	ldr	r0, [pc, #32]	@ (80048a8 <HAL_SAI_MspInit+0xd0>)
 8004886:	f002 fdf7 	bl	8007478 <HAL_GPIO_Init>

    }
}
 800488a:	bf00      	nop
 800488c:	3728      	adds	r7, #40	@ 0x28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40015c04 	.word	0x40015c04
 8004898:	20001f3c 	.word	0x20001f3c
 800489c:	40023800 	.word	0x40023800
 80048a0:	40022000 	.word	0x40022000
 80048a4:	40015c24 	.word	0x40015c24
 80048a8:	40021800 	.word	0x40021800

080048ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08e      	sub	sp, #56	@ 0x38
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80048bc:	4b33      	ldr	r3, [pc, #204]	@ (800498c <HAL_InitTick+0xe0>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	4a32      	ldr	r2, [pc, #200]	@ (800498c <HAL_InitTick+0xe0>)
 80048c2:	f043 0310 	orr.w	r3, r3, #16
 80048c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80048c8:	4b30      	ldr	r3, [pc, #192]	@ (800498c <HAL_InitTick+0xe0>)
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048d4:	f107 0210 	add.w	r2, r7, #16
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	4611      	mov	r1, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f006 fab6 	bl	800ae50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80048e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80048ee:	f006 fa87 	bl	800ae00 <HAL_RCC_GetPCLK1Freq>
 80048f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80048f4:	e004      	b.n	8004900 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80048f6:	f006 fa83 	bl	800ae00 <HAL_RCC_GetPCLK1Freq>
 80048fa:	4603      	mov	r3, r0
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004902:	4a23      	ldr	r2, [pc, #140]	@ (8004990 <HAL_InitTick+0xe4>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	0c9b      	lsrs	r3, r3, #18
 800490a:	3b01      	subs	r3, #1
 800490c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800490e:	4b21      	ldr	r3, [pc, #132]	@ (8004994 <HAL_InitTick+0xe8>)
 8004910:	4a21      	ldr	r2, [pc, #132]	@ (8004998 <HAL_InitTick+0xec>)
 8004912:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004914:	4b1f      	ldr	r3, [pc, #124]	@ (8004994 <HAL_InitTick+0xe8>)
 8004916:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800491a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800491c:	4a1d      	ldr	r2, [pc, #116]	@ (8004994 <HAL_InitTick+0xe8>)
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004922:	4b1c      	ldr	r3, [pc, #112]	@ (8004994 <HAL_InitTick+0xe8>)
 8004924:	2200      	movs	r2, #0
 8004926:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004928:	4b1a      	ldr	r3, [pc, #104]	@ (8004994 <HAL_InitTick+0xe8>)
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800492e:	4b19      	ldr	r3, [pc, #100]	@ (8004994 <HAL_InitTick+0xe8>)
 8004930:	2200      	movs	r2, #0
 8004932:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004934:	4817      	ldr	r0, [pc, #92]	@ (8004994 <HAL_InitTick+0xe8>)
 8004936:	f009 f976 	bl	800dc26 <HAL_TIM_Base_Init>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004940:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11b      	bne.n	8004980 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004948:	4812      	ldr	r0, [pc, #72]	@ (8004994 <HAL_InitTick+0xe8>)
 800494a:	f009 f9c3 	bl	800dcd4 <HAL_TIM_Base_Start_IT>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004954:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004958:	2b00      	cmp	r3, #0
 800495a:	d111      	bne.n	8004980 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800495c:	2036      	movs	r0, #54	@ 0x36
 800495e:	f001 fa63 	bl	8005e28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b0f      	cmp	r3, #15
 8004966:	d808      	bhi.n	800497a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004968:	2200      	movs	r2, #0
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	2036      	movs	r0, #54	@ 0x36
 800496e:	f001 fa3f 	bl	8005df0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004972:	4a0a      	ldr	r2, [pc, #40]	@ (800499c <HAL_InitTick+0xf0>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	e002      	b.n	8004980 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004980:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004984:	4618      	mov	r0, r3
 8004986:	3738      	adds	r7, #56	@ 0x38
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40023800 	.word	0x40023800
 8004990:	431bde83 	.word	0x431bde83
 8004994:	20001f40 	.word	0x20001f40
 8004998:	40001000 	.word	0x40001000
 800499c:	20000064 	.word	0x20000064

080049a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <NMI_Handler+0x4>

080049a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <HardFault_Handler+0x4>

080049b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <MemManage_Handler+0x4>

080049b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <BusFault_Handler+0x4>

080049c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <UsageFault_Handler+0x4>

080049c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80049dc:	4802      	ldr	r0, [pc, #8]	@ (80049e8 <TIM6_DAC_IRQHandler+0x10>)
 80049de:	f009 fa48 	bl	800de72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20001f40 	.word	0x20001f40

080049ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80049f0:	4802      	ldr	r0, [pc, #8]	@ (80049fc <OTG_FS_IRQHandler+0x10>)
 80049f2:	f003 f9e7 	bl	8007dc4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	2000a988 	.word	0x2000a988

08004a00 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004a04:	4802      	ldr	r0, [pc, #8]	@ (8004a10 <LTDC_IRQHandler+0x10>)
 8004a06:	f005 fa01 	bl	8009e0c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000125c 	.word	0x2000125c

08004a14 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004a18:	4802      	ldr	r0, [pc, #8]	@ (8004a24 <DMA2D_IRQHandler+0x10>)
 8004a1a:	f002 f83d 	bl	8006a98 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	200010c4 	.word	0x200010c4

08004a28 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004a2c:	4802      	ldr	r0, [pc, #8]	@ (8004a38 <DMA2_Stream1_IRQHandler+0x10>)
 8004a2e:	f001 fd73 	bl	8006518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20001ac8 	.word	0x20001ac8

08004a3c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004a40:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <USART6_IRQHandler+0x2c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d106      	bne.n	8004a5c <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8004a4e:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <USART6_IRQHandler+0x2c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2210      	movs	r2, #16
 8004a54:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004a56:	4804      	ldr	r0, [pc, #16]	@ (8004a68 <USART6_IRQHandler+0x2c>)
 8004a58:	f000 fd6c 	bl	8005534 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a5c:	4802      	ldr	r0, [pc, #8]	@ (8004a68 <USART6_IRQHandler+0x2c>)
 8004a5e:	f00a fc53 	bl	800f308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	200017fc 	.word	0x200017fc

08004a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a74:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <_sbrk+0x5c>)
 8004a76:	4b15      	ldr	r3, [pc, #84]	@ (8004acc <_sbrk+0x60>)
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a80:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <_sbrk+0x64>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a88:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <_sbrk+0x64>)
 8004a8a:	4a12      	ldr	r2, [pc, #72]	@ (8004ad4 <_sbrk+0x68>)
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ad0 <_sbrk+0x64>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d207      	bcs.n	8004aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a9c:	f016 fde6 	bl	801b66c <__errno>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	220c      	movs	r2, #12
 8004aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	e009      	b.n	8004ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aac:	4b08      	ldr	r3, [pc, #32]	@ (8004ad0 <_sbrk+0x64>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <_sbrk+0x64>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	4a05      	ldr	r2, [pc, #20]	@ (8004ad0 <_sbrk+0x64>)
 8004abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004abe:	68fb      	ldr	r3, [r7, #12]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20050000 	.word	0x20050000
 8004acc:	00000400 	.word	0x00000400
 8004ad0:	20001f8c 	.word	0x20001f8c
 8004ad4:	2000aeb0 	.word	0x2000aeb0

08004ad8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004adc:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <SystemInit+0x20>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae2:	4a05      	ldr	r2, [pc, #20]	@ (8004af8 <SystemInit+0x20>)
 8004ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004b00:	f000 f803 	bl	8004b0a <TIME_Platform_GetCurrentMs>
 8004b04:	4603      	mov	r3, r0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8004b0e:	f000 fdef 	bl	80056f0 <HAL_GetTick>
 8004b12:	4603      	mov	r3, r0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <LOGGER_Connect+0x16>
 8004b28:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2c:	e016      	b.n	8004b5c <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8004b2e:	223f      	movs	r2, #63	@ 0x3f
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	480c      	ldr	r0, [pc, #48]	@ (8004b64 <LOGGER_Connect+0x4c>)
 8004b34:	f016 fd60 	bl	801b5f8 <strncpy>
    current_config.server_port = port;
 8004b38:	4a0b      	ldr	r2, [pc, #44]	@ (8004b68 <LOGGER_Connect+0x50>)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8004b3e:	6839      	ldr	r1, [r7, #0]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8a5 	bl	8004c90 <LOGGER_Platform_Connect>
 8004b46:	4603      	mov	r3, r0
 8004b48:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <LOGGER_Connect+0x40>
        logger_connected = true;
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <LOGGER_Connect+0x54>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	2000001f 	.word	0x2000001f
 8004b68:	2000001c 	.word	0x2000001c
 8004b6c:	20001f90 	.word	0x20001f90

08004b70 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 8004b78:	4b14      	ldr	r3, [pc, #80]	@ (8004bcc <LOGGER_Send+0x5c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	f083 0301 	eor.w	r3, r3, #1
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <LOGGER_Send+0x1c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <LOGGER_Send+0x22>
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	e017      	b.n	8004bc2 <LOGGER_Send+0x52>
    
    // Network 모듈을 통해 로그 전송 (SD카드 또는 소켓)
    if (Network_IsConnected()) {
 8004b92:	f7fc f93d 	bl	8000e10 <Network_IsConnected>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00e      	beq.n	8004bba <LOGGER_Send+0x4a>
        int result = Network_SendBinary(message, strlen(message) + 1); // null terminator 포함
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fb fb41 	bl	8000224 <strlen>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fc f8e7 	bl	8000d7c <Network_SendBinary>
 8004bae:	60f8      	str	r0, [r7, #12]
        if (result == NETWORK_OK) {
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <LOGGER_Send+0x4a>
            return LOGGER_STATUS_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e003      	b.n	8004bc2 <LOGGER_Send+0x52>
        }
    }
    
    // Network 모듈 사용 실패 시 기존 플랫폼 방식 사용
    return LOGGER_Platform_Send(message);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f874 	bl	8004ca8 <LOGGER_Platform_Send>
 8004bc0:	4603      	mov	r3, r0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20001f90 	.word	0x20001f90

08004bd0 <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8004bd0:	b40e      	push	{r1, r2, r3}
 8004bd2:	b590      	push	{r4, r7, lr}
 8004bd4:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4602      	mov	r2, r0
 8004bdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004be0:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004be4:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 8004be6:	4b27      	ldr	r3, [pc, #156]	@ (8004c84 <LOGGER_SendFormatted+0xb4>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004bee:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004bf2:	7812      	ldrb	r2, [r2, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d33c      	bcc.n	8004c72 <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8004bf8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bfc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004c00:	4a21      	ldr	r2, [pc, #132]	@ (8004c88 <LOGGER_SendFormatted+0xb8>)
 8004c02:	461c      	mov	r4, r3
 8004c04:	4613      	mov	r3, r2
 8004c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8004c0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c10:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c1a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c22:	f107 001c 	add.w	r0, r7, #28
 8004c26:	4a19      	ldr	r2, [pc, #100]	@ (8004c8c <LOGGER_SendFormatted+0xbc>)
 8004c28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c2c:	f016 fc38 	bl	801b4a0 <sniprintf>
 8004c30:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8004c34:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004c38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c3c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004c40:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8004c42:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c46:	f107 021c 	add.w	r2, r7, #28
 8004c4a:	18d0      	adds	r0, r2, r3
 8004c4c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c50:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004c54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c58:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8004c62:	f016 fca3 	bl	801b5ac <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 8004c66:	f107 031c 	add.w	r3, r7, #28
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff80 	bl	8004b70 <LOGGER_Send>
 8004c70:	e000      	b.n	8004c74 <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 8004c72:	bf00      	nop
}
 8004c74:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c7e:	b003      	add	sp, #12
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	2000001c 	.word	0x2000001c
 8004c88:	0801dea4 	.word	0x0801dea4
 8004c8c:	0801deb4 	.word	0x0801deb4

08004c90 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <LOGGER_Platform_Send+0x14>
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cba:	e01c      	b.n	8004cf6 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fb fab1 	bl	8000224 <strlen>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dd12      	ble.n	8004cf2 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	480a      	ldr	r0, [pc, #40]	@ (8004d00 <LOGGER_Platform_Send+0x58>)
 8004cd8:	f00a f8ee 	bl	800eeb8 <HAL_UART_Transmit>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d107      	bne.n	8004cf2 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8004ce2:	2364      	movs	r3, #100	@ 0x64
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	4907      	ldr	r1, [pc, #28]	@ (8004d04 <LOGGER_Platform_Send+0x5c>)
 8004ce8:	4805      	ldr	r0, [pc, #20]	@ (8004d00 <LOGGER_Platform_Send+0x58>)
 8004cea:	f00a f8e5 	bl	800eeb8 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e001      	b.n	8004cf6 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20001774 	.word	0x20001774
 8004d04:	0801deb8 	.word	0x0801deb8

08004d08 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8004d16:	4913      	ldr	r1, [pc, #76]	@ (8004d64 <UART_Connect+0x5c>)
 8004d18:	2003      	movs	r0, #3
 8004d1a:	f7ff ff59 	bl	8004bd0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e01c      	b.n	8004d5c <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	4910      	ldr	r1, [pc, #64]	@ (8004d68 <UART_Connect+0x60>)
 8004d26:	2001      	movs	r0, #1
 8004d28:	f7ff ff52 	bl	8004bd0 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f8fb 	bl	8004f28 <UART_Platform_Connect>
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d108      	bne.n	8004d4e <UART_Connect+0x46>
        uart_connected = true;
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <UART_Connect+0x64>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	490a      	ldr	r1, [pc, #40]	@ (8004d70 <UART_Connect+0x68>)
 8004d46:	2001      	movs	r0, #1
 8004d48:	f7ff ff42 	bl	8004bd0 <LOGGER_SendFormatted>
 8004d4c:	e005      	b.n	8004d5a <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4908      	ldr	r1, [pc, #32]	@ (8004d74 <UART_Connect+0x6c>)
 8004d54:	2003      	movs	r0, #3
 8004d56:	f7ff ff3b 	bl	8004bd0 <LOGGER_SendFormatted>
    }

    return status;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	0801debc 	.word	0x0801debc
 8004d68:	0801dee0 	.word	0x0801dee0
 8004d6c:	20001f91 	.word	0x20001f91
 8004d70:	0801def8 	.word	0x0801def8
 8004d74:	0801df1c 	.word	0x0801df1c

08004d78 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8004d80:	4b19      	ldr	r3, [pc, #100]	@ (8004de8 <UART_Send+0x70>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f083 0301 	eor.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8004d8e:	4917      	ldr	r1, [pc, #92]	@ (8004dec <UART_Send+0x74>)
 8004d90:	2003      	movs	r0, #3
 8004d92:	f7ff ff1d 	bl	8004bd0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e022      	b.n	8004de0 <UART_Send+0x68>
    }

    if (data == NULL) {
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8004da0:	4913      	ldr	r1, [pc, #76]	@ (8004df0 <UART_Send+0x78>)
 8004da2:	2003      	movs	r0, #3
 8004da4:	f7ff ff14 	bl	8004bd0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e019      	b.n	8004de0 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4911      	ldr	r1, [pc, #68]	@ (8004df4 <UART_Send+0x7c>)
 8004db0:	2000      	movs	r0, #0
 8004db2:	f7ff ff0d 	bl	8004bd0 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f99e 	bl	80050f8 <UART_Platform_Send>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d105      	bne.n	8004dd2 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	490b      	ldr	r1, [pc, #44]	@ (8004df8 <UART_Send+0x80>)
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f7ff ff00 	bl	8004bd0 <LOGGER_SendFormatted>
 8004dd0:	e005      	b.n	8004dde <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4909      	ldr	r1, [pc, #36]	@ (8004dfc <UART_Send+0x84>)
 8004dd8:	2003      	movs	r0, #3
 8004dda:	f7ff fef9 	bl	8004bd0 <LOGGER_SendFormatted>
    }

    return status;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20001f91 	.word	0x20001f91
 8004dec:	0801df48 	.word	0x0801df48
 8004df0:	0801df6c 	.word	0x0801df6c
 8004df4:	0801df8c 	.word	0x0801df8c
 8004df8:	0801dfa4 	.word	0x0801dfa4
 8004dfc:	0801dfc0 	.word	0x0801dfc0

08004e00 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8004e0c:	4b22      	ldr	r3, [pc, #136]	@ (8004e98 <UART_Receive+0x98>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f083 0301 	eor.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8004e1a:	4920      	ldr	r1, [pc, #128]	@ (8004e9c <UART_Receive+0x9c>)
 8004e1c:	2003      	movs	r0, #3
 8004e1e:	f7ff fed7 	bl	8004bd0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e034      	b.n	8004e90 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <UART_Receive+0x38>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	dd02      	ble.n	8004e38 <UART_Receive+0x38>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8004e38:	4919      	ldr	r1, [pc, #100]	@ (8004ea0 <UART_Receive+0xa0>)
 8004e3a:	2003      	movs	r0, #3
 8004e3c:	f7ff fec8 	bl	8004bd0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e025      	b.n	8004e90 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4917      	ldr	r1, [pc, #92]	@ (8004ea4 <UART_Receive+0xa4>)
 8004e48:	2000      	movs	r0, #0
 8004e4a:	f7ff fec1 	bl	8004bd0 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f98c 	bl	8005170 <UART_Platform_Receive>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d107      	bne.n	8004e72 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	490f      	ldr	r1, [pc, #60]	@ (8004ea8 <UART_Receive+0xa8>)
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f7ff feb0 	bl	8004bd0 <LOGGER_SendFormatted>
 8004e70:	e00d      	b.n	8004e8e <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d104      	bne.n	8004e82 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8004e78:	490c      	ldr	r1, [pc, #48]	@ (8004eac <UART_Receive+0xac>)
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7ff fea8 	bl	8004bd0 <LOGGER_SendFormatted>
 8004e80:	e005      	b.n	8004e8e <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	461a      	mov	r2, r3
 8004e86:	490a      	ldr	r1, [pc, #40]	@ (8004eb0 <UART_Receive+0xb0>)
 8004e88:	2003      	movs	r0, #3
 8004e8a:	f7ff fea1 	bl	8004bd0 <LOGGER_SendFormatted>
    }

    return status;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20001f91 	.word	0x20001f91
 8004e9c:	0801dfe4 	.word	0x0801dfe4
 8004ea0:	0801e00c 	.word	0x0801e00c
 8004ea4:	0801e038 	.word	0x0801e038
 8004ea8:	0801e060 	.word	0x0801e060
 8004eac:	0801e080 	.word	0x0801e080
 8004eb0:	0801e098 	.word	0x0801e098

08004eb4 <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
    return uart_connected;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <UART_IsConnected+0x14>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20001f91 	.word	0x20001f91

08004ecc <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004ed6:	e007      	b.n	8004ee8 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004ed8:	4b12      	ldr	r3, [pc, #72]	@ (8004f24 <flush_rx_buffer+0x58>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <flush_rx_buffer+0x58>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d106      	bne.n	8004f04 <flush_rx_buffer+0x38>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b63      	cmp	r3, #99	@ 0x63
 8004efa:	dded      	ble.n	8004ed8 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004efc:	e002      	b.n	8004f04 <flush_rx_buffer+0x38>
        flush_count++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3301      	adds	r3, #1
 8004f02:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004f04:	1cf9      	adds	r1, r7, #3
 8004f06:	2301      	movs	r3, #1
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4806      	ldr	r0, [pc, #24]	@ (8004f24 <flush_rx_buffer+0x58>)
 8004f0c:	f00a f85d 	bl	800efca <HAL_UART_Receive>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <flush_rx_buffer+0x50>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b63      	cmp	r3, #99	@ 0x63
 8004f1a:	ddf0      	ble.n	8004efe <flush_rx_buffer+0x32>
    }
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	200017fc 	.word	0x200017fc

08004f28 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8004f30:	4b5b      	ldr	r3, [pc, #364]	@ (80050a0 <UART_Platform_Connect+0x178>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8004f36:	4b5b      	ldr	r3, [pc, #364]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004f38:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f40:	4959      	ldr	r1, [pc, #356]	@ (80050a8 <UART_Platform_Connect+0x180>)
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7ff fe44 	bl	8004bd0 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8004f48:	4b56      	ldr	r3, [pc, #344]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00e      	beq.n	8004f6e <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8004f50:	4956      	ldr	r1, [pc, #344]	@ (80050ac <UART_Platform_Connect+0x184>)
 8004f52:	2001      	movs	r0, #1
 8004f54:	f7ff fe3c 	bl	8004bd0 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004f58:	4b52      	ldr	r3, [pc, #328]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	4952      	ldr	r1, [pc, #328]	@ (80050b0 <UART_Platform_Connect+0x188>)
 8004f66:	2001      	movs	r0, #1
 8004f68:	f7ff fe32 	bl	8004bd0 <LOGGER_SendFormatted>
 8004f6c:	e018      	b.n	8004fa0 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8004f6e:	4951      	ldr	r1, [pc, #324]	@ (80050b4 <UART_Platform_Connect+0x18c>)
 8004f70:	2003      	movs	r0, #3
 8004f72:	f7ff fe2d 	bl	8004bd0 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004f76:	4b4b      	ldr	r3, [pc, #300]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004f78:	4a4f      	ldr	r2, [pc, #316]	@ (80050b8 <UART_Platform_Connect+0x190>)
 8004f7a:	675a      	str	r2, [r3, #116]	@ 0x74
 8004f7c:	4b4e      	ldr	r3, [pc, #312]	@ (80050b8 <UART_Platform_Connect+0x190>)
 8004f7e:	4a49      	ldr	r2, [pc, #292]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004f80:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8004f82:	4b48      	ldr	r3, [pc, #288]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d004      	beq.n	8004f94 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8004f8a:	494c      	ldr	r1, [pc, #304]	@ (80050bc <UART_Platform_Connect+0x194>)
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f7ff fe1f 	bl	8004bd0 <LOGGER_SendFormatted>
 8004f92:	e005      	b.n	8004fa0 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8004f94:	494a      	ldr	r1, [pc, #296]	@ (80050c0 <UART_Platform_Connect+0x198>)
 8004f96:	2003      	movs	r0, #3
 8004f98:	f7ff fe1a 	bl	8004bd0 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e07a      	b.n	8005096 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8004fa0:	4b48      	ldr	r3, [pc, #288]	@ (80050c4 <UART_Platform_Connect+0x19c>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8004fa8:	483e      	ldr	r0, [pc, #248]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004faa:	f00a f91a 	bl	800f1e2 <HAL_UART_DMAStop>
        dma_receiving = false;
 8004fae:	4b45      	ldr	r3, [pc, #276]	@ (80050c4 <UART_Platform_Connect+0x19c>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8004fb4:	4944      	ldr	r1, [pc, #272]	@ (80050c8 <UART_Platform_Connect+0x1a0>)
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f7ff fe0a 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8004fbc:	4b39      	ldr	r3, [pc, #228]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8004fc2:	4b38      	ldr	r3, [pc, #224]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8004fca:	4b36      	ldr	r3, [pc, #216]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d026      	beq.n	8005020 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8004fd2:	4b34      	ldr	r3, [pc, #208]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d01a      	beq.n	8005016 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8004fe0:	493a      	ldr	r1, [pc, #232]	@ (80050cc <UART_Platform_Connect+0x1a4>)
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	f7ff fdf4 	bl	8004bd0 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8004fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fec:	4618      	mov	r0, r3
 8004fee:	f001 f943 	bl	8006278 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8004ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 f890 	bl	800611c <HAL_DMA_Init>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8005002:	4933      	ldr	r1, [pc, #204]	@ (80050d0 <UART_Platform_Connect+0x1a8>)
 8005004:	2003      	movs	r0, #3
 8005006:	f7ff fde3 	bl	8004bd0 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e043      	b.n	8005096 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 800500e:	4931      	ldr	r1, [pc, #196]	@ (80050d4 <UART_Platform_Connect+0x1ac>)
 8005010:	2001      	movs	r0, #1
 8005012:	f7ff fddd 	bl	8004bd0 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005016:	4b23      	ldr	r3, [pc, #140]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8005018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005020:	f7ff ff54 	bl	8004ecc <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8005024:	4b2c      	ldr	r3, [pc, #176]	@ (80050d8 <UART_Platform_Connect+0x1b0>)
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 800502a:	4b2c      	ldr	r3, [pc, #176]	@ (80050dc <UART_Platform_Connect+0x1b4>)
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005030:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <UART_Platform_Connect+0x1b8>)
 8005032:	2200      	movs	r2, #0
 8005034:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800503a:	2100      	movs	r1, #0
 800503c:	4829      	ldr	r0, [pc, #164]	@ (80050e4 <UART_Platform_Connect+0x1bc>)
 800503e:	f016 fad3 	bl	801b5e8 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8005042:	4929      	ldr	r1, [pc, #164]	@ (80050e8 <UART_Platform_Connect+0x1c0>)
 8005044:	2001      	movs	r0, #1
 8005046:	f7ff fdc3 	bl	8004bd0 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800504a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800504e:	4925      	ldr	r1, [pc, #148]	@ (80050e4 <UART_Platform_Connect+0x1bc>)
 8005050:	4814      	ldr	r0, [pc, #80]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8005052:	f00a f882 	bl	800f15a <HAL_UART_Receive_DMA>
 8005056:	4603      	mov	r3, r0
 8005058:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005060:	4b18      	ldr	r3, [pc, #96]	@ (80050c4 <UART_Platform_Connect+0x19c>)
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8005066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800506a:	4920      	ldr	r1, [pc, #128]	@ (80050ec <UART_Platform_Connect+0x1c4>)
 800506c:	2001      	movs	r0, #1
 800506e:	f7ff fdaf 	bl	8004bd0 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e00f      	b.n	8005096 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	461a      	mov	r2, r3
 800507a:	491d      	ldr	r1, [pc, #116]	@ (80050f0 <UART_Platform_Connect+0x1c8>)
 800507c:	2003      	movs	r0, #3
 800507e:	f7ff fda7 	bl	8004bd0 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8005082:	4b08      	ldr	r3, [pc, #32]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8005084:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005086:	4b07      	ldr	r3, [pc, #28]	@ (80050a4 <UART_Platform_Connect+0x17c>)
 8005088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800508c:	4919      	ldr	r1, [pc, #100]	@ (80050f4 <UART_Platform_Connect+0x1cc>)
 800508e:	2003      	movs	r0, #3
 8005090:	f7ff fd9e 	bl	8004bd0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005094:	2301      	movs	r3, #1
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20002198 	.word	0x20002198
 80050a4:	200017fc 	.word	0x200017fc
 80050a8:	0801e294 	.word	0x0801e294
 80050ac:	0801e2c0 	.word	0x0801e2c0
 80050b0:	0801e2e8 	.word	0x0801e2e8
 80050b4:	0801e304 	.word	0x0801e304
 80050b8:	20001ac8 	.word	0x20001ac8
 80050bc:	0801e340 	.word	0x0801e340
 80050c0:	0801e36c 	.word	0x0801e36c
 80050c4:	20002199 	.word	0x20002199
 80050c8:	0801e398 	.word	0x0801e398
 80050cc:	0801e3c4 	.word	0x0801e3c4
 80050d0:	0801e3f4 	.word	0x0801e3f4
 80050d4:	0801e420 	.word	0x0801e420
 80050d8:	20001f92 	.word	0x20001f92
 80050dc:	20001f93 	.word	0x20001f93
 80050e0:	20001f94 	.word	0x20001f94
 80050e4:	20001f98 	.word	0x20001f98
 80050e8:	0801e44c 	.word	0x0801e44c
 80050ec:	0801e474 	.word	0x0801e474
 80050f0:	0801e4b8 	.word	0x0801e4b8
 80050f4:	0801e4f4 	.word	0x0801e4f4

080050f8 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d006      	beq.n	8005114 <UART_Platform_Send+0x1c>
 8005106:	4b17      	ldr	r3, [pc, #92]	@ (8005164 <UART_Platform_Send+0x6c>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	f083 0301 	eor.w	r3, r3, #1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <UART_Platform_Send+0x20>
 8005114:	2301      	movs	r3, #1
 8005116:	e021      	b.n	800515c <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fb f883 	bl	8000224 <strlen>
 800511e:	4603      	mov	r3, r0
 8005120:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <UART_Platform_Send+0x34>
 8005128:	2300      	movs	r3, #0
 800512a:	e017      	b.n	800515c <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 800512c:	f7ff fece 	bl	8004ecc <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	b29a      	uxth	r2, r3
 8005134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	480b      	ldr	r0, [pc, #44]	@ (8005168 <UART_Platform_Send+0x70>)
 800513c:	f009 febc 	bl	800eeb8 <HAL_UART_Transmit>
 8005140:	4603      	mov	r3, r0
 8005142:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8005144:	7afb      	ldrb	r3, [r7, #11]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e006      	b.n	800515c <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 800514e:	7afb      	ldrb	r3, [r7, #11]
 8005150:	461a      	mov	r2, r3
 8005152:	4906      	ldr	r1, [pc, #24]	@ (800516c <UART_Platform_Send+0x74>)
 8005154:	2003      	movs	r0, #3
 8005156:	f7ff fd3b 	bl	8004bd0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800515a:	2301      	movs	r3, #1
    }
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20002198 	.word	0x20002198
 8005168:	200017fc 	.word	0x200017fc
 800516c:	0801e554 	.word	0x0801e554

08005170 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	@ 0x28
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <UART_Platform_Receive+0x26>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <UART_Platform_Receive+0x26>
 8005188:	4b74      	ldr	r3, [pc, #464]	@ (800535c <UART_Platform_Receive+0x1ec>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f083 0301 	eor.w	r3, r3, #1
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e0dc      	b.n	8005354 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	dc04      	bgt.n	80051aa <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0d4      	b.n	8005354 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 80051b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005360 <UART_Platform_Receive+0x1f0>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f083 0301 	eor.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e0c8      	b.n	8005354 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 80051c2:	4b68      	ldr	r3, [pc, #416]	@ (8005364 <UART_Platform_Receive+0x1f4>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 80051cc:	4b65      	ldr	r3, [pc, #404]	@ (8005364 <UART_Platform_Receive+0x1f4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 80051d2:	4965      	ldr	r1, [pc, #404]	@ (8005368 <UART_Platform_Receive+0x1f8>)
 80051d4:	2002      	movs	r0, #2
 80051d6:	f7ff fcfb 	bl	8004bd0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e0ba      	b.n	8005354 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 80051de:	4b63      	ldr	r3, [pc, #396]	@ (800536c <UART_Platform_Receive+0x1fc>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80b4 	beq.w	8005352 <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 80051ea:	4b60      	ldr	r3, [pc, #384]	@ (800536c <UART_Platform_Receive+0x1fc>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 80051f0:	4b5f      	ldr	r3, [pc, #380]	@ (8005370 <UART_Platform_Receive+0x200>)
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	837b      	strh	r3, [r7, #26]
        LOG_INFO("[UART_STM32] DMA received %d bytes", received_length);
 80051f6:	8b7b      	ldrh	r3, [r7, #26]
 80051f8:	461a      	mov	r2, r3
 80051fa:	495e      	ldr	r1, [pc, #376]	@ (8005374 <UART_Platform_Receive+0x204>)
 80051fc:	2001      	movs	r0, #1
 80051fe:	f7ff fce7 	bl	8004bd0 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8005202:	8b7b      	ldrh	r3, [r7, #26]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 809e 	beq.w	8005346 <UART_Platform_Receive+0x1d6>
 800520a:	8b7b      	ldrh	r3, [r7, #26]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	f340 8099 	ble.w	8005346 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8005214:	8b7b      	ldrh	r3, [r7, #26]
 8005216:	461a      	mov	r2, r3
 8005218:	4957      	ldr	r1, [pc, #348]	@ (8005378 <UART_Platform_Receive+0x208>)
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f016 fa52 	bl	801b6c4 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8005220:	8b7b      	ldrh	r3, [r7, #26]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 800522a:	8b7a      	ldrh	r2, [r7, #26]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_INFO("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8005230:	8b7a      	ldrh	r2, [r7, #26]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4951      	ldr	r1, [pc, #324]	@ (800537c <UART_Platform_Receive+0x20c>)
 8005236:	2001      	movs	r0, #1
 8005238:	f7ff fcca 	bl	8004bd0 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 800523c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005240:	2100      	movs	r1, #0
 8005242:	484d      	ldr	r0, [pc, #308]	@ (8005378 <UART_Platform_Receive+0x208>)
 8005244:	f016 f9d0 	bl	801b5e8 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8005248:	484d      	ldr	r0, [pc, #308]	@ (8005380 <UART_Platform_Receive+0x210>)
 800524a:	f009 ffca 	bl	800f1e2 <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 800524e:	4b4c      	ldr	r3, [pc, #304]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2201      	movs	r2, #1
 8005254:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8005256:	4b4a      	ldr	r3, [pc, #296]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2202      	movs	r2, #2
 800525c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 800525e:	4b48      	ldr	r3, [pc, #288]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2204      	movs	r2, #4
 8005264:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8005266:	4b46      	ldr	r3, [pc, #280]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2208      	movs	r2, #8
 800526c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 800526e:	4b44      	ldr	r3, [pc, #272]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2210      	movs	r2, #16
 8005274:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8005276:	4b42      	ldr	r3, [pc, #264]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527a:	2b00      	cmp	r3, #0
 800527c:	d025      	beq.n	80052ca <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 800527e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005282:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005284:	e00b      	b.n	800529e <UART_Platform_Receive+0x12e>
                    timeout--;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	3b01      	subs	r3, #1
 800528a:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e002      	b.n	8005298 <UART_Platform_Receive+0x128>
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	3301      	adds	r3, #1
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b63      	cmp	r3, #99	@ 0x63
 800529c:	ddf9      	ble.n	8005292 <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 800529e:	4b38      	ldr	r3, [pc, #224]	@ (8005380 <UART_Platform_Receive+0x210>)
 80052a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d002      	beq.n	80052b2 <UART_Platform_Receive+0x142>
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dce9      	bgt.n	8005286 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 80052b8:	4932      	ldr	r1, [pc, #200]	@ (8005384 <UART_Platform_Receive+0x214>)
 80052ba:	2002      	movs	r0, #2
 80052bc:	f7ff fc88 	bl	8004bd0 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80052c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005380 <UART_Platform_Receive+0x210>)
 80052c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 80052ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005380 <UART_Platform_Receive+0x210>)
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 80052d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005380 <UART_Platform_Receive+0x210>)
 80052d4:	2220      	movs	r2, #32
 80052d6:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	e002      	b.n	80052e4 <UART_Platform_Receive+0x174>
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3301      	adds	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80052ea:	4293      	cmp	r3, r2
 80052ec:	ddf7      	ble.n	80052de <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80052ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052f2:	4921      	ldr	r1, [pc, #132]	@ (8005378 <UART_Platform_Receive+0x208>)
 80052f4:	4822      	ldr	r0, [pc, #136]	@ (8005380 <UART_Platform_Receive+0x210>)
 80052f6:	f009 ff30 	bl	800f15a <HAL_UART_Receive_DMA>
 80052fa:	4603      	mov	r3, r0
 80052fc:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 80052fe:	7e7b      	ldrb	r3, [r7, #25]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8005304:	4920      	ldr	r1, [pc, #128]	@ (8005388 <UART_Platform_Receive+0x218>)
 8005306:	2000      	movs	r0, #0
 8005308:	f7ff fc62 	bl	8004bd0 <LOGGER_SendFormatted>
 800530c:	e019      	b.n	8005342 <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 800530e:	7e7a      	ldrb	r2, [r7, #25]
 8005310:	4b1b      	ldr	r3, [pc, #108]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005312:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8005314:	4b1a      	ldr	r3, [pc, #104]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	460b      	mov	r3, r1
 800531e:	491b      	ldr	r1, [pc, #108]	@ (800538c <UART_Platform_Receive+0x21c>)
 8005320:	2002      	movs	r0, #2
 8005322:	f7ff fc55 	bl	8004bd0 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8005326:	4b16      	ldr	r3, [pc, #88]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 800532e:	4b14      	ldr	r3, [pc, #80]	@ (8005380 <UART_Platform_Receive+0x210>)
 8005330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005332:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005336:	b2db      	uxtb	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	4915      	ldr	r1, [pc, #84]	@ (8005390 <UART_Platform_Receive+0x220>)
 800533c:	2002      	movs	r0, #2
 800533e:	f7ff fc47 	bl	8004bd0 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	e006      	b.n	8005354 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8005346:	8b7a      	ldrh	r2, [r7, #26]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4912      	ldr	r1, [pc, #72]	@ (8005394 <UART_Platform_Receive+0x224>)
 800534c:	2002      	movs	r0, #2
 800534e:	f7ff fc3f 	bl	8004bd0 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8005352:	2302      	movs	r3, #2
}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20002198 	.word	0x20002198
 8005360:	20002199 	.word	0x20002199
 8005364:	20001f93 	.word	0x20001f93
 8005368:	0801e58c 	.word	0x0801e58c
 800536c:	20001f92 	.word	0x20001f92
 8005370:	20001f94 	.word	0x20001f94
 8005374:	0801e5bc 	.word	0x0801e5bc
 8005378:	20001f98 	.word	0x20001f98
 800537c:	0801e5e0 	.word	0x0801e5e0
 8005380:	200017fc 	.word	0x200017fc
 8005384:	0801e60c 	.word	0x0801e60c
 8005388:	0801e648 	.word	0x0801e648
 800538c:	0801e678 	.word	0x0801e678
 8005390:	0801e6c0 	.word	0x0801e6c0
 8005394:	0801e6dc 	.word	0x0801e6dc

08005398 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a0a      	ldr	r2, [pc, #40]	@ (80053d0 <HAL_UART_RxCpltCallback+0x38>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10e      	bne.n	80053c8 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 80053aa:	4b0a      	ldr	r3, [pc, #40]	@ (80053d4 <HAL_UART_RxCpltCallback+0x3c>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 80053b0:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <HAL_UART_RxCpltCallback+0x40>)
 80053b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053b6:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 80053b8:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <HAL_UART_RxCpltCallback+0x40>)
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	4906      	ldr	r1, [pc, #24]	@ (80053dc <HAL_UART_RxCpltCallback+0x44>)
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7ff fc04 	bl	8004bd0 <LOGGER_SendFormatted>
  }
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40011400 	.word	0x40011400
 80053d4:	20001f92 	.word	0x20001f92
 80053d8:	20001f94 	.word	0x20001f94
 80053dc:	0801e718 	.word	0x0801e718

080053e0 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a05      	ldr	r2, [pc, #20]	@ (8005404 <HAL_UART_RxHalfCpltCallback+0x24>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d103      	bne.n	80053fa <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 80053f2:	4905      	ldr	r1, [pc, #20]	@ (8005408 <HAL_UART_RxHalfCpltCallback+0x28>)
 80053f4:	2002      	movs	r0, #2
 80053f6:	f7ff fbeb 	bl	8004bd0 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40011400 	.word	0x40011400
 8005408:	0801e750 	.word	0x0801e750

0800540c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a3c      	ldr	r2, [pc, #240]	@ (800550c <HAL_UART_ErrorCallback+0x100>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d171      	bne.n	8005502 <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 800541e:	4b3c      	ldr	r3, [pc, #240]	@ (8005510 <HAL_UART_ErrorCallback+0x104>)
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8005424:	493b      	ldr	r1, [pc, #236]	@ (8005514 <HAL_UART_ErrorCallback+0x108>)
 8005426:	2002      	movs	r0, #2
 8005428:	f7ff fbd2 	bl	8004bd0 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b08      	cmp	r3, #8
 8005438:	d107      	bne.n	800544a <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2208      	movs	r2, #8
 8005440:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8005442:	4935      	ldr	r1, [pc, #212]	@ (8005518 <HAL_UART_ErrorCallback+0x10c>)
 8005444:	2002      	movs	r0, #2
 8005446:	f7ff fbc3 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d107      	bne.n	8005468 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2204      	movs	r2, #4
 800545e:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8005460:	492e      	ldr	r1, [pc, #184]	@ (800551c <HAL_UART_ErrorCallback+0x110>)
 8005462:	2002      	movs	r0, #2
 8005464:	f7ff fbb4 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d107      	bne.n	8005486 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2202      	movs	r2, #2
 800547c:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 800547e:	4928      	ldr	r1, [pc, #160]	@ (8005520 <HAL_UART_ErrorCallback+0x114>)
 8005480:	2002      	movs	r0, #2
 8005482:	f7ff fba5 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2201      	movs	r2, #1
 800549a:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 800549c:	4921      	ldr	r1, [pc, #132]	@ (8005524 <HAL_UART_ErrorCallback+0x118>)
 800549e:	2002      	movs	r0, #2
 80054a0:	f7ff fb96 	bl	8004bd0 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f009 fe9c 	bl	800f1e2 <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80054ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ce:	2100      	movs	r1, #0
 80054d0:	4815      	ldr	r0, [pc, #84]	@ (8005528 <HAL_UART_ErrorCallback+0x11c>)
 80054d2:	f016 f889 	bl	801b5e8 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80054d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054da:	4913      	ldr	r1, [pc, #76]	@ (8005528 <HAL_UART_ErrorCallback+0x11c>)
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f009 fe3c 	bl	800f15a <HAL_UART_Receive_DMA>
 80054e2:	4603      	mov	r3, r0
 80054e4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 80054ec:	490f      	ldr	r1, [pc, #60]	@ (800552c <HAL_UART_ErrorCallback+0x120>)
 80054ee:	2001      	movs	r0, #1
 80054f0:	f7ff fb6e 	bl	8004bd0 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 80054f4:	e005      	b.n	8005502 <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	461a      	mov	r2, r3
 80054fa:	490d      	ldr	r1, [pc, #52]	@ (8005530 <HAL_UART_ErrorCallback+0x124>)
 80054fc:	2003      	movs	r0, #3
 80054fe:	f7ff fb67 	bl	8004bd0 <LOGGER_SendFormatted>
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40011400 	.word	0x40011400
 8005510:	20001f93 	.word	0x20001f93
 8005514:	0801e79c 	.word	0x0801e79c
 8005518:	0801e7c8 	.word	0x0801e7c8
 800551c:	0801e7e4 	.word	0x0801e7e4
 8005520:	0801e800 	.word	0x0801e800
 8005524:	0801e81c 	.word	0x0801e81c
 8005528:	20001f98 	.word	0x20001f98
 800552c:	0801e838 	.word	0x0801e838
 8005530:	0801e86c 	.word	0x0801e86c

08005534 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a3e      	ldr	r2, [pc, #248]	@ (800563c <USER_UART_IDLECallback+0x108>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d175      	bne.n	8005632 <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b08      	cmp	r3, #8
 8005556:	d103      	bne.n	8005560 <USER_UART_IDLECallback+0x2c>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b02      	cmp	r3, #2
 800556c:	d103      	bne.n	8005576 <USER_UART_IDLECallback+0x42>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f043 0302 	orr.w	r3, r3, #2
 8005574:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d103      	bne.n	800558c <USER_UART_IDLECallback+0x58>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f043 0304 	orr.w	r3, r3, #4
 800558a:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d103      	bne.n	80055a2 <USER_UART_IDLECallback+0x6e>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f043 0308 	orr.w	r3, r3, #8
 80055a0:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 80055ac:	897b      	ldrh	r3, [r7, #10]
 80055ae:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	4b22      	ldr	r3, [pc, #136]	@ (8005640 <USER_UART_IDLECallback+0x10c>)
 80055b6:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 80055b8:	4b21      	ldr	r3, [pc, #132]	@ (8005640 <USER_UART_IDLECallback+0x10c>)
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d033      	beq.n	800562a <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 80055c2:	4b20      	ldr	r3, [pc, #128]	@ (8005644 <USER_UART_IDLECallback+0x110>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 80055ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005640 <USER_UART_IDLECallback+0x10c>)
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	491b      	ldr	r1, [pc, #108]	@ (8005648 <USER_UART_IDLECallback+0x114>)
 80055da:	2002      	movs	r0, #2
 80055dc:	f7ff faf8 	bl	8004bd0 <LOGGER_SendFormatted>
 80055e0:	e007      	b.n	80055f2 <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 80055e2:	4b17      	ldr	r3, [pc, #92]	@ (8005640 <USER_UART_IDLECallback+0x10c>)
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	4918      	ldr	r1, [pc, #96]	@ (800564c <USER_UART_IDLECallback+0x118>)
 80055ec:	2001      	movs	r0, #1
 80055ee:	f7ff faef 	bl	8004bd0 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 80055f2:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <USER_UART_IDLECallback+0x10c>)
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d912      	bls.n	8005622 <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 80055fc:	4b14      	ldr	r3, [pc, #80]	@ (8005650 <USER_UART_IDLECallback+0x11c>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	4619      	mov	r1, r3
 8005602:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <USER_UART_IDLECallback+0x11c>)
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	4618      	mov	r0, r3
 8005608:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <USER_UART_IDLECallback+0x11c>)
 800560a:	789b      	ldrb	r3, [r3, #2]
 800560c:	461a      	mov	r2, r3
 800560e:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <USER_UART_IDLECallback+0x11c>)
 8005610:	78db      	ldrb	r3, [r3, #3]
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	9200      	str	r2, [sp, #0]
 8005616:	4603      	mov	r3, r0
 8005618:	460a      	mov	r2, r1
 800561a:	490e      	ldr	r1, [pc, #56]	@ (8005654 <USER_UART_IDLECallback+0x120>)
 800561c:	2000      	movs	r0, #0
 800561e:	f7ff fad7 	bl	8004bd0 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f009 fddd 	bl	800f1e2 <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8005628:	e003      	b.n	8005632 <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 800562a:	490b      	ldr	r1, [pc, #44]	@ (8005658 <USER_UART_IDLECallback+0x124>)
 800562c:	2000      	movs	r0, #0
 800562e:	f7ff facf 	bl	8004bd0 <LOGGER_SendFormatted>
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40011400 	.word	0x40011400
 8005640:	20001f94 	.word	0x20001f94
 8005644:	20001f92 	.word	0x20001f92
 8005648:	0801e8a4 	.word	0x0801e8a4
 800564c:	0801e8e4 	.word	0x0801e8e4
 8005650:	20001f98 	.word	0x20001f98
 8005654:	0801e90c 	.word	0x0801e90c
 8005658:	0801e938 	.word	0x0801e938

0800565c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800565c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005694 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005660:	f7ff fa3a 	bl	8004ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005664:	480c      	ldr	r0, [pc, #48]	@ (8005698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005666:	490d      	ldr	r1, [pc, #52]	@ (800569c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005668:	4a0d      	ldr	r2, [pc, #52]	@ (80056a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800566a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800566c:	e002      	b.n	8005674 <LoopCopyDataInit>

0800566e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800566e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005672:	3304      	adds	r3, #4

08005674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005678:	d3f9      	bcc.n	800566e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800567a:	4a0a      	ldr	r2, [pc, #40]	@ (80056a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800567c:	4c0a      	ldr	r4, [pc, #40]	@ (80056a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800567e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005680:	e001      	b.n	8005686 <LoopFillZerobss>

08005682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005684:	3204      	adds	r2, #4

08005686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005688:	d3fb      	bcc.n	8005682 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800568a:	f015 fff5 	bl	801b678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800568e:	f7fc f8a9 	bl	80017e4 <main>
  bx  lr    
 8005692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005694:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800569c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80056a0:	0801edfc 	.word	0x0801edfc
  ldr r2, =_sbss
 80056a4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80056a8:	2000aeb0 	.word	0x2000aeb0

080056ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056ac:	e7fe      	b.n	80056ac <ADC_IRQHandler>

080056ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056b2:	2003      	movs	r0, #3
 80056b4:	f000 fb91 	bl	8005dda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7ff f8f7 	bl	80048ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056be:	f7fe f859 	bl	8003774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <HAL_IncTick+0x20>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b06      	ldr	r3, [pc, #24]	@ (80056ec <HAL_IncTick+0x24>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4413      	add	r3, r2
 80056d8:	4a04      	ldr	r2, [pc, #16]	@ (80056ec <HAL_IncTick+0x24>)
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000068 	.word	0x20000068
 80056ec:	2000219c 	.word	0x2000219c

080056f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return uwTick;
 80056f4:	4b03      	ldr	r3, [pc, #12]	@ (8005704 <HAL_GetTick+0x14>)
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	2000219c 	.word	0x2000219c

08005708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005710:	f7ff ffee 	bl	80056f0 <HAL_GetTick>
 8005714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d005      	beq.n	800572e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005722:	4b0a      	ldr	r3, [pc, #40]	@ (800574c <HAL_Delay+0x44>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800572e:	bf00      	nop
 8005730:	f7ff ffde 	bl	80056f0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	429a      	cmp	r2, r3
 800573e:	d8f7      	bhi.n	8005730 <HAL_Delay+0x28>
  {
  }
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000068 	.word	0x20000068

08005750 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e031      	b.n	80057ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fe f828 	bl	80037c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	d116      	bne.n	80057bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005792:	4b10      	ldr	r3, [pc, #64]	@ (80057d4 <HAL_ADC_Init+0x84>)
 8005794:	4013      	ands	r3, r2
 8005796:	f043 0202 	orr.w	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f974 	bl	8005a8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	f043 0201 	orr.w	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80057ba:	e001      	b.n	80057c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	ffffeefd 	.word	0xffffeefd

080057d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x1c>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e13a      	b.n	8005a6a <HAL_ADC_ConfigChannel+0x292>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b09      	cmp	r3, #9
 8005802:	d93a      	bls.n	800587a <HAL_ADC_ConfigChannel+0xa2>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800580c:	d035      	beq.n	800587a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68d9      	ldr	r1, [r3, #12]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	4613      	mov	r3, r2
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	4413      	add	r3, r2
 8005822:	3b1e      	subs	r3, #30
 8005824:	2207      	movs	r2, #7
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43da      	mvns	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	400a      	ands	r2, r1
 8005832:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a8f      	ldr	r2, [pc, #572]	@ (8005a78 <HAL_ADC_ConfigChannel+0x2a0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d10a      	bne.n	8005854 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68d9      	ldr	r1, [r3, #12]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	061a      	lsls	r2, r3, #24
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005852:	e039      	b.n	80058c8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68d9      	ldr	r1, [r3, #12]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	4618      	mov	r0, r3
 8005866:	4603      	mov	r3, r0
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4403      	add	r3, r0
 800586c:	3b1e      	subs	r3, #30
 800586e:	409a      	lsls	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005878:	e026      	b.n	80058c8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6919      	ldr	r1, [r3, #16]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	4613      	mov	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4413      	add	r3, r2
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2207      	movs	r2, #7
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	43da      	mvns	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	400a      	ands	r2, r1
 80058a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6919      	ldr	r1, [r3, #16]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	4618      	mov	r0, r3
 80058b4:	4603      	mov	r3, r0
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	4403      	add	r3, r0
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	409a      	lsls	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d824      	bhi.n	800591a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	3b05      	subs	r3, #5
 80058e2:	221f      	movs	r2, #31
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	43da      	mvns	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	400a      	ands	r2, r1
 80058f0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	4618      	mov	r0, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	3b05      	subs	r3, #5
 800590c:	fa00 f203 	lsl.w	r2, r0, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	635a      	str	r2, [r3, #52]	@ 0x34
 8005918:	e04c      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b0c      	cmp	r3, #12
 8005920:	d824      	bhi.n	800596c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	3b23      	subs	r3, #35	@ 0x23
 8005934:	221f      	movs	r2, #31
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43da      	mvns	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	400a      	ands	r2, r1
 8005942:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	4618      	mov	r0, r3
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	3b23      	subs	r3, #35	@ 0x23
 800595e:	fa00 f203 	lsl.w	r2, r0, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	631a      	str	r2, [r3, #48]	@ 0x30
 800596a:	e023      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	3b41      	subs	r3, #65	@ 0x41
 800597e:	221f      	movs	r2, #31
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43da      	mvns	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	400a      	ands	r2, r1
 800598c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	4618      	mov	r0, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	3b41      	subs	r3, #65	@ 0x41
 80059a8:	fa00 f203 	lsl.w	r2, r0, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a30      	ldr	r2, [pc, #192]	@ (8005a7c <HAL_ADC_ConfigChannel+0x2a4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10a      	bne.n	80059d4 <HAL_ADC_ConfigChannel+0x1fc>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059c6:	d105      	bne.n	80059d4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80059c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 80059ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80059d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a28      	ldr	r2, [pc, #160]	@ (8005a7c <HAL_ADC_ConfigChannel+0x2a4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10f      	bne.n	80059fe <HAL_ADC_ConfigChannel+0x226>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b12      	cmp	r3, #18
 80059e4:	d10b      	bne.n	80059fe <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80059e6:	4b26      	ldr	r3, [pc, #152]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4a25      	ldr	r2, [pc, #148]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 80059ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80059f0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80059f2:	4b23      	ldr	r3, [pc, #140]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4a22      	ldr	r2, [pc, #136]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 80059f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80059fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1e      	ldr	r2, [pc, #120]	@ (8005a7c <HAL_ADC_ConfigChannel+0x2a4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d12b      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x288>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <HAL_ADC_ConfigChannel+0x242>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b11      	cmp	r3, #17
 8005a18:	d122      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005a1a:	4b19      	ldr	r3, [pc, #100]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a20:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005a24:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005a26:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a30:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a10      	ldr	r2, [pc, #64]	@ (8005a78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d111      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005a3c:	4b11      	ldr	r3, [pc, #68]	@ (8005a84 <HAL_ADC_ConfigChannel+0x2ac>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a11      	ldr	r2, [pc, #68]	@ (8005a88 <HAL_ADC_ConfigChannel+0x2b0>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	0c9a      	lsrs	r2, r3, #18
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005a52:	e002      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f9      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	10000012 	.word	0x10000012
 8005a7c:	40012000 	.word	0x40012000
 8005a80:	40012300 	.word	0x40012300
 8005a84:	20000018 	.word	0x20000018
 8005a88:	431bde83 	.word	0x431bde83

08005a8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005a94:	4b78      	ldr	r3, [pc, #480]	@ (8005c78 <ADC_Init+0x1ec>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a77      	ldr	r2, [pc, #476]	@ (8005c78 <ADC_Init+0x1ec>)
 8005a9a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005a9e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005aa0:	4b75      	ldr	r3, [pc, #468]	@ (8005c78 <ADC_Init+0x1ec>)
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4973      	ldr	r1, [pc, #460]	@ (8005c78 <ADC_Init+0x1ec>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6859      	ldr	r1, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	021a      	lsls	r2, r3, #8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6899      	ldr	r1, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1a:	4a58      	ldr	r2, [pc, #352]	@ (8005c7c <ADC_Init+0x1f0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d022      	beq.n	8005b66 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6899      	ldr	r1, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6899      	ldr	r1, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	609a      	str	r2, [r3, #8]
 8005b64:	e00f      	b.n	8005b86 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005b84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0202 	bic.w	r2, r2, #2
 8005b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6899      	ldr	r1, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	005a      	lsls	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01b      	beq.n	8005bec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005bd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	3b01      	subs	r3, #1
 8005be0:	035a      	lsls	r2, r3, #13
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
 8005bea:	e007      	b.n	8005bfc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	051a      	lsls	r2, r3, #20
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6899      	ldr	r1, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c3e:	025a      	lsls	r2, r3, #9
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6899      	ldr	r1, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	029a      	lsls	r2, r3, #10
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012300 	.word	0x40012300
 8005c7c:	0f000001 	.word	0x0f000001

08005c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c90:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ca8:	4b06      	ldr	r3, [pc, #24]	@ (8005cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cae:	4a04      	ldr	r2, [pc, #16]	@ (8005cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	60d3      	str	r3, [r2, #12]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	e000ed00 	.word	0xe000ed00
 8005cc4:	05fa0000 	.word	0x05fa0000

08005cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ccc:	4b04      	ldr	r3, [pc, #16]	@ (8005ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 0307 	and.w	r3, r3, #7
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	e000ed00 	.word	0xe000ed00

08005ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	db0b      	blt.n	8005d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	f003 021f 	and.w	r2, r3, #31
 8005cfc:	4907      	ldr	r1, [pc, #28]	@ (8005d1c <__NVIC_EnableIRQ+0x38>)
 8005cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	2001      	movs	r0, #1
 8005d06:	fa00 f202 	lsl.w	r2, r0, r2
 8005d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	e000e100 	.word	0xe000e100

08005d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	6039      	str	r1, [r7, #0]
 8005d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	db0a      	blt.n	8005d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	490c      	ldr	r1, [pc, #48]	@ (8005d6c <__NVIC_SetPriority+0x4c>)
 8005d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3e:	0112      	lsls	r2, r2, #4
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	440b      	add	r3, r1
 8005d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d48:	e00a      	b.n	8005d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	4908      	ldr	r1, [pc, #32]	@ (8005d70 <__NVIC_SetPriority+0x50>)
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	3b04      	subs	r3, #4
 8005d58:	0112      	lsls	r2, r2, #4
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	761a      	strb	r2, [r3, #24]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	e000e100 	.word	0xe000e100
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b089      	sub	sp, #36	@ 0x24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f1c3 0307 	rsb	r3, r3, #7
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	bf28      	it	cs
 8005d92:	2304      	movcs	r3, #4
 8005d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d902      	bls.n	8005da4 <NVIC_EncodePriority+0x30>
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3b03      	subs	r3, #3
 8005da2:	e000      	b.n	8005da6 <NVIC_EncodePriority+0x32>
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43da      	mvns	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	401a      	ands	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc6:	43d9      	mvns	r1, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dcc:	4313      	orrs	r3, r2
         );
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3724      	adds	r7, #36	@ 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff ff4c 	bl	8005c80 <__NVIC_SetPriorityGrouping>
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e02:	f7ff ff61 	bl	8005cc8 <__NVIC_GetPriorityGrouping>
 8005e06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	6978      	ldr	r0, [r7, #20]
 8005e0e:	f7ff ffb1 	bl	8005d74 <NVIC_EncodePriority>
 8005e12:	4602      	mov	r2, r0
 8005e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff ff80 	bl	8005d20 <__NVIC_SetPriority>
}
 8005e20:	bf00      	nop
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff ff54 	bl	8005ce4 <__NVIC_EnableIRQ>
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e054      	b.n	8005f00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7f5b      	ldrb	r3, [r3, #29]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fd fd06 	bl	8003878 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	791b      	ldrb	r3, [r3, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10c      	bne.n	8005e94 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a22      	ldr	r2, [pc, #136]	@ (8005f08 <HAL_CRC_Init+0xc4>)
 8005e80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0218 	bic.w	r2, r2, #24
 8005e90:	609a      	str	r2, [r3, #8]
 8005e92:	e00c      	b.n	8005eae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6899      	ldr	r1, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f834 	bl	8005f0c <HAL_CRCEx_Polynomial_Set>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e028      	b.n	8005f00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	795b      	ldrb	r3, [r3, #5]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebe:	611a      	str	r2, [r3, #16]
 8005ec0:	e004      	b.n	8005ecc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6912      	ldr	r2, [r2, #16]
 8005eca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	04c11db7 	.word	0x04c11db7

08005f0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005f1c:	231f      	movs	r3, #31
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	75fb      	strb	r3, [r7, #23]
 8005f2e:	e063      	b.n	8005ff8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005f30:	bf00      	nop
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1e5a      	subs	r2, r3, #1
 8005f36:	613a      	str	r2, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d009      	beq.n	8005f50 <HAL_CRCEx_Polynomial_Set+0x44>
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b18      	cmp	r3, #24
 8005f54:	d846      	bhi.n	8005fe4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005f56:	a201      	add	r2, pc, #4	@ (adr r2, 8005f5c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005feb 	.word	0x08005feb
 8005f60:	08005fe5 	.word	0x08005fe5
 8005f64:	08005fe5 	.word	0x08005fe5
 8005f68:	08005fe5 	.word	0x08005fe5
 8005f6c:	08005fe5 	.word	0x08005fe5
 8005f70:	08005fe5 	.word	0x08005fe5
 8005f74:	08005fe5 	.word	0x08005fe5
 8005f78:	08005fe5 	.word	0x08005fe5
 8005f7c:	08005fd9 	.word	0x08005fd9
 8005f80:	08005fe5 	.word	0x08005fe5
 8005f84:	08005fe5 	.word	0x08005fe5
 8005f88:	08005fe5 	.word	0x08005fe5
 8005f8c:	08005fe5 	.word	0x08005fe5
 8005f90:	08005fe5 	.word	0x08005fe5
 8005f94:	08005fe5 	.word	0x08005fe5
 8005f98:	08005fe5 	.word	0x08005fe5
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fe5 	.word	0x08005fe5
 8005fa4:	08005fe5 	.word	0x08005fe5
 8005fa8:	08005fe5 	.word	0x08005fe5
 8005fac:	08005fe5 	.word	0x08005fe5
 8005fb0:	08005fe5 	.word	0x08005fe5
 8005fb4:	08005fe5 	.word	0x08005fe5
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005fc1 	.word	0x08005fc1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b06      	cmp	r3, #6
 8005fc4:	d913      	bls.n	8005fee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005fca:	e010      	b.n	8005fee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b07      	cmp	r3, #7
 8005fd0:	d90f      	bls.n	8005ff2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005fd6:	e00c      	b.n	8005ff2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	d90b      	bls.n	8005ff6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005fe2:	e008      	b.n	8005ff6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
        break;
 8005fe8:	e006      	b.n	8005ff8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005fea:	bf00      	nop
 8005fec:	e004      	b.n	8005ff8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005ff6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f023 0118 	bic.w	r1, r3, #24
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	430a      	orrs	r2, r1
 8006018:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
}
 800601c:	4618      	mov	r0, r3
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e069      	b.n	800610e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d102      	bne.n	800604c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fd fc36 	bl	80038b8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6819      	ldr	r1, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4b2a      	ldr	r3, [pc, #168]	@ (8006118 <HAL_DCMI_Init+0xf0>)
 800606e:	400b      	ands	r3, r1
 8006070:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6819      	ldr	r1, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006086:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006092:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800609e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80060aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80060b6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d112      	bne.n	80060ee <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	7f1b      	ldrb	r3, [r3, #28]
 80060cc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	7f5b      	ldrb	r3, [r3, #29]
 80060d2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80060d4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	7f9b      	ldrb	r3, [r3, #30]
 80060da:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80060dc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7fdb      	ldrb	r3, [r3, #31]
 80060e4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80060ea:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80060ec:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 021e 	orr.w	r2, r2, #30
 80060fc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	ffe0f007 	.word	0xffe0f007

0800611c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006128:	f7ff fae2 	bl	80056f0 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e099      	b.n	800626c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006158:	e00f      	b.n	800617a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800615a:	f7ff fac9 	bl	80056f0 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b05      	cmp	r3, #5
 8006166:	d908      	bls.n	800617a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2203      	movs	r2, #3
 8006172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e078      	b.n	800626c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e8      	bne.n	800615a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4b38      	ldr	r3, [pc, #224]	@ (8006274 <HAL_DMA_Init+0x158>)
 8006194:	4013      	ands	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d107      	bne.n	80061e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061dc:	4313      	orrs	r3, r2
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0307 	bic.w	r3, r3, #7
 80061fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	2b04      	cmp	r3, #4
 800620c:	d117      	bne.n	800623e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00e      	beq.n	800623e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fb73 	bl	800690c <DMA_CheckFifoParam>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2240      	movs	r2, #64	@ 0x40
 8006230:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800623a:	2301      	movs	r3, #1
 800623c:	e016      	b.n	800626c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fb2a 	bl	80068a0 <DMA_CalcBaseAndBitshift>
 800624c:	4603      	mov	r3, r0
 800624e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006254:	223f      	movs	r2, #63	@ 0x3f
 8006256:	409a      	lsls	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	f010803f 	.word	0xf010803f

08006278 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e050      	b.n	800632c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d101      	bne.n	800629a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006296:	2302      	movs	r3, #2
 8006298:	e048      	b.n	800632c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2221      	movs	r2, #33	@ 0x21
 80062d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fae0 	bl	80068a0 <DMA_CalcBaseAndBitshift>
 80062e0:	4603      	mov	r3, r0
 80062e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e8:	223f      	movs	r2, #63	@ 0x3f
 80062ea:	409a      	lsls	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_DMA_Start_IT+0x26>
 8006356:	2302      	movs	r3, #2
 8006358:	e048      	b.n	80063ec <HAL_DMA_Start_IT+0xb8>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d137      	bne.n	80063de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fa5e 	bl	8006844 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638c:	223f      	movs	r2, #63	@ 0x3f
 800638e:	409a      	lsls	r2, r3
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0216 	orr.w	r2, r2, #22
 80063a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0208 	orr.w	r2, r2, #8
 80063ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e005      	b.n	80063ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
 80063e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006400:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006402:	f7ff f975 	bl	80056f0 <HAL_GetTick>
 8006406:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d008      	beq.n	8006426 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2280      	movs	r2, #128	@ 0x80
 8006418:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e052      	b.n	80064cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0216 	bic.w	r2, r2, #22
 8006434:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	695a      	ldr	r2, [r3, #20]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006444:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <HAL_DMA_Abort+0x62>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0208 	bic.w	r2, r2, #8
 8006464:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006476:	e013      	b.n	80064a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006478:	f7ff f93a 	bl	80056f0 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b05      	cmp	r3, #5
 8006484:	d90c      	bls.n	80064a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2203      	movs	r2, #3
 8006490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e015      	b.n	80064cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e4      	bne.n	8006478 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b2:	223f      	movs	r2, #63	@ 0x3f
 80064b4:	409a      	lsls	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d004      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2280      	movs	r2, #128	@ 0x80
 80064ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e00c      	b.n	800650c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2205      	movs	r2, #5
 80064f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006524:	4b8e      	ldr	r3, [pc, #568]	@ (8006760 <HAL_DMA_IRQHandler+0x248>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a8e      	ldr	r2, [pc, #568]	@ (8006764 <HAL_DMA_IRQHandler+0x24c>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	0a9b      	lsrs	r3, r3, #10
 8006530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006542:	2208      	movs	r2, #8
 8006544:	409a      	lsls	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01a      	beq.n	8006584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d013      	beq.n	8006584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0204 	bic.w	r2, r2, #4
 800656a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006570:	2208      	movs	r2, #8
 8006572:	409a      	lsls	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657c:	f043 0201 	orr.w	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006588:	2201      	movs	r2, #1
 800658a:	409a      	lsls	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d012      	beq.n	80065ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a6:	2201      	movs	r2, #1
 80065a8:	409a      	lsls	r2, r3
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b2:	f043 0202 	orr.w	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065be:	2204      	movs	r2, #4
 80065c0:	409a      	lsls	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d012      	beq.n	80065f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065dc:	2204      	movs	r2, #4
 80065de:	409a      	lsls	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e8:	f043 0204 	orr.w	r2, r3, #4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f4:	2210      	movs	r2, #16
 80065f6:	409a      	lsls	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d043      	beq.n	8006688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d03c      	beq.n	8006688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006612:	2210      	movs	r2, #16
 8006614:	409a      	lsls	r2, r3
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d018      	beq.n	800665a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d108      	bne.n	8006648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d024      	beq.n	8006688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
 8006646:	e01f      	b.n	8006688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01b      	beq.n	8006688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
 8006658:	e016      	b.n	8006688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0208 	bic.w	r2, r2, #8
 8006676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668c:	2220      	movs	r2, #32
 800668e:	409a      	lsls	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4013      	ands	r3, r2
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 808f 	beq.w	80067b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8087 	beq.w	80067b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ae:	2220      	movs	r2, #32
 80066b0:	409a      	lsls	r2, r3
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b05      	cmp	r3, #5
 80066c0:	d136      	bne.n	8006730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0216 	bic.w	r2, r2, #22
 80066d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <HAL_DMA_IRQHandler+0x1da>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d007      	beq.n	8006702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0208 	bic.w	r2, r2, #8
 8006700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006706:	223f      	movs	r2, #63	@ 0x3f
 8006708:	409a      	lsls	r2, r3
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006722:	2b00      	cmp	r3, #0
 8006724:	d07e      	beq.n	8006824 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
        }
        return;
 800672e:	e079      	b.n	8006824 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01d      	beq.n	800677a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006750:	2b00      	cmp	r3, #0
 8006752:	d031      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
 800675c:	e02c      	b.n	80067b8 <HAL_DMA_IRQHandler+0x2a0>
 800675e:	bf00      	nop
 8006760:	20000018 	.word	0x20000018
 8006764:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d023      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
 8006778:	e01e      	b.n	80067b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10f      	bne.n	80067a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0210 	bic.w	r2, r2, #16
 8006796:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d032      	beq.n	8006826 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d022      	beq.n	8006812 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2205      	movs	r2, #5
 80067d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60bb      	str	r3, [r7, #8]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d307      	bcc.n	8006800 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f2      	bne.n	80067e4 <HAL_DMA_IRQHandler+0x2cc>
 80067fe:	e000      	b.n	8006802 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006800:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
 8006822:	e000      	b.n	8006826 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006824:	bf00      	nop
    }
  }
}
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006860:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b40      	cmp	r3, #64	@ 0x40
 8006870:	d108      	bne.n	8006884 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006882:	e007      	b.n	8006894 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	3b10      	subs	r3, #16
 80068b0:	4a13      	ldr	r2, [pc, #76]	@ (8006900 <DMA_CalcBaseAndBitshift+0x60>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	091b      	lsrs	r3, r3, #4
 80068b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068ba:	4a12      	ldr	r2, [pc, #72]	@ (8006904 <DMA_CalcBaseAndBitshift+0x64>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d908      	bls.n	80068e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006908 <DMA_CalcBaseAndBitshift+0x68>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	1d1a      	adds	r2, r3, #4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80068de:	e006      	b.n	80068ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	4b08      	ldr	r3, [pc, #32]	@ (8006908 <DMA_CalcBaseAndBitshift+0x68>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	aaaaaaab 	.word	0xaaaaaaab
 8006904:	0801ecfc 	.word	0x0801ecfc
 8006908:	fffffc00 	.word	0xfffffc00

0800690c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d11f      	bne.n	8006966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d856      	bhi.n	80069da <DMA_CheckFifoParam+0xce>
 800692c:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <DMA_CheckFifoParam+0x28>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006945 	.word	0x08006945
 8006938:	08006957 	.word	0x08006957
 800693c:	08006945 	.word	0x08006945
 8006940:	080069db 	.word	0x080069db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d046      	beq.n	80069de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006954:	e043      	b.n	80069de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800695e:	d140      	bne.n	80069e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006964:	e03d      	b.n	80069e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800696e:	d121      	bne.n	80069b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b03      	cmp	r3, #3
 8006974:	d837      	bhi.n	80069e6 <DMA_CheckFifoParam+0xda>
 8006976:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <DMA_CheckFifoParam+0x70>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	0800698d 	.word	0x0800698d
 8006980:	08006993 	.word	0x08006993
 8006984:	0800698d 	.word	0x0800698d
 8006988:	080069a5 	.word	0x080069a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
      break;
 8006990:	e030      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006996:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d025      	beq.n	80069ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069a2:	e022      	b.n	80069ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069ac:	d11f      	bne.n	80069ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80069b2:	e01c      	b.n	80069ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d903      	bls.n	80069c2 <DMA_CheckFifoParam+0xb6>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d003      	beq.n	80069c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80069c0:	e018      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
      break;
 80069c6:	e015      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00e      	beq.n	80069f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e00b      	b.n	80069f2 <DMA_CheckFifoParam+0xe6>
      break;
 80069da:	bf00      	nop
 80069dc:	e00a      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
      break;
 80069de:	bf00      	nop
 80069e0:	e008      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
      break;
 80069e2:	bf00      	nop
 80069e4:	e006      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
      break;
 80069e6:	bf00      	nop
 80069e8:	e004      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
      break;
 80069ea:	bf00      	nop
 80069ec:	e002      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80069ee:	bf00      	nop
 80069f0:	e000      	b.n	80069f4 <DMA_CheckFifoParam+0xe8>
      break;
 80069f2:	bf00      	nop
    }
  } 
  
  return status; 
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e039      	b.n	8006a8a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fd f802 	bl	8003a34 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a54:	f023 0107 	bic.w	r1, r3, #7
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <HAL_DMA2D_Init+0x90>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68d1      	ldr	r1, [r2, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	430b      	orrs	r3, r1
 8006a78:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	ffffc000 	.word	0xffffc000

08006a98 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d026      	beq.n	8006b08 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d021      	beq.n	8006b08 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ad2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	f043 0201 	orr.w	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2204      	movs	r2, #4
 8006aec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d026      	beq.n	8006b60 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d021      	beq.n	8006b60 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b2a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2220      	movs	r2, #32
 8006b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b38:	f043 0202 	orr.w	r2, r3, #2
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2204      	movs	r2, #4
 8006b44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d026      	beq.n	8006bb8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d021      	beq.n	8006bb8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b82:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2208      	movs	r2, #8
 8006b8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b90:	f043 0204 	orr.w	r2, r3, #4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d013      	beq.n	8006bea <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00e      	beq.n	8006bea <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bda:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2204      	movs	r2, #4
 8006be2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f853 	bl	8006c90 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d024      	beq.n	8006c3e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01f      	beq.n	8006c3e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c0c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2202      	movs	r2, #2
 8006c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01f      	beq.n	8006c88 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d01a      	beq.n	8006c88 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c60:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2210      	movs	r2, #16
 8006c68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f80e 	bl	8006ca4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_DMA2D_ConfigLayer+0x20>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e079      	b.n	8006dcc <HAL_DMA2D_ConfigLayer+0x114>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	3318      	adds	r3, #24
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	041b      	lsls	r3, r3, #16
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006d02:	4b35      	ldr	r3, [pc, #212]	@ (8006dd8 <HAL_DMA2D_ConfigLayer+0x120>)
 8006d04:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b0a      	cmp	r3, #10
 8006d0c:	d003      	beq.n	8006d16 <HAL_DMA2D_ConfigLayer+0x5e>
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2b09      	cmp	r3, #9
 8006d14:	d107      	bne.n	8006d26 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e005      	b.n	8006d32 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	061b      	lsls	r3, r3, #24
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d120      	bne.n	8006d7a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	ea02 0103 	and.w	r1, r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b0a      	cmp	r3, #10
 8006d60:	d003      	beq.n	8006d6a <HAL_DMA2D_ConfigLayer+0xb2>
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b09      	cmp	r3, #9
 8006d68:	d127      	bne.n	8006dba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006d76:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d78:	e01f      	b.n	8006dba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	43db      	mvns	r3, r3
 8006d84:	ea02 0103 	and.w	r1, r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b0a      	cmp	r3, #10
 8006da2:	d003      	beq.n	8006dac <HAL_DMA2D_ConfigLayer+0xf4>
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b09      	cmp	r3, #9
 8006daa:	d106      	bne.n	8006dba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006db8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	ff03000f 	.word	0xff03000f

08006ddc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e086      	b.n	8006efc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d106      	bne.n	8006e06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fc fe3d 	bl	8003a80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e06:	4b3f      	ldr	r3, [pc, #252]	@ (8006f04 <HAL_ETH_Init+0x128>)
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8006f04 <HAL_ETH_Init+0x128>)
 8006e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e12:	4b3c      	ldr	r3, [pc, #240]	@ (8006f04 <HAL_ETH_Init+0x128>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f08 <HAL_ETH_Init+0x12c>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	4a39      	ldr	r2, [pc, #228]	@ (8006f08 <HAL_ETH_Init+0x12c>)
 8006e24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006e28:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006e2a:	4b37      	ldr	r3, [pc, #220]	@ (8006f08 <HAL_ETH_Init+0x12c>)
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	4935      	ldr	r1, [pc, #212]	@ (8006f08 <HAL_ETH_Init+0x12c>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006e38:	4b33      	ldr	r3, [pc, #204]	@ (8006f08 <HAL_ETH_Init+0x12c>)
 8006e3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e54:	f7fe fc4c 	bl	80056f0 <HAL_GetTick>
 8006e58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006e5a:	e011      	b.n	8006e80 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006e5c:	f7fe fc48 	bl	80056f0 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006e6a:	d909      	bls.n	8006e80 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	22e0      	movs	r2, #224	@ 0xe0
 8006e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e03d      	b.n	8006efc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e4      	bne.n	8006e5c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f97a 	bl	800718c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fa25 	bl	80072e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa7b 	bl	800739a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f9e3 	bl	8007278 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8006ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	4b0f      	ldr	r3, [pc, #60]	@ (8006f0c <HAL_ETH_Init+0x130>)
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8006ee6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2210      	movs	r2, #16
 8006ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40023800 	.word	0x40023800
 8006f08:	40013800 	.word	0x40013800
 8006f0c:	00020060 	.word	0x00020060

08006f10 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4b53      	ldr	r3, [pc, #332]	@ (8007074 <ETH_SetMACConfig+0x164>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	7b9b      	ldrb	r3, [r3, #14]
 8006f2e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	d102      	bne.n	8006f3e <ETH_SetMACConfig+0x2e>
 8006f38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006f3c:	e000      	b.n	8006f40 <ETH_SetMACConfig+0x30>
 8006f3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006f40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	7c52      	ldrb	r2, [r2, #17]
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	d102      	bne.n	8006f50 <ETH_SetMACConfig+0x40>
 8006f4a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006f4e:	e000      	b.n	8006f52 <ETH_SetMACConfig+0x42>
 8006f50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006f52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006f58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	7fdb      	ldrb	r3, [r3, #31]
 8006f5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006f60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	7f92      	ldrb	r2, [r2, #30]
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	d102      	bne.n	8006f76 <ETH_SetMACConfig+0x66>
 8006f70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f74:	e000      	b.n	8006f78 <ETH_SetMACConfig+0x68>
 8006f76:	2200      	movs	r2, #0
                        macconf->Speed |
 8006f78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	7f1b      	ldrb	r3, [r3, #28]
 8006f7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006f80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006f86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	791b      	ldrb	r3, [r3, #4]
 8006f8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006f8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	d102      	bne.n	8006fa0 <ETH_SetMACConfig+0x90>
 8006f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f9e:	e000      	b.n	8006fa2 <ETH_SetMACConfig+0x92>
 8006fa0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006fa2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	7bdb      	ldrb	r3, [r3, #15]
 8006fa8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006faa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006fb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fb8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	f7fe fb98 	bl	8005708 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006fee:	4013      	ands	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ff6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006ffe:	2a00      	cmp	r2, #0
 8007000:	d101      	bne.n	8007006 <ETH_SetMACConfig+0xf6>
 8007002:	2280      	movs	r2, #128	@ 0x80
 8007004:	e000      	b.n	8007008 <ETH_SetMACConfig+0xf8>
 8007006:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007008:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800700e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007016:	2a01      	cmp	r2, #1
 8007018:	d101      	bne.n	800701e <ETH_SetMACConfig+0x10e>
 800701a:	2208      	movs	r2, #8
 800701c:	e000      	b.n	8007020 <ETH_SetMACConfig+0x110>
 800701e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007020:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007028:	2a01      	cmp	r2, #1
 800702a:	d101      	bne.n	8007030 <ETH_SetMACConfig+0x120>
 800702c:	2204      	movs	r2, #4
 800702e:	e000      	b.n	8007032 <ETH_SetMACConfig+0x122>
 8007030:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007032:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800703a:	2a01      	cmp	r2, #1
 800703c:	d101      	bne.n	8007042 <ETH_SetMACConfig+0x132>
 800703e:	2202      	movs	r2, #2
 8007040:	e000      	b.n	8007044 <ETH_SetMACConfig+0x134>
 8007042:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007044:	4313      	orrs	r3, r2
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800705c:	2001      	movs	r0, #1
 800705e:	f7fe fb53 	bl	8005708 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	619a      	str	r2, [r3, #24]
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	fd20810f 	.word	0xfd20810f

08007078 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4b3d      	ldr	r3, [pc, #244]	@ (8007188 <ETH_SetDMAConfig+0x110>)
 8007092:	4013      	ands	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	7b1b      	ldrb	r3, [r3, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d102      	bne.n	80070a4 <ETH_SetDMAConfig+0x2c>
 800709e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80070a2:	e000      	b.n	80070a6 <ETH_SetDMAConfig+0x2e>
 80070a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	7b5b      	ldrb	r3, [r3, #13]
 80070aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80070ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	7f52      	ldrb	r2, [r2, #29]
 80070b2:	2a00      	cmp	r2, #0
 80070b4:	d102      	bne.n	80070bc <ETH_SetDMAConfig+0x44>
 80070b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80070ba:	e000      	b.n	80070be <ETH_SetDMAConfig+0x46>
 80070bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80070be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	7b9b      	ldrb	r3, [r3, #14]
 80070c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80070c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80070cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	7f1b      	ldrb	r3, [r3, #28]
 80070d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80070d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	7f9b      	ldrb	r3, [r3, #30]
 80070da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80070dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80070e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80070ec:	4313      	orrs	r3, r2
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070fc:	461a      	mov	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800710e:	2001      	movs	r0, #1
 8007110:	f7fe fafa 	bl	8005708 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800711c:	461a      	mov	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	791b      	ldrb	r3, [r3, #4]
 8007126:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800712c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007132:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007138:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007140:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007142:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800714a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007150:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6812      	ldr	r2, [r2, #0]
 8007156:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800715a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800715e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800716c:	2001      	movs	r0, #1
 800716e:	f7fe facb 	bl	8005708 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6013      	str	r3, [r2, #0]
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	f8de3f23 	.word	0xf8de3f23

0800718c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b0a6      	sub	sp, #152	@ 0x98
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80071a0:	2300      	movs	r3, #0
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80071ce:	2300      	movs	r3, #0
 80071d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80071f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80071fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80071fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007200:	2300      	movs	r3, #0
 8007202:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007206:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff fe7f 	bl	8006f10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007212:	2301      	movs	r3, #1
 8007214:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007216:	2301      	movs	r3, #1
 8007218:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007220:	2301      	movs	r3, #1
 8007222:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800722e:	2300      	movs	r3, #0
 8007230:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007234:	2300      	movs	r3, #0
 8007236:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800723e:	2301      	movs	r3, #1
 8007240:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007246:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007248:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800724c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800724e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007252:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800725a:	2300      	movs	r3, #0
 800725c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007262:	f107 0308 	add.w	r3, r7, #8
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff ff05 	bl	8007078 <ETH_SetDMAConfig>
}
 800726e:	bf00      	nop
 8007270:	3798      	adds	r7, #152	@ 0x98
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3305      	adds	r3, #5
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	3204      	adds	r2, #4
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	4b11      	ldr	r3, [pc, #68]	@ (80072e0 <ETH_MACAddressConfig+0x68>)
 800729a:	4413      	add	r3, r2
 800729c:	461a      	mov	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3303      	adds	r3, #3
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	061a      	lsls	r2, r3, #24
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3302      	adds	r3, #2
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	041b      	lsls	r3, r3, #16
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3301      	adds	r3, #1
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	4313      	orrs	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <ETH_MACAddressConfig+0x6c>)
 80072ca:	4413      	add	r3, r2
 80072cc:	461a      	mov	r2, r3
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	6013      	str	r3, [r2, #0]
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40028040 	.word	0x40028040
 80072e4:	40028044 	.word	0x40028044

080072e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	e03e      	b.n	8007374 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68d9      	ldr	r1, [r3, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	440b      	add	r3, r1
 8007306:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2200      	movs	r2, #0
 8007312:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2200      	movs	r2, #0
 8007318:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2200      	movs	r2, #0
 800731e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	3206      	adds	r2, #6
 8007328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d80c      	bhi.n	8007358 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68d9      	ldr	r1, [r3, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	440b      	add	r3, r1
 8007350:	461a      	mov	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	60da      	str	r2, [r3, #12]
 8007356:	e004      	b.n	8007362 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	461a      	mov	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b03      	cmp	r3, #3
 8007378:	d9bd      	bls.n	80072f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800738c:	611a      	str	r2, [r3, #16]
}
 800738e:	bf00      	nop
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e048      	b.n	800743a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6919      	ldr	r1, [r3, #16]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	440b      	add	r3, r1
 80073b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2200      	movs	r2, #0
 80073d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2200      	movs	r2, #0
 80073dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80073e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	3212      	adds	r2, #18
 8007406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d80c      	bhi.n	800742a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6919      	ldr	r1, [r3, #16]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	440b      	add	r3, r1
 8007422:	461a      	mov	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	60da      	str	r2, [r3, #12]
 8007428:	e004      	b.n	8007434 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	461a      	mov	r2, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d9b3      	bls.n	80073a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800746a:	60da      	str	r2, [r3, #12]
}
 800746c:	bf00      	nop
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007478:	b480      	push	{r7}
 800747a:	b089      	sub	sp, #36	@ 0x24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007482:	2300      	movs	r3, #0
 8007484:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800748e:	2300      	movs	r3, #0
 8007490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	e175      	b.n	8007784 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007498:	2201      	movs	r2, #1
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4013      	ands	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	f040 8164 	bne.w	800777e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d005      	beq.n	80074ce <HAL_GPIO_Init+0x56>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d130      	bne.n	8007530 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	2203      	movs	r2, #3
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43db      	mvns	r3, r3
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	4013      	ands	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007504:	2201      	movs	r2, #1
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	091b      	lsrs	r3, r3, #4
 800751a:	f003 0201 	and.w	r2, r3, #1
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	4313      	orrs	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b03      	cmp	r3, #3
 800753a:	d017      	beq.n	800756c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	2203      	movs	r2, #3
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	43db      	mvns	r3, r3
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	4013      	ands	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	fa02 f303 	lsl.w	r3, r2, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4313      	orrs	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d123      	bne.n	80075c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	08da      	lsrs	r2, r3, #3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3208      	adds	r2, #8
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	220f      	movs	r2, #15
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	43db      	mvns	r3, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4013      	ands	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	08da      	lsrs	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3208      	adds	r2, #8
 80075ba:	69b9      	ldr	r1, [r7, #24]
 80075bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	2203      	movs	r2, #3
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	43db      	mvns	r3, r3
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	4013      	ands	r3, r2
 80075d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f003 0203 	and.w	r2, r3, #3
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80be 	beq.w	800777e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007602:	4b66      	ldr	r3, [pc, #408]	@ (800779c <HAL_GPIO_Init+0x324>)
 8007604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007606:	4a65      	ldr	r2, [pc, #404]	@ (800779c <HAL_GPIO_Init+0x324>)
 8007608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800760c:	6453      	str	r3, [r2, #68]	@ 0x44
 800760e:	4b63      	ldr	r3, [pc, #396]	@ (800779c <HAL_GPIO_Init+0x324>)
 8007610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800761a:	4a61      	ldr	r2, [pc, #388]	@ (80077a0 <HAL_GPIO_Init+0x328>)
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	089b      	lsrs	r3, r3, #2
 8007620:	3302      	adds	r3, #2
 8007622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007626:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	220f      	movs	r2, #15
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	43db      	mvns	r3, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4013      	ands	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a58      	ldr	r2, [pc, #352]	@ (80077a4 <HAL_GPIO_Init+0x32c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d037      	beq.n	80076b6 <HAL_GPIO_Init+0x23e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a57      	ldr	r2, [pc, #348]	@ (80077a8 <HAL_GPIO_Init+0x330>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d031      	beq.n	80076b2 <HAL_GPIO_Init+0x23a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a56      	ldr	r2, [pc, #344]	@ (80077ac <HAL_GPIO_Init+0x334>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d02b      	beq.n	80076ae <HAL_GPIO_Init+0x236>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a55      	ldr	r2, [pc, #340]	@ (80077b0 <HAL_GPIO_Init+0x338>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d025      	beq.n	80076aa <HAL_GPIO_Init+0x232>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a54      	ldr	r2, [pc, #336]	@ (80077b4 <HAL_GPIO_Init+0x33c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d01f      	beq.n	80076a6 <HAL_GPIO_Init+0x22e>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a53      	ldr	r2, [pc, #332]	@ (80077b8 <HAL_GPIO_Init+0x340>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d019      	beq.n	80076a2 <HAL_GPIO_Init+0x22a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a52      	ldr	r2, [pc, #328]	@ (80077bc <HAL_GPIO_Init+0x344>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d013      	beq.n	800769e <HAL_GPIO_Init+0x226>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a51      	ldr	r2, [pc, #324]	@ (80077c0 <HAL_GPIO_Init+0x348>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00d      	beq.n	800769a <HAL_GPIO_Init+0x222>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a50      	ldr	r2, [pc, #320]	@ (80077c4 <HAL_GPIO_Init+0x34c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d007      	beq.n	8007696 <HAL_GPIO_Init+0x21e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a4f      	ldr	r2, [pc, #316]	@ (80077c8 <HAL_GPIO_Init+0x350>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d101      	bne.n	8007692 <HAL_GPIO_Init+0x21a>
 800768e:	2309      	movs	r3, #9
 8007690:	e012      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 8007692:	230a      	movs	r3, #10
 8007694:	e010      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 8007696:	2308      	movs	r3, #8
 8007698:	e00e      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 800769a:	2307      	movs	r3, #7
 800769c:	e00c      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 800769e:	2306      	movs	r3, #6
 80076a0:	e00a      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 80076a2:	2305      	movs	r3, #5
 80076a4:	e008      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 80076a6:	2304      	movs	r3, #4
 80076a8:	e006      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 80076aa:	2303      	movs	r3, #3
 80076ac:	e004      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e002      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <HAL_GPIO_Init+0x240>
 80076b6:	2300      	movs	r3, #0
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	f002 0203 	and.w	r2, r2, #3
 80076be:	0092      	lsls	r2, r2, #2
 80076c0:	4093      	lsls	r3, r2
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80076c8:	4935      	ldr	r1, [pc, #212]	@ (80077a0 <HAL_GPIO_Init+0x328>)
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	089b      	lsrs	r3, r3, #2
 80076ce:	3302      	adds	r3, #2
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076d6:	4b3d      	ldr	r3, [pc, #244]	@ (80077cc <HAL_GPIO_Init+0x354>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	43db      	mvns	r3, r3
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	4013      	ands	r3, r2
 80076e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076fa:	4a34      	ldr	r2, [pc, #208]	@ (80077cc <HAL_GPIO_Init+0x354>)
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007700:	4b32      	ldr	r3, [pc, #200]	@ (80077cc <HAL_GPIO_Init+0x354>)
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	43db      	mvns	r3, r3
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4013      	ands	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007724:	4a29      	ldr	r2, [pc, #164]	@ (80077cc <HAL_GPIO_Init+0x354>)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800772a:	4b28      	ldr	r3, [pc, #160]	@ (80077cc <HAL_GPIO_Init+0x354>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	43db      	mvns	r3, r3
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	4013      	ands	r3, r2
 8007738:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800774e:	4a1f      	ldr	r2, [pc, #124]	@ (80077cc <HAL_GPIO_Init+0x354>)
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007754:	4b1d      	ldr	r3, [pc, #116]	@ (80077cc <HAL_GPIO_Init+0x354>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	43db      	mvns	r3, r3
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4013      	ands	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	4313      	orrs	r3, r2
 8007776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007778:	4a14      	ldr	r2, [pc, #80]	@ (80077cc <HAL_GPIO_Init+0x354>)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	3301      	adds	r3, #1
 8007782:	61fb      	str	r3, [r7, #28]
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	f67f ae86 	bls.w	8007498 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800778c:	bf00      	nop
 800778e:	bf00      	nop
 8007790:	3724      	adds	r7, #36	@ 0x24
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40023800 	.word	0x40023800
 80077a0:	40013800 	.word	0x40013800
 80077a4:	40020000 	.word	0x40020000
 80077a8:	40020400 	.word	0x40020400
 80077ac:	40020800 	.word	0x40020800
 80077b0:	40020c00 	.word	0x40020c00
 80077b4:	40021000 	.word	0x40021000
 80077b8:	40021400 	.word	0x40021400
 80077bc:	40021800 	.word	0x40021800
 80077c0:	40021c00 	.word	0x40021c00
 80077c4:	40022000 	.word	0x40022000
 80077c8:	40022400 	.word	0x40022400
 80077cc:	40013c00 	.word	0x40013c00

080077d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	807b      	strh	r3, [r7, #2]
 80077dc:	4613      	mov	r3, r2
 80077de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077e0:	787b      	ldrb	r3, [r7, #1]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077e6:	887a      	ldrh	r2, [r7, #2]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80077ec:	e003      	b.n	80077f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80077ee:	887b      	ldrh	r3, [r7, #2]
 80077f0:	041a      	lsls	r2, r3, #16
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	619a      	str	r2, [r3, #24]
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af02      	add	r7, sp, #8
 8007808:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e059      	b.n	80078c8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f013 fad4 	bl	801addc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2203      	movs	r2, #3
 8007838:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007842:	d102      	bne.n	800784a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f009 fd17 	bl	8011282 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	7c1a      	ldrb	r2, [r3, #16]
 800785c:	f88d 2000 	strb.w	r2, [sp]
 8007860:	3304      	adds	r3, #4
 8007862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007864:	f009 fca2 	bl	80111ac <USB_CoreInit>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e026      	b.n	80078c8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2101      	movs	r1, #1
 8007880:	4618      	mov	r0, r3
 8007882:	f009 fd0f 	bl	80112a4 <USB_SetCurrentMode>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e017      	b.n	80078c8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7c1a      	ldrb	r2, [r3, #16]
 80078a0:	f88d 2000 	strb.w	r2, [sp]
 80078a4:	3304      	adds	r3, #4
 80078a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078a8:	f009 feb8 	bl	801161c <USB_HostInit>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d005      	beq.n	80078be <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e004      	b.n	80078c8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b08b      	sub	sp, #44	@ 0x2c
 80078d4:	af04      	add	r7, sp, #16
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	4603      	mov	r3, r0
 80078e0:	70fb      	strb	r3, [r7, #3]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70bb      	strb	r3, [r7, #2]
 80078e6:	4613      	mov	r3, r2
 80078e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80078ea:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80078ec:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_HCD_HC_Init+0x2c>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e09d      	b.n	8007a38 <HAL_HCD_HC_Init+0x168>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8007904:	78fa      	ldrb	r2, [r7, #3]
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	3319      	adds	r3, #25
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	3314      	adds	r3, #20
 8007928:	787a      	ldrb	r2, [r7, #1]
 800792a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	4613      	mov	r3, r2
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	440b      	add	r3, r1
 800793a:	3315      	adds	r3, #21
 800793c:	78fa      	ldrb	r2, [r7, #3]
 800793e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007940:	78fa      	ldrb	r2, [r7, #3]
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4613      	mov	r3, r2
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	1a9b      	subs	r3, r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	3326      	adds	r3, #38	@ 0x26
 8007950:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007954:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	78bb      	ldrb	r3, [r7, #2]
 800795a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800795e:	b2d8      	uxtb	r0, r3
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	1a9b      	subs	r3, r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	3316      	adds	r3, #22
 800796e:	4602      	mov	r2, r0
 8007970:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fbc8 	bl	800810c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800797c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007980:	2b00      	cmp	r3, #0
 8007982:	da0a      	bge.n	800799a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	3317      	adds	r3, #23
 8007994:	2201      	movs	r2, #1
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e009      	b.n	80079ae <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	4613      	mov	r3, r2
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	440b      	add	r3, r1
 80079a8:	3317      	adds	r3, #23
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f009 ff8a 	bl	80118cc <USB_GetHostSpeed>
 80079b8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80079ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d10b      	bne.n	80079da <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80079c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d107      	bne.n	80079da <HAL_HCD_HC_Init+0x10a>
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2bbc      	cmp	r3, #188	@ 0xbc
 80079d4:	d901      	bls.n	80079da <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80079d6:	23bc      	movs	r3, #188	@ 0xbc
 80079d8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	3318      	adds	r3, #24
 80079ea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80079ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	b298      	uxth	r0, r3
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	4613      	mov	r3, r2
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	440b      	add	r3, r1
 8007a02:	3328      	adds	r3, #40	@ 0x28
 8007a04:	4602      	mov	r2, r0
 8007a06:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	787c      	ldrb	r4, [r7, #1]
 8007a12:	78ba      	ldrb	r2, [r7, #2]
 8007a14:	78f9      	ldrb	r1, [r7, #3]
 8007a16:	9302      	str	r3, [sp, #8]
 8007a18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	4623      	mov	r3, r4
 8007a26:	f009 ff79 	bl	801191c <USB_HC_Init>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd90      	pop	{r4, r7, pc}

08007a40 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_HCD_HC_Halt+0x1e>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e00f      	b.n	8007a7e <HAL_HCD_HC_Halt+0x3e>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f00a fb0b 	bl	801208a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	4608      	mov	r0, r1
 8007a92:	4611      	mov	r1, r2
 8007a94:	461a      	mov	r2, r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	70fb      	strb	r3, [r7, #3]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	70bb      	strb	r3, [r7, #2]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007aa2:	78fa      	ldrb	r2, [r7, #3]
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	1a9b      	subs	r3, r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	440b      	add	r3, r1
 8007ab0:	3317      	adds	r3, #23
 8007ab2:	78ba      	ldrb	r2, [r7, #2]
 8007ab4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	011b      	lsls	r3, r3, #4
 8007abe:	1a9b      	subs	r3, r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3326      	adds	r3, #38	@ 0x26
 8007ac6:	787a      	ldrb	r2, [r7, #1]
 8007ac8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007aca:	7c3b      	ldrb	r3, [r7, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d114      	bne.n	8007afa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007ad0:	78fa      	ldrb	r2, [r7, #3]
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	440b      	add	r3, r1
 8007ade:	332a      	adds	r3, #42	@ 0x2a
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	1a9b      	subs	r3, r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	440b      	add	r3, r1
 8007af2:	3319      	adds	r3, #25
 8007af4:	7f3a      	ldrb	r2, [r7, #28]
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	e009      	b.n	8007b0e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	1a9b      	subs	r3, r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	440b      	add	r3, r1
 8007b08:	332a      	adds	r3, #42	@ 0x2a
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007b0e:	787b      	ldrb	r3, [r7, #1]
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	f200 8102 	bhi.w	8007d1a <HAL_HCD_HC_SubmitRequest+0x292>
 8007b16:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <HAL_HCD_HC_SubmitRequest+0x94>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007d05 	.word	0x08007d05
 8007b24:	08007bf1 	.word	0x08007bf1
 8007b28:	08007c7b 	.word	0x08007c7b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8007b2c:	7c3b      	ldrb	r3, [r7, #16]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	f040 80f5 	bne.w	8007d1e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8007b34:	78bb      	ldrb	r3, [r7, #2]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d12d      	bne.n	8007b96 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8007b3a:	8b3b      	ldrh	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d109      	bne.n	8007b54 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4613      	mov	r3, r2
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	333d      	adds	r3, #61	@ 0x3d
 8007b50:	2201      	movs	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	333d      	adds	r3, #61	@ 0x3d
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007b6a:	78fa      	ldrb	r2, [r7, #3]
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	332a      	adds	r3, #42	@ 0x2a
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8007b7e:	e0ce      	b.n	8007d1e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007b80:	78fa      	ldrb	r2, [r7, #3]
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	4613      	mov	r3, r2
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	332a      	adds	r3, #42	@ 0x2a
 8007b90:	2202      	movs	r2, #2
 8007b92:	701a      	strb	r2, [r3, #0]
      break;
 8007b94:	e0c3      	b.n	8007d1e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	331a      	adds	r3, #26
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	f040 80b8 	bne.w	8007d1e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	1a9b      	subs	r3, r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	333c      	adds	r3, #60	@ 0x3c
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	332a      	adds	r3, #42	@ 0x2a
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	701a      	strb	r2, [r3, #0]
      break;
 8007bd8:	e0a1      	b.n	8007d1e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007bda:	78fa      	ldrb	r2, [r7, #3]
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	332a      	adds	r3, #42	@ 0x2a
 8007bea:	2202      	movs	r2, #2
 8007bec:	701a      	strb	r2, [r3, #0]
      break;
 8007bee:	e096      	b.n	8007d1e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007bf0:	78bb      	ldrb	r3, [r7, #2]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d120      	bne.n	8007c38 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	333d      	adds	r3, #61	@ 0x3d
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	332a      	adds	r3, #42	@ 0x2a
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007c20:	e07e      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	332a      	adds	r3, #42	@ 0x2a
 8007c32:	2202      	movs	r2, #2
 8007c34:	701a      	strb	r2, [r3, #0]
      break;
 8007c36:	e073      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007c38:	78fa      	ldrb	r2, [r7, #3]
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	333c      	adds	r3, #60	@ 0x3c
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	332a      	adds	r3, #42	@ 0x2a
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
      break;
 8007c62:	e05d      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	1a9b      	subs	r3, r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	332a      	adds	r3, #42	@ 0x2a
 8007c74:	2202      	movs	r2, #2
 8007c76:	701a      	strb	r2, [r3, #0]
      break;
 8007c78:	e052      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007c7a:	78bb      	ldrb	r3, [r7, #2]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d120      	bne.n	8007cc2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	333d      	adds	r3, #61	@ 0x3d
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	332a      	adds	r3, #42	@ 0x2a
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007caa:	e039      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	332a      	adds	r3, #42	@ 0x2a
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	701a      	strb	r2, [r3, #0]
      break;
 8007cc0:	e02e      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	440b      	add	r3, r1
 8007cd0:	333c      	adds	r3, #60	@ 0x3c
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	332a      	adds	r3, #42	@ 0x2a
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
      break;
 8007cec:	e018      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	332a      	adds	r3, #42	@ 0x2a
 8007cfe:	2202      	movs	r2, #2
 8007d00:	701a      	strb	r2, [r3, #0]
      break;
 8007d02:	e00d      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	1a9b      	subs	r3, r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	332a      	adds	r3, #42	@ 0x2a
 8007d14:	2200      	movs	r2, #0
 8007d16:	701a      	strb	r2, [r3, #0]
      break;
 8007d18:	e002      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8007d1a:	bf00      	nop
 8007d1c:	e000      	b.n	8007d20 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8007d1e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	1a9b      	subs	r3, r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	332c      	adds	r3, #44	@ 0x2c
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	8b39      	ldrh	r1, [r7, #24]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4403      	add	r3, r0
 8007d44:	3334      	adds	r3, #52	@ 0x34
 8007d46:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007d48:	78fa      	ldrb	r2, [r7, #3]
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	1a9b      	subs	r3, r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	334c      	adds	r3, #76	@ 0x4c
 8007d58:	2200      	movs	r2, #0
 8007d5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	3338      	adds	r3, #56	@ 0x38
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	4613      	mov	r3, r2
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	3315      	adds	r3, #21
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007d84:	78fa      	ldrb	r2, [r7, #3]
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	334d      	adds	r3, #77	@ 0x4d
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	011b      	lsls	r3, r3, #4
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	3310      	adds	r3, #16
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	1d19      	adds	r1, r3, #4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	799b      	ldrb	r3, [r3, #6]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f009 fede 	bl	8011b74 <USB_HC_StartXfer>
 8007db8:	4603      	mov	r3, r0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop

08007dc4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f009 fbd8 	bl	8011590 <USB_GetMode>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	f040 80fb 	bne.w	8007fde <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f009 fb9b 	bl	8011528 <USB_ReadInterrupts>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 80f1 	beq.w	8007fdc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f009 fb92 	bl	8011528 <USB_ReadInterrupts>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e0e:	d104      	bne.n	8007e1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007e18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f009 fb82 	bl	8011528 <USB_ReadInterrupts>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e2e:	d104      	bne.n	8007e3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f009 fb72 	bl	8011528 <USB_ReadInterrupts>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e4e:	d104      	bne.n	8007e5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007e58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f009 fb62 	bl	8011528 <USB_ReadInterrupts>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d103      	bne.n	8007e76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2202      	movs	r2, #2
 8007e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f009 fb54 	bl	8011528 <USB_ReadInterrupts>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e8a:	d120      	bne.n	8007ece <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007e94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d113      	bne.n	8007ece <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007ea6:	2110      	movs	r1, #16
 8007ea8:	6938      	ldr	r0, [r7, #16]
 8007eaa:	f009 fa47 	bl	801133c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007eae:	6938      	ldr	r0, [r7, #16]
 8007eb0:	f009 fa76 	bl	80113a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	7a5b      	ldrb	r3, [r3, #9]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d105      	bne.n	8007ec8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f009 fc62 	bl	801178c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f012 fff9 	bl	801aec0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f009 fb28 	bl	8011528 <USB_ReadInterrupts>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ede:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ee2:	d102      	bne.n	8007eea <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fd4d 	bl	8009984 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f009 fb1a 	bl	8011528 <USB_ReadInterrupts>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f003 0308 	and.w	r3, r3, #8
 8007efa:	2b08      	cmp	r3, #8
 8007efc:	d106      	bne.n	8007f0c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f012 ffc2 	bl	801ae88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f009 fb09 	bl	8011528 <USB_ReadInterrupts>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f20:	d139      	bne.n	8007f96 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f00a f89e 	bl	8012068 <USB_HC_ReadInterrupt>
 8007f2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	e025      	b.n	8007f80 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d018      	beq.n	8007f7a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f5e:	d106      	bne.n	8007f6e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f905 	bl	8008176 <HCD_HC_IN_IRQHandler>
 8007f6c:	e005      	b.n	8007f7a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 ff67 	bl	8008e48 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	795b      	ldrb	r3, [r3, #5]
 8007f84:	461a      	mov	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d3d3      	bcc.n	8007f34 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f009 fac4 	bl	8011528 <USB_ReadInterrupts>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f003 0310 	and.w	r3, r3, #16
 8007fa6:	2b10      	cmp	r3, #16
 8007fa8:	d101      	bne.n	8007fae <HAL_HCD_IRQHandler+0x1ea>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <HAL_HCD_IRQHandler+0x1ec>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d014      	beq.n	8007fde <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699a      	ldr	r2, [r3, #24]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0210 	bic.w	r2, r2, #16
 8007fc2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fbfe 	bl	80097c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	699a      	ldr	r2, [r3, #24]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0210 	orr.w	r2, r2, #16
 8007fd8:	619a      	str	r2, [r3, #24]
 8007fda:	e000      	b.n	8007fde <HAL_HCD_IRQHandler+0x21a>
      return;
 8007fdc:	bf00      	nop
    }
  }
}
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d101      	bne.n	8007ffa <HAL_HCD_Start+0x16>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e013      	b.n	8008022 <HAL_HCD_Start+0x3e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2101      	movs	r1, #1
 8008008:	4618      	mov	r0, r3
 800800a:	f009 fc26 	bl	801185a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f009 f924 	bl	8011260 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_HCD_Stop+0x16>
 800803c:	2302      	movs	r3, #2
 800803e:	e00d      	b.n	800805c <HAL_HCD_Stop+0x32>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4618      	mov	r0, r3
 800804e:	f00a f979 	bl	8012344 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f009 fbc8 	bl	8011806 <USB_ResetPort>
 8008076:	4603      	mov	r3, r0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	334c      	adds	r3, #76	@ 0x4c
 800809c:	781b      	ldrb	r3, [r3, #0]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80080b6:	78fa      	ldrb	r2, [r7, #3]
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	4613      	mov	r3, r2
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	1a9b      	subs	r3, r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	440b      	add	r3, r1
 80080c4:	3338      	adds	r3, #56	@ 0x38
 80080c6:	681b      	ldr	r3, [r3, #0]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f009 fc0a 	bl	80118fa <USB_GetCurrentFrame>
 80080e6:	4603      	mov	r3, r0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f009 fbe5 	bl	80118cc <USB_GetHostSpeed>
 8008102:	4603      	mov	r3, r0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8008118:	78fa      	ldrb	r2, [r7, #3]
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	331a      	adds	r3, #26
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800812c:	78fa      	ldrb	r2, [r7, #3]
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4613      	mov	r3, r2
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	331b      	adds	r3, #27
 800813c:	2200      	movs	r2, #0
 800813e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8008140:	78fa      	ldrb	r2, [r7, #3]
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	4613      	mov	r3, r2
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	3325      	adds	r3, #37	@ 0x25
 8008150:	2200      	movs	r2, #0
 8008152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8008154:	78fa      	ldrb	r2, [r7, #3]
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	4613      	mov	r3, r2
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	1a9b      	subs	r3, r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	440b      	add	r3, r1
 8008162:	3324      	adds	r3, #36	@ 0x24
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f009 f9da 	bl	801154e <USB_ReadChInterrupts>
 800819a:	4603      	mov	r3, r0
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d11a      	bne.n	80081da <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b0:	461a      	mov	r2, r3
 80081b2:	2304      	movs	r3, #4
 80081b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	334d      	adds	r3, #77	@ 0x4d
 80081c6:	2207      	movs	r2, #7
 80081c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f009 ff59 	bl	801208a <USB_HC_Halt>
 80081d8:	e09e      	b.n	8008318 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	78fa      	ldrb	r2, [r7, #3]
 80081e0:	4611      	mov	r1, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f009 f9b3 	bl	801154e <USB_ReadChInterrupts>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081f2:	d11b      	bne.n	800822c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008200:	461a      	mov	r2, r3
 8008202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008206:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8008208:	78fa      	ldrb	r2, [r7, #3]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	334d      	adds	r3, #77	@ 0x4d
 8008218:	2208      	movs	r2, #8
 800821a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f009 ff30 	bl	801208a <USB_HC_Halt>
 800822a:	e075      	b.n	8008318 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f009 f98a 	bl	801154e <USB_ReadChInterrupts>
 800823a:	4603      	mov	r3, r0
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b08      	cmp	r3, #8
 8008242:	d11a      	bne.n	800827a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	4413      	add	r3, r2
 800824c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008250:	461a      	mov	r2, r3
 8008252:	2308      	movs	r3, #8
 8008254:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	334d      	adds	r3, #77	@ 0x4d
 8008266:	2206      	movs	r2, #6
 8008268:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f009 ff09 	bl	801208a <USB_HC_Halt>
 8008278:	e04e      	b.n	8008318 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f009 f963 	bl	801154e <USB_ReadChInterrupts>
 8008288:	4603      	mov	r3, r0
 800828a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800828e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008292:	d11b      	bne.n	80082cc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	4413      	add	r3, r2
 800829c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082a0:	461a      	mov	r2, r3
 80082a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80082a8:	78fa      	ldrb	r2, [r7, #3]
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	4613      	mov	r3, r2
 80082ae:	011b      	lsls	r3, r3, #4
 80082b0:	1a9b      	subs	r3, r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	334d      	adds	r3, #77	@ 0x4d
 80082b8:	2209      	movs	r2, #9
 80082ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	78fa      	ldrb	r2, [r7, #3]
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f009 fee0 	bl	801208a <USB_HC_Halt>
 80082ca:	e025      	b.n	8008318 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	4611      	mov	r1, r2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f009 f93a 	bl	801154e <USB_ReadChInterrupts>
 80082da:	4603      	mov	r3, r0
 80082dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e0:	2b80      	cmp	r3, #128	@ 0x80
 80082e2:	d119      	bne.n	8008318 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f0:	461a      	mov	r2, r3
 80082f2:	2380      	movs	r3, #128	@ 0x80
 80082f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	334d      	adds	r3, #77	@ 0x4d
 8008306:	2207      	movs	r2, #7
 8008308:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f009 feb9 	bl	801208a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f009 f914 	bl	801154e <USB_ReadChInterrupts>
 8008326:	4603      	mov	r3, r0
 8008328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800832c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008330:	d112      	bne.n	8008358 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	4611      	mov	r1, r2
 800833a:	4618      	mov	r0, r3
 800833c:	f009 fea5 	bl	801208a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800834c:	461a      	mov	r2, r3
 800834e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008352:	6093      	str	r3, [r2, #8]
 8008354:	f000 bd75 	b.w	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f009 f8f4 	bl	801154e <USB_ReadChInterrupts>
 8008366:	4603      	mov	r3, r0
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b01      	cmp	r3, #1
 800836e:	f040 8128 	bne.w	80085c2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4413      	add	r3, r2
 800837a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800837e:	461a      	mov	r2, r3
 8008380:	2320      	movs	r3, #32
 8008382:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	331b      	adds	r3, #27
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d119      	bne.n	80083ce <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	331b      	adds	r3, #27
 80083aa:	2200      	movs	r2, #0
 80083ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	78fa      	ldrb	r2, [r7, #3]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083cc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	799b      	ldrb	r3, [r3, #6]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d01b      	beq.n	800840e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	3330      	adds	r3, #48	@ 0x30
 80083e6:	6819      	ldr	r1, [r3, #0]
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083fa:	78fa      	ldrb	r2, [r7, #3]
 80083fc:	1ac9      	subs	r1, r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4403      	add	r3, r0
 800840a:	3338      	adds	r3, #56	@ 0x38
 800840c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	4613      	mov	r3, r2
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	334d      	adds	r3, #77	@ 0x4d
 800841e:	2201      	movs	r2, #1
 8008420:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008422:	78fa      	ldrb	r2, [r7, #3]
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	1a9b      	subs	r3, r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	3344      	adds	r3, #68	@ 0x44
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4413      	add	r3, r2
 800843e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008442:	461a      	mov	r2, r3
 8008444:	2301      	movs	r3, #1
 8008446:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	3326      	adds	r3, #38	@ 0x26
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	4613      	mov	r3, r2
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	3326      	adds	r3, #38	@ 0x26
 800846e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008470:	2b02      	cmp	r3, #2
 8008472:	d110      	bne.n	8008496 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	78fa      	ldrb	r2, [r7, #3]
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f009 fe04 	bl	801208a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848e:	461a      	mov	r2, r3
 8008490:	2310      	movs	r3, #16
 8008492:	6093      	str	r3, [r2, #8]
 8008494:	e03d      	b.n	8008512 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008496:	78fa      	ldrb	r2, [r7, #3]
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	4613      	mov	r3, r2
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	440b      	add	r3, r1
 80084a4:	3326      	adds	r3, #38	@ 0x26
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d00a      	beq.n	80084c2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80084ac:	78fa      	ldrb	r2, [r7, #3]
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	4613      	mov	r3, r2
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	440b      	add	r3, r1
 80084ba:	3326      	adds	r3, #38	@ 0x26
 80084bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d127      	bne.n	8008512 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084e0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	4613      	mov	r3, r2
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	440b      	add	r3, r1
 80084f0:	334c      	adds	r3, #76	@ 0x4c
 80084f2:	2201      	movs	r2, #1
 80084f4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	334c      	adds	r3, #76	@ 0x4c
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f012 fce5 	bl	801aedc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	799b      	ldrb	r3, [r3, #6]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d13b      	bne.n	8008592 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	4613      	mov	r3, r2
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	3338      	adds	r3, #56	@ 0x38
 800852a:	6819      	ldr	r1, [r3, #0]
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	1a9b      	subs	r3, r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4403      	add	r3, r0
 800853a:	3328      	adds	r3, #40	@ 0x28
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	440b      	add	r3, r1
 8008540:	1e59      	subs	r1, r3, #1
 8008542:	78fa      	ldrb	r2, [r7, #3]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	4613      	mov	r3, r2
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4403      	add	r3, r0
 8008550:	3328      	adds	r3, #40	@ 0x28
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	fbb1 f3f3 	udiv	r3, r1, r3
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 8470 	beq.w	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008562:	78fa      	ldrb	r2, [r7, #3]
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	4613      	mov	r3, r2
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	333c      	adds	r3, #60	@ 0x3c
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	78fa      	ldrb	r2, [r7, #3]
 8008576:	f083 0301 	eor.w	r3, r3, #1
 800857a:	b2d8      	uxtb	r0, r3
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	333c      	adds	r3, #60	@ 0x3c
 800858a:	4602      	mov	r2, r0
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	f000 bc58 	b.w	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	333c      	adds	r3, #60	@ 0x3c
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	78fa      	ldrb	r2, [r7, #3]
 80085a6:	f083 0301 	eor.w	r3, r3, #1
 80085aa:	b2d8      	uxtb	r0, r3
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	333c      	adds	r3, #60	@ 0x3c
 80085ba:	4602      	mov	r2, r0
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	f000 bc40 	b.w	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f008 ffbf 	bl	801154e <USB_ReadChInterrupts>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	d131      	bne.n	800863e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085e6:	461a      	mov	r2, r3
 80085e8:	2320      	movs	r3, #32
 80085ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80085ec:	78fa      	ldrb	r2, [r7, #3]
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	4613      	mov	r3, r2
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	440b      	add	r3, r1
 80085fa:	331a      	adds	r3, #26
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	f040 841f 	bne.w	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	1a9b      	subs	r3, r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	331b      	adds	r3, #27
 8008614:	2201      	movs	r2, #1
 8008616:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008618:	78fa      	ldrb	r2, [r7, #3]
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	4613      	mov	r3, r2
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	440b      	add	r3, r1
 8008626:	334d      	adds	r3, #77	@ 0x4d
 8008628:	2203      	movs	r2, #3
 800862a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f009 fd28 	bl	801208a <USB_HC_Halt>
 800863a:	f000 bc02 	b.w	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f008 ff81 	bl	801154e <USB_ReadChInterrupts>
 800864c:	4603      	mov	r3, r0
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b02      	cmp	r3, #2
 8008654:	f040 8305 	bne.w	8008c62 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	4413      	add	r3, r2
 8008660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008664:	461a      	mov	r2, r3
 8008666:	2302      	movs	r3, #2
 8008668:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	334d      	adds	r3, #77	@ 0x4d
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d114      	bne.n	80086aa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008680:	78fa      	ldrb	r2, [r7, #3]
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	4613      	mov	r3, r2
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	440b      	add	r3, r1
 800868e:	334d      	adds	r3, #77	@ 0x4d
 8008690:	2202      	movs	r2, #2
 8008692:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008694:	78fa      	ldrb	r2, [r7, #3]
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	4613      	mov	r3, r2
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	1a9b      	subs	r3, r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	440b      	add	r3, r1
 80086a2:	334c      	adds	r3, #76	@ 0x4c
 80086a4:	2201      	movs	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]
 80086a8:	e2cc      	b.n	8008c44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	4613      	mov	r3, r2
 80086b0:	011b      	lsls	r3, r3, #4
 80086b2:	1a9b      	subs	r3, r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	440b      	add	r3, r1
 80086b8:	334d      	adds	r3, #77	@ 0x4d
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b06      	cmp	r3, #6
 80086be:	d114      	bne.n	80086ea <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	334d      	adds	r3, #77	@ 0x4d
 80086d0:	2202      	movs	r2, #2
 80086d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	334c      	adds	r3, #76	@ 0x4c
 80086e4:	2205      	movs	r2, #5
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e2ac      	b.n	8008c44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	334d      	adds	r3, #77	@ 0x4d
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b07      	cmp	r3, #7
 80086fe:	d00b      	beq.n	8008718 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	4613      	mov	r3, r2
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	334d      	adds	r3, #77	@ 0x4d
 8008710:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008712:	2b09      	cmp	r3, #9
 8008714:	f040 80a6 	bne.w	8008864 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008718:	78fa      	ldrb	r2, [r7, #3]
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	334d      	adds	r3, #77	@ 0x4d
 8008728:	2202      	movs	r2, #2
 800872a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800872c:	78fa      	ldrb	r2, [r7, #3]
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4613      	mov	r3, r2
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	1a9b      	subs	r3, r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	3344      	adds	r3, #68	@ 0x44
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	1c59      	adds	r1, r3, #1
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4403      	add	r3, r0
 800874c:	3344      	adds	r3, #68	@ 0x44
 800874e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	4613      	mov	r3, r2
 8008756:	011b      	lsls	r3, r3, #4
 8008758:	1a9b      	subs	r3, r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	440b      	add	r3, r1
 800875e:	3344      	adds	r3, #68	@ 0x44
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d943      	bls.n	80087ee <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	3344      	adds	r3, #68	@ 0x44
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4613      	mov	r3, r2
 8008780:	011b      	lsls	r3, r3, #4
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	331a      	adds	r3, #26
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d123      	bne.n	80087d8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	4613      	mov	r3, r2
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	1a9b      	subs	r3, r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	331b      	adds	r3, #27
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80087a4:	78fa      	ldrb	r2, [r7, #3]
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	331c      	adds	r3, #28
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	78fa      	ldrb	r2, [r7, #3]
 80087c8:	0151      	lsls	r1, r2, #5
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	440a      	add	r2, r1
 80087ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087d6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80087d8:	78fa      	ldrb	r2, [r7, #3]
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	4613      	mov	r3, r2
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	334c      	adds	r3, #76	@ 0x4c
 80087e8:	2204      	movs	r2, #4
 80087ea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80087ec:	e229      	b.n	8008c42 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	334c      	adds	r3, #76	@ 0x4c
 80087fe:	2202      	movs	r2, #2
 8008800:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3326      	adds	r3, #38	@ 0x26
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	3326      	adds	r3, #38	@ 0x26
 8008828:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800882a:	2b02      	cmp	r3, #2
 800882c:	f040 8209 	bne.w	8008c42 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008830:	78fb      	ldrb	r3, [r7, #3]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	4413      	add	r3, r2
 8008838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008846:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800884e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	4413      	add	r3, r2
 8008858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800885c:	461a      	mov	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008862:	e1ee      	b.n	8008c42 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4613      	mov	r3, r2
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	440b      	add	r3, r1
 8008872:	334d      	adds	r3, #77	@ 0x4d
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b05      	cmp	r3, #5
 8008878:	f040 80c8 	bne.w	8008a0c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	4613      	mov	r3, r2
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	440b      	add	r3, r1
 800888a:	334d      	adds	r3, #77	@ 0x4d
 800888c:	2202      	movs	r2, #2
 800888e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4613      	mov	r3, r2
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	331b      	adds	r3, #27
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	f040 81ce 	bne.w	8008c44 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	3326      	adds	r3, #38	@ 0x26
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d16b      	bne.n	8008996 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	440b      	add	r3, r1
 80088cc:	3348      	adds	r3, #72	@ 0x48
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	1c59      	adds	r1, r3, #1
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4403      	add	r3, r0
 80088de:	3348      	adds	r3, #72	@ 0x48
 80088e0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	4613      	mov	r3, r2
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	440b      	add	r3, r1
 80088f0:	3348      	adds	r3, #72	@ 0x48
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d943      	bls.n	8008980 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	3348      	adds	r3, #72	@ 0x48
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4613      	mov	r3, r2
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	331b      	adds	r3, #27
 800891c:	2200      	movs	r2, #0
 800891e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8008920:	78fa      	ldrb	r2, [r7, #3]
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	3344      	adds	r3, #68	@ 0x44
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d809      	bhi.n	800894a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008936:	78fa      	ldrb	r2, [r7, #3]
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	4613      	mov	r3, r2
 800893c:	011b      	lsls	r3, r3, #4
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	440b      	add	r3, r1
 8008944:	331c      	adds	r3, #28
 8008946:	2201      	movs	r2, #1
 8008948:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	440a      	add	r2, r1
 8008960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008968:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	011b      	lsls	r3, r3, #4
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	334c      	adds	r3, #76	@ 0x4c
 800897a:	2204      	movs	r2, #4
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	e014      	b.n	80089aa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	4613      	mov	r3, r2
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	334c      	adds	r3, #76	@ 0x4c
 8008990:	2202      	movs	r2, #2
 8008992:	701a      	strb	r2, [r3, #0]
 8008994:	e009      	b.n	80089aa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	334c      	adds	r3, #76	@ 0x4c
 80089a6:	2202      	movs	r2, #2
 80089a8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	3326      	adds	r3, #38	@ 0x26
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	4613      	mov	r3, r2
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	3326      	adds	r3, #38	@ 0x26
 80089d0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	f040 8136 	bne.w	8008c44 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a04:	461a      	mov	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	e11b      	b.n	8008c44 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	4613      	mov	r3, r2
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	440b      	add	r3, r1
 8008a1a:	334d      	adds	r3, #77	@ 0x4d
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	f040 8081 	bne.w	8008b26 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008a24:	78fa      	ldrb	r2, [r7, #3]
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	011b      	lsls	r3, r3, #4
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	334d      	adds	r3, #77	@ 0x4d
 8008a34:	2202      	movs	r2, #2
 8008a36:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	6879      	ldr	r1, [r7, #4]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	440b      	add	r3, r1
 8008a46:	331b      	adds	r3, #27
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	f040 80fa 	bne.w	8008c44 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008a50:	78fa      	ldrb	r2, [r7, #3]
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	4613      	mov	r3, r2
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	1a9b      	subs	r3, r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	334c      	adds	r3, #76	@ 0x4c
 8008a60:	2202      	movs	r2, #2
 8008a62:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	78fa      	ldrb	r2, [r7, #3]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a82:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	78fa      	ldrb	r2, [r7, #3]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	78fa      	ldrb	r2, [r7, #3]
 8008ab4:	0151      	lsls	r1, r2, #5
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	440a      	add	r2, r1
 8008aba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008abe:	f023 0320 	bic.w	r3, r3, #32
 8008ac2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008ac4:	78fa      	ldrb	r2, [r7, #3]
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	440b      	add	r3, r1
 8008ad2:	3326      	adds	r3, #38	@ 0x26
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00b      	beq.n	8008af2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	3326      	adds	r3, #38	@ 0x26
 8008aea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	f040 80a9 	bne.w	8008c44 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b08:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b10:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	e08e      	b.n	8008c44 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	011b      	lsls	r3, r3, #4
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	440b      	add	r3, r1
 8008b34:	334d      	adds	r3, #77	@ 0x4d
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b04      	cmp	r3, #4
 8008b3a:	d143      	bne.n	8008bc4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4613      	mov	r3, r2
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	1a9b      	subs	r3, r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	334d      	adds	r3, #77	@ 0x4d
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008b50:	78fa      	ldrb	r2, [r7, #3]
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	1a9b      	subs	r3, r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	334c      	adds	r3, #76	@ 0x4c
 8008b60:	2202      	movs	r2, #2
 8008b62:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	011b      	lsls	r3, r3, #4
 8008b6c:	1a9b      	subs	r3, r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	3326      	adds	r3, #38	@ 0x26
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	3326      	adds	r3, #38	@ 0x26
 8008b8a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d159      	bne.n	8008c44 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ba6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bae:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6013      	str	r3, [r2, #0]
 8008bc2:	e03f      	b.n	8008c44 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8008bc4:	78fa      	ldrb	r2, [r7, #3]
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	334d      	adds	r3, #77	@ 0x4d
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b08      	cmp	r3, #8
 8008bd8:	d126      	bne.n	8008c28 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	4613      	mov	r3, r2
 8008be0:	011b      	lsls	r3, r3, #4
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	440b      	add	r3, r1
 8008be8:	334d      	adds	r3, #77	@ 0x4d
 8008bea:	2202      	movs	r2, #2
 8008bec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	1a9b      	subs	r3, r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	3344      	adds	r3, #68	@ 0x44
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	1c59      	adds	r1, r3, #1
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	4613      	mov	r3, r2
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4403      	add	r3, r0
 8008c0e:	3344      	adds	r3, #68	@ 0x44
 8008c10:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	334c      	adds	r3, #76	@ 0x4c
 8008c22:	2204      	movs	r2, #4
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	e00d      	b.n	8008c44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	011b      	lsls	r3, r3, #4
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	334d      	adds	r3, #77	@ 0x4d
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	f000 8100 	beq.w	8008e40 <HCD_HC_IN_IRQHandler+0xcca>
 8008c40:	e000      	b.n	8008c44 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008c42:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008c44:	78fa      	ldrb	r2, [r7, #3]
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	1a9b      	subs	r3, r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	440b      	add	r3, r1
 8008c52:	334c      	adds	r3, #76	@ 0x4c
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	78fb      	ldrb	r3, [r7, #3]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f012 f93e 	bl	801aedc <HAL_HCD_HC_NotifyURBChange_Callback>
 8008c60:	e0ef      	b.n	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f008 fc6f 	bl	801154e <USB_ReadChInterrupts>
 8008c70:	4603      	mov	r3, r0
 8008c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c76:	2b40      	cmp	r3, #64	@ 0x40
 8008c78:	d12f      	bne.n	8008cda <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c86:	461a      	mov	r2, r3
 8008c88:	2340      	movs	r3, #64	@ 0x40
 8008c8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008c8c:	78fa      	ldrb	r2, [r7, #3]
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	011b      	lsls	r3, r3, #4
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	334d      	adds	r3, #77	@ 0x4d
 8008c9c:	2205      	movs	r2, #5
 8008c9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008ca0:	78fa      	ldrb	r2, [r7, #3]
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	331a      	adds	r3, #26
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d109      	bne.n	8008cca <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008cb6:	78fa      	ldrb	r2, [r7, #3]
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	3344      	adds	r3, #68	@ 0x44
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	78fa      	ldrb	r2, [r7, #3]
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f009 f9d9 	bl	801208a <USB_HC_Halt>
 8008cd8:	e0b3      	b.n	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	78fa      	ldrb	r2, [r7, #3]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f008 fc33 	bl	801154e <USB_ReadChInterrupts>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	f003 0310 	and.w	r3, r3, #16
 8008cee:	2b10      	cmp	r3, #16
 8008cf0:	f040 80a7 	bne.w	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008cf4:	78fa      	ldrb	r2, [r7, #3]
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	1a9b      	subs	r3, r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	3326      	adds	r3, #38	@ 0x26
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d11b      	bne.n	8008d42 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	3344      	adds	r3, #68	@ 0x44
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008d1e:	78fa      	ldrb	r2, [r7, #3]
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	1a9b      	subs	r3, r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	334d      	adds	r3, #77	@ 0x4d
 8008d2e:	2204      	movs	r2, #4
 8008d30:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	4611      	mov	r1, r2
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f009 f9a5 	bl	801208a <USB_HC_Halt>
 8008d40:	e03f      	b.n	8008dc2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	6879      	ldr	r1, [r7, #4]
 8008d46:	4613      	mov	r3, r2
 8008d48:	011b      	lsls	r3, r3, #4
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	440b      	add	r3, r1
 8008d50:	3326      	adds	r3, #38	@ 0x26
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00a      	beq.n	8008d6e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008d58:	78fa      	ldrb	r2, [r7, #3]
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	1a9b      	subs	r3, r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	440b      	add	r3, r1
 8008d66:	3326      	adds	r3, #38	@ 0x26
 8008d68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d129      	bne.n	8008dc2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	4613      	mov	r3, r2
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	440b      	add	r3, r1
 8008d7c:	3344      	adds	r3, #68	@ 0x44
 8008d7e:	2200      	movs	r2, #0
 8008d80:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	799b      	ldrb	r3, [r3, #6]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <HCD_HC_IN_IRQHandler+0xc2a>
 8008d8a:	78fa      	ldrb	r2, [r7, #3]
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	331b      	adds	r3, #27
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d110      	bne.n	8008dc2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008da0:	78fa      	ldrb	r2, [r7, #3]
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4613      	mov	r3, r2
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	440b      	add	r3, r1
 8008dae:	334d      	adds	r3, #77	@ 0x4d
 8008db0:	2204      	movs	r2, #4
 8008db2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	4611      	mov	r1, r2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f009 f964 	bl	801208a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008dc2:	78fa      	ldrb	r2, [r7, #3]
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	011b      	lsls	r3, r3, #4
 8008dca:	1a9b      	subs	r3, r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	331b      	adds	r3, #27
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d129      	bne.n	8008e2c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	331b      	adds	r3, #27
 8008de8:	2200      	movs	r2, #0
 8008dea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	78fa      	ldrb	r2, [r7, #3]
 8008dfc:	0151      	lsls	r1, r2, #5
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	440a      	add	r2, r1
 8008e02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e0a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	78fa      	ldrb	r2, [r7, #3]
 8008e1c:	0151      	lsls	r1, r2, #5
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	440a      	add	r2, r1
 8008e22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e26:	f043 0320 	orr.w	r3, r3, #32
 8008e2a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e38:	461a      	mov	r2, r3
 8008e3a:	2310      	movs	r3, #16
 8008e3c:	6093      	str	r3, [r2, #8]
 8008e3e:	e000      	b.n	8008e42 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008e40:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f008 fb71 	bl	801154e <USB_ReadChInterrupts>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d11b      	bne.n	8008eae <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e82:	461a      	mov	r2, r3
 8008e84:	2304      	movs	r3, #4
 8008e86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	440b      	add	r3, r1
 8008e96:	334d      	adds	r3, #77	@ 0x4d
 8008e98:	2207      	movs	r2, #7
 8008e9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	78fa      	ldrb	r2, [r7, #3]
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f009 f8f0 	bl	801208a <USB_HC_Halt>
 8008eaa:	f000 bc89 	b.w	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	78fa      	ldrb	r2, [r7, #3]
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f008 fb49 	bl	801154e <USB_ReadChInterrupts>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	f040 8082 	bne.w	8008fcc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008ec8:	78fb      	ldrb	r3, [r7, #3]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	011b      	lsls	r3, r3, #4
 8008ee2:	1a9b      	subs	r3, r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	440b      	add	r3, r1
 8008ee8:	3319      	adds	r3, #25
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d124      	bne.n	8008f3a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	3319      	adds	r3, #25
 8008f00:	2200      	movs	r2, #0
 8008f02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f04:	78fa      	ldrb	r2, [r7, #3]
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	1a9b      	subs	r3, r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	440b      	add	r3, r1
 8008f12:	334c      	adds	r3, #76	@ 0x4c
 8008f14:	2202      	movs	r2, #2
 8008f16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	440b      	add	r3, r1
 8008f26:	334d      	adds	r3, #77	@ 0x4d
 8008f28:	2203      	movs	r2, #3
 8008f2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f009 f8a8 	bl	801208a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8008f3a:	78fa      	ldrb	r2, [r7, #3]
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	440b      	add	r3, r1
 8008f48:	331a      	adds	r3, #26
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	f040 8437 	bne.w	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
 8008f52:	78fa      	ldrb	r2, [r7, #3]
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	4613      	mov	r3, r2
 8008f58:	011b      	lsls	r3, r3, #4
 8008f5a:	1a9b      	subs	r3, r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	440b      	add	r3, r1
 8008f60:	331b      	adds	r3, #27
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f040 842b 	bne.w	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	1a9b      	subs	r3, r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	3326      	adds	r3, #38	@ 0x26
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d009      	beq.n	8008f94 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	6879      	ldr	r1, [r7, #4]
 8008f84:	4613      	mov	r3, r2
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	331b      	adds	r3, #27
 8008f90:	2201      	movs	r2, #1
 8008f92:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008f94:	78fa      	ldrb	r2, [r7, #3]
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	334d      	adds	r3, #77	@ 0x4d
 8008fa4:	2203      	movs	r2, #3
 8008fa6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	78fa      	ldrb	r2, [r7, #3]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f009 f86a 	bl	801208a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008fb6:	78fa      	ldrb	r2, [r7, #3]
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	3344      	adds	r3, #68	@ 0x44
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	e3f9      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f008 faba 	bl	801154e <USB_ReadChInterrupts>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fe4:	d111      	bne.n	800900a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ff8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	4611      	mov	r1, r2
 8009002:	4618      	mov	r0, r3
 8009004:	f009 f841 	bl	801208a <USB_HC_Halt>
 8009008:	e3da      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	78fa      	ldrb	r2, [r7, #3]
 8009010:	4611      	mov	r1, r2
 8009012:	4618      	mov	r0, r3
 8009014:	f008 fa9b 	bl	801154e <USB_ReadChInterrupts>
 8009018:	4603      	mov	r3, r0
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b01      	cmp	r3, #1
 8009020:	d168      	bne.n	80090f4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009022:	78fa      	ldrb	r2, [r7, #3]
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	4613      	mov	r3, r2
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	440b      	add	r3, r1
 8009030:	3344      	adds	r3, #68	@ 0x44
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	78fa      	ldrb	r2, [r7, #3]
 800903c:	4611      	mov	r1, r2
 800903e:	4618      	mov	r0, r3
 8009040:	f008 fa85 	bl	801154e <USB_ReadChInterrupts>
 8009044:	4603      	mov	r3, r0
 8009046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904a:	2b40      	cmp	r3, #64	@ 0x40
 800904c:	d112      	bne.n	8009074 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	4613      	mov	r3, r2
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	440b      	add	r3, r1
 800905c:	3319      	adds	r3, #25
 800905e:	2201      	movs	r2, #1
 8009060:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	4413      	add	r3, r2
 800906a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800906e:	461a      	mov	r2, r3
 8009070:	2340      	movs	r3, #64	@ 0x40
 8009072:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8009074:	78fa      	ldrb	r2, [r7, #3]
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	4613      	mov	r3, r2
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	1a9b      	subs	r3, r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	440b      	add	r3, r1
 8009082:	331b      	adds	r3, #27
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d019      	beq.n	80090be <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800908a:	78fa      	ldrb	r2, [r7, #3]
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	011b      	lsls	r3, r3, #4
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	440b      	add	r3, r1
 8009098:	331b      	adds	r3, #27
 800909a:	2200      	movs	r2, #0
 800909c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	0151      	lsls	r1, r2, #5
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	440a      	add	r2, r1
 80090b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090bc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090ca:	461a      	mov	r2, r3
 80090cc:	2301      	movs	r3, #1
 80090ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	011b      	lsls	r3, r3, #4
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	334d      	adds	r3, #77	@ 0x4d
 80090e0:	2201      	movs	r2, #1
 80090e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	78fa      	ldrb	r2, [r7, #3]
 80090ea:	4611      	mov	r1, r2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f008 ffcc 	bl	801208a <USB_HC_Halt>
 80090f2:	e365      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	4611      	mov	r1, r2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f008 fa26 	bl	801154e <USB_ReadChInterrupts>
 8009102:	4603      	mov	r3, r0
 8009104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009108:	2b40      	cmp	r3, #64	@ 0x40
 800910a:	d139      	bne.n	8009180 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800910c:	78fa      	ldrb	r2, [r7, #3]
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	4613      	mov	r3, r2
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	1a9b      	subs	r3, r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	334d      	adds	r3, #77	@ 0x4d
 800911c:	2205      	movs	r2, #5
 800911e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	4613      	mov	r3, r2
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	331a      	adds	r3, #26
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d109      	bne.n	800914a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	3319      	adds	r3, #25
 8009146:	2201      	movs	r2, #1
 8009148:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800914a:	78fa      	ldrb	r2, [r7, #3]
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	4613      	mov	r3, r2
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	440b      	add	r3, r1
 8009158:	3344      	adds	r3, #68	@ 0x44
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f008 ff8f 	bl	801208a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4413      	add	r3, r2
 8009174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009178:	461a      	mov	r2, r3
 800917a:	2340      	movs	r3, #64	@ 0x40
 800917c:	6093      	str	r3, [r2, #8]
 800917e:	e31f      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	4611      	mov	r1, r2
 8009188:	4618      	mov	r0, r3
 800918a:	f008 f9e0 	bl	801154e <USB_ReadChInterrupts>
 800918e:	4603      	mov	r3, r0
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b08      	cmp	r3, #8
 8009196:	d11a      	bne.n	80091ce <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091a4:	461a      	mov	r2, r3
 80091a6:	2308      	movs	r3, #8
 80091a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	4613      	mov	r3, r2
 80091b0:	011b      	lsls	r3, r3, #4
 80091b2:	1a9b      	subs	r3, r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	440b      	add	r3, r1
 80091b8:	334d      	adds	r3, #77	@ 0x4d
 80091ba:	2206      	movs	r2, #6
 80091bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	78fa      	ldrb	r2, [r7, #3]
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f008 ff5f 	bl	801208a <USB_HC_Halt>
 80091cc:	e2f8      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f008 f9b9 	bl	801154e <USB_ReadChInterrupts>
 80091dc:	4603      	mov	r3, r0
 80091de:	f003 0310 	and.w	r3, r3, #16
 80091e2:	2b10      	cmp	r3, #16
 80091e4:	d144      	bne.n	8009270 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80091e6:	78fa      	ldrb	r2, [r7, #3]
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	011b      	lsls	r3, r3, #4
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	3344      	adds	r3, #68	@ 0x44
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	334d      	adds	r3, #77	@ 0x4d
 800920a:	2204      	movs	r2, #4
 800920c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800920e:	78fa      	ldrb	r2, [r7, #3]
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	011b      	lsls	r3, r3, #4
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	3319      	adds	r3, #25
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d114      	bne.n	800924e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009224:	78fa      	ldrb	r2, [r7, #3]
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	4613      	mov	r3, r2
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	1a9b      	subs	r3, r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	440b      	add	r3, r1
 8009232:	3318      	adds	r3, #24
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	4613      	mov	r3, r2
 8009240:	011b      	lsls	r3, r3, #4
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	3319      	adds	r3, #25
 800924a:	2201      	movs	r2, #1
 800924c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f008 ff17 	bl	801208a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	4413      	add	r3, r2
 8009264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009268:	461a      	mov	r2, r3
 800926a:	2310      	movs	r3, #16
 800926c:	6093      	str	r3, [r2, #8]
 800926e:	e2a7      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f008 f968 	bl	801154e <USB_ReadChInterrupts>
 800927e:	4603      	mov	r3, r0
 8009280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009284:	2b80      	cmp	r3, #128	@ 0x80
 8009286:	f040 8083 	bne.w	8009390 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	799b      	ldrb	r3, [r3, #6]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d111      	bne.n	80092b6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009292:	78fa      	ldrb	r2, [r7, #3]
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	4613      	mov	r3, r2
 8009298:	011b      	lsls	r3, r3, #4
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	440b      	add	r3, r1
 80092a0:	334d      	adds	r3, #77	@ 0x4d
 80092a2:	2207      	movs	r2, #7
 80092a4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	78fa      	ldrb	r2, [r7, #3]
 80092ac:	4611      	mov	r1, r2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f008 feeb 	bl	801208a <USB_HC_Halt>
 80092b4:	e062      	b.n	800937c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	4613      	mov	r3, r2
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	1a9b      	subs	r3, r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	440b      	add	r3, r1
 80092c4:	3344      	adds	r3, #68	@ 0x44
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	1c59      	adds	r1, r3, #1
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4613      	mov	r3, r2
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4403      	add	r3, r0
 80092d6:	3344      	adds	r3, #68	@ 0x44
 80092d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	1a9b      	subs	r3, r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	440b      	add	r3, r1
 80092e8:	3344      	adds	r3, #68	@ 0x44
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d922      	bls.n	8009336 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4613      	mov	r3, r2
 80092f6:	011b      	lsls	r3, r3, #4
 80092f8:	1a9b      	subs	r3, r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	440b      	add	r3, r1
 80092fe:	3344      	adds	r3, #68	@ 0x44
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4613      	mov	r3, r2
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	1a9b      	subs	r3, r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	440b      	add	r3, r1
 8009312:	334c      	adds	r3, #76	@ 0x4c
 8009314:	2204      	movs	r2, #4
 8009316:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	4613      	mov	r3, r2
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	1a9b      	subs	r3, r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	440b      	add	r3, r1
 8009326:	334c      	adds	r3, #76	@ 0x4c
 8009328:	781a      	ldrb	r2, [r3, #0]
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f011 fdd4 	bl	801aedc <HAL_HCD_HC_NotifyURBChange_Callback>
 8009334:	e022      	b.n	800937c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	334c      	adds	r3, #76	@ 0x4c
 8009346:	2202      	movs	r2, #2
 8009348:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	4413      	add	r3, r2
 8009352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009360:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009368:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	4413      	add	r3, r2
 8009372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009376:	461a      	mov	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	4413      	add	r3, r2
 8009384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009388:	461a      	mov	r2, r3
 800938a:	2380      	movs	r3, #128	@ 0x80
 800938c:	6093      	str	r3, [r2, #8]
 800938e:	e217      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f008 f8d8 	bl	801154e <USB_ReadChInterrupts>
 800939e:	4603      	mov	r3, r0
 80093a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093a8:	d11b      	bne.n	80093e2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	334d      	adds	r3, #77	@ 0x4d
 80093ba:	2209      	movs	r2, #9
 80093bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f008 fe5f 	bl	801208a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093d8:	461a      	mov	r2, r3
 80093da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093de:	6093      	str	r3, [r2, #8]
 80093e0:	e1ee      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f008 f8af 	bl	801154e <USB_ReadChInterrupts>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	f040 81df 	bne.w	80097ba <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009408:	461a      	mov	r2, r3
 800940a:	2302      	movs	r3, #2
 800940c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	011b      	lsls	r3, r3, #4
 8009416:	1a9b      	subs	r3, r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	334d      	adds	r3, #77	@ 0x4d
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b01      	cmp	r3, #1
 8009422:	f040 8093 	bne.w	800954c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	334d      	adds	r3, #77	@ 0x4d
 8009436:	2202      	movs	r2, #2
 8009438:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	1a9b      	subs	r3, r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	334c      	adds	r3, #76	@ 0x4c
 800944a:	2201      	movs	r2, #1
 800944c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3326      	adds	r3, #38	@ 0x26
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d00b      	beq.n	800947c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4613      	mov	r3, r2
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	3326      	adds	r3, #38	@ 0x26
 8009474:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009476:	2b03      	cmp	r3, #3
 8009478:	f040 8190 	bne.w	800979c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	799b      	ldrb	r3, [r3, #6]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d115      	bne.n	80094b0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009484:	78fa      	ldrb	r2, [r7, #3]
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	4613      	mov	r3, r2
 800948a:	011b      	lsls	r3, r3, #4
 800948c:	1a9b      	subs	r3, r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	333d      	adds	r3, #61	@ 0x3d
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	78fa      	ldrb	r2, [r7, #3]
 8009498:	f083 0301 	eor.w	r3, r3, #1
 800949c:	b2d8      	uxtb	r0, r3
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	333d      	adds	r3, #61	@ 0x3d
 80094ac:	4602      	mov	r2, r0
 80094ae:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	799b      	ldrb	r3, [r3, #6]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	f040 8171 	bne.w	800979c <HCD_HC_OUT_IRQHandler+0x954>
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	3334      	adds	r3, #52	@ 0x34
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8165 	beq.w	800979c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80094d2:	78fa      	ldrb	r2, [r7, #3]
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	4613      	mov	r3, r2
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	1a9b      	subs	r3, r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	440b      	add	r3, r1
 80094e0:	3334      	adds	r3, #52	@ 0x34
 80094e2:	6819      	ldr	r1, [r3, #0]
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4613      	mov	r3, r2
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	1a9b      	subs	r3, r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4403      	add	r3, r0
 80094f2:	3328      	adds	r3, #40	@ 0x28
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	440b      	add	r3, r1
 80094f8:	1e59      	subs	r1, r3, #1
 80094fa:	78fa      	ldrb	r2, [r7, #3]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	4613      	mov	r3, r2
 8009500:	011b      	lsls	r3, r3, #4
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4403      	add	r3, r0
 8009508:	3328      	adds	r3, #40	@ 0x28
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009510:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 813f 	beq.w	800979c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800951e:	78fa      	ldrb	r2, [r7, #3]
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	4613      	mov	r3, r2
 8009524:	011b      	lsls	r3, r3, #4
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	440b      	add	r3, r1
 800952c:	333d      	adds	r3, #61	@ 0x3d
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	f083 0301 	eor.w	r3, r3, #1
 8009536:	b2d8      	uxtb	r0, r3
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	011b      	lsls	r3, r3, #4
 800953e:	1a9b      	subs	r3, r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	440b      	add	r3, r1
 8009544:	333d      	adds	r3, #61	@ 0x3d
 8009546:	4602      	mov	r2, r0
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	e127      	b.n	800979c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800954c:	78fa      	ldrb	r2, [r7, #3]
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4613      	mov	r3, r2
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	334d      	adds	r3, #77	@ 0x4d
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b03      	cmp	r3, #3
 8009560:	d120      	bne.n	80095a4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	334d      	adds	r3, #77	@ 0x4d
 8009572:	2202      	movs	r2, #2
 8009574:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	1a9b      	subs	r3, r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	440b      	add	r3, r1
 8009584:	331b      	adds	r3, #27
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b01      	cmp	r3, #1
 800958a:	f040 8107 	bne.w	800979c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	1a9b      	subs	r3, r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	334c      	adds	r3, #76	@ 0x4c
 800959e:	2202      	movs	r2, #2
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	e0fb      	b.n	800979c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4613      	mov	r3, r2
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	334d      	adds	r3, #77	@ 0x4d
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d13a      	bne.n	8009630 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	011b      	lsls	r3, r3, #4
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	334d      	adds	r3, #77	@ 0x4d
 80095ca:	2202      	movs	r2, #2
 80095cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80095ce:	78fa      	ldrb	r2, [r7, #3]
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	4613      	mov	r3, r2
 80095d4:	011b      	lsls	r3, r3, #4
 80095d6:	1a9b      	subs	r3, r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	440b      	add	r3, r1
 80095dc:	334c      	adds	r3, #76	@ 0x4c
 80095de:	2202      	movs	r2, #2
 80095e0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80095e2:	78fa      	ldrb	r2, [r7, #3]
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	1a9b      	subs	r3, r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	331b      	adds	r3, #27
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	f040 80d1 	bne.w	800979c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	011b      	lsls	r3, r3, #4
 8009602:	1a9b      	subs	r3, r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	331b      	adds	r3, #27
 800960a:	2200      	movs	r2, #0
 800960c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	4413      	add	r3, r2
 8009616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	78fa      	ldrb	r2, [r7, #3]
 800961e:	0151      	lsls	r1, r2, #5
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	440a      	add	r2, r1
 8009624:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800962c:	6053      	str	r3, [r2, #4]
 800962e:	e0b5      	b.n	800979c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009630:	78fa      	ldrb	r2, [r7, #3]
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	4613      	mov	r3, r2
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	1a9b      	subs	r3, r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	440b      	add	r3, r1
 800963e:	334d      	adds	r3, #77	@ 0x4d
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b05      	cmp	r3, #5
 8009644:	d114      	bne.n	8009670 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009646:	78fa      	ldrb	r2, [r7, #3]
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	011b      	lsls	r3, r3, #4
 800964e:	1a9b      	subs	r3, r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	334d      	adds	r3, #77	@ 0x4d
 8009656:	2202      	movs	r2, #2
 8009658:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800965a:	78fa      	ldrb	r2, [r7, #3]
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	011b      	lsls	r3, r3, #4
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	334c      	adds	r3, #76	@ 0x4c
 800966a:	2202      	movs	r2, #2
 800966c:	701a      	strb	r2, [r3, #0]
 800966e:	e095      	b.n	800979c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009670:	78fa      	ldrb	r2, [r7, #3]
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	4613      	mov	r3, r2
 8009676:	011b      	lsls	r3, r3, #4
 8009678:	1a9b      	subs	r3, r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	440b      	add	r3, r1
 800967e:	334d      	adds	r3, #77	@ 0x4d
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b06      	cmp	r3, #6
 8009684:	d114      	bne.n	80096b0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	334d      	adds	r3, #77	@ 0x4d
 8009696:	2202      	movs	r2, #2
 8009698:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	011b      	lsls	r3, r3, #4
 80096a2:	1a9b      	subs	r3, r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	440b      	add	r3, r1
 80096a8:	334c      	adds	r3, #76	@ 0x4c
 80096aa:	2205      	movs	r2, #5
 80096ac:	701a      	strb	r2, [r3, #0]
 80096ae:	e075      	b.n	800979c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4613      	mov	r3, r2
 80096b6:	011b      	lsls	r3, r3, #4
 80096b8:	1a9b      	subs	r3, r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	334d      	adds	r3, #77	@ 0x4d
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b07      	cmp	r3, #7
 80096c4:	d00a      	beq.n	80096dc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80096c6:	78fa      	ldrb	r2, [r7, #3]
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	4613      	mov	r3, r2
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	440b      	add	r3, r1
 80096d4:	334d      	adds	r3, #77	@ 0x4d
 80096d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80096d8:	2b09      	cmp	r3, #9
 80096da:	d170      	bne.n	80097be <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80096dc:	78fa      	ldrb	r2, [r7, #3]
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4613      	mov	r3, r2
 80096e2:	011b      	lsls	r3, r3, #4
 80096e4:	1a9b      	subs	r3, r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	334d      	adds	r3, #77	@ 0x4d
 80096ec:	2202      	movs	r2, #2
 80096ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80096f0:	78fa      	ldrb	r2, [r7, #3]
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	4613      	mov	r3, r2
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	1a9b      	subs	r3, r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	440b      	add	r3, r1
 80096fe:	3344      	adds	r3, #68	@ 0x44
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	1c59      	adds	r1, r3, #1
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4613      	mov	r3, r2
 8009708:	011b      	lsls	r3, r3, #4
 800970a:	1a9b      	subs	r3, r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4403      	add	r3, r0
 8009710:	3344      	adds	r3, #68	@ 0x44
 8009712:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009714:	78fa      	ldrb	r2, [r7, #3]
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4613      	mov	r3, r2
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	1a9b      	subs	r3, r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	3344      	adds	r3, #68	@ 0x44
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b02      	cmp	r3, #2
 8009728:	d914      	bls.n	8009754 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	4613      	mov	r3, r2
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	1a9b      	subs	r3, r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	440b      	add	r3, r1
 8009738:	3344      	adds	r3, #68	@ 0x44
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	6879      	ldr	r1, [r7, #4]
 8009742:	4613      	mov	r3, r2
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	440b      	add	r3, r1
 800974c:	334c      	adds	r3, #76	@ 0x4c
 800974e:	2204      	movs	r2, #4
 8009750:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009752:	e022      	b.n	800979a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	4613      	mov	r3, r2
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	1a9b      	subs	r3, r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	440b      	add	r3, r1
 8009762:	334c      	adds	r3, #76	@ 0x4c
 8009764:	2202      	movs	r2, #2
 8009766:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	4413      	add	r3, r2
 8009770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800977e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009786:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	4413      	add	r3, r2
 8009790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009794:	461a      	mov	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800979a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800979c:	78fa      	ldrb	r2, [r7, #3]
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	4613      	mov	r3, r2
 80097a2:	011b      	lsls	r3, r3, #4
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	440b      	add	r3, r1
 80097aa:	334c      	adds	r3, #76	@ 0x4c
 80097ac:	781a      	ldrb	r2, [r3, #0]
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f011 fb92 	bl	801aedc <HAL_HCD_HC_NotifyURBChange_Callback>
 80097b8:	e002      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80097ba:	bf00      	nop
 80097bc:	e000      	b.n	80097c0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80097be:	bf00      	nop
  }
}
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b08a      	sub	sp, #40	@ 0x28
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f003 030f 	and.w	r3, r3, #15
 80097e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	0c5b      	lsrs	r3, r3, #17
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	091b      	lsrs	r3, r3, #4
 80097f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d004      	beq.n	800980c <HCD_RXQLVL_IRQHandler+0x46>
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b05      	cmp	r3, #5
 8009806:	f000 80b6 	beq.w	8009976 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800980a:	e0b7      	b.n	800997c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 80b3 	beq.w	800997a <HCD_RXQLVL_IRQHandler+0x1b4>
 8009814:	6879      	ldr	r1, [r7, #4]
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	4613      	mov	r3, r2
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	332c      	adds	r3, #44	@ 0x2c
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 80a7 	beq.w	800997a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	69ba      	ldr	r2, [r7, #24]
 8009830:	4613      	mov	r3, r2
 8009832:	011b      	lsls	r3, r3, #4
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	3338      	adds	r3, #56	@ 0x38
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	18d1      	adds	r1, r2, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	4613      	mov	r3, r2
 8009848:	011b      	lsls	r3, r3, #4
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4403      	add	r3, r0
 8009850:	3334      	adds	r3, #52	@ 0x34
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4299      	cmp	r1, r3
 8009856:	f200 8083 	bhi.w	8009960 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	4613      	mov	r3, r2
 8009864:	011b      	lsls	r3, r3, #4
 8009866:	1a9b      	subs	r3, r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	440b      	add	r3, r1
 800986c:	332c      	adds	r3, #44	@ 0x2c
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	b292      	uxth	r2, r2
 8009874:	4619      	mov	r1, r3
 8009876:	f007 fdff 	bl	8011478 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	4613      	mov	r3, r2
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	332c      	adds	r3, #44	@ 0x2c
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	18d1      	adds	r1, r2, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	4613      	mov	r3, r2
 8009896:	011b      	lsls	r3, r3, #4
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4403      	add	r3, r0
 800989e:	332c      	adds	r3, #44	@ 0x2c
 80098a0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	4613      	mov	r3, r2
 80098a8:	011b      	lsls	r3, r3, #4
 80098aa:	1a9b      	subs	r3, r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	440b      	add	r3, r1
 80098b0:	3338      	adds	r3, #56	@ 0x38
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	18d1      	adds	r1, r2, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	4613      	mov	r3, r2
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4403      	add	r3, r0
 80098c6:	3338      	adds	r3, #56	@ 0x38
 80098c8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	0cdb      	lsrs	r3, r3, #19
 80098da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098de:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	4613      	mov	r3, r2
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	1a9b      	subs	r3, r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	3328      	adds	r3, #40	@ 0x28
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d13f      	bne.n	800997a <HCD_RXQLVL_IRQHandler+0x1b4>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d03c      	beq.n	800997a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	4413      	add	r3, r2
 8009908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009916:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800991e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	4413      	add	r3, r2
 8009928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800992c:	461a      	mov	r2, r3
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009932:	6879      	ldr	r1, [r7, #4]
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	4613      	mov	r3, r2
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	1a9b      	subs	r3, r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	440b      	add	r3, r1
 8009940:	333c      	adds	r3, #60	@ 0x3c
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	f083 0301 	eor.w	r3, r3, #1
 8009948:	b2d8      	uxtb	r0, r3
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	4613      	mov	r3, r2
 8009950:	011b      	lsls	r3, r3, #4
 8009952:	1a9b      	subs	r3, r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	440b      	add	r3, r1
 8009958:	333c      	adds	r3, #60	@ 0x3c
 800995a:	4602      	mov	r2, r0
 800995c:	701a      	strb	r2, [r3, #0]
      break;
 800995e:	e00c      	b.n	800997a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	4613      	mov	r3, r2
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	440b      	add	r3, r1
 800996e:	334c      	adds	r3, #76	@ 0x4c
 8009970:	2204      	movs	r2, #4
 8009972:	701a      	strb	r2, [r3, #0]
      break;
 8009974:	e001      	b.n	800997a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009976:	bf00      	nop
 8009978:	e000      	b.n	800997c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800997a:	bf00      	nop
  }
}
 800997c:	bf00      	nop
 800997e:	3728      	adds	r7, #40	@ 0x28
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80099b0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d10b      	bne.n	80099d4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d102      	bne.n	80099cc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f011 fa6c 	bl	801aea4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f043 0302 	orr.w	r3, r3, #2
 80099d2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f003 0308 	and.w	r3, r3, #8
 80099da:	2b08      	cmp	r3, #8
 80099dc:	d132      	bne.n	8009a44 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f043 0308 	orr.w	r3, r3, #8
 80099e4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d126      	bne.n	8009a3e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7a5b      	ldrb	r3, [r3, #9]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d113      	bne.n	8009a20 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80099fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a02:	d106      	bne.n	8009a12 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2102      	movs	r1, #2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f007 febe 	bl	801178c <USB_InitFSLSPClkSel>
 8009a10:	e011      	b.n	8009a36 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2101      	movs	r1, #1
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f007 feb7 	bl	801178c <USB_InitFSLSPClkSel>
 8009a1e:	e00a      	b.n	8009a36 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	79db      	ldrb	r3, [r3, #7]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d106      	bne.n	8009a36 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009a34:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f011 fa62 	bl	801af00 <HAL_HCD_PortEnabled_Callback>
 8009a3c:	e002      	b.n	8009a44 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f011 fa6c 	bl	801af1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b20      	cmp	r3, #32
 8009a4c:	d103      	bne.n	8009a56 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f043 0320 	orr.w	r3, r3, #32
 8009a54:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6013      	str	r3, [r2, #0]
}
 8009a62:	bf00      	nop
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e08b      	b.n	8009b96 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7fa f88c 	bl	8003bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2224      	movs	r2, #36	@ 0x24
 8009a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 0201 	bic.w	r2, r2, #1
 8009aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d107      	bne.n	8009ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689a      	ldr	r2, [r3, #8]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ae2:	609a      	str	r2, [r3, #8]
 8009ae4:	e006      	b.n	8009af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d108      	bne.n	8009b0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b0a:	605a      	str	r2, [r3, #4]
 8009b0c:	e007      	b.n	8009b1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6859      	ldr	r1, [r3, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	4b1d      	ldr	r3, [pc, #116]	@ (8009ba0 <HAL_I2C_Init+0x134>)
 8009b2a:	430b      	orrs	r3, r1
 8009b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691a      	ldr	r2, [r3, #16]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	69d9      	ldr	r1, [r3, #28]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a1a      	ldr	r2, [r3, #32]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f042 0201 	orr.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	02008000 	.word	0x02008000

08009ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b20      	cmp	r3, #32
 8009bb8:	d138      	bne.n	8009c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e032      	b.n	8009c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2224      	movs	r2, #36	@ 0x24
 8009bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 0201 	bic.w	r2, r2, #1
 8009be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6819      	ldr	r1, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0201 	orr.w	r2, r2, #1
 8009c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e000      	b.n	8009c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c2c:	2302      	movs	r3, #2
  }
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b20      	cmp	r3, #32
 8009c4e:	d139      	bne.n	8009cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e033      	b.n	8009cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2224      	movs	r2, #36	@ 0x24
 8009c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009c8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0201 	orr.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e000      	b.n	8009cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009cc4:	2302      	movs	r3, #2
  }
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e08f      	b.n	8009e04 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d106      	bne.n	8009cfe <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7fa f801 	bl	8003d00 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2202      	movs	r2, #2
 8009d02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	699a      	ldr	r2, [r3, #24]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009d14:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6999      	ldr	r1, [r3, #24]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d2a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	041b      	lsls	r3, r3, #16
 8009d40:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6999      	ldr	r1, [r3, #24]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	041b      	lsls	r3, r3, #16
 8009d56:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a19      	ldr	r1, [r3, #32]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d6a:	041b      	lsls	r3, r3, #16
 8009d6c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d80:	041b      	lsls	r3, r3, #16
 8009d82:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009d98:	021b      	lsls	r3, r3, #8
 8009d9a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009da2:	041b      	lsls	r3, r3, #16
 8009da4:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009db4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f042 0206 	orr.w	r2, r2, #6
 8009de0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	699a      	ldr	r2, [r3, #24]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f042 0201 	orr.w	r2, r2, #1
 8009df0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e22:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f003 0304 	and.w	r3, r3, #4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d023      	beq.n	8009e76 <HAL_LTDC_IRQHandler+0x6a>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01e      	beq.n	8009e76 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0204 	bic.w	r2, r2, #4
 8009e46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2204      	movs	r2, #4
 8009e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e56:	f043 0201 	orr.w	r2, r3, #1
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2204      	movs	r2, #4
 8009e64:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f86f 	bl	8009f54 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d023      	beq.n	8009ec8 <HAL_LTDC_IRQHandler+0xbc>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d01e      	beq.n	8009ec8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0202 	bic.w	r2, r2, #2
 8009e98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ea8:	f043 0202 	orr.w	r2, r3, #2
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2204      	movs	r2, #4
 8009eb6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f846 	bl	8009f54 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01b      	beq.n	8009f0a <HAL_LTDC_IRQHandler+0xfe>
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d016      	beq.n	8009f0a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0201 	bic.w	r2, r2, #1
 8009eea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f82f 	bl	8009f68 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f003 0308 	and.w	r3, r3, #8
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01b      	beq.n	8009f4c <HAL_LTDC_IRQHandler+0x140>
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d016      	beq.n	8009f4c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0208 	bic.w	r2, r2, #8
 8009f2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2208      	movs	r2, #8
 8009f34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f818 	bl	8009f7c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009f4c:	bf00      	nop
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009f90:	b5b0      	push	{r4, r5, r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <HAL_LTDC_ConfigLayer+0x1a>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e02c      	b.n	800a004 <HAL_LTDC_ConfigLayer+0x74>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2134      	movs	r1, #52	@ 0x34
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	4614      	mov	r4, r2
 8009fce:	461d      	mov	r5, r3
 8009fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f000 f811 	bl	800a00c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bdb0      	pop	{r4, r5, r7, pc}

0800a00c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b089      	sub	sp, #36	@ 0x24
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	0c1b      	lsrs	r3, r3, #16
 800a024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a028:	4413      	add	r3, r2
 800a02a:	041b      	lsls	r3, r3, #16
 800a02c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	01db      	lsls	r3, r3, #7
 800a038:	4413      	add	r3, r2
 800a03a:	3384      	adds	r3, #132	@ 0x84
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	6812      	ldr	r2, [r2, #0]
 800a042:	4611      	mov	r1, r2
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	01d2      	lsls	r2, r2, #7
 800a048:	440a      	add	r2, r1
 800a04a:	3284      	adds	r2, #132	@ 0x84
 800a04c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a050:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	0c1b      	lsrs	r3, r3, #16
 800a05e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a062:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a064:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4619      	mov	r1, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	01db      	lsls	r3, r3, #7
 800a070:	440b      	add	r3, r1
 800a072:	3384      	adds	r3, #132	@ 0x84
 800a074:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a07a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	68da      	ldr	r2, [r3, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a08a:	4413      	add	r3, r2
 800a08c:	041b      	lsls	r3, r3, #16
 800a08e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	461a      	mov	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	01db      	lsls	r3, r3, #7
 800a09a:	4413      	add	r3, r2
 800a09c:	3384      	adds	r3, #132	@ 0x84
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	01d2      	lsls	r2, r2, #7
 800a0aa:	440a      	add	r2, r1
 800a0ac:	3284      	adds	r2, #132	@ 0x84
 800a0ae:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a0b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	689a      	ldr	r2, [r3, #8]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0c2:	4413      	add	r3, r2
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	01db      	lsls	r3, r3, #7
 800a0d0:	440b      	add	r3, r1
 800a0d2:	3384      	adds	r3, #132	@ 0x84
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	01db      	lsls	r3, r3, #7
 800a0e6:	4413      	add	r3, r2
 800a0e8:	3384      	adds	r3, #132	@ 0x84
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	01d2      	lsls	r2, r2, #7
 800a0f6:	440a      	add	r2, r1
 800a0f8:	3284      	adds	r2, #132	@ 0x84
 800a0fa:	f023 0307 	bic.w	r3, r3, #7
 800a0fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	461a      	mov	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	01db      	lsls	r3, r3, #7
 800a10a:	4413      	add	r3, r2
 800a10c:	3384      	adds	r3, #132	@ 0x84
 800a10e:	461a      	mov	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a11c:	021b      	lsls	r3, r3, #8
 800a11e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a126:	041b      	lsls	r3, r3, #16
 800a128:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	061b      	lsls	r3, r3, #24
 800a130:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a138:	461a      	mov	r2, r3
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	431a      	orrs	r2, r3
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	431a      	orrs	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4619      	mov	r1, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	01db      	lsls	r3, r3, #7
 800a14c:	440b      	add	r3, r1
 800a14e:	3384      	adds	r3, #132	@ 0x84
 800a150:	4619      	mov	r1, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	4313      	orrs	r3, r2
 800a156:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	01db      	lsls	r3, r3, #7
 800a162:	4413      	add	r3, r2
 800a164:	3384      	adds	r3, #132	@ 0x84
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	6812      	ldr	r2, [r2, #0]
 800a16c:	4611      	mov	r1, r2
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	01d2      	lsls	r2, r2, #7
 800a172:	440a      	add	r2, r1
 800a174:	3284      	adds	r2, #132	@ 0x84
 800a176:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a17a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	01db      	lsls	r3, r3, #7
 800a186:	4413      	add	r3, r2
 800a188:	3384      	adds	r3, #132	@ 0x84
 800a18a:	461a      	mov	r2, r3
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	01db      	lsls	r3, r3, #7
 800a19c:	4413      	add	r3, r2
 800a19e:	3384      	adds	r3, #132	@ 0x84
 800a1a0:	69da      	ldr	r2, [r3, #28]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	01db      	lsls	r3, r3, #7
 800a1ac:	440b      	add	r3, r1
 800a1ae:	3384      	adds	r3, #132	@ 0x84
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4b4f      	ldr	r3, [pc, #316]	@ (800a2f0 <LTDC_SetConfig+0x2e4>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	69da      	ldr	r2, [r3, #28]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	68f9      	ldr	r1, [r7, #12]
 800a1c2:	6809      	ldr	r1, [r1, #0]
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	01c9      	lsls	r1, r1, #7
 800a1ca:	4401      	add	r1, r0
 800a1cc:	3184      	adds	r1, #132	@ 0x84
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	01db      	lsls	r3, r3, #7
 800a1dc:	4413      	add	r3, r2
 800a1de:	3384      	adds	r3, #132	@ 0x84
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	61fb      	str	r3, [r7, #28]
 800a1f4:	e01b      	b.n	800a22e <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d102      	bne.n	800a204 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a1fe:	2303      	movs	r3, #3
 800a200:	61fb      	str	r3, [r7, #28]
 800a202:	e014      	b.n	800a22e <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d00b      	beq.n	800a224 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a210:	2b02      	cmp	r3, #2
 800a212:	d007      	beq.n	800a224 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d003      	beq.n	800a224 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a220:	2b07      	cmp	r3, #7
 800a222:	d102      	bne.n	800a22a <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a224:	2302      	movs	r3, #2
 800a226:	61fb      	str	r3, [r7, #28]
 800a228:	e001      	b.n	800a22e <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a22a:	2301      	movs	r3, #1
 800a22c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	01db      	lsls	r3, r3, #7
 800a238:	4413      	add	r3, r2
 800a23a:	3384      	adds	r3, #132	@ 0x84
 800a23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	6812      	ldr	r2, [r2, #0]
 800a242:	4611      	mov	r1, r2
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	01d2      	lsls	r2, r2, #7
 800a248:	440a      	add	r2, r1
 800a24a:	3284      	adds	r2, #132	@ 0x84
 800a24c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a250:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	fb02 f303 	mul.w	r3, r2, r3
 800a25c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	6859      	ldr	r1, [r3, #4]
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	1acb      	subs	r3, r1, r3
 800a268:	69f9      	ldr	r1, [r7, #28]
 800a26a:	fb01 f303 	mul.w	r3, r1, r3
 800a26e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a270:	68f9      	ldr	r1, [r7, #12]
 800a272:	6809      	ldr	r1, [r1, #0]
 800a274:	4608      	mov	r0, r1
 800a276:	6879      	ldr	r1, [r7, #4]
 800a278:	01c9      	lsls	r1, r1, #7
 800a27a:	4401      	add	r1, r0
 800a27c:	3184      	adds	r1, #132	@ 0x84
 800a27e:	4313      	orrs	r3, r2
 800a280:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	01db      	lsls	r3, r3, #7
 800a28c:	4413      	add	r3, r2
 800a28e:	3384      	adds	r3, #132	@ 0x84
 800a290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4619      	mov	r1, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	01db      	lsls	r3, r3, #7
 800a29c:	440b      	add	r3, r1
 800a29e:	3384      	adds	r3, #132	@ 0x84
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4b14      	ldr	r3, [pc, #80]	@ (800a2f4 <LTDC_SetConfig+0x2e8>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	01db      	lsls	r3, r3, #7
 800a2b2:	4413      	add	r3, r2
 800a2b4:	3384      	adds	r3, #132	@ 0x84
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	01db      	lsls	r3, r3, #7
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3384      	adds	r3, #132	@ 0x84
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	6812      	ldr	r2, [r2, #0]
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	01d2      	lsls	r2, r2, #7
 800a2d8:	440a      	add	r2, r1
 800a2da:	3284      	adds	r2, #132	@ 0x84
 800a2dc:	f043 0301 	orr.w	r3, r3, #1
 800a2e0:	6013      	str	r3, [r2, #0]
}
 800a2e2:	bf00      	nop
 800a2e4:	3724      	adds	r7, #36	@ 0x24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	fffff8f8 	.word	0xfffff8f8
 800a2f4:	fffff800 	.word	0xfffff800

0800a2f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2fc:	4b05      	ldr	r3, [pc, #20]	@ (800a314 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a04      	ldr	r2, [pc, #16]	@ (800a314 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a306:	6013      	str	r3, [r2, #0]
}
 800a308:	bf00      	nop
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	40007000 	.word	0x40007000

0800a318 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a322:	4b23      	ldr	r3, [pc, #140]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a326:	4a22      	ldr	r2, [pc, #136]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a32c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a32e:	4b20      	ldr	r3, [pc, #128]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a33a:	4b1e      	ldr	r3, [pc, #120]	@ (800a3b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a1d      	ldr	r2, [pc, #116]	@ (800a3b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a344:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a346:	f7fb f9d3 	bl	80056f0 <HAL_GetTick>
 800a34a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a34c:	e009      	b.n	800a362 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a34e:	f7fb f9cf 	bl	80056f0 <HAL_GetTick>
 800a352:	4602      	mov	r2, r0
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a35c:	d901      	bls.n	800a362 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e022      	b.n	800a3a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a362:	4b14      	ldr	r3, [pc, #80]	@ (800a3b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a36a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a36e:	d1ee      	bne.n	800a34e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a370:	4b10      	ldr	r3, [pc, #64]	@ (800a3b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a0f      	ldr	r2, [pc, #60]	@ (800a3b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a37a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a37c:	f7fb f9b8 	bl	80056f0 <HAL_GetTick>
 800a380:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a382:	e009      	b.n	800a398 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a384:	f7fb f9b4 	bl	80056f0 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a392:	d901      	bls.n	800a398 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	e007      	b.n	800a3a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a398:	4b06      	ldr	r3, [pc, #24]	@ (800a3b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3a4:	d1ee      	bne.n	800a384 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	40023800 	.word	0x40023800
 800a3b4:	40007000 	.word	0x40007000

0800a3b8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a3c0:	f7fb f996 	bl	80056f0 <HAL_GetTick>
 800a3c4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e067      	b.n	800a4a0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10b      	bne.n	800a3f4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7f9 fd53 	bl	8003e90 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a3ea:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f85e 	bl	800a4b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	3b01      	subs	r3, #1
 800a404:	021a      	lsls	r2, r3, #8
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	2120      	movs	r1, #32
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f856 	bl	800a4cc <QSPI_WaitFlagStateUntilTimeout>
 800a420:	4603      	mov	r3, r0
 800a422:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a424:	7afb      	ldrb	r3, [r7, #11]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d135      	bne.n	800a496 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a8 <HAL_QSPI_Init+0xf0>)
 800a432:	4013      	ands	r3, r2
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6852      	ldr	r2, [r2, #4]
 800a438:	0611      	lsls	r1, r2, #24
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	68d2      	ldr	r2, [r2, #12]
 800a43e:	4311      	orrs	r1, r2
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	69d2      	ldr	r2, [r2, #28]
 800a444:	4311      	orrs	r1, r2
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	6a12      	ldr	r2, [r2, #32]
 800a44a:	4311      	orrs	r1, r2
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	6812      	ldr	r2, [r2, #0]
 800a450:	430b      	orrs	r3, r1
 800a452:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	4b14      	ldr	r3, [pc, #80]	@ (800a4ac <HAL_QSPI_Init+0xf4>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	6912      	ldr	r2, [r2, #16]
 800a462:	0411      	lsls	r1, r2, #16
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	6952      	ldr	r2, [r2, #20]
 800a468:	4311      	orrs	r1, r2
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	6992      	ldr	r2, [r2, #24]
 800a46e:	4311      	orrs	r1, r2
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	6812      	ldr	r2, [r2, #0]
 800a474:	430b      	orrs	r3, r1
 800a476:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f042 0201 	orr.w	r2, r2, #1
 800a486:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a49e:	7afb      	ldrb	r3, [r7, #11]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	00ffff2f 	.word	0x00ffff2f
 800a4ac:	ffe0f8fe 	.word	0xffe0f8fe

0800a4b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	683a      	ldr	r2, [r7, #0]
 800a4be:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a4dc:	e01a      	b.n	800a514 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e4:	d016      	beq.n	800a514 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4e6:	f7fb f903 	bl	80056f0 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d302      	bcc.n	800a4fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10b      	bne.n	800a514 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2204      	movs	r2, #4
 800a500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a508:	f043 0201 	orr.w	r2, r3, #1
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e00e      	b.n	800a532 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	4013      	ands	r3, r2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bf14      	ite	ne
 800a522:	2301      	movne	r3, #1
 800a524:	2300      	moveq	r3, #0
 800a526:	b2db      	uxtb	r3, r3
 800a528:	461a      	mov	r2, r3
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d1d6      	bne.n	800a4de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a544:	2300      	movs	r3, #0
 800a546:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e291      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f000 8087 	beq.w	800a66e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a560:	4b96      	ldr	r3, [pc, #600]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f003 030c 	and.w	r3, r3, #12
 800a568:	2b04      	cmp	r3, #4
 800a56a:	d00c      	beq.n	800a586 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a56c:	4b93      	ldr	r3, [pc, #588]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 030c 	and.w	r3, r3, #12
 800a574:	2b08      	cmp	r3, #8
 800a576:	d112      	bne.n	800a59e <HAL_RCC_OscConfig+0x62>
 800a578:	4b90      	ldr	r3, [pc, #576]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a580:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a584:	d10b      	bne.n	800a59e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a586:	4b8d      	ldr	r3, [pc, #564]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d06c      	beq.n	800a66c <HAL_RCC_OscConfig+0x130>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d168      	bne.n	800a66c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e26b      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5a6:	d106      	bne.n	800a5b6 <HAL_RCC_OscConfig+0x7a>
 800a5a8:	4b84      	ldr	r3, [pc, #528]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a83      	ldr	r2, [pc, #524]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	e02e      	b.n	800a614 <HAL_RCC_OscConfig+0xd8>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10c      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x9c>
 800a5be:	4b7f      	ldr	r3, [pc, #508]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a7e      	ldr	r2, [pc, #504]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	4b7c      	ldr	r3, [pc, #496]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a7b      	ldr	r2, [pc, #492]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5d4:	6013      	str	r3, [r2, #0]
 800a5d6:	e01d      	b.n	800a614 <HAL_RCC_OscConfig+0xd8>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5e0:	d10c      	bne.n	800a5fc <HAL_RCC_OscConfig+0xc0>
 800a5e2:	4b76      	ldr	r3, [pc, #472]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a75      	ldr	r2, [pc, #468]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	4b73      	ldr	r3, [pc, #460]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a72      	ldr	r2, [pc, #456]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	e00b      	b.n	800a614 <HAL_RCC_OscConfig+0xd8>
 800a5fc:	4b6f      	ldr	r3, [pc, #444]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a6e      	ldr	r2, [pc, #440]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	4b6c      	ldr	r3, [pc, #432]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a6b      	ldr	r2, [pc, #428]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a60e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d013      	beq.n	800a644 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a61c:	f7fb f868 	bl	80056f0 <HAL_GetTick>
 800a620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a622:	e008      	b.n	800a636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a624:	f7fb f864 	bl	80056f0 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b64      	cmp	r3, #100	@ 0x64
 800a630:	d901      	bls.n	800a636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e21f      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a636:	4b61      	ldr	r3, [pc, #388]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0f0      	beq.n	800a624 <HAL_RCC_OscConfig+0xe8>
 800a642:	e014      	b.n	800a66e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a644:	f7fb f854 	bl	80056f0 <HAL_GetTick>
 800a648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a64a:	e008      	b.n	800a65e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a64c:	f7fb f850 	bl	80056f0 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	2b64      	cmp	r3, #100	@ 0x64
 800a658:	d901      	bls.n	800a65e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e20b      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a65e:	4b57      	ldr	r3, [pc, #348]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1f0      	bne.n	800a64c <HAL_RCC_OscConfig+0x110>
 800a66a:	e000      	b.n	800a66e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a66c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d069      	beq.n	800a74e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a67a:	4b50      	ldr	r3, [pc, #320]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f003 030c 	and.w	r3, r3, #12
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00b      	beq.n	800a69e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a686:	4b4d      	ldr	r3, [pc, #308]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f003 030c 	and.w	r3, r3, #12
 800a68e:	2b08      	cmp	r3, #8
 800a690:	d11c      	bne.n	800a6cc <HAL_RCC_OscConfig+0x190>
 800a692:	4b4a      	ldr	r3, [pc, #296]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d116      	bne.n	800a6cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a69e:	4b47      	ldr	r3, [pc, #284]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d005      	beq.n	800a6b6 <HAL_RCC_OscConfig+0x17a>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d001      	beq.n	800a6b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e1df      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6b6:	4b41      	ldr	r3, [pc, #260]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	00db      	lsls	r3, r3, #3
 800a6c4:	493d      	ldr	r1, [pc, #244]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6ca:	e040      	b.n	800a74e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d023      	beq.n	800a71c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6d4:	4b39      	ldr	r3, [pc, #228]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a38      	ldr	r2, [pc, #224]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a6da:	f043 0301 	orr.w	r3, r3, #1
 800a6de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e0:	f7fb f806 	bl	80056f0 <HAL_GetTick>
 800a6e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6e6:	e008      	b.n	800a6fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6e8:	f7fb f802 	bl	80056f0 <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d901      	bls.n	800a6fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e1bd      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6fa:	4b30      	ldr	r3, [pc, #192]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0f0      	beq.n	800a6e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a706:	4b2d      	ldr	r3, [pc, #180]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	4929      	ldr	r1, [pc, #164]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a716:	4313      	orrs	r3, r2
 800a718:	600b      	str	r3, [r1, #0]
 800a71a:	e018      	b.n	800a74e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a71c:	4b27      	ldr	r3, [pc, #156]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a26      	ldr	r2, [pc, #152]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a722:	f023 0301 	bic.w	r3, r3, #1
 800a726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a728:	f7fa ffe2 	bl	80056f0 <HAL_GetTick>
 800a72c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a72e:	e008      	b.n	800a742 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a730:	f7fa ffde 	bl	80056f0 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d901      	bls.n	800a742 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e199      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a742:	4b1e      	ldr	r3, [pc, #120]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f0      	bne.n	800a730 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0308 	and.w	r3, r3, #8
 800a756:	2b00      	cmp	r3, #0
 800a758:	d038      	beq.n	800a7cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d019      	beq.n	800a796 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a762:	4b16      	ldr	r3, [pc, #88]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a766:	4a15      	ldr	r2, [pc, #84]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a768:	f043 0301 	orr.w	r3, r3, #1
 800a76c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a76e:	f7fa ffbf 	bl	80056f0 <HAL_GetTick>
 800a772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a774:	e008      	b.n	800a788 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a776:	f7fa ffbb 	bl	80056f0 <HAL_GetTick>
 800a77a:	4602      	mov	r2, r0
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	2b02      	cmp	r3, #2
 800a782:	d901      	bls.n	800a788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e176      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a788:	4b0c      	ldr	r3, [pc, #48]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a78a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0f0      	beq.n	800a776 <HAL_RCC_OscConfig+0x23a>
 800a794:	e01a      	b.n	800a7cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a796:	4b09      	ldr	r3, [pc, #36]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a79a:	4a08      	ldr	r2, [pc, #32]	@ (800a7bc <HAL_RCC_OscConfig+0x280>)
 800a79c:	f023 0301 	bic.w	r3, r3, #1
 800a7a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7a2:	f7fa ffa5 	bl	80056f0 <HAL_GetTick>
 800a7a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7a8:	e00a      	b.n	800a7c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7aa:	f7fa ffa1 	bl	80056f0 <HAL_GetTick>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d903      	bls.n	800a7c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	e15c      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
 800a7bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7c0:	4b91      	ldr	r3, [pc, #580]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a7c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1ee      	bne.n	800a7aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 80a4 	beq.w	800a922 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7da:	4b8b      	ldr	r3, [pc, #556]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10d      	bne.n	800a802 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7e6:	4b88      	ldr	r3, [pc, #544]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ea:	4a87      	ldr	r2, [pc, #540]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a7ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7f0:	6413      	str	r3, [r2, #64]	@ 0x40
 800a7f2:	4b85      	ldr	r3, [pc, #532]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7fa:	60bb      	str	r3, [r7, #8]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a802:	4b82      	ldr	r3, [pc, #520]	@ (800aa0c <HAL_RCC_OscConfig+0x4d0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d118      	bne.n	800a840 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a80e:	4b7f      	ldr	r3, [pc, #508]	@ (800aa0c <HAL_RCC_OscConfig+0x4d0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a7e      	ldr	r2, [pc, #504]	@ (800aa0c <HAL_RCC_OscConfig+0x4d0>)
 800a814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a81a:	f7fa ff69 	bl	80056f0 <HAL_GetTick>
 800a81e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a820:	e008      	b.n	800a834 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a822:	f7fa ff65 	bl	80056f0 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	2b64      	cmp	r3, #100	@ 0x64
 800a82e:	d901      	bls.n	800a834 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e120      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a834:	4b75      	ldr	r3, [pc, #468]	@ (800aa0c <HAL_RCC_OscConfig+0x4d0>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d0f0      	beq.n	800a822 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d106      	bne.n	800a856 <HAL_RCC_OscConfig+0x31a>
 800a848:	4b6f      	ldr	r3, [pc, #444]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a84a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a84c:	4a6e      	ldr	r2, [pc, #440]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a84e:	f043 0301 	orr.w	r3, r3, #1
 800a852:	6713      	str	r3, [r2, #112]	@ 0x70
 800a854:	e02d      	b.n	800a8b2 <HAL_RCC_OscConfig+0x376>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10c      	bne.n	800a878 <HAL_RCC_OscConfig+0x33c>
 800a85e:	4b6a      	ldr	r3, [pc, #424]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a862:	4a69      	ldr	r2, [pc, #420]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a864:	f023 0301 	bic.w	r3, r3, #1
 800a868:	6713      	str	r3, [r2, #112]	@ 0x70
 800a86a:	4b67      	ldr	r3, [pc, #412]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a86c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a86e:	4a66      	ldr	r2, [pc, #408]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a870:	f023 0304 	bic.w	r3, r3, #4
 800a874:	6713      	str	r3, [r2, #112]	@ 0x70
 800a876:	e01c      	b.n	800a8b2 <HAL_RCC_OscConfig+0x376>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	2b05      	cmp	r3, #5
 800a87e:	d10c      	bne.n	800a89a <HAL_RCC_OscConfig+0x35e>
 800a880:	4b61      	ldr	r3, [pc, #388]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a884:	4a60      	ldr	r2, [pc, #384]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a886:	f043 0304 	orr.w	r3, r3, #4
 800a88a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a88c:	4b5e      	ldr	r3, [pc, #376]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a88e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a890:	4a5d      	ldr	r2, [pc, #372]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a892:	f043 0301 	orr.w	r3, r3, #1
 800a896:	6713      	str	r3, [r2, #112]	@ 0x70
 800a898:	e00b      	b.n	800a8b2 <HAL_RCC_OscConfig+0x376>
 800a89a:	4b5b      	ldr	r3, [pc, #364]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a89c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a89e:	4a5a      	ldr	r2, [pc, #360]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a8a0:	f023 0301 	bic.w	r3, r3, #1
 800a8a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8a6:	4b58      	ldr	r3, [pc, #352]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a8a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8aa:	4a57      	ldr	r2, [pc, #348]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a8ac:	f023 0304 	bic.w	r3, r3, #4
 800a8b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d015      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ba:	f7fa ff19 	bl	80056f0 <HAL_GetTick>
 800a8be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8c0:	e00a      	b.n	800a8d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8c2:	f7fa ff15 	bl	80056f0 <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d901      	bls.n	800a8d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e0ce      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8d8:	4b4b      	ldr	r3, [pc, #300]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a8da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0ee      	beq.n	800a8c2 <HAL_RCC_OscConfig+0x386>
 800a8e4:	e014      	b.n	800a910 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8e6:	f7fa ff03 	bl	80056f0 <HAL_GetTick>
 800a8ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8ec:	e00a      	b.n	800a904 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8ee:	f7fa feff 	bl	80056f0 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d901      	bls.n	800a904 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e0b8      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a904:	4b40      	ldr	r3, [pc, #256]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a908:	f003 0302 	and.w	r3, r3, #2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1ee      	bne.n	800a8ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d105      	bne.n	800a922 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a916:	4b3c      	ldr	r3, [pc, #240]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a91a:	4a3b      	ldr	r2, [pc, #236]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a91c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a920:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 80a4 	beq.w	800aa74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a92c:	4b36      	ldr	r3, [pc, #216]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f003 030c 	and.w	r3, r3, #12
 800a934:	2b08      	cmp	r3, #8
 800a936:	d06b      	beq.n	800aa10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d149      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a940:	4b31      	ldr	r3, [pc, #196]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a30      	ldr	r2, [pc, #192]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a94a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a94c:	f7fa fed0 	bl	80056f0 <HAL_GetTick>
 800a950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a954:	f7fa fecc 	bl	80056f0 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e087      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a966:	4b28      	ldr	r3, [pc, #160]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1f0      	bne.n	800a954 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	69da      	ldr	r2, [r3, #28]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a980:	019b      	lsls	r3, r3, #6
 800a982:	431a      	orrs	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a988:	085b      	lsrs	r3, r3, #1
 800a98a:	3b01      	subs	r3, #1
 800a98c:	041b      	lsls	r3, r3, #16
 800a98e:	431a      	orrs	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a994:	061b      	lsls	r3, r3, #24
 800a996:	4313      	orrs	r3, r2
 800a998:	4a1b      	ldr	r2, [pc, #108]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a99a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a99e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9a0:	4b19      	ldr	r3, [pc, #100]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a18      	ldr	r2, [pc, #96]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a9a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a9aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ac:	f7fa fea0 	bl	80056f0 <HAL_GetTick>
 800a9b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9b2:	e008      	b.n	800a9c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9b4:	f7fa fe9c 	bl	80056f0 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d901      	bls.n	800a9c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e057      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9c6:	4b10      	ldr	r3, [pc, #64]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0f0      	beq.n	800a9b4 <HAL_RCC_OscConfig+0x478>
 800a9d2:	e04f      	b.n	800aa74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a0b      	ldr	r2, [pc, #44]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a9da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e0:	f7fa fe86 	bl	80056f0 <HAL_GetTick>
 800a9e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9e6:	e008      	b.n	800a9fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9e8:	f7fa fe82 	bl	80056f0 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e03d      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9fa:	4b03      	ldr	r3, [pc, #12]	@ (800aa08 <HAL_RCC_OscConfig+0x4cc>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1f0      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x4ac>
 800aa06:	e035      	b.n	800aa74 <HAL_RCC_OscConfig+0x538>
 800aa08:	40023800 	.word	0x40023800
 800aa0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800aa10:	4b1b      	ldr	r3, [pc, #108]	@ (800aa80 <HAL_RCC_OscConfig+0x544>)
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d028      	beq.n	800aa70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d121      	bne.n	800aa70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d11a      	bne.n	800aa70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800aa40:	4013      	ands	r3, r2
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aa46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d111      	bne.n	800aa70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa56:	085b      	lsrs	r3, r3, #1
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d107      	bne.n	800aa70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d001      	beq.n	800aa74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e000      	b.n	800aa76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	40023800 	.word	0x40023800

0800aa84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e0d0      	b.n	800ac3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa9c:	4b6a      	ldr	r3, [pc, #424]	@ (800ac48 <HAL_RCC_ClockConfig+0x1c4>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 030f 	and.w	r3, r3, #15
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d910      	bls.n	800aacc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaaa:	4b67      	ldr	r3, [pc, #412]	@ (800ac48 <HAL_RCC_ClockConfig+0x1c4>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f023 020f 	bic.w	r2, r3, #15
 800aab2:	4965      	ldr	r1, [pc, #404]	@ (800ac48 <HAL_RCC_ClockConfig+0x1c4>)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaba:	4b63      	ldr	r3, [pc, #396]	@ (800ac48 <HAL_RCC_ClockConfig+0x1c4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 030f 	and.w	r3, r3, #15
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d001      	beq.n	800aacc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e0b8      	b.n	800ac3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d020      	beq.n	800ab1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d005      	beq.n	800aaf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aae4:	4b59      	ldr	r3, [pc, #356]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	4a58      	ldr	r2, [pc, #352]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800aaea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800aaee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0308 	and.w	r3, r3, #8
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d005      	beq.n	800ab08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aafc:	4b53      	ldr	r3, [pc, #332]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	4a52      	ldr	r2, [pc, #328]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ab06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab08:	4b50      	ldr	r3, [pc, #320]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	494d      	ldr	r1, [pc, #308]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0301 	and.w	r3, r3, #1
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d040      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d107      	bne.n	800ab3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab2e:	4b47      	ldr	r3, [pc, #284]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d115      	bne.n	800ab66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e07f      	b.n	800ac3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d107      	bne.n	800ab56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab46:	4b41      	ldr	r3, [pc, #260]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d109      	bne.n	800ab66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e073      	b.n	800ac3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab56:	4b3d      	ldr	r3, [pc, #244]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0302 	and.w	r3, r3, #2
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d101      	bne.n	800ab66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e06b      	b.n	800ac3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab66:	4b39      	ldr	r3, [pc, #228]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f023 0203 	bic.w	r2, r3, #3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	4936      	ldr	r1, [pc, #216]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab74:	4313      	orrs	r3, r2
 800ab76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab78:	f7fa fdba 	bl	80056f0 <HAL_GetTick>
 800ab7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab7e:	e00a      	b.n	800ab96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab80:	f7fa fdb6 	bl	80056f0 <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d901      	bls.n	800ab96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e053      	b.n	800ac3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab96:	4b2d      	ldr	r3, [pc, #180]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f003 020c 	and.w	r2, r3, #12
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d1eb      	bne.n	800ab80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aba8:	4b27      	ldr	r3, [pc, #156]	@ (800ac48 <HAL_RCC_ClockConfig+0x1c4>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 030f 	and.w	r3, r3, #15
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d210      	bcs.n	800abd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abb6:	4b24      	ldr	r3, [pc, #144]	@ (800ac48 <HAL_RCC_ClockConfig+0x1c4>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f023 020f 	bic.w	r2, r3, #15
 800abbe:	4922      	ldr	r1, [pc, #136]	@ (800ac48 <HAL_RCC_ClockConfig+0x1c4>)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abc6:	4b20      	ldr	r3, [pc, #128]	@ (800ac48 <HAL_RCC_ClockConfig+0x1c4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f003 030f 	and.w	r3, r3, #15
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d001      	beq.n	800abd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e032      	b.n	800ac3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d008      	beq.n	800abf6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800abe4:	4b19      	ldr	r3, [pc, #100]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	4916      	ldr	r1, [pc, #88]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d009      	beq.n	800ac16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac02:	4b12      	ldr	r3, [pc, #72]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	490e      	ldr	r1, [pc, #56]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ac16:	f000 f821 	bl	800ac5c <HAL_RCC_GetSysClockFreq>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac4c <HAL_RCC_ClockConfig+0x1c8>)
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	091b      	lsrs	r3, r3, #4
 800ac22:	f003 030f 	and.w	r3, r3, #15
 800ac26:	490a      	ldr	r1, [pc, #40]	@ (800ac50 <HAL_RCC_ClockConfig+0x1cc>)
 800ac28:	5ccb      	ldrb	r3, [r1, r3]
 800ac2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2e:	4a09      	ldr	r2, [pc, #36]	@ (800ac54 <HAL_RCC_ClockConfig+0x1d0>)
 800ac30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ac32:	4b09      	ldr	r3, [pc, #36]	@ (800ac58 <HAL_RCC_ClockConfig+0x1d4>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7f9 fe38 	bl	80048ac <HAL_InitTick>

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	40023c00 	.word	0x40023c00
 800ac4c:	40023800 	.word	0x40023800
 800ac50:	0801ece4 	.word	0x0801ece4
 800ac54:	20000018 	.word	0x20000018
 800ac58:	20000064 	.word	0x20000064

0800ac5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac60:	b090      	sub	sp, #64	@ 0x40
 800ac62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac68:	2300      	movs	r3, #0
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac74:	4b59      	ldr	r3, [pc, #356]	@ (800addc <HAL_RCC_GetSysClockFreq+0x180>)
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f003 030c 	and.w	r3, r3, #12
 800ac7c:	2b08      	cmp	r3, #8
 800ac7e:	d00d      	beq.n	800ac9c <HAL_RCC_GetSysClockFreq+0x40>
 800ac80:	2b08      	cmp	r3, #8
 800ac82:	f200 80a1 	bhi.w	800adc8 <HAL_RCC_GetSysClockFreq+0x16c>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <HAL_RCC_GetSysClockFreq+0x34>
 800ac8a:	2b04      	cmp	r3, #4
 800ac8c:	d003      	beq.n	800ac96 <HAL_RCC_GetSysClockFreq+0x3a>
 800ac8e:	e09b      	b.n	800adc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ac90:	4b53      	ldr	r3, [pc, #332]	@ (800ade0 <HAL_RCC_GetSysClockFreq+0x184>)
 800ac92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ac94:	e09b      	b.n	800adce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ac96:	4b53      	ldr	r3, [pc, #332]	@ (800ade4 <HAL_RCC_GetSysClockFreq+0x188>)
 800ac98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ac9a:	e098      	b.n	800adce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac9c:	4b4f      	ldr	r3, [pc, #316]	@ (800addc <HAL_RCC_GetSysClockFreq+0x180>)
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aca4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800aca6:	4b4d      	ldr	r3, [pc, #308]	@ (800addc <HAL_RCC_GetSysClockFreq+0x180>)
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d028      	beq.n	800ad04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acb2:	4b4a      	ldr	r3, [pc, #296]	@ (800addc <HAL_RCC_GetSysClockFreq+0x180>)
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	099b      	lsrs	r3, r3, #6
 800acb8:	2200      	movs	r2, #0
 800acba:	623b      	str	r3, [r7, #32]
 800acbc:	627a      	str	r2, [r7, #36]	@ 0x24
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800acc4:	2100      	movs	r1, #0
 800acc6:	4b47      	ldr	r3, [pc, #284]	@ (800ade4 <HAL_RCC_GetSysClockFreq+0x188>)
 800acc8:	fb03 f201 	mul.w	r2, r3, r1
 800accc:	2300      	movs	r3, #0
 800acce:	fb00 f303 	mul.w	r3, r0, r3
 800acd2:	4413      	add	r3, r2
 800acd4:	4a43      	ldr	r2, [pc, #268]	@ (800ade4 <HAL_RCC_GetSysClockFreq+0x188>)
 800acd6:	fba0 1202 	umull	r1, r2, r0, r2
 800acda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800acdc:	460a      	mov	r2, r1
 800acde:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ace0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ace2:	4413      	add	r3, r2
 800ace4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ace6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace8:	2200      	movs	r2, #0
 800acea:	61bb      	str	r3, [r7, #24]
 800acec:	61fa      	str	r2, [r7, #28]
 800acee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800acf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800acf6:	f7f5 faf3 	bl	80002e0 <__aeabi_uldivmod>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4613      	mov	r3, r2
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad02:	e053      	b.n	800adac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad04:	4b35      	ldr	r3, [pc, #212]	@ (800addc <HAL_RCC_GetSysClockFreq+0x180>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	099b      	lsrs	r3, r3, #6
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	613b      	str	r3, [r7, #16]
 800ad0e:	617a      	str	r2, [r7, #20]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ad16:	f04f 0b00 	mov.w	fp, #0
 800ad1a:	4652      	mov	r2, sl
 800ad1c:	465b      	mov	r3, fp
 800ad1e:	f04f 0000 	mov.w	r0, #0
 800ad22:	f04f 0100 	mov.w	r1, #0
 800ad26:	0159      	lsls	r1, r3, #5
 800ad28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad2c:	0150      	lsls	r0, r2, #5
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	ebb2 080a 	subs.w	r8, r2, sl
 800ad36:	eb63 090b 	sbc.w	r9, r3, fp
 800ad3a:	f04f 0200 	mov.w	r2, #0
 800ad3e:	f04f 0300 	mov.w	r3, #0
 800ad42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ad46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ad4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ad4e:	ebb2 0408 	subs.w	r4, r2, r8
 800ad52:	eb63 0509 	sbc.w	r5, r3, r9
 800ad56:	f04f 0200 	mov.w	r2, #0
 800ad5a:	f04f 0300 	mov.w	r3, #0
 800ad5e:	00eb      	lsls	r3, r5, #3
 800ad60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad64:	00e2      	lsls	r2, r4, #3
 800ad66:	4614      	mov	r4, r2
 800ad68:	461d      	mov	r5, r3
 800ad6a:	eb14 030a 	adds.w	r3, r4, sl
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	eb45 030b 	adc.w	r3, r5, fp
 800ad74:	607b      	str	r3, [r7, #4]
 800ad76:	f04f 0200 	mov.w	r2, #0
 800ad7a:	f04f 0300 	mov.w	r3, #0
 800ad7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ad82:	4629      	mov	r1, r5
 800ad84:	028b      	lsls	r3, r1, #10
 800ad86:	4621      	mov	r1, r4
 800ad88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	028a      	lsls	r2, r1, #10
 800ad90:	4610      	mov	r0, r2
 800ad92:	4619      	mov	r1, r3
 800ad94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad96:	2200      	movs	r2, #0
 800ad98:	60bb      	str	r3, [r7, #8]
 800ad9a:	60fa      	str	r2, [r7, #12]
 800ad9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ada0:	f7f5 fa9e 	bl	80002e0 <__aeabi_uldivmod>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4613      	mov	r3, r2
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800adac:	4b0b      	ldr	r3, [pc, #44]	@ (800addc <HAL_RCC_GetSysClockFreq+0x180>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	0c1b      	lsrs	r3, r3, #16
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	3301      	adds	r3, #1
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800adbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800adc6:	e002      	b.n	800adce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800adc8:	4b05      	ldr	r3, [pc, #20]	@ (800ade0 <HAL_RCC_GetSysClockFreq+0x184>)
 800adca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800adcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800adce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800add0:	4618      	mov	r0, r3
 800add2:	3740      	adds	r7, #64	@ 0x40
 800add4:	46bd      	mov	sp, r7
 800add6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adda:	bf00      	nop
 800addc:	40023800 	.word	0x40023800
 800ade0:	00f42400 	.word	0x00f42400
 800ade4:	017d7840 	.word	0x017d7840

0800ade8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ade8:	b480      	push	{r7}
 800adea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adec:	4b03      	ldr	r3, [pc, #12]	@ (800adfc <HAL_RCC_GetHCLKFreq+0x14>)
 800adee:	681b      	ldr	r3, [r3, #0]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20000018 	.word	0x20000018

0800ae00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae04:	f7ff fff0 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	4b05      	ldr	r3, [pc, #20]	@ (800ae20 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	0a9b      	lsrs	r3, r3, #10
 800ae10:	f003 0307 	and.w	r3, r3, #7
 800ae14:	4903      	ldr	r1, [pc, #12]	@ (800ae24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae16:	5ccb      	ldrb	r3, [r1, r3]
 800ae18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	40023800 	.word	0x40023800
 800ae24:	0801ecf4 	.word	0x0801ecf4

0800ae28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ae2c:	f7ff ffdc 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 800ae30:	4602      	mov	r2, r0
 800ae32:	4b05      	ldr	r3, [pc, #20]	@ (800ae48 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	0b5b      	lsrs	r3, r3, #13
 800ae38:	f003 0307 	and.w	r3, r3, #7
 800ae3c:	4903      	ldr	r1, [pc, #12]	@ (800ae4c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae3e:	5ccb      	ldrb	r3, [r1, r3]
 800ae40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	40023800 	.word	0x40023800
 800ae4c:	0801ecf4 	.word	0x0801ecf4

0800ae50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	220f      	movs	r2, #15
 800ae5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ae60:	4b12      	ldr	r3, [pc, #72]	@ (800aeac <HAL_RCC_GetClockConfig+0x5c>)
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f003 0203 	and.w	r2, r3, #3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ae6c:	4b0f      	ldr	r3, [pc, #60]	@ (800aeac <HAL_RCC_GetClockConfig+0x5c>)
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ae78:	4b0c      	ldr	r3, [pc, #48]	@ (800aeac <HAL_RCC_GetClockConfig+0x5c>)
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ae84:	4b09      	ldr	r3, [pc, #36]	@ (800aeac <HAL_RCC_GetClockConfig+0x5c>)
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	08db      	lsrs	r3, r3, #3
 800ae8a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae92:	4b07      	ldr	r3, [pc, #28]	@ (800aeb0 <HAL_RCC_GetClockConfig+0x60>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 020f 	and.w	r2, r3, #15
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	601a      	str	r2, [r3, #0]
}
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	40023800 	.word	0x40023800
 800aeb0:	40023c00 	.word	0x40023c00

0800aeb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d012      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aedc:	4b69      	ldr	r3, [pc, #420]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	4a68      	ldr	r2, [pc, #416]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aee2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aee6:	6093      	str	r3, [r2, #8]
 800aee8:	4b66      	ldr	r3, [pc, #408]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aef0:	4964      	ldr	r1, [pc, #400]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800aefe:	2301      	movs	r3, #1
 800af00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d017      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af0e:	4b5d      	ldr	r3, [pc, #372]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af1c:	4959      	ldr	r1, [pc, #356]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af1e:	4313      	orrs	r3, r2
 800af20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af2c:	d101      	bne.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800af2e:	2301      	movs	r3, #1
 800af30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800af3a:	2301      	movs	r3, #1
 800af3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d017      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800af4a:	4b4e      	ldr	r3, [pc, #312]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af58:	494a      	ldr	r1, [pc, #296]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af5a:	4313      	orrs	r3, r2
 800af5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af68:	d101      	bne.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800af6a:	2301      	movs	r3, #1
 800af6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800af76:	2301      	movs	r3, #1
 800af78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800af86:	2301      	movs	r3, #1
 800af88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0320 	and.w	r3, r3, #32
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 808b 	beq.w	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800af98:	4b3a      	ldr	r3, [pc, #232]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af9c:	4a39      	ldr	r2, [pc, #228]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afa2:	6413      	str	r3, [r2, #64]	@ 0x40
 800afa4:	4b37      	ldr	r3, [pc, #220]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afac:	60bb      	str	r3, [r7, #8]
 800afae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800afb0:	4b35      	ldr	r3, [pc, #212]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a34      	ldr	r2, [pc, #208]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800afb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afbc:	f7fa fb98 	bl	80056f0 <HAL_GetTick>
 800afc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800afc2:	e008      	b.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afc4:	f7fa fb94 	bl	80056f0 <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	2b64      	cmp	r3, #100	@ 0x64
 800afd0:	d901      	bls.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e357      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800afd6:	4b2c      	ldr	r3, [pc, #176]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d0f0      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800afe2:	4b28      	ldr	r3, [pc, #160]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d035      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	429a      	cmp	r2, r3
 800affe:	d02e      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b000:	4b20      	ldr	r3, [pc, #128]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b008:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b00a:	4b1e      	ldr	r3, [pc, #120]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b00c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b00e:	4a1d      	ldr	r2, [pc, #116]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b014:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b016:	4b1b      	ldr	r3, [pc, #108]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b01a:	4a1a      	ldr	r2, [pc, #104]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b01c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b020:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b022:	4a18      	ldr	r2, [pc, #96]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b028:	4b16      	ldr	r3, [pc, #88]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b01      	cmp	r3, #1
 800b032:	d114      	bne.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b034:	f7fa fb5c 	bl	80056f0 <HAL_GetTick>
 800b038:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b03a:	e00a      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b03c:	f7fa fb58 	bl	80056f0 <HAL_GetTick>
 800b040:	4602      	mov	r2, r0
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d901      	bls.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e319      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b052:	4b0c      	ldr	r3, [pc, #48]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0ee      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b06a:	d111      	bne.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b06c:	4b05      	ldr	r3, [pc, #20]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b078:	4b04      	ldr	r3, [pc, #16]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b07a:	400b      	ands	r3, r1
 800b07c:	4901      	ldr	r1, [pc, #4]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	608b      	str	r3, [r1, #8]
 800b082:	e00b      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b084:	40023800 	.word	0x40023800
 800b088:	40007000 	.word	0x40007000
 800b08c:	0ffffcff 	.word	0x0ffffcff
 800b090:	4baa      	ldr	r3, [pc, #680]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	4aa9      	ldr	r2, [pc, #676]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b096:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b09a:	6093      	str	r3, [r2, #8]
 800b09c:	4ba7      	ldr	r3, [pc, #668]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b09e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0a8:	49a4      	ldr	r1, [pc, #656]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0310 	and.w	r3, r3, #16
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d010      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b0ba:	4ba0      	ldr	r3, [pc, #640]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0c0:	4a9e      	ldr	r2, [pc, #632]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b0ca:	4b9c      	ldr	r3, [pc, #624]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d4:	4999      	ldr	r1, [pc, #612]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00a      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b0e8:	4b94      	ldr	r3, [pc, #592]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0f6:	4991      	ldr	r1, [pc, #580]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00a      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b10a:	4b8c      	ldr	r3, [pc, #560]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b110:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b118:	4988      	ldr	r1, [pc, #544]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b12c:	4b83      	ldr	r3, [pc, #524]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b132:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b13a:	4980      	ldr	r1, [pc, #512]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b14e:	4b7b      	ldr	r3, [pc, #492]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b154:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b15c:	4977      	ldr	r1, [pc, #476]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00a      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b170:	4b72      	ldr	r3, [pc, #456]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b176:	f023 0203 	bic.w	r2, r3, #3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b17e:	496f      	ldr	r1, [pc, #444]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b180:	4313      	orrs	r3, r2
 800b182:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b192:	4b6a      	ldr	r3, [pc, #424]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b198:	f023 020c 	bic.w	r2, r3, #12
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1a0:	4966      	ldr	r1, [pc, #408]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00a      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b1b4:	4b61      	ldr	r3, [pc, #388]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1c2:	495e      	ldr	r1, [pc, #376]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b1d6:	4b59      	ldr	r3, [pc, #356]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1dc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1e4:	4955      	ldr	r1, [pc, #340]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00a      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b1f8:	4b50      	ldr	r3, [pc, #320]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b206:	494d      	ldr	r1, [pc, #308]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b21a:	4b48      	ldr	r3, [pc, #288]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b220:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b228:	4944      	ldr	r1, [pc, #272]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00a      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b23c:	4b3f      	ldr	r3, [pc, #252]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b242:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b24a:	493c      	ldr	r1, [pc, #240]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b25e:	4b37      	ldr	r3, [pc, #220]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b264:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b26c:	4933      	ldr	r1, [pc, #204]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00a      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b280:	4b2e      	ldr	r3, [pc, #184]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b286:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b28e:	492b      	ldr	r1, [pc, #172]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b290:	4313      	orrs	r3, r2
 800b292:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d011      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b2a2:	4b26      	ldr	r3, [pc, #152]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2a8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2b0:	4922      	ldr	r1, [pc, #136]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2c0:	d101      	bne.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 0308 	and.w	r3, r3, #8
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2e2:	4b16      	ldr	r3, [pc, #88]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2f0:	4912      	ldr	r1, [pc, #72]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00b      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b304:	4b0d      	ldr	r3, [pc, #52]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b30a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b314:	4909      	ldr	r1, [pc, #36]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b316:	4313      	orrs	r3, r2
 800b318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d006      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 80d9 	beq.w	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b330:	4b02      	ldr	r3, [pc, #8]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a01      	ldr	r2, [pc, #4]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b336:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b33a:	e001      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b33c:	40023800 	.word	0x40023800
 800b340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b342:	f7fa f9d5 	bl	80056f0 <HAL_GetTick>
 800b346:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b348:	e008      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b34a:	f7fa f9d1 	bl	80056f0 <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	2b64      	cmp	r3, #100	@ 0x64
 800b356:	d901      	bls.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b358:	2303      	movs	r3, #3
 800b35a:	e194      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b35c:	4b6c      	ldr	r3, [pc, #432]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1f0      	bne.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0301 	and.w	r3, r3, #1
 800b370:	2b00      	cmp	r3, #0
 800b372:	d021      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d11d      	bne.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b37c:	4b64      	ldr	r3, [pc, #400]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b382:	0c1b      	lsrs	r3, r3, #16
 800b384:	f003 0303 	and.w	r3, r3, #3
 800b388:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b38a:	4b61      	ldr	r3, [pc, #388]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b38c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b390:	0e1b      	lsrs	r3, r3, #24
 800b392:	f003 030f 	and.w	r3, r3, #15
 800b396:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	019a      	lsls	r2, r3, #6
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	041b      	lsls	r3, r3, #16
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	061b      	lsls	r3, r3, #24
 800b3a8:	431a      	orrs	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	071b      	lsls	r3, r3, #28
 800b3b0:	4957      	ldr	r1, [pc, #348]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d004      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3cc:	d00a      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d02e      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3e2:	d129      	bne.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b3e4:	4b4a      	ldr	r3, [pc, #296]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3ea:	0c1b      	lsrs	r3, r3, #16
 800b3ec:	f003 0303 	and.w	r3, r3, #3
 800b3f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b3f2:	4b47      	ldr	r3, [pc, #284]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3f8:	0f1b      	lsrs	r3, r3, #28
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	019a      	lsls	r2, r3, #6
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	041b      	lsls	r3, r3, #16
 800b40a:	431a      	orrs	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	061b      	lsls	r3, r3, #24
 800b412:	431a      	orrs	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	071b      	lsls	r3, r3, #28
 800b418:	493d      	ldr	r1, [pc, #244]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b41a:	4313      	orrs	r3, r2
 800b41c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b420:	4b3b      	ldr	r3, [pc, #236]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b426:	f023 021f 	bic.w	r2, r3, #31
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42e:	3b01      	subs	r3, #1
 800b430:	4937      	ldr	r1, [pc, #220]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b432:	4313      	orrs	r3, r2
 800b434:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01d      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b444:	4b32      	ldr	r3, [pc, #200]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b44a:	0e1b      	lsrs	r3, r3, #24
 800b44c:	f003 030f 	and.w	r3, r3, #15
 800b450:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b452:	4b2f      	ldr	r3, [pc, #188]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b458:	0f1b      	lsrs	r3, r3, #28
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	019a      	lsls	r2, r3, #6
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	041b      	lsls	r3, r3, #16
 800b46c:	431a      	orrs	r2, r3
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	061b      	lsls	r3, r3, #24
 800b472:	431a      	orrs	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	071b      	lsls	r3, r3, #28
 800b478:	4925      	ldr	r1, [pc, #148]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b47a:	4313      	orrs	r3, r2
 800b47c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d011      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	019a      	lsls	r2, r3, #6
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	041b      	lsls	r3, r3, #16
 800b498:	431a      	orrs	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	061b      	lsls	r3, r3, #24
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	071b      	lsls	r3, r3, #28
 800b4a8:	4919      	ldr	r1, [pc, #100]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b4b0:	4b17      	ldr	r3, [pc, #92]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a16      	ldr	r2, [pc, #88]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b4ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4bc:	f7fa f918 	bl	80056f0 <HAL_GetTick>
 800b4c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b4c2:	e008      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b4c4:	f7fa f914 	bl	80056f0 <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b64      	cmp	r3, #100	@ 0x64
 800b4d0:	d901      	bls.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e0d7      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0f0      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	f040 80cd 	bne.w	800b684 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b4ea:	4b09      	ldr	r3, [pc, #36]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a08      	ldr	r2, [pc, #32]	@ (800b510 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4f6:	f7fa f8fb 	bl	80056f0 <HAL_GetTick>
 800b4fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b4fc:	e00a      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b4fe:	f7fa f8f7 	bl	80056f0 <HAL_GetTick>
 800b502:	4602      	mov	r2, r0
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	1ad3      	subs	r3, r2, r3
 800b508:	2b64      	cmp	r3, #100	@ 0x64
 800b50a:	d903      	bls.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e0ba      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b510:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b514:	4b5e      	ldr	r3, [pc, #376]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b51c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b520:	d0ed      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b532:	2b00      	cmp	r3, #0
 800b534:	d009      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d02e      	beq.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b546:	2b00      	cmp	r3, #0
 800b548:	d12a      	bne.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b54a:	4b51      	ldr	r3, [pc, #324]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b550:	0c1b      	lsrs	r3, r3, #16
 800b552:	f003 0303 	and.w	r3, r3, #3
 800b556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b558:	4b4d      	ldr	r3, [pc, #308]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b55e:	0f1b      	lsrs	r3, r3, #28
 800b560:	f003 0307 	and.w	r3, r3, #7
 800b564:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	019a      	lsls	r2, r3, #6
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	041b      	lsls	r3, r3, #16
 800b570:	431a      	orrs	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	061b      	lsls	r3, r3, #24
 800b578:	431a      	orrs	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	071b      	lsls	r3, r3, #28
 800b57e:	4944      	ldr	r1, [pc, #272]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b580:	4313      	orrs	r3, r2
 800b582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b586:	4b42      	ldr	r3, [pc, #264]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b58c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b594:	3b01      	subs	r3, #1
 800b596:	021b      	lsls	r3, r3, #8
 800b598:	493d      	ldr	r1, [pc, #244]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b59a:	4313      	orrs	r3, r2
 800b59c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d022      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5b4:	d11d      	bne.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b5b6:	4b36      	ldr	r3, [pc, #216]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5bc:	0e1b      	lsrs	r3, r3, #24
 800b5be:	f003 030f 	and.w	r3, r3, #15
 800b5c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b5c4:	4b32      	ldr	r3, [pc, #200]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ca:	0f1b      	lsrs	r3, r3, #28
 800b5cc:	f003 0307 	and.w	r3, r3, #7
 800b5d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	019a      	lsls	r2, r3, #6
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	041b      	lsls	r3, r3, #16
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	061b      	lsls	r3, r3, #24
 800b5e4:	431a      	orrs	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	071b      	lsls	r3, r3, #28
 800b5ea:	4929      	ldr	r1, [pc, #164]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0308 	and.w	r3, r3, #8
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d028      	beq.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b5fe:	4b24      	ldr	r3, [pc, #144]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b604:	0e1b      	lsrs	r3, r3, #24
 800b606:	f003 030f 	and.w	r3, r3, #15
 800b60a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b60c:	4b20      	ldr	r3, [pc, #128]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b612:	0c1b      	lsrs	r3, r3, #16
 800b614:	f003 0303 	and.w	r3, r3, #3
 800b618:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	019a      	lsls	r2, r3, #6
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	041b      	lsls	r3, r3, #16
 800b624:	431a      	orrs	r2, r3
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	061b      	lsls	r3, r3, #24
 800b62a:	431a      	orrs	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	071b      	lsls	r3, r3, #28
 800b632:	4917      	ldr	r1, [pc, #92]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b634:	4313      	orrs	r3, r2
 800b636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b63a:	4b15      	ldr	r3, [pc, #84]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b63c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b640:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b648:	4911      	ldr	r1, [pc, #68]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b64a:	4313      	orrs	r3, r2
 800b64c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b650:	4b0f      	ldr	r3, [pc, #60]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a0e      	ldr	r2, [pc, #56]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b65a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b65c:	f7fa f848 	bl	80056f0 <HAL_GetTick>
 800b660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b662:	e008      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b664:	f7fa f844 	bl	80056f0 <HAL_GetTick>
 800b668:	4602      	mov	r2, r0
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	2b64      	cmp	r3, #100	@ 0x64
 800b670:	d901      	bls.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	e007      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b676:	4b06      	ldr	r3, [pc, #24]	@ (800b690 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b67e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b682:	d1ef      	bne.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	40023800 	.word	0x40023800

0800b694 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b6b2:	f040 808d 	bne.w	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b6b6:	4b93      	ldr	r3, [pc, #588]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b6c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6cc:	d07c      	beq.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6d4:	d87b      	bhi.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6e2:	d039      	beq.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b6e4:	e073      	b.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b6e6:	4b87      	ldr	r3, [pc, #540]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d108      	bne.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b6f2:	4b84      	ldr	r3, [pc, #528]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6fa:	4a83      	ldr	r2, [pc, #524]	@ (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b700:	613b      	str	r3, [r7, #16]
 800b702:	e007      	b.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b704:	4b7f      	ldr	r3, [pc, #508]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b70c:	4a7f      	ldr	r2, [pc, #508]	@ (800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b70e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b712:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b714:	4b7b      	ldr	r3, [pc, #492]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b71a:	0e1b      	lsrs	r3, r3, #24
 800b71c:	f003 030f 	and.w	r3, r3, #15
 800b720:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b722:	4b78      	ldr	r3, [pc, #480]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b728:	099b      	lsrs	r3, r3, #6
 800b72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	fb03 f202 	mul.w	r2, r3, r2
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	fbb2 f3f3 	udiv	r3, r2, r3
 800b73a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b73c:	4b71      	ldr	r3, [pc, #452]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b73e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b742:	0a1b      	lsrs	r3, r3, #8
 800b744:	f003 031f 	and.w	r3, r3, #31
 800b748:	3301      	adds	r3, #1
 800b74a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	fbb2 f3f3 	udiv	r3, r2, r3
 800b754:	617b      	str	r3, [r7, #20]
        break;
 800b756:	e03b      	b.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b758:	4b6a      	ldr	r3, [pc, #424]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d108      	bne.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b764:	4b67      	ldr	r3, [pc, #412]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b76c:	4a66      	ldr	r2, [pc, #408]	@ (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b772:	613b      	str	r3, [r7, #16]
 800b774:	e007      	b.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b776:	4b63      	ldr	r3, [pc, #396]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b77e:	4a63      	ldr	r2, [pc, #396]	@ (800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b780:	fbb2 f3f3 	udiv	r3, r2, r3
 800b784:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b786:	4b5f      	ldr	r3, [pc, #380]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b78c:	0e1b      	lsrs	r3, r3, #24
 800b78e:	f003 030f 	and.w	r3, r3, #15
 800b792:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b794:	4b5b      	ldr	r3, [pc, #364]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b79a:	099b      	lsrs	r3, r3, #6
 800b79c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	fb03 f202 	mul.w	r2, r3, r2
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ac:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b7ae:	4b55      	ldr	r3, [pc, #340]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7b4:	f003 031f 	and.w	r3, r3, #31
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c4:	617b      	str	r3, [r7, #20]
        break;
 800b7c6:	e003      	b.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b7c8:	4b51      	ldr	r3, [pc, #324]	@ (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b7ca:	617b      	str	r3, [r7, #20]
        break;
 800b7cc:	e000      	b.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b7ce:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7d6:	f040 808d 	bne.w	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b7da:	4b4a      	ldr	r3, [pc, #296]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7e0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b7e8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7f0:	d07c      	beq.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7f8:	d87b      	bhi.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d004      	beq.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b806:	d039      	beq.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b808:	e073      	b.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b80a:	4b3e      	ldr	r3, [pc, #248]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d108      	bne.n	800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b816:	4b3b      	ldr	r3, [pc, #236]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b81e:	4a3a      	ldr	r2, [pc, #232]	@ (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b820:	fbb2 f3f3 	udiv	r3, r2, r3
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	e007      	b.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b828:	4b36      	ldr	r3, [pc, #216]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b830:	4a36      	ldr	r2, [pc, #216]	@ (800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b832:	fbb2 f3f3 	udiv	r3, r2, r3
 800b836:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b838:	4b32      	ldr	r3, [pc, #200]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b83e:	0e1b      	lsrs	r3, r3, #24
 800b840:	f003 030f 	and.w	r3, r3, #15
 800b844:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b846:	4b2f      	ldr	r3, [pc, #188]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b84c:	099b      	lsrs	r3, r3, #6
 800b84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	fb03 f202 	mul.w	r2, r3, r2
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b85e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b860:	4b28      	ldr	r3, [pc, #160]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b866:	0a1b      	lsrs	r3, r3, #8
 800b868:	f003 031f 	and.w	r3, r3, #31
 800b86c:	3301      	adds	r3, #1
 800b86e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	fbb2 f3f3 	udiv	r3, r2, r3
 800b878:	617b      	str	r3, [r7, #20]
        break;
 800b87a:	e03b      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b87c:	4b21      	ldr	r3, [pc, #132]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d108      	bne.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b888:	4b1e      	ldr	r3, [pc, #120]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b890:	4a1d      	ldr	r2, [pc, #116]	@ (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b892:	fbb2 f3f3 	udiv	r3, r2, r3
 800b896:	613b      	str	r3, [r7, #16]
 800b898:	e007      	b.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b89a:	4b1a      	ldr	r3, [pc, #104]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8a2:	4a1a      	ldr	r2, [pc, #104]	@ (800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b8aa:	4b16      	ldr	r3, [pc, #88]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8b0:	0e1b      	lsrs	r3, r3, #24
 800b8b2:	f003 030f 	and.w	r3, r3, #15
 800b8b6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b8b8:	4b12      	ldr	r3, [pc, #72]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8be:	099b      	lsrs	r3, r3, #6
 800b8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	fb03 f202 	mul.w	r2, r3, r2
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8d8:	f003 031f 	and.w	r3, r3, #31
 800b8dc:	3301      	adds	r3, #1
 800b8de:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e8:	617b      	str	r3, [r7, #20]
        break;
 800b8ea:	e003      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8ec:	4b08      	ldr	r3, [pc, #32]	@ (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b8ee:	617b      	str	r3, [r7, #20]
        break;
 800b8f0:	e000      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b8f2:	bf00      	nop
      }
    }
  }

  return frequency;
 800b8f4:	697b      	ldr	r3, [r7, #20]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	371c      	adds	r7, #28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	40023800 	.word	0x40023800
 800b908:	00f42400 	.word	0x00f42400
 800b90c:	017d7840 	.word	0x017d7840
 800b910:	00bb8000 	.word	0x00bb8000

0800b914 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e071      	b.n	800ba0a <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7f5b      	ldrb	r3, [r3, #29]
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d105      	bne.n	800b93c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7f8 fb3a 	bl	8003fb0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2202      	movs	r2, #2
 800b940:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f003 0310 	and.w	r3, r3, #16
 800b94c:	2b10      	cmp	r3, #16
 800b94e:	d053      	beq.n	800b9f8 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	22ca      	movs	r2, #202	@ 0xca
 800b956:	625a      	str	r2, [r3, #36]	@ 0x24
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2253      	movs	r2, #83	@ 0x53
 800b95e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fb75 	bl	800c050 <RTC_EnterInitMode>
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d12a      	bne.n	800b9c6 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6899      	ldr	r1, [r3, #8]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	4b26      	ldr	r3, [pc, #152]	@ (800ba14 <HAL_RTC_Init+0x100>)
 800b97c:	400b      	ands	r3, r1
 800b97e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6899      	ldr	r1, [r3, #8]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685a      	ldr	r2, [r3, #4]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	431a      	orrs	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	431a      	orrs	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	68d2      	ldr	r2, [r2, #12]
 800b9a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6919      	ldr	r1, [r3, #16]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	041a      	lsls	r2, r3, #16
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	430a      	orrs	r2, r1
 800b9ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fb7e 	bl	800c0be <RTC_ExitInitMode>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d110      	bne.n	800b9ee <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0208 	bic.w	r2, r2, #8
 800b9da:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	699a      	ldr	r2, [r3, #24]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	430a      	orrs	r2, r1
 800b9ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	22ff      	movs	r2, #255	@ 0xff
 800b9f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b9f6:	e001      	b.n	800b9fc <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d102      	bne.n	800ba08 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	ff8fffbf 	.word	0xff8fffbf

0800ba18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ba18:	b590      	push	{r4, r7, lr}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	7f1b      	ldrb	r3, [r3, #28]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_RTC_SetTime+0x1c>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e085      	b.n	800bb40 <HAL_RTC_SetTime+0x128>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2201      	movs	r2, #1
 800ba38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2202      	movs	r2, #2
 800ba3e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d126      	bne.n	800ba94 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d102      	bne.n	800ba5a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2200      	movs	r2, #0
 800ba58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 fb52 	bl	800c108 <RTC_ByteToBcd2>
 800ba64:	4603      	mov	r3, r0
 800ba66:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	785b      	ldrb	r3, [r3, #1]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 fb4b 	bl	800c108 <RTC_ByteToBcd2>
 800ba72:	4603      	mov	r3, r0
 800ba74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ba76:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	789b      	ldrb	r3, [r3, #2]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 fb43 	bl	800c108 <RTC_ByteToBcd2>
 800ba82:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ba84:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	78db      	ldrb	r3, [r3, #3]
 800ba8c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	617b      	str	r3, [r7, #20]
 800ba92:	e018      	b.n	800bac6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d102      	bne.n	800baa8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	2200      	movs	r2, #0
 800baa6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	785b      	ldrb	r3, [r3, #1]
 800bab2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bab4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800baba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	78db      	ldrb	r3, [r3, #3]
 800bac0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bac2:	4313      	orrs	r3, r2
 800bac4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	22ca      	movs	r2, #202	@ 0xca
 800bacc:	625a      	str	r2, [r3, #36]	@ 0x24
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2253      	movs	r2, #83	@ 0x53
 800bad4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f000 faba 	bl	800c050 <RTC_EnterInitMode>
 800badc:	4603      	mov	r3, r0
 800bade:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bae0:	7cfb      	ldrb	r3, [r7, #19]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d11e      	bne.n	800bb24 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	6979      	ldr	r1, [r7, #20]
 800baec:	4b16      	ldr	r3, [pc, #88]	@ (800bb48 <HAL_RTC_SetTime+0x130>)
 800baee:	400b      	ands	r3, r1
 800baf0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bb00:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	6899      	ldr	r1, [r3, #8]
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	431a      	orrs	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	430a      	orrs	r2, r1
 800bb18:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f000 facf 	bl	800c0be <RTC_ExitInitMode>
 800bb20:	4603      	mov	r3, r0
 800bb22:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bb24:	7cfb      	ldrb	r3, [r7, #19]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	22ff      	movs	r2, #255	@ 0xff
 800bb36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	771a      	strb	r2, [r3, #28]

  return status;
 800bb3e:	7cfb      	ldrb	r3, [r7, #19]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd90      	pop	{r4, r7, pc}
 800bb48:	007f7f7f 	.word	0x007f7f7f

0800bb4c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	4b22      	ldr	r3, [pc, #136]	@ (800bc04 <HAL_RTC_GetTime+0xb8>)
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	0c1b      	lsrs	r3, r3, #16
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	0a1b      	lsrs	r3, r3, #8
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	0d9b      	lsrs	r3, r3, #22
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d11a      	bne.n	800bbfa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 fabb 	bl	800c144 <RTC_Bcd2ToByte>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	785b      	ldrb	r3, [r3, #1]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 fab2 	bl	800c144 <RTC_Bcd2ToByte>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	789b      	ldrb	r3, [r3, #2]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 faa9 	bl	800c144 <RTC_Bcd2ToByte>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	007f7f7f 	.word	0x007f7f7f

0800bc08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bc08:	b590      	push	{r4, r7, lr}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bc14:	2300      	movs	r3, #0
 800bc16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	7f1b      	ldrb	r3, [r3, #28]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d101      	bne.n	800bc24 <HAL_RTC_SetDate+0x1c>
 800bc20:	2302      	movs	r3, #2
 800bc22:	e06f      	b.n	800bd04 <HAL_RTC_SetDate+0xfc>
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2201      	movs	r2, #1
 800bc28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2202      	movs	r2, #2
 800bc2e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10e      	bne.n	800bc54 <HAL_RTC_SetDate+0x4c>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	785b      	ldrb	r3, [r3, #1]
 800bc3a:	f003 0310 	and.w	r3, r3, #16
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d008      	beq.n	800bc54 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	785b      	ldrb	r3, [r3, #1]
 800bc46:	f023 0310 	bic.w	r3, r3, #16
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	330a      	adds	r3, #10
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d11c      	bne.n	800bc94 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	78db      	ldrb	r3, [r3, #3]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fa52 	bl	800c108 <RTC_ByteToBcd2>
 800bc64:	4603      	mov	r3, r0
 800bc66:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	785b      	ldrb	r3, [r3, #1]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 fa4b 	bl	800c108 <RTC_ByteToBcd2>
 800bc72:	4603      	mov	r3, r0
 800bc74:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bc76:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	789b      	ldrb	r3, [r3, #2]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 fa43 	bl	800c108 <RTC_ByteToBcd2>
 800bc82:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bc84:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	617b      	str	r3, [r7, #20]
 800bc92:	e00e      	b.n	800bcb2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	78db      	ldrb	r3, [r3, #3]
 800bc98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	785b      	ldrb	r3, [r3, #1]
 800bc9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bca0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bca6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	22ca      	movs	r2, #202	@ 0xca
 800bcb8:	625a      	str	r2, [r3, #36]	@ 0x24
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2253      	movs	r2, #83	@ 0x53
 800bcc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f000 f9c4 	bl	800c050 <RTC_EnterInitMode>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bccc:	7cfb      	ldrb	r3, [r7, #19]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	6979      	ldr	r1, [r7, #20]
 800bcd8:	4b0c      	ldr	r3, [pc, #48]	@ (800bd0c <HAL_RTC_SetDate+0x104>)
 800bcda:	400b      	ands	r3, r1
 800bcdc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 f9ed 	bl	800c0be <RTC_ExitInitMode>
 800bce4:	4603      	mov	r3, r0
 800bce6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bce8:	7cfb      	ldrb	r3, [r7, #19]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d102      	bne.n	800bcf4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	22ff      	movs	r2, #255	@ 0xff
 800bcfa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	771a      	strb	r2, [r3, #28]

  return status;
 800bd02:	7cfb      	ldrb	r3, [r7, #19]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd90      	pop	{r4, r7, pc}
 800bd0c:	00ffff3f 	.word	0x00ffff3f

0800bd10 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	4b21      	ldr	r3, [pc, #132]	@ (800bdac <HAL_RTC_GetDate+0x9c>)
 800bd28:	4013      	ands	r3, r2
 800bd2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	0c1b      	lsrs	r3, r3, #16
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	0a1b      	lsrs	r3, r3, #8
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	f003 031f 	and.w	r3, r3, #31
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	0b5b      	lsrs	r3, r3, #13
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	f003 0307 	and.w	r3, r3, #7
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d11a      	bne.n	800bda0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	78db      	ldrb	r3, [r3, #3]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 f9e8 	bl	800c144 <RTC_Bcd2ToByte>
 800bd74:	4603      	mov	r3, r0
 800bd76:	461a      	mov	r2, r3
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	785b      	ldrb	r3, [r3, #1]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 f9df 	bl	800c144 <RTC_Bcd2ToByte>
 800bd86:	4603      	mov	r3, r0
 800bd88:	461a      	mov	r2, r3
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	789b      	ldrb	r3, [r3, #2]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f000 f9d6 	bl	800c144 <RTC_Bcd2ToByte>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	00ffff3f 	.word	0x00ffff3f

0800bdb0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800bdb0:	b590      	push	{r4, r7, lr}
 800bdb2:	b089      	sub	sp, #36	@ 0x24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	7f1b      	ldrb	r3, [r3, #28]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d101      	bne.n	800bdd4 <HAL_RTC_SetAlarm+0x24>
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	e113      	b.n	800bffc <HAL_RTC_SetAlarm+0x24c>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2202      	movs	r2, #2
 800bdde:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d137      	bne.n	800be56 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d102      	bne.n	800bdfa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 f982 	bl	800c108 <RTC_ByteToBcd2>
 800be04:	4603      	mov	r3, r0
 800be06:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	785b      	ldrb	r3, [r3, #1]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 f97b 	bl	800c108 <RTC_ByteToBcd2>
 800be12:	4603      	mov	r3, r0
 800be14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800be16:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	789b      	ldrb	r3, [r3, #2]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 f973 	bl	800c108 <RTC_ByteToBcd2>
 800be22:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800be24:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	78db      	ldrb	r3, [r3, #3]
 800be2c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800be2e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 f965 	bl	800c108 <RTC_ByteToBcd2>
 800be3e:	4603      	mov	r3, r0
 800be40:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800be42:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800be4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800be50:	4313      	orrs	r3, r2
 800be52:	61fb      	str	r3, [r7, #28]
 800be54:	e023      	b.n	800be9e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2200      	movs	r2, #0
 800be68:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	785b      	ldrb	r3, [r3, #1]
 800be74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800be76:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800be7c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	78db      	ldrb	r3, [r3, #3]
 800be82:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800be84:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be8c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800be8e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800be94:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800be9a:	4313      	orrs	r3, r2
 800be9c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bea6:	4313      	orrs	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	22ca      	movs	r2, #202	@ 0xca
 800beb0:	625a      	str	r2, [r3, #36]	@ 0x24
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2253      	movs	r2, #83	@ 0x53
 800beb8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bec2:	d148      	bne.n	800bf56 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689a      	ldr	r2, [r3, #8]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bed2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	689a      	ldr	r2, [r3, #8]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bee2:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	b2da      	uxtb	r2, r3
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800bef4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bef6:	f7f9 fbfb 	bl	80056f0 <HAL_GetTick>
 800befa:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800befc:	e013      	b.n	800bf26 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800befe:	f7f9 fbf7 	bl	80056f0 <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf0c:	d90b      	bls.n	800bf26 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	22ff      	movs	r2, #255	@ 0xff
 800bf14:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2203      	movs	r2, #3
 800bf1a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bf22:	2303      	movs	r3, #3
 800bf24:	e06a      	b.n	800bffc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d0e4      	beq.n	800befe <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	69fa      	ldr	r2, [r7, #28]
 800bf3a:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689a      	ldr	r2, [r3, #8]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf52:	609a      	str	r2, [r3, #8]
 800bf54:	e047      	b.n	800bfe6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	689a      	ldr	r2, [r3, #8]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bf64:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	689a      	ldr	r2, [r3, #8]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bf74:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bf86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bf88:	f7f9 fbb2 	bl	80056f0 <HAL_GetTick>
 800bf8c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bf8e:	e013      	b.n	800bfb8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf90:	f7f9 fbae 	bl	80056f0 <HAL_GetTick>
 800bf94:	4602      	mov	r2, r0
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf9e:	d90b      	bls.n	800bfb8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	22ff      	movs	r2, #255	@ 0xff
 800bfa6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2203      	movs	r2, #3
 800bfac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e021      	b.n	800bffc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f003 0302 	and.w	r3, r3, #2
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0e4      	beq.n	800bf90 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	69fa      	ldr	r2, [r7, #28]
 800bfcc:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	689a      	ldr	r2, [r3, #8]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfe4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	22ff      	movs	r2, #255	@ 0xff
 800bfec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2201      	movs	r2, #1
 800bff2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3724      	adds	r7, #36	@ 0x24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd90      	pop	{r4, r7, pc}

0800c004 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a0d      	ldr	r2, [pc, #52]	@ (800c04c <HAL_RTC_WaitForSynchro+0x48>)
 800c016:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c018:	f7f9 fb6a 	bl	80056f0 <HAL_GetTick>
 800c01c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c01e:	e009      	b.n	800c034 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c020:	f7f9 fb66 	bl	80056f0 <HAL_GetTick>
 800c024:	4602      	mov	r2, r0
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	1ad3      	subs	r3, r2, r3
 800c02a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c02e:	d901      	bls.n	800c034 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c030:	2303      	movs	r3, #3
 800c032:	e007      	b.n	800c044 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	f003 0320 	and.w	r3, r3, #32
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d0ee      	beq.n	800c020 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	0001ff5f 	.word	0x0001ff5f

0800c050 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c058:	2300      	movs	r3, #0
 800c05a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d122      	bne.n	800c0b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68da      	ldr	r2, [r3, #12]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c07c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c07e:	f7f9 fb37 	bl	80056f0 <HAL_GetTick>
 800c082:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c084:	e00c      	b.n	800c0a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c086:	f7f9 fb33 	bl	80056f0 <HAL_GetTick>
 800c08a:	4602      	mov	r2, r0
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c094:	d904      	bls.n	800c0a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2204      	movs	r2, #4
 800c09a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d102      	bne.n	800c0b4 <RTC_EnterInitMode+0x64>
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d1e8      	bne.n	800c086 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f003 0320 	and.w	r3, r3, #32
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10a      	bne.n	800c0fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff ff8b 	bl	800c004 <HAL_RTC_WaitForSynchro>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d004      	beq.n	800c0fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2204      	movs	r2, #4
 800c0f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c116:	e005      	b.n	800c124 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3301      	adds	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	3b0a      	subs	r3, #10
 800c122:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c124:	79fb      	ldrb	r3, [r7, #7]
 800c126:	2b09      	cmp	r3, #9
 800c128:	d8f6      	bhi.n	800c118 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	011b      	lsls	r3, r3, #4
 800c130:	b2da      	uxtb	r2, r3
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	4313      	orrs	r3, r2
 800c136:	b2db      	uxtb	r3, r3
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3714      	adds	r7, #20
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800c14e:	2300      	movs	r3, #0
 800c150:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	091b      	lsrs	r3, r3, #4
 800c156:	b2db      	uxtb	r3, r3
 800c158:	461a      	mov	r2, r3
 800c15a:	4613      	mov	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4413      	add	r3, r2
 800c160:	005b      	lsls	r3, r3, #1
 800c162:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	b2da      	uxtb	r2, r3
 800c168:	79fb      	ldrb	r3, [r7, #7]
 800c16a:	f003 030f 	and.w	r3, r3, #15
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	4413      	add	r3, r2
 800c172:	b2db      	uxtb	r3, r3
}
 800c174:	4618      	mov	r0, r3
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c180:	b480      	push	{r7}
 800c182:	b087      	sub	sp, #28
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c18c:	2300      	movs	r3, #0
 800c18e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	7f1b      	ldrb	r3, [r3, #28]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d101      	bne.n	800c19c <HAL_RTCEx_SetTimeStamp+0x1c>
 800c198:	2302      	movs	r3, #2
 800c19a:	e050      	b.n	800c23e <HAL_RTCEx_SetTimeStamp+0xbe>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f022 0206 	bic.w	r2, r2, #6
 800c1b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	430a      	orrs	r2, r1
 800c1c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	689a      	ldr	r2, [r3, #8]
 800c1ce:	4b1f      	ldr	r3, [pc, #124]	@ (800c24c <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	22ca      	movs	r2, #202	@ 0xca
 800c1e2:	625a      	str	r2, [r3, #36]	@ 0x24
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2253      	movs	r2, #83	@ 0x53
 800c1ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c204:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c216:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689a      	ldr	r2, [r3, #8]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c226:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	22ff      	movs	r2, #255	@ 0xff
 800c22e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2201      	movs	r2, #1
 800c234:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	371c      	adds	r7, #28
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	fffff7f7 	.word	0xfffff7f7

0800c250 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c258:	2300      	movs	r3, #0
 800c25a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e156      	b.n	800c51c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c274:	b2db      	uxtb	r3, r3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7f8 faa8 	bl	80047d8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2202      	movs	r2, #2
 800c28c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f95b 	bl	800c54c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d00c      	beq.n	800c2b8 <HAL_SAI_Init+0x68>
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d80d      	bhi.n	800c2be <HAL_SAI_Init+0x6e>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_SAI_Init+0x5c>
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d003      	beq.n	800c2b2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c2aa:	e008      	b.n	800c2be <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
      break;
 800c2b0:	e006      	b.n	800c2c0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c2b2:	2310      	movs	r3, #16
 800c2b4:	61fb      	str	r3, [r7, #28]
      break;
 800c2b6:	e003      	b.n	800c2c0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c2b8:	2320      	movs	r3, #32
 800c2ba:	61fb      	str	r3, [r7, #28]
      break;
 800c2bc:	e000      	b.n	800c2c0 <HAL_SAI_Init+0x70>
      break;
 800c2be:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	2b03      	cmp	r3, #3
 800c2c6:	d81e      	bhi.n	800c306 <HAL_SAI_Init+0xb6>
 800c2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d0 <HAL_SAI_Init+0x80>)
 800c2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ce:	bf00      	nop
 800c2d0:	0800c2e1 	.word	0x0800c2e1
 800c2d4:	0800c2e7 	.word	0x0800c2e7
 800c2d8:	0800c2ef 	.word	0x0800c2ef
 800c2dc:	0800c2f7 	.word	0x0800c2f7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	617b      	str	r3, [r7, #20]
    }
    break;
 800c2e4:	e010      	b.n	800c308 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c2e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2ea:	617b      	str	r3, [r7, #20]
    }
    break;
 800c2ec:	e00c      	b.n	800c308 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c2ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2f2:	617b      	str	r3, [r7, #20]
    }
    break;
 800c2f4:	e008      	b.n	800c308 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c2f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2fa:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	f043 0301 	orr.w	r3, r3, #1
 800c302:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c304:	e000      	b.n	800c308 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c306:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a85      	ldr	r2, [pc, #532]	@ (800c524 <HAL_SAI_Init+0x2d4>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d004      	beq.n	800c31c <HAL_SAI_Init+0xcc>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a84      	ldr	r2, [pc, #528]	@ (800c528 <HAL_SAI_Init+0x2d8>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d103      	bne.n	800c324 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c31c:	4a83      	ldr	r2, [pc, #524]	@ (800c52c <HAL_SAI_Init+0x2dc>)
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	6013      	str	r3, [r2, #0]
 800c322:	e002      	b.n	800c32a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c324:	4a82      	ldr	r2, [pc, #520]	@ (800c530 <HAL_SAI_Init+0x2e0>)
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d04c      	beq.n	800c3cc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a7a      	ldr	r2, [pc, #488]	@ (800c524 <HAL_SAI_Init+0x2d4>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d004      	beq.n	800c34a <HAL_SAI_Init+0xfa>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a78      	ldr	r2, [pc, #480]	@ (800c528 <HAL_SAI_Init+0x2d8>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d104      	bne.n	800c354 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c34a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c34e:	f7ff f9a1 	bl	800b694 <HAL_RCCEx_GetPeriphCLKFreq>
 800c352:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a76      	ldr	r2, [pc, #472]	@ (800c534 <HAL_SAI_Init+0x2e4>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d004      	beq.n	800c368 <HAL_SAI_Init+0x118>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a75      	ldr	r2, [pc, #468]	@ (800c538 <HAL_SAI_Init+0x2e8>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d104      	bne.n	800c372 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c368:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c36c:	f7ff f992 	bl	800b694 <HAL_RCCEx_GetPeriphCLKFreq>
 800c370:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c372:	693a      	ldr	r2, [r7, #16]
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	461a      	mov	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	69db      	ldr	r3, [r3, #28]
 800c382:	025b      	lsls	r3, r3, #9
 800c384:	fbb2 f3f3 	udiv	r3, r2, r3
 800c388:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	4a6b      	ldr	r2, [pc, #428]	@ (800c53c <HAL_SAI_Init+0x2ec>)
 800c38e:	fba2 2303 	umull	r2, r3, r2, r3
 800c392:	08da      	lsrs	r2, r3, #3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c398:	68f9      	ldr	r1, [r7, #12]
 800c39a:	4b68      	ldr	r3, [pc, #416]	@ (800c53c <HAL_SAI_Init+0x2ec>)
 800c39c:	fba3 2301 	umull	r2, r3, r3, r1
 800c3a0:	08da      	lsrs	r2, r3, #3
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	1aca      	subs	r2, r1, r3
 800c3ac:	2a08      	cmp	r2, #8
 800c3ae:	d904      	bls.n	800c3ba <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a1b      	ldr	r3, [r3, #32]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3be:	2b04      	cmp	r3, #4
 800c3c0:	d104      	bne.n	800c3cc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a1b      	ldr	r3, [r3, #32]
 800c3c6:	085a      	lsrs	r2, r3, #1
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d003      	beq.n	800c3dc <HAL_SAI_Init+0x18c>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d109      	bne.n	800c3f0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d101      	bne.n	800c3e8 <HAL_SAI_Init+0x198>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	e001      	b.n	800c3ec <HAL_SAI_Init+0x19c>
 800c3e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c3ec:	61bb      	str	r3, [r7, #24]
 800c3ee:	e008      	b.n	800c402 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d102      	bne.n	800c3fe <HAL_SAI_Init+0x1ae>
 800c3f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c3fc:	e000      	b.n	800c400 <HAL_SAI_Init+0x1b0>
 800c3fe:	2300      	movs	r3, #0
 800c400:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	6819      	ldr	r1, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	4b4c      	ldr	r3, [pc, #304]	@ (800c540 <HAL_SAI_Init+0x2f0>)
 800c40e:	400b      	ands	r3, r1
 800c410:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6819      	ldr	r1, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c420:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c426:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c42c:	431a      	orrs	r2, r3
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c43a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c446:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
 800c44c:	051b      	lsls	r3, r3, #20
 800c44e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	430a      	orrs	r2, r1
 800c456:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6859      	ldr	r1, [r3, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	4b38      	ldr	r3, [pc, #224]	@ (800c544 <HAL_SAI_Init+0x2f4>)
 800c464:	400b      	ands	r3, r1
 800c466:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	6859      	ldr	r1, [r3, #4]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	699a      	ldr	r2, [r3, #24]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c476:	431a      	orrs	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c47c:	431a      	orrs	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	430a      	orrs	r2, r1
 800c484:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6899      	ldr	r1, [r3, #8]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	4b2d      	ldr	r3, [pc, #180]	@ (800c548 <HAL_SAI_Init+0x2f8>)
 800c492:	400b      	ands	r3, r1
 800c494:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6899      	ldr	r1, [r3, #8]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4a0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c4a6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c4ac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c4b2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c4bc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	430a      	orrs	r2, r1
 800c4c4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68d9      	ldr	r1, [r3, #12]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c4d4:	400b      	ands	r3, r1
 800c4d6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68d9      	ldr	r1, [r3, #12]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4e6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c4ec:	041b      	lsls	r3, r3, #16
 800c4ee:	431a      	orrs	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	021b      	lsls	r3, r3, #8
 800c4f8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3720      	adds	r7, #32
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	40015804 	.word	0x40015804
 800c528:	40015824 	.word	0x40015824
 800c52c:	40015800 	.word	0x40015800
 800c530:	40015c00 	.word	0x40015c00
 800c534:	40015c04 	.word	0x40015c04
 800c538:	40015c24 	.word	0x40015c24
 800c53c:	cccccccd 	.word	0xcccccccd
 800c540:	ff05c010 	.word	0xff05c010
 800c544:	ffff1ff0 	.word	0xffff1ff0
 800c548:	fff88000 	.word	0xfff88000

0800c54c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c554:	4b17      	ldr	r3, [pc, #92]	@ (800c5b4 <SAI_Disable+0x68>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a17      	ldr	r2, [pc, #92]	@ (800c5b8 <SAI_Disable+0x6c>)
 800c55a:	fba2 2303 	umull	r2, r3, r2, r3
 800c55e:	0b1b      	lsrs	r3, r3, #12
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c576:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	1e5a      	subs	r2, r3, #1
 800c57c:	60fa      	str	r2, [r7, #12]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10a      	bne.n	800c598 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c588:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	72fb      	strb	r3, [r7, #11]
      break;
 800c596:	e006      	b.n	800c5a6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1e8      	bne.n	800c578 <SAI_Disable+0x2c>

  return status;
 800c5a6:	7afb      	ldrb	r3, [r7, #11]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	20000018 	.word	0x20000018
 800c5b8:	95cbec1b 	.word	0x95cbec1b

0800c5bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e022      	b.n	800c614 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d105      	bne.n	800c5e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f7f7 fd13 	bl	800400c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2203      	movs	r2, #3
 800c5ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f814 	bl	800c61c <HAL_SD_InitCard>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e00a      	b.n	800c614 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c61c:	b5b0      	push	{r4, r5, r7, lr}
 800c61e:	b08e      	sub	sp, #56	@ 0x38
 800c620:	af04      	add	r7, sp, #16
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c624:	2300      	movs	r3, #0
 800c626:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c628:	2300      	movs	r3, #0
 800c62a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c62c:	2300      	movs	r3, #0
 800c62e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c630:	2300      	movs	r3, #0
 800c632:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c634:	2300      	movs	r3, #0
 800c636:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c638:	2376      	movs	r3, #118	@ 0x76
 800c63a:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681d      	ldr	r5, [r3, #0]
 800c640:	466c      	mov	r4, sp
 800c642:	f107 0318 	add.w	r3, r7, #24
 800c646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c64a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c64e:	f107 030c 	add.w	r3, r7, #12
 800c652:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c654:	4628      	mov	r0, r5
 800c656:	f004 f877 	bl	8010748 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c668:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4618      	mov	r0, r3
 800c670:	f004 f8b4 	bl	80107dc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	685a      	ldr	r2, [r3, #4]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c682:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c684:	2002      	movs	r0, #2
 800c686:	f7f9 f83f 	bl	8005708 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 f8da 	bl	800d844 <SD_PowerON>
 800c690:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00b      	beq.n	800c6b0 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e02e      	b.n	800c70e <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fff9 	bl	800d6a8 <SD_InitCard>
 800c6b6:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6cc:	431a      	orrs	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e01b      	b.n	800c70e <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f004 f90e 	bl	8010900 <SDMMC_CmdBlockLength>
 800c6e4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00f      	beq.n	800c70c <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a09      	ldr	r2, [pc, #36]	@ (800c718 <HAL_SD_InitCard+0xfc>)
 800c6f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	e000      	b.n	800c70e <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3728      	adds	r7, #40	@ 0x28
 800c712:	46bd      	mov	sp, r7
 800c714:	bdb0      	pop	{r4, r5, r7, pc}
 800c716:	bf00      	nop
 800c718:	004005ff 	.word	0x004005ff

0800c71c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b092      	sub	sp, #72	@ 0x48
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c72a:	f7f8 ffe1 	bl	80056f0 <HAL_GetTick>
 800c72e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d107      	bne.n	800c74e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c742:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	e1bd      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b01      	cmp	r3, #1
 800c758:	f040 81b0 	bne.w	800cabc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c762:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	441a      	add	r2, r3
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d907      	bls.n	800c780 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c774:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e1a4      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2203      	movs	r2, #3
 800c784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2200      	movs	r2, #0
 800c78e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c794:	2b01      	cmp	r3, #1
 800c796:	d002      	beq.n	800c79e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79a:	025b      	lsls	r3, r3, #9
 800c79c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c79e:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	025b      	lsls	r3, r3, #9
 800c7a8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c7aa:	2390      	movs	r3, #144	@ 0x90
 800c7ac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f107 0214 	add.w	r2, r7, #20
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f004 f86f 	bl	80108a8 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d90a      	bls.n	800c7e6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f004 f8d3 	bl	8010988 <SDMMC_CmdReadMultiBlock>
 800c7e2:	6478      	str	r0, [r7, #68]	@ 0x44
 800c7e4:	e009      	b.n	800c7fa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f004 f8a6 	bl	8010944 <SDMMC_CmdReadSingleBlock>
 800c7f8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d012      	beq.n	800c826 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a7a      	ldr	r2, [pc, #488]	@ (800c9f0 <HAL_SD_ReadBlocks+0x2d4>)
 800c806:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c80c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c80e:	431a      	orrs	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c822:	2301      	movs	r3, #1
 800c824:	e151      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c82a:	e061      	b.n	800c8f0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c836:	2b00      	cmp	r3, #0
 800c838:	d03c      	beq.n	800c8b4 <HAL_SD_ReadBlocks+0x198>
 800c83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d039      	beq.n	800c8b4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c840:	2300      	movs	r3, #0
 800c842:	643b      	str	r3, [r7, #64]	@ 0x40
 800c844:	e033      	b.n	800c8ae <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f003 ffa8 	bl	80107a0 <SDMMC_ReadFIFO>
 800c850:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c854:	b2da      	uxtb	r2, r3
 800c856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c858:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85c:	3301      	adds	r3, #1
 800c85e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c862:	3b01      	subs	r3, #1
 800c864:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c868:	0a1b      	lsrs	r3, r3, #8
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c872:	3301      	adds	r3, #1
 800c874:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c878:	3b01      	subs	r3, #1
 800c87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87e:	0c1b      	lsrs	r3, r3, #16
 800c880:	b2da      	uxtb	r2, r3
 800c882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c884:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c888:	3301      	adds	r3, #1
 800c88a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c88e:	3b01      	subs	r3, #1
 800c890:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c894:	0e1b      	lsrs	r3, r3, #24
 800c896:	b2da      	uxtb	r2, r3
 800c898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89e:	3301      	adds	r3, #1
 800c8a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800c8a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8b0:	2b07      	cmp	r3, #7
 800c8b2:	d9c8      	bls.n	800c846 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c8b4:	f7f8 ff1c 	bl	80056f0 <HAL_GetTick>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d902      	bls.n	800c8ca <HAL_SD_ReadBlocks+0x1ae>
 800c8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d112      	bne.n	800c8f0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a48      	ldr	r2, [pc, #288]	@ (800c9f0 <HAL_SD_ReadBlocks+0x2d4>)
 800c8d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e0ec      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d096      	beq.n	800c82c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d022      	beq.n	800c952 <HAL_SD_ReadBlocks+0x236>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d91f      	bls.n	800c952 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c916:	2b03      	cmp	r3, #3
 800c918:	d01b      	beq.n	800c952 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4618      	mov	r0, r3
 800c920:	f004 f898 	bl	8010a54 <SDMMC_CmdStopTransfer>
 800c924:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d012      	beq.n	800c952 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a2f      	ldr	r2, [pc, #188]	@ (800c9f0 <HAL_SD_ReadBlocks+0x2d4>)
 800c932:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c93a:	431a      	orrs	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2200      	movs	r2, #0
 800c94c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	e0bb      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c958:	f003 0308 	and.w	r3, r3, #8
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d012      	beq.n	800c986 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a22      	ldr	r2, [pc, #136]	@ (800c9f0 <HAL_SD_ReadBlocks+0x2d4>)
 800c966:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c96c:	f043 0208 	orr.w	r2, r3, #8
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2200      	movs	r2, #0
 800c980:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e0a1      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c98c:	f003 0302 	and.w	r3, r3, #2
 800c990:	2b00      	cmp	r3, #0
 800c992:	d012      	beq.n	800c9ba <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a15      	ldr	r2, [pc, #84]	@ (800c9f0 <HAL_SD_ReadBlocks+0x2d4>)
 800c99a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a0:	f043 0202 	orr.w	r2, r3, #2
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e087      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c0:	f003 0320 	and.w	r3, r3, #32
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d064      	beq.n	800ca92 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a08      	ldr	r2, [pc, #32]	@ (800c9f0 <HAL_SD_ReadBlocks+0x2d4>)
 800c9ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9d4:	f043 0220 	orr.w	r2, r3, #32
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e06d      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
 800c9ee:	bf00      	nop
 800c9f0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f003 fed1 	bl	80107a0 <SDMMC_ReadFIFO>
 800c9fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800ca00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca06:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ca0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca10:	3b01      	subs	r3, #1
 800ca12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ca14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca16:	0a1b      	lsrs	r3, r3, #8
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca1c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca20:	3301      	adds	r3, #1
 800ca22:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ca24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca26:	3b01      	subs	r3, #1
 800ca28:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ca2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2c:	0c1b      	lsrs	r3, r3, #16
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca32:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca36:	3301      	adds	r3, #1
 800ca38:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ca3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ca40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca42:	0e1b      	lsrs	r3, r3, #24
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca48:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ca50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca52:	3b01      	subs	r3, #1
 800ca54:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ca56:	f7f8 fe4b 	bl	80056f0 <HAL_GetTick>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d902      	bls.n	800ca6c <HAL_SD_ReadBlocks+0x350>
 800ca66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d112      	bne.n	800ca92 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a18      	ldr	r2, [pc, #96]	@ (800cad4 <HAL_SD_ReadBlocks+0x3b8>)
 800ca72:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca78:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e01b      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <HAL_SD_ReadBlocks+0x38a>
 800caa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1a6      	bne.n	800c9f4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800caae:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	e006      	b.n	800caca <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
  }
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3748      	adds	r7, #72	@ 0x48
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	004005ff 	.word	0x004005ff

0800cad8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b092      	sub	sp, #72	@ 0x48
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
 800cae4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cae6:	f7f8 fe03 	bl	80056f0 <HAL_GetTick>
 800caea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d107      	bne.n	800cb0a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cafe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cb06:	2301      	movs	r3, #1
 800cb08:	e165      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	f040 8158 	bne.w	800cdc8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	441a      	add	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d907      	bls.n	800cb3c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb30:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e14c      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2203      	movs	r2, #3
 800cb40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d002      	beq.n	800cb5a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb56:	025b      	lsls	r3, r3, #9
 800cb58:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	025b      	lsls	r3, r3, #9
 800cb64:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cb66:	2390      	movs	r3, #144	@ 0x90
 800cb68:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cb72:	2301      	movs	r3, #1
 800cb74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f107 0218 	add.w	r2, r7, #24
 800cb7e:	4611      	mov	r1, r2
 800cb80:	4618      	mov	r0, r3
 800cb82:	f003 fe91 	bl	80108a8 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d90a      	bls.n	800cba2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2220      	movs	r2, #32
 800cb90:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f003 ff39 	bl	8010a10 <SDMMC_CmdWriteMultiBlock>
 800cb9e:	6478      	str	r0, [r7, #68]	@ 0x44
 800cba0:	e009      	b.n	800cbb6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2210      	movs	r2, #16
 800cba6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f003 ff0c 	bl	80109cc <SDMMC_CmdWriteSingleBlock>
 800cbb4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d012      	beq.n	800cbe2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a87      	ldr	r2, [pc, #540]	@ (800cde0 <HAL_SD_WriteBlocks+0x308>)
 800cbc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e0f9      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cbe6:	e065      	b.n	800ccb4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d040      	beq.n	800cc78 <HAL_SD_WriteBlocks+0x1a0>
 800cbf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d03d      	beq.n	800cc78 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc00:	e037      	b.n	800cc72 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cc02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc10:	3b01      	subs	r3, #1
 800cc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cc14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	021a      	lsls	r2, r3, #8
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc22:	3301      	adds	r3, #1
 800cc24:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	041a      	lsls	r2, r3, #16
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc40:	3b01      	subs	r3, #1
 800cc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cc44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	061a      	lsls	r2, r3, #24
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc52:	3301      	adds	r3, #1
 800cc54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f107 0214 	add.w	r2, r7, #20
 800cc64:	4611      	mov	r1, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f003 fda7 	bl	80107ba <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800cc6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc6e:	3301      	adds	r3, #1
 800cc70:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc74:	2b07      	cmp	r3, #7
 800cc76:	d9c4      	bls.n	800cc02 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cc78:	f7f8 fd3a 	bl	80056f0 <HAL_GetTick>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d902      	bls.n	800cc8e <HAL_SD_WriteBlocks+0x1b6>
 800cc88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d112      	bne.n	800ccb4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a53      	ldr	r2, [pc, #332]	@ (800cde0 <HAL_SD_WriteBlocks+0x308>)
 800cc94:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e090      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccba:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d092      	beq.n	800cbe8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d022      	beq.n	800cd16 <HAL_SD_WriteBlocks+0x23e>
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d91f      	bls.n	800cd16 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	d01b      	beq.n	800cd16 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f003 feb6 	bl	8010a54 <SDMMC_CmdStopTransfer>
 800cce8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ccea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d012      	beq.n	800cd16 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a3a      	ldr	r2, [pc, #232]	@ (800cde0 <HAL_SD_WriteBlocks+0x308>)
 800ccf6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	e05f      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1c:	f003 0308 	and.w	r3, r3, #8
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d012      	beq.n	800cd4a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a2d      	ldr	r2, [pc, #180]	@ (800cde0 <HAL_SD_WriteBlocks+0x308>)
 800cd2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd30:	f043 0208 	orr.w	r2, r3, #8
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e045      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd50:	f003 0302 	and.w	r3, r3, #2
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d012      	beq.n	800cd7e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a20      	ldr	r2, [pc, #128]	@ (800cde0 <HAL_SD_WriteBlocks+0x308>)
 800cd5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd64:	f043 0202 	orr.w	r2, r3, #2
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2200      	movs	r2, #0
 800cd78:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e02b      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd84:	f003 0310 	and.w	r3, r3, #16
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d012      	beq.n	800cdb2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a13      	ldr	r2, [pc, #76]	@ (800cde0 <HAL_SD_WriteBlocks+0x308>)
 800cd92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd98:	f043 0210 	orr.w	r2, r3, #16
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e011      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cdba:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e006      	b.n	800cdd6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdcc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
  }
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3748      	adds	r7, #72	@ 0x48
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	004005ff 	.word	0x004005ff

0800cde4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b08c      	sub	sp, #48	@ 0x30
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
 800cdf0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d107      	bne.n	800ce0c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce00:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e0c3      	b.n	800cf94 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	f040 80bc 	bne.w	800cf92 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	441a      	add	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d907      	bls.n	800ce3e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce32:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e0aa      	b.n	800cf94 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2203      	movs	r2, #3
 800ce42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800ce5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce62:	4a4e      	ldr	r2, [pc, #312]	@ (800cf9c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ce64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6a:	4a4d      	ldr	r2, [pc, #308]	@ (800cfa0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800ce6c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce72:	2200      	movs	r2, #0
 800ce74:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce8e:	689a      	ldr	r2, [r3, #8]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3380      	adds	r3, #128	@ 0x80
 800cea4:	4619      	mov	r1, r3
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	025b      	lsls	r3, r3, #9
 800ceac:	089b      	lsrs	r3, r3, #2
 800ceae:	f7f9 fa41 	bl	8006334 <HAL_DMA_Start_IT>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d017      	beq.n	800cee8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800cec6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a35      	ldr	r2, [pc, #212]	@ (800cfa4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cece:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ced4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	e055      	b.n	800cf94 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f042 0208 	orr.w	r2, r2, #8
 800cef6:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d002      	beq.n	800cf06 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800cf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf02:	025b      	lsls	r3, r3, #9
 800cf04:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf06:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	025b      	lsls	r3, r3, #9
 800cf10:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cf12:	2390      	movs	r3, #144	@ 0x90
 800cf14:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cf16:	2302      	movs	r3, #2
 800cf18:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f107 0210 	add.w	r2, r7, #16
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f003 fcbb 	bl	80108a8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d90a      	bls.n	800cf4e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2282      	movs	r2, #130	@ 0x82
 800cf3c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf44:	4618      	mov	r0, r3
 800cf46:	f003 fd1f 	bl	8010988 <SDMMC_CmdReadMultiBlock>
 800cf4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cf4c:	e009      	b.n	800cf62 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2281      	movs	r2, #129	@ 0x81
 800cf52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f003 fcf2 	bl	8010944 <SDMMC_CmdReadSingleBlock>
 800cf60:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d012      	beq.n	800cf8e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a0d      	ldr	r2, [pc, #52]	@ (800cfa4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cf6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf76:	431a      	orrs	r2, r3
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e002      	b.n	800cf94 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e000      	b.n	800cf94 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800cf92:	2302      	movs	r3, #2
  }
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3730      	adds	r7, #48	@ 0x30
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	0800d593 	.word	0x0800d593
 800cfa0:	0800d605 	.word	0x0800d605
 800cfa4:	004005ff 	.word	0x004005ff

0800cfa8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08c      	sub	sp, #48	@ 0x30
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d107      	bne.n	800cfd0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e0c6      	b.n	800d15e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	f040 80bf 	bne.w	800d15c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cfe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	441a      	add	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d907      	bls.n	800d002 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e0ad      	b.n	800d15e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2203      	movs	r2, #3
 800d006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2200      	movs	r2, #0
 800d010:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f042 021a 	orr.w	r2, r2, #26
 800d020:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d026:	4a50      	ldr	r2, [pc, #320]	@ (800d168 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d028:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d02e:	4a4f      	ldr	r2, [pc, #316]	@ (800d16c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d030:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d036:	2200      	movs	r2, #0
 800d038:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d002      	beq.n	800d048 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d044:	025b      	lsls	r3, r3, #9
 800d046:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d90a      	bls.n	800d064 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	22a0      	movs	r2, #160	@ 0xa0
 800d052:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d05a:	4618      	mov	r0, r3
 800d05c:	f003 fcd8 	bl	8010a10 <SDMMC_CmdWriteMultiBlock>
 800d060:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d062:	e009      	b.n	800d078 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2290      	movs	r2, #144	@ 0x90
 800d068:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d070:	4618      	mov	r0, r3
 800d072:	f003 fcab 	bl	80109cc <SDMMC_CmdWriteSingleBlock>
 800d076:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d012      	beq.n	800d0a4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a3b      	ldr	r2, [pc, #236]	@ (800d170 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d084:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d08c:	431a      	orrs	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2200      	movs	r2, #0
 800d09e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e05c      	b.n	800d15e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f042 0208 	orr.w	r2, r2, #8
 800d0b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0b8:	2240      	movs	r2, #64	@ 0x40
 800d0ba:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0cc:	689a      	ldr	r2, [r3, #8]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	430a      	orrs	r2, r1
 800d0d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d0dc:	68b9      	ldr	r1, [r7, #8]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3380      	adds	r3, #128	@ 0x80
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	025b      	lsls	r3, r3, #9
 800d0ea:	089b      	lsrs	r3, r3, #2
 800d0ec:	f7f9 f922 	bl	8006334 <HAL_DMA_Start_IT>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d01a      	beq.n	800d12c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f022 021a 	bic.w	r2, r2, #26
 800d104:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a19      	ldr	r2, [pc, #100]	@ (800d170 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d10c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d112:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	e018      	b.n	800d15e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d12c:	f04f 33ff 	mov.w	r3, #4294967295
 800d130:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	025b      	lsls	r3, r3, #9
 800d136:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d138:	2390      	movs	r3, #144	@ 0x90
 800d13a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d13c:	2300      	movs	r3, #0
 800d13e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d140:	2300      	movs	r3, #0
 800d142:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d144:	2301      	movs	r3, #1
 800d146:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f107 0210 	add.w	r2, r7, #16
 800d150:	4611      	mov	r1, r2
 800d152:	4618      	mov	r0, r3
 800d154:	f003 fba8 	bl	80108a8 <SDMMC_ConfigData>

      return HAL_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	e000      	b.n	800d15e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d15c:	2302      	movs	r3, #2
  }
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3730      	adds	r7, #48	@ 0x30
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	0800d569 	.word	0x0800d569
 800d16c:	0800d605 	.word	0x0800d605
 800d170:	004005ff 	.word	0x004005ff

0800d174 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d196:	0f9b      	lsrs	r3, r3, #30
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1a2:	0e9b      	lsrs	r3, r3, #26
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	f003 030f 	and.w	r3, r3, #15
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1b4:	0e1b      	lsrs	r3, r3, #24
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	f003 0303 	and.w	r3, r3, #3
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1c6:	0c1b      	lsrs	r3, r3, #16
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1d2:	0a1b      	lsrs	r3, r3, #8
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1de:	b2da      	uxtb	r2, r3
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1e8:	0d1b      	lsrs	r3, r3, #20
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1f4:	0c1b      	lsrs	r3, r3, #16
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 030f 	and.w	r3, r3, #15
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d206:	0bdb      	lsrs	r3, r3, #15
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d218:	0b9b      	lsrs	r3, r3, #14
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	f003 0301 	and.w	r3, r3, #1
 800d220:	b2da      	uxtb	r2, r3
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d22a:	0b5b      	lsrs	r3, r3, #13
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	b2da      	uxtb	r2, r3
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d23c:	0b1b      	lsrs	r3, r3, #12
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	b2da      	uxtb	r2, r3
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2200      	movs	r2, #0
 800d24e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d254:	2b00      	cmp	r3, #0
 800d256:	d163      	bne.n	800d320 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d25c:	009a      	lsls	r2, r3, #2
 800d25e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d262:	4013      	ands	r3, r2
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d268:	0f92      	lsrs	r2, r2, #30
 800d26a:	431a      	orrs	r2, r3
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d274:	0edb      	lsrs	r3, r3, #27
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 0307 	and.w	r3, r3, #7
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d286:	0e1b      	lsrs	r3, r3, #24
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	f003 0307 	and.w	r3, r3, #7
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d298:	0d5b      	lsrs	r3, r3, #21
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	f003 0307 	and.w	r3, r3, #7
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2aa:	0c9b      	lsrs	r3, r3, #18
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	f003 0307 	and.w	r3, r3, #7
 800d2b2:	b2da      	uxtb	r2, r3
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2bc:	0bdb      	lsrs	r3, r3, #15
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f003 0307 	and.w	r3, r3, #7
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	7e1b      	ldrb	r3, [r3, #24]
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	f003 0307 	and.w	r3, r3, #7
 800d2de:	3302      	adds	r3, #2
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d2ea:	fb03 f202 	mul.w	r2, r3, r2
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	7a1b      	ldrb	r3, [r3, #8]
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	f003 030f 	and.w	r3, r3, #15
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	409a      	lsls	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d30c:	0a52      	lsrs	r2, r2, #9
 800d30e:	fb03 f202 	mul.w	r2, r3, r2
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d31c:	661a      	str	r2, [r3, #96]	@ 0x60
 800d31e:	e031      	b.n	800d384 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d324:	2b01      	cmp	r3, #1
 800d326:	d11d      	bne.n	800d364 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d32c:	041b      	lsls	r3, r3, #16
 800d32e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d336:	0c1b      	lsrs	r3, r3, #16
 800d338:	431a      	orrs	r2, r3
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	3301      	adds	r3, #1
 800d344:	029a      	lsls	r2, r3, #10
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d358:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	661a      	str	r2, [r3, #96]	@ 0x60
 800d362:	e00f      	b.n	800d384 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a58      	ldr	r2, [pc, #352]	@ (800d4cc <HAL_SD_GetCardCSD+0x344>)
 800d36a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d370:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d380:	2301      	movs	r3, #1
 800d382:	e09d      	b.n	800d4c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d388:	0b9b      	lsrs	r3, r3, #14
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	f003 0301 	and.w	r3, r3, #1
 800d390:	b2da      	uxtb	r2, r3
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d39a:	09db      	lsrs	r3, r3, #7
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3bc:	0fdb      	lsrs	r3, r3, #31
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3c8:	0f5b      	lsrs	r3, r3, #29
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	f003 0303 	and.w	r3, r3, #3
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3da:	0e9b      	lsrs	r3, r3, #26
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f003 0307 	and.w	r3, r3, #7
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3ec:	0d9b      	lsrs	r3, r3, #22
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	f003 030f 	and.w	r3, r3, #15
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3fe:	0d5b      	lsrs	r3, r3, #21
 800d400:	b2db      	uxtb	r3, r3
 800d402:	f003 0301 	and.w	r3, r3, #1
 800d406:	b2da      	uxtb	r2, r3
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d41a:	0c1b      	lsrs	r3, r3, #16
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	b2da      	uxtb	r2, r3
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d42e:	0bdb      	lsrs	r3, r3, #15
 800d430:	b2db      	uxtb	r3, r3
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	b2da      	uxtb	r2, r3
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d442:	0b9b      	lsrs	r3, r3, #14
 800d444:	b2db      	uxtb	r3, r3
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	b2da      	uxtb	r2, r3
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d456:	0b5b      	lsrs	r3, r3, #13
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d46a:	0b1b      	lsrs	r3, r3, #12
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	f003 0301 	and.w	r3, r3, #1
 800d472:	b2da      	uxtb	r2, r3
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d47e:	0a9b      	lsrs	r3, r3, #10
 800d480:	b2db      	uxtb	r3, r3
 800d482:	f003 0303 	and.w	r3, r3, #3
 800d486:	b2da      	uxtb	r2, r3
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d492:	0a1b      	lsrs	r3, r3, #8
 800d494:	b2db      	uxtb	r3, r3
 800d496:	f003 0303 	and.w	r3, r3, #3
 800d49a:	b2da      	uxtb	r2, r3
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4a6:	085b      	lsrs	r3, r3, #1
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d4be:	2300      	movs	r3, #0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	004005ff 	.word	0x004005ff

0800d4d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d534:	f107 030c 	add.w	r3, r7, #12
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fa10 	bl	800d960 <SD_SendStatus>
 800d540:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d005      	beq.n	800d554 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	431a      	orrs	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	0a5b      	lsrs	r3, r3, #9
 800d558:	f003 030f 	and.w	r3, r3, #15
 800d55c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d55e:	693b      	ldr	r3, [r7, #16]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3718      	adds	r7, #24
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d574:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d584:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d586:	bf00      	nop
 800d588:	3714      	adds	r7, #20
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b084      	sub	sp, #16
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d59e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5a4:	2b82      	cmp	r3, #130	@ 0x82
 800d5a6:	d111      	bne.n	800d5cc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f003 fa51 	bl	8010a54 <SDMMC_CmdStopTransfer>
 800d5b2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d008      	beq.n	800d5cc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	431a      	orrs	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff fdd4 	bl	800d174 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f022 0208 	bic.w	r2, r2, #8
 800d5da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d5e4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f004 ffa3 	bl	8012540 <HAL_SD_RxCpltCallback>
#endif
}
 800d5fa:	bf00      	nop
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d610:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7f9 f90a 	bl	800682c <HAL_DMA_GetError>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b02      	cmp	r3, #2
 800d61c:	d03e      	beq.n	800d69c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d624:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d62a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d62c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d002      	beq.n	800d63a <SD_DMAError+0x36>
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d12d      	bne.n	800d696 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a19      	ldr	r2, [pc, #100]	@ (800d6a4 <SD_DMAError+0xa0>)
 800d640:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d650:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d656:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d65e:	6978      	ldr	r0, [r7, #20]
 800d660:	f7ff ff62 	bl	800d528 <HAL_SD_GetCardState>
 800d664:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2b06      	cmp	r3, #6
 800d66a:	d002      	beq.n	800d672 <SD_DMAError+0x6e>
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	2b05      	cmp	r3, #5
 800d670:	d10a      	bne.n	800d688 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4618      	mov	r0, r3
 800d678:	f003 f9ec 	bl	8010a54 <SDMMC_CmdStopTransfer>
 800d67c:	4602      	mov	r2, r0
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d682:	431a      	orrs	r2, r3
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	2200      	movs	r2, #0
 800d694:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d696:	6978      	ldr	r0, [r7, #20]
 800d698:	f7ff fd6c 	bl	800d174 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d69c:	bf00      	nop
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	004005ff 	.word	0x004005ff

0800d6a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d6a8:	b5b0      	push	{r4, r5, r7, lr}
 800d6aa:	b094      	sub	sp, #80	@ 0x50
 800d6ac:	af04      	add	r7, sp, #16
 800d6ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f003 f89d 	bl	80107f8 <SDMMC_GetPowerState>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d102      	bne.n	800d6ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d6c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d6c8:	e0b8      	b.n	800d83c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d02f      	beq.n	800d732 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f003 fa84 	bl	8010be4 <SDMMC_CmdSendCID>
 800d6dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <SD_InitCard+0x40>
    {
      return errorstate;
 800d6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e6:	e0a9      	b.n	800d83c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f003 f8c7 	bl	8010882 <SDMMC_GetResponse>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2104      	movs	r1, #4
 800d700:	4618      	mov	r0, r3
 800d702:	f003 f8be 	bl	8010882 <SDMMC_GetResponse>
 800d706:	4602      	mov	r2, r0
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2108      	movs	r1, #8
 800d712:	4618      	mov	r0, r3
 800d714:	f003 f8b5 	bl	8010882 <SDMMC_GetResponse>
 800d718:	4602      	mov	r2, r0
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	210c      	movs	r1, #12
 800d724:	4618      	mov	r0, r3
 800d726:	f003 f8ac 	bl	8010882 <SDMMC_GetResponse>
 800d72a:	4602      	mov	r2, r0
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d736:	2b03      	cmp	r3, #3
 800d738:	d00d      	beq.n	800d756 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f107 020e 	add.w	r2, r7, #14
 800d742:	4611      	mov	r1, r2
 800d744:	4618      	mov	r0, r3
 800d746:	f003 fa8a 	bl	8010c5e <SDMMC_CmdSetRelAdd>
 800d74a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d74c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d001      	beq.n	800d756 <SD_InitCard+0xae>
    {
      return errorstate;
 800d752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d754:	e072      	b.n	800d83c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d036      	beq.n	800d7cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d75e:	89fb      	ldrh	r3, [r7, #14]
 800d760:	461a      	mov	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d76e:	041b      	lsls	r3, r3, #16
 800d770:	4619      	mov	r1, r3
 800d772:	4610      	mov	r0, r2
 800d774:	f003 fa54 	bl	8010c20 <SDMMC_CmdSendCSD>
 800d778:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d782:	e05b      	b.n	800d83c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2100      	movs	r1, #0
 800d78a:	4618      	mov	r0, r3
 800d78c:	f003 f879 	bl	8010882 <SDMMC_GetResponse>
 800d790:	4602      	mov	r2, r0
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2104      	movs	r1, #4
 800d79c:	4618      	mov	r0, r3
 800d79e:	f003 f870 	bl	8010882 <SDMMC_GetResponse>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2108      	movs	r1, #8
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f003 f867 	bl	8010882 <SDMMC_GetResponse>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	210c      	movs	r1, #12
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f003 f85e 	bl	8010882 <SDMMC_GetResponse>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2104      	movs	r1, #4
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f003 f855 	bl	8010882 <SDMMC_GetResponse>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	0d1a      	lsrs	r2, r3, #20
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d7e0:	f107 0310 	add.w	r3, r7, #16
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff fcce 	bl	800d188 <HAL_SD_GetCardCSD>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d002      	beq.n	800d7f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d7f6:	e021      	b.n	800d83c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6819      	ldr	r1, [r3, #0]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d800:	041b      	lsls	r3, r3, #16
 800d802:	2200      	movs	r2, #0
 800d804:	461c      	mov	r4, r3
 800d806:	4615      	mov	r5, r2
 800d808:	4622      	mov	r2, r4
 800d80a:	462b      	mov	r3, r5
 800d80c:	4608      	mov	r0, r1
 800d80e:	f003 f943 	bl	8010a98 <SDMMC_CmdSelDesel>
 800d812:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <SD_InitCard+0x176>
  {
    return errorstate;
 800d81a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d81c:	e00e      	b.n	800d83c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681d      	ldr	r5, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	466c      	mov	r4, sp
 800d826:	f103 0210 	add.w	r2, r3, #16
 800d82a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d82c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d830:	3304      	adds	r3, #4
 800d832:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d834:	4628      	mov	r0, r5
 800d836:	f002 ff87 	bl	8010748 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3740      	adds	r7, #64	@ 0x40
 800d840:	46bd      	mov	sp, r7
 800d842:	bdb0      	pop	{r4, r5, r7, pc}

0800d844 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d84c:	2300      	movs	r3, #0
 800d84e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d850:	2300      	movs	r3, #0
 800d852:	617b      	str	r3, [r7, #20]
 800d854:	2300      	movs	r3, #0
 800d856:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f003 f93e 	bl	8010ade <SDMMC_CmdGoIdleState>
 800d862:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	e072      	b.n	800d954 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4618      	mov	r0, r3
 800d874:	f003 f951 	bl	8010b1a <SDMMC_CmdOperCond>
 800d878:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00d      	beq.n	800d89c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f003 f927 	bl	8010ade <SDMMC_CmdGoIdleState>
 800d890:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d004      	beq.n	800d8a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	e05b      	b.n	800d954 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d137      	bne.n	800d91a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f003 f951 	bl	8010b58 <SDMMC_CmdAppCommand>
 800d8b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d02d      	beq.n	800d91a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d8c2:	e047      	b.n	800d954 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f003 f944 	bl	8010b58 <SDMMC_CmdAppCommand>
 800d8d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d001      	beq.n	800d8dc <SD_PowerON+0x98>
    {
      return errorstate;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	e03b      	b.n	800d954 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	491e      	ldr	r1, [pc, #120]	@ (800d95c <SD_PowerON+0x118>)
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f003 f95a 	bl	8010b9c <SDMMC_CmdAppOperCommand>
 800d8e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d8f4:	e02e      	b.n	800d954 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f002 ffc0 	bl	8010882 <SDMMC_GetResponse>
 800d902:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	0fdb      	lsrs	r3, r3, #31
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d101      	bne.n	800d910 <SD_PowerON+0xcc>
 800d90c:	2301      	movs	r3, #1
 800d90e:	e000      	b.n	800d912 <SD_PowerON+0xce>
 800d910:	2300      	movs	r3, #0
 800d912:	613b      	str	r3, [r7, #16]

    count++;
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	3301      	adds	r3, #1
 800d918:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d920:	4293      	cmp	r3, r2
 800d922:	d802      	bhi.n	800d92a <SD_PowerON+0xe6>
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0cc      	beq.n	800d8c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d930:	4293      	cmp	r3, r2
 800d932:	d902      	bls.n	800d93a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d934:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d938:	e00c      	b.n	800d954 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d940:	2b00      	cmp	r3, #0
 800d942:	d003      	beq.n	800d94c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	645a      	str	r2, [r3, #68]	@ 0x44
 800d94a:	e002      	b.n	800d952 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	c1100000 	.word	0xc1100000

0800d960 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d102      	bne.n	800d976 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d970:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d974:	e018      	b.n	800d9a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d97e:	041b      	lsls	r3, r3, #16
 800d980:	4619      	mov	r1, r3
 800d982:	4610      	mov	r0, r2
 800d984:	f003 f98c 	bl	8010ca0 <SDMMC_CmdSendStatus>
 800d988:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	e009      	b.n	800d9a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2100      	movs	r1, #0
 800d99a:	4618      	mov	r0, r3
 800d99c:	f002 ff71 	bl	8010882 <SDMMC_GetResponse>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e025      	b.n	800da10 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d106      	bne.n	800d9de <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7f6 fef3 	bl	80047c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	f002 fde3 	bl	80105bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6818      	ldr	r0, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	461a      	mov	r2, r3
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	f002 fe37 	bl	8010674 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e04c      	b.n	800dac4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da30:	b2db      	uxtb	r3, r3
 800da32:	2b00      	cmp	r3, #0
 800da34:	d106      	bne.n	800da44 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7f6 fb46 	bl	80040d0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2202      	movs	r2, #2
 800da48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f022 0203 	bic.w	r2, r2, #3
 800da5a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	4b19      	ldr	r3, [pc, #100]	@ (800dacc <HAL_SPDIFRX_Init+0xb4>)
 800da68:	4013      	ands	r3, r2
 800da6a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800da74:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800da7a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800da80:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800da86:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800da8c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800da92:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800da98:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800da9e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800daa4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	fff88407 	.word	0xfff88407

0800dad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dade:	2301      	movs	r3, #1
 800dae0:	e09d      	b.n	800dc1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d108      	bne.n	800dafc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800daf2:	d009      	beq.n	800db08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	61da      	str	r2, [r3, #28]
 800dafa:	e005      	b.n	800db08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800db14:	b2db      	uxtb	r3, r3
 800db16:	2b00      	cmp	r3, #0
 800db18:	d106      	bne.n	800db28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7f6 fb38 	bl	8004198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800db48:	d902      	bls.n	800db50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800db4a:	2300      	movs	r3, #0
 800db4c:	60fb      	str	r3, [r7, #12]
 800db4e:	e002      	b.n	800db56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800db50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800db5e:	d007      	beq.n	800db70 <HAL_SPI_Init+0xa0>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800db68:	d002      	beq.n	800db70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800db80:	431a      	orrs	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	691b      	ldr	r3, [r3, #16]
 800db86:	f003 0302 	and.w	r3, r3, #2
 800db8a:	431a      	orrs	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	695b      	ldr	r3, [r3, #20]
 800db90:	f003 0301 	and.w	r3, r3, #1
 800db94:	431a      	orrs	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	699b      	ldr	r3, [r3, #24]
 800db9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800db9e:	431a      	orrs	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	69db      	ldr	r3, [r3, #28]
 800dba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbb2:	ea42 0103 	orr.w	r1, r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	430a      	orrs	r2, r1
 800dbc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	699b      	ldr	r3, [r3, #24]
 800dbca:	0c1b      	lsrs	r3, r3, #16
 800dbcc:	f003 0204 	and.w	r2, r3, #4
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd4:	f003 0310 	and.w	r3, r3, #16
 800dbd8:	431a      	orrs	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbde:	f003 0308 	and.w	r3, r3, #8
 800dbe2:	431a      	orrs	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800dbec:	ea42 0103 	orr.w	r1, r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	430a      	orrs	r2, r1
 800dbfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	69da      	ldr	r2, [r3, #28]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b082      	sub	sp, #8
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d101      	bne.n	800dc38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e049      	b.n	800dccc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d106      	bne.n	800dc52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7f6 fb05 	bl	800425c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2202      	movs	r2, #2
 800dc56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	3304      	adds	r3, #4
 800dc62:	4619      	mov	r1, r3
 800dc64:	4610      	mov	r0, r2
 800dc66:	f000 fc11 	bl	800e48c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2201      	movs	r2, #1
 800dc76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2201      	movs	r2, #1
 800dc86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2201      	movs	r2, #1
 800dcae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d001      	beq.n	800dcec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e054      	b.n	800dd96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2202      	movs	r2, #2
 800dcf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	68da      	ldr	r2, [r3, #12]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f042 0201 	orr.w	r2, r2, #1
 800dd02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a26      	ldr	r2, [pc, #152]	@ (800dda4 <HAL_TIM_Base_Start_IT+0xd0>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d022      	beq.n	800dd54 <HAL_TIM_Base_Start_IT+0x80>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd16:	d01d      	beq.n	800dd54 <HAL_TIM_Base_Start_IT+0x80>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a22      	ldr	r2, [pc, #136]	@ (800dda8 <HAL_TIM_Base_Start_IT+0xd4>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d018      	beq.n	800dd54 <HAL_TIM_Base_Start_IT+0x80>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a21      	ldr	r2, [pc, #132]	@ (800ddac <HAL_TIM_Base_Start_IT+0xd8>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d013      	beq.n	800dd54 <HAL_TIM_Base_Start_IT+0x80>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a1f      	ldr	r2, [pc, #124]	@ (800ddb0 <HAL_TIM_Base_Start_IT+0xdc>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d00e      	beq.n	800dd54 <HAL_TIM_Base_Start_IT+0x80>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a1e      	ldr	r2, [pc, #120]	@ (800ddb4 <HAL_TIM_Base_Start_IT+0xe0>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d009      	beq.n	800dd54 <HAL_TIM_Base_Start_IT+0x80>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a1c      	ldr	r2, [pc, #112]	@ (800ddb8 <HAL_TIM_Base_Start_IT+0xe4>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d004      	beq.n	800dd54 <HAL_TIM_Base_Start_IT+0x80>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a1b      	ldr	r2, [pc, #108]	@ (800ddbc <HAL_TIM_Base_Start_IT+0xe8>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d115      	bne.n	800dd80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	689a      	ldr	r2, [r3, #8]
 800dd5a:	4b19      	ldr	r3, [pc, #100]	@ (800ddc0 <HAL_TIM_Base_Start_IT+0xec>)
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2b06      	cmp	r3, #6
 800dd64:	d015      	beq.n	800dd92 <HAL_TIM_Base_Start_IT+0xbe>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd6c:	d011      	beq.n	800dd92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f042 0201 	orr.w	r2, r2, #1
 800dd7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd7e:	e008      	b.n	800dd92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f042 0201 	orr.w	r2, r2, #1
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	e000      	b.n	800dd94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3714      	adds	r7, #20
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	40010000 	.word	0x40010000
 800dda8:	40000400 	.word	0x40000400
 800ddac:	40000800 	.word	0x40000800
 800ddb0:	40000c00 	.word	0x40000c00
 800ddb4:	40010400 	.word	0x40010400
 800ddb8:	40014000 	.word	0x40014000
 800ddbc:	40001800 	.word	0x40001800
 800ddc0:	00010007 	.word	0x00010007

0800ddc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e049      	b.n	800de6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d106      	bne.n	800ddf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7f6 faa4 	bl	8004338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2202      	movs	r2, #2
 800ddf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	3304      	adds	r3, #4
 800de00:	4619      	mov	r1, r3
 800de02:	4610      	mov	r0, r2
 800de04:	f000 fb42 	bl	800e48c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2201      	movs	r2, #1
 800de24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b084      	sub	sp, #16
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	691b      	ldr	r3, [r3, #16]
 800de88:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	f003 0302 	and.w	r3, r3, #2
 800de90:	2b00      	cmp	r3, #0
 800de92:	d020      	beq.n	800ded6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f003 0302 	and.w	r3, r3, #2
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d01b      	beq.n	800ded6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f06f 0202 	mvn.w	r2, #2
 800dea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	f003 0303 	and.w	r3, r3, #3
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d003      	beq.n	800dec4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 fac7 	bl	800e450 <HAL_TIM_IC_CaptureCallback>
 800dec2:	e005      	b.n	800ded0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 fab9 	bl	800e43c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 faca 	bl	800e464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2200      	movs	r2, #0
 800ded4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	f003 0304 	and.w	r3, r3, #4
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d020      	beq.n	800df22 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f003 0304 	and.w	r3, r3, #4
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d01b      	beq.n	800df22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f06f 0204 	mvn.w	r2, #4
 800def2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2202      	movs	r2, #2
 800def8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df04:	2b00      	cmp	r3, #0
 800df06:	d003      	beq.n	800df10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 faa1 	bl	800e450 <HAL_TIM_IC_CaptureCallback>
 800df0e:	e005      	b.n	800df1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fa93 	bl	800e43c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 faa4 	bl	800e464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	f003 0308 	and.w	r3, r3, #8
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d020      	beq.n	800df6e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f003 0308 	and.w	r3, r3, #8
 800df32:	2b00      	cmp	r3, #0
 800df34:	d01b      	beq.n	800df6e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f06f 0208 	mvn.w	r2, #8
 800df3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2204      	movs	r2, #4
 800df44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	69db      	ldr	r3, [r3, #28]
 800df4c:	f003 0303 	and.w	r3, r3, #3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d003      	beq.n	800df5c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fa7b 	bl	800e450 <HAL_TIM_IC_CaptureCallback>
 800df5a:	e005      	b.n	800df68 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fa6d 	bl	800e43c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 fa7e 	bl	800e464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	f003 0310 	and.w	r3, r3, #16
 800df74:	2b00      	cmp	r3, #0
 800df76:	d020      	beq.n	800dfba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f003 0310 	and.w	r3, r3, #16
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d01b      	beq.n	800dfba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f06f 0210 	mvn.w	r2, #16
 800df8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2208      	movs	r2, #8
 800df90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	69db      	ldr	r3, [r3, #28]
 800df98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d003      	beq.n	800dfa8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 fa55 	bl	800e450 <HAL_TIM_IC_CaptureCallback>
 800dfa6:	e005      	b.n	800dfb4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 fa47 	bl	800e43c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fa58 	bl	800e464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	f003 0301 	and.w	r3, r3, #1
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d00c      	beq.n	800dfde <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d007      	beq.n	800dfde <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f06f 0201 	mvn.w	r2, #1
 800dfd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7f5 fb53 	bl	8003684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d104      	bne.n	800dff2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00c      	beq.n	800e00c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d007      	beq.n	800e00c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 fef4 	bl	800edf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e012:	2b00      	cmp	r3, #0
 800e014:	d00c      	beq.n	800e030 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d007      	beq.n	800e030 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 feec 	bl	800ee08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00c      	beq.n	800e054 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e040:	2b00      	cmp	r3, #0
 800e042:	d007      	beq.n	800e054 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e04c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fa12 	bl	800e478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	f003 0320 	and.w	r3, r3, #32
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00c      	beq.n	800e078 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f003 0320 	and.w	r3, r3, #32
 800e064:	2b00      	cmp	r3, #0
 800e066:	d007      	beq.n	800e078 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f06f 0220 	mvn.w	r2, #32
 800e070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 feb4 	bl	800ede0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e078:	bf00      	nop
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e08c:	2300      	movs	r3, #0
 800e08e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e096:	2b01      	cmp	r3, #1
 800e098:	d101      	bne.n	800e09e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e09a:	2302      	movs	r3, #2
 800e09c:	e0ff      	b.n	800e29e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b14      	cmp	r3, #20
 800e0aa:	f200 80f0 	bhi.w	800e28e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e0b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b4:	0800e109 	.word	0x0800e109
 800e0b8:	0800e28f 	.word	0x0800e28f
 800e0bc:	0800e28f 	.word	0x0800e28f
 800e0c0:	0800e28f 	.word	0x0800e28f
 800e0c4:	0800e149 	.word	0x0800e149
 800e0c8:	0800e28f 	.word	0x0800e28f
 800e0cc:	0800e28f 	.word	0x0800e28f
 800e0d0:	0800e28f 	.word	0x0800e28f
 800e0d4:	0800e18b 	.word	0x0800e18b
 800e0d8:	0800e28f 	.word	0x0800e28f
 800e0dc:	0800e28f 	.word	0x0800e28f
 800e0e0:	0800e28f 	.word	0x0800e28f
 800e0e4:	0800e1cb 	.word	0x0800e1cb
 800e0e8:	0800e28f 	.word	0x0800e28f
 800e0ec:	0800e28f 	.word	0x0800e28f
 800e0f0:	0800e28f 	.word	0x0800e28f
 800e0f4:	0800e20d 	.word	0x0800e20d
 800e0f8:	0800e28f 	.word	0x0800e28f
 800e0fc:	0800e28f 	.word	0x0800e28f
 800e100:	0800e28f 	.word	0x0800e28f
 800e104:	0800e24d 	.word	0x0800e24d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68b9      	ldr	r1, [r7, #8]
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 fa62 	bl	800e5d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	699a      	ldr	r2, [r3, #24]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0208 	orr.w	r2, r2, #8
 800e122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	699a      	ldr	r2, [r3, #24]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f022 0204 	bic.w	r2, r2, #4
 800e132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	6999      	ldr	r1, [r3, #24]
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	691a      	ldr	r2, [r3, #16]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	430a      	orrs	r2, r1
 800e144:	619a      	str	r2, [r3, #24]
      break;
 800e146:	e0a5      	b.n	800e294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68b9      	ldr	r1, [r7, #8]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 fab4 	bl	800e6bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	699a      	ldr	r2, [r3, #24]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	699a      	ldr	r2, [r3, #24]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	6999      	ldr	r1, [r3, #24]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	021a      	lsls	r2, r3, #8
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	430a      	orrs	r2, r1
 800e186:	619a      	str	r2, [r3, #24]
      break;
 800e188:	e084      	b.n	800e294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68b9      	ldr	r1, [r7, #8]
 800e190:	4618      	mov	r0, r3
 800e192:	f000 fb0b 	bl	800e7ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	69da      	ldr	r2, [r3, #28]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f042 0208 	orr.w	r2, r2, #8
 800e1a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	69da      	ldr	r2, [r3, #28]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f022 0204 	bic.w	r2, r2, #4
 800e1b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	69d9      	ldr	r1, [r3, #28]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	691a      	ldr	r2, [r3, #16]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	430a      	orrs	r2, r1
 800e1c6:	61da      	str	r2, [r3, #28]
      break;
 800e1c8:	e064      	b.n	800e294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68b9      	ldr	r1, [r7, #8]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f000 fb61 	bl	800e898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	69da      	ldr	r2, [r3, #28]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e1e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	69da      	ldr	r2, [r3, #28]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	69d9      	ldr	r1, [r3, #28]
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	021a      	lsls	r2, r3, #8
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	430a      	orrs	r2, r1
 800e208:	61da      	str	r2, [r3, #28]
      break;
 800e20a:	e043      	b.n	800e294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	68b9      	ldr	r1, [r7, #8]
 800e212:	4618      	mov	r0, r3
 800e214:	f000 fb98 	bl	800e948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0208 	orr.w	r2, r2, #8
 800e226:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f022 0204 	bic.w	r2, r2, #4
 800e236:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	691a      	ldr	r2, [r3, #16]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	430a      	orrs	r2, r1
 800e248:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e24a:	e023      	b.n	800e294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	68b9      	ldr	r1, [r7, #8]
 800e252:	4618      	mov	r0, r3
 800e254:	f000 fbca 	bl	800e9ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e266:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e276:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	021a      	lsls	r2, r3, #8
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	430a      	orrs	r2, r1
 800e28a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e28c:	e002      	b.n	800e294 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	75fb      	strb	r3, [r7, #23]
      break;
 800e292:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3718      	adds	r7, #24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop

0800e2a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d101      	bne.n	800e2c4 <HAL_TIM_ConfigClockSource+0x1c>
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	e0b4      	b.n	800e42e <HAL_TIM_ConfigClockSource+0x186>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2202      	movs	r2, #2
 800e2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	4b56      	ldr	r3, [pc, #344]	@ (800e438 <HAL_TIM_ConfigClockSource+0x190>)
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e2ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2fc:	d03e      	beq.n	800e37c <HAL_TIM_ConfigClockSource+0xd4>
 800e2fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e302:	f200 8087 	bhi.w	800e414 <HAL_TIM_ConfigClockSource+0x16c>
 800e306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e30a:	f000 8086 	beq.w	800e41a <HAL_TIM_ConfigClockSource+0x172>
 800e30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e312:	d87f      	bhi.n	800e414 <HAL_TIM_ConfigClockSource+0x16c>
 800e314:	2b70      	cmp	r3, #112	@ 0x70
 800e316:	d01a      	beq.n	800e34e <HAL_TIM_ConfigClockSource+0xa6>
 800e318:	2b70      	cmp	r3, #112	@ 0x70
 800e31a:	d87b      	bhi.n	800e414 <HAL_TIM_ConfigClockSource+0x16c>
 800e31c:	2b60      	cmp	r3, #96	@ 0x60
 800e31e:	d050      	beq.n	800e3c2 <HAL_TIM_ConfigClockSource+0x11a>
 800e320:	2b60      	cmp	r3, #96	@ 0x60
 800e322:	d877      	bhi.n	800e414 <HAL_TIM_ConfigClockSource+0x16c>
 800e324:	2b50      	cmp	r3, #80	@ 0x50
 800e326:	d03c      	beq.n	800e3a2 <HAL_TIM_ConfigClockSource+0xfa>
 800e328:	2b50      	cmp	r3, #80	@ 0x50
 800e32a:	d873      	bhi.n	800e414 <HAL_TIM_ConfigClockSource+0x16c>
 800e32c:	2b40      	cmp	r3, #64	@ 0x40
 800e32e:	d058      	beq.n	800e3e2 <HAL_TIM_ConfigClockSource+0x13a>
 800e330:	2b40      	cmp	r3, #64	@ 0x40
 800e332:	d86f      	bhi.n	800e414 <HAL_TIM_ConfigClockSource+0x16c>
 800e334:	2b30      	cmp	r3, #48	@ 0x30
 800e336:	d064      	beq.n	800e402 <HAL_TIM_ConfigClockSource+0x15a>
 800e338:	2b30      	cmp	r3, #48	@ 0x30
 800e33a:	d86b      	bhi.n	800e414 <HAL_TIM_ConfigClockSource+0x16c>
 800e33c:	2b20      	cmp	r3, #32
 800e33e:	d060      	beq.n	800e402 <HAL_TIM_ConfigClockSource+0x15a>
 800e340:	2b20      	cmp	r3, #32
 800e342:	d867      	bhi.n	800e414 <HAL_TIM_ConfigClockSource+0x16c>
 800e344:	2b00      	cmp	r3, #0
 800e346:	d05c      	beq.n	800e402 <HAL_TIM_ConfigClockSource+0x15a>
 800e348:	2b10      	cmp	r3, #16
 800e34a:	d05a      	beq.n	800e402 <HAL_TIM_ConfigClockSource+0x15a>
 800e34c:	e062      	b.n	800e414 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e35e:	f000 fc13 	bl	800eb88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	609a      	str	r2, [r3, #8]
      break;
 800e37a:	e04f      	b.n	800e41c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e38c:	f000 fbfc 	bl	800eb88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	689a      	ldr	r2, [r3, #8]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e39e:	609a      	str	r2, [r3, #8]
      break;
 800e3a0:	e03c      	b.n	800e41c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f000 fb70 	bl	800ea94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2150      	movs	r1, #80	@ 0x50
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 fbc9 	bl	800eb52 <TIM_ITRx_SetConfig>
      break;
 800e3c0:	e02c      	b.n	800e41c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	f000 fb8f 	bl	800eaf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2160      	movs	r1, #96	@ 0x60
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f000 fbb9 	bl	800eb52 <TIM_ITRx_SetConfig>
      break;
 800e3e0:	e01c      	b.n	800e41c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	f000 fb50 	bl	800ea94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2140      	movs	r1, #64	@ 0x40
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f000 fba9 	bl	800eb52 <TIM_ITRx_SetConfig>
      break;
 800e400:	e00c      	b.n	800e41c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4619      	mov	r1, r3
 800e40c:	4610      	mov	r0, r2
 800e40e:	f000 fba0 	bl	800eb52 <TIM_ITRx_SetConfig>
      break;
 800e412:	e003      	b.n	800e41c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e414:	2301      	movs	r3, #1
 800e416:	73fb      	strb	r3, [r7, #15]
      break;
 800e418:	e000      	b.n	800e41c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e41a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2201      	movs	r2, #1
 800e420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	fffeff88 	.word	0xfffeff88

0800e43c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e444:	bf00      	nop
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e458:	bf00      	nop
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e480:	bf00      	nop
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4a43      	ldr	r2, [pc, #268]	@ (800e5ac <TIM_Base_SetConfig+0x120>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d013      	beq.n	800e4cc <TIM_Base_SetConfig+0x40>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4aa:	d00f      	beq.n	800e4cc <TIM_Base_SetConfig+0x40>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a40      	ldr	r2, [pc, #256]	@ (800e5b0 <TIM_Base_SetConfig+0x124>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d00b      	beq.n	800e4cc <TIM_Base_SetConfig+0x40>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	4a3f      	ldr	r2, [pc, #252]	@ (800e5b4 <TIM_Base_SetConfig+0x128>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d007      	beq.n	800e4cc <TIM_Base_SetConfig+0x40>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a3e      	ldr	r2, [pc, #248]	@ (800e5b8 <TIM_Base_SetConfig+0x12c>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d003      	beq.n	800e4cc <TIM_Base_SetConfig+0x40>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4a3d      	ldr	r2, [pc, #244]	@ (800e5bc <TIM_Base_SetConfig+0x130>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d108      	bne.n	800e4de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4a32      	ldr	r2, [pc, #200]	@ (800e5ac <TIM_Base_SetConfig+0x120>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d02b      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4ec:	d027      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4a2f      	ldr	r2, [pc, #188]	@ (800e5b0 <TIM_Base_SetConfig+0x124>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d023      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4a2e      	ldr	r2, [pc, #184]	@ (800e5b4 <TIM_Base_SetConfig+0x128>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d01f      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4a2d      	ldr	r2, [pc, #180]	@ (800e5b8 <TIM_Base_SetConfig+0x12c>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d01b      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a2c      	ldr	r2, [pc, #176]	@ (800e5bc <TIM_Base_SetConfig+0x130>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d017      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4a2b      	ldr	r2, [pc, #172]	@ (800e5c0 <TIM_Base_SetConfig+0x134>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d013      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4a2a      	ldr	r2, [pc, #168]	@ (800e5c4 <TIM_Base_SetConfig+0x138>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d00f      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4a29      	ldr	r2, [pc, #164]	@ (800e5c8 <TIM_Base_SetConfig+0x13c>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d00b      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4a28      	ldr	r2, [pc, #160]	@ (800e5cc <TIM_Base_SetConfig+0x140>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d007      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4a27      	ldr	r2, [pc, #156]	@ (800e5d0 <TIM_Base_SetConfig+0x144>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d003      	beq.n	800e53e <TIM_Base_SetConfig+0xb2>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a26      	ldr	r2, [pc, #152]	@ (800e5d4 <TIM_Base_SetConfig+0x148>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d108      	bne.n	800e550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	68fa      	ldr	r2, [r7, #12]
 800e54c:	4313      	orrs	r3, r2
 800e54e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	689a      	ldr	r2, [r3, #8]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a0e      	ldr	r2, [pc, #56]	@ (800e5ac <TIM_Base_SetConfig+0x120>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d003      	beq.n	800e57e <TIM_Base_SetConfig+0xf2>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a10      	ldr	r2, [pc, #64]	@ (800e5bc <TIM_Base_SetConfig+0x130>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d103      	bne.n	800e586 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	691a      	ldr	r2, [r3, #16]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f043 0204 	orr.w	r2, r3, #4
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2201      	movs	r2, #1
 800e596:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	601a      	str	r2, [r3, #0]
}
 800e59e:	bf00      	nop
 800e5a0:	3714      	adds	r7, #20
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	40010000 	.word	0x40010000
 800e5b0:	40000400 	.word	0x40000400
 800e5b4:	40000800 	.word	0x40000800
 800e5b8:	40000c00 	.word	0x40000c00
 800e5bc:	40010400 	.word	0x40010400
 800e5c0:	40014000 	.word	0x40014000
 800e5c4:	40014400 	.word	0x40014400
 800e5c8:	40014800 	.word	0x40014800
 800e5cc:	40001800 	.word	0x40001800
 800e5d0:	40001c00 	.word	0x40001c00
 800e5d4:	40002000 	.word	0x40002000

0800e5d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a1b      	ldr	r3, [r3, #32]
 800e5e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a1b      	ldr	r3, [r3, #32]
 800e5ec:	f023 0201 	bic.w	r2, r3, #1
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	699b      	ldr	r3, [r3, #24]
 800e5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	4b2b      	ldr	r3, [pc, #172]	@ (800e6b0 <TIM_OC1_SetConfig+0xd8>)
 800e604:	4013      	ands	r3, r2
 800e606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f023 0303 	bic.w	r3, r3, #3
 800e60e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	4313      	orrs	r3, r2
 800e618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	f023 0302 	bic.w	r3, r3, #2
 800e620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	697a      	ldr	r2, [r7, #20]
 800e628:	4313      	orrs	r3, r2
 800e62a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a21      	ldr	r2, [pc, #132]	@ (800e6b4 <TIM_OC1_SetConfig+0xdc>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d003      	beq.n	800e63c <TIM_OC1_SetConfig+0x64>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a20      	ldr	r2, [pc, #128]	@ (800e6b8 <TIM_OC1_SetConfig+0xe0>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d10c      	bne.n	800e656 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	f023 0308 	bic.w	r3, r3, #8
 800e642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	697a      	ldr	r2, [r7, #20]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	f023 0304 	bic.w	r3, r3, #4
 800e654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a16      	ldr	r2, [pc, #88]	@ (800e6b4 <TIM_OC1_SetConfig+0xdc>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d003      	beq.n	800e666 <TIM_OC1_SetConfig+0x8e>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a15      	ldr	r2, [pc, #84]	@ (800e6b8 <TIM_OC1_SetConfig+0xe0>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d111      	bne.n	800e68a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e66c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	695b      	ldr	r3, [r3, #20]
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	693a      	ldr	r2, [r7, #16]
 800e686:	4313      	orrs	r3, r2
 800e688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	693a      	ldr	r2, [r7, #16]
 800e68e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	685a      	ldr	r2, [r3, #4]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	697a      	ldr	r2, [r7, #20]
 800e6a2:	621a      	str	r2, [r3, #32]
}
 800e6a4:	bf00      	nop
 800e6a6:	371c      	adds	r7, #28
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr
 800e6b0:	fffeff8f 	.word	0xfffeff8f
 800e6b4:	40010000 	.word	0x40010000
 800e6b8:	40010400 	.word	0x40010400

0800e6bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b087      	sub	sp, #28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a1b      	ldr	r3, [r3, #32]
 800e6d0:	f023 0210 	bic.w	r2, r3, #16
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	4b2e      	ldr	r3, [pc, #184]	@ (800e7a0 <TIM_OC2_SetConfig+0xe4>)
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	021b      	lsls	r3, r3, #8
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	f023 0320 	bic.w	r3, r3, #32
 800e706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	689b      	ldr	r3, [r3, #8]
 800e70c:	011b      	lsls	r3, r3, #4
 800e70e:	697a      	ldr	r2, [r7, #20]
 800e710:	4313      	orrs	r3, r2
 800e712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	4a23      	ldr	r2, [pc, #140]	@ (800e7a4 <TIM_OC2_SetConfig+0xe8>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d003      	beq.n	800e724 <TIM_OC2_SetConfig+0x68>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	4a22      	ldr	r2, [pc, #136]	@ (800e7a8 <TIM_OC2_SetConfig+0xec>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d10d      	bne.n	800e740 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e72a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	011b      	lsls	r3, r3, #4
 800e732:	697a      	ldr	r2, [r7, #20]
 800e734:	4313      	orrs	r3, r2
 800e736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e73e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4a18      	ldr	r2, [pc, #96]	@ (800e7a4 <TIM_OC2_SetConfig+0xe8>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d003      	beq.n	800e750 <TIM_OC2_SetConfig+0x94>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4a17      	ldr	r2, [pc, #92]	@ (800e7a8 <TIM_OC2_SetConfig+0xec>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d113      	bne.n	800e778 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e75e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	695b      	ldr	r3, [r3, #20]
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	693a      	ldr	r2, [r7, #16]
 800e768:	4313      	orrs	r3, r2
 800e76a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	693a      	ldr	r2, [r7, #16]
 800e774:	4313      	orrs	r3, r2
 800e776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	693a      	ldr	r2, [r7, #16]
 800e77c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	685a      	ldr	r2, [r3, #4]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	621a      	str	r2, [r3, #32]
}
 800e792:	bf00      	nop
 800e794:	371c      	adds	r7, #28
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	feff8fff 	.word	0xfeff8fff
 800e7a4:	40010000 	.word	0x40010000
 800e7a8:	40010400 	.word	0x40010400

0800e7ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b087      	sub	sp, #28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a1b      	ldr	r3, [r3, #32]
 800e7c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	4b2d      	ldr	r3, [pc, #180]	@ (800e88c <TIM_OC3_SetConfig+0xe0>)
 800e7d8:	4013      	ands	r3, r2
 800e7da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f023 0303 	bic.w	r3, r3, #3
 800e7e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e7f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	689b      	ldr	r3, [r3, #8]
 800e7fa:	021b      	lsls	r3, r3, #8
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	4313      	orrs	r3, r2
 800e800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4a22      	ldr	r2, [pc, #136]	@ (800e890 <TIM_OC3_SetConfig+0xe4>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d003      	beq.n	800e812 <TIM_OC3_SetConfig+0x66>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a21      	ldr	r2, [pc, #132]	@ (800e894 <TIM_OC3_SetConfig+0xe8>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d10d      	bne.n	800e82e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	021b      	lsls	r3, r3, #8
 800e820:	697a      	ldr	r2, [r7, #20]
 800e822:	4313      	orrs	r3, r2
 800e824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e82c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4a17      	ldr	r2, [pc, #92]	@ (800e890 <TIM_OC3_SetConfig+0xe4>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d003      	beq.n	800e83e <TIM_OC3_SetConfig+0x92>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	4a16      	ldr	r2, [pc, #88]	@ (800e894 <TIM_OC3_SetConfig+0xe8>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d113      	bne.n	800e866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e84c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	695b      	ldr	r3, [r3, #20]
 800e852:	011b      	lsls	r3, r3, #4
 800e854:	693a      	ldr	r2, [r7, #16]
 800e856:	4313      	orrs	r3, r2
 800e858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	699b      	ldr	r3, [r3, #24]
 800e85e:	011b      	lsls	r3, r3, #4
 800e860:	693a      	ldr	r2, [r7, #16]
 800e862:	4313      	orrs	r3, r2
 800e864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	693a      	ldr	r2, [r7, #16]
 800e86a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	685a      	ldr	r2, [r3, #4]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	697a      	ldr	r2, [r7, #20]
 800e87e:	621a      	str	r2, [r3, #32]
}
 800e880:	bf00      	nop
 800e882:	371c      	adds	r7, #28
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	fffeff8f 	.word	0xfffeff8f
 800e890:	40010000 	.word	0x40010000
 800e894:	40010400 	.word	0x40010400

0800e898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e898:	b480      	push	{r7}
 800e89a:	b087      	sub	sp, #28
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a1b      	ldr	r3, [r3, #32]
 800e8ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	69db      	ldr	r3, [r3, #28]
 800e8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	4b1e      	ldr	r3, [pc, #120]	@ (800e93c <TIM_OC4_SetConfig+0xa4>)
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	021b      	lsls	r3, r3, #8
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e8e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	689b      	ldr	r3, [r3, #8]
 800e8e8:	031b      	lsls	r3, r3, #12
 800e8ea:	693a      	ldr	r2, [r7, #16]
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a13      	ldr	r2, [pc, #76]	@ (800e940 <TIM_OC4_SetConfig+0xa8>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d003      	beq.n	800e900 <TIM_OC4_SetConfig+0x68>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a12      	ldr	r2, [pc, #72]	@ (800e944 <TIM_OC4_SetConfig+0xac>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d109      	bne.n	800e914 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	695b      	ldr	r3, [r3, #20]
 800e90c:	019b      	lsls	r3, r3, #6
 800e90e:	697a      	ldr	r2, [r7, #20]
 800e910:	4313      	orrs	r3, r2
 800e912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	685a      	ldr	r2, [r3, #4]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	693a      	ldr	r2, [r7, #16]
 800e92c:	621a      	str	r2, [r3, #32]
}
 800e92e:	bf00      	nop
 800e930:	371c      	adds	r7, #28
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	feff8fff 	.word	0xfeff8fff
 800e940:	40010000 	.word	0x40010000
 800e944:	40010400 	.word	0x40010400

0800e948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e948:	b480      	push	{r7}
 800e94a:	b087      	sub	sp, #28
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6a1b      	ldr	r3, [r3, #32]
 800e956:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a1b      	ldr	r3, [r3, #32]
 800e95c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	4b1b      	ldr	r3, [pc, #108]	@ (800e9e0 <TIM_OC5_SetConfig+0x98>)
 800e974:	4013      	ands	r3, r2
 800e976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	4313      	orrs	r3, r2
 800e980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	041b      	lsls	r3, r3, #16
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	4313      	orrs	r3, r2
 800e994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a12      	ldr	r2, [pc, #72]	@ (800e9e4 <TIM_OC5_SetConfig+0x9c>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d003      	beq.n	800e9a6 <TIM_OC5_SetConfig+0x5e>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a11      	ldr	r2, [pc, #68]	@ (800e9e8 <TIM_OC5_SetConfig+0xa0>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d109      	bne.n	800e9ba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	695b      	ldr	r3, [r3, #20]
 800e9b2:	021b      	lsls	r3, r3, #8
 800e9b4:	697a      	ldr	r2, [r7, #20]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	693a      	ldr	r2, [r7, #16]
 800e9d2:	621a      	str	r2, [r3, #32]
}
 800e9d4:	bf00      	nop
 800e9d6:	371c      	adds	r7, #28
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	fffeff8f 	.word	0xfffeff8f
 800e9e4:	40010000 	.word	0x40010000
 800e9e8:	40010400 	.word	0x40010400

0800e9ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b087      	sub	sp, #28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a1b      	ldr	r3, [r3, #32]
 800e9fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ea14:	68fa      	ldr	r2, [r7, #12]
 800ea16:	4b1c      	ldr	r3, [pc, #112]	@ (800ea88 <TIM_OC6_SetConfig+0x9c>)
 800ea18:	4013      	ands	r3, r2
 800ea1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	4313      	orrs	r3, r2
 800ea26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ea2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	051b      	lsls	r3, r3, #20
 800ea36:	693a      	ldr	r2, [r7, #16]
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a13      	ldr	r2, [pc, #76]	@ (800ea8c <TIM_OC6_SetConfig+0xa0>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d003      	beq.n	800ea4c <TIM_OC6_SetConfig+0x60>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a12      	ldr	r2, [pc, #72]	@ (800ea90 <TIM_OC6_SetConfig+0xa4>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d109      	bne.n	800ea60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ea52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	695b      	ldr	r3, [r3, #20]
 800ea58:	029b      	lsls	r3, r3, #10
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	685a      	ldr	r2, [r3, #4]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	621a      	str	r2, [r3, #32]
}
 800ea7a:	bf00      	nop
 800ea7c:	371c      	adds	r7, #28
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	feff8fff 	.word	0xfeff8fff
 800ea8c:	40010000 	.word	0x40010000
 800ea90:	40010400 	.word	0x40010400

0800ea94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6a1b      	ldr	r3, [r3, #32]
 800eaa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6a1b      	ldr	r3, [r3, #32]
 800eaaa:	f023 0201 	bic.w	r2, r3, #1
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800eabe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	011b      	lsls	r3, r3, #4
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	4313      	orrs	r3, r2
 800eac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f023 030a 	bic.w	r3, r3, #10
 800ead0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	693a      	ldr	r2, [r7, #16]
 800eade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	621a      	str	r2, [r3, #32]
}
 800eae6:	bf00      	nop
 800eae8:	371c      	adds	r7, #28
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr

0800eaf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eaf2:	b480      	push	{r7}
 800eaf4:	b087      	sub	sp, #28
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	60f8      	str	r0, [r7, #12]
 800eafa:	60b9      	str	r1, [r7, #8]
 800eafc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6a1b      	ldr	r3, [r3, #32]
 800eb08:	f023 0210 	bic.w	r2, r3, #16
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	699b      	ldr	r3, [r3, #24]
 800eb14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800eb1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	031b      	lsls	r3, r3, #12
 800eb22:	693a      	ldr	r2, [r7, #16]
 800eb24:	4313      	orrs	r3, r2
 800eb26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800eb2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	011b      	lsls	r3, r3, #4
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	693a      	ldr	r2, [r7, #16]
 800eb3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	621a      	str	r2, [r3, #32]
}
 800eb46:	bf00      	nop
 800eb48:	371c      	adds	r7, #28
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eb52:	b480      	push	{r7}
 800eb54:	b085      	sub	sp, #20
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	f043 0307 	orr.w	r3, r3, #7
 800eb74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	609a      	str	r2, [r3, #8]
}
 800eb7c:	bf00      	nop
 800eb7e:	3714      	adds	r7, #20
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b087      	sub	sp, #28
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	021a      	lsls	r2, r3, #8
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	431a      	orrs	r2, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	697a      	ldr	r2, [r7, #20]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	609a      	str	r2, [r3, #8]
}
 800ebbc:	bf00      	nop
 800ebbe:	371c      	adds	r7, #28
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d101      	bne.n	800ebe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ebdc:	2302      	movs	r3, #2
 800ebde:	e06d      	b.n	800ecbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2202      	movs	r2, #2
 800ebec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a30      	ldr	r2, [pc, #192]	@ (800ecc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d004      	beq.n	800ec14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a2f      	ldr	r2, [pc, #188]	@ (800eccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d108      	bne.n	800ec26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ec1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	4313      	orrs	r3, r2
 800ec24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4313      	orrs	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a20      	ldr	r2, [pc, #128]	@ (800ecc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d022      	beq.n	800ec90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec52:	d01d      	beq.n	800ec90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a1d      	ldr	r2, [pc, #116]	@ (800ecd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d018      	beq.n	800ec90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a1c      	ldr	r2, [pc, #112]	@ (800ecd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d013      	beq.n	800ec90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a1a      	ldr	r2, [pc, #104]	@ (800ecd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d00e      	beq.n	800ec90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a15      	ldr	r2, [pc, #84]	@ (800eccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d009      	beq.n	800ec90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a16      	ldr	r2, [pc, #88]	@ (800ecdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d004      	beq.n	800ec90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a15      	ldr	r2, [pc, #84]	@ (800ece0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d10c      	bne.n	800ecaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ec96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2201      	movs	r2, #1
 800ecae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr
 800ecc8:	40010000 	.word	0x40010000
 800eccc:	40010400 	.word	0x40010400
 800ecd0:	40000400 	.word	0x40000400
 800ecd4:	40000800 	.word	0x40000800
 800ecd8:	40000c00 	.word	0x40000c00
 800ecdc:	40014000 	.word	0x40014000
 800ece0:	40001800 	.word	0x40001800

0800ece4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d101      	bne.n	800ed00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ecfc:	2302      	movs	r3, #2
 800ecfe:	e065      	b.n	800edcc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	4313      	orrs	r3, r2
 800ed14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	689b      	ldr	r3, [r3, #8]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	695b      	ldr	r3, [r3, #20]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed66:	4313      	orrs	r3, r2
 800ed68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	041b      	lsls	r3, r3, #16
 800ed76:	4313      	orrs	r3, r2
 800ed78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4a16      	ldr	r2, [pc, #88]	@ (800edd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d004      	beq.n	800ed8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a14      	ldr	r2, [pc, #80]	@ (800eddc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d115      	bne.n	800edba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed98:	051b      	lsls	r3, r3, #20
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	69db      	ldr	r3, [r3, #28]
 800eda8:	4313      	orrs	r3, r2
 800edaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3714      	adds	r7, #20
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr
 800edd8:	40010000 	.word	0x40010000
 800eddc:	40010400 	.word	0x40010400

0800ede0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d101      	bne.n	800ee2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e040      	b.n	800eeb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d106      	bne.n	800ee44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f7f5 fb68 	bl	8004514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2224      	movs	r2, #36	@ 0x24
 800ee48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f022 0201 	bic.w	r2, r2, #1
 800ee58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 ffb6 	bl	800fdd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fd4f 	bl	800f90c <UART_SetConfig>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d101      	bne.n	800ee78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e01b      	b.n	800eeb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ee86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	689a      	ldr	r2, [r3, #8]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ee96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f042 0201 	orr.w	r2, r2, #1
 800eea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f001 f835 	bl	800ff18 <UART_CheckIdleState>
 800eeae:	4603      	mov	r3, r0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b08a      	sub	sp, #40	@ 0x28
 800eebc:	af02      	add	r7, sp, #8
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	603b      	str	r3, [r7, #0]
 800eec4:	4613      	mov	r3, r2
 800eec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eecc:	2b20      	cmp	r3, #32
 800eece:	d177      	bne.n	800efc0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d002      	beq.n	800eedc <HAL_UART_Transmit+0x24>
 800eed6:	88fb      	ldrh	r3, [r7, #6]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d101      	bne.n	800eee0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	e070      	b.n	800efc2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2221      	movs	r2, #33	@ 0x21
 800eeec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eeee:	f7f6 fbff 	bl	80056f0 <HAL_GetTick>
 800eef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	88fa      	ldrh	r2, [r7, #6]
 800eef8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	88fa      	ldrh	r2, [r7, #6]
 800ef00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef0c:	d108      	bne.n	800ef20 <HAL_UART_Transmit+0x68>
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	691b      	ldr	r3, [r3, #16]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d104      	bne.n	800ef20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	61bb      	str	r3, [r7, #24]
 800ef1e:	e003      	b.n	800ef28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef24:	2300      	movs	r3, #0
 800ef26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ef28:	e02f      	b.n	800ef8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	2200      	movs	r2, #0
 800ef32:	2180      	movs	r1, #128	@ 0x80
 800ef34:	68f8      	ldr	r0, [r7, #12]
 800ef36:	f001 f846 	bl	800ffc6 <UART_WaitOnFlagUntilTimeout>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d004      	beq.n	800ef4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2220      	movs	r2, #32
 800ef44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ef46:	2303      	movs	r3, #3
 800ef48:	e03b      	b.n	800efc2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d10b      	bne.n	800ef68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	461a      	mov	r2, r3
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ef5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	3302      	adds	r3, #2
 800ef64:	61bb      	str	r3, [r7, #24]
 800ef66:	e007      	b.n	800ef78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	781a      	ldrb	r2, [r3, #0]
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	3301      	adds	r3, #1
 800ef76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	3b01      	subs	r3, #1
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d1c9      	bne.n	800ef2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2140      	movs	r1, #64	@ 0x40
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f001 f810 	bl	800ffc6 <UART_WaitOnFlagUntilTimeout>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d004      	beq.n	800efb6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2220      	movs	r2, #32
 800efb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800efb2:	2303      	movs	r3, #3
 800efb4:	e005      	b.n	800efc2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2220      	movs	r2, #32
 800efba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	e000      	b.n	800efc2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800efc0:	2302      	movs	r3, #2
  }
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3720      	adds	r7, #32
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b08a      	sub	sp, #40	@ 0x28
 800efce:	af02      	add	r7, sp, #8
 800efd0:	60f8      	str	r0, [r7, #12]
 800efd2:	60b9      	str	r1, [r7, #8]
 800efd4:	603b      	str	r3, [r7, #0]
 800efd6:	4613      	mov	r3, r2
 800efd8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efe0:	2b20      	cmp	r3, #32
 800efe2:	f040 80b5 	bne.w	800f150 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <HAL_UART_Receive+0x28>
 800efec:	88fb      	ldrh	r3, [r7, #6]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e0ad      	b.n	800f152 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2200      	movs	r2, #0
 800effa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2222      	movs	r2, #34	@ 0x22
 800f002:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2200      	movs	r2, #0
 800f00a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f00c:	f7f6 fb70 	bl	80056f0 <HAL_GetTick>
 800f010:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	88fa      	ldrh	r2, [r7, #6]
 800f016:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	88fa      	ldrh	r2, [r7, #6]
 800f01e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f02a:	d10e      	bne.n	800f04a <HAL_UART_Receive+0x80>
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d105      	bne.n	800f040 <HAL_UART_Receive+0x76>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f03a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f03e:	e02d      	b.n	800f09c <HAL_UART_Receive+0xd2>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	22ff      	movs	r2, #255	@ 0xff
 800f044:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f048:	e028      	b.n	800f09c <HAL_UART_Receive+0xd2>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d10d      	bne.n	800f06e <HAL_UART_Receive+0xa4>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d104      	bne.n	800f064 <HAL_UART_Receive+0x9a>
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	22ff      	movs	r2, #255	@ 0xff
 800f05e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f062:	e01b      	b.n	800f09c <HAL_UART_Receive+0xd2>
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	227f      	movs	r2, #127	@ 0x7f
 800f068:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f06c:	e016      	b.n	800f09c <HAL_UART_Receive+0xd2>
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f076:	d10d      	bne.n	800f094 <HAL_UART_Receive+0xca>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	691b      	ldr	r3, [r3, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d104      	bne.n	800f08a <HAL_UART_Receive+0xc0>
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	227f      	movs	r2, #127	@ 0x7f
 800f084:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f088:	e008      	b.n	800f09c <HAL_UART_Receive+0xd2>
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	223f      	movs	r2, #63	@ 0x3f
 800f08e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f092:	e003      	b.n	800f09c <HAL_UART_Receive+0xd2>
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f0a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0ac:	d108      	bne.n	800f0c0 <HAL_UART_Receive+0xf6>
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d104      	bne.n	800f0c0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	61bb      	str	r3, [r7, #24]
 800f0be:	e003      	b.n	800f0c8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f0c8:	e036      	b.n	800f138 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	9300      	str	r3, [sp, #0]
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	2120      	movs	r1, #32
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	f000 ff76 	bl	800ffc6 <UART_WaitOnFlagUntilTimeout>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d005      	beq.n	800f0ec <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2220      	movs	r2, #32
 800f0e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f0e8:	2303      	movs	r3, #3
 800f0ea:	e032      	b.n	800f152 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d10c      	bne.n	800f10c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	8a7b      	ldrh	r3, [r7, #18]
 800f0fc:	4013      	ands	r3, r2
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	3302      	adds	r3, #2
 800f108:	61bb      	str	r3, [r7, #24]
 800f10a:	e00c      	b.n	800f126 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f112:	b2da      	uxtb	r2, r3
 800f114:	8a7b      	ldrh	r3, [r7, #18]
 800f116:	b2db      	uxtb	r3, r3
 800f118:	4013      	ands	r3, r2
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	3301      	adds	r3, #1
 800f124:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	3b01      	subs	r3, #1
 800f130:	b29a      	uxth	r2, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f13e:	b29b      	uxth	r3, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d1c2      	bne.n	800f0ca <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2220      	movs	r2, #32
 800f148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	e000      	b.n	800f152 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f150:	2302      	movs	r3, #2
  }
}
 800f152:	4618      	mov	r0, r3
 800f154:	3720      	adds	r7, #32
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b08a      	sub	sp, #40	@ 0x28
 800f15e:	af00      	add	r7, sp, #0
 800f160:	60f8      	str	r0, [r7, #12]
 800f162:	60b9      	str	r1, [r7, #8]
 800f164:	4613      	mov	r3, r2
 800f166:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f16e:	2b20      	cmp	r3, #32
 800f170:	d132      	bne.n	800f1d8 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <HAL_UART_Receive_DMA+0x24>
 800f178:	88fb      	ldrh	r3, [r7, #6]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f17e:	2301      	movs	r3, #1
 800f180:	e02b      	b.n	800f1da <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2200      	movs	r2, #0
 800f186:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f192:	2b00      	cmp	r3, #0
 800f194:	d018      	beq.n	800f1c8 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	e853 3f00 	ldrex	r3, [r3]
 800f1a2:	613b      	str	r3, [r7, #16]
   return(result);
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f1aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b4:	623b      	str	r3, [r7, #32]
 800f1b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1b8:	69f9      	ldr	r1, [r7, #28]
 800f1ba:	6a3a      	ldr	r2, [r7, #32]
 800f1bc:	e841 2300 	strex	r3, r2, [r1]
 800f1c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d1e6      	bne.n	800f196 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f1c8:	88fb      	ldrh	r3, [r7, #6]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	68b9      	ldr	r1, [r7, #8]
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f000 ff66 	bl	80100a0 <UART_Start_Receive_DMA>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	e000      	b.n	800f1da <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f1d8:	2302      	movs	r3, #2
  }
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3728      	adds	r7, #40	@ 0x28
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b090      	sub	sp, #64	@ 0x40
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f202:	2b80      	cmp	r3, #128	@ 0x80
 800f204:	d139      	bne.n	800f27a <HAL_UART_DMAStop+0x98>
 800f206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f208:	2b21      	cmp	r3, #33	@ 0x21
 800f20a:	d136      	bne.n	800f27a <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	3308      	adds	r3, #8
 800f212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f214:	6a3b      	ldr	r3, [r7, #32]
 800f216:	e853 3f00 	ldrex	r3, [r3]
 800f21a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f222:	637b      	str	r3, [r7, #52]	@ 0x34
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	3308      	adds	r3, #8
 800f22a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f22c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f22e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f234:	e841 2300 	strex	r3, r2, [r1]
 800f238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d1e5      	bne.n	800f20c <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f244:	2b00      	cmp	r3, #0
 800f246:	d015      	beq.n	800f274 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7f7 f8d1 	bl	80063f4 <HAL_DMA_Abort>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00d      	beq.n	800f274 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f7 fae5 	bl	800682c <HAL_DMA_GetError>
 800f262:	4603      	mov	r3, r0
 800f264:	2b20      	cmp	r3, #32
 800f266:	d105      	bne.n	800f274 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2210      	movs	r2, #16
 800f26c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f270:	2303      	movs	r3, #3
 800f272:	e044      	b.n	800f2fe <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 ffb3 	bl	80101e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f284:	2b40      	cmp	r3, #64	@ 0x40
 800f286:	d139      	bne.n	800f2fc <HAL_UART_DMAStop+0x11a>
 800f288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28a:	2b22      	cmp	r3, #34	@ 0x22
 800f28c:	d136      	bne.n	800f2fc <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	3308      	adds	r3, #8
 800f294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	e853 3f00 	ldrex	r3, [r3]
 800f29c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	3308      	adds	r3, #8
 800f2ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2ae:	61ba      	str	r2, [r7, #24]
 800f2b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b2:	6979      	ldr	r1, [r7, #20]
 800f2b4:	69ba      	ldr	r2, [r7, #24]
 800f2b6:	e841 2300 	strex	r3, r2, [r1]
 800f2ba:	613b      	str	r3, [r7, #16]
   return(result);
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1e5      	bne.n	800f28e <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d015      	beq.n	800f2f6 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7f7 f890 	bl	80063f4 <HAL_DMA_Abort>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00d      	beq.n	800f2f6 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7f7 faa4 	bl	800682c <HAL_DMA_GetError>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b20      	cmp	r3, #32
 800f2e8:	d105      	bne.n	800f2f6 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2210      	movs	r2, #16
 800f2ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f2f2:	2303      	movs	r3, #3
 800f2f4:	e003      	b.n	800f2fe <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f000 ff98 	bl	801022c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3740      	adds	r7, #64	@ 0x40
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
	...

0800f308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b0ba      	sub	sp, #232	@ 0xe8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	69db      	ldr	r3, [r3, #28]
 800f316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f32e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f332:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f336:	4013      	ands	r3, r2
 800f338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f33c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f340:	2b00      	cmp	r3, #0
 800f342:	d115      	bne.n	800f370 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f348:	f003 0320 	and.w	r3, r3, #32
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00f      	beq.n	800f370 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f354:	f003 0320 	and.w	r3, r3, #32
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d009      	beq.n	800f370 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f360:	2b00      	cmp	r3, #0
 800f362:	f000 82b1 	beq.w	800f8c8 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	4798      	blx	r3
      }
      return;
 800f36e:	e2ab      	b.n	800f8c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 8117 	beq.w	800f5a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	d106      	bne.n	800f394 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f386:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f38a:	4b85      	ldr	r3, [pc, #532]	@ (800f5a0 <HAL_UART_IRQHandler+0x298>)
 800f38c:	4013      	ands	r3, r2
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 810a 	beq.w	800f5a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f398:	f003 0301 	and.w	r3, r3, #1
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d011      	beq.n	800f3c4 <HAL_UART_IRQHandler+0xbc>
 800f3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00b      	beq.n	800f3c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3ba:	f043 0201 	orr.w	r2, r3, #1
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3c8:	f003 0302 	and.w	r3, r3, #2
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d011      	beq.n	800f3f4 <HAL_UART_IRQHandler+0xec>
 800f3d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3d4:	f003 0301 	and.w	r3, r3, #1
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00b      	beq.n	800f3f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2202      	movs	r2, #2
 800f3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3ea:	f043 0204 	orr.w	r2, r3, #4
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3f8:	f003 0304 	and.w	r3, r3, #4
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d011      	beq.n	800f424 <HAL_UART_IRQHandler+0x11c>
 800f400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d00b      	beq.n	800f424 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2204      	movs	r2, #4
 800f412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f41a:	f043 0202 	orr.w	r2, r3, #2
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f428:	f003 0308 	and.w	r3, r3, #8
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d017      	beq.n	800f460 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f434:	f003 0320 	and.w	r3, r3, #32
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d105      	bne.n	800f448 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f43c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f440:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00b      	beq.n	800f460 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2208      	movs	r2, #8
 800f44e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f456:	f043 0208 	orr.w	r2, r3, #8
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d012      	beq.n	800f492 <HAL_UART_IRQHandler+0x18a>
 800f46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f470:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00c      	beq.n	800f492 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f488:	f043 0220 	orr.w	r2, r3, #32
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f000 8217 	beq.w	800f8cc <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4a2:	f003 0320 	and.w	r3, r3, #32
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00d      	beq.n	800f4c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4ae:	f003 0320 	and.w	r3, r3, #32
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d007      	beq.n	800f4c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4da:	2b40      	cmp	r3, #64	@ 0x40
 800f4dc:	d005      	beq.n	800f4ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f4de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f4e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d04f      	beq.n	800f58a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 fe9e 	bl	801022c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	689b      	ldr	r3, [r3, #8]
 800f4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4fa:	2b40      	cmp	r3, #64	@ 0x40
 800f4fc:	d141      	bne.n	800f582 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3308      	adds	r3, #8
 800f504:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f508:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f50c:	e853 3f00 	ldrex	r3, [r3]
 800f510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f514:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f51c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	3308      	adds	r3, #8
 800f526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f52a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f52e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f53a:	e841 2300 	strex	r3, r2, [r1]
 800f53e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1d9      	bne.n	800f4fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d013      	beq.n	800f57a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f556:	4a13      	ldr	r2, [pc, #76]	@ (800f5a4 <HAL_UART_IRQHandler+0x29c>)
 800f558:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f55e:	4618      	mov	r0, r3
 800f560:	f7f6 ffb8 	bl	80064d4 <HAL_DMA_Abort_IT>
 800f564:	4603      	mov	r3, r0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d017      	beq.n	800f59a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f56e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f574:	4610      	mov	r0, r2
 800f576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f578:	e00f      	b.n	800f59a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7f5 ff46 	bl	800540c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f580:	e00b      	b.n	800f59a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7f5 ff42 	bl	800540c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f588:	e007      	b.n	800f59a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f7f5 ff3e 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800f598:	e198      	b.n	800f8cc <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f59a:	bf00      	nop
    return;
 800f59c:	e196      	b.n	800f8cc <HAL_UART_IRQHandler+0x5c4>
 800f59e:	bf00      	nop
 800f5a0:	04000120 	.word	0x04000120
 800f5a4:	08010543 	.word	0x08010543

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	f040 8166 	bne.w	800f87e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5b6:	f003 0310 	and.w	r3, r3, #16
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f000 815f 	beq.w	800f87e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5c4:	f003 0310 	and.w	r3, r3, #16
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 8158 	beq.w	800f87e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2210      	movs	r2, #16
 800f5d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5e0:	2b40      	cmp	r3, #64	@ 0x40
 800f5e2:	f040 80d0 	bne.w	800f786 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f5f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f000 80ab 	beq.w	800f752 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f606:	429a      	cmp	r2, r3
 800f608:	f080 80a3 	bcs.w	800f752 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f612:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f61a:	69db      	ldr	r3, [r3, #28]
 800f61c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f620:	f000 8086 	beq.w	800f730 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f630:	e853 3f00 	ldrex	r3, [r3]
 800f634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f638:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f63c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f640:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	461a      	mov	r2, r3
 800f64a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f64e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f652:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f656:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f65a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f65e:	e841 2300 	strex	r3, r2, [r1]
 800f662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1da      	bne.n	800f624 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3308      	adds	r3, #8
 800f674:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f678:	e853 3f00 	ldrex	r3, [r3]
 800f67c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f67e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f680:	f023 0301 	bic.w	r3, r3, #1
 800f684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	3308      	adds	r3, #8
 800f68e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f692:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f696:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f698:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f69a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f69e:	e841 2300 	strex	r3, r2, [r1]
 800f6a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f6a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1e1      	bne.n	800f66e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3308      	adds	r3, #8
 800f6b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6b4:	e853 3f00 	ldrex	r3, [r3]
 800f6b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f6ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f6ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f6d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f6d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f6d6:	e841 2300 	strex	r3, r2, [r1]
 800f6da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f6dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1e3      	bne.n	800f6aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2220      	movs	r2, #32
 800f6e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6f8:	e853 3f00 	ldrex	r3, [r3]
 800f6fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f6fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f700:	f023 0310 	bic.w	r3, r3, #16
 800f704:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	461a      	mov	r2, r3
 800f70e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f712:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f714:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f716:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f71a:	e841 2300 	strex	r3, r2, [r1]
 800f71e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f722:	2b00      	cmp	r3, #0
 800f724:	d1e4      	bne.n	800f6f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7f6 fe62 	bl	80063f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2202      	movs	r2, #2
 800f734:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f742:	b29b      	uxth	r3, r3
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	b29b      	uxth	r3, r3
 800f748:	4619      	mov	r1, r3
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f8d2 	bl	800f8f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f750:	e0be      	b.n	800f8d0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f758:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f75c:	429a      	cmp	r2, r3
 800f75e:	f040 80b7 	bne.w	800f8d0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f76c:	f040 80b0 	bne.w	800f8d0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2202      	movs	r2, #2
 800f774:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f77c:	4619      	mov	r1, r3
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 f8b8 	bl	800f8f4 <HAL_UARTEx_RxEventCallback>
      return;
 800f784:	e0a4      	b.n	800f8d0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f792:	b29b      	uxth	r3, r3
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	f000 8096 	beq.w	800f8d4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800f7a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f000 8091 	beq.w	800f8d4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ba:	e853 3f00 	ldrex	r3, [r3]
 800f7be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f7c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f7d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f7da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7dc:	e841 2300 	strex	r3, r2, [r1]
 800f7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d1e4      	bne.n	800f7b2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	3308      	adds	r3, #8
 800f7ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f2:	e853 3f00 	ldrex	r3, [r3]
 800f7f6:	623b      	str	r3, [r7, #32]
   return(result);
 800f7f8:	6a3b      	ldr	r3, [r7, #32]
 800f7fa:	f023 0301 	bic.w	r3, r3, #1
 800f7fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3308      	adds	r3, #8
 800f808:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f80c:	633a      	str	r2, [r7, #48]	@ 0x30
 800f80e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f810:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f814:	e841 2300 	strex	r3, r2, [r1]
 800f818:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1e3      	bne.n	800f7e8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2220      	movs	r2, #32
 800f824:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	e853 3f00 	ldrex	r3, [r3]
 800f840:	60fb      	str	r3, [r7, #12]
   return(result);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f023 0310 	bic.w	r3, r3, #16
 800f848:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	461a      	mov	r2, r3
 800f852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f856:	61fb      	str	r3, [r7, #28]
 800f858:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85a:	69b9      	ldr	r1, [r7, #24]
 800f85c:	69fa      	ldr	r2, [r7, #28]
 800f85e:	e841 2300 	strex	r3, r2, [r1]
 800f862:	617b      	str	r3, [r7, #20]
   return(result);
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1e4      	bne.n	800f834 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2202      	movs	r2, #2
 800f86e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f874:	4619      	mov	r1, r3
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 f83c 	bl	800f8f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f87c:	e02a      	b.n	800f8d4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00e      	beq.n	800f8a8 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f88e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f892:	2b00      	cmp	r3, #0
 800f894:	d008      	beq.n	800f8a8 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d01c      	beq.n	800f8d8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	4798      	blx	r3
    }
    return;
 800f8a6:	e017      	b.n	800f8d8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d012      	beq.n	800f8da <HAL_UART_IRQHandler+0x5d2>
 800f8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00c      	beq.n	800f8da <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 fe50 	bl	8010566 <UART_EndTransmit_IT>
    return;
 800f8c6:	e008      	b.n	800f8da <HAL_UART_IRQHandler+0x5d2>
      return;
 800f8c8:	bf00      	nop
 800f8ca:	e006      	b.n	800f8da <HAL_UART_IRQHandler+0x5d2>
    return;
 800f8cc:	bf00      	nop
 800f8ce:	e004      	b.n	800f8da <HAL_UART_IRQHandler+0x5d2>
      return;
 800f8d0:	bf00      	nop
 800f8d2:	e002      	b.n	800f8da <HAL_UART_IRQHandler+0x5d2>
      return;
 800f8d4:	bf00      	nop
 800f8d6:	e000      	b.n	800f8da <HAL_UART_IRQHandler+0x5d2>
    return;
 800f8d8:	bf00      	nop
  }

}
 800f8da:	37e8      	adds	r7, #232	@ 0xe8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f8e8:	bf00      	nop
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b088      	sub	sp, #32
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f914:	2300      	movs	r3, #0
 800f916:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	689a      	ldr	r2, [r3, #8]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	691b      	ldr	r3, [r3, #16]
 800f920:	431a      	orrs	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	695b      	ldr	r3, [r3, #20]
 800f926:	431a      	orrs	r2, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	69db      	ldr	r3, [r3, #28]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	4ba6      	ldr	r3, [pc, #664]	@ (800fbd0 <UART_SetConfig+0x2c4>)
 800f938:	4013      	ands	r3, r2
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	6812      	ldr	r2, [r2, #0]
 800f93e:	6979      	ldr	r1, [r7, #20]
 800f940:	430b      	orrs	r3, r1
 800f942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68da      	ldr	r2, [r3, #12]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	430a      	orrs	r2, r1
 800f958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	699b      	ldr	r3, [r3, #24]
 800f95e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6a1b      	ldr	r3, [r3, #32]
 800f964:	697a      	ldr	r2, [r7, #20]
 800f966:	4313      	orrs	r3, r2
 800f968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	697a      	ldr	r2, [r7, #20]
 800f97a:	430a      	orrs	r2, r1
 800f97c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	4a94      	ldr	r2, [pc, #592]	@ (800fbd4 <UART_SetConfig+0x2c8>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d120      	bne.n	800f9ca <UART_SetConfig+0xbe>
 800f988:	4b93      	ldr	r3, [pc, #588]	@ (800fbd8 <UART_SetConfig+0x2cc>)
 800f98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f98e:	f003 0303 	and.w	r3, r3, #3
 800f992:	2b03      	cmp	r3, #3
 800f994:	d816      	bhi.n	800f9c4 <UART_SetConfig+0xb8>
 800f996:	a201      	add	r2, pc, #4	@ (adr r2, 800f99c <UART_SetConfig+0x90>)
 800f998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99c:	0800f9ad 	.word	0x0800f9ad
 800f9a0:	0800f9b9 	.word	0x0800f9b9
 800f9a4:	0800f9b3 	.word	0x0800f9b3
 800f9a8:	0800f9bf 	.word	0x0800f9bf
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	77fb      	strb	r3, [r7, #31]
 800f9b0:	e150      	b.n	800fc54 <UART_SetConfig+0x348>
 800f9b2:	2302      	movs	r3, #2
 800f9b4:	77fb      	strb	r3, [r7, #31]
 800f9b6:	e14d      	b.n	800fc54 <UART_SetConfig+0x348>
 800f9b8:	2304      	movs	r3, #4
 800f9ba:	77fb      	strb	r3, [r7, #31]
 800f9bc:	e14a      	b.n	800fc54 <UART_SetConfig+0x348>
 800f9be:	2308      	movs	r3, #8
 800f9c0:	77fb      	strb	r3, [r7, #31]
 800f9c2:	e147      	b.n	800fc54 <UART_SetConfig+0x348>
 800f9c4:	2310      	movs	r3, #16
 800f9c6:	77fb      	strb	r3, [r7, #31]
 800f9c8:	e144      	b.n	800fc54 <UART_SetConfig+0x348>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4a83      	ldr	r2, [pc, #524]	@ (800fbdc <UART_SetConfig+0x2d0>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d132      	bne.n	800fa3a <UART_SetConfig+0x12e>
 800f9d4:	4b80      	ldr	r3, [pc, #512]	@ (800fbd8 <UART_SetConfig+0x2cc>)
 800f9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9da:	f003 030c 	and.w	r3, r3, #12
 800f9de:	2b0c      	cmp	r3, #12
 800f9e0:	d828      	bhi.n	800fa34 <UART_SetConfig+0x128>
 800f9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f9e8 <UART_SetConfig+0xdc>)
 800f9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e8:	0800fa1d 	.word	0x0800fa1d
 800f9ec:	0800fa35 	.word	0x0800fa35
 800f9f0:	0800fa35 	.word	0x0800fa35
 800f9f4:	0800fa35 	.word	0x0800fa35
 800f9f8:	0800fa29 	.word	0x0800fa29
 800f9fc:	0800fa35 	.word	0x0800fa35
 800fa00:	0800fa35 	.word	0x0800fa35
 800fa04:	0800fa35 	.word	0x0800fa35
 800fa08:	0800fa23 	.word	0x0800fa23
 800fa0c:	0800fa35 	.word	0x0800fa35
 800fa10:	0800fa35 	.word	0x0800fa35
 800fa14:	0800fa35 	.word	0x0800fa35
 800fa18:	0800fa2f 	.word	0x0800fa2f
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	77fb      	strb	r3, [r7, #31]
 800fa20:	e118      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa22:	2302      	movs	r3, #2
 800fa24:	77fb      	strb	r3, [r7, #31]
 800fa26:	e115      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa28:	2304      	movs	r3, #4
 800fa2a:	77fb      	strb	r3, [r7, #31]
 800fa2c:	e112      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa2e:	2308      	movs	r3, #8
 800fa30:	77fb      	strb	r3, [r7, #31]
 800fa32:	e10f      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa34:	2310      	movs	r3, #16
 800fa36:	77fb      	strb	r3, [r7, #31]
 800fa38:	e10c      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4a68      	ldr	r2, [pc, #416]	@ (800fbe0 <UART_SetConfig+0x2d4>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d120      	bne.n	800fa86 <UART_SetConfig+0x17a>
 800fa44:	4b64      	ldr	r3, [pc, #400]	@ (800fbd8 <UART_SetConfig+0x2cc>)
 800fa46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fa4e:	2b30      	cmp	r3, #48	@ 0x30
 800fa50:	d013      	beq.n	800fa7a <UART_SetConfig+0x16e>
 800fa52:	2b30      	cmp	r3, #48	@ 0x30
 800fa54:	d814      	bhi.n	800fa80 <UART_SetConfig+0x174>
 800fa56:	2b20      	cmp	r3, #32
 800fa58:	d009      	beq.n	800fa6e <UART_SetConfig+0x162>
 800fa5a:	2b20      	cmp	r3, #32
 800fa5c:	d810      	bhi.n	800fa80 <UART_SetConfig+0x174>
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d002      	beq.n	800fa68 <UART_SetConfig+0x15c>
 800fa62:	2b10      	cmp	r3, #16
 800fa64:	d006      	beq.n	800fa74 <UART_SetConfig+0x168>
 800fa66:	e00b      	b.n	800fa80 <UART_SetConfig+0x174>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	77fb      	strb	r3, [r7, #31]
 800fa6c:	e0f2      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa6e:	2302      	movs	r3, #2
 800fa70:	77fb      	strb	r3, [r7, #31]
 800fa72:	e0ef      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa74:	2304      	movs	r3, #4
 800fa76:	77fb      	strb	r3, [r7, #31]
 800fa78:	e0ec      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa7a:	2308      	movs	r3, #8
 800fa7c:	77fb      	strb	r3, [r7, #31]
 800fa7e:	e0e9      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa80:	2310      	movs	r3, #16
 800fa82:	77fb      	strb	r3, [r7, #31]
 800fa84:	e0e6      	b.n	800fc54 <UART_SetConfig+0x348>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a56      	ldr	r2, [pc, #344]	@ (800fbe4 <UART_SetConfig+0x2d8>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d120      	bne.n	800fad2 <UART_SetConfig+0x1c6>
 800fa90:	4b51      	ldr	r3, [pc, #324]	@ (800fbd8 <UART_SetConfig+0x2cc>)
 800fa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fa9a:	2bc0      	cmp	r3, #192	@ 0xc0
 800fa9c:	d013      	beq.n	800fac6 <UART_SetConfig+0x1ba>
 800fa9e:	2bc0      	cmp	r3, #192	@ 0xc0
 800faa0:	d814      	bhi.n	800facc <UART_SetConfig+0x1c0>
 800faa2:	2b80      	cmp	r3, #128	@ 0x80
 800faa4:	d009      	beq.n	800faba <UART_SetConfig+0x1ae>
 800faa6:	2b80      	cmp	r3, #128	@ 0x80
 800faa8:	d810      	bhi.n	800facc <UART_SetConfig+0x1c0>
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <UART_SetConfig+0x1a8>
 800faae:	2b40      	cmp	r3, #64	@ 0x40
 800fab0:	d006      	beq.n	800fac0 <UART_SetConfig+0x1b4>
 800fab2:	e00b      	b.n	800facc <UART_SetConfig+0x1c0>
 800fab4:	2300      	movs	r3, #0
 800fab6:	77fb      	strb	r3, [r7, #31]
 800fab8:	e0cc      	b.n	800fc54 <UART_SetConfig+0x348>
 800faba:	2302      	movs	r3, #2
 800fabc:	77fb      	strb	r3, [r7, #31]
 800fabe:	e0c9      	b.n	800fc54 <UART_SetConfig+0x348>
 800fac0:	2304      	movs	r3, #4
 800fac2:	77fb      	strb	r3, [r7, #31]
 800fac4:	e0c6      	b.n	800fc54 <UART_SetConfig+0x348>
 800fac6:	2308      	movs	r3, #8
 800fac8:	77fb      	strb	r3, [r7, #31]
 800faca:	e0c3      	b.n	800fc54 <UART_SetConfig+0x348>
 800facc:	2310      	movs	r3, #16
 800face:	77fb      	strb	r3, [r7, #31]
 800fad0:	e0c0      	b.n	800fc54 <UART_SetConfig+0x348>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	4a44      	ldr	r2, [pc, #272]	@ (800fbe8 <UART_SetConfig+0x2dc>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d125      	bne.n	800fb28 <UART_SetConfig+0x21c>
 800fadc:	4b3e      	ldr	r3, [pc, #248]	@ (800fbd8 <UART_SetConfig+0x2cc>)
 800fade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800faea:	d017      	beq.n	800fb1c <UART_SetConfig+0x210>
 800faec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800faf0:	d817      	bhi.n	800fb22 <UART_SetConfig+0x216>
 800faf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faf6:	d00b      	beq.n	800fb10 <UART_SetConfig+0x204>
 800faf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fafc:	d811      	bhi.n	800fb22 <UART_SetConfig+0x216>
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d003      	beq.n	800fb0a <UART_SetConfig+0x1fe>
 800fb02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb06:	d006      	beq.n	800fb16 <UART_SetConfig+0x20a>
 800fb08:	e00b      	b.n	800fb22 <UART_SetConfig+0x216>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	77fb      	strb	r3, [r7, #31]
 800fb0e:	e0a1      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb10:	2302      	movs	r3, #2
 800fb12:	77fb      	strb	r3, [r7, #31]
 800fb14:	e09e      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb16:	2304      	movs	r3, #4
 800fb18:	77fb      	strb	r3, [r7, #31]
 800fb1a:	e09b      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb1c:	2308      	movs	r3, #8
 800fb1e:	77fb      	strb	r3, [r7, #31]
 800fb20:	e098      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb22:	2310      	movs	r3, #16
 800fb24:	77fb      	strb	r3, [r7, #31]
 800fb26:	e095      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a2f      	ldr	r2, [pc, #188]	@ (800fbec <UART_SetConfig+0x2e0>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d125      	bne.n	800fb7e <UART_SetConfig+0x272>
 800fb32:	4b29      	ldr	r3, [pc, #164]	@ (800fbd8 <UART_SetConfig+0x2cc>)
 800fb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fb3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fb40:	d017      	beq.n	800fb72 <UART_SetConfig+0x266>
 800fb42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fb46:	d817      	bhi.n	800fb78 <UART_SetConfig+0x26c>
 800fb48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb4c:	d00b      	beq.n	800fb66 <UART_SetConfig+0x25a>
 800fb4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb52:	d811      	bhi.n	800fb78 <UART_SetConfig+0x26c>
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d003      	beq.n	800fb60 <UART_SetConfig+0x254>
 800fb58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb5c:	d006      	beq.n	800fb6c <UART_SetConfig+0x260>
 800fb5e:	e00b      	b.n	800fb78 <UART_SetConfig+0x26c>
 800fb60:	2301      	movs	r3, #1
 800fb62:	77fb      	strb	r3, [r7, #31]
 800fb64:	e076      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb66:	2302      	movs	r3, #2
 800fb68:	77fb      	strb	r3, [r7, #31]
 800fb6a:	e073      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb6c:	2304      	movs	r3, #4
 800fb6e:	77fb      	strb	r3, [r7, #31]
 800fb70:	e070      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb72:	2308      	movs	r3, #8
 800fb74:	77fb      	strb	r3, [r7, #31]
 800fb76:	e06d      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb78:	2310      	movs	r3, #16
 800fb7a:	77fb      	strb	r3, [r7, #31]
 800fb7c:	e06a      	b.n	800fc54 <UART_SetConfig+0x348>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	4a1b      	ldr	r2, [pc, #108]	@ (800fbf0 <UART_SetConfig+0x2e4>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d138      	bne.n	800fbfa <UART_SetConfig+0x2ee>
 800fb88:	4b13      	ldr	r3, [pc, #76]	@ (800fbd8 <UART_SetConfig+0x2cc>)
 800fb8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb8e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800fb92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fb96:	d017      	beq.n	800fbc8 <UART_SetConfig+0x2bc>
 800fb98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fb9c:	d82a      	bhi.n	800fbf4 <UART_SetConfig+0x2e8>
 800fb9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fba2:	d00b      	beq.n	800fbbc <UART_SetConfig+0x2b0>
 800fba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fba8:	d824      	bhi.n	800fbf4 <UART_SetConfig+0x2e8>
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <UART_SetConfig+0x2aa>
 800fbae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fbb2:	d006      	beq.n	800fbc2 <UART_SetConfig+0x2b6>
 800fbb4:	e01e      	b.n	800fbf4 <UART_SetConfig+0x2e8>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	77fb      	strb	r3, [r7, #31]
 800fbba:	e04b      	b.n	800fc54 <UART_SetConfig+0x348>
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	77fb      	strb	r3, [r7, #31]
 800fbc0:	e048      	b.n	800fc54 <UART_SetConfig+0x348>
 800fbc2:	2304      	movs	r3, #4
 800fbc4:	77fb      	strb	r3, [r7, #31]
 800fbc6:	e045      	b.n	800fc54 <UART_SetConfig+0x348>
 800fbc8:	2308      	movs	r3, #8
 800fbca:	77fb      	strb	r3, [r7, #31]
 800fbcc:	e042      	b.n	800fc54 <UART_SetConfig+0x348>
 800fbce:	bf00      	nop
 800fbd0:	efff69f3 	.word	0xefff69f3
 800fbd4:	40011000 	.word	0x40011000
 800fbd8:	40023800 	.word	0x40023800
 800fbdc:	40004400 	.word	0x40004400
 800fbe0:	40004800 	.word	0x40004800
 800fbe4:	40004c00 	.word	0x40004c00
 800fbe8:	40005000 	.word	0x40005000
 800fbec:	40011400 	.word	0x40011400
 800fbf0:	40007800 	.word	0x40007800
 800fbf4:	2310      	movs	r3, #16
 800fbf6:	77fb      	strb	r3, [r7, #31]
 800fbf8:	e02c      	b.n	800fc54 <UART_SetConfig+0x348>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a72      	ldr	r2, [pc, #456]	@ (800fdc8 <UART_SetConfig+0x4bc>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d125      	bne.n	800fc50 <UART_SetConfig+0x344>
 800fc04:	4b71      	ldr	r3, [pc, #452]	@ (800fdcc <UART_SetConfig+0x4c0>)
 800fc06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fc0e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800fc12:	d017      	beq.n	800fc44 <UART_SetConfig+0x338>
 800fc14:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800fc18:	d817      	bhi.n	800fc4a <UART_SetConfig+0x33e>
 800fc1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc1e:	d00b      	beq.n	800fc38 <UART_SetConfig+0x32c>
 800fc20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc24:	d811      	bhi.n	800fc4a <UART_SetConfig+0x33e>
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <UART_SetConfig+0x326>
 800fc2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fc2e:	d006      	beq.n	800fc3e <UART_SetConfig+0x332>
 800fc30:	e00b      	b.n	800fc4a <UART_SetConfig+0x33e>
 800fc32:	2300      	movs	r3, #0
 800fc34:	77fb      	strb	r3, [r7, #31]
 800fc36:	e00d      	b.n	800fc54 <UART_SetConfig+0x348>
 800fc38:	2302      	movs	r3, #2
 800fc3a:	77fb      	strb	r3, [r7, #31]
 800fc3c:	e00a      	b.n	800fc54 <UART_SetConfig+0x348>
 800fc3e:	2304      	movs	r3, #4
 800fc40:	77fb      	strb	r3, [r7, #31]
 800fc42:	e007      	b.n	800fc54 <UART_SetConfig+0x348>
 800fc44:	2308      	movs	r3, #8
 800fc46:	77fb      	strb	r3, [r7, #31]
 800fc48:	e004      	b.n	800fc54 <UART_SetConfig+0x348>
 800fc4a:	2310      	movs	r3, #16
 800fc4c:	77fb      	strb	r3, [r7, #31]
 800fc4e:	e001      	b.n	800fc54 <UART_SetConfig+0x348>
 800fc50:	2310      	movs	r3, #16
 800fc52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	69db      	ldr	r3, [r3, #28]
 800fc58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc5c:	d15b      	bne.n	800fd16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800fc5e:	7ffb      	ldrb	r3, [r7, #31]
 800fc60:	2b08      	cmp	r3, #8
 800fc62:	d828      	bhi.n	800fcb6 <UART_SetConfig+0x3aa>
 800fc64:	a201      	add	r2, pc, #4	@ (adr r2, 800fc6c <UART_SetConfig+0x360>)
 800fc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6a:	bf00      	nop
 800fc6c:	0800fc91 	.word	0x0800fc91
 800fc70:	0800fc99 	.word	0x0800fc99
 800fc74:	0800fca1 	.word	0x0800fca1
 800fc78:	0800fcb7 	.word	0x0800fcb7
 800fc7c:	0800fca7 	.word	0x0800fca7
 800fc80:	0800fcb7 	.word	0x0800fcb7
 800fc84:	0800fcb7 	.word	0x0800fcb7
 800fc88:	0800fcb7 	.word	0x0800fcb7
 800fc8c:	0800fcaf 	.word	0x0800fcaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc90:	f7fb f8b6 	bl	800ae00 <HAL_RCC_GetPCLK1Freq>
 800fc94:	61b8      	str	r0, [r7, #24]
        break;
 800fc96:	e013      	b.n	800fcc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc98:	f7fb f8c6 	bl	800ae28 <HAL_RCC_GetPCLK2Freq>
 800fc9c:	61b8      	str	r0, [r7, #24]
        break;
 800fc9e:	e00f      	b.n	800fcc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fca0:	4b4b      	ldr	r3, [pc, #300]	@ (800fdd0 <UART_SetConfig+0x4c4>)
 800fca2:	61bb      	str	r3, [r7, #24]
        break;
 800fca4:	e00c      	b.n	800fcc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fca6:	f7fa ffd9 	bl	800ac5c <HAL_RCC_GetSysClockFreq>
 800fcaa:	61b8      	str	r0, [r7, #24]
        break;
 800fcac:	e008      	b.n	800fcc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fcb2:	61bb      	str	r3, [r7, #24]
        break;
 800fcb4:	e004      	b.n	800fcc0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	77bb      	strb	r3, [r7, #30]
        break;
 800fcbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d074      	beq.n	800fdb0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	005a      	lsls	r2, r3, #1
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	085b      	lsrs	r3, r3, #1
 800fcd0:	441a      	add	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	2b0f      	cmp	r3, #15
 800fce0:	d916      	bls.n	800fd10 <UART_SetConfig+0x404>
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fce8:	d212      	bcs.n	800fd10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	f023 030f 	bic.w	r3, r3, #15
 800fcf2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	085b      	lsrs	r3, r3, #1
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	f003 0307 	and.w	r3, r3, #7
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	89fb      	ldrh	r3, [r7, #14]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	89fa      	ldrh	r2, [r7, #14]
 800fd0c:	60da      	str	r2, [r3, #12]
 800fd0e:	e04f      	b.n	800fdb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fd10:	2301      	movs	r3, #1
 800fd12:	77bb      	strb	r3, [r7, #30]
 800fd14:	e04c      	b.n	800fdb0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd16:	7ffb      	ldrb	r3, [r7, #31]
 800fd18:	2b08      	cmp	r3, #8
 800fd1a:	d828      	bhi.n	800fd6e <UART_SetConfig+0x462>
 800fd1c:	a201      	add	r2, pc, #4	@ (adr r2, 800fd24 <UART_SetConfig+0x418>)
 800fd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd22:	bf00      	nop
 800fd24:	0800fd49 	.word	0x0800fd49
 800fd28:	0800fd51 	.word	0x0800fd51
 800fd2c:	0800fd59 	.word	0x0800fd59
 800fd30:	0800fd6f 	.word	0x0800fd6f
 800fd34:	0800fd5f 	.word	0x0800fd5f
 800fd38:	0800fd6f 	.word	0x0800fd6f
 800fd3c:	0800fd6f 	.word	0x0800fd6f
 800fd40:	0800fd6f 	.word	0x0800fd6f
 800fd44:	0800fd67 	.word	0x0800fd67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd48:	f7fb f85a 	bl	800ae00 <HAL_RCC_GetPCLK1Freq>
 800fd4c:	61b8      	str	r0, [r7, #24]
        break;
 800fd4e:	e013      	b.n	800fd78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd50:	f7fb f86a 	bl	800ae28 <HAL_RCC_GetPCLK2Freq>
 800fd54:	61b8      	str	r0, [r7, #24]
        break;
 800fd56:	e00f      	b.n	800fd78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fd58:	4b1d      	ldr	r3, [pc, #116]	@ (800fdd0 <UART_SetConfig+0x4c4>)
 800fd5a:	61bb      	str	r3, [r7, #24]
        break;
 800fd5c:	e00c      	b.n	800fd78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fd5e:	f7fa ff7d 	bl	800ac5c <HAL_RCC_GetSysClockFreq>
 800fd62:	61b8      	str	r0, [r7, #24]
        break;
 800fd64:	e008      	b.n	800fd78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd6a:	61bb      	str	r3, [r7, #24]
        break;
 800fd6c:	e004      	b.n	800fd78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fd72:	2301      	movs	r3, #1
 800fd74:	77bb      	strb	r3, [r7, #30]
        break;
 800fd76:	bf00      	nop
    }

    if (pclk != 0U)
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d018      	beq.n	800fdb0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	085a      	lsrs	r2, r3, #1
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	441a      	add	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	2b0f      	cmp	r3, #15
 800fd96:	d909      	bls.n	800fdac <UART_SetConfig+0x4a0>
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd9e:	d205      	bcs.n	800fdac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	b29a      	uxth	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	60da      	str	r2, [r3, #12]
 800fdaa:	e001      	b.n	800fdb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fdac:	2301      	movs	r3, #1
 800fdae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800fdbc:	7fbb      	ldrb	r3, [r7, #30]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3720      	adds	r7, #32
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	40007c00 	.word	0x40007c00
 800fdcc:	40023800 	.word	0x40023800
 800fdd0:	00f42400 	.word	0x00f42400

0800fdd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b083      	sub	sp, #12
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fde0:	f003 0308 	and.w	r3, r3, #8
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d00a      	beq.n	800fdfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	430a      	orrs	r2, r1
 800fdfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe02:	f003 0301 	and.w	r3, r3, #1
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d00a      	beq.n	800fe20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	430a      	orrs	r2, r1
 800fe1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe24:	f003 0302 	and.w	r3, r3, #2
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00a      	beq.n	800fe42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	430a      	orrs	r2, r1
 800fe40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe46:	f003 0304 	and.w	r3, r3, #4
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00a      	beq.n	800fe64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	430a      	orrs	r2, r1
 800fe62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe68:	f003 0310 	and.w	r3, r3, #16
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00a      	beq.n	800fe86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	430a      	orrs	r2, r1
 800fe84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe8a:	f003 0320 	and.w	r3, r3, #32
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d00a      	beq.n	800fea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	689b      	ldr	r3, [r3, #8]
 800fe98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	430a      	orrs	r2, r1
 800fea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d01a      	beq.n	800feea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	430a      	orrs	r2, r1
 800fec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fed2:	d10a      	bne.n	800feea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	430a      	orrs	r2, r1
 800fee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00a      	beq.n	800ff0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	430a      	orrs	r2, r1
 800ff0a:	605a      	str	r2, [r3, #4]
  }
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b08c      	sub	sp, #48	@ 0x30
 800ff1c:	af02      	add	r7, sp, #8
 800ff1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2200      	movs	r2, #0
 800ff24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff28:	f7f5 fbe2 	bl	80056f0 <HAL_GetTick>
 800ff2c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f003 0308 	and.w	r3, r3, #8
 800ff38:	2b08      	cmp	r3, #8
 800ff3a:	d12e      	bne.n	800ff9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff44:	2200      	movs	r2, #0
 800ff46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 f83b 	bl	800ffc6 <UART_WaitOnFlagUntilTimeout>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d021      	beq.n	800ff9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	e853 3f00 	ldrex	r3, [r3]
 800ff62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ff6a:	623b      	str	r3, [r7, #32]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	461a      	mov	r2, r3
 800ff72:	6a3b      	ldr	r3, [r7, #32]
 800ff74:	61fb      	str	r3, [r7, #28]
 800ff76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff78:	69b9      	ldr	r1, [r7, #24]
 800ff7a:	69fa      	ldr	r2, [r7, #28]
 800ff7c:	e841 2300 	strex	r3, r2, [r1]
 800ff80:	617b      	str	r3, [r7, #20]
   return(result);
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d1e6      	bne.n	800ff56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2220      	movs	r2, #32
 800ff8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff96:	2303      	movs	r3, #3
 800ff98:	e011      	b.n	800ffbe <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2220      	movs	r2, #32
 800ff9e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2220      	movs	r2, #32
 800ffa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3728      	adds	r7, #40	@ 0x28
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b084      	sub	sp, #16
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	60f8      	str	r0, [r7, #12]
 800ffce:	60b9      	str	r1, [r7, #8]
 800ffd0:	603b      	str	r3, [r7, #0]
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffd6:	e04f      	b.n	8010078 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffde:	d04b      	beq.n	8010078 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ffe0:	f7f5 fb86 	bl	80056f0 <HAL_GetTick>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	69ba      	ldr	r2, [r7, #24]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d302      	bcc.n	800fff6 <UART_WaitOnFlagUntilTimeout+0x30>
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d101      	bne.n	800fffa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fff6:	2303      	movs	r3, #3
 800fff8:	e04e      	b.n	8010098 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	d037      	beq.n	8010078 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	2b80      	cmp	r3, #128	@ 0x80
 801000c:	d034      	beq.n	8010078 <UART_WaitOnFlagUntilTimeout+0xb2>
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	2b40      	cmp	r3, #64	@ 0x40
 8010012:	d031      	beq.n	8010078 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	69db      	ldr	r3, [r3, #28]
 801001a:	f003 0308 	and.w	r3, r3, #8
 801001e:	2b08      	cmp	r3, #8
 8010020:	d110      	bne.n	8010044 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2208      	movs	r2, #8
 8010028:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f000 f8fe 	bl	801022c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2208      	movs	r2, #8
 8010034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8010040:	2301      	movs	r3, #1
 8010042:	e029      	b.n	8010098 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	69db      	ldr	r3, [r3, #28]
 801004a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801004e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010052:	d111      	bne.n	8010078 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801005c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f000 f8e4 	bl	801022c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2220      	movs	r2, #32
 8010068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2200      	movs	r2, #0
 8010070:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8010074:	2303      	movs	r3, #3
 8010076:	e00f      	b.n	8010098 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	69da      	ldr	r2, [r3, #28]
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	4013      	ands	r3, r2
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	429a      	cmp	r2, r3
 8010086:	bf0c      	ite	eq
 8010088:	2301      	moveq	r3, #1
 801008a:	2300      	movne	r3, #0
 801008c:	b2db      	uxtb	r3, r3
 801008e:	461a      	mov	r2, r3
 8010090:	79fb      	ldrb	r3, [r7, #7]
 8010092:	429a      	cmp	r2, r3
 8010094:	d0a0      	beq.n	800ffd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010096:	2300      	movs	r3, #0
}
 8010098:	4618      	mov	r0, r3
 801009a:	3710      	adds	r7, #16
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b096      	sub	sp, #88	@ 0x58
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	4613      	mov	r3, r2
 80100ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	68ba      	ldr	r2, [r7, #8]
 80100b2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	88fa      	ldrh	r2, [r7, #6]
 80100b8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2200      	movs	r2, #0
 80100c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2222      	movs	r2, #34	@ 0x22
 80100c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d028      	beq.n	8010126 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100d8:	4a3e      	ldr	r2, [pc, #248]	@ (80101d4 <UART_Start_Receive_DMA+0x134>)
 80100da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100e0:	4a3d      	ldr	r2, [pc, #244]	@ (80101d8 <UART_Start_Receive_DMA+0x138>)
 80100e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100e8:	4a3c      	ldr	r2, [pc, #240]	@ (80101dc <UART_Start_Receive_DMA+0x13c>)
 80100ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100f0:	2200      	movs	r2, #0
 80100f2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	3324      	adds	r3, #36	@ 0x24
 80100fe:	4619      	mov	r1, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010104:	461a      	mov	r2, r3
 8010106:	88fb      	ldrh	r3, [r7, #6]
 8010108:	f7f6 f914 	bl	8006334 <HAL_DMA_Start_IT>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d009      	beq.n	8010126 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2210      	movs	r2, #16
 8010116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2220      	movs	r2, #32
 801011e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8010122:	2301      	movs	r3, #1
 8010124:	e051      	b.n	80101ca <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	691b      	ldr	r3, [r3, #16]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d018      	beq.n	8010160 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010136:	e853 3f00 	ldrex	r3, [r3]
 801013a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801013c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010142:	657b      	str	r3, [r7, #84]	@ 0x54
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	461a      	mov	r2, r3
 801014a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801014c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801014e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010150:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010152:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010154:	e841 2300 	strex	r3, r2, [r1]
 8010158:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801015a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1e6      	bne.n	801012e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	3308      	adds	r3, #8
 8010166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801016a:	e853 3f00 	ldrex	r3, [r3]
 801016e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010172:	f043 0301 	orr.w	r3, r3, #1
 8010176:	653b      	str	r3, [r7, #80]	@ 0x50
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	3308      	adds	r3, #8
 801017e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010180:	637a      	str	r2, [r7, #52]	@ 0x34
 8010182:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010184:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010186:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010188:	e841 2300 	strex	r3, r2, [r1]
 801018c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801018e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1e5      	bne.n	8010160 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	3308      	adds	r3, #8
 801019a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	e853 3f00 	ldrex	r3, [r3]
 80101a2:	613b      	str	r3, [r7, #16]
   return(result);
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3308      	adds	r3, #8
 80101b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80101b4:	623a      	str	r2, [r7, #32]
 80101b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b8:	69f9      	ldr	r1, [r7, #28]
 80101ba:	6a3a      	ldr	r2, [r7, #32]
 80101bc:	e841 2300 	strex	r3, r2, [r1]
 80101c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1e5      	bne.n	8010194 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80101c8:	2300      	movs	r3, #0
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3758      	adds	r7, #88	@ 0x58
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	080102f5 	.word	0x080102f5
 80101d8:	08010453 	.word	0x08010453
 80101dc:	080104c5 	.word	0x080104c5

080101e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b089      	sub	sp, #36	@ 0x24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	e853 3f00 	ldrex	r3, [r3]
 80101f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80101fc:	61fb      	str	r3, [r7, #28]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	461a      	mov	r2, r3
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	61bb      	str	r3, [r7, #24]
 8010208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801020a:	6979      	ldr	r1, [r7, #20]
 801020c:	69ba      	ldr	r2, [r7, #24]
 801020e:	e841 2300 	strex	r3, r2, [r1]
 8010212:	613b      	str	r3, [r7, #16]
   return(result);
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1e6      	bne.n	80101e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2220      	movs	r2, #32
 801021e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010220:	bf00      	nop
 8010222:	3724      	adds	r7, #36	@ 0x24
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801022c:	b480      	push	{r7}
 801022e:	b095      	sub	sp, #84	@ 0x54
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801023c:	e853 3f00 	ldrex	r3, [r3]
 8010240:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	461a      	mov	r2, r3
 8010250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010252:	643b      	str	r3, [r7, #64]	@ 0x40
 8010254:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010256:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010258:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801025a:	e841 2300 	strex	r3, r2, [r1]
 801025e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1e6      	bne.n	8010234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	3308      	adds	r3, #8
 801026c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801026e:	6a3b      	ldr	r3, [r7, #32]
 8010270:	e853 3f00 	ldrex	r3, [r3]
 8010274:	61fb      	str	r3, [r7, #28]
   return(result);
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	f023 0301 	bic.w	r3, r3, #1
 801027c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	3308      	adds	r3, #8
 8010284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010288:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801028c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801028e:	e841 2300 	strex	r3, r2, [r1]
 8010292:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1e5      	bne.n	8010266 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d118      	bne.n	80102d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	e853 3f00 	ldrex	r3, [r3]
 80102ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	f023 0310 	bic.w	r3, r3, #16
 80102b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	461a      	mov	r2, r3
 80102be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102c0:	61bb      	str	r3, [r7, #24]
 80102c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c4:	6979      	ldr	r1, [r7, #20]
 80102c6:	69ba      	ldr	r2, [r7, #24]
 80102c8:	e841 2300 	strex	r3, r2, [r1]
 80102cc:	613b      	str	r3, [r7, #16]
   return(result);
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d1e6      	bne.n	80102a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2220      	movs	r2, #32
 80102d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2200      	movs	r2, #0
 80102e0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80102e8:	bf00      	nop
 80102ea:	3754      	adds	r7, #84	@ 0x54
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b09c      	sub	sp, #112	@ 0x70
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010300:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	69db      	ldr	r3, [r3, #28]
 8010306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801030a:	d071      	beq.n	80103f0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801030c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801030e:	2200      	movs	r2, #0
 8010310:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801031a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801031c:	e853 3f00 	ldrex	r3, [r3]
 8010320:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010328:	66bb      	str	r3, [r7, #104]	@ 0x68
 801032a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	461a      	mov	r2, r3
 8010330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010332:	657b      	str	r3, [r7, #84]	@ 0x54
 8010334:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010336:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010338:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801033a:	e841 2300 	strex	r3, r2, [r1]
 801033e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010342:	2b00      	cmp	r3, #0
 8010344:	d1e6      	bne.n	8010314 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	3308      	adds	r3, #8
 801034c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801034e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010350:	e853 3f00 	ldrex	r3, [r3]
 8010354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010358:	f023 0301 	bic.w	r3, r3, #1
 801035c:	667b      	str	r3, [r7, #100]	@ 0x64
 801035e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	3308      	adds	r3, #8
 8010364:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010366:	643a      	str	r2, [r7, #64]	@ 0x40
 8010368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801036a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801036c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801036e:	e841 2300 	strex	r3, r2, [r1]
 8010372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010376:	2b00      	cmp	r3, #0
 8010378:	d1e5      	bne.n	8010346 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801037a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3308      	adds	r3, #8
 8010380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010382:	6a3b      	ldr	r3, [r7, #32]
 8010384:	e853 3f00 	ldrex	r3, [r3]
 8010388:	61fb      	str	r3, [r7, #28]
   return(result);
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010390:	663b      	str	r3, [r7, #96]	@ 0x60
 8010392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	3308      	adds	r3, #8
 8010398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801039a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801039c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80103a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80103a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e5      	bne.n	801037a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80103ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103b0:	2220      	movs	r2, #32
 80103b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d118      	bne.n	80103f0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	e853 3f00 	ldrex	r3, [r3]
 80103ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	f023 0310 	bic.w	r3, r3, #16
 80103d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80103d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	461a      	mov	r2, r3
 80103da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80103dc:	61bb      	str	r3, [r7, #24]
 80103de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e0:	6979      	ldr	r1, [r7, #20]
 80103e2:	69ba      	ldr	r2, [r7, #24]
 80103e4:	e841 2300 	strex	r3, r2, [r1]
 80103e8:	613b      	str	r3, [r7, #16]
   return(result);
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d1e6      	bne.n	80103be <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103f2:	2200      	movs	r2, #0
 80103f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d122      	bne.n	8010444 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 80103fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010400:	2200      	movs	r2, #0
 8010402:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010412:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010416:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 801041a:	429a      	cmp	r2, r3
 801041c:	d204      	bcs.n	8010428 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801041e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010420:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010424:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801042a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801042e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010430:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010434:	b29b      	uxth	r3, r3
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	b29b      	uxth	r3, r3
 801043a:	4619      	mov	r1, r3
 801043c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801043e:	f7ff fa59 	bl	800f8f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010442:	e002      	b.n	801044a <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8010444:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010446:	f7f4 ffa7 	bl	8005398 <HAL_UART_RxCpltCallback>
}
 801044a:	bf00      	nop
 801044c:	3770      	adds	r7, #112	@ 0x70
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b084      	sub	sp, #16
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801045e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2201      	movs	r2, #1
 8010464:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801046a:	2b01      	cmp	r3, #1
 801046c:	d123      	bne.n	80104b6 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010474:	085b      	lsrs	r3, r3, #1
 8010476:	b29a      	uxth	r2, r3
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801048c:	897a      	ldrh	r2, [r7, #10]
 801048e:	429a      	cmp	r2, r3
 8010490:	d803      	bhi.n	801049a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	897a      	ldrh	r2, [r7, #10]
 8010496:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	4619      	mov	r1, r3
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f7ff fa20 	bl	800f8f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80104b4:	e002      	b.n	80104bc <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	f7f4 ff92 	bl	80053e0 <HAL_UART_RxHalfCpltCallback>
}
 80104bc:	bf00      	nop
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80104d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	689b      	ldr	r3, [r3, #8]
 80104e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104ea:	2b80      	cmp	r3, #128	@ 0x80
 80104ec:	d109      	bne.n	8010502 <UART_DMAError+0x3e>
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	2b21      	cmp	r3, #33	@ 0x21
 80104f2:	d106      	bne.n	8010502 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	2200      	movs	r2, #0
 80104f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80104fc:	6978      	ldr	r0, [r7, #20]
 80104fe:	f7ff fe6f 	bl	80101e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	689b      	ldr	r3, [r3, #8]
 8010508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801050c:	2b40      	cmp	r3, #64	@ 0x40
 801050e:	d109      	bne.n	8010524 <UART_DMAError+0x60>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2b22      	cmp	r3, #34	@ 0x22
 8010514:	d106      	bne.n	8010524 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	2200      	movs	r2, #0
 801051a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 801051e:	6978      	ldr	r0, [r7, #20]
 8010520:	f7ff fe84 	bl	801022c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801052a:	f043 0210 	orr.w	r2, r3, #16
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010534:	6978      	ldr	r0, [r7, #20]
 8010536:	f7f4 ff69 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801053a:	bf00      	nop
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b084      	sub	sp, #16
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801054e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2200      	movs	r2, #0
 8010554:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f7f4 ff57 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801055e:	bf00      	nop
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b088      	sub	sp, #32
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	e853 3f00 	ldrex	r3, [r3]
 801057a:	60bb      	str	r3, [r7, #8]
   return(result);
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010582:	61fb      	str	r3, [r7, #28]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	461a      	mov	r2, r3
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	61bb      	str	r3, [r7, #24]
 801058e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010590:	6979      	ldr	r1, [r7, #20]
 8010592:	69ba      	ldr	r2, [r7, #24]
 8010594:	e841 2300 	strex	r3, r2, [r1]
 8010598:	613b      	str	r3, [r7, #16]
   return(result);
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d1e6      	bne.n	801056e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2220      	movs	r2, #32
 80105a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7ff f997 	bl	800f8e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105b2:	bf00      	nop
 80105b4:	3720      	adds	r7, #32
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
	...

080105bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d121      	bne.n	8010612 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	4b27      	ldr	r3, [pc, #156]	@ (8010670 <FMC_SDRAM_Init+0xb4>)
 80105d4:	4013      	ands	r3, r2
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	6851      	ldr	r1, [r2, #4]
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	6892      	ldr	r2, [r2, #8]
 80105de:	4311      	orrs	r1, r2
 80105e0:	683a      	ldr	r2, [r7, #0]
 80105e2:	68d2      	ldr	r2, [r2, #12]
 80105e4:	4311      	orrs	r1, r2
 80105e6:	683a      	ldr	r2, [r7, #0]
 80105e8:	6912      	ldr	r2, [r2, #16]
 80105ea:	4311      	orrs	r1, r2
 80105ec:	683a      	ldr	r2, [r7, #0]
 80105ee:	6952      	ldr	r2, [r2, #20]
 80105f0:	4311      	orrs	r1, r2
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	6992      	ldr	r2, [r2, #24]
 80105f6:	4311      	orrs	r1, r2
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	69d2      	ldr	r2, [r2, #28]
 80105fc:	4311      	orrs	r1, r2
 80105fe:	683a      	ldr	r2, [r7, #0]
 8010600:	6a12      	ldr	r2, [r2, #32]
 8010602:	4311      	orrs	r1, r2
 8010604:	683a      	ldr	r2, [r7, #0]
 8010606:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010608:	430a      	orrs	r2, r1
 801060a:	431a      	orrs	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	601a      	str	r2, [r3, #0]
 8010610:	e026      	b.n	8010660 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	69d9      	ldr	r1, [r3, #28]
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	6a1b      	ldr	r3, [r3, #32]
 8010622:	4319      	orrs	r1, r3
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010628:	430b      	orrs	r3, r1
 801062a:	431a      	orrs	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	685a      	ldr	r2, [r3, #4]
 8010634:	4b0e      	ldr	r3, [pc, #56]	@ (8010670 <FMC_SDRAM_Init+0xb4>)
 8010636:	4013      	ands	r3, r2
 8010638:	683a      	ldr	r2, [r7, #0]
 801063a:	6851      	ldr	r1, [r2, #4]
 801063c:	683a      	ldr	r2, [r7, #0]
 801063e:	6892      	ldr	r2, [r2, #8]
 8010640:	4311      	orrs	r1, r2
 8010642:	683a      	ldr	r2, [r7, #0]
 8010644:	68d2      	ldr	r2, [r2, #12]
 8010646:	4311      	orrs	r1, r2
 8010648:	683a      	ldr	r2, [r7, #0]
 801064a:	6912      	ldr	r2, [r2, #16]
 801064c:	4311      	orrs	r1, r2
 801064e:	683a      	ldr	r2, [r7, #0]
 8010650:	6952      	ldr	r2, [r2, #20]
 8010652:	4311      	orrs	r1, r2
 8010654:	683a      	ldr	r2, [r7, #0]
 8010656:	6992      	ldr	r2, [r2, #24]
 8010658:	430a      	orrs	r2, r1
 801065a:	431a      	orrs	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010660:	2300      	movs	r3, #0
}
 8010662:	4618      	mov	r0, r3
 8010664:	370c      	adds	r7, #12
 8010666:	46bd      	mov	sp, r7
 8010668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066c:	4770      	bx	lr
 801066e:	bf00      	nop
 8010670:	ffff8000 	.word	0xffff8000

08010674 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010674:	b480      	push	{r7}
 8010676:	b085      	sub	sp, #20
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d128      	bne.n	80106d8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	1e59      	subs	r1, r3, #1
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	3b01      	subs	r3, #1
 801069a:	011b      	lsls	r3, r3, #4
 801069c:	4319      	orrs	r1, r3
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	689b      	ldr	r3, [r3, #8]
 80106a2:	3b01      	subs	r3, #1
 80106a4:	021b      	lsls	r3, r3, #8
 80106a6:	4319      	orrs	r1, r3
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	68db      	ldr	r3, [r3, #12]
 80106ac:	3b01      	subs	r3, #1
 80106ae:	031b      	lsls	r3, r3, #12
 80106b0:	4319      	orrs	r1, r3
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	691b      	ldr	r3, [r3, #16]
 80106b6:	3b01      	subs	r3, #1
 80106b8:	041b      	lsls	r3, r3, #16
 80106ba:	4319      	orrs	r1, r3
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	695b      	ldr	r3, [r3, #20]
 80106c0:	3b01      	subs	r3, #1
 80106c2:	051b      	lsls	r3, r3, #20
 80106c4:	4319      	orrs	r1, r3
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	699b      	ldr	r3, [r3, #24]
 80106ca:	3b01      	subs	r3, #1
 80106cc:	061b      	lsls	r3, r3, #24
 80106ce:	430b      	orrs	r3, r1
 80106d0:	431a      	orrs	r2, r3
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	609a      	str	r2, [r3, #8]
 80106d6:	e02d      	b.n	8010734 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	689a      	ldr	r2, [r3, #8]
 80106dc:	4b19      	ldr	r3, [pc, #100]	@ (8010744 <FMC_SDRAM_Timing_Init+0xd0>)
 80106de:	4013      	ands	r3, r2
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	68d2      	ldr	r2, [r2, #12]
 80106e4:	3a01      	subs	r2, #1
 80106e6:	0311      	lsls	r1, r2, #12
 80106e8:	68ba      	ldr	r2, [r7, #8]
 80106ea:	6952      	ldr	r2, [r2, #20]
 80106ec:	3a01      	subs	r2, #1
 80106ee:	0512      	lsls	r2, r2, #20
 80106f0:	430a      	orrs	r2, r1
 80106f2:	431a      	orrs	r2, r3
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	68db      	ldr	r3, [r3, #12]
 80106fc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	1e59      	subs	r1, r3, #1
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	3b01      	subs	r3, #1
 801070c:	011b      	lsls	r3, r3, #4
 801070e:	4319      	orrs	r1, r3
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	3b01      	subs	r3, #1
 8010716:	021b      	lsls	r3, r3, #8
 8010718:	4319      	orrs	r1, r3
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	691b      	ldr	r3, [r3, #16]
 801071e:	3b01      	subs	r3, #1
 8010720:	041b      	lsls	r3, r3, #16
 8010722:	4319      	orrs	r1, r3
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	699b      	ldr	r3, [r3, #24]
 8010728:	3b01      	subs	r3, #1
 801072a:	061b      	lsls	r3, r3, #24
 801072c:	430b      	orrs	r3, r1
 801072e:	431a      	orrs	r2, r3
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	3714      	adds	r7, #20
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	ff0f0fff 	.word	0xff0f0fff

08010748 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010748:	b084      	sub	sp, #16
 801074a:	b480      	push	{r7}
 801074c:	b085      	sub	sp, #20
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	f107 001c 	add.w	r0, r7, #28
 8010756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801075a:	2300      	movs	r3, #0
 801075c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801075e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010760:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010762:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8010766:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 801076a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801076c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 801076e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8010772:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	4313      	orrs	r3, r2
 8010778:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	685a      	ldr	r2, [r3, #4]
 801077e:	4b07      	ldr	r3, [pc, #28]	@ (801079c <SDMMC_Init+0x54>)
 8010780:	4013      	ands	r3, r2
 8010782:	68fa      	ldr	r2, [r7, #12]
 8010784:	431a      	orrs	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3714      	adds	r7, #20
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	b004      	add	sp, #16
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	ffff8100 	.word	0xffff8100

080107a0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr

080107ba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80107ba:	b480      	push	{r7}
 80107bc:	b083      	sub	sp, #12
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80107ce:	2300      	movs	r3, #0
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2203      	movs	r2, #3
 80107e8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f003 0303 	and.w	r3, r3, #3
}
 8010808:	4618      	mov	r0, r3
 801080a:	370c      	adds	r7, #12
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010814:	b480      	push	{r7}
 8010816:	b085      	sub	sp, #20
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801081e:	2300      	movs	r3, #0
 8010820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010832:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010838:	431a      	orrs	r2, r3
                       Command->CPSM);
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801083e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010840:	68fa      	ldr	r2, [r7, #12]
 8010842:	4313      	orrs	r3, r2
 8010844:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	68da      	ldr	r2, [r3, #12]
 801084a:	4b06      	ldr	r3, [pc, #24]	@ (8010864 <SDMMC_SendCommand+0x50>)
 801084c:	4013      	ands	r3, r2
 801084e:	68fa      	ldr	r2, [r7, #12]
 8010850:	431a      	orrs	r2, r3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	3714      	adds	r7, #20
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr
 8010864:	fffff000 	.word	0xfffff000

08010868 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	691b      	ldr	r3, [r3, #16]
 8010874:	b2db      	uxtb	r3, r3
}
 8010876:	4618      	mov	r0, r3
 8010878:	370c      	adds	r7, #12
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr

08010882 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010882:	b480      	push	{r7}
 8010884:	b085      	sub	sp, #20
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
 801088a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	3314      	adds	r3, #20
 8010890:	461a      	mov	r2, r3
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	4413      	add	r3, r2
 8010896:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
}  
 801089c:	4618      	mov	r0, r3
 801089e:	3714      	adds	r7, #20
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b085      	sub	sp, #20
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80108b2:	2300      	movs	r3, #0
 80108b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	685a      	ldr	r2, [r3, #4]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80108ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80108d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80108da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	4313      	orrs	r3, r2
 80108e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108e6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	431a      	orrs	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80108f2:	2300      	movs	r3, #0

}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3714      	adds	r7, #20
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b088      	sub	sp, #32
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801090e:	2310      	movs	r3, #16
 8010910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010912:	2340      	movs	r3, #64	@ 0x40
 8010914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010916:	2300      	movs	r3, #0
 8010918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801091a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801091e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010920:	f107 0308 	add.w	r3, r7, #8
 8010924:	4619      	mov	r1, r3
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7ff ff74 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801092c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010930:	2110      	movs	r1, #16
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 f9d6 	bl	8010ce4 <SDMMC_GetCmdResp1>
 8010938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801093a:	69fb      	ldr	r3, [r7, #28]
}
 801093c:	4618      	mov	r0, r3
 801093e:	3720      	adds	r7, #32
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b088      	sub	sp, #32
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010952:	2311      	movs	r3, #17
 8010954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010956:	2340      	movs	r3, #64	@ 0x40
 8010958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801095a:	2300      	movs	r3, #0
 801095c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801095e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010964:	f107 0308 	add.w	r3, r7, #8
 8010968:	4619      	mov	r1, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7ff ff52 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010974:	2111      	movs	r1, #17
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 f9b4 	bl	8010ce4 <SDMMC_GetCmdResp1>
 801097c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801097e:	69fb      	ldr	r3, [r7, #28]
}
 8010980:	4618      	mov	r0, r3
 8010982:	3720      	adds	r7, #32
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b088      	sub	sp, #32
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010996:	2312      	movs	r3, #18
 8010998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801099a:	2340      	movs	r3, #64	@ 0x40
 801099c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801099e:	2300      	movs	r3, #0
 80109a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109a8:	f107 0308 	add.w	r3, r7, #8
 80109ac:	4619      	mov	r1, r3
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f7ff ff30 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80109b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109b8:	2112      	movs	r1, #18
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f992 	bl	8010ce4 <SDMMC_GetCmdResp1>
 80109c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c2:	69fb      	ldr	r3, [r7, #28]
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3720      	adds	r7, #32
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b088      	sub	sp, #32
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80109da:	2318      	movs	r3, #24
 80109dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109de:	2340      	movs	r3, #64	@ 0x40
 80109e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109e2:	2300      	movs	r3, #0
 80109e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109ec:	f107 0308 	add.w	r3, r7, #8
 80109f0:	4619      	mov	r1, r3
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7ff ff0e 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80109f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109fc:	2118      	movs	r1, #24
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 f970 	bl	8010ce4 <SDMMC_GetCmdResp1>
 8010a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a06:	69fb      	ldr	r3, [r7, #28]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3720      	adds	r7, #32
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010a1e:	2319      	movs	r3, #25
 8010a20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a22:	2340      	movs	r3, #64	@ 0x40
 8010a24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a26:	2300      	movs	r3, #0
 8010a28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a30:	f107 0308 	add.w	r3, r7, #8
 8010a34:	4619      	mov	r1, r3
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7ff feec 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a40:	2119      	movs	r1, #25
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 f94e 	bl	8010ce4 <SDMMC_GetCmdResp1>
 8010a48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a4a:	69fb      	ldr	r3, [r7, #28]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3720      	adds	r7, #32
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b088      	sub	sp, #32
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010a60:	230c      	movs	r3, #12
 8010a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a64:	2340      	movs	r3, #64	@ 0x40
 8010a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a72:	f107 0308 	add.w	r3, r7, #8
 8010a76:	4619      	mov	r1, r3
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7ff fecb 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010a7e:	4a05      	ldr	r2, [pc, #20]	@ (8010a94 <SDMMC_CmdStopTransfer+0x40>)
 8010a80:	210c      	movs	r1, #12
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 f92e 	bl	8010ce4 <SDMMC_GetCmdResp1>
 8010a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a8a:	69fb      	ldr	r3, [r7, #28]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3720      	adds	r7, #32
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	05f5e100 	.word	0x05f5e100

08010a98 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08a      	sub	sp, #40	@ 0x28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010aa8:	2307      	movs	r3, #7
 8010aaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010aac:	2340      	movs	r3, #64	@ 0x40
 8010aae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ab8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010aba:	f107 0310 	add.w	r3, r7, #16
 8010abe:	4619      	mov	r1, r3
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f7ff fea7 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010aca:	2107      	movs	r1, #7
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f000 f909 	bl	8010ce4 <SDMMC_GetCmdResp1>
 8010ad2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3728      	adds	r7, #40	@ 0x28
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b088      	sub	sp, #32
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010aea:	2300      	movs	r3, #0
 8010aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010aee:	2300      	movs	r3, #0
 8010af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010af2:	2300      	movs	r3, #0
 8010af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010afa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010afc:	f107 0308 	add.w	r3, r7, #8
 8010b00:	4619      	mov	r1, r3
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7ff fe86 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 fb23 	bl	8011154 <SDMMC_GetCmdError>
 8010b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b10:	69fb      	ldr	r3, [r7, #28]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3720      	adds	r7, #32
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b088      	sub	sp, #32
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010b22:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010b28:	2308      	movs	r3, #8
 8010b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b2c:	2340      	movs	r3, #64	@ 0x40
 8010b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b30:	2300      	movs	r3, #0
 8010b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b3a:	f107 0308 	add.w	r3, r7, #8
 8010b3e:	4619      	mov	r1, r3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7ff fe67 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 fab6 	bl	80110b8 <SDMMC_GetCmdResp7>
 8010b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b4e:	69fb      	ldr	r3, [r7, #28]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3720      	adds	r7, #32
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b088      	sub	sp, #32
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010b66:	2337      	movs	r3, #55	@ 0x37
 8010b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b6a:	2340      	movs	r3, #64	@ 0x40
 8010b6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b78:	f107 0308 	add.w	r3, r7, #8
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f7ff fe48 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b88:	2137      	movs	r1, #55	@ 0x37
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f8aa 	bl	8010ce4 <SDMMC_GetCmdResp1>
 8010b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b92:	69fb      	ldr	r3, [r7, #28]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3720      	adds	r7, #32
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b088      	sub	sp, #32
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010ba6:	683a      	ldr	r2, [r7, #0]
 8010ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8010be0 <SDMMC_CmdAppOperCommand+0x44>)
 8010baa:	4313      	orrs	r3, r2
 8010bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010bae:	2329      	movs	r3, #41	@ 0x29
 8010bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bb2:	2340      	movs	r3, #64	@ 0x40
 8010bb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bc0:	f107 0308 	add.w	r3, r7, #8
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f7ff fe24 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f9bf 	bl	8010f50 <SDMMC_GetCmdResp3>
 8010bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bd4:	69fb      	ldr	r3, [r7, #28]
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3720      	adds	r7, #32
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	80100000 	.word	0x80100000

08010be4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010bec:	2300      	movs	r3, #0
 8010bee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010bf0:	2302      	movs	r3, #2
 8010bf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010bf4:	23c0      	movs	r3, #192	@ 0xc0
 8010bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c02:	f107 0308 	add.w	r3, r7, #8
 8010c06:	4619      	mov	r1, r3
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f7ff fe03 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 f956 	bl	8010ec0 <SDMMC_GetCmdResp2>
 8010c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c16:	69fb      	ldr	r3, [r7, #28]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3720      	adds	r7, #32
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b088      	sub	sp, #32
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c2e:	2309      	movs	r3, #9
 8010c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010c32:	23c0      	movs	r3, #192	@ 0xc0
 8010c34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c36:	2300      	movs	r3, #0
 8010c38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c40:	f107 0308 	add.w	r3, r7, #8
 8010c44:	4619      	mov	r1, r3
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff fde4 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 f937 	bl	8010ec0 <SDMMC_GetCmdResp2>
 8010c52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c54:	69fb      	ldr	r3, [r7, #28]
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3720      	adds	r7, #32
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b088      	sub	sp, #32
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c6c:	2303      	movs	r3, #3
 8010c6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c70:	2340      	movs	r3, #64	@ 0x40
 8010c72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c74:	2300      	movs	r3, #0
 8010c76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c7e:	f107 0308 	add.w	r3, r7, #8
 8010c82:	4619      	mov	r1, r3
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7ff fdc5 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c8a:	683a      	ldr	r2, [r7, #0]
 8010c8c:	2103      	movs	r1, #3
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f99c 	bl	8010fcc <SDMMC_GetCmdResp6>
 8010c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c96:	69fb      	ldr	r3, [r7, #28]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3720      	adds	r7, #32
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010cae:	230d      	movs	r3, #13
 8010cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cb2:	2340      	movs	r3, #64	@ 0x40
 8010cb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cc0:	f107 0308 	add.w	r3, r7, #8
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f7ff fda4 	bl	8010814 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cd0:	210d      	movs	r1, #13
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f806 	bl	8010ce4 <SDMMC_GetCmdResp1>
 8010cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cda:	69fb      	ldr	r3, [r7, #28]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3720      	adds	r7, #32
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b088      	sub	sp, #32
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	60f8      	str	r0, [r7, #12]
 8010cec:	460b      	mov	r3, r1
 8010cee:	607a      	str	r2, [r7, #4]
 8010cf0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010cf2:	4b70      	ldr	r3, [pc, #448]	@ (8010eb4 <SDMMC_GetCmdResp1+0x1d0>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a70      	ldr	r2, [pc, #448]	@ (8010eb8 <SDMMC_GetCmdResp1+0x1d4>)
 8010cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8010cfc:	0a5a      	lsrs	r2, r3, #9
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	fb02 f303 	mul.w	r3, r2, r3
 8010d04:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	1e5a      	subs	r2, r3, #1
 8010d0a:	61fa      	str	r2, [r7, #28]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d102      	bne.n	8010d16 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010d14:	e0c9      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d1a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d0ef      	beq.n	8010d06 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d1ea      	bne.n	8010d06 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d34:	f003 0304 	and.w	r3, r3, #4
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d004      	beq.n	8010d46 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	2204      	movs	r2, #4
 8010d40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d42:	2304      	movs	r3, #4
 8010d44:	e0b1      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d4a:	f003 0301 	and.w	r3, r3, #1
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d004      	beq.n	8010d5c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2201      	movs	r2, #1
 8010d56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	e0a6      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	22c5      	movs	r2, #197	@ 0xc5
 8010d60:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	f7ff fd80 	bl	8010868 <SDMMC_GetCommandResponse>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	7afb      	ldrb	r3, [r7, #11]
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d001      	beq.n	8010d76 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d72:	2301      	movs	r3, #1
 8010d74:	e099      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010d76:	2100      	movs	r1, #0
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f7ff fd82 	bl	8010882 <SDMMC_GetResponse>
 8010d7e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d80:	697a      	ldr	r2, [r7, #20]
 8010d82:	4b4e      	ldr	r3, [pc, #312]	@ (8010ebc <SDMMC_GetCmdResp1+0x1d8>)
 8010d84:	4013      	ands	r3, r2
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d101      	bne.n	8010d8e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	e08d      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	da02      	bge.n	8010d9a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010d94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010d98:	e087      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d001      	beq.n	8010da8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010da4:	2340      	movs	r3, #64	@ 0x40
 8010da6:	e080      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d001      	beq.n	8010db6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010db2:	2380      	movs	r3, #128	@ 0x80
 8010db4:	e079      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d002      	beq.n	8010dc6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010dc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010dc4:	e071      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010dd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010dd4:	e069      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d002      	beq.n	8010de6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010de4:	e061      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010df0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010df4:	e059      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d002      	beq.n	8010e06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e04:	e051      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010e14:	e049      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010e24:	e041      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d002      	beq.n	8010e36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e34:	e039      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010e44:	e031      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010e54:	e029      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d002      	beq.n	8010e66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010e64:	e021      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010e74:	e019      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010e84:	e011      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d002      	beq.n	8010e96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010e90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010e94:	e009      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f003 0308 	and.w	r3, r3, #8
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010ea0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010ea4:	e001      	b.n	8010eaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ea6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3720      	adds	r7, #32
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	20000018 	.word	0x20000018
 8010eb8:	10624dd3 	.word	0x10624dd3
 8010ebc:	fdffe008 	.word	0xfdffe008

08010ec0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b085      	sub	sp, #20
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8010f48 <SDMMC_GetCmdResp2+0x88>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8010f4c <SDMMC_GetCmdResp2+0x8c>)
 8010ece:	fba2 2303 	umull	r2, r3, r2, r3
 8010ed2:	0a5b      	lsrs	r3, r3, #9
 8010ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ed8:	fb02 f303 	mul.w	r3, r2, r3
 8010edc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	1e5a      	subs	r2, r3, #1
 8010ee2:	60fa      	str	r2, [r7, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d102      	bne.n	8010eee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ee8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010eec:	e026      	b.n	8010f3c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ef2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d0ef      	beq.n	8010ede <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1ea      	bne.n	8010ede <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f0c:	f003 0304 	and.w	r3, r3, #4
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d004      	beq.n	8010f1e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2204      	movs	r2, #4
 8010f18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f1a:	2304      	movs	r3, #4
 8010f1c:	e00e      	b.n	8010f3c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f22:	f003 0301 	and.w	r3, r3, #1
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d004      	beq.n	8010f34 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f30:	2301      	movs	r3, #1
 8010f32:	e003      	b.n	8010f3c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	22c5      	movs	r2, #197	@ 0xc5
 8010f38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f3a:	2300      	movs	r3, #0
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3714      	adds	r7, #20
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr
 8010f48:	20000018 	.word	0x20000018
 8010f4c:	10624dd3 	.word	0x10624dd3

08010f50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b085      	sub	sp, #20
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f58:	4b1a      	ldr	r3, [pc, #104]	@ (8010fc4 <SDMMC_GetCmdResp3+0x74>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8010fc8 <SDMMC_GetCmdResp3+0x78>)
 8010f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8010f62:	0a5b      	lsrs	r3, r3, #9
 8010f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f68:	fb02 f303 	mul.w	r3, r2, r3
 8010f6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	1e5a      	subs	r2, r3, #1
 8010f72:	60fa      	str	r2, [r7, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d102      	bne.n	8010f7e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010f7c:	e01b      	b.n	8010fb6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d0ef      	beq.n	8010f6e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1ea      	bne.n	8010f6e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f9c:	f003 0304 	and.w	r3, r3, #4
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d004      	beq.n	8010fae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2204      	movs	r2, #4
 8010fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010faa:	2304      	movs	r3, #4
 8010fac:	e003      	b.n	8010fb6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	22c5      	movs	r2, #197	@ 0xc5
 8010fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3714      	adds	r7, #20
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	20000018 	.word	0x20000018
 8010fc8:	10624dd3 	.word	0x10624dd3

08010fcc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b088      	sub	sp, #32
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	607a      	str	r2, [r7, #4]
 8010fd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fda:	4b35      	ldr	r3, [pc, #212]	@ (80110b0 <SDMMC_GetCmdResp6+0xe4>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	4a35      	ldr	r2, [pc, #212]	@ (80110b4 <SDMMC_GetCmdResp6+0xe8>)
 8010fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8010fe4:	0a5b      	lsrs	r3, r3, #9
 8010fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fea:	fb02 f303 	mul.w	r3, r2, r3
 8010fee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	1e5a      	subs	r2, r3, #1
 8010ff4:	61fa      	str	r2, [r7, #28]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d102      	bne.n	8011000 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ffa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ffe:	e052      	b.n	80110a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011004:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801100c:	2b00      	cmp	r3, #0
 801100e:	d0ef      	beq.n	8010ff0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011010:	69bb      	ldr	r3, [r7, #24]
 8011012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1ea      	bne.n	8010ff0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801101e:	f003 0304 	and.w	r3, r3, #4
 8011022:	2b00      	cmp	r3, #0
 8011024:	d004      	beq.n	8011030 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2204      	movs	r2, #4
 801102a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801102c:	2304      	movs	r3, #4
 801102e:	e03a      	b.n	80110a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	2b00      	cmp	r3, #0
 801103a:	d004      	beq.n	8011046 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2201      	movs	r2, #1
 8011040:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011042:	2301      	movs	r3, #1
 8011044:	e02f      	b.n	80110a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f7ff fc0e 	bl	8010868 <SDMMC_GetCommandResponse>
 801104c:	4603      	mov	r3, r0
 801104e:	461a      	mov	r2, r3
 8011050:	7afb      	ldrb	r3, [r7, #11]
 8011052:	4293      	cmp	r3, r2
 8011054:	d001      	beq.n	801105a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011056:	2301      	movs	r3, #1
 8011058:	e025      	b.n	80110a6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	22c5      	movs	r2, #197	@ 0xc5
 801105e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011060:	2100      	movs	r1, #0
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	f7ff fc0d 	bl	8010882 <SDMMC_GetResponse>
 8011068:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011070:	2b00      	cmp	r3, #0
 8011072:	d106      	bne.n	8011082 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	0c1b      	lsrs	r3, r3, #16
 8011078:	b29a      	uxth	r2, r3
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801107e:	2300      	movs	r3, #0
 8011080:	e011      	b.n	80110a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011088:	2b00      	cmp	r3, #0
 801108a:	d002      	beq.n	8011092 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801108c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011090:	e009      	b.n	80110a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011098:	2b00      	cmp	r3, #0
 801109a:	d002      	beq.n	80110a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801109c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80110a0:	e001      	b.n	80110a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80110a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3720      	adds	r7, #32
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	20000018 	.word	0x20000018
 80110b4:	10624dd3 	.word	0x10624dd3

080110b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b085      	sub	sp, #20
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110c0:	4b22      	ldr	r3, [pc, #136]	@ (801114c <SDMMC_GetCmdResp7+0x94>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4a22      	ldr	r2, [pc, #136]	@ (8011150 <SDMMC_GetCmdResp7+0x98>)
 80110c6:	fba2 2303 	umull	r2, r3, r2, r3
 80110ca:	0a5b      	lsrs	r3, r3, #9
 80110cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110d0:	fb02 f303 	mul.w	r3, r2, r3
 80110d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	1e5a      	subs	r2, r3, #1
 80110da:	60fa      	str	r2, [r7, #12]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d102      	bne.n	80110e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110e4:	e02c      	b.n	8011140 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d0ef      	beq.n	80110d6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d1ea      	bne.n	80110d6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011104:	f003 0304 	and.w	r3, r3, #4
 8011108:	2b00      	cmp	r3, #0
 801110a:	d004      	beq.n	8011116 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2204      	movs	r2, #4
 8011110:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011112:	2304      	movs	r3, #4
 8011114:	e014      	b.n	8011140 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801111a:	f003 0301 	and.w	r3, r3, #1
 801111e:	2b00      	cmp	r3, #0
 8011120:	d004      	beq.n	801112c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2201      	movs	r2, #1
 8011126:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011128:	2301      	movs	r3, #1
 801112a:	e009      	b.n	8011140 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011134:	2b00      	cmp	r3, #0
 8011136:	d002      	beq.n	801113e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2240      	movs	r2, #64	@ 0x40
 801113c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801113e:	2300      	movs	r3, #0
  
}
 8011140:	4618      	mov	r0, r3
 8011142:	3714      	adds	r7, #20
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	20000018 	.word	0x20000018
 8011150:	10624dd3 	.word	0x10624dd3

08011154 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011154:	b480      	push	{r7}
 8011156:	b085      	sub	sp, #20
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801115c:	4b11      	ldr	r3, [pc, #68]	@ (80111a4 <SDMMC_GetCmdError+0x50>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a11      	ldr	r2, [pc, #68]	@ (80111a8 <SDMMC_GetCmdError+0x54>)
 8011162:	fba2 2303 	umull	r2, r3, r2, r3
 8011166:	0a5b      	lsrs	r3, r3, #9
 8011168:	f241 3288 	movw	r2, #5000	@ 0x1388
 801116c:	fb02 f303 	mul.w	r3, r2, r3
 8011170:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	1e5a      	subs	r2, r3, #1
 8011176:	60fa      	str	r2, [r7, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d102      	bne.n	8011182 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801117c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011180:	e009      	b.n	8011196 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801118a:	2b00      	cmp	r3, #0
 801118c:	d0f1      	beq.n	8011172 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	22c5      	movs	r2, #197	@ 0xc5
 8011192:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8011194:	2300      	movs	r3, #0
}
 8011196:	4618      	mov	r0, r3
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	20000018 	.word	0x20000018
 80111a8:	10624dd3 	.word	0x10624dd3

080111ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80111ac:	b084      	sub	sp, #16
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b084      	sub	sp, #16
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
 80111b6:	f107 001c 	add.w	r0, r7, #28
 80111ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80111be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d121      	bne.n	801120a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	68da      	ldr	r2, [r3, #12]
 80111d6:	4b21      	ldr	r3, [pc, #132]	@ (801125c <USB_CoreInit+0xb0>)
 80111d8:	4013      	ands	r3, r2
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80111ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d105      	bne.n	80111fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f9d4 	bl	80115ac <USB_CoreReset>
 8011204:	4603      	mov	r3, r0
 8011206:	73fb      	strb	r3, [r7, #15]
 8011208:	e010      	b.n	801122c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f000 f9c8 	bl	80115ac <USB_CoreReset>
 801121c:	4603      	mov	r3, r0
 801121e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011224:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 801122c:	7fbb      	ldrb	r3, [r7, #30]
 801122e:	2b01      	cmp	r3, #1
 8011230:	d10b      	bne.n	801124a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	689b      	ldr	r3, [r3, #8]
 8011236:	f043 0206 	orr.w	r2, r3, #6
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	f043 0220 	orr.w	r2, r3, #32
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801124a:	7bfb      	ldrb	r3, [r7, #15]
}
 801124c:	4618      	mov	r0, r3
 801124e:	3710      	adds	r7, #16
 8011250:	46bd      	mov	sp, r7
 8011252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011256:	b004      	add	sp, #16
 8011258:	4770      	bx	lr
 801125a:	bf00      	nop
 801125c:	ffbdffbf 	.word	0xffbdffbf

08011260 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	f043 0201 	orr.w	r2, r3, #1
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011274:	2300      	movs	r3, #0
}
 8011276:	4618      	mov	r0, r3
 8011278:	370c      	adds	r7, #12
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr

08011282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011282:	b480      	push	{r7}
 8011284:	b083      	sub	sp, #12
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	f023 0201 	bic.w	r2, r3, #1
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	370c      	adds	r7, #12
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	460b      	mov	r3, r1
 80112ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80112b0:	2300      	movs	r3, #0
 80112b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80112c0:	78fb      	ldrb	r3, [r7, #3]
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	d115      	bne.n	80112f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80112d2:	200a      	movs	r0, #10
 80112d4:	f7f4 fa18 	bl	8005708 <HAL_Delay>
      ms += 10U;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	330a      	adds	r3, #10
 80112dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f000 f956 	bl	8011590 <USB_GetMode>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d01e      	beq.n	8011328 <USB_SetCurrentMode+0x84>
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80112ee:	d9f0      	bls.n	80112d2 <USB_SetCurrentMode+0x2e>
 80112f0:	e01a      	b.n	8011328 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80112f2:	78fb      	ldrb	r3, [r7, #3]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d115      	bne.n	8011324 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011304:	200a      	movs	r0, #10
 8011306:	f7f4 f9ff 	bl	8005708 <HAL_Delay>
      ms += 10U;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	330a      	adds	r3, #10
 801130e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f000 f93d 	bl	8011590 <USB_GetMode>
 8011316:	4603      	mov	r3, r0
 8011318:	2b00      	cmp	r3, #0
 801131a:	d005      	beq.n	8011328 <USB_SetCurrentMode+0x84>
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2bc7      	cmp	r3, #199	@ 0xc7
 8011320:	d9f0      	bls.n	8011304 <USB_SetCurrentMode+0x60>
 8011322:	e001      	b.n	8011328 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011324:	2301      	movs	r3, #1
 8011326:	e005      	b.n	8011334 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2bc8      	cmp	r3, #200	@ 0xc8
 801132c:	d101      	bne.n	8011332 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801132e:	2301      	movs	r3, #1
 8011330:	e000      	b.n	8011334 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011332:	2300      	movs	r3, #0
}
 8011334:	4618      	mov	r0, r3
 8011336:	3710      	adds	r7, #16
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011346:	2300      	movs	r3, #0
 8011348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	3301      	adds	r3, #1
 801134e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011356:	d901      	bls.n	801135c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011358:	2303      	movs	r3, #3
 801135a:	e01b      	b.n	8011394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	2b00      	cmp	r3, #0
 8011362:	daf2      	bge.n	801134a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011364:	2300      	movs	r3, #0
 8011366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	019b      	lsls	r3, r3, #6
 801136c:	f043 0220 	orr.w	r2, r3, #32
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	3301      	adds	r3, #1
 8011378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011380:	d901      	bls.n	8011386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011382:	2303      	movs	r3, #3
 8011384:	e006      	b.n	8011394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	691b      	ldr	r3, [r3, #16]
 801138a:	f003 0320 	and.w	r3, r3, #32
 801138e:	2b20      	cmp	r3, #32
 8011390:	d0f0      	beq.n	8011374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011392:	2300      	movs	r3, #0
}
 8011394:	4618      	mov	r0, r3
 8011396:	3714      	adds	r7, #20
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr

080113a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b085      	sub	sp, #20
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80113a8:	2300      	movs	r3, #0
 80113aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	3301      	adds	r3, #1
 80113b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113b8:	d901      	bls.n	80113be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80113ba:	2303      	movs	r3, #3
 80113bc:	e018      	b.n	80113f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	691b      	ldr	r3, [r3, #16]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	daf2      	bge.n	80113ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80113c6:	2300      	movs	r3, #0
 80113c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2210      	movs	r2, #16
 80113ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	3301      	adds	r3, #1
 80113d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113dc:	d901      	bls.n	80113e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80113de:	2303      	movs	r3, #3
 80113e0:	e006      	b.n	80113f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	691b      	ldr	r3, [r3, #16]
 80113e6:	f003 0310 	and.w	r3, r3, #16
 80113ea:	2b10      	cmp	r3, #16
 80113ec:	d0f0      	beq.n	80113d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3714      	adds	r7, #20
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr

080113fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b089      	sub	sp, #36	@ 0x24
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	4611      	mov	r1, r2
 8011408:	461a      	mov	r2, r3
 801140a:	460b      	mov	r3, r1
 801140c:	71fb      	strb	r3, [r7, #7]
 801140e:	4613      	mov	r3, r2
 8011410:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801141a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801141e:	2b00      	cmp	r3, #0
 8011420:	d123      	bne.n	801146a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011422:	88bb      	ldrh	r3, [r7, #4]
 8011424:	3303      	adds	r3, #3
 8011426:	089b      	lsrs	r3, r3, #2
 8011428:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801142a:	2300      	movs	r3, #0
 801142c:	61bb      	str	r3, [r7, #24]
 801142e:	e018      	b.n	8011462 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011430:	79fb      	ldrb	r3, [r7, #7]
 8011432:	031a      	lsls	r2, r3, #12
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	4413      	add	r3, r2
 8011438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801143c:	461a      	mov	r2, r3
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	3301      	adds	r3, #1
 8011448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	3301      	adds	r3, #1
 801144e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	3301      	adds	r3, #1
 8011454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	3301      	adds	r3, #1
 801145a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801145c:	69bb      	ldr	r3, [r7, #24]
 801145e:	3301      	adds	r3, #1
 8011460:	61bb      	str	r3, [r7, #24]
 8011462:	69ba      	ldr	r2, [r7, #24]
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	429a      	cmp	r2, r3
 8011468:	d3e2      	bcc.n	8011430 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801146a:	2300      	movs	r3, #0
}
 801146c:	4618      	mov	r0, r3
 801146e:	3724      	adds	r7, #36	@ 0x24
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011478:	b480      	push	{r7}
 801147a:	b08b      	sub	sp, #44	@ 0x2c
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	60b9      	str	r1, [r7, #8]
 8011482:	4613      	mov	r3, r2
 8011484:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801148e:	88fb      	ldrh	r3, [r7, #6]
 8011490:	089b      	lsrs	r3, r3, #2
 8011492:	b29b      	uxth	r3, r3
 8011494:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011496:	88fb      	ldrh	r3, [r7, #6]
 8011498:	f003 0303 	and.w	r3, r3, #3
 801149c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801149e:	2300      	movs	r3, #0
 80114a0:	623b      	str	r3, [r7, #32]
 80114a2:	e014      	b.n	80114ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80114a4:	69bb      	ldr	r3, [r7, #24]
 80114a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80114b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b2:	3301      	adds	r3, #1
 80114b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80114b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b8:	3301      	adds	r3, #1
 80114ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80114bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114be:	3301      	adds	r3, #1
 80114c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80114c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c4:	3301      	adds	r3, #1
 80114c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80114c8:	6a3b      	ldr	r3, [r7, #32]
 80114ca:	3301      	adds	r3, #1
 80114cc:	623b      	str	r3, [r7, #32]
 80114ce:	6a3a      	ldr	r2, [r7, #32]
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d3e6      	bcc.n	80114a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80114d6:	8bfb      	ldrh	r3, [r7, #30]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d01e      	beq.n	801151a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80114dc:	2300      	movs	r3, #0
 80114de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80114e6:	461a      	mov	r2, r3
 80114e8:	f107 0310 	add.w	r3, r7, #16
 80114ec:	6812      	ldr	r2, [r2, #0]
 80114ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80114f0:	693a      	ldr	r2, [r7, #16]
 80114f2:	6a3b      	ldr	r3, [r7, #32]
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	00db      	lsls	r3, r3, #3
 80114f8:	fa22 f303 	lsr.w	r3, r2, r3
 80114fc:	b2da      	uxtb	r2, r3
 80114fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011500:	701a      	strb	r2, [r3, #0]
      i++;
 8011502:	6a3b      	ldr	r3, [r7, #32]
 8011504:	3301      	adds	r3, #1
 8011506:	623b      	str	r3, [r7, #32]
      pDest++;
 8011508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150a:	3301      	adds	r3, #1
 801150c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801150e:	8bfb      	ldrh	r3, [r7, #30]
 8011510:	3b01      	subs	r3, #1
 8011512:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011514:	8bfb      	ldrh	r3, [r7, #30]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d1ea      	bne.n	80114f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801151c:	4618      	mov	r0, r3
 801151e:	372c      	adds	r7, #44	@ 0x2c
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr

08011528 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011528:	b480      	push	{r7}
 801152a:	b085      	sub	sp, #20
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	699b      	ldr	r3, [r3, #24]
 801153a:	68fa      	ldr	r2, [r7, #12]
 801153c:	4013      	ands	r3, r2
 801153e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011540:	68fb      	ldr	r3, [r7, #12]
}
 8011542:	4618      	mov	r0, r3
 8011544:	3714      	adds	r7, #20
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801154e:	b480      	push	{r7}
 8011550:	b085      	sub	sp, #20
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	460b      	mov	r3, r1
 8011558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801155e:	78fb      	ldrb	r3, [r7, #3]
 8011560:	015a      	lsls	r2, r3, #5
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	4413      	add	r3, r2
 8011566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801156a:	689b      	ldr	r3, [r3, #8]
 801156c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801156e:	78fb      	ldrb	r3, [r7, #3]
 8011570:	015a      	lsls	r2, r3, #5
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	4413      	add	r3, r2
 8011576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	68ba      	ldr	r2, [r7, #8]
 801157e:	4013      	ands	r3, r2
 8011580:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011582:	68bb      	ldr	r3, [r7, #8]
}
 8011584:	4618      	mov	r0, r3
 8011586:	3714      	adds	r7, #20
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr

08011590 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011590:	b480      	push	{r7}
 8011592:	b083      	sub	sp, #12
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	695b      	ldr	r3, [r3, #20]
 801159c:	f003 0301 	and.w	r3, r3, #1
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b085      	sub	sp, #20
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80115b4:	2300      	movs	r3, #0
 80115b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	3301      	adds	r3, #1
 80115bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80115c4:	d901      	bls.n	80115ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80115c6:	2303      	movs	r3, #3
 80115c8:	e022      	b.n	8011610 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	691b      	ldr	r3, [r3, #16]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	daf2      	bge.n	80115b8 <USB_CoreReset+0xc>

  count = 10U;
 80115d2:	230a      	movs	r3, #10
 80115d4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80115d6:	e002      	b.n	80115de <USB_CoreReset+0x32>
  {
    count--;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	3b01      	subs	r3, #1
 80115dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d1f9      	bne.n	80115d8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	691b      	ldr	r3, [r3, #16]
 80115e8:	f043 0201 	orr.w	r2, r3, #1
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	3301      	adds	r3, #1
 80115f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80115fc:	d901      	bls.n	8011602 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80115fe:	2303      	movs	r3, #3
 8011600:	e006      	b.n	8011610 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	691b      	ldr	r3, [r3, #16]
 8011606:	f003 0301 	and.w	r3, r3, #1
 801160a:	2b01      	cmp	r3, #1
 801160c:	d0f0      	beq.n	80115f0 <USB_CoreReset+0x44>

  return HAL_OK;
 801160e:	2300      	movs	r3, #0
}
 8011610:	4618      	mov	r0, r3
 8011612:	3714      	adds	r7, #20
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801161c:	b084      	sub	sp, #16
 801161e:	b580      	push	{r7, lr}
 8011620:	b086      	sub	sp, #24
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
 8011626:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801162a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801162e:	2300      	movs	r3, #0
 8011630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801163c:	461a      	mov	r2, r3
 801163e:	2300      	movs	r3, #0
 8011640:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011646:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011656:	2b00      	cmp	r3, #0
 8011658:	d119      	bne.n	801168e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801165a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801165e:	2b01      	cmp	r3, #1
 8011660:	d10a      	bne.n	8011678 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011670:	f043 0304 	orr.w	r3, r3, #4
 8011674:	6013      	str	r3, [r2, #0]
 8011676:	e014      	b.n	80116a2 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	68fa      	ldr	r2, [r7, #12]
 8011682:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011686:	f023 0304 	bic.w	r3, r3, #4
 801168a:	6013      	str	r3, [r2, #0]
 801168c:	e009      	b.n	80116a2 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	68fa      	ldr	r2, [r7, #12]
 8011698:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801169c:	f023 0304 	bic.w	r3, r3, #4
 80116a0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80116a2:	2110      	movs	r1, #16
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f7ff fe49 	bl	801133c <USB_FlushTxFifo>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d001      	beq.n	80116b4 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 80116b0:	2301      	movs	r3, #1
 80116b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f7ff fe73 	bl	80113a0 <USB_FlushRxFifo>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 80116c0:	2301      	movs	r3, #1
 80116c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80116c4:	2300      	movs	r3, #0
 80116c6:	613b      	str	r3, [r7, #16]
 80116c8:	e015      	b.n	80116f6 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	015a      	lsls	r2, r3, #5
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	4413      	add	r3, r2
 80116d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116d6:	461a      	mov	r2, r3
 80116d8:	f04f 33ff 	mov.w	r3, #4294967295
 80116dc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	015a      	lsls	r2, r3, #5
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	4413      	add	r3, r2
 80116e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116ea:	461a      	mov	r2, r3
 80116ec:	2300      	movs	r3, #0
 80116ee:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	3301      	adds	r3, #1
 80116f4:	613b      	str	r3, [r7, #16]
 80116f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80116fa:	461a      	mov	r2, r3
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	4293      	cmp	r3, r2
 8011700:	d3e3      	bcc.n	80116ca <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f04f 32ff 	mov.w	r2, #4294967295
 801170e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	4a18      	ldr	r2, [pc, #96]	@ (8011774 <USB_HostInit+0x158>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d10b      	bne.n	8011730 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801171e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4a15      	ldr	r2, [pc, #84]	@ (8011778 <USB_HostInit+0x15c>)
 8011724:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4a14      	ldr	r2, [pc, #80]	@ (801177c <USB_HostInit+0x160>)
 801172a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801172e:	e009      	b.n	8011744 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2280      	movs	r2, #128	@ 0x80
 8011734:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4a11      	ldr	r2, [pc, #68]	@ (8011780 <USB_HostInit+0x164>)
 801173a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	4a11      	ldr	r2, [pc, #68]	@ (8011784 <USB_HostInit+0x168>)
 8011740:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011744:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011748:	2b00      	cmp	r3, #0
 801174a:	d105      	bne.n	8011758 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	699b      	ldr	r3, [r3, #24]
 8011750:	f043 0210 	orr.w	r2, r3, #16
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	699a      	ldr	r2, [r3, #24]
 801175c:	4b0a      	ldr	r3, [pc, #40]	@ (8011788 <USB_HostInit+0x16c>)
 801175e:	4313      	orrs	r3, r2
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8011764:	7dfb      	ldrb	r3, [r7, #23]
}
 8011766:	4618      	mov	r0, r3
 8011768:	3718      	adds	r7, #24
 801176a:	46bd      	mov	sp, r7
 801176c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011770:	b004      	add	sp, #16
 8011772:	4770      	bx	lr
 8011774:	40040000 	.word	0x40040000
 8011778:	01000200 	.word	0x01000200
 801177c:	00e00300 	.word	0x00e00300
 8011780:	00600080 	.word	0x00600080
 8011784:	004000e0 	.word	0x004000e0
 8011788:	a3200008 	.word	0xa3200008

0801178c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 801178c:	b480      	push	{r7}
 801178e:	b085      	sub	sp, #20
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	460b      	mov	r3, r1
 8011796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68fa      	ldr	r2, [r7, #12]
 80117a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80117aa:	f023 0303 	bic.w	r3, r3, #3
 80117ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117b6:	681a      	ldr	r2, [r3, #0]
 80117b8:	78fb      	ldrb	r3, [r7, #3]
 80117ba:	f003 0303 	and.w	r3, r3, #3
 80117be:	68f9      	ldr	r1, [r7, #12]
 80117c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80117c4:	4313      	orrs	r3, r2
 80117c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80117c8:	78fb      	ldrb	r3, [r7, #3]
 80117ca:	2b01      	cmp	r3, #1
 80117cc:	d107      	bne.n	80117de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117d4:	461a      	mov	r2, r3
 80117d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80117da:	6053      	str	r3, [r2, #4]
 80117dc:	e00c      	b.n	80117f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80117de:	78fb      	ldrb	r3, [r7, #3]
 80117e0:	2b02      	cmp	r3, #2
 80117e2:	d107      	bne.n	80117f4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117ea:	461a      	mov	r2, r3
 80117ec:	f241 7370 	movw	r3, #6000	@ 0x1770
 80117f0:	6053      	str	r3, [r2, #4]
 80117f2:	e001      	b.n	80117f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80117f4:	2301      	movs	r3, #1
 80117f6:	e000      	b.n	80117fa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80117f8:	2300      	movs	r3, #0
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3714      	adds	r7, #20
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr

08011806 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8011806:	b580      	push	{r7, lr}
 8011808:	b084      	sub	sp, #16
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011812:	2300      	movs	r3, #0
 8011814:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8011826:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	68fa      	ldr	r2, [r7, #12]
 801182c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011834:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8011836:	2064      	movs	r0, #100	@ 0x64
 8011838:	f7f3 ff66 	bl	8005708 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011848:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 801184a:	200a      	movs	r0, #10
 801184c:	f7f3 ff5c 	bl	8005708 <HAL_Delay>

  return HAL_OK;
 8011850:	2300      	movs	r3, #0
}
 8011852:	4618      	mov	r0, r3
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 801185a:	b480      	push	{r7}
 801185c:	b085      	sub	sp, #20
 801185e:	af00      	add	r7, sp, #0
 8011860:	6078      	str	r0, [r7, #4]
 8011862:	460b      	mov	r3, r1
 8011864:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801186a:	2300      	movs	r3, #0
 801186c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 801187e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011886:	2b00      	cmp	r3, #0
 8011888:	d109      	bne.n	801189e <USB_DriveVbus+0x44>
 801188a:	78fb      	ldrb	r3, [r7, #3]
 801188c:	2b01      	cmp	r3, #1
 801188e:	d106      	bne.n	801189e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	68fa      	ldr	r2, [r7, #12]
 8011894:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011898:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801189c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80118a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80118a8:	d109      	bne.n	80118be <USB_DriveVbus+0x64>
 80118aa:	78fb      	ldrb	r3, [r7, #3]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d106      	bne.n	80118be <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80118b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80118bc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3714      	adds	r7, #20
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80118d8:	2300      	movs	r3, #0
 80118da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	0c5b      	lsrs	r3, r3, #17
 80118ea:	f003 0303 	and.w	r3, r3, #3
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3714      	adds	r7, #20
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr

080118fa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80118fa:	b480      	push	{r7}
 80118fc:	b085      	sub	sp, #20
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	b29b      	uxth	r3, r3
}
 8011910:	4618      	mov	r0, r3
 8011912:	3714      	adds	r7, #20
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr

0801191c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b088      	sub	sp, #32
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	4608      	mov	r0, r1
 8011926:	4611      	mov	r1, r2
 8011928:	461a      	mov	r2, r3
 801192a:	4603      	mov	r3, r0
 801192c:	70fb      	strb	r3, [r7, #3]
 801192e:	460b      	mov	r3, r1
 8011930:	70bb      	strb	r3, [r7, #2]
 8011932:	4613      	mov	r3, r2
 8011934:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8011936:	2300      	movs	r3, #0
 8011938:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 801193e:	78fb      	ldrb	r3, [r7, #3]
 8011940:	015a      	lsls	r2, r3, #5
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	4413      	add	r3, r2
 8011946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801194a:	461a      	mov	r2, r3
 801194c:	f04f 33ff 	mov.w	r3, #4294967295
 8011950:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8011952:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011956:	2b03      	cmp	r3, #3
 8011958:	d87c      	bhi.n	8011a54 <USB_HC_Init+0x138>
 801195a:	a201      	add	r2, pc, #4	@ (adr r2, 8011960 <USB_HC_Init+0x44>)
 801195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011960:	08011971 	.word	0x08011971
 8011964:	08011a17 	.word	0x08011a17
 8011968:	08011971 	.word	0x08011971
 801196c:	080119d9 	.word	0x080119d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011970:	78fb      	ldrb	r3, [r7, #3]
 8011972:	015a      	lsls	r2, r3, #5
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	4413      	add	r3, r2
 8011978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801197c:	461a      	mov	r2, r3
 801197e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8011982:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8011984:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011988:	2b00      	cmp	r3, #0
 801198a:	da10      	bge.n	80119ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801198c:	78fb      	ldrb	r3, [r7, #3]
 801198e:	015a      	lsls	r2, r3, #5
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	4413      	add	r3, r2
 8011994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	78fa      	ldrb	r2, [r7, #3]
 801199c:	0151      	lsls	r1, r2, #5
 801199e:	693a      	ldr	r2, [r7, #16]
 80119a0:	440a      	add	r2, r1
 80119a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80119a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80119aa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80119ac:	e055      	b.n	8011a5a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	4a6f      	ldr	r2, [pc, #444]	@ (8011b70 <USB_HC_Init+0x254>)
 80119b2:	4293      	cmp	r3, r2
 80119b4:	d151      	bne.n	8011a5a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80119b6:	78fb      	ldrb	r3, [r7, #3]
 80119b8:	015a      	lsls	r2, r3, #5
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	4413      	add	r3, r2
 80119be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119c2:	68db      	ldr	r3, [r3, #12]
 80119c4:	78fa      	ldrb	r2, [r7, #3]
 80119c6:	0151      	lsls	r1, r2, #5
 80119c8:	693a      	ldr	r2, [r7, #16]
 80119ca:	440a      	add	r2, r1
 80119cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80119d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80119d4:	60d3      	str	r3, [r2, #12]
      break;
 80119d6:	e040      	b.n	8011a5a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80119d8:	78fb      	ldrb	r3, [r7, #3]
 80119da:	015a      	lsls	r2, r3, #5
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	4413      	add	r3, r2
 80119e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119e4:	461a      	mov	r2, r3
 80119e6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80119ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80119ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	da34      	bge.n	8011a5e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80119f4:	78fb      	ldrb	r3, [r7, #3]
 80119f6:	015a      	lsls	r2, r3, #5
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	4413      	add	r3, r2
 80119fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	78fa      	ldrb	r2, [r7, #3]
 8011a04:	0151      	lsls	r1, r2, #5
 8011a06:	693a      	ldr	r2, [r7, #16]
 8011a08:	440a      	add	r2, r1
 8011a0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a12:	60d3      	str	r3, [r2, #12]
      }

      break;
 8011a14:	e023      	b.n	8011a5e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011a16:	78fb      	ldrb	r3, [r7, #3]
 8011a18:	015a      	lsls	r2, r3, #5
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a22:	461a      	mov	r2, r3
 8011a24:	f240 2325 	movw	r3, #549	@ 0x225
 8011a28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011a2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	da17      	bge.n	8011a62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8011a32:	78fb      	ldrb	r3, [r7, #3]
 8011a34:	015a      	lsls	r2, r3, #5
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	4413      	add	r3, r2
 8011a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	78fa      	ldrb	r2, [r7, #3]
 8011a42:	0151      	lsls	r1, r2, #5
 8011a44:	693a      	ldr	r2, [r7, #16]
 8011a46:	440a      	add	r2, r1
 8011a48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a4c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8011a50:	60d3      	str	r3, [r2, #12]
      }
      break;
 8011a52:	e006      	b.n	8011a62 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8011a54:	2301      	movs	r3, #1
 8011a56:	77fb      	strb	r3, [r7, #31]
      break;
 8011a58:	e004      	b.n	8011a64 <USB_HC_Init+0x148>
      break;
 8011a5a:	bf00      	nop
 8011a5c:	e002      	b.n	8011a64 <USB_HC_Init+0x148>
      break;
 8011a5e:	bf00      	nop
 8011a60:	e000      	b.n	8011a64 <USB_HC_Init+0x148>
      break;
 8011a62:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011a64:	78fb      	ldrb	r3, [r7, #3]
 8011a66:	015a      	lsls	r2, r3, #5
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a70:	461a      	mov	r2, r3
 8011a72:	2300      	movs	r3, #0
 8011a74:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8011a76:	78fb      	ldrb	r3, [r7, #3]
 8011a78:	015a      	lsls	r2, r3, #5
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	78fa      	ldrb	r2, [r7, #3]
 8011a86:	0151      	lsls	r1, r2, #5
 8011a88:	693a      	ldr	r2, [r7, #16]
 8011a8a:	440a      	add	r2, r1
 8011a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a90:	f043 0302 	orr.w	r3, r3, #2
 8011a94:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011a9c:	699a      	ldr	r2, [r3, #24]
 8011a9e:	78fb      	ldrb	r3, [r7, #3]
 8011aa0:	f003 030f 	and.w	r3, r3, #15
 8011aa4:	2101      	movs	r1, #1
 8011aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8011aaa:	6939      	ldr	r1, [r7, #16]
 8011aac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011ab0:	4313      	orrs	r3, r2
 8011ab2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	699b      	ldr	r3, [r3, #24]
 8011ab8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8011ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	da03      	bge.n	8011ad0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8011ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011acc:	61bb      	str	r3, [r7, #24]
 8011ace:	e001      	b.n	8011ad4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f7ff fef9 	bl	80118cc <USB_GetHostSpeed>
 8011ada:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8011adc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	d106      	bne.n	8011af2 <USB_HC_Init+0x1d6>
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2b02      	cmp	r3, #2
 8011ae8:	d003      	beq.n	8011af2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8011aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011aee:	617b      	str	r3, [r7, #20]
 8011af0:	e001      	b.n	8011af6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8011af2:	2300      	movs	r3, #0
 8011af4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011af6:	787b      	ldrb	r3, [r7, #1]
 8011af8:	059b      	lsls	r3, r3, #22
 8011afa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011afe:	78bb      	ldrb	r3, [r7, #2]
 8011b00:	02db      	lsls	r3, r3, #11
 8011b02:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011b06:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011b08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011b0c:	049b      	lsls	r3, r3, #18
 8011b0e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011b12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8011b14:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011b1a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	431a      	orrs	r2, r3
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011b24:	78fa      	ldrb	r2, [r7, #3]
 8011b26:	0151      	lsls	r1, r2, #5
 8011b28:	693a      	ldr	r2, [r7, #16]
 8011b2a:	440a      	add	r2, r1
 8011b2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011b30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011b34:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8011b36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011b3a:	2b03      	cmp	r3, #3
 8011b3c:	d003      	beq.n	8011b46 <USB_HC_Init+0x22a>
 8011b3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011b42:	2b01      	cmp	r3, #1
 8011b44:	d10f      	bne.n	8011b66 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8011b46:	78fb      	ldrb	r3, [r7, #3]
 8011b48:	015a      	lsls	r2, r3, #5
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	4413      	add	r3, r2
 8011b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	78fa      	ldrb	r2, [r7, #3]
 8011b56:	0151      	lsls	r1, r2, #5
 8011b58:	693a      	ldr	r2, [r7, #16]
 8011b5a:	440a      	add	r2, r1
 8011b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011b64:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8011b66:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3720      	adds	r7, #32
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	40040000 	.word	0x40040000

08011b74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b08c      	sub	sp, #48	@ 0x30
 8011b78:	af02      	add	r7, sp, #8
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	4613      	mov	r3, r2
 8011b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	785b      	ldrb	r3, [r3, #1]
 8011b8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8011b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011b90:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	4a5d      	ldr	r2, [pc, #372]	@ (8011d0c <USB_HC_StartXfer+0x198>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d12f      	bne.n	8011bfa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8011b9a:	79fb      	ldrb	r3, [r7, #7]
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d11c      	bne.n	8011bda <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	7c9b      	ldrb	r3, [r3, #18]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d003      	beq.n	8011bb0 <USB_HC_StartXfer+0x3c>
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	7c9b      	ldrb	r3, [r3, #18]
 8011bac:	2b02      	cmp	r3, #2
 8011bae:	d124      	bne.n	8011bfa <USB_HC_StartXfer+0x86>
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	799b      	ldrb	r3, [r3, #6]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d120      	bne.n	8011bfa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8011bb8:	69fb      	ldr	r3, [r7, #28]
 8011bba:	015a      	lsls	r2, r3, #5
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011bc4:	68db      	ldr	r3, [r3, #12]
 8011bc6:	69fa      	ldr	r2, [r7, #28]
 8011bc8:	0151      	lsls	r1, r2, #5
 8011bca:	6a3a      	ldr	r2, [r7, #32]
 8011bcc:	440a      	add	r2, r1
 8011bce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bd6:	60d3      	str	r3, [r2, #12]
 8011bd8:	e00f      	b.n	8011bfa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	791b      	ldrb	r3, [r3, #4]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d10b      	bne.n	8011bfa <USB_HC_StartXfer+0x86>
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	795b      	ldrb	r3, [r3, #5]
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d107      	bne.n	8011bfa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	785b      	ldrb	r3, [r3, #1]
 8011bee:	4619      	mov	r1, r3
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	f000 fb6b 	bl	80122cc <USB_DoPing>
        return HAL_OK;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	e232      	b.n	8012060 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	799b      	ldrb	r3, [r3, #6]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d158      	bne.n	8011cb4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8011c02:	2301      	movs	r3, #1
 8011c04:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	78db      	ldrb	r3, [r3, #3]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d007      	beq.n	8011c1e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011c0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	8a92      	ldrh	r2, [r2, #20]
 8011c14:	fb03 f202 	mul.w	r2, r3, r2
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	61da      	str	r2, [r3, #28]
 8011c1c:	e07c      	b.n	8011d18 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	7c9b      	ldrb	r3, [r3, #18]
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	d130      	bne.n	8011c88 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	6a1b      	ldr	r3, [r3, #32]
 8011c2a:	2bbc      	cmp	r3, #188	@ 0xbc
 8011c2c:	d918      	bls.n	8011c60 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	8a9b      	ldrh	r3, [r3, #20]
 8011c32:	461a      	mov	r2, r3
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	69da      	ldr	r2, [r3, #28]
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	68db      	ldr	r3, [r3, #12]
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d003      	beq.n	8011c50 <USB_HC_StartXfer+0xdc>
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	2b02      	cmp	r3, #2
 8011c4e:	d103      	bne.n	8011c58 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	2202      	movs	r2, #2
 8011c54:	60da      	str	r2, [r3, #12]
 8011c56:	e05f      	b.n	8011d18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	60da      	str	r2, [r3, #12]
 8011c5e:	e05b      	b.n	8011d18 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	6a1a      	ldr	r2, [r3, #32]
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d007      	beq.n	8011c80 <USB_HC_StartXfer+0x10c>
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	68db      	ldr	r3, [r3, #12]
 8011c74:	2b02      	cmp	r3, #2
 8011c76:	d003      	beq.n	8011c80 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	2204      	movs	r2, #4
 8011c7c:	60da      	str	r2, [r3, #12]
 8011c7e:	e04b      	b.n	8011d18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	2203      	movs	r2, #3
 8011c84:	60da      	str	r2, [r3, #12]
 8011c86:	e047      	b.n	8011d18 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8011c88:	79fb      	ldrb	r3, [r7, #7]
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d10d      	bne.n	8011caa <USB_HC_StartXfer+0x136>
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	6a1b      	ldr	r3, [r3, #32]
 8011c92:	68ba      	ldr	r2, [r7, #8]
 8011c94:	8a92      	ldrh	r2, [r2, #20]
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d907      	bls.n	8011caa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011c9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	8a92      	ldrh	r2, [r2, #20]
 8011ca0:	fb03 f202 	mul.w	r2, r3, r2
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	61da      	str	r2, [r3, #28]
 8011ca8:	e036      	b.n	8011d18 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	6a1a      	ldr	r2, [r3, #32]
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	61da      	str	r2, [r3, #28]
 8011cb2:	e031      	b.n	8011d18 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	6a1b      	ldr	r3, [r3, #32]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d018      	beq.n	8011cee <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	6a1b      	ldr	r3, [r3, #32]
 8011cc0:	68ba      	ldr	r2, [r7, #8]
 8011cc2:	8a92      	ldrh	r2, [r2, #20]
 8011cc4:	4413      	add	r3, r2
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	8a92      	ldrh	r2, [r2, #20]
 8011ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cd0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8011cd2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011cd4:	8b7b      	ldrh	r3, [r7, #26]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d90b      	bls.n	8011cf2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8011cda:	8b7b      	ldrh	r3, [r7, #26]
 8011cdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011cde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011ce0:	68ba      	ldr	r2, [r7, #8]
 8011ce2:	8a92      	ldrh	r2, [r2, #20]
 8011ce4:	fb03 f202 	mul.w	r2, r3, r2
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	61da      	str	r2, [r3, #28]
 8011cec:	e001      	b.n	8011cf2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8011cee:	2301      	movs	r3, #1
 8011cf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	78db      	ldrb	r3, [r3, #3]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d00a      	beq.n	8011d10 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011cfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	8a92      	ldrh	r2, [r2, #20]
 8011d00:	fb03 f202 	mul.w	r2, r3, r2
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	61da      	str	r2, [r3, #28]
 8011d08:	e006      	b.n	8011d18 <USB_HC_StartXfer+0x1a4>
 8011d0a:	bf00      	nop
 8011d0c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	6a1a      	ldr	r2, [r3, #32]
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	69db      	ldr	r3, [r3, #28]
 8011d1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011d20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011d22:	04d9      	lsls	r1, r3, #19
 8011d24:	4ba3      	ldr	r3, [pc, #652]	@ (8011fb4 <USB_HC_StartXfer+0x440>)
 8011d26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011d28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	7d9b      	ldrb	r3, [r3, #22]
 8011d2e:	075b      	lsls	r3, r3, #29
 8011d30:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011d34:	69f9      	ldr	r1, [r7, #28]
 8011d36:	0148      	lsls	r0, r1, #5
 8011d38:	6a39      	ldr	r1, [r7, #32]
 8011d3a:	4401      	add	r1, r0
 8011d3c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011d40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011d42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8011d44:	79fb      	ldrb	r3, [r7, #7]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d009      	beq.n	8011d5e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	6999      	ldr	r1, [r3, #24]
 8011d4e:	69fb      	ldr	r3, [r7, #28]
 8011d50:	015a      	lsls	r2, r3, #5
 8011d52:	6a3b      	ldr	r3, [r7, #32]
 8011d54:	4413      	add	r3, r2
 8011d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d5a:	460a      	mov	r2, r1
 8011d5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8011d5e:	6a3b      	ldr	r3, [r7, #32]
 8011d60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011d64:	689b      	ldr	r3, [r3, #8]
 8011d66:	f003 0301 	and.w	r3, r3, #1
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	bf0c      	ite	eq
 8011d6e:	2301      	moveq	r3, #1
 8011d70:	2300      	movne	r3, #0
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	015a      	lsls	r2, r3, #5
 8011d7a:	6a3b      	ldr	r3, [r7, #32]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	69fa      	ldr	r2, [r7, #28]
 8011d86:	0151      	lsls	r1, r2, #5
 8011d88:	6a3a      	ldr	r2, [r7, #32]
 8011d8a:	440a      	add	r2, r1
 8011d8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011d90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011d94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	015a      	lsls	r2, r3, #5
 8011d9a:	6a3b      	ldr	r3, [r7, #32]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	7e7b      	ldrb	r3, [r7, #25]
 8011da6:	075b      	lsls	r3, r3, #29
 8011da8:	69f9      	ldr	r1, [r7, #28]
 8011daa:	0148      	lsls	r0, r1, #5
 8011dac:	6a39      	ldr	r1, [r7, #32]
 8011dae:	4401      	add	r1, r0
 8011db0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8011db4:	4313      	orrs	r3, r2
 8011db6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	799b      	ldrb	r3, [r3, #6]
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	f040 80c3 	bne.w	8011f48 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	7c5b      	ldrb	r3, [r3, #17]
 8011dc6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	69fa      	ldr	r2, [r7, #28]
 8011dd0:	0151      	lsls	r1, r2, #5
 8011dd2:	6a3a      	ldr	r2, [r7, #32]
 8011dd4:	440a      	add	r2, r1
 8011dd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8011dda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011dde:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8011de0:	69fb      	ldr	r3, [r7, #28]
 8011de2:	015a      	lsls	r2, r3, #5
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	4413      	add	r3, r2
 8011de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	69fa      	ldr	r2, [r7, #28]
 8011df0:	0151      	lsls	r1, r2, #5
 8011df2:	6a3a      	ldr	r2, [r7, #32]
 8011df4:	440a      	add	r2, r1
 8011df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011dfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011dfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	79db      	ldrb	r3, [r3, #7]
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d123      	bne.n	8011e50 <USB_HC_StartXfer+0x2dc>
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	78db      	ldrb	r3, [r3, #3]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d11f      	bne.n	8011e50 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	015a      	lsls	r2, r3, #5
 8011e14:	6a3b      	ldr	r3, [r7, #32]
 8011e16:	4413      	add	r3, r2
 8011e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	69fa      	ldr	r2, [r7, #28]
 8011e20:	0151      	lsls	r1, r2, #5
 8011e22:	6a3a      	ldr	r2, [r7, #32]
 8011e24:	440a      	add	r2, r1
 8011e26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011e2e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	015a      	lsls	r2, r3, #5
 8011e34:	6a3b      	ldr	r3, [r7, #32]
 8011e36:	4413      	add	r3, r2
 8011e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e3c:	68db      	ldr	r3, [r3, #12]
 8011e3e:	69fa      	ldr	r2, [r7, #28]
 8011e40:	0151      	lsls	r1, r2, #5
 8011e42:	6a3a      	ldr	r2, [r7, #32]
 8011e44:	440a      	add	r2, r1
 8011e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e4e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	7c9b      	ldrb	r3, [r3, #18]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d003      	beq.n	8011e60 <USB_HC_StartXfer+0x2ec>
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	7c9b      	ldrb	r3, [r3, #18]
 8011e5c:	2b03      	cmp	r3, #3
 8011e5e:	d117      	bne.n	8011e90 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d113      	bne.n	8011e90 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	78db      	ldrb	r3, [r3, #3]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d10f      	bne.n	8011e90 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8011e70:	69fb      	ldr	r3, [r7, #28]
 8011e72:	015a      	lsls	r2, r3, #5
 8011e74:	6a3b      	ldr	r3, [r7, #32]
 8011e76:	4413      	add	r3, r2
 8011e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	69fa      	ldr	r2, [r7, #28]
 8011e80:	0151      	lsls	r1, r2, #5
 8011e82:	6a3a      	ldr	r2, [r7, #32]
 8011e84:	440a      	add	r2, r1
 8011e86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011e8e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	7c9b      	ldrb	r3, [r3, #18]
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d162      	bne.n	8011f5e <USB_HC_StartXfer+0x3ea>
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	78db      	ldrb	r3, [r3, #3]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d15e      	bne.n	8011f5e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d858      	bhi.n	8011f5c <USB_HC_StartXfer+0x3e8>
 8011eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8011eb0 <USB_HC_StartXfer+0x33c>)
 8011eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb0:	08011ec1 	.word	0x08011ec1
 8011eb4:	08011ee3 	.word	0x08011ee3
 8011eb8:	08011f05 	.word	0x08011f05
 8011ebc:	08011f27 	.word	0x08011f27
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	015a      	lsls	r2, r3, #5
 8011ec4:	6a3b      	ldr	r3, [r7, #32]
 8011ec6:	4413      	add	r3, r2
 8011ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	69fa      	ldr	r2, [r7, #28]
 8011ed0:	0151      	lsls	r1, r2, #5
 8011ed2:	6a3a      	ldr	r2, [r7, #32]
 8011ed4:	440a      	add	r2, r1
 8011ed6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ede:	6053      	str	r3, [r2, #4]
          break;
 8011ee0:	e03d      	b.n	8011f5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	015a      	lsls	r2, r3, #5
 8011ee6:	6a3b      	ldr	r3, [r7, #32]
 8011ee8:	4413      	add	r3, r2
 8011eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	69fa      	ldr	r2, [r7, #28]
 8011ef2:	0151      	lsls	r1, r2, #5
 8011ef4:	6a3a      	ldr	r2, [r7, #32]
 8011ef6:	440a      	add	r2, r1
 8011ef8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011efc:	f043 030e 	orr.w	r3, r3, #14
 8011f00:	6053      	str	r3, [r2, #4]
          break;
 8011f02:	e02c      	b.n	8011f5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	015a      	lsls	r2, r3, #5
 8011f08:	6a3b      	ldr	r3, [r7, #32]
 8011f0a:	4413      	add	r3, r2
 8011f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	69fa      	ldr	r2, [r7, #28]
 8011f14:	0151      	lsls	r1, r2, #5
 8011f16:	6a3a      	ldr	r2, [r7, #32]
 8011f18:	440a      	add	r2, r1
 8011f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011f1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011f22:	6053      	str	r3, [r2, #4]
          break;
 8011f24:	e01b      	b.n	8011f5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	015a      	lsls	r2, r3, #5
 8011f2a:	6a3b      	ldr	r3, [r7, #32]
 8011f2c:	4413      	add	r3, r2
 8011f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	69fa      	ldr	r2, [r7, #28]
 8011f36:	0151      	lsls	r1, r2, #5
 8011f38:	6a3a      	ldr	r2, [r7, #32]
 8011f3a:	440a      	add	r2, r1
 8011f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011f40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011f44:	6053      	str	r3, [r2, #4]
          break;
 8011f46:	e00a      	b.n	8011f5e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	015a      	lsls	r2, r3, #5
 8011f4c:	6a3b      	ldr	r3, [r7, #32]
 8011f4e:	4413      	add	r3, r2
 8011f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f54:	461a      	mov	r2, r3
 8011f56:	2300      	movs	r3, #0
 8011f58:	6053      	str	r3, [r2, #4]
 8011f5a:	e000      	b.n	8011f5e <USB_HC_StartXfer+0x3ea>
          break;
 8011f5c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011f5e:	69fb      	ldr	r3, [r7, #28]
 8011f60:	015a      	lsls	r2, r3, #5
 8011f62:	6a3b      	ldr	r3, [r7, #32]
 8011f64:	4413      	add	r3, r2
 8011f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011f74:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	78db      	ldrb	r3, [r3, #3]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d004      	beq.n	8011f88 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f84:	613b      	str	r3, [r7, #16]
 8011f86:	e003      	b.n	8011f90 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011f8e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011f96:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	015a      	lsls	r2, r3, #5
 8011f9c:	6a3b      	ldr	r3, [r7, #32]
 8011f9e:	4413      	add	r3, r2
 8011fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8011faa:	79fb      	ldrb	r3, [r7, #7]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d003      	beq.n	8011fb8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	e055      	b.n	8012060 <USB_HC_StartXfer+0x4ec>
 8011fb4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	78db      	ldrb	r3, [r3, #3]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d14e      	bne.n	801205e <USB_HC_StartXfer+0x4ea>
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	6a1b      	ldr	r3, [r3, #32]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d04a      	beq.n	801205e <USB_HC_StartXfer+0x4ea>
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	79db      	ldrb	r3, [r3, #7]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d146      	bne.n	801205e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	7c9b      	ldrb	r3, [r3, #18]
 8011fd4:	2b03      	cmp	r3, #3
 8011fd6:	d831      	bhi.n	801203c <USB_HC_StartXfer+0x4c8>
 8011fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8011fe0 <USB_HC_StartXfer+0x46c>)
 8011fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fde:	bf00      	nop
 8011fe0:	08011ff1 	.word	0x08011ff1
 8011fe4:	08012015 	.word	0x08012015
 8011fe8:	08011ff1 	.word	0x08011ff1
 8011fec:	08012015 	.word	0x08012015
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	6a1b      	ldr	r3, [r3, #32]
 8011ff4:	3303      	adds	r3, #3
 8011ff6:	089b      	lsrs	r3, r3, #2
 8011ff8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8011ffa:	8afa      	ldrh	r2, [r7, #22]
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012000:	b29b      	uxth	r3, r3
 8012002:	429a      	cmp	r2, r3
 8012004:	d91c      	bls.n	8012040 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	699b      	ldr	r3, [r3, #24]
 801200a:	f043 0220 	orr.w	r2, r3, #32
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	619a      	str	r2, [r3, #24]
        }
        break;
 8012012:	e015      	b.n	8012040 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	6a1b      	ldr	r3, [r3, #32]
 8012018:	3303      	adds	r3, #3
 801201a:	089b      	lsrs	r3, r3, #2
 801201c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801201e:	8afa      	ldrh	r2, [r7, #22]
 8012020:	6a3b      	ldr	r3, [r7, #32]
 8012022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012026:	691b      	ldr	r3, [r3, #16]
 8012028:	b29b      	uxth	r3, r3
 801202a:	429a      	cmp	r2, r3
 801202c:	d90a      	bls.n	8012044 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	699b      	ldr	r3, [r3, #24]
 8012032:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	619a      	str	r2, [r3, #24]
        }
        break;
 801203a:	e003      	b.n	8012044 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 801203c:	bf00      	nop
 801203e:	e002      	b.n	8012046 <USB_HC_StartXfer+0x4d2>
        break;
 8012040:	bf00      	nop
 8012042:	e000      	b.n	8012046 <USB_HC_StartXfer+0x4d2>
        break;
 8012044:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	6999      	ldr	r1, [r3, #24]
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	785a      	ldrb	r2, [r3, #1]
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	6a1b      	ldr	r3, [r3, #32]
 8012052:	b29b      	uxth	r3, r3
 8012054:	2000      	movs	r0, #0
 8012056:	9000      	str	r0, [sp, #0]
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f7ff f9cf 	bl	80113fc <USB_WritePacket>
  }

  return HAL_OK;
 801205e:	2300      	movs	r3, #0
}
 8012060:	4618      	mov	r0, r3
 8012062:	3728      	adds	r7, #40	@ 0x28
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012068:	b480      	push	{r7}
 801206a:	b085      	sub	sp, #20
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801207a:	695b      	ldr	r3, [r3, #20]
 801207c:	b29b      	uxth	r3, r3
}
 801207e:	4618      	mov	r0, r3
 8012080:	3714      	adds	r7, #20
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr

0801208a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801208a:	b480      	push	{r7}
 801208c:	b089      	sub	sp, #36	@ 0x24
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	460b      	mov	r3, r1
 8012094:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801209a:	78fb      	ldrb	r3, [r7, #3]
 801209c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801209e:	2300      	movs	r3, #0
 80120a0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80120a2:	69bb      	ldr	r3, [r7, #24]
 80120a4:	015a      	lsls	r2, r3, #5
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	4413      	add	r3, r2
 80120aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	0c9b      	lsrs	r3, r3, #18
 80120b2:	f003 0303 	and.w	r3, r3, #3
 80120b6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	015a      	lsls	r2, r3, #5
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	4413      	add	r3, r2
 80120c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	0fdb      	lsrs	r3, r3, #31
 80120c8:	f003 0301 	and.w	r3, r3, #1
 80120cc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	015a      	lsls	r2, r3, #5
 80120d2:	69fb      	ldr	r3, [r7, #28]
 80120d4:	4413      	add	r3, r2
 80120d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	0fdb      	lsrs	r3, r3, #31
 80120de:	f003 0301 	and.w	r3, r3, #1
 80120e2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	689b      	ldr	r3, [r3, #8]
 80120e8:	f003 0320 	and.w	r3, r3, #32
 80120ec:	2b20      	cmp	r3, #32
 80120ee:	d10d      	bne.n	801210c <USB_HC_Halt+0x82>
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d10a      	bne.n	801210c <USB_HC_Halt+0x82>
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d005      	beq.n	8012108 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	2b01      	cmp	r3, #1
 8012100:	d002      	beq.n	8012108 <USB_HC_Halt+0x7e>
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	2b03      	cmp	r3, #3
 8012106:	d101      	bne.n	801210c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8012108:	2300      	movs	r3, #0
 801210a:	e0d8      	b.n	80122be <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d002      	beq.n	8012118 <USB_HC_Halt+0x8e>
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	2b02      	cmp	r3, #2
 8012116:	d173      	bne.n	8012200 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	015a      	lsls	r2, r3, #5
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	4413      	add	r3, r2
 8012120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	69ba      	ldr	r2, [r7, #24]
 8012128:	0151      	lsls	r1, r2, #5
 801212a:	69fa      	ldr	r2, [r7, #28]
 801212c:	440a      	add	r2, r1
 801212e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012132:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012136:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	689b      	ldr	r3, [r3, #8]
 801213c:	f003 0320 	and.w	r3, r3, #32
 8012140:	2b00      	cmp	r3, #0
 8012142:	d14a      	bne.n	80121da <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012148:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801214c:	2b00      	cmp	r3, #0
 801214e:	d133      	bne.n	80121b8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012150:	69bb      	ldr	r3, [r7, #24]
 8012152:	015a      	lsls	r2, r3, #5
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	4413      	add	r3, r2
 8012158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	69ba      	ldr	r2, [r7, #24]
 8012160:	0151      	lsls	r1, r2, #5
 8012162:	69fa      	ldr	r2, [r7, #28]
 8012164:	440a      	add	r2, r1
 8012166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801216a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801216e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	015a      	lsls	r2, r3, #5
 8012174:	69fb      	ldr	r3, [r7, #28]
 8012176:	4413      	add	r3, r2
 8012178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	69ba      	ldr	r2, [r7, #24]
 8012180:	0151      	lsls	r1, r2, #5
 8012182:	69fa      	ldr	r2, [r7, #28]
 8012184:	440a      	add	r2, r1
 8012186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801218a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801218e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	3301      	adds	r3, #1
 8012194:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801219c:	d82e      	bhi.n	80121fc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	015a      	lsls	r2, r3, #5
 80121a2:	69fb      	ldr	r3, [r7, #28]
 80121a4:	4413      	add	r3, r2
 80121a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80121b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80121b4:	d0ec      	beq.n	8012190 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80121b6:	e081      	b.n	80122bc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	015a      	lsls	r2, r3, #5
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	4413      	add	r3, r2
 80121c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	69ba      	ldr	r2, [r7, #24]
 80121c8:	0151      	lsls	r1, r2, #5
 80121ca:	69fa      	ldr	r2, [r7, #28]
 80121cc:	440a      	add	r2, r1
 80121ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80121d6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80121d8:	e070      	b.n	80122bc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	015a      	lsls	r2, r3, #5
 80121de:	69fb      	ldr	r3, [r7, #28]
 80121e0:	4413      	add	r3, r2
 80121e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	69ba      	ldr	r2, [r7, #24]
 80121ea:	0151      	lsls	r1, r2, #5
 80121ec:	69fa      	ldr	r2, [r7, #28]
 80121ee:	440a      	add	r2, r1
 80121f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80121f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80121fa:	e05f      	b.n	80122bc <USB_HC_Halt+0x232>
            break;
 80121fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80121fe:	e05d      	b.n	80122bc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012200:	69bb      	ldr	r3, [r7, #24]
 8012202:	015a      	lsls	r2, r3, #5
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	4413      	add	r3, r2
 8012208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	69ba      	ldr	r2, [r7, #24]
 8012210:	0151      	lsls	r1, r2, #5
 8012212:	69fa      	ldr	r2, [r7, #28]
 8012214:	440a      	add	r2, r1
 8012216:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801221a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801221e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012226:	691b      	ldr	r3, [r3, #16]
 8012228:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801222c:	2b00      	cmp	r3, #0
 801222e:	d133      	bne.n	8012298 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	015a      	lsls	r2, r3, #5
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	4413      	add	r3, r2
 8012238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	69ba      	ldr	r2, [r7, #24]
 8012240:	0151      	lsls	r1, r2, #5
 8012242:	69fa      	ldr	r2, [r7, #28]
 8012244:	440a      	add	r2, r1
 8012246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801224a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801224e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	015a      	lsls	r2, r3, #5
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	4413      	add	r3, r2
 8012258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	69ba      	ldr	r2, [r7, #24]
 8012260:	0151      	lsls	r1, r2, #5
 8012262:	69fa      	ldr	r2, [r7, #28]
 8012264:	440a      	add	r2, r1
 8012266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801226a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801226e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	3301      	adds	r3, #1
 8012274:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801227c:	d81d      	bhi.n	80122ba <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801227e:	69bb      	ldr	r3, [r7, #24]
 8012280:	015a      	lsls	r2, r3, #5
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	4413      	add	r3, r2
 8012286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012294:	d0ec      	beq.n	8012270 <USB_HC_Halt+0x1e6>
 8012296:	e011      	b.n	80122bc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	015a      	lsls	r2, r3, #5
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	4413      	add	r3, r2
 80122a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	69ba      	ldr	r2, [r7, #24]
 80122a8:	0151      	lsls	r1, r2, #5
 80122aa:	69fa      	ldr	r2, [r7, #28]
 80122ac:	440a      	add	r2, r1
 80122ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80122b6:	6013      	str	r3, [r2, #0]
 80122b8:	e000      	b.n	80122bc <USB_HC_Halt+0x232>
          break;
 80122ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80122bc:	2300      	movs	r3, #0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3724      	adds	r7, #36	@ 0x24
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr
	...

080122cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b087      	sub	sp, #28
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	460b      	mov	r3, r1
 80122d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80122dc:	78fb      	ldrb	r3, [r7, #3]
 80122de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80122e0:	2301      	movs	r3, #1
 80122e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	04da      	lsls	r2, r3, #19
 80122e8:	4b15      	ldr	r3, [pc, #84]	@ (8012340 <USB_DoPing+0x74>)
 80122ea:	4013      	ands	r3, r2
 80122ec:	693a      	ldr	r2, [r7, #16]
 80122ee:	0151      	lsls	r1, r2, #5
 80122f0:	697a      	ldr	r2, [r7, #20]
 80122f2:	440a      	add	r2, r1
 80122f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80122fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	015a      	lsls	r2, r3, #5
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	4413      	add	r3, r2
 8012306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012314:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801231c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	015a      	lsls	r2, r3, #5
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	4413      	add	r3, r2
 8012326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801232a:	461a      	mov	r2, r3
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012330:	2300      	movs	r3, #0
}
 8012332:	4618      	mov	r0, r3
 8012334:	371c      	adds	r7, #28
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr
 801233e:	bf00      	nop
 8012340:	1ff80000 	.word	0x1ff80000

08012344 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b088      	sub	sp, #32
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 801234c:	2300      	movs	r3, #0
 801234e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8012354:	2300      	movs	r3, #0
 8012356:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f7fe ff92 	bl	8011282 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801235e:	2110      	movs	r1, #16
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7fe ffeb 	bl	801133c <USB_FlushTxFifo>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d001      	beq.n	8012370 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 801236c:	2301      	movs	r3, #1
 801236e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7ff f815 	bl	80113a0 <USB_FlushRxFifo>
 8012376:	4603      	mov	r3, r0
 8012378:	2b00      	cmp	r3, #0
 801237a:	d001      	beq.n	8012380 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 801237c:	2301      	movs	r3, #1
 801237e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012380:	2300      	movs	r3, #0
 8012382:	61bb      	str	r3, [r7, #24]
 8012384:	e01f      	b.n	80123c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8012386:	69bb      	ldr	r3, [r7, #24]
 8012388:	015a      	lsls	r2, r3, #5
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	4413      	add	r3, r2
 801238e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801239c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80123a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80123ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	015a      	lsls	r2, r3, #5
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	4413      	add	r3, r2
 80123b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80123ba:	461a      	mov	r2, r3
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80123c0:	69bb      	ldr	r3, [r7, #24]
 80123c2:	3301      	adds	r3, #1
 80123c4:	61bb      	str	r3, [r7, #24]
 80123c6:	69bb      	ldr	r3, [r7, #24]
 80123c8:	2b0f      	cmp	r3, #15
 80123ca:	d9dc      	bls.n	8012386 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80123cc:	2300      	movs	r3, #0
 80123ce:	61bb      	str	r3, [r7, #24]
 80123d0:	e034      	b.n	801243c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80123d2:	69bb      	ldr	r3, [r7, #24]
 80123d4:	015a      	lsls	r2, r3, #5
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	4413      	add	r3, r2
 80123da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80123e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80123f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80123f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80123fa:	69bb      	ldr	r3, [r7, #24]
 80123fc:	015a      	lsls	r2, r3, #5
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	4413      	add	r3, r2
 8012402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012406:	461a      	mov	r2, r3
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	3301      	adds	r3, #1
 8012410:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012418:	d80c      	bhi.n	8012434 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801241a:	69bb      	ldr	r3, [r7, #24]
 801241c:	015a      	lsls	r2, r3, #5
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	4413      	add	r3, r2
 8012422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801242c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012430:	d0ec      	beq.n	801240c <USB_StopHost+0xc8>
 8012432:	e000      	b.n	8012436 <USB_StopHost+0xf2>
        break;
 8012434:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	3301      	adds	r3, #1
 801243a:	61bb      	str	r3, [r7, #24]
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	2b0f      	cmp	r3, #15
 8012440:	d9c7      	bls.n	80123d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012448:	461a      	mov	r2, r3
 801244a:	f04f 33ff 	mov.w	r3, #4294967295
 801244e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f04f 32ff 	mov.w	r2, #4294967295
 8012456:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7fe ff01 	bl	8011260 <USB_EnableGlobalInt>

  return ret;
 801245e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012460:	4618      	mov	r0, r3
 8012462:	3720      	adds	r7, #32
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801246c:	4904      	ldr	r1, [pc, #16]	@ (8012480 <MX_FATFS_Init+0x18>)
 801246e:	4805      	ldr	r0, [pc, #20]	@ (8012484 <MX_FATFS_Init+0x1c>)
 8012470:	f005 fbca 	bl	8017c08 <FATFS_LinkDriver>
 8012474:	4603      	mov	r3, r0
 8012476:	461a      	mov	r2, r3
 8012478:	4b03      	ldr	r3, [pc, #12]	@ (8012488 <MX_FATFS_Init+0x20>)
 801247a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801247c:	bf00      	nop
 801247e:	bd80      	pop	{r7, pc}
 8012480:	200021a4 	.word	0x200021a4
 8012484:	0801ed04 	.word	0x0801ed04
 8012488:	200021a0 	.word	0x200021a0

0801248c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801248c:	b480      	push	{r7}
 801248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012490:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012492:	4618      	mov	r0, r3
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr

0801249c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b086      	sub	sp, #24
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80124a8:	2300      	movs	r3, #0
 80124aa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	68ba      	ldr	r2, [r7, #8]
 80124b0:	68f9      	ldr	r1, [r7, #12]
 80124b2:	4806      	ldr	r0, [pc, #24]	@ (80124cc <BSP_SD_ReadBlocks_DMA+0x30>)
 80124b4:	f7fa fc96 	bl	800cde4 <HAL_SD_ReadBlocks_DMA>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d001      	beq.n	80124c2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80124be:	2301      	movs	r3, #1
 80124c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80124c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3718      	adds	r7, #24
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	20001478 	.word	0x20001478

080124d0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80124dc:	2300      	movs	r3, #0
 80124de:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	68f9      	ldr	r1, [r7, #12]
 80124e6:	4806      	ldr	r0, [pc, #24]	@ (8012500 <BSP_SD_WriteBlocks_DMA+0x30>)
 80124e8:	f7fa fd5e 	bl	800cfa8 <HAL_SD_WriteBlocks_DMA>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d001      	beq.n	80124f6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80124f2:	2301      	movs	r3, #1
 80124f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80124f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3718      	adds	r7, #24
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	20001478 	.word	0x20001478

08012504 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012508:	4805      	ldr	r0, [pc, #20]	@ (8012520 <BSP_SD_GetCardState+0x1c>)
 801250a:	f7fb f80d 	bl	800d528 <HAL_SD_GetCardState>
 801250e:	4603      	mov	r3, r0
 8012510:	2b04      	cmp	r3, #4
 8012512:	bf14      	ite	ne
 8012514:	2301      	movne	r3, #1
 8012516:	2300      	moveq	r3, #0
 8012518:	b2db      	uxtb	r3, r3
}
 801251a:	4618      	mov	r0, r3
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	20001478 	.word	0x20001478

08012524 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801252c:	6879      	ldr	r1, [r7, #4]
 801252e:	4803      	ldr	r0, [pc, #12]	@ (801253c <BSP_SD_GetCardInfo+0x18>)
 8012530:	f7fa ffce 	bl	800d4d0 <HAL_SD_GetCardInfo>
}
 8012534:	bf00      	nop
 8012536:	3708      	adds	r7, #8
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	20001478 	.word	0x20001478

08012540 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b082      	sub	sp, #8
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012548:	f000 f9f4 	bl	8012934 <BSP_SD_ReadCpltCallback>
}
 801254c:	bf00      	nop
 801254e:	3708      	adds	r7, #8
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 801255c:	f005 fbec 	bl	8017d38 <osKernelSysTick>
 8012560:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8012562:	e006      	b.n	8012572 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012564:	f7ff ffce 	bl	8012504 <BSP_SD_GetCardState>
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d101      	bne.n	8012572 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801256e:	2300      	movs	r3, #0
 8012570:	e009      	b.n	8012586 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8012572:	f005 fbe1 	bl	8017d38 <osKernelSysTick>
 8012576:	4602      	mov	r2, r0
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	1ad3      	subs	r3, r2, r3
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	429a      	cmp	r2, r3
 8012580:	d8f0      	bhi.n	8012564 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012586:	4618      	mov	r0, r3
 8012588:	3710      	adds	r7, #16
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
	...

08012590 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	4603      	mov	r3, r0
 8012598:	71fb      	strb	r3, [r7, #7]
  // HAL 기반 카드 상태 확인 (BSP 우회)
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 801259a:	4813      	ldr	r0, [pc, #76]	@ (80125e8 <SD_CheckStatus+0x58>)
 801259c:	f7fa ffc4 	bl	800d528 <HAL_SD_GetCardState>
 80125a0:	60f8      	str	r0, [r7, #12]
  
  LOG_INFO("[sd_diskio] HAL_SD_GetCardState: %d", cardState);
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	4911      	ldr	r1, [pc, #68]	@ (80125ec <SD_CheckStatus+0x5c>)
 80125a6:	2001      	movs	r0, #1
 80125a8:	f7f2 fb12 	bl	8004bd0 <LOGGER_SendFormatted>
  
  if(cardState == HAL_SD_CARD_TRANSFER)
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2b04      	cmp	r3, #4
 80125b0:	d107      	bne.n	80125c2 <SD_CheckStatus+0x32>
  {
    // 카드가 TRANSFER 상태이면 초기화 완료로 간주
    Stat = 0;  // 모든 에러 플래그 클리어
 80125b2:	4b0f      	ldr	r3, [pc, #60]	@ (80125f0 <SD_CheckStatus+0x60>)
 80125b4:	2200      	movs	r2, #0
 80125b6:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[sd_diskio] SD card status: READY (0x00)");
 80125b8:	490e      	ldr	r1, [pc, #56]	@ (80125f4 <SD_CheckStatus+0x64>)
 80125ba:	2001      	movs	r0, #1
 80125bc:	f7f2 fb08 	bl	8004bd0 <LOGGER_SendFormatted>
 80125c0:	e00a      	b.n	80125d8 <SD_CheckStatus+0x48>
  }
  else
  {
    // 카드가 준비되지 않은 상태
    Stat = STA_NOINIT;
 80125c2:	4b0b      	ldr	r3, [pc, #44]	@ (80125f0 <SD_CheckStatus+0x60>)
 80125c4:	2201      	movs	r2, #1
 80125c6:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[sd_diskio] SD card status: NOT_READY (0x%02X)", Stat);
 80125c8:	4b09      	ldr	r3, [pc, #36]	@ (80125f0 <SD_CheckStatus+0x60>)
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	461a      	mov	r2, r3
 80125d0:	4909      	ldr	r1, [pc, #36]	@ (80125f8 <SD_CheckStatus+0x68>)
 80125d2:	2002      	movs	r0, #2
 80125d4:	f7f2 fafc 	bl	8004bd0 <LOGGER_SendFormatted>
  }

  return Stat;
 80125d8:	4b05      	ldr	r3, [pc, #20]	@ (80125f0 <SD_CheckStatus+0x60>)
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	b2db      	uxtb	r3, r3
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3710      	adds	r7, #16
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	20001478 	.word	0x20001478
 80125ec:	0801e958 	.word	0x0801e958
 80125f0:	20000069 	.word	0x20000069
 80125f4:	0801e97c 	.word	0x0801e97c
 80125f8:	0801e9a8 	.word	0x0801e9a8

080125fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80125fc:	b590      	push	{r4, r7, lr}
 80125fe:	b089      	sub	sp, #36	@ 0x24
 8012600:	af00      	add	r7, sp, #0
 8012602:	4603      	mov	r3, r0
 8012604:	71fb      	strb	r3, [r7, #7]
  LOG_INFO("[sd_diskio] SD_initialize called");
 8012606:	493d      	ldr	r1, [pc, #244]	@ (80126fc <SD_initialize+0x100>)
 8012608:	2001      	movs	r0, #1
 801260a:	f7f2 fae1 	bl	8004bd0 <LOGGER_SendFormatted>
  
  // 초기 상태 설정
  Stat = STA_NOINIT;
 801260e:	4b3c      	ldr	r3, [pc, #240]	@ (8012700 <SD_initialize+0x104>)
 8012610:	2201      	movs	r2, #1
 8012612:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  int kernel_running = osKernelRunning();
 8012614:	f005 fb84 	bl	8017d20 <osKernelRunning>
 8012618:	61f8      	str	r0, [r7, #28]
  LOG_INFO("[sd_diskio] FreeRTOS kernel running check: %d", kernel_running);
 801261a:	69fa      	ldr	r2, [r7, #28]
 801261c:	4939      	ldr	r1, [pc, #228]	@ (8012704 <SD_initialize+0x108>)
 801261e:	2001      	movs	r0, #1
 8012620:	f7f2 fad6 	bl	8004bd0 <LOGGER_SendFormatted>
  if(kernel_running)
 8012624:	69fb      	ldr	r3, [r7, #28]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d055      	beq.n	80126d6 <SD_initialize+0xda>
  osKernelState_t kernel_state = osKernelGetState();
  LOG_INFO("[sd_diskio] FreeRTOS kernel state: %d (osKernelRunning=%d)", kernel_state, osKernelRunning);
  if(kernel_state == osKernelRunning)
#endif
  {
    LOG_INFO("[sd_diskio] FreeRTOS kernel is running - proceeding with SD check");
 801262a:	4937      	ldr	r1, [pc, #220]	@ (8012708 <SD_initialize+0x10c>)
 801262c:	2001      	movs	r0, #1
 801262e:	f7f2 facf 	bl	8004bd0 <LOGGER_SendFormatted>
    if(BSP_SD_Init() == MSD_OK)
    {
      Stat = SD_CheckStatus(lun);
    }
#else
    LOG_INFO("[sd_diskio] DISABLE_SD_INIT is active - using HAL-based check");
 8012632:	4936      	ldr	r1, [pc, #216]	@ (801270c <SD_initialize+0x110>)
 8012634:	2001      	movs	r0, #1
 8012636:	f7f2 facb 	bl	8004bd0 <LOGGER_SendFormatted>
    Stat = SD_CheckStatus(lun);
 801263a:	79fb      	ldrb	r3, [r7, #7]
 801263c:	4618      	mov	r0, r3
 801263e:	f7ff ffa7 	bl	8012590 <SD_CheckStatus>
 8012642:	4603      	mov	r3, r0
 8012644:	461a      	mov	r2, r3
 8012646:	4b2e      	ldr	r3, [pc, #184]	@ (8012700 <SD_initialize+0x104>)
 8012648:	701a      	strb	r2, [r3, #0]

    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */
    LOG_INFO("[sd_diskio] Final Stat after SD_CheckStatus: 0x%02X", Stat);
 801264a:	4b2d      	ldr	r3, [pc, #180]	@ (8012700 <SD_initialize+0x104>)
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	b2db      	uxtb	r3, r3
 8012650:	461a      	mov	r2, r3
 8012652:	492f      	ldr	r1, [pc, #188]	@ (8012710 <SD_initialize+0x114>)
 8012654:	2001      	movs	r0, #1
 8012656:	f7f2 fabb 	bl	8004bd0 <LOGGER_SendFormatted>

    if (Stat != STA_NOINIT)
 801265a:	4b29      	ldr	r3, [pc, #164]	@ (8012700 <SD_initialize+0x104>)
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	b2db      	uxtb	r3, r3
 8012660:	2b01      	cmp	r3, #1
 8012662:	d033      	beq.n	80126cc <SD_initialize+0xd0>
    {
      LOG_INFO("[sd_diskio] SD card ready - creating message queue...");
 8012664:	492b      	ldr	r1, [pc, #172]	@ (8012714 <SD_initialize+0x118>)
 8012666:	2001      	movs	r0, #1
 8012668:	f7f2 fab2 	bl	8004bd0 <LOGGER_SendFormatted>
      if (SDQueueID == NULL)
 801266c:	4b2a      	ldr	r3, [pc, #168]	@ (8012718 <SD_initialize+0x11c>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d115      	bne.n	80126a0 <SD_initialize+0xa4>
      {
 #if (osCMSIS <= 0x20000U)
        osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8012674:	4b29      	ldr	r3, [pc, #164]	@ (801271c <SD_initialize+0x120>)
 8012676:	f107 040c 	add.w	r4, r7, #12
 801267a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801267c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8012680:	f107 030c 	add.w	r3, r7, #12
 8012684:	2100      	movs	r1, #0
 8012686:	4618      	mov	r0, r3
 8012688:	f005 fc9d 	bl	8017fc6 <osMessageCreate>
 801268c:	4603      	mov	r3, r0
 801268e:	4a22      	ldr	r2, [pc, #136]	@ (8012718 <SD_initialize+0x11c>)
 8012690:	6013      	str	r3, [r2, #0]
#else
        SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
        LOG_INFO("[sd_diskio] Message queue created: %p", SDQueueID);
 8012692:	4b21      	ldr	r3, [pc, #132]	@ (8012718 <SD_initialize+0x11c>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	461a      	mov	r2, r3
 8012698:	4921      	ldr	r1, [pc, #132]	@ (8012720 <SD_initialize+0x124>)
 801269a:	2001      	movs	r0, #1
 801269c:	f7f2 fa98 	bl	8004bd0 <LOGGER_SendFormatted>
      }

      if (SDQueueID == NULL)
 80126a0:	4b1d      	ldr	r3, [pc, #116]	@ (8012718 <SD_initialize+0x11c>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d10c      	bne.n	80126c2 <SD_initialize+0xc6>
      {
        LOG_ERROR("[sd_diskio] Failed to create message queue");
 80126a8:	491e      	ldr	r1, [pc, #120]	@ (8012724 <SD_initialize+0x128>)
 80126aa:	2003      	movs	r0, #3
 80126ac:	f7f2 fa90 	bl	8004bd0 <LOGGER_SendFormatted>
        Stat |= STA_NOINIT;
 80126b0:	4b13      	ldr	r3, [pc, #76]	@ (8012700 <SD_initialize+0x104>)
 80126b2:	781b      	ldrb	r3, [r3, #0]
 80126b4:	b2db      	uxtb	r3, r3
 80126b6:	f043 0301 	orr.w	r3, r3, #1
 80126ba:	b2da      	uxtb	r2, r3
 80126bc:	4b10      	ldr	r3, [pc, #64]	@ (8012700 <SD_initialize+0x104>)
 80126be:	701a      	strb	r2, [r3, #0]
 80126c0:	e00d      	b.n	80126de <SD_initialize+0xe2>
      }
      else
      {
        LOG_INFO("[sd_diskio] SD initialization completed successfully");
 80126c2:	4919      	ldr	r1, [pc, #100]	@ (8012728 <SD_initialize+0x12c>)
 80126c4:	2001      	movs	r0, #1
 80126c6:	f7f2 fa83 	bl	8004bd0 <LOGGER_SendFormatted>
 80126ca:	e008      	b.n	80126de <SD_initialize+0xe2>
      }
    }
    else
    {
      LOG_WARN("[sd_diskio] SD card not ready - initialization failed");
 80126cc:	4917      	ldr	r1, [pc, #92]	@ (801272c <SD_initialize+0x130>)
 80126ce:	2002      	movs	r0, #2
 80126d0:	f7f2 fa7e 	bl	8004bd0 <LOGGER_SendFormatted>
 80126d4:	e003      	b.n	80126de <SD_initialize+0xe2>
    }
  }
  else
  {
    LOG_ERROR("[sd_diskio] FreeRTOS kernel not running - cannot initialize SD");
 80126d6:	4916      	ldr	r1, [pc, #88]	@ (8012730 <SD_initialize+0x134>)
 80126d8:	2003      	movs	r0, #3
 80126da:	f7f2 fa79 	bl	8004bd0 <LOGGER_SendFormatted>
  }

  LOG_INFO("[sd_diskio] SD_initialize returning: 0x%02X", Stat);
 80126de:	4b08      	ldr	r3, [pc, #32]	@ (8012700 <SD_initialize+0x104>)
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	b2db      	uxtb	r3, r3
 80126e4:	461a      	mov	r2, r3
 80126e6:	4913      	ldr	r1, [pc, #76]	@ (8012734 <SD_initialize+0x138>)
 80126e8:	2001      	movs	r0, #1
 80126ea:	f7f2 fa71 	bl	8004bd0 <LOGGER_SendFormatted>
  return Stat;
 80126ee:	4b04      	ldr	r3, [pc, #16]	@ (8012700 <SD_initialize+0x104>)
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	b2db      	uxtb	r3, r3

}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3724      	adds	r7, #36	@ 0x24
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd90      	pop	{r4, r7, pc}
 80126fc:	0801e9d8 	.word	0x0801e9d8
 8012700:	20000069 	.word	0x20000069
 8012704:	0801e9fc 	.word	0x0801e9fc
 8012708:	0801ea2c 	.word	0x0801ea2c
 801270c:	0801ea70 	.word	0x0801ea70
 8012710:	0801eab0 	.word	0x0801eab0
 8012714:	0801eae4 	.word	0x0801eae4
 8012718:	200023dc 	.word	0x200023dc
 801271c:	0801ec4c 	.word	0x0801ec4c
 8012720:	0801eb1c 	.word	0x0801eb1c
 8012724:	0801eb44 	.word	0x0801eb44
 8012728:	0801eb70 	.word	0x0801eb70
 801272c:	0801eba8 	.word	0x0801eba8
 8012730:	0801ebe0 	.word	0x0801ebe0
 8012734:	0801ec20 	.word	0x0801ec20

08012738 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	4603      	mov	r3, r0
 8012740:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012742:	79fb      	ldrb	r3, [r7, #7]
 8012744:	4618      	mov	r0, r3
 8012746:	f7ff ff23 	bl	8012590 <SD_CheckStatus>
 801274a:	4603      	mov	r3, r0
}
 801274c:	4618      	mov	r0, r3
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b08a      	sub	sp, #40	@ 0x28
 8012758:	af00      	add	r7, sp, #0
 801275a:	60b9      	str	r1, [r7, #8]
 801275c:	607a      	str	r2, [r7, #4]
 801275e:	603b      	str	r3, [r7, #0]
 8012760:	4603      	mov	r3, r0
 8012762:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8012764:	2301      	movs	r3, #1
 8012766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801276a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801276e:	f7ff fef1 	bl	8012554 <SD_CheckStatusWithTimeout>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	da02      	bge.n	801277e <SD_read+0x2a>
  {
    return res;
 8012778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801277c:	e032      	b.n	80127e4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801277e:	683a      	ldr	r2, [r7, #0]
 8012780:	6879      	ldr	r1, [r7, #4]
 8012782:	68b8      	ldr	r0, [r7, #8]
 8012784:	f7ff fe8a 	bl	801249c <BSP_SD_ReadBlocks_DMA>
 8012788:	4603      	mov	r3, r0
 801278a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 801278e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012792:	2b00      	cmp	r3, #0
 8012794:	d124      	bne.n	80127e0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012796:	4b15      	ldr	r3, [pc, #84]	@ (80127ec <SD_read+0x98>)
 8012798:	6819      	ldr	r1, [r3, #0]
 801279a:	f107 0314 	add.w	r3, r7, #20
 801279e:	f247 5230 	movw	r2, #30000	@ 0x7530
 80127a2:	4618      	mov	r0, r3
 80127a4:	f005 fc78 	bl	8018098 <osMessageGet>

    if (event.status == osEventMessage)
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	2b10      	cmp	r3, #16
 80127ac:	d118      	bne.n	80127e0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d115      	bne.n	80127e0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80127b4:	f005 fac0 	bl	8017d38 <osKernelSysTick>
 80127b8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80127ba:	e008      	b.n	80127ce <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80127bc:	f7ff fea2 	bl	8012504 <BSP_SD_GetCardState>
 80127c0:	4603      	mov	r3, r0
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d103      	bne.n	80127ce <SD_read+0x7a>
              {
                res = RES_OK;
 80127c6:	2300      	movs	r3, #0
 80127c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80127cc:	e008      	b.n	80127e0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80127ce:	f005 fab3 	bl	8017d38 <osKernelSysTick>
 80127d2:	4602      	mov	r2, r0
 80127d4:	6a3b      	ldr	r3, [r7, #32]
 80127d6:	1ad3      	subs	r3, r2, r3
 80127d8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80127dc:	4293      	cmp	r3, r2
 80127de:	d9ed      	bls.n	80127bc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80127e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3728      	adds	r7, #40	@ 0x28
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	200023dc 	.word	0x200023dc

080127f0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b08a      	sub	sp, #40	@ 0x28
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	60b9      	str	r1, [r7, #8]
 80127f8:	607a      	str	r2, [r7, #4]
 80127fa:	603b      	str	r3, [r7, #0]
 80127fc:	4603      	mov	r3, r0
 80127fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012800:	2301      	movs	r3, #1
 8012802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012806:	f247 5030 	movw	r0, #30000	@ 0x7530
 801280a:	f7ff fea3 	bl	8012554 <SD_CheckStatusWithTimeout>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	da02      	bge.n	801281a <SD_write+0x2a>
  {
    return res;
 8012814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012818:	e02e      	b.n	8012878 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801281a:	683a      	ldr	r2, [r7, #0]
 801281c:	6879      	ldr	r1, [r7, #4]
 801281e:	68b8      	ldr	r0, [r7, #8]
 8012820:	f7ff fe56 	bl	80124d0 <BSP_SD_WriteBlocks_DMA>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d124      	bne.n	8012874 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801282a:	4b15      	ldr	r3, [pc, #84]	@ (8012880 <SD_write+0x90>)
 801282c:	6819      	ldr	r1, [r3, #0]
 801282e:	f107 0314 	add.w	r3, r7, #20
 8012832:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012836:	4618      	mov	r0, r3
 8012838:	f005 fc2e 	bl	8018098 <osMessageGet>

    if (event.status == osEventMessage)
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	2b10      	cmp	r3, #16
 8012840:	d118      	bne.n	8012874 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	2b02      	cmp	r3, #2
 8012846:	d115      	bne.n	8012874 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8012848:	f005 fa76 	bl	8017d38 <osKernelSysTick>
 801284c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801284e:	e008      	b.n	8012862 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012850:	f7ff fe58 	bl	8012504 <BSP_SD_GetCardState>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d103      	bne.n	8012862 <SD_write+0x72>
          {
            res = RES_OK;
 801285a:	2300      	movs	r3, #0
 801285c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012860:	e008      	b.n	8012874 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012862:	f005 fa69 	bl	8017d38 <osKernelSysTick>
 8012866:	4602      	mov	r2, r0
 8012868:	6a3b      	ldr	r3, [r7, #32]
 801286a:	1ad3      	subs	r3, r2, r3
 801286c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8012870:	4293      	cmp	r3, r2
 8012872:	d9ed      	bls.n	8012850 <SD_write+0x60>
    }

  }
#endif

  return res;
 8012874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012878:	4618      	mov	r0, r3
 801287a:	3728      	adds	r7, #40	@ 0x28
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	200023dc 	.word	0x200023dc

08012884 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b08c      	sub	sp, #48	@ 0x30
 8012888:	af00      	add	r7, sp, #0
 801288a:	4603      	mov	r3, r0
 801288c:	603a      	str	r2, [r7, #0]
 801288e:	71fb      	strb	r3, [r7, #7]
 8012890:	460b      	mov	r3, r1
 8012892:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012894:	2301      	movs	r3, #1
 8012896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801289a:	4b25      	ldr	r3, [pc, #148]	@ (8012930 <SD_ioctl+0xac>)
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	b2db      	uxtb	r3, r3
 80128a0:	f003 0301 	and.w	r3, r3, #1
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d001      	beq.n	80128ac <SD_ioctl+0x28>
 80128a8:	2303      	movs	r3, #3
 80128aa:	e03c      	b.n	8012926 <SD_ioctl+0xa2>

  switch (cmd)
 80128ac:	79bb      	ldrb	r3, [r7, #6]
 80128ae:	2b03      	cmp	r3, #3
 80128b0:	d834      	bhi.n	801291c <SD_ioctl+0x98>
 80128b2:	a201      	add	r2, pc, #4	@ (adr r2, 80128b8 <SD_ioctl+0x34>)
 80128b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128b8:	080128c9 	.word	0x080128c9
 80128bc:	080128d1 	.word	0x080128d1
 80128c0:	080128e9 	.word	0x080128e9
 80128c4:	08012903 	.word	0x08012903
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80128c8:	2300      	movs	r3, #0
 80128ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80128ce:	e028      	b.n	8012922 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80128d0:	f107 030c 	add.w	r3, r7, #12
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7ff fe25 	bl	8012524 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80128da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80128e0:	2300      	movs	r3, #0
 80128e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80128e6:	e01c      	b.n	8012922 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80128e8:	f107 030c 	add.w	r3, r7, #12
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7ff fe19 	bl	8012524 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80128f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80128fa:	2300      	movs	r3, #0
 80128fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012900:	e00f      	b.n	8012922 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012902:	f107 030c 	add.w	r3, r7, #12
 8012906:	4618      	mov	r0, r3
 8012908:	f7ff fe0c 	bl	8012524 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801290e:	0a5a      	lsrs	r2, r3, #9
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012914:	2300      	movs	r3, #0
 8012916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801291a:	e002      	b.n	8012922 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801291c:	2304      	movs	r3, #4
 801291e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012926:	4618      	mov	r0, r3
 8012928:	3730      	adds	r7, #48	@ 0x30
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	20000069 	.word	0x20000069

08012934 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8012938:	4b04      	ldr	r3, [pc, #16]	@ (801294c <BSP_SD_ReadCpltCallback+0x18>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2200      	movs	r2, #0
 801293e:	2101      	movs	r1, #1
 8012940:	4618      	mov	r0, r3
 8012942:	f005 fb69 	bl	8018018 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8012946:	bf00      	nop
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	200023dc 	.word	0x200023dc

08012950 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8012950:	b590      	push	{r4, r7, lr}
 8012952:	b089      	sub	sp, #36	@ 0x24
 8012954:	af04      	add	r7, sp, #16
 8012956:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8012958:	2301      	movs	r3, #1
 801295a:	2202      	movs	r2, #2
 801295c:	2102      	movs	r1, #2
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f000 fcbd 	bl	80132de <USBH_FindInterface>
 8012964:	4603      	mov	r3, r0
 8012966:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012968:	7bfb      	ldrb	r3, [r7, #15]
 801296a:	2bff      	cmp	r3, #255	@ 0xff
 801296c:	d002      	beq.n	8012974 <USBH_CDC_InterfaceInit+0x24>
 801296e:	7bfb      	ldrb	r3, [r7, #15]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d901      	bls.n	8012978 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012974:	2302      	movs	r3, #2
 8012976:	e13d      	b.n	8012bf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8012978:	7bfb      	ldrb	r3, [r7, #15]
 801297a:	4619      	mov	r1, r3
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 fc92 	bl	80132a6 <USBH_SelectInterface>
 8012982:	4603      	mov	r3, r0
 8012984:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8012986:	7bbb      	ldrb	r3, [r7, #14]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801298c:	2302      	movs	r3, #2
 801298e:	e131      	b.n	8012bf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8012996:	2050      	movs	r0, #80	@ 0x50
 8012998:	f008 fcc4 	bl	801b324 <malloc>
 801299c:	4603      	mov	r3, r0
 801299e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80129a6:	69db      	ldr	r3, [r3, #28]
 80129a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d101      	bne.n	80129b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80129b0:	2302      	movs	r3, #2
 80129b2:	e11f      	b.n	8012bf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80129b4:	2250      	movs	r2, #80	@ 0x50
 80129b6:	2100      	movs	r1, #0
 80129b8:	68b8      	ldr	r0, [r7, #8]
 80129ba:	f008 fe15 	bl	801b5e8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80129be:	7bfb      	ldrb	r3, [r7, #15]
 80129c0:	687a      	ldr	r2, [r7, #4]
 80129c2:	211a      	movs	r1, #26
 80129c4:	fb01 f303 	mul.w	r3, r1, r3
 80129c8:	4413      	add	r3, r2
 80129ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	b25b      	sxtb	r3, r3
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	da15      	bge.n	8012a02 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80129d6:	7bfb      	ldrb	r3, [r7, #15]
 80129d8:	687a      	ldr	r2, [r7, #4]
 80129da:	211a      	movs	r1, #26
 80129dc:	fb01 f303 	mul.w	r3, r1, r3
 80129e0:	4413      	add	r3, r2
 80129e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80129e6:	781a      	ldrb	r2, [r3, #0]
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80129ec:	7bfb      	ldrb	r3, [r7, #15]
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	211a      	movs	r1, #26
 80129f2:	fb01 f303 	mul.w	r3, r1, r3
 80129f6:	4413      	add	r3, r2
 80129f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80129fc:	881a      	ldrh	r2, [r3, #0]
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	785b      	ldrb	r3, [r3, #1]
 8012a06:	4619      	mov	r1, r3
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f002 f90c 	bl	8014c26 <USBH_AllocPipe>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	461a      	mov	r2, r3
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	7819      	ldrb	r1, [r3, #0]
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	7858      	ldrb	r0, [r3, #1]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012a2a:	68ba      	ldr	r2, [r7, #8]
 8012a2c:	8952      	ldrh	r2, [r2, #10]
 8012a2e:	9202      	str	r2, [sp, #8]
 8012a30:	2203      	movs	r2, #3
 8012a32:	9201      	str	r2, [sp, #4]
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	4623      	mov	r3, r4
 8012a38:	4602      	mov	r2, r0
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f002 f8c4 	bl	8014bc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	2200      	movs	r2, #0
 8012a46:	4619      	mov	r1, r3
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f008 fbe5 	bl	801b218 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8012a4e:	2300      	movs	r3, #0
 8012a50:	2200      	movs	r2, #0
 8012a52:	210a      	movs	r1, #10
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f000 fc42 	bl	80132de <USBH_FindInterface>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012a5e:	7bfb      	ldrb	r3, [r7, #15]
 8012a60:	2bff      	cmp	r3, #255	@ 0xff
 8012a62:	d002      	beq.n	8012a6a <USBH_CDC_InterfaceInit+0x11a>
 8012a64:	7bfb      	ldrb	r3, [r7, #15]
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d901      	bls.n	8012a6e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012a6a:	2302      	movs	r3, #2
 8012a6c:	e0c2      	b.n	8012bf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8012a6e:	7bfb      	ldrb	r3, [r7, #15]
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	211a      	movs	r1, #26
 8012a74:	fb01 f303 	mul.w	r3, r1, r3
 8012a78:	4413      	add	r3, r2
 8012a7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	b25b      	sxtb	r3, r3
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	da16      	bge.n	8012ab4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012a86:	7bfb      	ldrb	r3, [r7, #15]
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	211a      	movs	r1, #26
 8012a8c:	fb01 f303 	mul.w	r3, r1, r3
 8012a90:	4413      	add	r3, r2
 8012a92:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012a96:	781a      	ldrb	r2, [r3, #0]
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	211a      	movs	r1, #26
 8012aa2:	fb01 f303 	mul.w	r3, r1, r3
 8012aa6:	4413      	add	r3, r2
 8012aa8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012aac:	881a      	ldrh	r2, [r3, #0]
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	835a      	strh	r2, [r3, #26]
 8012ab2:	e015      	b.n	8012ae0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012ab4:	7bfb      	ldrb	r3, [r7, #15]
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	211a      	movs	r1, #26
 8012aba:	fb01 f303 	mul.w	r3, r1, r3
 8012abe:	4413      	add	r3, r2
 8012ac0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012ac4:	781a      	ldrb	r2, [r3, #0]
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012aca:	7bfb      	ldrb	r3, [r7, #15]
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	211a      	movs	r1, #26
 8012ad0:	fb01 f303 	mul.w	r3, r1, r3
 8012ad4:	4413      	add	r3, r2
 8012ad6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012ada:	881a      	ldrh	r2, [r3, #0]
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8012ae0:	7bfb      	ldrb	r3, [r7, #15]
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	211a      	movs	r1, #26
 8012ae6:	fb01 f303 	mul.w	r3, r1, r3
 8012aea:	4413      	add	r3, r2
 8012aec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	b25b      	sxtb	r3, r3
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	da16      	bge.n	8012b26 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012af8:	7bfb      	ldrb	r3, [r7, #15]
 8012afa:	687a      	ldr	r2, [r7, #4]
 8012afc:	211a      	movs	r1, #26
 8012afe:	fb01 f303 	mul.w	r3, r1, r3
 8012b02:	4413      	add	r3, r2
 8012b04:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012b08:	781a      	ldrb	r2, [r3, #0]
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012b0e:	7bfb      	ldrb	r3, [r7, #15]
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	211a      	movs	r1, #26
 8012b14:	fb01 f303 	mul.w	r3, r1, r3
 8012b18:	4413      	add	r3, r2
 8012b1a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012b1e:	881a      	ldrh	r2, [r3, #0]
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	835a      	strh	r2, [r3, #26]
 8012b24:	e015      	b.n	8012b52 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012b26:	7bfb      	ldrb	r3, [r7, #15]
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	211a      	movs	r1, #26
 8012b2c:	fb01 f303 	mul.w	r3, r1, r3
 8012b30:	4413      	add	r3, r2
 8012b32:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012b36:	781a      	ldrb	r2, [r3, #0]
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012b3c:	7bfb      	ldrb	r3, [r7, #15]
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	211a      	movs	r1, #26
 8012b42:	fb01 f303 	mul.w	r3, r1, r3
 8012b46:	4413      	add	r3, r2
 8012b48:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012b4c:	881a      	ldrh	r2, [r3, #0]
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	7b9b      	ldrb	r3, [r3, #14]
 8012b56:	4619      	mov	r1, r3
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f002 f864 	bl	8014c26 <USBH_AllocPipe>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	461a      	mov	r2, r3
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	7bdb      	ldrb	r3, [r3, #15]
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f002 f85a 	bl	8014c26 <USBH_AllocPipe>
 8012b72:	4603      	mov	r3, r0
 8012b74:	461a      	mov	r2, r3
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	7b59      	ldrb	r1, [r3, #13]
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	7b98      	ldrb	r0, [r3, #14]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012b8e:	68ba      	ldr	r2, [r7, #8]
 8012b90:	8b12      	ldrh	r2, [r2, #24]
 8012b92:	9202      	str	r2, [sp, #8]
 8012b94:	2202      	movs	r2, #2
 8012b96:	9201      	str	r2, [sp, #4]
 8012b98:	9300      	str	r3, [sp, #0]
 8012b9a:	4623      	mov	r3, r4
 8012b9c:	4602      	mov	r2, r0
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f002 f812 	bl	8014bc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	7b19      	ldrb	r1, [r3, #12]
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	7bd8      	ldrb	r0, [r3, #15]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012bb8:	68ba      	ldr	r2, [r7, #8]
 8012bba:	8b52      	ldrh	r2, [r2, #26]
 8012bbc:	9202      	str	r2, [sp, #8]
 8012bbe:	2202      	movs	r2, #2
 8012bc0:	9201      	str	r2, [sp, #4]
 8012bc2:	9300      	str	r3, [sp, #0]
 8012bc4:	4623      	mov	r3, r4
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f001 fffd 	bl	8014bc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	7b5b      	ldrb	r3, [r3, #13]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	4619      	mov	r1, r3
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f008 fb1a 	bl	801b218 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	7b1b      	ldrb	r3, [r3, #12]
 8012be8:	2200      	movs	r2, #0
 8012bea:	4619      	mov	r1, r3
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f008 fb13 	bl	801b218 <USBH_LL_SetToggle>

  return USBH_OK;
 8012bf2:	2300      	movs	r3, #0
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd90      	pop	{r4, r7, pc}

08012bfc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012c0a:	69db      	ldr	r3, [r3, #28]
 8012c0c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d00e      	beq.n	8012c34 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f001 fff2 	bl	8014c06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	4619      	mov	r1, r3
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f002 f81d 	bl	8014c68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2200      	movs	r2, #0
 8012c32:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	7b1b      	ldrb	r3, [r3, #12]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00e      	beq.n	8012c5a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	7b1b      	ldrb	r3, [r3, #12]
 8012c40:	4619      	mov	r1, r3
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f001 ffdf 	bl	8014c06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	7b1b      	ldrb	r3, [r3, #12]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f002 f80a 	bl	8014c68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2200      	movs	r2, #0
 8012c58:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	7b5b      	ldrb	r3, [r3, #13]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d00e      	beq.n	8012c80 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	7b5b      	ldrb	r3, [r3, #13]
 8012c66:	4619      	mov	r1, r3
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f001 ffcc 	bl	8014c06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	7b5b      	ldrb	r3, [r3, #13]
 8012c72:	4619      	mov	r1, r3
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f001 fff7 	bl	8014c68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012c86:	69db      	ldr	r3, [r3, #28]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00b      	beq.n	8012ca4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012c92:	69db      	ldr	r3, [r3, #28]
 8012c94:	4618      	mov	r0, r3
 8012c96:	f008 fb4d 	bl	801b334 <free>
    phost->pActiveClass->pData = 0U;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8012ca4:	2300      	movs	r3, #0
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3710      	adds	r7, #16
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}

08012cae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8012cae:	b580      	push	{r7, lr}
 8012cb0:	b084      	sub	sp, #16
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012cbc:	69db      	ldr	r3, [r3, #28]
 8012cbe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	3340      	adds	r3, #64	@ 0x40
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f000 f8b1 	bl	8012e2e <GetLineCoding>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8012cd0:	7afb      	ldrb	r3, [r7, #11]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d105      	bne.n	8012ce2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012cdc:	2102      	movs	r1, #2
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8012ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3710      	adds	r7, #16
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}

08012cec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d02:	69db      	ldr	r3, [r3, #28]
 8012d04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8012d0c:	2b04      	cmp	r3, #4
 8012d0e:	d877      	bhi.n	8012e00 <USBH_CDC_Process+0x114>
 8012d10:	a201      	add	r2, pc, #4	@ (adr r2, 8012d18 <USBH_CDC_Process+0x2c>)
 8012d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d16:	bf00      	nop
 8012d18:	08012d2d 	.word	0x08012d2d
 8012d1c:	08012d33 	.word	0x08012d33
 8012d20:	08012d63 	.word	0x08012d63
 8012d24:	08012dd7 	.word	0x08012dd7
 8012d28:	08012de5 	.word	0x08012de5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8012d30:	e06d      	b.n	8012e0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d36:	4619      	mov	r1, r3
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 f897 	bl	8012e6c <SetLineCoding>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012d42:	7bbb      	ldrb	r3, [r7, #14]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d104      	bne.n	8012d52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	2202      	movs	r2, #2
 8012d4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012d50:	e058      	b.n	8012e04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8012d52:	7bbb      	ldrb	r3, [r7, #14]
 8012d54:	2b01      	cmp	r3, #1
 8012d56:	d055      	beq.n	8012e04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	2204      	movs	r2, #4
 8012d5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012d60:	e050      	b.n	8012e04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	3340      	adds	r3, #64	@ 0x40
 8012d66:	4619      	mov	r1, r3
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 f860 	bl	8012e2e <GetLineCoding>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012d72:	7bbb      	ldrb	r3, [r7, #14]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d126      	bne.n	8012dc6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d8a:	791b      	ldrb	r3, [r3, #4]
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d13b      	bne.n	8012e08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d133      	bne.n	8012e08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012daa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d12b      	bne.n	8012e08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012db8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d124      	bne.n	8012e08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f000 f96a 	bl	8013098 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012dc4:	e020      	b.n	8012e08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8012dc6:	7bbb      	ldrb	r3, [r7, #14]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d01d      	beq.n	8012e08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	2204      	movs	r2, #4
 8012dd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012dd4:	e018      	b.n	8012e08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f000 f867 	bl	8012eaa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f000 f8e6 	bl	8012fae <CDC_ProcessReception>
      break;
 8012de2:	e014      	b.n	8012e0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8012de4:	2100      	movs	r1, #0
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f001 f8ff 	bl	8013fea <USBH_ClrFeature>
 8012dec:	4603      	mov	r3, r0
 8012dee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012df0:	7bbb      	ldrb	r3, [r7, #14]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d10a      	bne.n	8012e0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8012dfe:	e005      	b.n	8012e0c <USBH_CDC_Process+0x120>

    default:
      break;
 8012e00:	bf00      	nop
 8012e02:	e004      	b.n	8012e0e <USBH_CDC_Process+0x122>
      break;
 8012e04:	bf00      	nop
 8012e06:	e002      	b.n	8012e0e <USBH_CDC_Process+0x122>
      break;
 8012e08:	bf00      	nop
 8012e0a:	e000      	b.n	8012e0e <USBH_CDC_Process+0x122>
      break;
 8012e0c:	bf00      	nop

  }

  return status;
 8012e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3710      	adds	r7, #16
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}

08012e18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b083      	sub	sp, #12
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012e20:	2300      	movs	r3, #0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	370c      	adds	r7, #12
 8012e26:	46bd      	mov	sp, r7
 8012e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2c:	4770      	bx	lr

08012e2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012e2e:	b580      	push	{r7, lr}
 8012e30:	b082      	sub	sp, #8
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	6078      	str	r0, [r7, #4]
 8012e36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	22a1      	movs	r2, #161	@ 0xa1
 8012e3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2221      	movs	r2, #33	@ 0x21
 8012e42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2200      	movs	r2, #0
 8012e48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2207      	movs	r2, #7
 8012e54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	2207      	movs	r2, #7
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f001 fbf9 	bl	8014654 <USBH_CtlReq>
 8012e62:	4603      	mov	r3, r0
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3708      	adds	r7, #8
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2221      	movs	r2, #33	@ 0x21
 8012e7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2220      	movs	r2, #32
 8012e80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2200      	movs	r2, #0
 8012e86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2207      	movs	r2, #7
 8012e92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	2207      	movs	r2, #7
 8012e98:	4619      	mov	r1, r3
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f001 fbda 	bl	8014654 <USBH_CtlReq>
 8012ea0:	4603      	mov	r3, r0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3708      	adds	r7, #8
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}

08012eaa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8012eaa:	b580      	push	{r7, lr}
 8012eac:	b086      	sub	sp, #24
 8012eae:	af02      	add	r7, sp, #8
 8012eb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012eb8:	69db      	ldr	r3, [r3, #28]
 8012eba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d002      	beq.n	8012ed0 <CDC_ProcessTransmission+0x26>
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	d023      	beq.n	8012f16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8012ece:	e06a      	b.n	8012fa6 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ed4:	68fa      	ldr	r2, [r7, #12]
 8012ed6:	8b12      	ldrh	r2, [r2, #24]
 8012ed8:	4293      	cmp	r3, r2
 8012eda:	d90b      	bls.n	8012ef4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	69d9      	ldr	r1, [r3, #28]
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	8b1a      	ldrh	r2, [r3, #24]
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	7b5b      	ldrb	r3, [r3, #13]
 8012ee8:	2001      	movs	r0, #1
 8012eea:	9000      	str	r0, [sp, #0]
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f001 fe28 	bl	8014b42 <USBH_BulkSendData>
 8012ef2:	e00b      	b.n	8012f0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	7b5b      	ldrb	r3, [r3, #13]
 8012f02:	2001      	movs	r0, #1
 8012f04:	9000      	str	r0, [sp, #0]
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f001 fe1b 	bl	8014b42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2202      	movs	r2, #2
 8012f10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8012f14:	e047      	b.n	8012fa6 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	7b5b      	ldrb	r3, [r3, #13]
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f008 f951 	bl	801b1c4 <USBH_LL_GetURBState>
 8012f22:	4603      	mov	r3, r0
 8012f24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8012f26:	7afb      	ldrb	r3, [r7, #11]
 8012f28:	2b01      	cmp	r3, #1
 8012f2a:	d12e      	bne.n	8012f8a <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f30:	68fa      	ldr	r2, [r7, #12]
 8012f32:	8b12      	ldrh	r2, [r2, #24]
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d90e      	bls.n	8012f56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	8b12      	ldrh	r2, [r2, #24]
 8012f40:	1a9a      	subs	r2, r3, r2
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	69db      	ldr	r3, [r3, #28]
 8012f4a:	68fa      	ldr	r2, [r7, #12]
 8012f4c:	8b12      	ldrh	r2, [r2, #24]
 8012f4e:	441a      	add	r2, r3
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	61da      	str	r2, [r3, #28]
 8012f54:	e002      	b.n	8012f5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d004      	beq.n	8012f6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2201      	movs	r2, #1
 8012f68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8012f6c:	e006      	b.n	8012f7c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2200      	movs	r2, #0
 8012f72:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f000 f87a 	bl	8013070 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	2200      	movs	r2, #0
 8012f80:	2104      	movs	r1, #4
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f000 febc 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8012f88:	e00c      	b.n	8012fa4 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8012f8a:	7afb      	ldrb	r3, [r7, #11]
 8012f8c:	2b02      	cmp	r3, #2
 8012f8e:	d109      	bne.n	8012fa4 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2201      	movs	r2, #1
 8012f94:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012f98:	2300      	movs	r3, #0
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	2104      	movs	r1, #4
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f000 feae 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8012fa4:	bf00      	nop
  }
}
 8012fa6:	bf00      	nop
 8012fa8:	3710      	adds	r7, #16
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b086      	sub	sp, #24
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012fbc:	69db      	ldr	r3, [r3, #28]
 8012fbe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8012fca:	2b03      	cmp	r3, #3
 8012fcc:	d002      	beq.n	8012fd4 <CDC_ProcessReception+0x26>
 8012fce:	2b04      	cmp	r3, #4
 8012fd0:	d00e      	beq.n	8012ff0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8012fd2:	e049      	b.n	8013068 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	6a19      	ldr	r1, [r3, #32]
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	8b5a      	ldrh	r2, [r3, #26]
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	7b1b      	ldrb	r3, [r3, #12]
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f001 fdd3 	bl	8014b8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	2204      	movs	r2, #4
 8012fea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8012fee:	e03b      	b.n	8013068 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	7b1b      	ldrb	r3, [r3, #12]
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f008 f8e4 	bl	801b1c4 <USBH_LL_GetURBState>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8013000:	7cfb      	ldrb	r3, [r7, #19]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d12f      	bne.n	8013066 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	7b1b      	ldrb	r3, [r3, #12]
 801300a:	4619      	mov	r1, r3
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f008 f847 	bl	801b0a0 <USBH_LL_GetLastXferSize>
 8013012:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	429a      	cmp	r2, r3
 801301c:	d016      	beq.n	801304c <CDC_ProcessReception+0x9e>
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	8b5b      	ldrh	r3, [r3, #26]
 8013022:	461a      	mov	r2, r3
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	4293      	cmp	r3, r2
 8013028:	d110      	bne.n	801304c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	1ad2      	subs	r2, r2, r3
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	6a1a      	ldr	r2, [r3, #32]
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	441a      	add	r2, r3
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	2203      	movs	r2, #3
 8013046:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 801304a:	e006      	b.n	801305a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	2200      	movs	r2, #0
 8013050:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f000 f815 	bl	8013084 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 801305a:	2300      	movs	r3, #0
 801305c:	2200      	movs	r2, #0
 801305e:	2104      	movs	r1, #4
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f000 fe4d 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8013066:	bf00      	nop
  }
}
 8013068:	bf00      	nop
 801306a:	3718      	adds	r7, #24
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013070:	b480      	push	{r7}
 8013072:	b083      	sub	sp, #12
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013078:	bf00      	nop
 801307a:	370c      	adds	r7, #12
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr

08013084 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801308c:	bf00      	nop
 801308e:	370c      	adds	r7, #12
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr

08013098 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8013098:	b480      	push	{r7}
 801309a:	b083      	sub	sp, #12
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80130a0:	bf00      	nop
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr

080130ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80130ac:	b5b0      	push	{r4, r5, r7, lr}
 80130ae:	b090      	sub	sp, #64	@ 0x40
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	4613      	mov	r3, r2
 80130b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d101      	bne.n	80130c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80130c0:	2302      	movs	r3, #2
 80130c2:	e04d      	b.n	8013160 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	79fa      	ldrb	r2, [r7, #7]
 80130c8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2200      	movs	r2, #0
 80130d0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2200      	movs	r2, #0
 80130d8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80130dc:	68f8      	ldr	r0, [r7, #12]
 80130de:	f000 f847 	bl	8013170 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2200      	movs	r2, #0
 80130e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2200      	movs	r2, #0
 80130ee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2200      	movs	r2, #0
 80130f6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2200      	movs	r2, #0
 80130fe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d003      	beq.n	8013110 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	68ba      	ldr	r2, [r7, #8]
 801310c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8013110:	4b15      	ldr	r3, [pc, #84]	@ (8013168 <USBH_Init+0xbc>)
 8013112:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8013116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 801311c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013120:	2100      	movs	r1, #0
 8013122:	4618      	mov	r0, r3
 8013124:	f004 ff4f 	bl	8017fc6 <osMessageCreate>
 8013128:	4602      	mov	r2, r0
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8013130:	4b0e      	ldr	r3, [pc, #56]	@ (801316c <USBH_Init+0xc0>)
 8013132:	f107 0414 	add.w	r4, r7, #20
 8013136:	461d      	mov	r5, r3
 8013138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801313a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801313c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013140:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8013144:	f107 0314 	add.w	r3, r7, #20
 8013148:	68f9      	ldr	r1, [r7, #12]
 801314a:	4618      	mov	r0, r3
 801314c:	f004 fe04 	bl	8017d58 <osThreadCreate>
 8013150:	4602      	mov	r2, r0
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f007 feed 	bl	801af38 <USBH_LL_Init>

  return USBH_OK;
 801315e:	2300      	movs	r3, #0
}
 8013160:	4618      	mov	r0, r3
 8013162:	3740      	adds	r7, #64	@ 0x40
 8013164:	46bd      	mov	sp, r7
 8013166:	bdb0      	pop	{r4, r5, r7, pc}
 8013168:	0801ec60 	.word	0x0801ec60
 801316c:	0801ec7c 	.word	0x0801ec7c

08013170 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013178:	2300      	movs	r3, #0
 801317a:	60fb      	str	r3, [r7, #12]
 801317c:	e009      	b.n	8013192 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	33e0      	adds	r3, #224	@ 0xe0
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	4413      	add	r3, r2
 8013188:	2200      	movs	r2, #0
 801318a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	3301      	adds	r3, #1
 8013190:	60fb      	str	r3, [r7, #12]
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b0f      	cmp	r3, #15
 8013196:	d9f2      	bls.n	801317e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013198:	2300      	movs	r3, #0
 801319a:	60fb      	str	r3, [r7, #12]
 801319c:	e009      	b.n	80131b2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	4413      	add	r3, r2
 80131a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80131a8:	2200      	movs	r2, #0
 80131aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	3301      	adds	r3, #1
 80131b0:	60fb      	str	r3, [r7, #12]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80131b8:	d3f1      	bcc.n	801319e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2200      	movs	r2, #0
 80131c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2201      	movs	r2, #1
 80131ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2200      	movs	r2, #0
 80131d0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2201      	movs	r2, #1
 80131d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2240      	movs	r2, #64	@ 0x40
 80131de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2200      	movs	r2, #0
 80131e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2200      	movs	r2, #0
 80131ea:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2201      	movs	r2, #1
 80131f2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2200      	movs	r2, #0
 80131fa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2200      	movs	r2, #0
 8013202:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	331c      	adds	r3, #28
 801320a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801320e:	2100      	movs	r1, #0
 8013210:	4618      	mov	r0, r3
 8013212:	f008 f9e9 	bl	801b5e8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801321c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013220:	2100      	movs	r1, #0
 8013222:	4618      	mov	r0, r3
 8013224:	f008 f9e0 	bl	801b5e8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 801322e:	2212      	movs	r2, #18
 8013230:	2100      	movs	r1, #0
 8013232:	4618      	mov	r0, r3
 8013234:	f008 f9d8 	bl	801b5e8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801323e:	223e      	movs	r2, #62	@ 0x3e
 8013240:	2100      	movs	r1, #0
 8013242:	4618      	mov	r0, r3
 8013244:	f008 f9d0 	bl	801b5e8 <memset>

  return USBH_OK;
 8013248:	2300      	movs	r3, #0
}
 801324a:	4618      	mov	r0, r3
 801324c:	3710      	adds	r7, #16
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}

08013252 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8013252:	b480      	push	{r7}
 8013254:	b085      	sub	sp, #20
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
 801325a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801325c:	2300      	movs	r3, #0
 801325e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d016      	beq.n	8013294 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801326c:	2b00      	cmp	r3, #0
 801326e:	d10e      	bne.n	801328e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8013276:	1c59      	adds	r1, r3, #1
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	33de      	adds	r3, #222	@ 0xde
 8013282:	6839      	ldr	r1, [r7, #0]
 8013284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8013288:	2300      	movs	r3, #0
 801328a:	73fb      	strb	r3, [r7, #15]
 801328c:	e004      	b.n	8013298 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801328e:	2302      	movs	r3, #2
 8013290:	73fb      	strb	r3, [r7, #15]
 8013292:	e001      	b.n	8013298 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8013294:	2302      	movs	r3, #2
 8013296:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013298:	7bfb      	ldrb	r3, [r7, #15]
}
 801329a:	4618      	mov	r0, r3
 801329c:	3714      	adds	r7, #20
 801329e:	46bd      	mov	sp, r7
 80132a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a4:	4770      	bx	lr

080132a6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80132a6:	b480      	push	{r7}
 80132a8:	b085      	sub	sp, #20
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
 80132ae:	460b      	mov	r3, r1
 80132b0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80132b2:	2300      	movs	r3, #0
 80132b4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80132bc:	78fa      	ldrb	r2, [r7, #3]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d204      	bcs.n	80132cc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	78fa      	ldrb	r2, [r7, #3]
 80132c6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80132ca:	e001      	b.n	80132d0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80132cc:	2302      	movs	r3, #2
 80132ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80132d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3714      	adds	r7, #20
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr

080132de <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80132de:	b480      	push	{r7}
 80132e0:	b087      	sub	sp, #28
 80132e2:	af00      	add	r7, sp, #0
 80132e4:	6078      	str	r0, [r7, #4]
 80132e6:	4608      	mov	r0, r1
 80132e8:	4611      	mov	r1, r2
 80132ea:	461a      	mov	r2, r3
 80132ec:	4603      	mov	r3, r0
 80132ee:	70fb      	strb	r3, [r7, #3]
 80132f0:	460b      	mov	r3, r1
 80132f2:	70bb      	strb	r3, [r7, #2]
 80132f4:	4613      	mov	r3, r2
 80132f6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80132f8:	2300      	movs	r3, #0
 80132fa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80132fc:	2300      	movs	r3, #0
 80132fe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8013306:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013308:	e025      	b.n	8013356 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801330a:	7dfb      	ldrb	r3, [r7, #23]
 801330c:	221a      	movs	r2, #26
 801330e:	fb02 f303 	mul.w	r3, r2, r3
 8013312:	3308      	adds	r3, #8
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	4413      	add	r3, r2
 8013318:	3302      	adds	r3, #2
 801331a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	795b      	ldrb	r3, [r3, #5]
 8013320:	78fa      	ldrb	r2, [r7, #3]
 8013322:	429a      	cmp	r2, r3
 8013324:	d002      	beq.n	801332c <USBH_FindInterface+0x4e>
 8013326:	78fb      	ldrb	r3, [r7, #3]
 8013328:	2bff      	cmp	r3, #255	@ 0xff
 801332a:	d111      	bne.n	8013350 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013330:	78ba      	ldrb	r2, [r7, #2]
 8013332:	429a      	cmp	r2, r3
 8013334:	d002      	beq.n	801333c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013336:	78bb      	ldrb	r3, [r7, #2]
 8013338:	2bff      	cmp	r3, #255	@ 0xff
 801333a:	d109      	bne.n	8013350 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013340:	787a      	ldrb	r2, [r7, #1]
 8013342:	429a      	cmp	r2, r3
 8013344:	d002      	beq.n	801334c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013346:	787b      	ldrb	r3, [r7, #1]
 8013348:	2bff      	cmp	r3, #255	@ 0xff
 801334a:	d101      	bne.n	8013350 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801334c:	7dfb      	ldrb	r3, [r7, #23]
 801334e:	e006      	b.n	801335e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8013350:	7dfb      	ldrb	r3, [r7, #23]
 8013352:	3301      	adds	r3, #1
 8013354:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013356:	7dfb      	ldrb	r3, [r7, #23]
 8013358:	2b01      	cmp	r3, #1
 801335a:	d9d6      	bls.n	801330a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801335c:	23ff      	movs	r3, #255	@ 0xff
}
 801335e:	4618      	mov	r0, r3
 8013360:	371c      	adds	r7, #28
 8013362:	46bd      	mov	sp, r7
 8013364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013368:	4770      	bx	lr

0801336a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 801336a:	b580      	push	{r7, lr}
 801336c:	b082      	sub	sp, #8
 801336e:	af00      	add	r7, sp, #0
 8013370:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	f007 fe1c 	bl	801afb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8013378:	2101      	movs	r1, #1
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f007 ff35 	bl	801b1ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8013380:	2300      	movs	r3, #0
}
 8013382:	4618      	mov	r0, r3
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
	...

0801338c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b088      	sub	sp, #32
 8013390:	af04      	add	r7, sp, #16
 8013392:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013394:	2302      	movs	r3, #2
 8013396:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8013398:	2300      	movs	r3, #0
 801339a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d102      	bne.n	80133ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2203      	movs	r2, #3
 80133ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	2b0b      	cmp	r3, #11
 80133b6:	f200 81f5 	bhi.w	80137a4 <USBH_Process+0x418>
 80133ba:	a201      	add	r2, pc, #4	@ (adr r2, 80133c0 <USBH_Process+0x34>)
 80133bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c0:	080133f1 	.word	0x080133f1
 80133c4:	0801342f 	.word	0x0801342f
 80133c8:	080134a5 	.word	0x080134a5
 80133cc:	08013733 	.word	0x08013733
 80133d0:	080137a5 	.word	0x080137a5
 80133d4:	08013551 	.word	0x08013551
 80133d8:	080136cd 	.word	0x080136cd
 80133dc:	08013593 	.word	0x08013593
 80133e0:	080135bf 	.word	0x080135bf
 80133e4:	080135e7 	.word	0x080135e7
 80133e8:	08013635 	.word	0x08013635
 80133ec:	0801371b 	.word	0x0801371b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80133f6:	b2db      	uxtb	r3, r3
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 81d5 	beq.w	80137a8 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2201      	movs	r2, #1
 8013402:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8013404:	20c8      	movs	r0, #200	@ 0xc8
 8013406:	f007 ff3a 	bl	801b27e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f007 fe2d 	bl	801b06a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2200      	movs	r2, #0
 8013414:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2200      	movs	r2, #0
 801341c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013420:	2300      	movs	r3, #0
 8013422:	2200      	movs	r2, #0
 8013424:	2101      	movs	r1, #1
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 fc6a 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801342c:	e1bc      	b.n	80137a8 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8013434:	b2db      	uxtb	r3, r3
 8013436:	2b01      	cmp	r3, #1
 8013438:	d107      	bne.n	801344a <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2200      	movs	r2, #0
 801343e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2202      	movs	r2, #2
 8013446:	701a      	strb	r2, [r3, #0]
 8013448:	e025      	b.n	8013496 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8013450:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013454:	d914      	bls.n	8013480 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 801345c:	3301      	adds	r3, #1
 801345e:	b2da      	uxtb	r2, r3
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 801346c:	2b03      	cmp	r3, #3
 801346e:	d903      	bls.n	8013478 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	220d      	movs	r2, #13
 8013474:	701a      	strb	r2, [r3, #0]
 8013476:	e00e      	b.n	8013496 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2200      	movs	r2, #0
 801347c:	701a      	strb	r2, [r3, #0]
 801347e:	e00a      	b.n	8013496 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8013486:	f103 020a 	add.w	r2, r3, #10
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8013490:	200a      	movs	r0, #10
 8013492:	f007 fef4 	bl	801b27e <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013496:	2300      	movs	r3, #0
 8013498:	2200      	movs	r2, #0
 801349a:	2101      	movs	r1, #1
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f000 fc2f 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80134a2:	e188      	b.n	80137b6 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d005      	beq.n	80134ba <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80134b4:	2104      	movs	r1, #4
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80134ba:	2064      	movs	r0, #100	@ 0x64
 80134bc:	f007 fedf 	bl	801b27e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f007 fdab 	bl	801b01c <USBH_LL_GetSpeed>
 80134c6:	4603      	mov	r3, r0
 80134c8:	461a      	mov	r2, r3
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2205      	movs	r2, #5
 80134d4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80134d6:	2100      	movs	r1, #0
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f001 fba4 	bl	8014c26 <USBH_AllocPipe>
 80134de:	4603      	mov	r3, r0
 80134e0:	461a      	mov	r2, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80134e6:	2180      	movs	r1, #128	@ 0x80
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f001 fb9c 	bl	8014c26 <USBH_AllocPipe>
 80134ee:	4603      	mov	r3, r0
 80134f0:	461a      	mov	r2, r3
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	7919      	ldrb	r1, [r3, #4]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801350a:	9202      	str	r2, [sp, #8]
 801350c:	2200      	movs	r2, #0
 801350e:	9201      	str	r2, [sp, #4]
 8013510:	9300      	str	r3, [sp, #0]
 8013512:	4603      	mov	r3, r0
 8013514:	2280      	movs	r2, #128	@ 0x80
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f001 fb56 	bl	8014bc8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	7959      	ldrb	r1, [r3, #5]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013530:	9202      	str	r2, [sp, #8]
 8013532:	2200      	movs	r2, #0
 8013534:	9201      	str	r2, [sp, #4]
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	4603      	mov	r3, r0
 801353a:	2200      	movs	r2, #0
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f001 fb43 	bl	8014bc8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013542:	2300      	movs	r3, #0
 8013544:	2200      	movs	r2, #0
 8013546:	2101      	movs	r1, #1
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 fbd9 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801354e:	e132      	b.n	80137b6 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f000 f935 	bl	80137c0 <USBH_HandleEnum>
 8013556:	4603      	mov	r3, r0
 8013558:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801355a:	7bbb      	ldrb	r3, [r7, #14]
 801355c:	b2db      	uxtb	r3, r3
 801355e:	2b00      	cmp	r3, #0
 8013560:	f040 8124 	bne.w	80137ac <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8013572:	2b01      	cmp	r3, #1
 8013574:	d103      	bne.n	801357e <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2208      	movs	r2, #8
 801357a:	701a      	strb	r2, [r3, #0]
 801357c:	e002      	b.n	8013584 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2207      	movs	r2, #7
 8013582:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013584:	2300      	movs	r3, #0
 8013586:	2200      	movs	r2, #0
 8013588:	2105      	movs	r1, #5
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f000 fbb8 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013590:	e10c      	b.n	80137ac <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013598:	2b00      	cmp	r3, #0
 801359a:	f000 8109 	beq.w	80137b0 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80135a4:	2101      	movs	r1, #1
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2208      	movs	r2, #8
 80135ae:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80135b0:	2300      	movs	r3, #0
 80135b2:	2200      	movs	r2, #0
 80135b4:	2105      	movs	r1, #5
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	f000 fba2 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80135bc:	e0f8      	b.n	80137b0 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80135c4:	4619      	mov	r1, r3
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 fcc8 	bl	8013f5c <USBH_SetCfg>
 80135cc:	4603      	mov	r3, r0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d102      	bne.n	80135d8 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2209      	movs	r2, #9
 80135d6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80135d8:	2300      	movs	r3, #0
 80135da:	2200      	movs	r2, #0
 80135dc:	2101      	movs	r1, #1
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f000 fb8e 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80135e4:	e0e7      	b.n	80137b6 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80135ec:	f003 0320 	and.w	r3, r3, #32
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d015      	beq.n	8013620 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80135f4:	2101      	movs	r1, #1
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f000 fcd3 	bl	8013fa2 <USBH_SetFeature>
 80135fc:	4603      	mov	r3, r0
 80135fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013600:	7bbb      	ldrb	r3, [r7, #14]
 8013602:	b2db      	uxtb	r3, r3
 8013604:	2b00      	cmp	r3, #0
 8013606:	d103      	bne.n	8013610 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	220a      	movs	r2, #10
 801360c:	701a      	strb	r2, [r3, #0]
 801360e:	e00a      	b.n	8013626 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8013610:	7bbb      	ldrb	r3, [r7, #14]
 8013612:	b2db      	uxtb	r3, r3
 8013614:	2b03      	cmp	r3, #3
 8013616:	d106      	bne.n	8013626 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	220a      	movs	r2, #10
 801361c:	701a      	strb	r2, [r3, #0]
 801361e:	e002      	b.n	8013626 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	220a      	movs	r2, #10
 8013624:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013626:	2300      	movs	r3, #0
 8013628:	2200      	movs	r2, #0
 801362a:	2101      	movs	r1, #1
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f000 fb67 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013632:	e0c0      	b.n	80137b6 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801363a:	2b00      	cmp	r3, #0
 801363c:	d03f      	beq.n	80136be <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2200      	movs	r2, #0
 8013642:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013646:	2300      	movs	r3, #0
 8013648:	73fb      	strb	r3, [r7, #15]
 801364a:	e016      	b.n	801367a <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801364c:	7bfa      	ldrb	r2, [r7, #15]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	32de      	adds	r2, #222	@ 0xde
 8013652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013656:	791a      	ldrb	r2, [r3, #4]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 801365e:	429a      	cmp	r2, r3
 8013660:	d108      	bne.n	8013674 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8013662:	7bfa      	ldrb	r2, [r7, #15]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	32de      	adds	r2, #222	@ 0xde
 8013668:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8013672:	e005      	b.n	8013680 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013674:	7bfb      	ldrb	r3, [r7, #15]
 8013676:	3301      	adds	r3, #1
 8013678:	73fb      	strb	r3, [r7, #15]
 801367a:	7bfb      	ldrb	r3, [r7, #15]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d0e5      	beq.n	801364c <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013686:	2b00      	cmp	r3, #0
 8013688:	d016      	beq.n	80136b8 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013690:	689b      	ldr	r3, [r3, #8]
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	4798      	blx	r3
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d109      	bne.n	80136b0 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2206      	movs	r2, #6
 80136a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80136a8:	2103      	movs	r1, #3
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	4798      	blx	r3
 80136ae:	e006      	b.n	80136be <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	220d      	movs	r2, #13
 80136b4:	701a      	strb	r2, [r3, #0]
 80136b6:	e002      	b.n	80136be <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	220d      	movs	r2, #13
 80136bc:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80136be:	2300      	movs	r3, #0
 80136c0:	2200      	movs	r2, #0
 80136c2:	2105      	movs	r1, #5
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f000 fb1b 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80136ca:	e074      	b.n	80137b6 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d017      	beq.n	8013706 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80136dc:	691b      	ldr	r3, [r3, #16]
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	4798      	blx	r3
 80136e2:	4603      	mov	r3, r0
 80136e4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80136e6:	7bbb      	ldrb	r3, [r7, #14]
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d103      	bne.n	80136f6 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	220b      	movs	r2, #11
 80136f2:	701a      	strb	r2, [r3, #0]
 80136f4:	e00a      	b.n	801370c <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 80136f6:	7bbb      	ldrb	r3, [r7, #14]
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	2b02      	cmp	r3, #2
 80136fc:	d106      	bne.n	801370c <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	220d      	movs	r2, #13
 8013702:	701a      	strb	r2, [r3, #0]
 8013704:	e002      	b.n	801370c <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	220d      	movs	r2, #13
 801370a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801370c:	2300      	movs	r3, #0
 801370e:	2200      	movs	r2, #0
 8013710:	2105      	movs	r1, #5
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f000 faf4 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013718:	e04d      	b.n	80137b6 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013720:	2b00      	cmp	r3, #0
 8013722:	d047      	beq.n	80137b4 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801372a:	695b      	ldr	r3, [r3, #20]
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	4798      	blx	r3
      }
      break;
 8013730:	e040      	b.n	80137b4 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2200      	movs	r2, #0
 8013736:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f7ff fd18 	bl	8013170 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013746:	2b00      	cmp	r3, #0
 8013748:	d009      	beq.n	801375e <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013750:	68db      	ldr	r3, [r3, #12]
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2200      	movs	r2, #0
 801375a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013764:	2b00      	cmp	r3, #0
 8013766:	d005      	beq.n	8013774 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801376e:	2105      	movs	r1, #5
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 801377a:	b2db      	uxtb	r3, r3
 801377c:	2b01      	cmp	r3, #1
 801377e:	d107      	bne.n	8013790 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2200      	movs	r2, #0
 8013784:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f7ff fdee 	bl	801336a <USBH_Start>
 801378e:	e002      	b.n	8013796 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f007 fc0d 	bl	801afb0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013796:	2300      	movs	r3, #0
 8013798:	2200      	movs	r2, #0
 801379a:	2101      	movs	r1, #1
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f000 faaf 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80137a2:	e008      	b.n	80137b6 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 80137a4:	bf00      	nop
 80137a6:	e006      	b.n	80137b6 <USBH_Process+0x42a>
      break;
 80137a8:	bf00      	nop
 80137aa:	e004      	b.n	80137b6 <USBH_Process+0x42a>
      break;
 80137ac:	bf00      	nop
 80137ae:	e002      	b.n	80137b6 <USBH_Process+0x42a>
    break;
 80137b0:	bf00      	nop
 80137b2:	e000      	b.n	80137b6 <USBH_Process+0x42a>
      break;
 80137b4:	bf00      	nop
  }
  return USBH_OK;
 80137b6:	2300      	movs	r3, #0
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b088      	sub	sp, #32
 80137c4:	af04      	add	r7, sp, #16
 80137c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80137c8:	2301      	movs	r3, #1
 80137ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80137cc:	2301      	movs	r3, #1
 80137ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	785b      	ldrb	r3, [r3, #1]
 80137d4:	2b07      	cmp	r3, #7
 80137d6:	f200 81db 	bhi.w	8013b90 <USBH_HandleEnum+0x3d0>
 80137da:	a201      	add	r2, pc, #4	@ (adr r2, 80137e0 <USBH_HandleEnum+0x20>)
 80137dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137e0:	08013801 	.word	0x08013801
 80137e4:	080138bb 	.word	0x080138bb
 80137e8:	08013925 	.word	0x08013925
 80137ec:	080139af 	.word	0x080139af
 80137f0:	08013a19 	.word	0x08013a19
 80137f4:	08013a89 	.word	0x08013a89
 80137f8:	08013af3 	.word	0x08013af3
 80137fc:	08013b51 	.word	0x08013b51
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013800:	2108      	movs	r1, #8
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f000 fac7 	bl	8013d96 <USBH_Get_DevDesc>
 8013808:	4603      	mov	r3, r0
 801380a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801380c:	7bbb      	ldrb	r3, [r7, #14]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d12e      	bne.n	8013870 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2201      	movs	r2, #1
 8013820:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	7919      	ldrb	r1, [r3, #4]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013836:	9202      	str	r2, [sp, #8]
 8013838:	2200      	movs	r2, #0
 801383a:	9201      	str	r2, [sp, #4]
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	4603      	mov	r3, r0
 8013840:	2280      	movs	r2, #128	@ 0x80
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f001 f9c0 	bl	8014bc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	7959      	ldrb	r1, [r3, #5]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801385c:	9202      	str	r2, [sp, #8]
 801385e:	2200      	movs	r2, #0
 8013860:	9201      	str	r2, [sp, #4]
 8013862:	9300      	str	r3, [sp, #0]
 8013864:	4603      	mov	r3, r0
 8013866:	2200      	movs	r2, #0
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f001 f9ad 	bl	8014bc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801386e:	e191      	b.n	8013b94 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013870:	7bbb      	ldrb	r3, [r7, #14]
 8013872:	2b03      	cmp	r3, #3
 8013874:	f040 818e 	bne.w	8013b94 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801387e:	3301      	adds	r3, #1
 8013880:	b2da      	uxtb	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801388e:	2b03      	cmp	r3, #3
 8013890:	d903      	bls.n	801389a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	220d      	movs	r2, #13
 8013896:	701a      	strb	r2, [r3, #0]
      break;
 8013898:	e17c      	b.n	8013b94 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	795b      	ldrb	r3, [r3, #5]
 801389e:	4619      	mov	r1, r3
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f001 f9e1 	bl	8014c68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	791b      	ldrb	r3, [r3, #4]
 80138aa:	4619      	mov	r1, r3
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f001 f9db 	bl	8014c68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	701a      	strb	r2, [r3, #0]
      break;
 80138b8:	e16c      	b.n	8013b94 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80138ba:	2112      	movs	r1, #18
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f000 fa6a 	bl	8013d96 <USBH_Get_DevDesc>
 80138c2:	4603      	mov	r3, r0
 80138c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80138c6:	7bbb      	ldrb	r3, [r7, #14]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d103      	bne.n	80138d4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2202      	movs	r2, #2
 80138d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80138d2:	e161      	b.n	8013b98 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80138d4:	7bbb      	ldrb	r3, [r7, #14]
 80138d6:	2b03      	cmp	r3, #3
 80138d8:	f040 815e 	bne.w	8013b98 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80138e2:	3301      	adds	r3, #1
 80138e4:	b2da      	uxtb	r2, r3
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80138f2:	2b03      	cmp	r3, #3
 80138f4:	d903      	bls.n	80138fe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	220d      	movs	r2, #13
 80138fa:	701a      	strb	r2, [r3, #0]
      break;
 80138fc:	e14c      	b.n	8013b98 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	795b      	ldrb	r3, [r3, #5]
 8013902:	4619      	mov	r1, r3
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f001 f9af 	bl	8014c68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	791b      	ldrb	r3, [r3, #4]
 801390e:	4619      	mov	r1, r3
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f001 f9a9 	bl	8014c68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2200      	movs	r2, #0
 801391a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2200      	movs	r2, #0
 8013920:	701a      	strb	r2, [r3, #0]
      break;
 8013922:	e139      	b.n	8013b98 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8013924:	2101      	movs	r1, #1
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f000 faf4 	bl	8013f14 <USBH_SetAddress>
 801392c:	4603      	mov	r3, r0
 801392e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013930:	7bbb      	ldrb	r3, [r7, #14]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d130      	bne.n	8013998 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8013936:	2002      	movs	r0, #2
 8013938:	f007 fca1 	bl	801b27e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2201      	movs	r2, #1
 8013940:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2203      	movs	r2, #3
 8013948:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	7919      	ldrb	r1, [r3, #4]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801395e:	9202      	str	r2, [sp, #8]
 8013960:	2200      	movs	r2, #0
 8013962:	9201      	str	r2, [sp, #4]
 8013964:	9300      	str	r3, [sp, #0]
 8013966:	4603      	mov	r3, r0
 8013968:	2280      	movs	r2, #128	@ 0x80
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f001 f92c 	bl	8014bc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	7959      	ldrb	r1, [r3, #5]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013980:	687a      	ldr	r2, [r7, #4]
 8013982:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013984:	9202      	str	r2, [sp, #8]
 8013986:	2200      	movs	r2, #0
 8013988:	9201      	str	r2, [sp, #4]
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	4603      	mov	r3, r0
 801398e:	2200      	movs	r2, #0
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f001 f919 	bl	8014bc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013996:	e101      	b.n	8013b9c <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013998:	7bbb      	ldrb	r3, [r7, #14]
 801399a:	2b03      	cmp	r3, #3
 801399c:	f040 80fe 	bne.w	8013b9c <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	220d      	movs	r2, #13
 80139a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2200      	movs	r2, #0
 80139aa:	705a      	strb	r2, [r3, #1]
      break;
 80139ac:	e0f6      	b.n	8013b9c <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80139ae:	2109      	movs	r1, #9
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f000 fa1c 	bl	8013dee <USBH_Get_CfgDesc>
 80139b6:	4603      	mov	r3, r0
 80139b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80139ba:	7bbb      	ldrb	r3, [r7, #14]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d103      	bne.n	80139c8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2204      	movs	r2, #4
 80139c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80139c6:	e0eb      	b.n	8013ba0 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80139c8:	7bbb      	ldrb	r3, [r7, #14]
 80139ca:	2b03      	cmp	r3, #3
 80139cc:	f040 80e8 	bne.w	8013ba0 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80139d6:	3301      	adds	r3, #1
 80139d8:	b2da      	uxtb	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80139e6:	2b03      	cmp	r3, #3
 80139e8:	d903      	bls.n	80139f2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	220d      	movs	r2, #13
 80139ee:	701a      	strb	r2, [r3, #0]
      break;
 80139f0:	e0d6      	b.n	8013ba0 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	795b      	ldrb	r3, [r3, #5]
 80139f6:	4619      	mov	r1, r3
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f001 f935 	bl	8014c68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	791b      	ldrb	r3, [r3, #4]
 8013a02:	4619      	mov	r1, r3
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f001 f92f 	bl	8014c68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2200      	movs	r2, #0
 8013a14:	701a      	strb	r2, [r3, #0]
      break;
 8013a16:	e0c3      	b.n	8013ba0 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8013a1e:	4619      	mov	r1, r3
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f000 f9e4 	bl	8013dee <USBH_Get_CfgDesc>
 8013a26:	4603      	mov	r3, r0
 8013a28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013a2a:	7bbb      	ldrb	r3, [r7, #14]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d103      	bne.n	8013a38 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2205      	movs	r2, #5
 8013a34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013a36:	e0b5      	b.n	8013ba4 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013a38:	7bbb      	ldrb	r3, [r7, #14]
 8013a3a:	2b03      	cmp	r3, #3
 8013a3c:	f040 80b2 	bne.w	8013ba4 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013a46:	3301      	adds	r3, #1
 8013a48:	b2da      	uxtb	r2, r3
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013a56:	2b03      	cmp	r3, #3
 8013a58:	d903      	bls.n	8013a62 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	220d      	movs	r2, #13
 8013a5e:	701a      	strb	r2, [r3, #0]
      break;
 8013a60:	e0a0      	b.n	8013ba4 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	795b      	ldrb	r3, [r3, #5]
 8013a66:	4619      	mov	r1, r3
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f001 f8fd 	bl	8014c68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	791b      	ldrb	r3, [r3, #4]
 8013a72:	4619      	mov	r1, r3
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f001 f8f7 	bl	8014c68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2200      	movs	r2, #0
 8013a84:	701a      	strb	r2, [r3, #0]
      break;
 8013a86:	e08d      	b.n	8013ba4 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d025      	beq.n	8013ade <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013a9e:	23ff      	movs	r3, #255	@ 0xff
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f000 f9ce 	bl	8013e42 <USBH_Get_StringDesc>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013aaa:	7bbb      	ldrb	r3, [r7, #14]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d109      	bne.n	8013ac4 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2206      	movs	r2, #6
 8013ab4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	2200      	movs	r2, #0
 8013aba:	2105      	movs	r1, #5
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f000 f91f 	bl	8013d00 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013ac2:	e071      	b.n	8013ba8 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013ac4:	7bbb      	ldrb	r3, [r7, #14]
 8013ac6:	2b03      	cmp	r3, #3
 8013ac8:	d16e      	bne.n	8013ba8 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2206      	movs	r2, #6
 8013ace:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	2105      	movs	r1, #5
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f000 f912 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8013adc:	e064      	b.n	8013ba8 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2206      	movs	r2, #6
 8013ae2:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	2105      	movs	r1, #5
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f000 f908 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8013af0:	e05a      	b.n	8013ba8 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d01f      	beq.n	8013b3c <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013b08:	23ff      	movs	r3, #255	@ 0xff
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f000 f999 	bl	8013e42 <USBH_Get_StringDesc>
 8013b10:	4603      	mov	r3, r0
 8013b12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013b14:	7bbb      	ldrb	r3, [r7, #14]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d103      	bne.n	8013b22 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2207      	movs	r2, #7
 8013b1e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013b20:	e044      	b.n	8013bac <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013b22:	7bbb      	ldrb	r3, [r7, #14]
 8013b24:	2b03      	cmp	r3, #3
 8013b26:	d141      	bne.n	8013bac <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2207      	movs	r2, #7
 8013b2c:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013b2e:	2300      	movs	r3, #0
 8013b30:	2200      	movs	r2, #0
 8013b32:	2105      	movs	r1, #5
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f000 f8e3 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8013b3a:	e037      	b.n	8013bac <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2207      	movs	r2, #7
 8013b40:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013b42:	2300      	movs	r3, #0
 8013b44:	2200      	movs	r2, #0
 8013b46:	2105      	movs	r1, #5
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f000 f8d9 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8013b4e:	e02d      	b.n	8013bac <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d017      	beq.n	8013b8a <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013b66:	23ff      	movs	r3, #255	@ 0xff
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f000 f96a 	bl	8013e42 <USBH_Get_StringDesc>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013b72:	7bbb      	ldrb	r3, [r7, #14]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d102      	bne.n	8013b7e <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8013b7c:	e018      	b.n	8013bb0 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013b7e:	7bbb      	ldrb	r3, [r7, #14]
 8013b80:	2b03      	cmp	r3, #3
 8013b82:	d115      	bne.n	8013bb0 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8013b84:	2300      	movs	r3, #0
 8013b86:	73fb      	strb	r3, [r7, #15]
      break;
 8013b88:	e012      	b.n	8013bb0 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8013b8e:	e00f      	b.n	8013bb0 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8013b90:	bf00      	nop
 8013b92:	e00e      	b.n	8013bb2 <USBH_HandleEnum+0x3f2>
      break;
 8013b94:	bf00      	nop
 8013b96:	e00c      	b.n	8013bb2 <USBH_HandleEnum+0x3f2>
      break;
 8013b98:	bf00      	nop
 8013b9a:	e00a      	b.n	8013bb2 <USBH_HandleEnum+0x3f2>
      break;
 8013b9c:	bf00      	nop
 8013b9e:	e008      	b.n	8013bb2 <USBH_HandleEnum+0x3f2>
      break;
 8013ba0:	bf00      	nop
 8013ba2:	e006      	b.n	8013bb2 <USBH_HandleEnum+0x3f2>
      break;
 8013ba4:	bf00      	nop
 8013ba6:	e004      	b.n	8013bb2 <USBH_HandleEnum+0x3f2>
      break;
 8013ba8:	bf00      	nop
 8013baa:	e002      	b.n	8013bb2 <USBH_HandleEnum+0x3f2>
      break;
 8013bac:	bf00      	nop
 8013bae:	e000      	b.n	8013bb2 <USBH_HandleEnum+0x3f2>
      break;
 8013bb0:	bf00      	nop
  }
  return Status;
 8013bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3710      	adds	r7, #16
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	b083      	sub	sp, #12
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	683a      	ldr	r2, [r7, #0]
 8013bca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8013bce:	bf00      	nop
 8013bd0:	370c      	adds	r7, #12
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr

08013bda <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8013bda:	b580      	push	{r7, lr}
 8013bdc:	b082      	sub	sp, #8
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013be8:	1c5a      	adds	r2, r3, #1
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f000 f804 	bl	8013bfe <USBH_HandleSof>
}
 8013bf6:	bf00      	nop
 8013bf8:	3708      	adds	r7, #8
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}

08013bfe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8013bfe:	b580      	push	{r7, lr}
 8013c00:	b082      	sub	sp, #8
 8013c02:	af00      	add	r7, sp, #0
 8013c04:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	2b0b      	cmp	r3, #11
 8013c0e:	d10a      	bne.n	8013c26 <USBH_HandleSof+0x28>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d005      	beq.n	8013c26 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013c20:	699b      	ldr	r3, [r3, #24]
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	4798      	blx	r3
  }
}
 8013c26:	bf00      	nop
 8013c28:	3708      	adds	r7, #8
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}

08013c2e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013c2e:	b580      	push	{r7, lr}
 8013c30:	b082      	sub	sp, #8
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2201      	movs	r2, #1
 8013c3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013c3e:	2300      	movs	r3, #0
 8013c40:	2200      	movs	r2, #0
 8013c42:	2101      	movs	r1, #1
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f000 f85b 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8013c4a:	bf00      	nop
}
 8013c4c:	3708      	adds	r7, #8
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}

08013c52 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8013c52:	b480      	push	{r7}
 8013c54:	b083      	sub	sp, #12
 8013c56:	af00      	add	r7, sp, #0
 8013c58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2201      	movs	r2, #1
 8013c66:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8013c6a:	bf00      	nop
}
 8013c6c:	370c      	adds	r7, #12
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c74:	4770      	bx	lr

08013c76 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8013c76:	b580      	push	{r7, lr}
 8013c78:	b082      	sub	sp, #8
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2201      	movs	r2, #1
 8013c82:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2200      	movs	r2, #0
 8013c92:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013c96:	2300      	movs	r3, #0
 8013c98:	2200      	movs	r2, #0
 8013c9a:	2101      	movs	r1, #1
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f000 f82f 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013ca2:	2300      	movs	r3, #0
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2201      	movs	r2, #1
 8013cb8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f007 f98a 	bl	801afe6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	791b      	ldrb	r3, [r3, #4]
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 ffc5 	bl	8014c68 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	795b      	ldrb	r3, [r3, #5]
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f000 ffbf 	bl	8014c68 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013cea:	2300      	movs	r3, #0
 8013cec:	2200      	movs	r2, #0
 8013cee:	2101      	movs	r1, #1
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f000 f805 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013cf6:	2300      	movs	r3, #0
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}

08013d00 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b086      	sub	sp, #24
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	60f8      	str	r0, [r7, #12]
 8013d08:	607a      	str	r2, [r7, #4]
 8013d0a:	603b      	str	r3, [r7, #0]
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8013d10:	7afa      	ldrb	r2, [r7, #11]
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f004 fa2e 	bl	8018180 <osMessageWaiting>
 8013d24:	4603      	mov	r3, r0
 8013d26:	f1c3 0310 	rsb	r3, r3, #16
 8013d2a:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d009      	beq.n	8013d46 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8013d3e:	687a      	ldr	r2, [r7, #4]
 8013d40:	4619      	mov	r1, r3
 8013d42:	f004 f969 	bl	8018018 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8013d46:	bf00      	nop
 8013d48:	3718      	adds	r7, #24
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}

08013d4e <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8013d4e:	b580      	push	{r7, lr}
 8013d50:	b086      	sub	sp, #24
 8013d52:	af00      	add	r7, sp, #0
 8013d54:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8013d5c:	f107 030c 	add.w	r3, r7, #12
 8013d60:	f04f 32ff 	mov.w	r2, #4294967295
 8013d64:	4618      	mov	r0, r3
 8013d66:	f004 f997 	bl	8018098 <osMessageGet>
    if (event.status == osEventMessage)
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2b10      	cmp	r3, #16
 8013d6e:	d1f2      	bne.n	8013d56 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f7ff fb0b 	bl	801338c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013d76:	e7ee      	b.n	8013d56 <USBH_Process_OS+0x8>

08013d78 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013d80:	2300      	movs	r3, #0
 8013d82:	2200      	movs	r2, #0
 8013d84:	2101      	movs	r1, #1
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f7ff ffba 	bl	8013d00 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3708      	adds	r7, #8
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}

08013d96 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b086      	sub	sp, #24
 8013d9a:	af02      	add	r7, sp, #8
 8013d9c:	6078      	str	r0, [r7, #4]
 8013d9e:	460b      	mov	r3, r1
 8013da0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8013da2:	887b      	ldrh	r3, [r7, #2]
 8013da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013da8:	d901      	bls.n	8013dae <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013daa:	2303      	movs	r3, #3
 8013dac:	e01b      	b.n	8013de6 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013db4:	887b      	ldrh	r3, [r7, #2]
 8013db6:	9300      	str	r3, [sp, #0]
 8013db8:	4613      	mov	r3, r2
 8013dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f000 f872 	bl	8013eaa <USBH_GetDescriptor>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8013dca:	7bfb      	ldrb	r3, [r7, #15]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d109      	bne.n	8013de4 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013dd6:	887a      	ldrh	r2, [r7, #2]
 8013dd8:	4619      	mov	r1, r3
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f000 f92a 	bl	8014034 <USBH_ParseDevDesc>
 8013de0:	4603      	mov	r3, r0
 8013de2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}

08013dee <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8013dee:	b580      	push	{r7, lr}
 8013df0:	b086      	sub	sp, #24
 8013df2:	af02      	add	r7, sp, #8
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	460b      	mov	r3, r1
 8013df8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	331c      	adds	r3, #28
 8013dfe:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8013e00:	887b      	ldrh	r3, [r7, #2]
 8013e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013e06:	d901      	bls.n	8013e0c <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013e08:	2303      	movs	r3, #3
 8013e0a:	e016      	b.n	8013e3a <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8013e0c:	887b      	ldrh	r3, [r7, #2]
 8013e0e:	9300      	str	r3, [sp, #0]
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e16:	2100      	movs	r1, #0
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 f846 	bl	8013eaa <USBH_GetDescriptor>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8013e22:	7bfb      	ldrb	r3, [r7, #15]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d107      	bne.n	8013e38 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8013e28:	887b      	ldrh	r3, [r7, #2]
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	68b9      	ldr	r1, [r7, #8]
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f000 f9b0 	bl	8014194 <USBH_ParseCfgDesc>
 8013e34:	4603      	mov	r3, r0
 8013e36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3710      	adds	r7, #16
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}

08013e42 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8013e42:	b580      	push	{r7, lr}
 8013e44:	b088      	sub	sp, #32
 8013e46:	af02      	add	r7, sp, #8
 8013e48:	60f8      	str	r0, [r7, #12]
 8013e4a:	607a      	str	r2, [r7, #4]
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	460b      	mov	r3, r1
 8013e50:	72fb      	strb	r3, [r7, #11]
 8013e52:	4613      	mov	r3, r2
 8013e54:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8013e56:	893b      	ldrh	r3, [r7, #8]
 8013e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013e5c:	d802      	bhi.n	8013e64 <USBH_Get_StringDesc+0x22>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d101      	bne.n	8013e68 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013e64:	2303      	movs	r3, #3
 8013e66:	e01c      	b.n	8013ea2 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8013e68:	7afb      	ldrb	r3, [r7, #11]
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013e70:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013e78:	893b      	ldrh	r3, [r7, #8]
 8013e7a:	9300      	str	r3, [sp, #0]
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	2100      	movs	r1, #0
 8013e80:	68f8      	ldr	r0, [r7, #12]
 8013e82:	f000 f812 	bl	8013eaa <USBH_GetDescriptor>
 8013e86:	4603      	mov	r3, r0
 8013e88:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8013e8a:	7dfb      	ldrb	r3, [r7, #23]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d107      	bne.n	8013ea0 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013e96:	893a      	ldrh	r2, [r7, #8]
 8013e98:	6879      	ldr	r1, [r7, #4]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f000 fb8d 	bl	80145ba <USBH_ParseStringDesc>
  }

  return status;
 8013ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3718      	adds	r7, #24
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}

08013eaa <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8013eaa:	b580      	push	{r7, lr}
 8013eac:	b084      	sub	sp, #16
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	60f8      	str	r0, [r7, #12]
 8013eb2:	607b      	str	r3, [r7, #4]
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	72fb      	strb	r3, [r7, #11]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	789b      	ldrb	r3, [r3, #2]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d11c      	bne.n	8013efe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8013ec4:	7afb      	ldrb	r3, [r7, #11]
 8013ec6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013eca:	b2da      	uxtb	r2, r3
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	2206      	movs	r2, #6
 8013ed4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	893a      	ldrh	r2, [r7, #8]
 8013eda:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013edc:	893b      	ldrh	r3, [r7, #8]
 8013ede:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013ee6:	d104      	bne.n	8013ef2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	f240 4209 	movw	r2, #1033	@ 0x409
 8013eee:	829a      	strh	r2, [r3, #20]
 8013ef0:	e002      	b.n	8013ef8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	8b3a      	ldrh	r2, [r7, #24]
 8013efc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8013efe:	8b3b      	ldrh	r3, [r7, #24]
 8013f00:	461a      	mov	r2, r3
 8013f02:	6879      	ldr	r1, [r7, #4]
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	f000 fba5 	bl	8014654 <USBH_CtlReq>
 8013f0a:	4603      	mov	r3, r0
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3710      	adds	r7, #16
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	460b      	mov	r3, r1
 8013f1e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	789b      	ldrb	r3, [r3, #2]
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d10f      	bne.n	8013f48 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2205      	movs	r2, #5
 8013f32:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8013f34:	78fb      	ldrb	r3, [r7, #3]
 8013f36:	b29a      	uxth	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2200      	movs	r2, #0
 8013f46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013f48:	2200      	movs	r2, #0
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f000 fb81 	bl	8014654 <USBH_CtlReq>
 8013f52:	4603      	mov	r3, r0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3708      	adds	r7, #8
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	460b      	mov	r3, r1
 8013f66:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	789b      	ldrb	r3, [r3, #2]
 8013f6c:	2b01      	cmp	r3, #1
 8013f6e:	d10e      	bne.n	8013f8e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2200      	movs	r2, #0
 8013f74:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2209      	movs	r2, #9
 8013f7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	887a      	ldrh	r2, [r7, #2]
 8013f80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2200      	movs	r2, #0
 8013f86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013f8e:	2200      	movs	r2, #0
 8013f90:	2100      	movs	r1, #0
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f000 fb5e 	bl	8014654 <USBH_CtlReq>
 8013f98:	4603      	mov	r3, r0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3708      	adds	r7, #8
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}

08013fa2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8013fa2:	b580      	push	{r7, lr}
 8013fa4:	b082      	sub	sp, #8
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	6078      	str	r0, [r7, #4]
 8013faa:	460b      	mov	r3, r1
 8013fac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	789b      	ldrb	r3, [r3, #2]
 8013fb2:	2b01      	cmp	r3, #1
 8013fb4:	d10f      	bne.n	8013fd6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2203      	movs	r2, #3
 8013fc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8013fc2:	78fb      	ldrb	r3, [r7, #3]
 8013fc4:	b29a      	uxth	r2, r3
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	2100      	movs	r1, #0
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f000 fb3a 	bl	8014654 <USBH_CtlReq>
 8013fe0:	4603      	mov	r3, r0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3708      	adds	r7, #8
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8013fea:	b580      	push	{r7, lr}
 8013fec:	b082      	sub	sp, #8
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
 8013ff2:	460b      	mov	r3, r1
 8013ff4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	789b      	ldrb	r3, [r3, #2]
 8013ffa:	2b01      	cmp	r3, #1
 8013ffc:	d10f      	bne.n	801401e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2202      	movs	r2, #2
 8014002:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2201      	movs	r2, #1
 8014008:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2200      	movs	r2, #0
 801400e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8014010:	78fb      	ldrb	r3, [r7, #3]
 8014012:	b29a      	uxth	r2, r3
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2200      	movs	r2, #0
 801401c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801401e:	2200      	movs	r2, #0
 8014020:	2100      	movs	r1, #0
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	f000 fb16 	bl	8014654 <USBH_CtlReq>
 8014028:	4603      	mov	r3, r0
}
 801402a:	4618      	mov	r0, r3
 801402c:	3708      	adds	r7, #8
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
	...

08014034 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8014034:	b480      	push	{r7}
 8014036:	b087      	sub	sp, #28
 8014038:	af00      	add	r7, sp, #0
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	4613      	mov	r3, r2
 8014040:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8014048:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 801404a:	2300      	movs	r3, #0
 801404c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d101      	bne.n	8014058 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8014054:	2302      	movs	r3, #2
 8014056:	e094      	b.n	8014182 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	781a      	ldrb	r2, [r3, #0]
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	785a      	ldrb	r2, [r3, #1]
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	3302      	adds	r3, #2
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	461a      	mov	r2, r3
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	3303      	adds	r3, #3
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	021b      	lsls	r3, r3, #8
 8014078:	b29b      	uxth	r3, r3
 801407a:	4313      	orrs	r3, r2
 801407c:	b29a      	uxth	r2, r3
 801407e:	693b      	ldr	r3, [r7, #16]
 8014080:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	791a      	ldrb	r2, [r3, #4]
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	795a      	ldrb	r2, [r3, #5]
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	799a      	ldrb	r2, [r3, #6]
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	79da      	ldrb	r2, [r3, #7]
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d004      	beq.n	80140b6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	d11b      	bne.n	80140ee <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	79db      	ldrb	r3, [r3, #7]
 80140ba:	2b20      	cmp	r3, #32
 80140bc:	dc0f      	bgt.n	80140de <USBH_ParseDevDesc+0xaa>
 80140be:	2b08      	cmp	r3, #8
 80140c0:	db0f      	blt.n	80140e2 <USBH_ParseDevDesc+0xae>
 80140c2:	3b08      	subs	r3, #8
 80140c4:	4a32      	ldr	r2, [pc, #200]	@ (8014190 <USBH_ParseDevDesc+0x15c>)
 80140c6:	fa22 f303 	lsr.w	r3, r2, r3
 80140ca:	f003 0301 	and.w	r3, r3, #1
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	bf14      	ite	ne
 80140d2:	2301      	movne	r3, #1
 80140d4:	2300      	moveq	r3, #0
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d106      	bne.n	80140ea <USBH_ParseDevDesc+0xb6>
 80140dc:	e001      	b.n	80140e2 <USBH_ParseDevDesc+0xae>
 80140de:	2b40      	cmp	r3, #64	@ 0x40
 80140e0:	d003      	beq.n	80140ea <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	2208      	movs	r2, #8
 80140e6:	71da      	strb	r2, [r3, #7]
        break;
 80140e8:	e000      	b.n	80140ec <USBH_ParseDevDesc+0xb8>
        break;
 80140ea:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80140ec:	e00e      	b.n	801410c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80140f4:	2b02      	cmp	r3, #2
 80140f6:	d107      	bne.n	8014108 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	79db      	ldrb	r3, [r3, #7]
 80140fc:	2b08      	cmp	r3, #8
 80140fe:	d005      	beq.n	801410c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	2208      	movs	r2, #8
 8014104:	71da      	strb	r2, [r3, #7]
 8014106:	e001      	b.n	801410c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8014108:	2303      	movs	r3, #3
 801410a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 801410c:	88fb      	ldrh	r3, [r7, #6]
 801410e:	2b08      	cmp	r3, #8
 8014110:	d936      	bls.n	8014180 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	3308      	adds	r3, #8
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	461a      	mov	r2, r3
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	3309      	adds	r3, #9
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	021b      	lsls	r3, r3, #8
 8014122:	b29b      	uxth	r3, r3
 8014124:	4313      	orrs	r3, r2
 8014126:	b29a      	uxth	r2, r3
 8014128:	693b      	ldr	r3, [r7, #16]
 801412a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	330a      	adds	r3, #10
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	461a      	mov	r2, r3
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	330b      	adds	r3, #11
 8014138:	781b      	ldrb	r3, [r3, #0]
 801413a:	021b      	lsls	r3, r3, #8
 801413c:	b29b      	uxth	r3, r3
 801413e:	4313      	orrs	r3, r2
 8014140:	b29a      	uxth	r2, r3
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	330c      	adds	r3, #12
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	461a      	mov	r2, r3
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	330d      	adds	r3, #13
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	021b      	lsls	r3, r3, #8
 8014156:	b29b      	uxth	r3, r3
 8014158:	4313      	orrs	r3, r2
 801415a:	b29a      	uxth	r2, r3
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	7b9a      	ldrb	r2, [r3, #14]
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	7bda      	ldrb	r2, [r3, #15]
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	7c1a      	ldrb	r2, [r3, #16]
 8014174:	693b      	ldr	r3, [r7, #16]
 8014176:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	7c5a      	ldrb	r2, [r3, #17]
 801417c:	693b      	ldr	r3, [r7, #16]
 801417e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8014180:	7dfb      	ldrb	r3, [r7, #23]
}
 8014182:	4618      	mov	r0, r3
 8014184:	371c      	adds	r7, #28
 8014186:	46bd      	mov	sp, r7
 8014188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418c:	4770      	bx	lr
 801418e:	bf00      	nop
 8014190:	01000101 	.word	0x01000101

08014194 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b08c      	sub	sp, #48	@ 0x30
 8014198:	af00      	add	r7, sp, #0
 801419a:	60f8      	str	r0, [r7, #12]
 801419c:	60b9      	str	r1, [r7, #8]
 801419e:	4613      	mov	r3, r2
 80141a0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80141a8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80141aa:	2300      	movs	r3, #0
 80141ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80141b0:	2300      	movs	r3, #0
 80141b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80141b6:	2300      	movs	r3, #0
 80141b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d101      	bne.n	80141c6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80141c2:	2302      	movs	r3, #2
 80141c4:	e0de      	b.n	8014384 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80141ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	2b09      	cmp	r3, #9
 80141d0:	d002      	beq.n	80141d8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80141d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141d4:	2209      	movs	r2, #9
 80141d6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	781a      	ldrb	r2, [r3, #0]
 80141dc:	6a3b      	ldr	r3, [r7, #32]
 80141de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	785a      	ldrb	r2, [r3, #1]
 80141e4:	6a3b      	ldr	r3, [r7, #32]
 80141e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	3302      	adds	r3, #2
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	461a      	mov	r2, r3
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	3303      	adds	r3, #3
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	021b      	lsls	r3, r3, #8
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	4313      	orrs	r3, r2
 80141fc:	b29b      	uxth	r3, r3
 80141fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014202:	bf28      	it	cs
 8014204:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8014208:	b29a      	uxth	r2, r3
 801420a:	6a3b      	ldr	r3, [r7, #32]
 801420c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	791a      	ldrb	r2, [r3, #4]
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	795a      	ldrb	r2, [r3, #5]
 801421a:	6a3b      	ldr	r3, [r7, #32]
 801421c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	799a      	ldrb	r2, [r3, #6]
 8014222:	6a3b      	ldr	r3, [r7, #32]
 8014224:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	79da      	ldrb	r2, [r3, #7]
 801422a:	6a3b      	ldr	r3, [r7, #32]
 801422c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	7a1a      	ldrb	r2, [r3, #8]
 8014232:	6a3b      	ldr	r3, [r7, #32]
 8014234:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014236:	88fb      	ldrh	r3, [r7, #6]
 8014238:	2b09      	cmp	r3, #9
 801423a:	f240 80a1 	bls.w	8014380 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 801423e:	2309      	movs	r3, #9
 8014240:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8014242:	2300      	movs	r3, #0
 8014244:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014246:	e085      	b.n	8014354 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014248:	f107 0316 	add.w	r3, r7, #22
 801424c:	4619      	mov	r1, r3
 801424e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014250:	f000 f9e6 	bl	8014620 <USBH_GetNextDesc>
 8014254:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8014256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014258:	785b      	ldrb	r3, [r3, #1]
 801425a:	2b04      	cmp	r3, #4
 801425c:	d17a      	bne.n	8014354 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801425e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	2b09      	cmp	r3, #9
 8014264:	d002      	beq.n	801426c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8014266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014268:	2209      	movs	r2, #9
 801426a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 801426c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014270:	221a      	movs	r2, #26
 8014272:	fb02 f303 	mul.w	r3, r2, r3
 8014276:	3308      	adds	r3, #8
 8014278:	6a3a      	ldr	r2, [r7, #32]
 801427a:	4413      	add	r3, r2
 801427c:	3302      	adds	r3, #2
 801427e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8014280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014282:	69f8      	ldr	r0, [r7, #28]
 8014284:	f000 f882 	bl	801438c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8014288:	2300      	movs	r3, #0
 801428a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801428e:	2300      	movs	r3, #0
 8014290:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014292:	e043      	b.n	801431c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014294:	f107 0316 	add.w	r3, r7, #22
 8014298:	4619      	mov	r1, r3
 801429a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801429c:	f000 f9c0 	bl	8014620 <USBH_GetNextDesc>
 80142a0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80142a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142a4:	785b      	ldrb	r3, [r3, #1]
 80142a6:	2b05      	cmp	r3, #5
 80142a8:	d138      	bne.n	801431c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	795b      	ldrb	r3, [r3, #5]
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d113      	bne.n	80142da <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80142b2:	69fb      	ldr	r3, [r7, #28]
 80142b4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80142b6:	2b02      	cmp	r3, #2
 80142b8:	d003      	beq.n	80142c2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80142ba:	69fb      	ldr	r3, [r7, #28]
 80142bc:	799b      	ldrb	r3, [r3, #6]
 80142be:	2b03      	cmp	r3, #3
 80142c0:	d10b      	bne.n	80142da <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	79db      	ldrb	r3, [r3, #7]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d10b      	bne.n	80142e2 <USBH_ParseCfgDesc+0x14e>
 80142ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	2b09      	cmp	r3, #9
 80142d0:	d007      	beq.n	80142e2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80142d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142d4:	2209      	movs	r2, #9
 80142d6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80142d8:	e003      	b.n	80142e2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80142da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142dc:	2207      	movs	r2, #7
 80142de:	701a      	strb	r2, [r3, #0]
 80142e0:	e000      	b.n	80142e4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80142e2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80142e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80142e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80142ec:	3201      	adds	r2, #1
 80142ee:	00d2      	lsls	r2, r2, #3
 80142f0:	211a      	movs	r1, #26
 80142f2:	fb01 f303 	mul.w	r3, r1, r3
 80142f6:	4413      	add	r3, r2
 80142f8:	3308      	adds	r3, #8
 80142fa:	6a3a      	ldr	r2, [r7, #32]
 80142fc:	4413      	add	r3, r2
 80142fe:	3304      	adds	r3, #4
 8014300:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8014302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014304:	69b9      	ldr	r1, [r7, #24]
 8014306:	68f8      	ldr	r0, [r7, #12]
 8014308:	f000 f86f 	bl	80143ea <USBH_ParseEPDesc>
 801430c:	4603      	mov	r3, r0
 801430e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8014312:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014316:	3301      	adds	r3, #1
 8014318:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801431c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014320:	2b01      	cmp	r3, #1
 8014322:	d80a      	bhi.n	801433a <USBH_ParseCfgDesc+0x1a6>
 8014324:	69fb      	ldr	r3, [r7, #28]
 8014326:	791b      	ldrb	r3, [r3, #4]
 8014328:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801432c:	429a      	cmp	r2, r3
 801432e:	d204      	bcs.n	801433a <USBH_ParseCfgDesc+0x1a6>
 8014330:	6a3b      	ldr	r3, [r7, #32]
 8014332:	885a      	ldrh	r2, [r3, #2]
 8014334:	8afb      	ldrh	r3, [r7, #22]
 8014336:	429a      	cmp	r2, r3
 8014338:	d8ac      	bhi.n	8014294 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	791b      	ldrb	r3, [r3, #4]
 801433e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8014342:	429a      	cmp	r2, r3
 8014344:	d201      	bcs.n	801434a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8014346:	2303      	movs	r3, #3
 8014348:	e01c      	b.n	8014384 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 801434a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801434e:	3301      	adds	r3, #1
 8014350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014358:	2b01      	cmp	r3, #1
 801435a:	d805      	bhi.n	8014368 <USBH_ParseCfgDesc+0x1d4>
 801435c:	6a3b      	ldr	r3, [r7, #32]
 801435e:	885a      	ldrh	r2, [r3, #2]
 8014360:	8afb      	ldrh	r3, [r7, #22]
 8014362:	429a      	cmp	r2, r3
 8014364:	f63f af70 	bhi.w	8014248 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8014368:	6a3b      	ldr	r3, [r7, #32]
 801436a:	791b      	ldrb	r3, [r3, #4]
 801436c:	2b02      	cmp	r3, #2
 801436e:	bf28      	it	cs
 8014370:	2302      	movcs	r3, #2
 8014372:	b2db      	uxtb	r3, r3
 8014374:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014378:	429a      	cmp	r2, r3
 801437a:	d201      	bcs.n	8014380 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 801437c:	2303      	movs	r3, #3
 801437e:	e001      	b.n	8014384 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8014380:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8014384:	4618      	mov	r0, r3
 8014386:	3730      	adds	r7, #48	@ 0x30
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}

0801438c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801438c:	b480      	push	{r7}
 801438e:	b083      	sub	sp, #12
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
 8014394:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	781a      	ldrb	r2, [r3, #0]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	785a      	ldrb	r2, [r3, #1]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	789a      	ldrb	r2, [r3, #2]
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	78da      	ldrb	r2, [r3, #3]
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	791a      	ldrb	r2, [r3, #4]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	795a      	ldrb	r2, [r3, #5]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	799a      	ldrb	r2, [r3, #6]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	79da      	ldrb	r2, [r3, #7]
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	7a1a      	ldrb	r2, [r3, #8]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	721a      	strb	r2, [r3, #8]
}
 80143de:	bf00      	nop
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr

080143ea <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80143ea:	b480      	push	{r7}
 80143ec:	b087      	sub	sp, #28
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	60f8      	str	r0, [r7, #12]
 80143f2:	60b9      	str	r1, [r7, #8]
 80143f4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80143f6:	2300      	movs	r3, #0
 80143f8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	781a      	ldrb	r2, [r3, #0]
 80143fe:	68bb      	ldr	r3, [r7, #8]
 8014400:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	785a      	ldrb	r2, [r3, #1]
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	789a      	ldrb	r2, [r3, #2]
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	78da      	ldrb	r2, [r3, #3]
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	3304      	adds	r3, #4
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	461a      	mov	r2, r3
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	3305      	adds	r3, #5
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	021b      	lsls	r3, r3, #8
 801442a:	b29b      	uxth	r3, r3
 801442c:	4313      	orrs	r3, r2
 801442e:	b29a      	uxth	r2, r3
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	799a      	ldrb	r2, [r3, #6]
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	889b      	ldrh	r3, [r3, #4]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d009      	beq.n	8014458 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8014448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801444c:	d804      	bhi.n	8014458 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8014452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014456:	d901      	bls.n	801445c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8014458:	2303      	movs	r3, #3
 801445a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014462:	2b00      	cmp	r3, #0
 8014464:	d136      	bne.n	80144d4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	78db      	ldrb	r3, [r3, #3]
 801446a:	f003 0303 	and.w	r3, r3, #3
 801446e:	2b02      	cmp	r3, #2
 8014470:	d108      	bne.n	8014484 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	889b      	ldrh	r3, [r3, #4]
 8014476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801447a:	f240 8097 	bls.w	80145ac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801447e:	2303      	movs	r3, #3
 8014480:	75fb      	strb	r3, [r7, #23]
 8014482:	e093      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	78db      	ldrb	r3, [r3, #3]
 8014488:	f003 0303 	and.w	r3, r3, #3
 801448c:	2b00      	cmp	r3, #0
 801448e:	d107      	bne.n	80144a0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	889b      	ldrh	r3, [r3, #4]
 8014494:	2b40      	cmp	r3, #64	@ 0x40
 8014496:	f240 8089 	bls.w	80145ac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801449a:	2303      	movs	r3, #3
 801449c:	75fb      	strb	r3, [r7, #23]
 801449e:	e085      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	78db      	ldrb	r3, [r3, #3]
 80144a4:	f003 0303 	and.w	r3, r3, #3
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	d005      	beq.n	80144b8 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	78db      	ldrb	r3, [r3, #3]
 80144b0:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80144b4:	2b03      	cmp	r3, #3
 80144b6:	d10a      	bne.n	80144ce <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	799b      	ldrb	r3, [r3, #6]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d003      	beq.n	80144c8 <USBH_ParseEPDesc+0xde>
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	799b      	ldrb	r3, [r3, #6]
 80144c4:	2b10      	cmp	r3, #16
 80144c6:	d970      	bls.n	80145aa <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80144c8:	2303      	movs	r3, #3
 80144ca:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80144cc:	e06d      	b.n	80145aa <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80144ce:	2303      	movs	r3, #3
 80144d0:	75fb      	strb	r3, [r7, #23]
 80144d2:	e06b      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80144da:	2b01      	cmp	r3, #1
 80144dc:	d13c      	bne.n	8014558 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	78db      	ldrb	r3, [r3, #3]
 80144e2:	f003 0303 	and.w	r3, r3, #3
 80144e6:	2b02      	cmp	r3, #2
 80144e8:	d005      	beq.n	80144f6 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	78db      	ldrb	r3, [r3, #3]
 80144ee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d106      	bne.n	8014504 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	889b      	ldrh	r3, [r3, #4]
 80144fa:	2b40      	cmp	r3, #64	@ 0x40
 80144fc:	d956      	bls.n	80145ac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80144fe:	2303      	movs	r3, #3
 8014500:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014502:	e053      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	78db      	ldrb	r3, [r3, #3]
 8014508:	f003 0303 	and.w	r3, r3, #3
 801450c:	2b01      	cmp	r3, #1
 801450e:	d10e      	bne.n	801452e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	799b      	ldrb	r3, [r3, #6]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d007      	beq.n	8014528 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801451c:	2b10      	cmp	r3, #16
 801451e:	d803      	bhi.n	8014528 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8014524:	2b40      	cmp	r3, #64	@ 0x40
 8014526:	d941      	bls.n	80145ac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014528:	2303      	movs	r3, #3
 801452a:	75fb      	strb	r3, [r7, #23]
 801452c:	e03e      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	78db      	ldrb	r3, [r3, #3]
 8014532:	f003 0303 	and.w	r3, r3, #3
 8014536:	2b03      	cmp	r3, #3
 8014538:	d10b      	bne.n	8014552 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	799b      	ldrb	r3, [r3, #6]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d004      	beq.n	801454c <USBH_ParseEPDesc+0x162>
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	889b      	ldrh	r3, [r3, #4]
 8014546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801454a:	d32f      	bcc.n	80145ac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801454c:	2303      	movs	r3, #3
 801454e:	75fb      	strb	r3, [r7, #23]
 8014550:	e02c      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8014552:	2303      	movs	r3, #3
 8014554:	75fb      	strb	r3, [r7, #23]
 8014556:	e029      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801455e:	2b02      	cmp	r3, #2
 8014560:	d120      	bne.n	80145a4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	78db      	ldrb	r3, [r3, #3]
 8014566:	f003 0303 	and.w	r3, r3, #3
 801456a:	2b00      	cmp	r3, #0
 801456c:	d106      	bne.n	801457c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	889b      	ldrh	r3, [r3, #4]
 8014572:	2b08      	cmp	r3, #8
 8014574:	d01a      	beq.n	80145ac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014576:	2303      	movs	r3, #3
 8014578:	75fb      	strb	r3, [r7, #23]
 801457a:	e017      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	78db      	ldrb	r3, [r3, #3]
 8014580:	f003 0303 	and.w	r3, r3, #3
 8014584:	2b03      	cmp	r3, #3
 8014586:	d10a      	bne.n	801459e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	799b      	ldrb	r3, [r3, #6]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d003      	beq.n	8014598 <USBH_ParseEPDesc+0x1ae>
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	889b      	ldrh	r3, [r3, #4]
 8014594:	2b08      	cmp	r3, #8
 8014596:	d909      	bls.n	80145ac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014598:	2303      	movs	r3, #3
 801459a:	75fb      	strb	r3, [r7, #23]
 801459c:	e006      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801459e:	2303      	movs	r3, #3
 80145a0:	75fb      	strb	r3, [r7, #23]
 80145a2:	e003      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80145a4:	2303      	movs	r3, #3
 80145a6:	75fb      	strb	r3, [r7, #23]
 80145a8:	e000      	b.n	80145ac <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80145aa:	bf00      	nop
  }

  return status;
 80145ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	371c      	adds	r7, #28
 80145b2:	46bd      	mov	sp, r7
 80145b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b8:	4770      	bx	lr

080145ba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80145ba:	b480      	push	{r7}
 80145bc:	b087      	sub	sp, #28
 80145be:	af00      	add	r7, sp, #0
 80145c0:	60f8      	str	r0, [r7, #12]
 80145c2:	60b9      	str	r1, [r7, #8]
 80145c4:	4613      	mov	r3, r2
 80145c6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	3301      	adds	r3, #1
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	2b03      	cmp	r3, #3
 80145d0:	d120      	bne.n	8014614 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	1e9a      	subs	r2, r3, #2
 80145d8:	88fb      	ldrh	r3, [r7, #6]
 80145da:	4293      	cmp	r3, r2
 80145dc:	bf28      	it	cs
 80145de:	4613      	movcs	r3, r2
 80145e0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	3302      	adds	r3, #2
 80145e6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80145e8:	2300      	movs	r3, #0
 80145ea:	82fb      	strh	r3, [r7, #22]
 80145ec:	e00b      	b.n	8014606 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80145ee:	8afb      	ldrh	r3, [r7, #22]
 80145f0:	68fa      	ldr	r2, [r7, #12]
 80145f2:	4413      	add	r3, r2
 80145f4:	781a      	ldrb	r2, [r3, #0]
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	3301      	adds	r3, #1
 80145fe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8014600:	8afb      	ldrh	r3, [r7, #22]
 8014602:	3302      	adds	r3, #2
 8014604:	82fb      	strh	r3, [r7, #22]
 8014606:	8afa      	ldrh	r2, [r7, #22]
 8014608:	8abb      	ldrh	r3, [r7, #20]
 801460a:	429a      	cmp	r2, r3
 801460c:	d3ef      	bcc.n	80145ee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	2200      	movs	r2, #0
 8014612:	701a      	strb	r2, [r3, #0]
  }
}
 8014614:	bf00      	nop
 8014616:	371c      	adds	r7, #28
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014620:	b480      	push	{r7}
 8014622:	b085      	sub	sp, #20
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	881b      	ldrh	r3, [r3, #0]
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	7812      	ldrb	r2, [r2, #0]
 8014632:	4413      	add	r3, r2
 8014634:	b29a      	uxth	r2, r3
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	4413      	add	r3, r2
 8014644:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014646:	68fb      	ldr	r3, [r7, #12]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3714      	adds	r7, #20
 801464c:	46bd      	mov	sp, r7
 801464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014652:	4770      	bx	lr

08014654 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b086      	sub	sp, #24
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	4613      	mov	r3, r2
 8014660:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8014662:	2301      	movs	r3, #1
 8014664:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	789b      	ldrb	r3, [r3, #2]
 801466a:	2b01      	cmp	r3, #1
 801466c:	d002      	beq.n	8014674 <USBH_CtlReq+0x20>
 801466e:	2b02      	cmp	r3, #2
 8014670:	d015      	beq.n	801469e <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8014672:	e033      	b.n	80146dc <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	68ba      	ldr	r2, [r7, #8]
 8014678:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	88fa      	ldrh	r2, [r7, #6]
 801467e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	2201      	movs	r2, #1
 8014684:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2202      	movs	r2, #2
 801468a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801468c:	2301      	movs	r3, #1
 801468e:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014690:	2300      	movs	r3, #0
 8014692:	2200      	movs	r2, #0
 8014694:	2103      	movs	r1, #3
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	f7ff fb32 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 801469c:	e01e      	b.n	80146dc <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 801469e:	68f8      	ldr	r0, [r7, #12]
 80146a0:	f000 f822 	bl	80146e8 <USBH_HandleControl>
 80146a4:	4603      	mov	r3, r0
 80146a6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80146a8:	7dfb      	ldrb	r3, [r7, #23]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d002      	beq.n	80146b4 <USBH_CtlReq+0x60>
 80146ae:	7dfb      	ldrb	r3, [r7, #23]
 80146b0:	2b03      	cmp	r3, #3
 80146b2:	d106      	bne.n	80146c2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2201      	movs	r2, #1
 80146b8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	2200      	movs	r2, #0
 80146be:	761a      	strb	r2, [r3, #24]
 80146c0:	e005      	b.n	80146ce <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 80146c2:	7dfb      	ldrb	r3, [r7, #23]
 80146c4:	2b02      	cmp	r3, #2
 80146c6:	d102      	bne.n	80146ce <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2201      	movs	r2, #1
 80146cc:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80146ce:	2300      	movs	r3, #0
 80146d0:	2200      	movs	r2, #0
 80146d2:	2103      	movs	r1, #3
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f7ff fb13 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 80146da:	bf00      	nop
  }
  return status;
 80146dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3718      	adds	r7, #24
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
	...

080146e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b086      	sub	sp, #24
 80146ec:	af02      	add	r7, sp, #8
 80146ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80146f0:	2301      	movs	r3, #1
 80146f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80146f4:	2300      	movs	r3, #0
 80146f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	7e1b      	ldrb	r3, [r3, #24]
 80146fc:	3b01      	subs	r3, #1
 80146fe:	2b0a      	cmp	r3, #10
 8014700:	f200 81b2 	bhi.w	8014a68 <USBH_HandleControl+0x380>
 8014704:	a201      	add	r2, pc, #4	@ (adr r2, 801470c <USBH_HandleControl+0x24>)
 8014706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801470a:	bf00      	nop
 801470c:	08014739 	.word	0x08014739
 8014710:	08014753 	.word	0x08014753
 8014714:	080147d5 	.word	0x080147d5
 8014718:	080147fb 	.word	0x080147fb
 801471c:	08014859 	.word	0x08014859
 8014720:	08014883 	.word	0x08014883
 8014724:	08014905 	.word	0x08014905
 8014728:	08014927 	.word	0x08014927
 801472c:	08014989 	.word	0x08014989
 8014730:	080149af 	.word	0x080149af
 8014734:	08014a11 	.word	0x08014a11
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f103 0110 	add.w	r1, r3, #16
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	795b      	ldrb	r3, [r3, #5]
 8014742:	461a      	mov	r2, r3
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 f99f 	bl	8014a88 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2202      	movs	r2, #2
 801474e:	761a      	strb	r2, [r3, #24]
      break;
 8014750:	e195      	b.n	8014a7e <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	795b      	ldrb	r3, [r3, #5]
 8014756:	4619      	mov	r1, r3
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f006 fd33 	bl	801b1c4 <USBH_LL_GetURBState>
 801475e:	4603      	mov	r3, r0
 8014760:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8014762:	7bbb      	ldrb	r3, [r7, #14]
 8014764:	2b01      	cmp	r3, #1
 8014766:	d124      	bne.n	80147b2 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	7c1b      	ldrb	r3, [r3, #16]
 801476c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014770:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	8adb      	ldrh	r3, [r3, #22]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d00a      	beq.n	8014790 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801477a:	7b7b      	ldrb	r3, [r7, #13]
 801477c:	2b80      	cmp	r3, #128	@ 0x80
 801477e:	d103      	bne.n	8014788 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2203      	movs	r2, #3
 8014784:	761a      	strb	r2, [r3, #24]
 8014786:	e00d      	b.n	80147a4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2205      	movs	r2, #5
 801478c:	761a      	strb	r2, [r3, #24]
 801478e:	e009      	b.n	80147a4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8014790:	7b7b      	ldrb	r3, [r7, #13]
 8014792:	2b80      	cmp	r3, #128	@ 0x80
 8014794:	d103      	bne.n	801479e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2209      	movs	r2, #9
 801479a:	761a      	strb	r2, [r3, #24]
 801479c:	e002      	b.n	80147a4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2207      	movs	r2, #7
 80147a2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80147a4:	2300      	movs	r3, #0
 80147a6:	2200      	movs	r2, #0
 80147a8:	2103      	movs	r1, #3
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f7ff faa8 	bl	8013d00 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80147b0:	e15c      	b.n	8014a6c <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80147b2:	7bbb      	ldrb	r3, [r7, #14]
 80147b4:	2b04      	cmp	r3, #4
 80147b6:	d003      	beq.n	80147c0 <USBH_HandleControl+0xd8>
 80147b8:	7bbb      	ldrb	r3, [r7, #14]
 80147ba:	2b02      	cmp	r3, #2
 80147bc:	f040 8156 	bne.w	8014a6c <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	220b      	movs	r2, #11
 80147c4:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80147c6:	2300      	movs	r3, #0
 80147c8:	2200      	movs	r2, #0
 80147ca:	2103      	movs	r1, #3
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7ff fa97 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 80147d2:	e14b      	b.n	8014a6c <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80147da:	b29a      	uxth	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6899      	ldr	r1, [r3, #8]
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	899a      	ldrh	r2, [r3, #12]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	791b      	ldrb	r3, [r3, #4]
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f000 f98a 	bl	8014b06 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2204      	movs	r2, #4
 80147f6:	761a      	strb	r2, [r3, #24]
      break;
 80147f8:	e141      	b.n	8014a7e <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	791b      	ldrb	r3, [r3, #4]
 80147fe:	4619      	mov	r1, r3
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f006 fcdf 	bl	801b1c4 <USBH_LL_GetURBState>
 8014806:	4603      	mov	r3, r0
 8014808:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801480a:	7bbb      	ldrb	r3, [r7, #14]
 801480c:	2b01      	cmp	r3, #1
 801480e:	d109      	bne.n	8014824 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2209      	movs	r2, #9
 8014814:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014816:	2300      	movs	r3, #0
 8014818:	2200      	movs	r2, #0
 801481a:	2103      	movs	r1, #3
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f7ff fa6f 	bl	8013d00 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8014822:	e125      	b.n	8014a70 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8014824:	7bbb      	ldrb	r3, [r7, #14]
 8014826:	2b05      	cmp	r3, #5
 8014828:	d108      	bne.n	801483c <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 801482a:	2303      	movs	r3, #3
 801482c:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801482e:	2300      	movs	r3, #0
 8014830:	2200      	movs	r2, #0
 8014832:	2103      	movs	r1, #3
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f7ff fa63 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 801483a:	e119      	b.n	8014a70 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 801483c:	7bbb      	ldrb	r3, [r7, #14]
 801483e:	2b04      	cmp	r3, #4
 8014840:	f040 8116 	bne.w	8014a70 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	220b      	movs	r2, #11
 8014848:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801484a:	2300      	movs	r3, #0
 801484c:	2200      	movs	r2, #0
 801484e:	2103      	movs	r1, #3
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f7ff fa55 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8014856:	e10b      	b.n	8014a70 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6899      	ldr	r1, [r3, #8]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	899a      	ldrh	r2, [r3, #12]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	795b      	ldrb	r3, [r3, #5]
 8014864:	2001      	movs	r0, #1
 8014866:	9000      	str	r0, [sp, #0]
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f000 f927 	bl	8014abc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014874:	b29a      	uxth	r2, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2206      	movs	r2, #6
 801487e:	761a      	strb	r2, [r3, #24]
      break;
 8014880:	e0fd      	b.n	8014a7e <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	795b      	ldrb	r3, [r3, #5]
 8014886:	4619      	mov	r1, r3
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f006 fc9b 	bl	801b1c4 <USBH_LL_GetURBState>
 801488e:	4603      	mov	r3, r0
 8014890:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014892:	7bbb      	ldrb	r3, [r7, #14]
 8014894:	2b01      	cmp	r3, #1
 8014896:	d109      	bne.n	80148ac <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2207      	movs	r2, #7
 801489c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801489e:	2300      	movs	r3, #0
 80148a0:	2200      	movs	r2, #0
 80148a2:	2103      	movs	r1, #3
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff fa2b 	bl	8013d00 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80148aa:	e0e3      	b.n	8014a74 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 80148ac:	7bbb      	ldrb	r3, [r7, #14]
 80148ae:	2b05      	cmp	r3, #5
 80148b0:	d10b      	bne.n	80148ca <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	220c      	movs	r2, #12
 80148b6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80148b8:	2303      	movs	r3, #3
 80148ba:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80148bc:	2300      	movs	r3, #0
 80148be:	2200      	movs	r2, #0
 80148c0:	2103      	movs	r1, #3
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f7ff fa1c 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 80148c8:	e0d4      	b.n	8014a74 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 80148ca:	7bbb      	ldrb	r3, [r7, #14]
 80148cc:	2b02      	cmp	r3, #2
 80148ce:	d109      	bne.n	80148e4 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2205      	movs	r2, #5
 80148d4:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80148d6:	2300      	movs	r3, #0
 80148d8:	2200      	movs	r2, #0
 80148da:	2103      	movs	r1, #3
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f7ff fa0f 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 80148e2:	e0c7      	b.n	8014a74 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 80148e4:	7bbb      	ldrb	r3, [r7, #14]
 80148e6:	2b04      	cmp	r3, #4
 80148e8:	f040 80c4 	bne.w	8014a74 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	220b      	movs	r2, #11
 80148f0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80148f2:	2302      	movs	r3, #2
 80148f4:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80148f6:	2300      	movs	r3, #0
 80148f8:	2200      	movs	r2, #0
 80148fa:	2103      	movs	r1, #3
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f7ff f9ff 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8014902:	e0b7      	b.n	8014a74 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	791b      	ldrb	r3, [r3, #4]
 8014908:	2200      	movs	r2, #0
 801490a:	2100      	movs	r1, #0
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f000 f8fa 	bl	8014b06 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014918:	b29a      	uxth	r2, r3
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2208      	movs	r2, #8
 8014922:	761a      	strb	r2, [r3, #24]

      break;
 8014924:	e0ab      	b.n	8014a7e <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	791b      	ldrb	r3, [r3, #4]
 801492a:	4619      	mov	r1, r3
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f006 fc49 	bl	801b1c4 <USBH_LL_GetURBState>
 8014932:	4603      	mov	r3, r0
 8014934:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014936:	7bbb      	ldrb	r3, [r7, #14]
 8014938:	2b01      	cmp	r3, #1
 801493a:	d10b      	bne.n	8014954 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	220d      	movs	r2, #13
 8014940:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8014942:	2300      	movs	r3, #0
 8014944:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014946:	2300      	movs	r3, #0
 8014948:	2200      	movs	r2, #0
 801494a:	2103      	movs	r1, #3
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f7ff f9d7 	bl	8013d00 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8014952:	e091      	b.n	8014a78 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 8014954:	7bbb      	ldrb	r3, [r7, #14]
 8014956:	2b04      	cmp	r3, #4
 8014958:	d109      	bne.n	801496e <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	220b      	movs	r2, #11
 801495e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014960:	2300      	movs	r3, #0
 8014962:	2200      	movs	r2, #0
 8014964:	2103      	movs	r1, #3
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f7ff f9ca 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 801496c:	e084      	b.n	8014a78 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 801496e:	7bbb      	ldrb	r3, [r7, #14]
 8014970:	2b05      	cmp	r3, #5
 8014972:	f040 8081 	bne.w	8014a78 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 8014976:	2303      	movs	r3, #3
 8014978:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801497a:	2300      	movs	r3, #0
 801497c:	2200      	movs	r2, #0
 801497e:	2103      	movs	r1, #3
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f7ff f9bd 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8014986:	e077      	b.n	8014a78 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	795b      	ldrb	r3, [r3, #5]
 801498c:	2201      	movs	r2, #1
 801498e:	9200      	str	r2, [sp, #0]
 8014990:	2200      	movs	r2, #0
 8014992:	2100      	movs	r1, #0
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f000 f891 	bl	8014abc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80149a0:	b29a      	uxth	r2, r3
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	220a      	movs	r2, #10
 80149aa:	761a      	strb	r2, [r3, #24]
      break;
 80149ac:	e067      	b.n	8014a7e <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	795b      	ldrb	r3, [r3, #5]
 80149b2:	4619      	mov	r1, r3
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f006 fc05 	bl	801b1c4 <USBH_LL_GetURBState>
 80149ba:	4603      	mov	r3, r0
 80149bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80149be:	7bbb      	ldrb	r3, [r7, #14]
 80149c0:	2b01      	cmp	r3, #1
 80149c2:	d10b      	bne.n	80149dc <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 80149c4:	2300      	movs	r3, #0
 80149c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	220d      	movs	r2, #13
 80149cc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80149ce:	2300      	movs	r3, #0
 80149d0:	2200      	movs	r2, #0
 80149d2:	2103      	movs	r1, #3
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f7ff f993 	bl	8013d00 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80149da:	e04f      	b.n	8014a7c <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 80149dc:	7bbb      	ldrb	r3, [r7, #14]
 80149de:	2b02      	cmp	r3, #2
 80149e0:	d109      	bne.n	80149f6 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2209      	movs	r2, #9
 80149e6:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80149e8:	2300      	movs	r3, #0
 80149ea:	2200      	movs	r2, #0
 80149ec:	2103      	movs	r1, #3
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f7ff f986 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 80149f4:	e042      	b.n	8014a7c <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 80149f6:	7bbb      	ldrb	r3, [r7, #14]
 80149f8:	2b04      	cmp	r3, #4
 80149fa:	d13f      	bne.n	8014a7c <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	220b      	movs	r2, #11
 8014a00:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014a02:	2300      	movs	r3, #0
 8014a04:	2200      	movs	r2, #0
 8014a06:	2103      	movs	r1, #3
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7ff f979 	bl	8013d00 <USBH_OS_PutMessage>
      break;
 8014a0e:	e035      	b.n	8014a7c <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	7e5b      	ldrb	r3, [r3, #25]
 8014a14:	3301      	adds	r3, #1
 8014a16:	b2da      	uxtb	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	765a      	strb	r2, [r3, #25]
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	7e5b      	ldrb	r3, [r3, #25]
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	d806      	bhi.n	8014a32 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2201      	movs	r2, #1
 8014a28:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2201      	movs	r2, #1
 8014a2e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8014a30:	e025      	b.n	8014a7e <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8014a38:	2106      	movs	r1, #6
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	2200      	movs	r2, #0
 8014a42:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	795b      	ldrb	r3, [r3, #5]
 8014a48:	4619      	mov	r1, r3
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f000 f90c 	bl	8014c68 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	791b      	ldrb	r3, [r3, #4]
 8014a54:	4619      	mov	r1, r3
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f000 f906 	bl	8014c68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8014a62:	2302      	movs	r3, #2
 8014a64:	73fb      	strb	r3, [r7, #15]
      break;
 8014a66:	e00a      	b.n	8014a7e <USBH_HandleControl+0x396>

    default:
      break;
 8014a68:	bf00      	nop
 8014a6a:	e008      	b.n	8014a7e <USBH_HandleControl+0x396>
      break;
 8014a6c:	bf00      	nop
 8014a6e:	e006      	b.n	8014a7e <USBH_HandleControl+0x396>
      break;
 8014a70:	bf00      	nop
 8014a72:	e004      	b.n	8014a7e <USBH_HandleControl+0x396>
      break;
 8014a74:	bf00      	nop
 8014a76:	e002      	b.n	8014a7e <USBH_HandleControl+0x396>
      break;
 8014a78:	bf00      	nop
 8014a7a:	e000      	b.n	8014a7e <USBH_HandleControl+0x396>
      break;
 8014a7c:	bf00      	nop
  }

  return status;
 8014a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3710      	adds	r7, #16
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b088      	sub	sp, #32
 8014a8c:	af04      	add	r7, sp, #16
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	4613      	mov	r3, r2
 8014a94:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014a96:	79f9      	ldrb	r1, [r7, #7]
 8014a98:	2300      	movs	r3, #0
 8014a9a:	9303      	str	r3, [sp, #12]
 8014a9c:	2308      	movs	r3, #8
 8014a9e:	9302      	str	r3, [sp, #8]
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	9301      	str	r3, [sp, #4]
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	9300      	str	r3, [sp, #0]
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	2200      	movs	r2, #0
 8014aac:	68f8      	ldr	r0, [r7, #12]
 8014aae:	f006 fb58 	bl	801b162 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8014ab2:	2300      	movs	r3, #0
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3710      	adds	r7, #16
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b088      	sub	sp, #32
 8014ac0:	af04      	add	r7, sp, #16
 8014ac2:	60f8      	str	r0, [r7, #12]
 8014ac4:	60b9      	str	r1, [r7, #8]
 8014ac6:	4611      	mov	r1, r2
 8014ac8:	461a      	mov	r2, r3
 8014aca:	460b      	mov	r3, r1
 8014acc:	80fb      	strh	r3, [r7, #6]
 8014ace:	4613      	mov	r3, r2
 8014ad0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d001      	beq.n	8014ae0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8014adc:	2300      	movs	r3, #0
 8014ade:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014ae0:	7979      	ldrb	r1, [r7, #5]
 8014ae2:	7e3b      	ldrb	r3, [r7, #24]
 8014ae4:	9303      	str	r3, [sp, #12]
 8014ae6:	88fb      	ldrh	r3, [r7, #6]
 8014ae8:	9302      	str	r3, [sp, #8]
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	9301      	str	r3, [sp, #4]
 8014aee:	2301      	movs	r3, #1
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	2300      	movs	r3, #0
 8014af4:	2200      	movs	r2, #0
 8014af6:	68f8      	ldr	r0, [r7, #12]
 8014af8:	f006 fb33 	bl	801b162 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8014afc:	2300      	movs	r3, #0
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}

08014b06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014b06:	b580      	push	{r7, lr}
 8014b08:	b088      	sub	sp, #32
 8014b0a:	af04      	add	r7, sp, #16
 8014b0c:	60f8      	str	r0, [r7, #12]
 8014b0e:	60b9      	str	r1, [r7, #8]
 8014b10:	4611      	mov	r1, r2
 8014b12:	461a      	mov	r2, r3
 8014b14:	460b      	mov	r3, r1
 8014b16:	80fb      	strh	r3, [r7, #6]
 8014b18:	4613      	mov	r3, r2
 8014b1a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014b1c:	7979      	ldrb	r1, [r7, #5]
 8014b1e:	2300      	movs	r3, #0
 8014b20:	9303      	str	r3, [sp, #12]
 8014b22:	88fb      	ldrh	r3, [r7, #6]
 8014b24:	9302      	str	r3, [sp, #8]
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	9301      	str	r3, [sp, #4]
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	9300      	str	r3, [sp, #0]
 8014b2e:	2300      	movs	r3, #0
 8014b30:	2201      	movs	r2, #1
 8014b32:	68f8      	ldr	r0, [r7, #12]
 8014b34:	f006 fb15 	bl	801b162 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014b38:	2300      	movs	r3, #0

}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b088      	sub	sp, #32
 8014b46:	af04      	add	r7, sp, #16
 8014b48:	60f8      	str	r0, [r7, #12]
 8014b4a:	60b9      	str	r1, [r7, #8]
 8014b4c:	4611      	mov	r1, r2
 8014b4e:	461a      	mov	r2, r3
 8014b50:	460b      	mov	r3, r1
 8014b52:	80fb      	strh	r3, [r7, #6]
 8014b54:	4613      	mov	r3, r2
 8014b56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d001      	beq.n	8014b66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8014b62:	2300      	movs	r3, #0
 8014b64:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014b66:	7979      	ldrb	r1, [r7, #5]
 8014b68:	7e3b      	ldrb	r3, [r7, #24]
 8014b6a:	9303      	str	r3, [sp, #12]
 8014b6c:	88fb      	ldrh	r3, [r7, #6]
 8014b6e:	9302      	str	r3, [sp, #8]
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	9301      	str	r3, [sp, #4]
 8014b74:	2301      	movs	r3, #1
 8014b76:	9300      	str	r3, [sp, #0]
 8014b78:	2302      	movs	r3, #2
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f006 faf0 	bl	801b162 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8014b82:	2300      	movs	r3, #0
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3710      	adds	r7, #16
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b088      	sub	sp, #32
 8014b90:	af04      	add	r7, sp, #16
 8014b92:	60f8      	str	r0, [r7, #12]
 8014b94:	60b9      	str	r1, [r7, #8]
 8014b96:	4611      	mov	r1, r2
 8014b98:	461a      	mov	r2, r3
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	80fb      	strh	r3, [r7, #6]
 8014b9e:	4613      	mov	r3, r2
 8014ba0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014ba2:	7979      	ldrb	r1, [r7, #5]
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	9303      	str	r3, [sp, #12]
 8014ba8:	88fb      	ldrh	r3, [r7, #6]
 8014baa:	9302      	str	r3, [sp, #8]
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	9301      	str	r3, [sp, #4]
 8014bb0:	2301      	movs	r3, #1
 8014bb2:	9300      	str	r3, [sp, #0]
 8014bb4:	2302      	movs	r3, #2
 8014bb6:	2201      	movs	r2, #1
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f006 fad2 	bl	801b162 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014bbe:	2300      	movs	r3, #0
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3710      	adds	r7, #16
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b086      	sub	sp, #24
 8014bcc:	af04      	add	r7, sp, #16
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	4608      	mov	r0, r1
 8014bd2:	4611      	mov	r1, r2
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	70fb      	strb	r3, [r7, #3]
 8014bda:	460b      	mov	r3, r1
 8014bdc:	70bb      	strb	r3, [r7, #2]
 8014bde:	4613      	mov	r3, r2
 8014be0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8014be2:	7878      	ldrb	r0, [r7, #1]
 8014be4:	78ba      	ldrb	r2, [r7, #2]
 8014be6:	78f9      	ldrb	r1, [r7, #3]
 8014be8:	8b3b      	ldrh	r3, [r7, #24]
 8014bea:	9302      	str	r3, [sp, #8]
 8014bec:	7d3b      	ldrb	r3, [r7, #20]
 8014bee:	9301      	str	r3, [sp, #4]
 8014bf0:	7c3b      	ldrb	r3, [r7, #16]
 8014bf2:	9300      	str	r3, [sp, #0]
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f006 fa65 	bl	801b0c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8014bfc:	2300      	movs	r3, #0
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3708      	adds	r7, #8
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}

08014c06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8014c06:	b580      	push	{r7, lr}
 8014c08:	b082      	sub	sp, #8
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	6078      	str	r0, [r7, #4]
 8014c0e:	460b      	mov	r3, r1
 8014c10:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8014c12:	78fb      	ldrb	r3, [r7, #3]
 8014c14:	4619      	mov	r1, r3
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f006 fa84 	bl	801b124 <USBH_LL_ClosePipe>

  return USBH_OK;
 8014c1c:	2300      	movs	r3, #0
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3708      	adds	r7, #8
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}

08014c26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014c26:	b580      	push	{r7, lr}
 8014c28:	b084      	sub	sp, #16
 8014c2a:	af00      	add	r7, sp, #0
 8014c2c:	6078      	str	r0, [r7, #4]
 8014c2e:	460b      	mov	r3, r1
 8014c30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f000 f836 	bl	8014ca4 <USBH_GetFreePipe>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014c3c:	89fb      	ldrh	r3, [r7, #14]
 8014c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014c42:	4293      	cmp	r3, r2
 8014c44:	d00a      	beq.n	8014c5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8014c46:	78fa      	ldrb	r2, [r7, #3]
 8014c48:	89fb      	ldrh	r3, [r7, #14]
 8014c4a:	f003 030f 	and.w	r3, r3, #15
 8014c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014c52:	6879      	ldr	r1, [r7, #4]
 8014c54:	33e0      	adds	r3, #224	@ 0xe0
 8014c56:	009b      	lsls	r3, r3, #2
 8014c58:	440b      	add	r3, r1
 8014c5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8014c5c:	89fb      	ldrh	r3, [r7, #14]
 8014c5e:	b2db      	uxtb	r3, r3
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3710      	adds	r7, #16
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}

08014c68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b083      	sub	sp, #12
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	460b      	mov	r3, r1
 8014c72:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8014c74:	78fb      	ldrb	r3, [r7, #3]
 8014c76:	2b0f      	cmp	r3, #15
 8014c78:	d80d      	bhi.n	8014c96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014c7a:	78fb      	ldrb	r3, [r7, #3]
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	33e0      	adds	r3, #224	@ 0xe0
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	4413      	add	r3, r2
 8014c84:	685a      	ldr	r2, [r3, #4]
 8014c86:	78fb      	ldrb	r3, [r7, #3]
 8014c88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014c8c:	6879      	ldr	r1, [r7, #4]
 8014c8e:	33e0      	adds	r3, #224	@ 0xe0
 8014c90:	009b      	lsls	r3, r3, #2
 8014c92:	440b      	add	r3, r1
 8014c94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8014c96:	2300      	movs	r3, #0
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	370c      	adds	r7, #12
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr

08014ca4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b085      	sub	sp, #20
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014cac:	2300      	movs	r3, #0
 8014cae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	73fb      	strb	r3, [r7, #15]
 8014cb4:	e00f      	b.n	8014cd6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8014cb6:	7bfb      	ldrb	r3, [r7, #15]
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	33e0      	adds	r3, #224	@ 0xe0
 8014cbc:	009b      	lsls	r3, r3, #2
 8014cbe:	4413      	add	r3, r2
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d102      	bne.n	8014cd0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8014cca:	7bfb      	ldrb	r3, [r7, #15]
 8014ccc:	b29b      	uxth	r3, r3
 8014cce:	e007      	b.n	8014ce0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014cd0:	7bfb      	ldrb	r3, [r7, #15]
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	73fb      	strb	r3, [r7, #15]
 8014cd6:	7bfb      	ldrb	r3, [r7, #15]
 8014cd8:	2b0f      	cmp	r3, #15
 8014cda:	d9ec      	bls.n	8014cb6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8014cdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3714      	adds	r7, #20
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr

08014cec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014cf6:	79fb      	ldrb	r3, [r7, #7]
 8014cf8:	4a08      	ldr	r2, [pc, #32]	@ (8014d1c <disk_status+0x30>)
 8014cfa:	009b      	lsls	r3, r3, #2
 8014cfc:	4413      	add	r3, r2
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	79fa      	ldrb	r2, [r7, #7]
 8014d04:	4905      	ldr	r1, [pc, #20]	@ (8014d1c <disk_status+0x30>)
 8014d06:	440a      	add	r2, r1
 8014d08:	7a12      	ldrb	r2, [r2, #8]
 8014d0a:	4610      	mov	r0, r2
 8014d0c:	4798      	blx	r3
 8014d0e:	4603      	mov	r3, r0
 8014d10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d14:	4618      	mov	r0, r3
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}
 8014d1c:	20002408 	.word	0x20002408

08014d20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b084      	sub	sp, #16
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	4603      	mov	r3, r0
 8014d28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014d2e:	79fb      	ldrb	r3, [r7, #7]
 8014d30:	4a0d      	ldr	r2, [pc, #52]	@ (8014d68 <disk_initialize+0x48>)
 8014d32:	5cd3      	ldrb	r3, [r2, r3]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d111      	bne.n	8014d5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014d38:	79fb      	ldrb	r3, [r7, #7]
 8014d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8014d68 <disk_initialize+0x48>)
 8014d3c:	2101      	movs	r1, #1
 8014d3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014d40:	79fb      	ldrb	r3, [r7, #7]
 8014d42:	4a09      	ldr	r2, [pc, #36]	@ (8014d68 <disk_initialize+0x48>)
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	4413      	add	r3, r2
 8014d48:	685b      	ldr	r3, [r3, #4]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	79fa      	ldrb	r2, [r7, #7]
 8014d4e:	4906      	ldr	r1, [pc, #24]	@ (8014d68 <disk_initialize+0x48>)
 8014d50:	440a      	add	r2, r1
 8014d52:	7a12      	ldrb	r2, [r2, #8]
 8014d54:	4610      	mov	r0, r2
 8014d56:	4798      	blx	r3
 8014d58:	4603      	mov	r3, r0
 8014d5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3710      	adds	r7, #16
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	20002408 	.word	0x20002408

08014d6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014d6c:	b590      	push	{r4, r7, lr}
 8014d6e:	b087      	sub	sp, #28
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	60b9      	str	r1, [r7, #8]
 8014d74:	607a      	str	r2, [r7, #4]
 8014d76:	603b      	str	r3, [r7, #0]
 8014d78:	4603      	mov	r3, r0
 8014d7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014d7c:	7bfb      	ldrb	r3, [r7, #15]
 8014d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8014da8 <disk_read+0x3c>)
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	4413      	add	r3, r2
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	689c      	ldr	r4, [r3, #8]
 8014d88:	7bfb      	ldrb	r3, [r7, #15]
 8014d8a:	4a07      	ldr	r2, [pc, #28]	@ (8014da8 <disk_read+0x3c>)
 8014d8c:	4413      	add	r3, r2
 8014d8e:	7a18      	ldrb	r0, [r3, #8]
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	687a      	ldr	r2, [r7, #4]
 8014d94:	68b9      	ldr	r1, [r7, #8]
 8014d96:	47a0      	blx	r4
 8014d98:	4603      	mov	r3, r0
 8014d9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8014d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	371c      	adds	r7, #28
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd90      	pop	{r4, r7, pc}
 8014da6:	bf00      	nop
 8014da8:	20002408 	.word	0x20002408

08014dac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014dac:	b590      	push	{r4, r7, lr}
 8014dae:	b087      	sub	sp, #28
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	60b9      	str	r1, [r7, #8]
 8014db4:	607a      	str	r2, [r7, #4]
 8014db6:	603b      	str	r3, [r7, #0]
 8014db8:	4603      	mov	r3, r0
 8014dba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014dbc:	7bfb      	ldrb	r3, [r7, #15]
 8014dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8014de8 <disk_write+0x3c>)
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	4413      	add	r3, r2
 8014dc4:	685b      	ldr	r3, [r3, #4]
 8014dc6:	68dc      	ldr	r4, [r3, #12]
 8014dc8:	7bfb      	ldrb	r3, [r7, #15]
 8014dca:	4a07      	ldr	r2, [pc, #28]	@ (8014de8 <disk_write+0x3c>)
 8014dcc:	4413      	add	r3, r2
 8014dce:	7a18      	ldrb	r0, [r3, #8]
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	68b9      	ldr	r1, [r7, #8]
 8014dd6:	47a0      	blx	r4
 8014dd8:	4603      	mov	r3, r0
 8014dda:	75fb      	strb	r3, [r7, #23]
  return res;
 8014ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	371c      	adds	r7, #28
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd90      	pop	{r4, r7, pc}
 8014de6:	bf00      	nop
 8014de8:	20002408 	.word	0x20002408

08014dec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b084      	sub	sp, #16
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	4603      	mov	r3, r0
 8014df4:	603a      	str	r2, [r7, #0]
 8014df6:	71fb      	strb	r3, [r7, #7]
 8014df8:	460b      	mov	r3, r1
 8014dfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014dfc:	79fb      	ldrb	r3, [r7, #7]
 8014dfe:	4a09      	ldr	r2, [pc, #36]	@ (8014e24 <disk_ioctl+0x38>)
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	4413      	add	r3, r2
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	691b      	ldr	r3, [r3, #16]
 8014e08:	79fa      	ldrb	r2, [r7, #7]
 8014e0a:	4906      	ldr	r1, [pc, #24]	@ (8014e24 <disk_ioctl+0x38>)
 8014e0c:	440a      	add	r2, r1
 8014e0e:	7a10      	ldrb	r0, [r2, #8]
 8014e10:	79b9      	ldrb	r1, [r7, #6]
 8014e12:	683a      	ldr	r2, [r7, #0]
 8014e14:	4798      	blx	r3
 8014e16:	4603      	mov	r3, r0
 8014e18:	73fb      	strb	r3, [r7, #15]
  return res;
 8014e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3710      	adds	r7, #16
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	20002408 	.word	0x20002408

08014e28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014e28:	b480      	push	{r7}
 8014e2a:	b085      	sub	sp, #20
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	3301      	adds	r3, #1
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014e38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e3c:	021b      	lsls	r3, r3, #8
 8014e3e:	b21a      	sxth	r2, r3
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	b21b      	sxth	r3, r3
 8014e46:	4313      	orrs	r3, r2
 8014e48:	b21b      	sxth	r3, r3
 8014e4a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014e4c:	89fb      	ldrh	r3, [r7, #14]
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3714      	adds	r7, #20
 8014e52:	46bd      	mov	sp, r7
 8014e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e58:	4770      	bx	lr

08014e5a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014e5a:	b480      	push	{r7}
 8014e5c:	b085      	sub	sp, #20
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	3303      	adds	r3, #3
 8014e66:	781b      	ldrb	r3, [r3, #0]
 8014e68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	021b      	lsls	r3, r3, #8
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	3202      	adds	r2, #2
 8014e72:	7812      	ldrb	r2, [r2, #0]
 8014e74:	4313      	orrs	r3, r2
 8014e76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	021b      	lsls	r3, r3, #8
 8014e7c:	687a      	ldr	r2, [r7, #4]
 8014e7e:	3201      	adds	r2, #1
 8014e80:	7812      	ldrb	r2, [r2, #0]
 8014e82:	4313      	orrs	r3, r2
 8014e84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	021b      	lsls	r3, r3, #8
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	7812      	ldrb	r2, [r2, #0]
 8014e8e:	4313      	orrs	r3, r2
 8014e90:	60fb      	str	r3, [r7, #12]
	return rv;
 8014e92:	68fb      	ldr	r3, [r7, #12]
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3714      	adds	r7, #20
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9e:	4770      	bx	lr

08014ea0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014ea0:	b480      	push	{r7}
 8014ea2:	b083      	sub	sp, #12
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	1c5a      	adds	r2, r3, #1
 8014eb0:	607a      	str	r2, [r7, #4]
 8014eb2:	887a      	ldrh	r2, [r7, #2]
 8014eb4:	b2d2      	uxtb	r2, r2
 8014eb6:	701a      	strb	r2, [r3, #0]
 8014eb8:	887b      	ldrh	r3, [r7, #2]
 8014eba:	0a1b      	lsrs	r3, r3, #8
 8014ebc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	1c5a      	adds	r2, r3, #1
 8014ec2:	607a      	str	r2, [r7, #4]
 8014ec4:	887a      	ldrh	r2, [r7, #2]
 8014ec6:	b2d2      	uxtb	r2, r2
 8014ec8:	701a      	strb	r2, [r3, #0]
}
 8014eca:	bf00      	nop
 8014ecc:	370c      	adds	r7, #12
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr

08014ed6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014ed6:	b480      	push	{r7}
 8014ed8:	b083      	sub	sp, #12
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	6078      	str	r0, [r7, #4]
 8014ede:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	1c5a      	adds	r2, r3, #1
 8014ee4:	607a      	str	r2, [r7, #4]
 8014ee6:	683a      	ldr	r2, [r7, #0]
 8014ee8:	b2d2      	uxtb	r2, r2
 8014eea:	701a      	strb	r2, [r3, #0]
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	0a1b      	lsrs	r3, r3, #8
 8014ef0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	1c5a      	adds	r2, r3, #1
 8014ef6:	607a      	str	r2, [r7, #4]
 8014ef8:	683a      	ldr	r2, [r7, #0]
 8014efa:	b2d2      	uxtb	r2, r2
 8014efc:	701a      	strb	r2, [r3, #0]
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	0a1b      	lsrs	r3, r3, #8
 8014f02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	1c5a      	adds	r2, r3, #1
 8014f08:	607a      	str	r2, [r7, #4]
 8014f0a:	683a      	ldr	r2, [r7, #0]
 8014f0c:	b2d2      	uxtb	r2, r2
 8014f0e:	701a      	strb	r2, [r3, #0]
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	0a1b      	lsrs	r3, r3, #8
 8014f14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	1c5a      	adds	r2, r3, #1
 8014f1a:	607a      	str	r2, [r7, #4]
 8014f1c:	683a      	ldr	r2, [r7, #0]
 8014f1e:	b2d2      	uxtb	r2, r2
 8014f20:	701a      	strb	r2, [r3, #0]
}
 8014f22:	bf00      	nop
 8014f24:	370c      	adds	r7, #12
 8014f26:	46bd      	mov	sp, r7
 8014f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2c:	4770      	bx	lr

08014f2e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014f2e:	b480      	push	{r7}
 8014f30:	b087      	sub	sp, #28
 8014f32:	af00      	add	r7, sp, #0
 8014f34:	60f8      	str	r0, [r7, #12]
 8014f36:	60b9      	str	r1, [r7, #8]
 8014f38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d00d      	beq.n	8014f64 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014f48:	693a      	ldr	r2, [r7, #16]
 8014f4a:	1c53      	adds	r3, r2, #1
 8014f4c:	613b      	str	r3, [r7, #16]
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	1c59      	adds	r1, r3, #1
 8014f52:	6179      	str	r1, [r7, #20]
 8014f54:	7812      	ldrb	r2, [r2, #0]
 8014f56:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	3b01      	subs	r3, #1
 8014f5c:	607b      	str	r3, [r7, #4]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d1f1      	bne.n	8014f48 <mem_cpy+0x1a>
	}
}
 8014f64:	bf00      	nop
 8014f66:	371c      	adds	r7, #28
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr

08014f70 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014f70:	b480      	push	{r7}
 8014f72:	b087      	sub	sp, #28
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	1c5a      	adds	r2, r3, #1
 8014f84:	617a      	str	r2, [r7, #20]
 8014f86:	68ba      	ldr	r2, [r7, #8]
 8014f88:	b2d2      	uxtb	r2, r2
 8014f8a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	3b01      	subs	r3, #1
 8014f90:	607b      	str	r3, [r7, #4]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d1f3      	bne.n	8014f80 <mem_set+0x10>
}
 8014f98:	bf00      	nop
 8014f9a:	bf00      	nop
 8014f9c:	371c      	adds	r7, #28
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr

08014fa6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014fa6:	b480      	push	{r7}
 8014fa8:	b089      	sub	sp, #36	@ 0x24
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	60f8      	str	r0, [r7, #12]
 8014fae:	60b9      	str	r1, [r7, #8]
 8014fb0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	61fb      	str	r3, [r7, #28]
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014fbe:	69fb      	ldr	r3, [r7, #28]
 8014fc0:	1c5a      	adds	r2, r3, #1
 8014fc2:	61fa      	str	r2, [r7, #28]
 8014fc4:	781b      	ldrb	r3, [r3, #0]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	69bb      	ldr	r3, [r7, #24]
 8014fca:	1c5a      	adds	r2, r3, #1
 8014fcc:	61ba      	str	r2, [r7, #24]
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	1acb      	subs	r3, r1, r3
 8014fd2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	3b01      	subs	r3, #1
 8014fd8:	607b      	str	r3, [r7, #4]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d002      	beq.n	8014fe6 <mem_cmp+0x40>
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d0eb      	beq.n	8014fbe <mem_cmp+0x18>

	return r;
 8014fe6:	697b      	ldr	r3, [r7, #20]
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3724      	adds	r7, #36	@ 0x24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr

08014ff4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014ffe:	e002      	b.n	8015006 <chk_chr+0x12>
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	3301      	adds	r3, #1
 8015004:	607b      	str	r3, [r7, #4]
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	781b      	ldrb	r3, [r3, #0]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d005      	beq.n	801501a <chk_chr+0x26>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	781b      	ldrb	r3, [r3, #0]
 8015012:	461a      	mov	r2, r3
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	4293      	cmp	r3, r2
 8015018:	d1f2      	bne.n	8015000 <chk_chr+0xc>
	return *str;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	781b      	ldrb	r3, [r3, #0]
}
 801501e:	4618      	mov	r0, r3
 8015020:	370c      	adds	r7, #12
 8015022:	46bd      	mov	sp, r7
 8015024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015028:	4770      	bx	lr

0801502a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801502a:	b580      	push	{r7, lr}
 801502c:	b082      	sub	sp, #8
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d009      	beq.n	801504c <lock_fs+0x22>
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	68db      	ldr	r3, [r3, #12]
 801503c:	4618      	mov	r0, r3
 801503e:	f002 fe1e 	bl	8017c7e <ff_req_grant>
 8015042:	4603      	mov	r3, r0
 8015044:	2b00      	cmp	r3, #0
 8015046:	d001      	beq.n	801504c <lock_fs+0x22>
 8015048:	2301      	movs	r3, #1
 801504a:	e000      	b.n	801504e <lock_fs+0x24>
 801504c:	2300      	movs	r3, #0
}
 801504e:	4618      	mov	r0, r3
 8015050:	3708      	adds	r7, #8
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}

08015056 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8015056:	b580      	push	{r7, lr}
 8015058:	b082      	sub	sp, #8
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
 801505e:	460b      	mov	r3, r1
 8015060:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d00d      	beq.n	8015084 <unlock_fs+0x2e>
 8015068:	78fb      	ldrb	r3, [r7, #3]
 801506a:	2b0c      	cmp	r3, #12
 801506c:	d00a      	beq.n	8015084 <unlock_fs+0x2e>
 801506e:	78fb      	ldrb	r3, [r7, #3]
 8015070:	2b0b      	cmp	r3, #11
 8015072:	d007      	beq.n	8015084 <unlock_fs+0x2e>
 8015074:	78fb      	ldrb	r3, [r7, #3]
 8015076:	2b0f      	cmp	r3, #15
 8015078:	d004      	beq.n	8015084 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	68db      	ldr	r3, [r3, #12]
 801507e:	4618      	mov	r0, r3
 8015080:	f002 fe12 	bl	8017ca8 <ff_rel_grant>
	}
}
 8015084:	bf00      	nop
 8015086:	3708      	adds	r7, #8
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801508c:	b480      	push	{r7}
 801508e:	b085      	sub	sp, #20
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015096:	2300      	movs	r3, #0
 8015098:	60bb      	str	r3, [r7, #8]
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	60fb      	str	r3, [r7, #12]
 801509e:	e029      	b.n	80150f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80150a0:	4a27      	ldr	r2, [pc, #156]	@ (8015140 <chk_lock+0xb4>)
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	011b      	lsls	r3, r3, #4
 80150a6:	4413      	add	r3, r2
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d01d      	beq.n	80150ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80150ae:	4a24      	ldr	r2, [pc, #144]	@ (8015140 <chk_lock+0xb4>)
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	011b      	lsls	r3, r3, #4
 80150b4:	4413      	add	r3, r2
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	429a      	cmp	r2, r3
 80150be:	d116      	bne.n	80150ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80150c0:	4a1f      	ldr	r2, [pc, #124]	@ (8015140 <chk_lock+0xb4>)
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	011b      	lsls	r3, r3, #4
 80150c6:	4413      	add	r3, r2
 80150c8:	3304      	adds	r3, #4
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d10c      	bne.n	80150ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80150d4:	4a1a      	ldr	r2, [pc, #104]	@ (8015140 <chk_lock+0xb4>)
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	011b      	lsls	r3, r3, #4
 80150da:	4413      	add	r3, r2
 80150dc:	3308      	adds	r3, #8
 80150de:	681a      	ldr	r2, [r3, #0]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d102      	bne.n	80150ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80150e8:	e007      	b.n	80150fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80150ea:	2301      	movs	r3, #1
 80150ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	3301      	adds	r3, #1
 80150f2:	60fb      	str	r3, [r7, #12]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2b01      	cmp	r3, #1
 80150f8:	d9d2      	bls.n	80150a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b02      	cmp	r3, #2
 80150fe:	d109      	bne.n	8015114 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d102      	bne.n	801510c <chk_lock+0x80>
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	2b02      	cmp	r3, #2
 801510a:	d101      	bne.n	8015110 <chk_lock+0x84>
 801510c:	2300      	movs	r3, #0
 801510e:	e010      	b.n	8015132 <chk_lock+0xa6>
 8015110:	2312      	movs	r3, #18
 8015112:	e00e      	b.n	8015132 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d108      	bne.n	801512c <chk_lock+0xa0>
 801511a:	4a09      	ldr	r2, [pc, #36]	@ (8015140 <chk_lock+0xb4>)
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	011b      	lsls	r3, r3, #4
 8015120:	4413      	add	r3, r2
 8015122:	330c      	adds	r3, #12
 8015124:	881b      	ldrh	r3, [r3, #0]
 8015126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801512a:	d101      	bne.n	8015130 <chk_lock+0xa4>
 801512c:	2310      	movs	r3, #16
 801512e:	e000      	b.n	8015132 <chk_lock+0xa6>
 8015130:	2300      	movs	r3, #0
}
 8015132:	4618      	mov	r0, r3
 8015134:	3714      	adds	r7, #20
 8015136:	46bd      	mov	sp, r7
 8015138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513c:	4770      	bx	lr
 801513e:	bf00      	nop
 8015140:	200023e8 	.word	0x200023e8

08015144 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015144:	b480      	push	{r7}
 8015146:	b083      	sub	sp, #12
 8015148:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801514a:	2300      	movs	r3, #0
 801514c:	607b      	str	r3, [r7, #4]
 801514e:	e002      	b.n	8015156 <enq_lock+0x12>
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	3301      	adds	r3, #1
 8015154:	607b      	str	r3, [r7, #4]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2b01      	cmp	r3, #1
 801515a:	d806      	bhi.n	801516a <enq_lock+0x26>
 801515c:	4a09      	ldr	r2, [pc, #36]	@ (8015184 <enq_lock+0x40>)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	011b      	lsls	r3, r3, #4
 8015162:	4413      	add	r3, r2
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d1f2      	bne.n	8015150 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2b02      	cmp	r3, #2
 801516e:	bf14      	ite	ne
 8015170:	2301      	movne	r3, #1
 8015172:	2300      	moveq	r3, #0
 8015174:	b2db      	uxtb	r3, r3
}
 8015176:	4618      	mov	r0, r3
 8015178:	370c      	adds	r7, #12
 801517a:	46bd      	mov	sp, r7
 801517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015180:	4770      	bx	lr
 8015182:	bf00      	nop
 8015184:	200023e8 	.word	0x200023e8

08015188 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015188:	b480      	push	{r7}
 801518a:	b085      	sub	sp, #20
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015192:	2300      	movs	r3, #0
 8015194:	60fb      	str	r3, [r7, #12]
 8015196:	e01f      	b.n	80151d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015198:	4a41      	ldr	r2, [pc, #260]	@ (80152a0 <inc_lock+0x118>)
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	011b      	lsls	r3, r3, #4
 801519e:	4413      	add	r3, r2
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d113      	bne.n	80151d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80151aa:	4a3d      	ldr	r2, [pc, #244]	@ (80152a0 <inc_lock+0x118>)
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	011b      	lsls	r3, r3, #4
 80151b0:	4413      	add	r3, r2
 80151b2:	3304      	adds	r3, #4
 80151b4:	681a      	ldr	r2, [r3, #0]
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d109      	bne.n	80151d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80151be:	4a38      	ldr	r2, [pc, #224]	@ (80152a0 <inc_lock+0x118>)
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	011b      	lsls	r3, r3, #4
 80151c4:	4413      	add	r3, r2
 80151c6:	3308      	adds	r3, #8
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d006      	beq.n	80151e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	3301      	adds	r3, #1
 80151d6:	60fb      	str	r3, [r7, #12]
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2b01      	cmp	r3, #1
 80151dc:	d9dc      	bls.n	8015198 <inc_lock+0x10>
 80151de:	e000      	b.n	80151e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80151e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	2b02      	cmp	r3, #2
 80151e6:	d132      	bne.n	801524e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80151e8:	2300      	movs	r3, #0
 80151ea:	60fb      	str	r3, [r7, #12]
 80151ec:	e002      	b.n	80151f4 <inc_lock+0x6c>
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	3301      	adds	r3, #1
 80151f2:	60fb      	str	r3, [r7, #12]
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d806      	bhi.n	8015208 <inc_lock+0x80>
 80151fa:	4a29      	ldr	r2, [pc, #164]	@ (80152a0 <inc_lock+0x118>)
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	011b      	lsls	r3, r3, #4
 8015200:	4413      	add	r3, r2
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d1f2      	bne.n	80151ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	2b02      	cmp	r3, #2
 801520c:	d101      	bne.n	8015212 <inc_lock+0x8a>
 801520e:	2300      	movs	r3, #0
 8015210:	e040      	b.n	8015294 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681a      	ldr	r2, [r3, #0]
 8015216:	4922      	ldr	r1, [pc, #136]	@ (80152a0 <inc_lock+0x118>)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	011b      	lsls	r3, r3, #4
 801521c:	440b      	add	r3, r1
 801521e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	689a      	ldr	r2, [r3, #8]
 8015224:	491e      	ldr	r1, [pc, #120]	@ (80152a0 <inc_lock+0x118>)
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	011b      	lsls	r3, r3, #4
 801522a:	440b      	add	r3, r1
 801522c:	3304      	adds	r3, #4
 801522e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	695a      	ldr	r2, [r3, #20]
 8015234:	491a      	ldr	r1, [pc, #104]	@ (80152a0 <inc_lock+0x118>)
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	011b      	lsls	r3, r3, #4
 801523a:	440b      	add	r3, r1
 801523c:	3308      	adds	r3, #8
 801523e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015240:	4a17      	ldr	r2, [pc, #92]	@ (80152a0 <inc_lock+0x118>)
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	011b      	lsls	r3, r3, #4
 8015246:	4413      	add	r3, r2
 8015248:	330c      	adds	r3, #12
 801524a:	2200      	movs	r2, #0
 801524c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d009      	beq.n	8015268 <inc_lock+0xe0>
 8015254:	4a12      	ldr	r2, [pc, #72]	@ (80152a0 <inc_lock+0x118>)
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	011b      	lsls	r3, r3, #4
 801525a:	4413      	add	r3, r2
 801525c:	330c      	adds	r3, #12
 801525e:	881b      	ldrh	r3, [r3, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d001      	beq.n	8015268 <inc_lock+0xe0>
 8015264:	2300      	movs	r3, #0
 8015266:	e015      	b.n	8015294 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d108      	bne.n	8015280 <inc_lock+0xf8>
 801526e:	4a0c      	ldr	r2, [pc, #48]	@ (80152a0 <inc_lock+0x118>)
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	011b      	lsls	r3, r3, #4
 8015274:	4413      	add	r3, r2
 8015276:	330c      	adds	r3, #12
 8015278:	881b      	ldrh	r3, [r3, #0]
 801527a:	3301      	adds	r3, #1
 801527c:	b29a      	uxth	r2, r3
 801527e:	e001      	b.n	8015284 <inc_lock+0xfc>
 8015280:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015284:	4906      	ldr	r1, [pc, #24]	@ (80152a0 <inc_lock+0x118>)
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	011b      	lsls	r3, r3, #4
 801528a:	440b      	add	r3, r1
 801528c:	330c      	adds	r3, #12
 801528e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	3301      	adds	r3, #1
}
 8015294:	4618      	mov	r0, r3
 8015296:	3714      	adds	r7, #20
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr
 80152a0:	200023e8 	.word	0x200023e8

080152a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b085      	sub	sp, #20
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	3b01      	subs	r3, #1
 80152b0:	607b      	str	r3, [r7, #4]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2b01      	cmp	r3, #1
 80152b6:	d825      	bhi.n	8015304 <dec_lock+0x60>
		n = Files[i].ctr;
 80152b8:	4a17      	ldr	r2, [pc, #92]	@ (8015318 <dec_lock+0x74>)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	011b      	lsls	r3, r3, #4
 80152be:	4413      	add	r3, r2
 80152c0:	330c      	adds	r3, #12
 80152c2:	881b      	ldrh	r3, [r3, #0]
 80152c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80152c6:	89fb      	ldrh	r3, [r7, #14]
 80152c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80152cc:	d101      	bne.n	80152d2 <dec_lock+0x2e>
 80152ce:	2300      	movs	r3, #0
 80152d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80152d2:	89fb      	ldrh	r3, [r7, #14]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d002      	beq.n	80152de <dec_lock+0x3a>
 80152d8:	89fb      	ldrh	r3, [r7, #14]
 80152da:	3b01      	subs	r3, #1
 80152dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80152de:	4a0e      	ldr	r2, [pc, #56]	@ (8015318 <dec_lock+0x74>)
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	011b      	lsls	r3, r3, #4
 80152e4:	4413      	add	r3, r2
 80152e6:	330c      	adds	r3, #12
 80152e8:	89fa      	ldrh	r2, [r7, #14]
 80152ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80152ec:	89fb      	ldrh	r3, [r7, #14]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d105      	bne.n	80152fe <dec_lock+0x5a>
 80152f2:	4a09      	ldr	r2, [pc, #36]	@ (8015318 <dec_lock+0x74>)
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	011b      	lsls	r3, r3, #4
 80152f8:	4413      	add	r3, r2
 80152fa:	2200      	movs	r2, #0
 80152fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80152fe:	2300      	movs	r3, #0
 8015300:	737b      	strb	r3, [r7, #13]
 8015302:	e001      	b.n	8015308 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015304:	2302      	movs	r3, #2
 8015306:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015308:	7b7b      	ldrb	r3, [r7, #13]
}
 801530a:	4618      	mov	r0, r3
 801530c:	3714      	adds	r7, #20
 801530e:	46bd      	mov	sp, r7
 8015310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	200023e8 	.word	0x200023e8

0801531c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801531c:	b480      	push	{r7}
 801531e:	b085      	sub	sp, #20
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015324:	2300      	movs	r3, #0
 8015326:	60fb      	str	r3, [r7, #12]
 8015328:	e010      	b.n	801534c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801532a:	4a0d      	ldr	r2, [pc, #52]	@ (8015360 <clear_lock+0x44>)
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	011b      	lsls	r3, r3, #4
 8015330:	4413      	add	r3, r2
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	687a      	ldr	r2, [r7, #4]
 8015336:	429a      	cmp	r2, r3
 8015338:	d105      	bne.n	8015346 <clear_lock+0x2a>
 801533a:	4a09      	ldr	r2, [pc, #36]	@ (8015360 <clear_lock+0x44>)
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	011b      	lsls	r3, r3, #4
 8015340:	4413      	add	r3, r2
 8015342:	2200      	movs	r2, #0
 8015344:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	3301      	adds	r3, #1
 801534a:	60fb      	str	r3, [r7, #12]
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2b01      	cmp	r3, #1
 8015350:	d9eb      	bls.n	801532a <clear_lock+0xe>
	}
}
 8015352:	bf00      	nop
 8015354:	bf00      	nop
 8015356:	3714      	adds	r7, #20
 8015358:	46bd      	mov	sp, r7
 801535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535e:	4770      	bx	lr
 8015360:	200023e8 	.word	0x200023e8

08015364 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b086      	sub	sp, #24
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801536c:	2300      	movs	r3, #0
 801536e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	78db      	ldrb	r3, [r3, #3]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d034      	beq.n	80153e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801537c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	7858      	ldrb	r0, [r3, #1]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8015388:	2301      	movs	r3, #1
 801538a:	697a      	ldr	r2, [r7, #20]
 801538c:	f7ff fd0e 	bl	8014dac <disk_write>
 8015390:	4603      	mov	r3, r0
 8015392:	2b00      	cmp	r3, #0
 8015394:	d002      	beq.n	801539c <sync_window+0x38>
			res = FR_DISK_ERR;
 8015396:	2301      	movs	r3, #1
 8015398:	73fb      	strb	r3, [r7, #15]
 801539a:	e022      	b.n	80153e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2200      	movs	r2, #0
 80153a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153a6:	697a      	ldr	r2, [r7, #20]
 80153a8:	1ad2      	subs	r2, r2, r3
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	69db      	ldr	r3, [r3, #28]
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d217      	bcs.n	80153e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	789b      	ldrb	r3, [r3, #2]
 80153b6:	613b      	str	r3, [r7, #16]
 80153b8:	e010      	b.n	80153dc <sync_window+0x78>
					wsect += fs->fsize;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	69db      	ldr	r3, [r3, #28]
 80153be:	697a      	ldr	r2, [r7, #20]
 80153c0:	4413      	add	r3, r2
 80153c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	7858      	ldrb	r0, [r3, #1]
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80153ce:	2301      	movs	r3, #1
 80153d0:	697a      	ldr	r2, [r7, #20]
 80153d2:	f7ff fceb 	bl	8014dac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	3b01      	subs	r3, #1
 80153da:	613b      	str	r3, [r7, #16]
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	2b01      	cmp	r3, #1
 80153e0:	d8eb      	bhi.n	80153ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80153e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3718      	adds	r7, #24
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80153f6:	2300      	movs	r3, #0
 80153f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153fe:	683a      	ldr	r2, [r7, #0]
 8015400:	429a      	cmp	r2, r3
 8015402:	d01b      	beq.n	801543c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f7ff ffad 	bl	8015364 <sync_window>
 801540a:	4603      	mov	r3, r0
 801540c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801540e:	7bfb      	ldrb	r3, [r7, #15]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d113      	bne.n	801543c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	7858      	ldrb	r0, [r3, #1]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801541e:	2301      	movs	r3, #1
 8015420:	683a      	ldr	r2, [r7, #0]
 8015422:	f7ff fca3 	bl	8014d6c <disk_read>
 8015426:	4603      	mov	r3, r0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d004      	beq.n	8015436 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801542c:	f04f 33ff 	mov.w	r3, #4294967295
 8015430:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015432:	2301      	movs	r3, #1
 8015434:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	683a      	ldr	r2, [r7, #0]
 801543a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 801543c:	7bfb      	ldrb	r3, [r7, #15]
}
 801543e:	4618      	mov	r0, r3
 8015440:	3710      	adds	r7, #16
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}
	...

08015448 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b084      	sub	sp, #16
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f7ff ff87 	bl	8015364 <sync_window>
 8015456:	4603      	mov	r3, r0
 8015458:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801545a:	7bfb      	ldrb	r3, [r7, #15]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d158      	bne.n	8015512 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	781b      	ldrb	r3, [r3, #0]
 8015464:	2b03      	cmp	r3, #3
 8015466:	d148      	bne.n	80154fa <sync_fs+0xb2>
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	791b      	ldrb	r3, [r3, #4]
 801546c:	2b01      	cmp	r3, #1
 801546e:	d144      	bne.n	80154fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	3334      	adds	r3, #52	@ 0x34
 8015474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015478:	2100      	movs	r1, #0
 801547a:	4618      	mov	r0, r3
 801547c:	f7ff fd78 	bl	8014f70 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	3334      	adds	r3, #52	@ 0x34
 8015484:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015488:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801548c:	4618      	mov	r0, r3
 801548e:	f7ff fd07 	bl	8014ea0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	3334      	adds	r3, #52	@ 0x34
 8015496:	4921      	ldr	r1, [pc, #132]	@ (801551c <sync_fs+0xd4>)
 8015498:	4618      	mov	r0, r3
 801549a:	f7ff fd1c 	bl	8014ed6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	3334      	adds	r3, #52	@ 0x34
 80154a2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80154a6:	491e      	ldr	r1, [pc, #120]	@ (8015520 <sync_fs+0xd8>)
 80154a8:	4618      	mov	r0, r3
 80154aa:	f7ff fd14 	bl	8014ed6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	3334      	adds	r3, #52	@ 0x34
 80154b2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	695b      	ldr	r3, [r3, #20]
 80154ba:	4619      	mov	r1, r3
 80154bc:	4610      	mov	r0, r2
 80154be:	f7ff fd0a 	bl	8014ed6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	3334      	adds	r3, #52	@ 0x34
 80154c6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	691b      	ldr	r3, [r3, #16]
 80154ce:	4619      	mov	r1, r3
 80154d0:	4610      	mov	r0, r2
 80154d2:	f7ff fd00 	bl	8014ed6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	6a1b      	ldr	r3, [r3, #32]
 80154da:	1c5a      	adds	r2, r3, #1
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	7858      	ldrb	r0, [r3, #1]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80154ee:	2301      	movs	r3, #1
 80154f0:	f7ff fc5c 	bl	8014dac <disk_write>
			fs->fsi_flag = 0;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2200      	movs	r2, #0
 80154f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	785b      	ldrb	r3, [r3, #1]
 80154fe:	2200      	movs	r2, #0
 8015500:	2100      	movs	r1, #0
 8015502:	4618      	mov	r0, r3
 8015504:	f7ff fc72 	bl	8014dec <disk_ioctl>
 8015508:	4603      	mov	r3, r0
 801550a:	2b00      	cmp	r3, #0
 801550c:	d001      	beq.n	8015512 <sync_fs+0xca>
 801550e:	2301      	movs	r3, #1
 8015510:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015512:	7bfb      	ldrb	r3, [r7, #15]
}
 8015514:	4618      	mov	r0, r3
 8015516:	3710      	adds	r7, #16
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	41615252 	.word	0x41615252
 8015520:	61417272 	.word	0x61417272

08015524 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	3b02      	subs	r3, #2
 8015532:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	699b      	ldr	r3, [r3, #24]
 8015538:	3b02      	subs	r3, #2
 801553a:	683a      	ldr	r2, [r7, #0]
 801553c:	429a      	cmp	r2, r3
 801553e:	d301      	bcc.n	8015544 <clust2sect+0x20>
 8015540:	2300      	movs	r3, #0
 8015542:	e008      	b.n	8015556 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	895b      	ldrh	r3, [r3, #10]
 8015548:	461a      	mov	r2, r3
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	fb03 f202 	mul.w	r2, r3, r2
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015554:	4413      	add	r3, r2
}
 8015556:	4618      	mov	r0, r3
 8015558:	370c      	adds	r7, #12
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr

08015562 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015562:	b580      	push	{r7, lr}
 8015564:	b086      	sub	sp, #24
 8015566:	af00      	add	r7, sp, #0
 8015568:	6078      	str	r0, [r7, #4]
 801556a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	2b01      	cmp	r3, #1
 8015576:	d904      	bls.n	8015582 <get_fat+0x20>
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	699b      	ldr	r3, [r3, #24]
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	429a      	cmp	r2, r3
 8015580:	d302      	bcc.n	8015588 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015582:	2301      	movs	r3, #1
 8015584:	617b      	str	r3, [r7, #20]
 8015586:	e08e      	b.n	80156a6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015588:	f04f 33ff 	mov.w	r3, #4294967295
 801558c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	2b03      	cmp	r3, #3
 8015594:	d061      	beq.n	801565a <get_fat+0xf8>
 8015596:	2b03      	cmp	r3, #3
 8015598:	dc7b      	bgt.n	8015692 <get_fat+0x130>
 801559a:	2b01      	cmp	r3, #1
 801559c:	d002      	beq.n	80155a4 <get_fat+0x42>
 801559e:	2b02      	cmp	r3, #2
 80155a0:	d041      	beq.n	8015626 <get_fat+0xc4>
 80155a2:	e076      	b.n	8015692 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	60fb      	str	r3, [r7, #12]
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	085b      	lsrs	r3, r3, #1
 80155ac:	68fa      	ldr	r2, [r7, #12]
 80155ae:	4413      	add	r3, r2
 80155b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80155b2:	693b      	ldr	r3, [r7, #16]
 80155b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	0a5b      	lsrs	r3, r3, #9
 80155ba:	4413      	add	r3, r2
 80155bc:	4619      	mov	r1, r3
 80155be:	6938      	ldr	r0, [r7, #16]
 80155c0:	f7ff ff14 	bl	80153ec <move_window>
 80155c4:	4603      	mov	r3, r0
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d166      	bne.n	8015698 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	1c5a      	adds	r2, r3, #1
 80155ce:	60fa      	str	r2, [r7, #12]
 80155d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155d4:	693a      	ldr	r2, [r7, #16]
 80155d6:	4413      	add	r3, r2
 80155d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80155dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	0a5b      	lsrs	r3, r3, #9
 80155e6:	4413      	add	r3, r2
 80155e8:	4619      	mov	r1, r3
 80155ea:	6938      	ldr	r0, [r7, #16]
 80155ec:	f7ff fefe 	bl	80153ec <move_window>
 80155f0:	4603      	mov	r3, r0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d152      	bne.n	801569c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155fc:	693a      	ldr	r2, [r7, #16]
 80155fe:	4413      	add	r3, r2
 8015600:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015604:	021b      	lsls	r3, r3, #8
 8015606:	68ba      	ldr	r2, [r7, #8]
 8015608:	4313      	orrs	r3, r2
 801560a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	f003 0301 	and.w	r3, r3, #1
 8015612:	2b00      	cmp	r3, #0
 8015614:	d002      	beq.n	801561c <get_fat+0xba>
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	091b      	lsrs	r3, r3, #4
 801561a:	e002      	b.n	8015622 <get_fat+0xc0>
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015622:	617b      	str	r3, [r7, #20]
			break;
 8015624:	e03f      	b.n	80156a6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015626:	693b      	ldr	r3, [r7, #16]
 8015628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	0a1b      	lsrs	r3, r3, #8
 801562e:	4413      	add	r3, r2
 8015630:	4619      	mov	r1, r3
 8015632:	6938      	ldr	r0, [r7, #16]
 8015634:	f7ff feda 	bl	80153ec <move_window>
 8015638:	4603      	mov	r3, r0
 801563a:	2b00      	cmp	r3, #0
 801563c:	d130      	bne.n	80156a0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	005b      	lsls	r3, r3, #1
 8015648:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801564c:	4413      	add	r3, r2
 801564e:	4618      	mov	r0, r3
 8015650:	f7ff fbea 	bl	8014e28 <ld_word>
 8015654:	4603      	mov	r3, r0
 8015656:	617b      	str	r3, [r7, #20]
			break;
 8015658:	e025      	b.n	80156a6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	09db      	lsrs	r3, r3, #7
 8015662:	4413      	add	r3, r2
 8015664:	4619      	mov	r1, r3
 8015666:	6938      	ldr	r0, [r7, #16]
 8015668:	f7ff fec0 	bl	80153ec <move_window>
 801566c:	4603      	mov	r3, r0
 801566e:	2b00      	cmp	r3, #0
 8015670:	d118      	bne.n	80156a4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015672:	693b      	ldr	r3, [r7, #16]
 8015674:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	009b      	lsls	r3, r3, #2
 801567c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8015680:	4413      	add	r3, r2
 8015682:	4618      	mov	r0, r3
 8015684:	f7ff fbe9 	bl	8014e5a <ld_dword>
 8015688:	4603      	mov	r3, r0
 801568a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801568e:	617b      	str	r3, [r7, #20]
			break;
 8015690:	e009      	b.n	80156a6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015692:	2301      	movs	r3, #1
 8015694:	617b      	str	r3, [r7, #20]
 8015696:	e006      	b.n	80156a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015698:	bf00      	nop
 801569a:	e004      	b.n	80156a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801569c:	bf00      	nop
 801569e:	e002      	b.n	80156a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80156a0:	bf00      	nop
 80156a2:	e000      	b.n	80156a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80156a4:	bf00      	nop
		}
	}

	return val;
 80156a6:	697b      	ldr	r3, [r7, #20]
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3718      	adds	r7, #24
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80156b0:	b590      	push	{r4, r7, lr}
 80156b2:	b089      	sub	sp, #36	@ 0x24
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80156bc:	2302      	movs	r3, #2
 80156be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	f240 80d9 	bls.w	801587a <put_fat+0x1ca>
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	699b      	ldr	r3, [r3, #24]
 80156cc:	68ba      	ldr	r2, [r7, #8]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	f080 80d3 	bcs.w	801587a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	2b03      	cmp	r3, #3
 80156da:	f000 8096 	beq.w	801580a <put_fat+0x15a>
 80156de:	2b03      	cmp	r3, #3
 80156e0:	f300 80cb 	bgt.w	801587a <put_fat+0x1ca>
 80156e4:	2b01      	cmp	r3, #1
 80156e6:	d002      	beq.n	80156ee <put_fat+0x3e>
 80156e8:	2b02      	cmp	r3, #2
 80156ea:	d06e      	beq.n	80157ca <put_fat+0x11a>
 80156ec:	e0c5      	b.n	801587a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	61bb      	str	r3, [r7, #24]
 80156f2:	69bb      	ldr	r3, [r7, #24]
 80156f4:	085b      	lsrs	r3, r3, #1
 80156f6:	69ba      	ldr	r2, [r7, #24]
 80156f8:	4413      	add	r3, r2
 80156fa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015700:	69bb      	ldr	r3, [r7, #24]
 8015702:	0a5b      	lsrs	r3, r3, #9
 8015704:	4413      	add	r3, r2
 8015706:	4619      	mov	r1, r3
 8015708:	68f8      	ldr	r0, [r7, #12]
 801570a:	f7ff fe6f 	bl	80153ec <move_window>
 801570e:	4603      	mov	r3, r0
 8015710:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015712:	7ffb      	ldrb	r3, [r7, #31]
 8015714:	2b00      	cmp	r3, #0
 8015716:	f040 80a9 	bne.w	801586c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	1c59      	adds	r1, r3, #1
 8015724:	61b9      	str	r1, [r7, #24]
 8015726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801572a:	4413      	add	r3, r2
 801572c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	f003 0301 	and.w	r3, r3, #1
 8015734:	2b00      	cmp	r3, #0
 8015736:	d00d      	beq.n	8015754 <put_fat+0xa4>
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	b25b      	sxtb	r3, r3
 801573e:	f003 030f 	and.w	r3, r3, #15
 8015742:	b25a      	sxtb	r2, r3
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	b25b      	sxtb	r3, r3
 8015748:	011b      	lsls	r3, r3, #4
 801574a:	b25b      	sxtb	r3, r3
 801574c:	4313      	orrs	r3, r2
 801574e:	b25b      	sxtb	r3, r3
 8015750:	b2db      	uxtb	r3, r3
 8015752:	e001      	b.n	8015758 <put_fat+0xa8>
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	b2db      	uxtb	r3, r3
 8015758:	697a      	ldr	r2, [r7, #20]
 801575a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	2201      	movs	r2, #1
 8015760:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015766:	69bb      	ldr	r3, [r7, #24]
 8015768:	0a5b      	lsrs	r3, r3, #9
 801576a:	4413      	add	r3, r2
 801576c:	4619      	mov	r1, r3
 801576e:	68f8      	ldr	r0, [r7, #12]
 8015770:	f7ff fe3c 	bl	80153ec <move_window>
 8015774:	4603      	mov	r3, r0
 8015776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015778:	7ffb      	ldrb	r3, [r7, #31]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d178      	bne.n	8015870 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015784:	69bb      	ldr	r3, [r7, #24]
 8015786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801578a:	4413      	add	r3, r2
 801578c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	f003 0301 	and.w	r3, r3, #1
 8015794:	2b00      	cmp	r3, #0
 8015796:	d003      	beq.n	80157a0 <put_fat+0xf0>
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	091b      	lsrs	r3, r3, #4
 801579c:	b2db      	uxtb	r3, r3
 801579e:	e00e      	b.n	80157be <put_fat+0x10e>
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	b25b      	sxtb	r3, r3
 80157a6:	f023 030f 	bic.w	r3, r3, #15
 80157aa:	b25a      	sxtb	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	0a1b      	lsrs	r3, r3, #8
 80157b0:	b25b      	sxtb	r3, r3
 80157b2:	f003 030f 	and.w	r3, r3, #15
 80157b6:	b25b      	sxtb	r3, r3
 80157b8:	4313      	orrs	r3, r2
 80157ba:	b25b      	sxtb	r3, r3
 80157bc:	b2db      	uxtb	r3, r3
 80157be:	697a      	ldr	r2, [r7, #20]
 80157c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	2201      	movs	r2, #1
 80157c6:	70da      	strb	r2, [r3, #3]
			break;
 80157c8:	e057      	b.n	801587a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	0a1b      	lsrs	r3, r3, #8
 80157d2:	4413      	add	r3, r2
 80157d4:	4619      	mov	r1, r3
 80157d6:	68f8      	ldr	r0, [r7, #12]
 80157d8:	f7ff fe08 	bl	80153ec <move_window>
 80157dc:	4603      	mov	r3, r0
 80157de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80157e0:	7ffb      	ldrb	r3, [r7, #31]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d146      	bne.n	8015874 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	005b      	lsls	r3, r3, #1
 80157f0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80157f4:	4413      	add	r3, r2
 80157f6:	687a      	ldr	r2, [r7, #4]
 80157f8:	b292      	uxth	r2, r2
 80157fa:	4611      	mov	r1, r2
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7ff fb4f 	bl	8014ea0 <st_word>
			fs->wflag = 1;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	2201      	movs	r2, #1
 8015806:	70da      	strb	r2, [r3, #3]
			break;
 8015808:	e037      	b.n	801587a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	09db      	lsrs	r3, r3, #7
 8015812:	4413      	add	r3, r2
 8015814:	4619      	mov	r1, r3
 8015816:	68f8      	ldr	r0, [r7, #12]
 8015818:	f7ff fde8 	bl	80153ec <move_window>
 801581c:	4603      	mov	r3, r0
 801581e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015820:	7ffb      	ldrb	r3, [r7, #31]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d128      	bne.n	8015878 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	009b      	lsls	r3, r3, #2
 8015836:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801583a:	4413      	add	r3, r2
 801583c:	4618      	mov	r0, r3
 801583e:	f7ff fb0c 	bl	8014e5a <ld_dword>
 8015842:	4603      	mov	r3, r0
 8015844:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8015848:	4323      	orrs	r3, r4
 801584a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	009b      	lsls	r3, r3, #2
 8015856:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801585a:	4413      	add	r3, r2
 801585c:	6879      	ldr	r1, [r7, #4]
 801585e:	4618      	mov	r0, r3
 8015860:	f7ff fb39 	bl	8014ed6 <st_dword>
			fs->wflag = 1;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	2201      	movs	r2, #1
 8015868:	70da      	strb	r2, [r3, #3]
			break;
 801586a:	e006      	b.n	801587a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801586c:	bf00      	nop
 801586e:	e004      	b.n	801587a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8015870:	bf00      	nop
 8015872:	e002      	b.n	801587a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8015874:	bf00      	nop
 8015876:	e000      	b.n	801587a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8015878:	bf00      	nop
		}
	}
	return res;
 801587a:	7ffb      	ldrb	r3, [r7, #31]
}
 801587c:	4618      	mov	r0, r3
 801587e:	3724      	adds	r7, #36	@ 0x24
 8015880:	46bd      	mov	sp, r7
 8015882:	bd90      	pop	{r4, r7, pc}

08015884 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b088      	sub	sp, #32
 8015888:	af00      	add	r7, sp, #0
 801588a:	60f8      	str	r0, [r7, #12]
 801588c:	60b9      	str	r1, [r7, #8]
 801588e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015890:	2300      	movs	r3, #0
 8015892:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	2b01      	cmp	r3, #1
 801589e:	d904      	bls.n	80158aa <remove_chain+0x26>
 80158a0:	69bb      	ldr	r3, [r7, #24]
 80158a2:	699b      	ldr	r3, [r3, #24]
 80158a4:	68ba      	ldr	r2, [r7, #8]
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d301      	bcc.n	80158ae <remove_chain+0x2a>
 80158aa:	2302      	movs	r3, #2
 80158ac:	e04b      	b.n	8015946 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d00c      	beq.n	80158ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80158b4:	f04f 32ff 	mov.w	r2, #4294967295
 80158b8:	6879      	ldr	r1, [r7, #4]
 80158ba:	69b8      	ldr	r0, [r7, #24]
 80158bc:	f7ff fef8 	bl	80156b0 <put_fat>
 80158c0:	4603      	mov	r3, r0
 80158c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80158c4:	7ffb      	ldrb	r3, [r7, #31]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d001      	beq.n	80158ce <remove_chain+0x4a>
 80158ca:	7ffb      	ldrb	r3, [r7, #31]
 80158cc:	e03b      	b.n	8015946 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80158ce:	68b9      	ldr	r1, [r7, #8]
 80158d0:	68f8      	ldr	r0, [r7, #12]
 80158d2:	f7ff fe46 	bl	8015562 <get_fat>
 80158d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d031      	beq.n	8015942 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	2b01      	cmp	r3, #1
 80158e2:	d101      	bne.n	80158e8 <remove_chain+0x64>
 80158e4:	2302      	movs	r3, #2
 80158e6:	e02e      	b.n	8015946 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ee:	d101      	bne.n	80158f4 <remove_chain+0x70>
 80158f0:	2301      	movs	r3, #1
 80158f2:	e028      	b.n	8015946 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80158f4:	2200      	movs	r2, #0
 80158f6:	68b9      	ldr	r1, [r7, #8]
 80158f8:	69b8      	ldr	r0, [r7, #24]
 80158fa:	f7ff fed9 	bl	80156b0 <put_fat>
 80158fe:	4603      	mov	r3, r0
 8015900:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015902:	7ffb      	ldrb	r3, [r7, #31]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d001      	beq.n	801590c <remove_chain+0x88>
 8015908:	7ffb      	ldrb	r3, [r7, #31]
 801590a:	e01c      	b.n	8015946 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801590c:	69bb      	ldr	r3, [r7, #24]
 801590e:	695a      	ldr	r2, [r3, #20]
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	699b      	ldr	r3, [r3, #24]
 8015914:	3b02      	subs	r3, #2
 8015916:	429a      	cmp	r2, r3
 8015918:	d20b      	bcs.n	8015932 <remove_chain+0xae>
			fs->free_clst++;
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	695b      	ldr	r3, [r3, #20]
 801591e:	1c5a      	adds	r2, r3, #1
 8015920:	69bb      	ldr	r3, [r7, #24]
 8015922:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8015924:	69bb      	ldr	r3, [r7, #24]
 8015926:	791b      	ldrb	r3, [r3, #4]
 8015928:	f043 0301 	orr.w	r3, r3, #1
 801592c:	b2da      	uxtb	r2, r3
 801592e:	69bb      	ldr	r3, [r7, #24]
 8015930:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	699b      	ldr	r3, [r3, #24]
 801593a:	68ba      	ldr	r2, [r7, #8]
 801593c:	429a      	cmp	r2, r3
 801593e:	d3c6      	bcc.n	80158ce <remove_chain+0x4a>
 8015940:	e000      	b.n	8015944 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015942:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015944:	2300      	movs	r3, #0
}
 8015946:	4618      	mov	r0, r3
 8015948:	3720      	adds	r7, #32
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}

0801594e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801594e:	b580      	push	{r7, lr}
 8015950:	b088      	sub	sp, #32
 8015952:	af00      	add	r7, sp, #0
 8015954:	6078      	str	r0, [r7, #4]
 8015956:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d10d      	bne.n	8015980 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015964:	693b      	ldr	r3, [r7, #16]
 8015966:	691b      	ldr	r3, [r3, #16]
 8015968:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d004      	beq.n	801597a <create_chain+0x2c>
 8015970:	693b      	ldr	r3, [r7, #16]
 8015972:	699b      	ldr	r3, [r3, #24]
 8015974:	69ba      	ldr	r2, [r7, #24]
 8015976:	429a      	cmp	r2, r3
 8015978:	d31b      	bcc.n	80159b2 <create_chain+0x64>
 801597a:	2301      	movs	r3, #1
 801597c:	61bb      	str	r3, [r7, #24]
 801597e:	e018      	b.n	80159b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015980:	6839      	ldr	r1, [r7, #0]
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	f7ff fded 	bl	8015562 <get_fat>
 8015988:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	2b01      	cmp	r3, #1
 801598e:	d801      	bhi.n	8015994 <create_chain+0x46>
 8015990:	2301      	movs	r3, #1
 8015992:	e070      	b.n	8015a76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801599a:	d101      	bne.n	80159a0 <create_chain+0x52>
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	e06a      	b.n	8015a76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	699b      	ldr	r3, [r3, #24]
 80159a4:	68fa      	ldr	r2, [r7, #12]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d201      	bcs.n	80159ae <create_chain+0x60>
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	e063      	b.n	8015a76 <create_chain+0x128>
		scl = clst;
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	3301      	adds	r3, #1
 80159ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	699b      	ldr	r3, [r3, #24]
 80159c0:	69fa      	ldr	r2, [r7, #28]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d307      	bcc.n	80159d6 <create_chain+0x88>
				ncl = 2;
 80159c6:	2302      	movs	r3, #2
 80159c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80159ca:	69fa      	ldr	r2, [r7, #28]
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d901      	bls.n	80159d6 <create_chain+0x88>
 80159d2:	2300      	movs	r3, #0
 80159d4:	e04f      	b.n	8015a76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80159d6:	69f9      	ldr	r1, [r7, #28]
 80159d8:	6878      	ldr	r0, [r7, #4]
 80159da:	f7ff fdc2 	bl	8015562 <get_fat>
 80159de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d00e      	beq.n	8015a04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2b01      	cmp	r3, #1
 80159ea:	d003      	beq.n	80159f4 <create_chain+0xa6>
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159f2:	d101      	bne.n	80159f8 <create_chain+0xaa>
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	e03e      	b.n	8015a76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80159f8:	69fa      	ldr	r2, [r7, #28]
 80159fa:	69bb      	ldr	r3, [r7, #24]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d1da      	bne.n	80159b6 <create_chain+0x68>
 8015a00:	2300      	movs	r3, #0
 8015a02:	e038      	b.n	8015a76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015a04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015a06:	f04f 32ff 	mov.w	r2, #4294967295
 8015a0a:	69f9      	ldr	r1, [r7, #28]
 8015a0c:	6938      	ldr	r0, [r7, #16]
 8015a0e:	f7ff fe4f 	bl	80156b0 <put_fat>
 8015a12:	4603      	mov	r3, r0
 8015a14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015a16:	7dfb      	ldrb	r3, [r7, #23]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d109      	bne.n	8015a30 <create_chain+0xe2>
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d006      	beq.n	8015a30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015a22:	69fa      	ldr	r2, [r7, #28]
 8015a24:	6839      	ldr	r1, [r7, #0]
 8015a26:	6938      	ldr	r0, [r7, #16]
 8015a28:	f7ff fe42 	bl	80156b0 <put_fat>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015a30:	7dfb      	ldrb	r3, [r7, #23]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d116      	bne.n	8015a64 <create_chain+0x116>
		fs->last_clst = ncl;
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	69fa      	ldr	r2, [r7, #28]
 8015a3a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	695a      	ldr	r2, [r3, #20]
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	699b      	ldr	r3, [r3, #24]
 8015a44:	3b02      	subs	r3, #2
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d804      	bhi.n	8015a54 <create_chain+0x106>
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	695b      	ldr	r3, [r3, #20]
 8015a4e:	1e5a      	subs	r2, r3, #1
 8015a50:	693b      	ldr	r3, [r7, #16]
 8015a52:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	791b      	ldrb	r3, [r3, #4]
 8015a58:	f043 0301 	orr.w	r3, r3, #1
 8015a5c:	b2da      	uxtb	r2, r3
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	711a      	strb	r2, [r3, #4]
 8015a62:	e007      	b.n	8015a74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015a64:	7dfb      	ldrb	r3, [r7, #23]
 8015a66:	2b01      	cmp	r3, #1
 8015a68:	d102      	bne.n	8015a70 <create_chain+0x122>
 8015a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a6e:	e000      	b.n	8015a72 <create_chain+0x124>
 8015a70:	2301      	movs	r3, #1
 8015a72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015a74:	69fb      	ldr	r3, [r7, #28]
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3720      	adds	r7, #32
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}

08015a7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015a7e:	b480      	push	{r7}
 8015a80:	b087      	sub	sp, #28
 8015a82:	af00      	add	r7, sp, #0
 8015a84:	6078      	str	r0, [r7, #4]
 8015a86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a92:	3304      	adds	r3, #4
 8015a94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	0a5b      	lsrs	r3, r3, #9
 8015a9a:	68fa      	ldr	r2, [r7, #12]
 8015a9c:	8952      	ldrh	r2, [r2, #10]
 8015a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015aa2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	1d1a      	adds	r2, r3, #4
 8015aa8:	613a      	str	r2, [r7, #16]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d101      	bne.n	8015ab8 <clmt_clust+0x3a>
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	e010      	b.n	8015ada <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8015ab8:	697a      	ldr	r2, [r7, #20]
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d307      	bcc.n	8015ad0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015ac0:	697a      	ldr	r2, [r7, #20]
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	1ad3      	subs	r3, r2, r3
 8015ac6:	617b      	str	r3, [r7, #20]
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	3304      	adds	r3, #4
 8015acc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015ace:	e7e9      	b.n	8015aa4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8015ad0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	681a      	ldr	r2, [r3, #0]
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	4413      	add	r3, r2
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	371c      	adds	r7, #28
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae4:	4770      	bx	lr

08015ae6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b086      	sub	sp, #24
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015afc:	d204      	bcs.n	8015b08 <dir_sdi+0x22>
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	f003 031f 	and.w	r3, r3, #31
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d001      	beq.n	8015b0c <dir_sdi+0x26>
		return FR_INT_ERR;
 8015b08:	2302      	movs	r3, #2
 8015b0a:	e063      	b.n	8015bd4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	683a      	ldr	r2, [r7, #0]
 8015b10:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	689b      	ldr	r3, [r3, #8]
 8015b16:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d106      	bne.n	8015b2c <dir_sdi+0x46>
 8015b1e:	693b      	ldr	r3, [r7, #16]
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	2b02      	cmp	r3, #2
 8015b24:	d902      	bls.n	8015b2c <dir_sdi+0x46>
		clst = fs->dirbase;
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b2a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d10c      	bne.n	8015b4c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	095b      	lsrs	r3, r3, #5
 8015b36:	693a      	ldr	r2, [r7, #16]
 8015b38:	8912      	ldrh	r2, [r2, #8]
 8015b3a:	4293      	cmp	r3, r2
 8015b3c:	d301      	bcc.n	8015b42 <dir_sdi+0x5c>
 8015b3e:	2302      	movs	r3, #2
 8015b40:	e048      	b.n	8015bd4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	61da      	str	r2, [r3, #28]
 8015b4a:	e029      	b.n	8015ba0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015b4c:	693b      	ldr	r3, [r7, #16]
 8015b4e:	895b      	ldrh	r3, [r3, #10]
 8015b50:	025b      	lsls	r3, r3, #9
 8015b52:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015b54:	e019      	b.n	8015b8a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	6979      	ldr	r1, [r7, #20]
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7ff fd01 	bl	8015562 <get_fat>
 8015b60:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b68:	d101      	bne.n	8015b6e <dir_sdi+0x88>
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e032      	b.n	8015bd4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	2b01      	cmp	r3, #1
 8015b72:	d904      	bls.n	8015b7e <dir_sdi+0x98>
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	699b      	ldr	r3, [r3, #24]
 8015b78:	697a      	ldr	r2, [r7, #20]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d301      	bcc.n	8015b82 <dir_sdi+0x9c>
 8015b7e:	2302      	movs	r3, #2
 8015b80:	e028      	b.n	8015bd4 <dir_sdi+0xee>
			ofs -= csz;
 8015b82:	683a      	ldr	r2, [r7, #0]
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	1ad3      	subs	r3, r2, r3
 8015b88:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015b8a:	683a      	ldr	r2, [r7, #0]
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d2e1      	bcs.n	8015b56 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015b92:	6979      	ldr	r1, [r7, #20]
 8015b94:	6938      	ldr	r0, [r7, #16]
 8015b96:	f7ff fcc5 	bl	8015524 <clust2sect>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	697a      	ldr	r2, [r7, #20]
 8015ba4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	69db      	ldr	r3, [r3, #28]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d101      	bne.n	8015bb2 <dir_sdi+0xcc>
 8015bae:	2302      	movs	r3, #2
 8015bb0:	e010      	b.n	8015bd4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	69da      	ldr	r2, [r3, #28]
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	0a5b      	lsrs	r3, r3, #9
 8015bba:	441a      	add	r2, r3
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015bcc:	441a      	add	r2, r3
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015bd2:	2300      	movs	r3, #0
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3718      	adds	r7, #24
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b086      	sub	sp, #24
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	695b      	ldr	r3, [r3, #20]
 8015bf0:	3320      	adds	r3, #32
 8015bf2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	69db      	ldr	r3, [r3, #28]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d003      	beq.n	8015c04 <dir_next+0x28>
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015c02:	d301      	bcc.n	8015c08 <dir_next+0x2c>
 8015c04:	2304      	movs	r3, #4
 8015c06:	e0aa      	b.n	8015d5e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	f040 8098 	bne.w	8015d44 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	69db      	ldr	r3, [r3, #28]
 8015c18:	1c5a      	adds	r2, r3, #1
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	699b      	ldr	r3, [r3, #24]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d10b      	bne.n	8015c3e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	095b      	lsrs	r3, r3, #5
 8015c2a:	68fa      	ldr	r2, [r7, #12]
 8015c2c:	8912      	ldrh	r2, [r2, #8]
 8015c2e:	4293      	cmp	r3, r2
 8015c30:	f0c0 8088 	bcc.w	8015d44 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2200      	movs	r2, #0
 8015c38:	61da      	str	r2, [r3, #28]
 8015c3a:	2304      	movs	r3, #4
 8015c3c:	e08f      	b.n	8015d5e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	0a5b      	lsrs	r3, r3, #9
 8015c42:	68fa      	ldr	r2, [r7, #12]
 8015c44:	8952      	ldrh	r2, [r2, #10]
 8015c46:	3a01      	subs	r2, #1
 8015c48:	4013      	ands	r3, r2
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d17a      	bne.n	8015d44 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015c4e:	687a      	ldr	r2, [r7, #4]
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	699b      	ldr	r3, [r3, #24]
 8015c54:	4619      	mov	r1, r3
 8015c56:	4610      	mov	r0, r2
 8015c58:	f7ff fc83 	bl	8015562 <get_fat>
 8015c5c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	2b01      	cmp	r3, #1
 8015c62:	d801      	bhi.n	8015c68 <dir_next+0x8c>
 8015c64:	2302      	movs	r3, #2
 8015c66:	e07a      	b.n	8015d5e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c6e:	d101      	bne.n	8015c74 <dir_next+0x98>
 8015c70:	2301      	movs	r3, #1
 8015c72:	e074      	b.n	8015d5e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	699b      	ldr	r3, [r3, #24]
 8015c78:	697a      	ldr	r2, [r7, #20]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d358      	bcc.n	8015d30 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d104      	bne.n	8015c8e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2200      	movs	r2, #0
 8015c88:	61da      	str	r2, [r3, #28]
 8015c8a:	2304      	movs	r3, #4
 8015c8c:	e067      	b.n	8015d5e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015c8e:	687a      	ldr	r2, [r7, #4]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	699b      	ldr	r3, [r3, #24]
 8015c94:	4619      	mov	r1, r3
 8015c96:	4610      	mov	r0, r2
 8015c98:	f7ff fe59 	bl	801594e <create_chain>
 8015c9c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d101      	bne.n	8015ca8 <dir_next+0xcc>
 8015ca4:	2307      	movs	r3, #7
 8015ca6:	e05a      	b.n	8015d5e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	2b01      	cmp	r3, #1
 8015cac:	d101      	bne.n	8015cb2 <dir_next+0xd6>
 8015cae:	2302      	movs	r3, #2
 8015cb0:	e055      	b.n	8015d5e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cb8:	d101      	bne.n	8015cbe <dir_next+0xe2>
 8015cba:	2301      	movs	r3, #1
 8015cbc:	e04f      	b.n	8015d5e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015cbe:	68f8      	ldr	r0, [r7, #12]
 8015cc0:	f7ff fb50 	bl	8015364 <sync_window>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d001      	beq.n	8015cce <dir_next+0xf2>
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e047      	b.n	8015d5e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	3334      	adds	r3, #52	@ 0x34
 8015cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015cd6:	2100      	movs	r1, #0
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f7ff f949 	bl	8014f70 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015cde:	2300      	movs	r3, #0
 8015ce0:	613b      	str	r3, [r7, #16]
 8015ce2:	6979      	ldr	r1, [r7, #20]
 8015ce4:	68f8      	ldr	r0, [r7, #12]
 8015ce6:	f7ff fc1d 	bl	8015524 <clust2sect>
 8015cea:	4602      	mov	r2, r0
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	631a      	str	r2, [r3, #48]	@ 0x30
 8015cf0:	e012      	b.n	8015d18 <dir_next+0x13c>
						fs->wflag = 1;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	2201      	movs	r2, #1
 8015cf6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015cf8:	68f8      	ldr	r0, [r7, #12]
 8015cfa:	f7ff fb33 	bl	8015364 <sync_window>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d001      	beq.n	8015d08 <dir_next+0x12c>
 8015d04:	2301      	movs	r3, #1
 8015d06:	e02a      	b.n	8015d5e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	3301      	adds	r3, #1
 8015d0c:	613b      	str	r3, [r7, #16]
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d12:	1c5a      	adds	r2, r3, #1
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	631a      	str	r2, [r3, #48]	@ 0x30
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	895b      	ldrh	r3, [r3, #10]
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	4293      	cmp	r3, r2
 8015d22:	d3e6      	bcc.n	8015cf2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	1ad2      	subs	r2, r2, r3
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	697a      	ldr	r2, [r7, #20]
 8015d34:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015d36:	6979      	ldr	r1, [r7, #20]
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f7ff fbf3 	bl	8015524 <clust2sect>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	68ba      	ldr	r2, [r7, #8]
 8015d48:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d56:	441a      	add	r2, r3
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015d5c:	2300      	movs	r3, #0
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3718      	adds	r7, #24
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}

08015d66 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015d66:	b580      	push	{r7, lr}
 8015d68:	b086      	sub	sp, #24
 8015d6a:	af00      	add	r7, sp, #0
 8015d6c:	6078      	str	r0, [r7, #4]
 8015d6e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015d76:	2100      	movs	r1, #0
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f7ff feb4 	bl	8015ae6 <dir_sdi>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015d82:	7dfb      	ldrb	r3, [r7, #23]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d12b      	bne.n	8015de0 <dir_alloc+0x7a>
		n = 0;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	69db      	ldr	r3, [r3, #28]
 8015d90:	4619      	mov	r1, r3
 8015d92:	68f8      	ldr	r0, [r7, #12]
 8015d94:	f7ff fb2a 	bl	80153ec <move_window>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015d9c:	7dfb      	ldrb	r3, [r7, #23]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d11d      	bne.n	8015dde <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6a1b      	ldr	r3, [r3, #32]
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	2be5      	cmp	r3, #229	@ 0xe5
 8015daa:	d004      	beq.n	8015db6 <dir_alloc+0x50>
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	6a1b      	ldr	r3, [r3, #32]
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d107      	bne.n	8015dc6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	3301      	adds	r3, #1
 8015dba:	613b      	str	r3, [r7, #16]
 8015dbc:	693a      	ldr	r2, [r7, #16]
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d102      	bne.n	8015dca <dir_alloc+0x64>
 8015dc4:	e00c      	b.n	8015de0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015dca:	2101      	movs	r1, #1
 8015dcc:	6878      	ldr	r0, [r7, #4]
 8015dce:	f7ff ff05 	bl	8015bdc <dir_next>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015dd6:	7dfb      	ldrb	r3, [r7, #23]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d0d7      	beq.n	8015d8c <dir_alloc+0x26>
 8015ddc:	e000      	b.n	8015de0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015dde:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015de0:	7dfb      	ldrb	r3, [r7, #23]
 8015de2:	2b04      	cmp	r3, #4
 8015de4:	d101      	bne.n	8015dea <dir_alloc+0x84>
 8015de6:	2307      	movs	r3, #7
 8015de8:	75fb      	strb	r3, [r7, #23]
	return res;
 8015dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8015dec:	4618      	mov	r0, r3
 8015dee:	3718      	adds	r7, #24
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}

08015df4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b084      	sub	sp, #16
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	331a      	adds	r3, #26
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7ff f810 	bl	8014e28 <ld_word>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	781b      	ldrb	r3, [r3, #0]
 8015e10:	2b03      	cmp	r3, #3
 8015e12:	d109      	bne.n	8015e28 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	3314      	adds	r3, #20
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7ff f805 	bl	8014e28 <ld_word>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	041b      	lsls	r3, r3, #16
 8015e22:	68fa      	ldr	r2, [r7, #12]
 8015e24:	4313      	orrs	r3, r2
 8015e26:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015e28:	68fb      	ldr	r3, [r7, #12]
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	3710      	adds	r7, #16
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}

08015e32 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015e32:	b580      	push	{r7, lr}
 8015e34:	b084      	sub	sp, #16
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	60f8      	str	r0, [r7, #12]
 8015e3a:	60b9      	str	r1, [r7, #8]
 8015e3c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	331a      	adds	r3, #26
 8015e42:	687a      	ldr	r2, [r7, #4]
 8015e44:	b292      	uxth	r2, r2
 8015e46:	4611      	mov	r1, r2
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7ff f829 	bl	8014ea0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	2b03      	cmp	r3, #3
 8015e54:	d109      	bne.n	8015e6a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015e56:	68bb      	ldr	r3, [r7, #8]
 8015e58:	f103 0214 	add.w	r2, r3, #20
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	0c1b      	lsrs	r3, r3, #16
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	4619      	mov	r1, r3
 8015e64:	4610      	mov	r0, r2
 8015e66:	f7ff f81b 	bl	8014ea0 <st_word>
	}
}
 8015e6a:	bf00      	nop
 8015e6c:	3710      	adds	r7, #16
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}

08015e72 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015e72:	b580      	push	{r7, lr}
 8015e74:	b086      	sub	sp, #24
 8015e76:	af00      	add	r7, sp, #0
 8015e78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015e80:	2100      	movs	r1, #0
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f7ff fe2f 	bl	8015ae6 <dir_sdi>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015e8c:	7dfb      	ldrb	r3, [r7, #23]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d001      	beq.n	8015e96 <dir_find+0x24>
 8015e92:	7dfb      	ldrb	r3, [r7, #23]
 8015e94:	e03e      	b.n	8015f14 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	69db      	ldr	r3, [r3, #28]
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	6938      	ldr	r0, [r7, #16]
 8015e9e:	f7ff faa5 	bl	80153ec <move_window>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015ea6:	7dfb      	ldrb	r3, [r7, #23]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d12f      	bne.n	8015f0c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	6a1b      	ldr	r3, [r3, #32]
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015eb4:	7bfb      	ldrb	r3, [r7, #15]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d102      	bne.n	8015ec0 <dir_find+0x4e>
 8015eba:	2304      	movs	r3, #4
 8015ebc:	75fb      	strb	r3, [r7, #23]
 8015ebe:	e028      	b.n	8015f12 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	6a1b      	ldr	r3, [r3, #32]
 8015ec4:	330b      	adds	r3, #11
 8015ec6:	781b      	ldrb	r3, [r3, #0]
 8015ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015ecc:	b2da      	uxtb	r2, r3
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6a1b      	ldr	r3, [r3, #32]
 8015ed6:	330b      	adds	r3, #11
 8015ed8:	781b      	ldrb	r3, [r3, #0]
 8015eda:	f003 0308 	and.w	r3, r3, #8
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d10a      	bne.n	8015ef8 <dir_find+0x86>
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	6a18      	ldr	r0, [r3, #32]
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	3324      	adds	r3, #36	@ 0x24
 8015eea:	220b      	movs	r2, #11
 8015eec:	4619      	mov	r1, r3
 8015eee:	f7ff f85a 	bl	8014fa6 <mem_cmp>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d00b      	beq.n	8015f10 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015ef8:	2100      	movs	r1, #0
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f7ff fe6e 	bl	8015bdc <dir_next>
 8015f00:	4603      	mov	r3, r0
 8015f02:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015f04:	7dfb      	ldrb	r3, [r7, #23]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d0c5      	beq.n	8015e96 <dir_find+0x24>
 8015f0a:	e002      	b.n	8015f12 <dir_find+0xa0>
		if (res != FR_OK) break;
 8015f0c:	bf00      	nop
 8015f0e:	e000      	b.n	8015f12 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015f10:	bf00      	nop

	return res;
 8015f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3718      	adds	r7, #24
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f7ff ff1a 	bl	8015d66 <dir_alloc>
 8015f32:	4603      	mov	r3, r0
 8015f34:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015f36:	7bfb      	ldrb	r3, [r7, #15]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d11c      	bne.n	8015f76 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	69db      	ldr	r3, [r3, #28]
 8015f40:	4619      	mov	r1, r3
 8015f42:	68b8      	ldr	r0, [r7, #8]
 8015f44:	f7ff fa52 	bl	80153ec <move_window>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015f4c:	7bfb      	ldrb	r3, [r7, #15]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d111      	bne.n	8015f76 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	6a1b      	ldr	r3, [r3, #32]
 8015f56:	2220      	movs	r2, #32
 8015f58:	2100      	movs	r1, #0
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7ff f808 	bl	8014f70 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6a18      	ldr	r0, [r3, #32]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	3324      	adds	r3, #36	@ 0x24
 8015f68:	220b      	movs	r2, #11
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	f7fe ffdf 	bl	8014f2e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	2201      	movs	r2, #1
 8015f74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	3710      	adds	r7, #16
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b088      	sub	sp, #32
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	60fb      	str	r3, [r7, #12]
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	3324      	adds	r3, #36	@ 0x24
 8015f94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8015f96:	220b      	movs	r2, #11
 8015f98:	2120      	movs	r1, #32
 8015f9a:	68b8      	ldr	r0, [r7, #8]
 8015f9c:	f7fe ffe8 	bl	8014f70 <mem_set>
	si = i = 0; ni = 8;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	613b      	str	r3, [r7, #16]
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	61fb      	str	r3, [r7, #28]
 8015fa8:	2308      	movs	r3, #8
 8015faa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8015fac:	69fb      	ldr	r3, [r7, #28]
 8015fae:	1c5a      	adds	r2, r3, #1
 8015fb0:	61fa      	str	r2, [r7, #28]
 8015fb2:	68fa      	ldr	r2, [r7, #12]
 8015fb4:	4413      	add	r3, r2
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015fba:	7efb      	ldrb	r3, [r7, #27]
 8015fbc:	2b20      	cmp	r3, #32
 8015fbe:	d94e      	bls.n	801605e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8015fc0:	7efb      	ldrb	r3, [r7, #27]
 8015fc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8015fc4:	d006      	beq.n	8015fd4 <create_name+0x54>
 8015fc6:	7efb      	ldrb	r3, [r7, #27]
 8015fc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8015fca:	d110      	bne.n	8015fee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015fcc:	e002      	b.n	8015fd4 <create_name+0x54>
 8015fce:	69fb      	ldr	r3, [r7, #28]
 8015fd0:	3301      	adds	r3, #1
 8015fd2:	61fb      	str	r3, [r7, #28]
 8015fd4:	68fa      	ldr	r2, [r7, #12]
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	4413      	add	r3, r2
 8015fda:	781b      	ldrb	r3, [r3, #0]
 8015fdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8015fde:	d0f6      	beq.n	8015fce <create_name+0x4e>
 8015fe0:	68fa      	ldr	r2, [r7, #12]
 8015fe2:	69fb      	ldr	r3, [r7, #28]
 8015fe4:	4413      	add	r3, r2
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	2b5c      	cmp	r3, #92	@ 0x5c
 8015fea:	d0f0      	beq.n	8015fce <create_name+0x4e>
			break;
 8015fec:	e038      	b.n	8016060 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8015fee:	7efb      	ldrb	r3, [r7, #27]
 8015ff0:	2b2e      	cmp	r3, #46	@ 0x2e
 8015ff2:	d003      	beq.n	8015ffc <create_name+0x7c>
 8015ff4:	693a      	ldr	r2, [r7, #16]
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d30c      	bcc.n	8016016 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	2b0b      	cmp	r3, #11
 8016000:	d002      	beq.n	8016008 <create_name+0x88>
 8016002:	7efb      	ldrb	r3, [r7, #27]
 8016004:	2b2e      	cmp	r3, #46	@ 0x2e
 8016006:	d001      	beq.n	801600c <create_name+0x8c>
 8016008:	2306      	movs	r3, #6
 801600a:	e044      	b.n	8016096 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801600c:	2308      	movs	r3, #8
 801600e:	613b      	str	r3, [r7, #16]
 8016010:	230b      	movs	r3, #11
 8016012:	617b      	str	r3, [r7, #20]
			continue;
 8016014:	e022      	b.n	801605c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016016:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801601a:	2b00      	cmp	r3, #0
 801601c:	da04      	bge.n	8016028 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801601e:	7efb      	ldrb	r3, [r7, #27]
 8016020:	3b80      	subs	r3, #128	@ 0x80
 8016022:	4a1f      	ldr	r2, [pc, #124]	@ (80160a0 <create_name+0x120>)
 8016024:	5cd3      	ldrb	r3, [r2, r3]
 8016026:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016028:	7efb      	ldrb	r3, [r7, #27]
 801602a:	4619      	mov	r1, r3
 801602c:	481d      	ldr	r0, [pc, #116]	@ (80160a4 <create_name+0x124>)
 801602e:	f7fe ffe1 	bl	8014ff4 <chk_chr>
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	d001      	beq.n	801603c <create_name+0xbc>
 8016038:	2306      	movs	r3, #6
 801603a:	e02c      	b.n	8016096 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801603c:	7efb      	ldrb	r3, [r7, #27]
 801603e:	2b60      	cmp	r3, #96	@ 0x60
 8016040:	d905      	bls.n	801604e <create_name+0xce>
 8016042:	7efb      	ldrb	r3, [r7, #27]
 8016044:	2b7a      	cmp	r3, #122	@ 0x7a
 8016046:	d802      	bhi.n	801604e <create_name+0xce>
 8016048:	7efb      	ldrb	r3, [r7, #27]
 801604a:	3b20      	subs	r3, #32
 801604c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801604e:	693b      	ldr	r3, [r7, #16]
 8016050:	1c5a      	adds	r2, r3, #1
 8016052:	613a      	str	r2, [r7, #16]
 8016054:	68ba      	ldr	r2, [r7, #8]
 8016056:	4413      	add	r3, r2
 8016058:	7efa      	ldrb	r2, [r7, #27]
 801605a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801605c:	e7a6      	b.n	8015fac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801605e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016060:	68fa      	ldr	r2, [r7, #12]
 8016062:	69fb      	ldr	r3, [r7, #28]
 8016064:	441a      	add	r2, r3
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d101      	bne.n	8016074 <create_name+0xf4>
 8016070:	2306      	movs	r3, #6
 8016072:	e010      	b.n	8016096 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	2be5      	cmp	r3, #229	@ 0xe5
 801607a:	d102      	bne.n	8016082 <create_name+0x102>
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	2205      	movs	r2, #5
 8016080:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016082:	7efb      	ldrb	r3, [r7, #27]
 8016084:	2b20      	cmp	r3, #32
 8016086:	d801      	bhi.n	801608c <create_name+0x10c>
 8016088:	2204      	movs	r2, #4
 801608a:	e000      	b.n	801608e <create_name+0x10e>
 801608c:	2200      	movs	r2, #0
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	330b      	adds	r3, #11
 8016092:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016094:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8016096:	4618      	mov	r0, r3
 8016098:	3720      	adds	r7, #32
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	0801ed18 	.word	0x0801ed18
 80160a4:	0801ec98 	.word	0x0801ec98

080160a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b086      	sub	sp, #24
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80160bc:	e002      	b.n	80160c4 <follow_path+0x1c>
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	3301      	adds	r3, #1
 80160c2:	603b      	str	r3, [r7, #0]
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80160ca:	d0f8      	beq.n	80160be <follow_path+0x16>
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	781b      	ldrb	r3, [r3, #0]
 80160d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80160d2:	d0f4      	beq.n	80160be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	2200      	movs	r2, #0
 80160d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	2b1f      	cmp	r3, #31
 80160e0:	d80a      	bhi.n	80160f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2280      	movs	r2, #128	@ 0x80
 80160e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80160ea:	2100      	movs	r1, #0
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7ff fcfa 	bl	8015ae6 <dir_sdi>
 80160f2:	4603      	mov	r3, r0
 80160f4:	75fb      	strb	r3, [r7, #23]
 80160f6:	e043      	b.n	8016180 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80160f8:	463b      	mov	r3, r7
 80160fa:	4619      	mov	r1, r3
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f7ff ff3f 	bl	8015f80 <create_name>
 8016102:	4603      	mov	r3, r0
 8016104:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016106:	7dfb      	ldrb	r3, [r7, #23]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d134      	bne.n	8016176 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f7ff feb0 	bl	8015e72 <dir_find>
 8016112:	4603      	mov	r3, r0
 8016114:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801611c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801611e:	7dfb      	ldrb	r3, [r7, #23]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d00a      	beq.n	801613a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016124:	7dfb      	ldrb	r3, [r7, #23]
 8016126:	2b04      	cmp	r3, #4
 8016128:	d127      	bne.n	801617a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801612a:	7afb      	ldrb	r3, [r7, #11]
 801612c:	f003 0304 	and.w	r3, r3, #4
 8016130:	2b00      	cmp	r3, #0
 8016132:	d122      	bne.n	801617a <follow_path+0xd2>
 8016134:	2305      	movs	r3, #5
 8016136:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016138:	e01f      	b.n	801617a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801613a:	7afb      	ldrb	r3, [r7, #11]
 801613c:	f003 0304 	and.w	r3, r3, #4
 8016140:	2b00      	cmp	r3, #0
 8016142:	d11c      	bne.n	801617e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	799b      	ldrb	r3, [r3, #6]
 8016148:	f003 0310 	and.w	r3, r3, #16
 801614c:	2b00      	cmp	r3, #0
 801614e:	d102      	bne.n	8016156 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016150:	2305      	movs	r3, #5
 8016152:	75fb      	strb	r3, [r7, #23]
 8016154:	e014      	b.n	8016180 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	695b      	ldr	r3, [r3, #20]
 8016160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016164:	4413      	add	r3, r2
 8016166:	4619      	mov	r1, r3
 8016168:	68f8      	ldr	r0, [r7, #12]
 801616a:	f7ff fe43 	bl	8015df4 <ld_clust>
 801616e:	4602      	mov	r2, r0
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016174:	e7c0      	b.n	80160f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8016176:	bf00      	nop
 8016178:	e002      	b.n	8016180 <follow_path+0xd8>
				break;
 801617a:	bf00      	nop
 801617c:	e000      	b.n	8016180 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801617e:	bf00      	nop
			}
		}
	}

	return res;
 8016180:	7dfb      	ldrb	r3, [r7, #23]
}
 8016182:	4618      	mov	r0, r3
 8016184:	3718      	adds	r7, #24
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}

0801618a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801618a:	b480      	push	{r7}
 801618c:	b087      	sub	sp, #28
 801618e:	af00      	add	r7, sp, #0
 8016190:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016192:	f04f 33ff 	mov.w	r3, #4294967295
 8016196:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d031      	beq.n	8016204 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	617b      	str	r3, [r7, #20]
 80161a6:	e002      	b.n	80161ae <get_ldnumber+0x24>
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	3301      	adds	r3, #1
 80161ac:	617b      	str	r3, [r7, #20]
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	2b20      	cmp	r3, #32
 80161b4:	d903      	bls.n	80161be <get_ldnumber+0x34>
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80161bc:	d1f4      	bne.n	80161a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80161be:	697b      	ldr	r3, [r7, #20]
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80161c4:	d11c      	bne.n	8016200 <get_ldnumber+0x76>
			tp = *path;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	1c5a      	adds	r2, r3, #1
 80161d0:	60fa      	str	r2, [r7, #12]
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	3b30      	subs	r3, #48	@ 0x30
 80161d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	2b09      	cmp	r3, #9
 80161dc:	d80e      	bhi.n	80161fc <get_ldnumber+0x72>
 80161de:	68fa      	ldr	r2, [r7, #12]
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d10a      	bne.n	80161fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d107      	bne.n	80161fc <get_ldnumber+0x72>
					vol = (int)i;
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	3301      	adds	r3, #1
 80161f4:	617b      	str	r3, [r7, #20]
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	697a      	ldr	r2, [r7, #20]
 80161fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	e002      	b.n	8016206 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016200:	2300      	movs	r3, #0
 8016202:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016204:	693b      	ldr	r3, [r7, #16]
}
 8016206:	4618      	mov	r0, r3
 8016208:	371c      	adds	r7, #28
 801620a:	46bd      	mov	sp, r7
 801620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016210:	4770      	bx	lr
	...

08016214 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b082      	sub	sp, #8
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2200      	movs	r2, #0
 8016222:	70da      	strb	r2, [r3, #3]
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f04f 32ff 	mov.w	r2, #4294967295
 801622a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801622c:	6839      	ldr	r1, [r7, #0]
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f7ff f8dc 	bl	80153ec <move_window>
 8016234:	4603      	mov	r3, r0
 8016236:	2b00      	cmp	r3, #0
 8016238:	d001      	beq.n	801623e <check_fs+0x2a>
 801623a:	2304      	movs	r3, #4
 801623c:	e038      	b.n	80162b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	3334      	adds	r3, #52	@ 0x34
 8016242:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8016246:	4618      	mov	r0, r3
 8016248:	f7fe fdee 	bl	8014e28 <ld_word>
 801624c:	4603      	mov	r3, r0
 801624e:	461a      	mov	r2, r3
 8016250:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8016254:	429a      	cmp	r2, r3
 8016256:	d001      	beq.n	801625c <check_fs+0x48>
 8016258:	2303      	movs	r3, #3
 801625a:	e029      	b.n	80162b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016262:	2be9      	cmp	r3, #233	@ 0xe9
 8016264:	d009      	beq.n	801627a <check_fs+0x66>
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801626c:	2beb      	cmp	r3, #235	@ 0xeb
 801626e:	d11e      	bne.n	80162ae <check_fs+0x9a>
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8016276:	2b90      	cmp	r3, #144	@ 0x90
 8016278:	d119      	bne.n	80162ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	3334      	adds	r3, #52	@ 0x34
 801627e:	3336      	adds	r3, #54	@ 0x36
 8016280:	4618      	mov	r0, r3
 8016282:	f7fe fdea 	bl	8014e5a <ld_dword>
 8016286:	4603      	mov	r3, r0
 8016288:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801628c:	4a0a      	ldr	r2, [pc, #40]	@ (80162b8 <check_fs+0xa4>)
 801628e:	4293      	cmp	r3, r2
 8016290:	d101      	bne.n	8016296 <check_fs+0x82>
 8016292:	2300      	movs	r3, #0
 8016294:	e00c      	b.n	80162b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	3334      	adds	r3, #52	@ 0x34
 801629a:	3352      	adds	r3, #82	@ 0x52
 801629c:	4618      	mov	r0, r3
 801629e:	f7fe fddc 	bl	8014e5a <ld_dword>
 80162a2:	4603      	mov	r3, r0
 80162a4:	4a05      	ldr	r2, [pc, #20]	@ (80162bc <check_fs+0xa8>)
 80162a6:	4293      	cmp	r3, r2
 80162a8:	d101      	bne.n	80162ae <check_fs+0x9a>
 80162aa:	2300      	movs	r3, #0
 80162ac:	e000      	b.n	80162b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80162ae:	2302      	movs	r3, #2
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3708      	adds	r7, #8
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}
 80162b8:	00544146 	.word	0x00544146
 80162bc:	33544146 	.word	0x33544146

080162c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b096      	sub	sp, #88	@ 0x58
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	60f8      	str	r0, [r7, #12]
 80162c8:	60b9      	str	r1, [r7, #8]
 80162ca:	4613      	mov	r3, r2
 80162cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	2200      	movs	r2, #0
 80162d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80162d4:	68f8      	ldr	r0, [r7, #12]
 80162d6:	f7ff ff58 	bl	801618a <get_ldnumber>
 80162da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80162dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162de:	2b00      	cmp	r3, #0
 80162e0:	da01      	bge.n	80162e6 <find_volume+0x26>
 80162e2:	230b      	movs	r3, #11
 80162e4:	e235      	b.n	8016752 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80162e6:	4aa5      	ldr	r2, [pc, #660]	@ (801657c <find_volume+0x2bc>)
 80162e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80162f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d101      	bne.n	80162fa <find_volume+0x3a>
 80162f6:	230c      	movs	r3, #12
 80162f8:	e22b      	b.n	8016752 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80162fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80162fc:	f7fe fe95 	bl	801502a <lock_fs>
 8016300:	4603      	mov	r3, r0
 8016302:	2b00      	cmp	r3, #0
 8016304:	d101      	bne.n	801630a <find_volume+0x4a>
 8016306:	230f      	movs	r3, #15
 8016308:	e223      	b.n	8016752 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801630e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016310:	79fb      	ldrb	r3, [r7, #7]
 8016312:	f023 0301 	bic.w	r3, r3, #1
 8016316:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d01a      	beq.n	8016356 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8016320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016322:	785b      	ldrb	r3, [r3, #1]
 8016324:	4618      	mov	r0, r3
 8016326:	f7fe fce1 	bl	8014cec <disk_status>
 801632a:	4603      	mov	r3, r0
 801632c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016330:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016334:	f003 0301 	and.w	r3, r3, #1
 8016338:	2b00      	cmp	r3, #0
 801633a:	d10c      	bne.n	8016356 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801633c:	79fb      	ldrb	r3, [r7, #7]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d007      	beq.n	8016352 <find_volume+0x92>
 8016342:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016346:	f003 0304 	and.w	r3, r3, #4
 801634a:	2b00      	cmp	r3, #0
 801634c:	d001      	beq.n	8016352 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801634e:	230a      	movs	r3, #10
 8016350:	e1ff      	b.n	8016752 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8016352:	2300      	movs	r3, #0
 8016354:	e1fd      	b.n	8016752 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016358:	2200      	movs	r2, #0
 801635a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801635c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801635e:	b2da      	uxtb	r2, r3
 8016360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016362:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016366:	785b      	ldrb	r3, [r3, #1]
 8016368:	4618      	mov	r0, r3
 801636a:	f7fe fcd9 	bl	8014d20 <disk_initialize>
 801636e:	4603      	mov	r3, r0
 8016370:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016374:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016378:	f003 0301 	and.w	r3, r3, #1
 801637c:	2b00      	cmp	r3, #0
 801637e:	d001      	beq.n	8016384 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016380:	2303      	movs	r3, #3
 8016382:	e1e6      	b.n	8016752 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016384:	79fb      	ldrb	r3, [r7, #7]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d007      	beq.n	801639a <find_volume+0xda>
 801638a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801638e:	f003 0304 	and.w	r3, r3, #4
 8016392:	2b00      	cmp	r3, #0
 8016394:	d001      	beq.n	801639a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8016396:	230a      	movs	r3, #10
 8016398:	e1db      	b.n	8016752 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801639a:	2300      	movs	r3, #0
 801639c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801639e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80163a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80163a2:	f7ff ff37 	bl	8016214 <check_fs>
 80163a6:	4603      	mov	r3, r0
 80163a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80163ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80163b0:	2b02      	cmp	r3, #2
 80163b2:	d149      	bne.n	8016448 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80163b4:	2300      	movs	r3, #0
 80163b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80163b8:	e01e      	b.n	80163f8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80163ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80163c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80163c2:	011b      	lsls	r3, r3, #4
 80163c4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80163c8:	4413      	add	r3, r2
 80163ca:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80163cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ce:	3304      	adds	r3, #4
 80163d0:	781b      	ldrb	r3, [r3, #0]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d006      	beq.n	80163e4 <find_volume+0x124>
 80163d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163d8:	3308      	adds	r3, #8
 80163da:	4618      	mov	r0, r3
 80163dc:	f7fe fd3d 	bl	8014e5a <ld_dword>
 80163e0:	4602      	mov	r2, r0
 80163e2:	e000      	b.n	80163e6 <find_volume+0x126>
 80163e4:	2200      	movs	r2, #0
 80163e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80163e8:	009b      	lsls	r3, r3, #2
 80163ea:	3358      	adds	r3, #88	@ 0x58
 80163ec:	443b      	add	r3, r7
 80163ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80163f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80163f4:	3301      	adds	r3, #1
 80163f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80163f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80163fa:	2b03      	cmp	r3, #3
 80163fc:	d9dd      	bls.n	80163ba <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80163fe:	2300      	movs	r3, #0
 8016400:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8016402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016404:	2b00      	cmp	r3, #0
 8016406:	d002      	beq.n	801640e <find_volume+0x14e>
 8016408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801640a:	3b01      	subs	r3, #1
 801640c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801640e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016410:	009b      	lsls	r3, r3, #2
 8016412:	3358      	adds	r3, #88	@ 0x58
 8016414:	443b      	add	r3, r7
 8016416:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801641a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801641c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801641e:	2b00      	cmp	r3, #0
 8016420:	d005      	beq.n	801642e <find_volume+0x16e>
 8016422:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016424:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016426:	f7ff fef5 	bl	8016214 <check_fs>
 801642a:	4603      	mov	r3, r0
 801642c:	e000      	b.n	8016430 <find_volume+0x170>
 801642e:	2303      	movs	r3, #3
 8016430:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016434:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016438:	2b01      	cmp	r3, #1
 801643a:	d905      	bls.n	8016448 <find_volume+0x188>
 801643c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801643e:	3301      	adds	r3, #1
 8016440:	643b      	str	r3, [r7, #64]	@ 0x40
 8016442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016444:	2b03      	cmp	r3, #3
 8016446:	d9e2      	bls.n	801640e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016448:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801644c:	2b04      	cmp	r3, #4
 801644e:	d101      	bne.n	8016454 <find_volume+0x194>
 8016450:	2301      	movs	r3, #1
 8016452:	e17e      	b.n	8016752 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016458:	2b01      	cmp	r3, #1
 801645a:	d901      	bls.n	8016460 <find_volume+0x1a0>
 801645c:	230d      	movs	r3, #13
 801645e:	e178      	b.n	8016752 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016462:	3334      	adds	r3, #52	@ 0x34
 8016464:	330b      	adds	r3, #11
 8016466:	4618      	mov	r0, r3
 8016468:	f7fe fcde 	bl	8014e28 <ld_word>
 801646c:	4603      	mov	r3, r0
 801646e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016472:	d001      	beq.n	8016478 <find_volume+0x1b8>
 8016474:	230d      	movs	r3, #13
 8016476:	e16c      	b.n	8016752 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801647a:	3334      	adds	r3, #52	@ 0x34
 801647c:	3316      	adds	r3, #22
 801647e:	4618      	mov	r0, r3
 8016480:	f7fe fcd2 	bl	8014e28 <ld_word>
 8016484:	4603      	mov	r3, r0
 8016486:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801648a:	2b00      	cmp	r3, #0
 801648c:	d106      	bne.n	801649c <find_volume+0x1dc>
 801648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016490:	3334      	adds	r3, #52	@ 0x34
 8016492:	3324      	adds	r3, #36	@ 0x24
 8016494:	4618      	mov	r0, r3
 8016496:	f7fe fce0 	bl	8014e5a <ld_dword>
 801649a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801649e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80164a0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80164a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164a4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80164a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80164ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164ae:	789b      	ldrb	r3, [r3, #2]
 80164b0:	2b01      	cmp	r3, #1
 80164b2:	d005      	beq.n	80164c0 <find_volume+0x200>
 80164b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164b6:	789b      	ldrb	r3, [r3, #2]
 80164b8:	2b02      	cmp	r3, #2
 80164ba:	d001      	beq.n	80164c0 <find_volume+0x200>
 80164bc:	230d      	movs	r3, #13
 80164be:	e148      	b.n	8016752 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80164c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164c2:	789b      	ldrb	r3, [r3, #2]
 80164c4:	461a      	mov	r2, r3
 80164c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80164c8:	fb02 f303 	mul.w	r3, r2, r3
 80164cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80164ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80164d4:	461a      	mov	r2, r3
 80164d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80164da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164dc:	895b      	ldrh	r3, [r3, #10]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d008      	beq.n	80164f4 <find_volume+0x234>
 80164e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164e4:	895b      	ldrh	r3, [r3, #10]
 80164e6:	461a      	mov	r2, r3
 80164e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164ea:	895b      	ldrh	r3, [r3, #10]
 80164ec:	3b01      	subs	r3, #1
 80164ee:	4013      	ands	r3, r2
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d001      	beq.n	80164f8 <find_volume+0x238>
 80164f4:	230d      	movs	r3, #13
 80164f6:	e12c      	b.n	8016752 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80164f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164fa:	3334      	adds	r3, #52	@ 0x34
 80164fc:	3311      	adds	r3, #17
 80164fe:	4618      	mov	r0, r3
 8016500:	f7fe fc92 	bl	8014e28 <ld_word>
 8016504:	4603      	mov	r3, r0
 8016506:	461a      	mov	r2, r3
 8016508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801650a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801650c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801650e:	891b      	ldrh	r3, [r3, #8]
 8016510:	f003 030f 	and.w	r3, r3, #15
 8016514:	b29b      	uxth	r3, r3
 8016516:	2b00      	cmp	r3, #0
 8016518:	d001      	beq.n	801651e <find_volume+0x25e>
 801651a:	230d      	movs	r3, #13
 801651c:	e119      	b.n	8016752 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016520:	3334      	adds	r3, #52	@ 0x34
 8016522:	3313      	adds	r3, #19
 8016524:	4618      	mov	r0, r3
 8016526:	f7fe fc7f 	bl	8014e28 <ld_word>
 801652a:	4603      	mov	r3, r0
 801652c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801652e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016530:	2b00      	cmp	r3, #0
 8016532:	d106      	bne.n	8016542 <find_volume+0x282>
 8016534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016536:	3334      	adds	r3, #52	@ 0x34
 8016538:	3320      	adds	r3, #32
 801653a:	4618      	mov	r0, r3
 801653c:	f7fe fc8d 	bl	8014e5a <ld_dword>
 8016540:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016544:	3334      	adds	r3, #52	@ 0x34
 8016546:	330e      	adds	r3, #14
 8016548:	4618      	mov	r0, r3
 801654a:	f7fe fc6d 	bl	8014e28 <ld_word>
 801654e:	4603      	mov	r3, r0
 8016550:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016552:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016554:	2b00      	cmp	r3, #0
 8016556:	d101      	bne.n	801655c <find_volume+0x29c>
 8016558:	230d      	movs	r3, #13
 801655a:	e0fa      	b.n	8016752 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801655c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801655e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016560:	4413      	add	r3, r2
 8016562:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016564:	8912      	ldrh	r2, [r2, #8]
 8016566:	0912      	lsrs	r2, r2, #4
 8016568:	b292      	uxth	r2, r2
 801656a:	4413      	add	r3, r2
 801656c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801656e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016572:	429a      	cmp	r2, r3
 8016574:	d204      	bcs.n	8016580 <find_volume+0x2c0>
 8016576:	230d      	movs	r3, #13
 8016578:	e0eb      	b.n	8016752 <find_volume+0x492>
 801657a:	bf00      	nop
 801657c:	200023e0 	.word	0x200023e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016584:	1ad3      	subs	r3, r2, r3
 8016586:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016588:	8952      	ldrh	r2, [r2, #10]
 801658a:	fbb3 f3f2 	udiv	r3, r3, r2
 801658e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016592:	2b00      	cmp	r3, #0
 8016594:	d101      	bne.n	801659a <find_volume+0x2da>
 8016596:	230d      	movs	r3, #13
 8016598:	e0db      	b.n	8016752 <find_volume+0x492>
		fmt = FS_FAT32;
 801659a:	2303      	movs	r3, #3
 801659c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80165a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165a2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80165a6:	4293      	cmp	r3, r2
 80165a8:	d802      	bhi.n	80165b0 <find_volume+0x2f0>
 80165aa:	2302      	movs	r3, #2
 80165ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80165b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165b2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80165b6:	4293      	cmp	r3, r2
 80165b8:	d802      	bhi.n	80165c0 <find_volume+0x300>
 80165ba:	2301      	movs	r3, #1
 80165bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80165c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165c2:	1c9a      	adds	r2, r3, #2
 80165c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165c6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80165c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80165cc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80165ce:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80165d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80165d2:	441a      	add	r2, r3
 80165d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165d6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80165d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80165da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165dc:	441a      	add	r2, r3
 80165de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165e0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80165e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80165e6:	2b03      	cmp	r3, #3
 80165e8:	d11e      	bne.n	8016628 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80165ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165ec:	3334      	adds	r3, #52	@ 0x34
 80165ee:	332a      	adds	r3, #42	@ 0x2a
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7fe fc19 	bl	8014e28 <ld_word>
 80165f6:	4603      	mov	r3, r0
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d001      	beq.n	8016600 <find_volume+0x340>
 80165fc:	230d      	movs	r3, #13
 80165fe:	e0a8      	b.n	8016752 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016602:	891b      	ldrh	r3, [r3, #8]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d001      	beq.n	801660c <find_volume+0x34c>
 8016608:	230d      	movs	r3, #13
 801660a:	e0a2      	b.n	8016752 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801660e:	3334      	adds	r3, #52	@ 0x34
 8016610:	332c      	adds	r3, #44	@ 0x2c
 8016612:	4618      	mov	r0, r3
 8016614:	f7fe fc21 	bl	8014e5a <ld_dword>
 8016618:	4602      	mov	r2, r0
 801661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801661c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801661e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016620:	699b      	ldr	r3, [r3, #24]
 8016622:	009b      	lsls	r3, r3, #2
 8016624:	647b      	str	r3, [r7, #68]	@ 0x44
 8016626:	e01f      	b.n	8016668 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801662a:	891b      	ldrh	r3, [r3, #8]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d101      	bne.n	8016634 <find_volume+0x374>
 8016630:	230d      	movs	r3, #13
 8016632:	e08e      	b.n	8016752 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801663a:	441a      	add	r2, r3
 801663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801663e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016640:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016644:	2b02      	cmp	r3, #2
 8016646:	d103      	bne.n	8016650 <find_volume+0x390>
 8016648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801664a:	699b      	ldr	r3, [r3, #24]
 801664c:	005b      	lsls	r3, r3, #1
 801664e:	e00a      	b.n	8016666 <find_volume+0x3a6>
 8016650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016652:	699a      	ldr	r2, [r3, #24]
 8016654:	4613      	mov	r3, r2
 8016656:	005b      	lsls	r3, r3, #1
 8016658:	4413      	add	r3, r2
 801665a:	085a      	lsrs	r2, r3, #1
 801665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801665e:	699b      	ldr	r3, [r3, #24]
 8016660:	f003 0301 	and.w	r3, r3, #1
 8016664:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016666:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801666a:	69da      	ldr	r2, [r3, #28]
 801666c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801666e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8016672:	0a5b      	lsrs	r3, r3, #9
 8016674:	429a      	cmp	r2, r3
 8016676:	d201      	bcs.n	801667c <find_volume+0x3bc>
 8016678:	230d      	movs	r3, #13
 801667a:	e06a      	b.n	8016752 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801667e:	f04f 32ff 	mov.w	r2, #4294967295
 8016682:	615a      	str	r2, [r3, #20]
 8016684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016686:	695a      	ldr	r2, [r3, #20]
 8016688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801668a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801668e:	2280      	movs	r2, #128	@ 0x80
 8016690:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016692:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016696:	2b03      	cmp	r3, #3
 8016698:	d149      	bne.n	801672e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801669c:	3334      	adds	r3, #52	@ 0x34
 801669e:	3330      	adds	r3, #48	@ 0x30
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7fe fbc1 	bl	8014e28 <ld_word>
 80166a6:	4603      	mov	r3, r0
 80166a8:	2b01      	cmp	r3, #1
 80166aa:	d140      	bne.n	801672e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80166ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166ae:	3301      	adds	r3, #1
 80166b0:	4619      	mov	r1, r3
 80166b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80166b4:	f7fe fe9a 	bl	80153ec <move_window>
 80166b8:	4603      	mov	r3, r0
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d137      	bne.n	801672e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80166be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166c0:	2200      	movs	r2, #0
 80166c2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80166c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166c6:	3334      	adds	r3, #52	@ 0x34
 80166c8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80166cc:	4618      	mov	r0, r3
 80166ce:	f7fe fbab 	bl	8014e28 <ld_word>
 80166d2:	4603      	mov	r3, r0
 80166d4:	461a      	mov	r2, r3
 80166d6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80166da:	429a      	cmp	r2, r3
 80166dc:	d127      	bne.n	801672e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80166de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166e0:	3334      	adds	r3, #52	@ 0x34
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7fe fbb9 	bl	8014e5a <ld_dword>
 80166e8:	4603      	mov	r3, r0
 80166ea:	4a1c      	ldr	r2, [pc, #112]	@ (801675c <find_volume+0x49c>)
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d11e      	bne.n	801672e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80166f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166f2:	3334      	adds	r3, #52	@ 0x34
 80166f4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80166f8:	4618      	mov	r0, r3
 80166fa:	f7fe fbae 	bl	8014e5a <ld_dword>
 80166fe:	4603      	mov	r3, r0
 8016700:	4a17      	ldr	r2, [pc, #92]	@ (8016760 <find_volume+0x4a0>)
 8016702:	4293      	cmp	r3, r2
 8016704:	d113      	bne.n	801672e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016708:	3334      	adds	r3, #52	@ 0x34
 801670a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801670e:	4618      	mov	r0, r3
 8016710:	f7fe fba3 	bl	8014e5a <ld_dword>
 8016714:	4602      	mov	r2, r0
 8016716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016718:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801671a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801671c:	3334      	adds	r3, #52	@ 0x34
 801671e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8016722:	4618      	mov	r0, r3
 8016724:	f7fe fb99 	bl	8014e5a <ld_dword>
 8016728:	4602      	mov	r2, r0
 801672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801672c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016730:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8016734:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016736:	4b0b      	ldr	r3, [pc, #44]	@ (8016764 <find_volume+0x4a4>)
 8016738:	881b      	ldrh	r3, [r3, #0]
 801673a:	3301      	adds	r3, #1
 801673c:	b29a      	uxth	r2, r3
 801673e:	4b09      	ldr	r3, [pc, #36]	@ (8016764 <find_volume+0x4a4>)
 8016740:	801a      	strh	r2, [r3, #0]
 8016742:	4b08      	ldr	r3, [pc, #32]	@ (8016764 <find_volume+0x4a4>)
 8016744:	881a      	ldrh	r2, [r3, #0]
 8016746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016748:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801674a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801674c:	f7fe fde6 	bl	801531c <clear_lock>
#endif
	return FR_OK;
 8016750:	2300      	movs	r3, #0
}
 8016752:	4618      	mov	r0, r3
 8016754:	3758      	adds	r7, #88	@ 0x58
 8016756:	46bd      	mov	sp, r7
 8016758:	bd80      	pop	{r7, pc}
 801675a:	bf00      	nop
 801675c:	41615252 	.word	0x41615252
 8016760:	61417272 	.word	0x61417272
 8016764:	200023e4 	.word	0x200023e4

08016768 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016772:	2309      	movs	r3, #9
 8016774:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d02e      	beq.n	80167da <validate+0x72>
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d02a      	beq.n	80167da <validate+0x72>
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d025      	beq.n	80167da <validate+0x72>
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	889a      	ldrh	r2, [r3, #4]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	88db      	ldrh	r3, [r3, #6]
 8016798:	429a      	cmp	r2, r3
 801679a:	d11e      	bne.n	80167da <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7fe fc42 	bl	801502a <lock_fs>
 80167a6:	4603      	mov	r3, r0
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d014      	beq.n	80167d6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	785b      	ldrb	r3, [r3, #1]
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7fe fa9a 	bl	8014cec <disk_status>
 80167b8:	4603      	mov	r3, r0
 80167ba:	f003 0301 	and.w	r3, r3, #1
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d102      	bne.n	80167c8 <validate+0x60>
				res = FR_OK;
 80167c2:	2300      	movs	r3, #0
 80167c4:	73fb      	strb	r3, [r7, #15]
 80167c6:	e008      	b.n	80167da <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	2100      	movs	r1, #0
 80167ce:	4618      	mov	r0, r3
 80167d0:	f7fe fc41 	bl	8015056 <unlock_fs>
 80167d4:	e001      	b.n	80167da <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80167d6:	230f      	movs	r3, #15
 80167d8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80167da:	7bfb      	ldrb	r3, [r7, #15]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d102      	bne.n	80167e6 <validate+0x7e>
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	e000      	b.n	80167e8 <validate+0x80>
 80167e6:	2300      	movs	r3, #0
 80167e8:	683a      	ldr	r2, [r7, #0]
 80167ea:	6013      	str	r3, [r2, #0]
	return res;
 80167ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80167ee:	4618      	mov	r0, r3
 80167f0:	3710      	adds	r7, #16
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}
	...

080167f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b088      	sub	sp, #32
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	60f8      	str	r0, [r7, #12]
 8016800:	60b9      	str	r1, [r7, #8]
 8016802:	4613      	mov	r3, r2
 8016804:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801680a:	f107 0310 	add.w	r3, r7, #16
 801680e:	4618      	mov	r0, r3
 8016810:	f7ff fcbb 	bl	801618a <get_ldnumber>
 8016814:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016816:	69fb      	ldr	r3, [r7, #28]
 8016818:	2b00      	cmp	r3, #0
 801681a:	da01      	bge.n	8016820 <f_mount+0x28>
 801681c:	230b      	movs	r3, #11
 801681e:	e048      	b.n	80168b2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016820:	4a26      	ldr	r2, [pc, #152]	@ (80168bc <f_mount+0xc4>)
 8016822:	69fb      	ldr	r3, [r7, #28]
 8016824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016828:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d00f      	beq.n	8016850 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016830:	69b8      	ldr	r0, [r7, #24]
 8016832:	f7fe fd73 	bl	801531c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8016836:	69bb      	ldr	r3, [r7, #24]
 8016838:	68db      	ldr	r3, [r3, #12]
 801683a:	4618      	mov	r0, r3
 801683c:	f001 fa13 	bl	8017c66 <ff_del_syncobj>
 8016840:	4603      	mov	r3, r0
 8016842:	2b00      	cmp	r3, #0
 8016844:	d101      	bne.n	801684a <f_mount+0x52>
 8016846:	2302      	movs	r3, #2
 8016848:	e033      	b.n	80168b2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801684a:	69bb      	ldr	r3, [r7, #24]
 801684c:	2200      	movs	r2, #0
 801684e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d00f      	beq.n	8016876 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	2200      	movs	r2, #0
 801685a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801685c:	69fb      	ldr	r3, [r7, #28]
 801685e:	b2da      	uxtb	r2, r3
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	330c      	adds	r3, #12
 8016864:	4619      	mov	r1, r3
 8016866:	4610      	mov	r0, r2
 8016868:	f001 f9dd 	bl	8017c26 <ff_cre_syncobj>
 801686c:	4603      	mov	r3, r0
 801686e:	2b00      	cmp	r3, #0
 8016870:	d101      	bne.n	8016876 <f_mount+0x7e>
 8016872:	2302      	movs	r3, #2
 8016874:	e01d      	b.n	80168b2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016876:	68fa      	ldr	r2, [r7, #12]
 8016878:	4910      	ldr	r1, [pc, #64]	@ (80168bc <f_mount+0xc4>)
 801687a:	69fb      	ldr	r3, [r7, #28]
 801687c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d002      	beq.n	801688c <f_mount+0x94>
 8016886:	79fb      	ldrb	r3, [r7, #7]
 8016888:	2b01      	cmp	r3, #1
 801688a:	d001      	beq.n	8016890 <f_mount+0x98>
 801688c:	2300      	movs	r3, #0
 801688e:	e010      	b.n	80168b2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016890:	f107 010c 	add.w	r1, r7, #12
 8016894:	f107 0308 	add.w	r3, r7, #8
 8016898:	2200      	movs	r2, #0
 801689a:	4618      	mov	r0, r3
 801689c:	f7ff fd10 	bl	80162c0 <find_volume>
 80168a0:	4603      	mov	r3, r0
 80168a2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	7dfa      	ldrb	r2, [r7, #23]
 80168a8:	4611      	mov	r1, r2
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7fe fbd3 	bl	8015056 <unlock_fs>
 80168b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80168b2:	4618      	mov	r0, r3
 80168b4:	3720      	adds	r7, #32
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	200023e0 	.word	0x200023e0

080168c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b098      	sub	sp, #96	@ 0x60
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	60f8      	str	r0, [r7, #12]
 80168c8:	60b9      	str	r1, [r7, #8]
 80168ca:	4613      	mov	r3, r2
 80168cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d101      	bne.n	80168d8 <f_open+0x18>
 80168d4:	2309      	movs	r3, #9
 80168d6:	e1b0      	b.n	8016c3a <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80168d8:	79fb      	ldrb	r3, [r7, #7]
 80168da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80168de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80168e0:	79fa      	ldrb	r2, [r7, #7]
 80168e2:	f107 0110 	add.w	r1, r7, #16
 80168e6:	f107 0308 	add.w	r3, r7, #8
 80168ea:	4618      	mov	r0, r3
 80168ec:	f7ff fce8 	bl	80162c0 <find_volume>
 80168f0:	4603      	mov	r3, r0
 80168f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80168f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	f040 818d 	bne.w	8016c1a <f_open+0x35a>
		dj.obj.fs = fs;
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016904:	68ba      	ldr	r2, [r7, #8]
 8016906:	f107 0314 	add.w	r3, r7, #20
 801690a:	4611      	mov	r1, r2
 801690c:	4618      	mov	r0, r3
 801690e:	f7ff fbcb 	bl	80160a8 <follow_path>
 8016912:	4603      	mov	r3, r0
 8016914:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016918:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801691c:	2b00      	cmp	r3, #0
 801691e:	d118      	bne.n	8016952 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016920:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016924:	b25b      	sxtb	r3, r3
 8016926:	2b00      	cmp	r3, #0
 8016928:	da03      	bge.n	8016932 <f_open+0x72>
				res = FR_INVALID_NAME;
 801692a:	2306      	movs	r3, #6
 801692c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8016930:	e00f      	b.n	8016952 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016932:	79fb      	ldrb	r3, [r7, #7]
 8016934:	2b01      	cmp	r3, #1
 8016936:	bf8c      	ite	hi
 8016938:	2301      	movhi	r3, #1
 801693a:	2300      	movls	r3, #0
 801693c:	b2db      	uxtb	r3, r3
 801693e:	461a      	mov	r2, r3
 8016940:	f107 0314 	add.w	r3, r7, #20
 8016944:	4611      	mov	r1, r2
 8016946:	4618      	mov	r0, r3
 8016948:	f7fe fba0 	bl	801508c <chk_lock>
 801694c:	4603      	mov	r3, r0
 801694e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016952:	79fb      	ldrb	r3, [r7, #7]
 8016954:	f003 031c 	and.w	r3, r3, #28
 8016958:	2b00      	cmp	r3, #0
 801695a:	d07f      	beq.n	8016a5c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801695c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016960:	2b00      	cmp	r3, #0
 8016962:	d017      	beq.n	8016994 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016964:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016968:	2b04      	cmp	r3, #4
 801696a:	d10e      	bne.n	801698a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801696c:	f7fe fbea 	bl	8015144 <enq_lock>
 8016970:	4603      	mov	r3, r0
 8016972:	2b00      	cmp	r3, #0
 8016974:	d006      	beq.n	8016984 <f_open+0xc4>
 8016976:	f107 0314 	add.w	r3, r7, #20
 801697a:	4618      	mov	r0, r3
 801697c:	f7ff face 	bl	8015f1c <dir_register>
 8016980:	4603      	mov	r3, r0
 8016982:	e000      	b.n	8016986 <f_open+0xc6>
 8016984:	2312      	movs	r3, #18
 8016986:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801698a:	79fb      	ldrb	r3, [r7, #7]
 801698c:	f043 0308 	orr.w	r3, r3, #8
 8016990:	71fb      	strb	r3, [r7, #7]
 8016992:	e010      	b.n	80169b6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016994:	7ebb      	ldrb	r3, [r7, #26]
 8016996:	f003 0311 	and.w	r3, r3, #17
 801699a:	2b00      	cmp	r3, #0
 801699c:	d003      	beq.n	80169a6 <f_open+0xe6>
					res = FR_DENIED;
 801699e:	2307      	movs	r3, #7
 80169a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80169a4:	e007      	b.n	80169b6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80169a6:	79fb      	ldrb	r3, [r7, #7]
 80169a8:	f003 0304 	and.w	r3, r3, #4
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d002      	beq.n	80169b6 <f_open+0xf6>
 80169b0:	2308      	movs	r3, #8
 80169b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80169b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d168      	bne.n	8016a90 <f_open+0x1d0>
 80169be:	79fb      	ldrb	r3, [r7, #7]
 80169c0:	f003 0308 	and.w	r3, r3, #8
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d063      	beq.n	8016a90 <f_open+0x1d0>
				dw = GET_FATTIME();
 80169c8:	f7fb fd60 	bl	801248c <get_fattime>
 80169cc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80169ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80169d0:	330e      	adds	r3, #14
 80169d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80169d4:	4618      	mov	r0, r3
 80169d6:	f7fe fa7e 	bl	8014ed6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80169da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80169dc:	3316      	adds	r3, #22
 80169de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7fe fa78 	bl	8014ed6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80169e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80169e8:	330b      	adds	r3, #11
 80169ea:	2220      	movs	r2, #32
 80169ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80169f2:	4611      	mov	r1, r2
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7ff f9fd 	bl	8015df4 <ld_clust>
 80169fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016a00:	2200      	movs	r2, #0
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7ff fa15 	bl	8015e32 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a0a:	331c      	adds	r3, #28
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7fe fa61 	bl	8014ed6 <st_dword>
					fs->wflag = 1;
 8016a14:	693b      	ldr	r3, [r7, #16]
 8016a16:	2201      	movs	r2, #1
 8016a18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d037      	beq.n	8016a90 <f_open+0x1d0>
						dw = fs->winsect;
 8016a20:	693b      	ldr	r3, [r7, #16]
 8016a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a24:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8016a26:	f107 0314 	add.w	r3, r7, #20
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7fe ff28 	bl	8015884 <remove_chain>
 8016a34:	4603      	mov	r3, r0
 8016a36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8016a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d126      	bne.n	8016a90 <f_open+0x1d0>
							res = move_window(fs, dw);
 8016a42:	693b      	ldr	r3, [r7, #16]
 8016a44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7fe fcd0 	bl	80153ec <move_window>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016a52:	693b      	ldr	r3, [r7, #16]
 8016a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016a56:	3a01      	subs	r2, #1
 8016a58:	611a      	str	r2, [r3, #16]
 8016a5a:	e019      	b.n	8016a90 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d115      	bne.n	8016a90 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016a64:	7ebb      	ldrb	r3, [r7, #26]
 8016a66:	f003 0310 	and.w	r3, r3, #16
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d003      	beq.n	8016a76 <f_open+0x1b6>
					res = FR_NO_FILE;
 8016a6e:	2304      	movs	r3, #4
 8016a70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8016a74:	e00c      	b.n	8016a90 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016a76:	79fb      	ldrb	r3, [r7, #7]
 8016a78:	f003 0302 	and.w	r3, r3, #2
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d007      	beq.n	8016a90 <f_open+0x1d0>
 8016a80:	7ebb      	ldrb	r3, [r7, #26]
 8016a82:	f003 0301 	and.w	r3, r3, #1
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d002      	beq.n	8016a90 <f_open+0x1d0>
						res = FR_DENIED;
 8016a8a:	2307      	movs	r3, #7
 8016a8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016a90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d126      	bne.n	8016ae6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016a98:	79fb      	ldrb	r3, [r7, #7]
 8016a9a:	f003 0308 	and.w	r3, r3, #8
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d003      	beq.n	8016aaa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8016aa2:	79fb      	ldrb	r3, [r7, #7]
 8016aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016aa8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016aaa:	693b      	ldr	r3, [r7, #16]
 8016aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8016ab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016ab8:	79fb      	ldrb	r3, [r7, #7]
 8016aba:	2b01      	cmp	r3, #1
 8016abc:	bf8c      	ite	hi
 8016abe:	2301      	movhi	r3, #1
 8016ac0:	2300      	movls	r3, #0
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	461a      	mov	r2, r3
 8016ac6:	f107 0314 	add.w	r3, r7, #20
 8016aca:	4611      	mov	r1, r2
 8016acc:	4618      	mov	r0, r3
 8016ace:	f7fe fb5b 	bl	8015188 <inc_lock>
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	691b      	ldr	r3, [r3, #16]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d102      	bne.n	8016ae6 <f_open+0x226>
 8016ae0:	2302      	movs	r3, #2
 8016ae2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	f040 8095 	bne.w	8016c1a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016af4:	4611      	mov	r1, r2
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7ff f97c 	bl	8015df4 <ld_clust>
 8016afc:	4602      	mov	r2, r0
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b04:	331c      	adds	r3, #28
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fe f9a7 	bl	8014e5a <ld_dword>
 8016b0c:	4602      	mov	r2, r0
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	2200      	movs	r2, #0
 8016b16:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016b18:	693a      	ldr	r2, [r7, #16]
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016b1e:	693b      	ldr	r3, [r7, #16]
 8016b20:	88da      	ldrh	r2, [r3, #6]
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	79fa      	ldrb	r2, [r7, #7]
 8016b2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	2200      	movs	r2, #0
 8016b36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	3330      	adds	r3, #48	@ 0x30
 8016b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016b46:	2100      	movs	r1, #0
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f7fe fa11 	bl	8014f70 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016b4e:	79fb      	ldrb	r3, [r7, #7]
 8016b50:	f003 0320 	and.w	r3, r3, #32
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d060      	beq.n	8016c1a <f_open+0x35a>
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	68db      	ldr	r3, [r3, #12]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d05c      	beq.n	8016c1a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	68da      	ldr	r2, [r3, #12]
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	895b      	ldrh	r3, [r3, #10]
 8016b6c:	025b      	lsls	r3, r3, #9
 8016b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	689b      	ldr	r3, [r3, #8]
 8016b74:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	68db      	ldr	r3, [r3, #12]
 8016b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8016b7c:	e016      	b.n	8016bac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7fe fced 	bl	8015562 <get_fat>
 8016b88:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016b8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016b8c:	2b01      	cmp	r3, #1
 8016b8e:	d802      	bhi.n	8016b96 <f_open+0x2d6>
 8016b90:	2302      	movs	r3, #2
 8016b92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016b96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b9c:	d102      	bne.n	8016ba4 <f_open+0x2e4>
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016ba4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016ba8:	1ad3      	subs	r3, r2, r3
 8016baa:	657b      	str	r3, [r7, #84]	@ 0x54
 8016bac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d103      	bne.n	8016bbc <f_open+0x2fc>
 8016bb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	d8e0      	bhi.n	8016b7e <f_open+0x2be>
				}
				fp->clust = clst;
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016bc0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016bc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d127      	bne.n	8016c1a <f_open+0x35a>
 8016bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d022      	beq.n	8016c1a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016bd4:	693b      	ldr	r3, [r7, #16]
 8016bd6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f7fe fca3 	bl	8015524 <clust2sect>
 8016bde:	6478      	str	r0, [r7, #68]	@ 0x44
 8016be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d103      	bne.n	8016bee <f_open+0x32e>
						res = FR_INT_ERR;
 8016be6:	2302      	movs	r3, #2
 8016be8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8016bec:	e015      	b.n	8016c1a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016bf0:	0a5a      	lsrs	r2, r3, #9
 8016bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016bf4:	441a      	add	r2, r3
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016bfa:	693b      	ldr	r3, [r7, #16]
 8016bfc:	7858      	ldrb	r0, [r3, #1]
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	6a1a      	ldr	r2, [r3, #32]
 8016c08:	2301      	movs	r3, #1
 8016c0a:	f7fe f8af 	bl	8014d6c <disk_read>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d002      	beq.n	8016c1a <f_open+0x35a>
 8016c14:	2301      	movs	r3, #1
 8016c16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d002      	beq.n	8016c28 <f_open+0x368>
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	2200      	movs	r2, #0
 8016c26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016c28:	693b      	ldr	r3, [r7, #16]
 8016c2a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8016c2e:	4611      	mov	r1, r2
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7fe fa10 	bl	8015056 <unlock_fs>
 8016c36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	3760      	adds	r7, #96	@ 0x60
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}

08016c42 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016c42:	b580      	push	{r7, lr}
 8016c44:	b08c      	sub	sp, #48	@ 0x30
 8016c46:	af00      	add	r7, sp, #0
 8016c48:	60f8      	str	r0, [r7, #12]
 8016c4a:	60b9      	str	r1, [r7, #8]
 8016c4c:	607a      	str	r2, [r7, #4]
 8016c4e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	2200      	movs	r2, #0
 8016c58:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	f107 0210 	add.w	r2, r7, #16
 8016c60:	4611      	mov	r1, r2
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7ff fd80 	bl	8016768 <validate>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d107      	bne.n	8016c86 <f_write+0x44>
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	7d5b      	ldrb	r3, [r3, #21]
 8016c7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8016c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d009      	beq.n	8016c9a <f_write+0x58>
 8016c86:	693b      	ldr	r3, [r7, #16]
 8016c88:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8016c8c:	4611      	mov	r1, r2
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f7fe f9e1 	bl	8015056 <unlock_fs>
 8016c94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016c98:	e173      	b.n	8016f82 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	7d1b      	ldrb	r3, [r3, #20]
 8016c9e:	f003 0302 	and.w	r3, r3, #2
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d106      	bne.n	8016cb4 <f_write+0x72>
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	2107      	movs	r1, #7
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7fe f9d3 	bl	8015056 <unlock_fs>
 8016cb0:	2307      	movs	r3, #7
 8016cb2:	e166      	b.n	8016f82 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	699a      	ldr	r2, [r3, #24]
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	441a      	add	r2, r3
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	699b      	ldr	r3, [r3, #24]
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	f080 814b 	bcs.w	8016f5c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	699b      	ldr	r3, [r3, #24]
 8016cca:	43db      	mvns	r3, r3
 8016ccc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016cce:	e145      	b.n	8016f5c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	699b      	ldr	r3, [r3, #24]
 8016cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	f040 8101 	bne.w	8016ee0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	699b      	ldr	r3, [r3, #24]
 8016ce2:	0a5b      	lsrs	r3, r3, #9
 8016ce4:	693a      	ldr	r2, [r7, #16]
 8016ce6:	8952      	ldrh	r2, [r2, #10]
 8016ce8:	3a01      	subs	r2, #1
 8016cea:	4013      	ands	r3, r2
 8016cec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016cee:	69bb      	ldr	r3, [r7, #24]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d14d      	bne.n	8016d90 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	699b      	ldr	r3, [r3, #24]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d10c      	bne.n	8016d16 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	689b      	ldr	r3, [r3, #8]
 8016d00:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d11a      	bne.n	8016d3e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	2100      	movs	r1, #0
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7fe fe1e 	bl	801594e <create_chain>
 8016d12:	62b8      	str	r0, [r7, #40]	@ 0x28
 8016d14:	e013      	b.n	8016d3e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d007      	beq.n	8016d2e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	699b      	ldr	r3, [r3, #24]
 8016d22:	4619      	mov	r1, r3
 8016d24:	68f8      	ldr	r0, [r7, #12]
 8016d26:	f7fe feaa 	bl	8015a7e <clmt_clust>
 8016d2a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8016d2c:	e007      	b.n	8016d3e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016d2e:	68fa      	ldr	r2, [r7, #12]
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	69db      	ldr	r3, [r3, #28]
 8016d34:	4619      	mov	r1, r3
 8016d36:	4610      	mov	r0, r2
 8016d38:	f7fe fe09 	bl	801594e <create_chain>
 8016d3c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	f000 8110 	beq.w	8016f66 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d48:	2b01      	cmp	r3, #1
 8016d4a:	d109      	bne.n	8016d60 <f_write+0x11e>
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	2202      	movs	r2, #2
 8016d50:	755a      	strb	r2, [r3, #21]
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	2102      	movs	r1, #2
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7fe f97d 	bl	8015056 <unlock_fs>
 8016d5c:	2302      	movs	r3, #2
 8016d5e:	e110      	b.n	8016f82 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d66:	d109      	bne.n	8016d7c <f_write+0x13a>
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	2201      	movs	r2, #1
 8016d6c:	755a      	strb	r2, [r3, #21]
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	2101      	movs	r1, #1
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7fe f96f 	bl	8015056 <unlock_fs>
 8016d78:	2301      	movs	r3, #1
 8016d7a:	e102      	b.n	8016f82 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d80:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	689b      	ldr	r3, [r3, #8]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d102      	bne.n	8016d90 <f_write+0x14e>
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d8e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	7d1b      	ldrb	r3, [r3, #20]
 8016d94:	b25b      	sxtb	r3, r3
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	da1d      	bge.n	8016dd6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016d9a:	693b      	ldr	r3, [r7, #16]
 8016d9c:	7858      	ldrb	r0, [r3, #1]
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	6a1a      	ldr	r2, [r3, #32]
 8016da8:	2301      	movs	r3, #1
 8016daa:	f7fd ffff 	bl	8014dac <disk_write>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d009      	beq.n	8016dc8 <f_write+0x186>
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	2201      	movs	r2, #1
 8016db8:	755a      	strb	r2, [r3, #21]
 8016dba:	693b      	ldr	r3, [r7, #16]
 8016dbc:	2101      	movs	r1, #1
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7fe f949 	bl	8015056 <unlock_fs>
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	e0dc      	b.n	8016f82 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	7d1b      	ldrb	r3, [r3, #20]
 8016dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016dd0:	b2da      	uxtb	r2, r3
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016dd6:	693a      	ldr	r2, [r7, #16]
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	69db      	ldr	r3, [r3, #28]
 8016ddc:	4619      	mov	r1, r3
 8016dde:	4610      	mov	r0, r2
 8016de0:	f7fe fba0 	bl	8015524 <clust2sect>
 8016de4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d109      	bne.n	8016e00 <f_write+0x1be>
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	2202      	movs	r2, #2
 8016df0:	755a      	strb	r2, [r3, #21]
 8016df2:	693b      	ldr	r3, [r7, #16]
 8016df4:	2102      	movs	r1, #2
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7fe f92d 	bl	8015056 <unlock_fs>
 8016dfc:	2302      	movs	r3, #2
 8016dfe:	e0c0      	b.n	8016f82 <f_write+0x340>
			sect += csect;
 8016e00:	697a      	ldr	r2, [r7, #20]
 8016e02:	69bb      	ldr	r3, [r7, #24]
 8016e04:	4413      	add	r3, r2
 8016e06:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	0a5b      	lsrs	r3, r3, #9
 8016e0c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016e0e:	6a3b      	ldr	r3, [r7, #32]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d041      	beq.n	8016e98 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016e14:	69ba      	ldr	r2, [r7, #24]
 8016e16:	6a3b      	ldr	r3, [r7, #32]
 8016e18:	4413      	add	r3, r2
 8016e1a:	693a      	ldr	r2, [r7, #16]
 8016e1c:	8952      	ldrh	r2, [r2, #10]
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	d905      	bls.n	8016e2e <f_write+0x1ec>
					cc = fs->csize - csect;
 8016e22:	693b      	ldr	r3, [r7, #16]
 8016e24:	895b      	ldrh	r3, [r3, #10]
 8016e26:	461a      	mov	r2, r3
 8016e28:	69bb      	ldr	r3, [r7, #24]
 8016e2a:	1ad3      	subs	r3, r2, r3
 8016e2c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e2e:	693b      	ldr	r3, [r7, #16]
 8016e30:	7858      	ldrb	r0, [r3, #1]
 8016e32:	6a3b      	ldr	r3, [r7, #32]
 8016e34:	697a      	ldr	r2, [r7, #20]
 8016e36:	69f9      	ldr	r1, [r7, #28]
 8016e38:	f7fd ffb8 	bl	8014dac <disk_write>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d009      	beq.n	8016e56 <f_write+0x214>
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	2201      	movs	r2, #1
 8016e46:	755a      	strb	r2, [r3, #21]
 8016e48:	693b      	ldr	r3, [r7, #16]
 8016e4a:	2101      	movs	r1, #1
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7fe f902 	bl	8015056 <unlock_fs>
 8016e52:	2301      	movs	r3, #1
 8016e54:	e095      	b.n	8016f82 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	6a1a      	ldr	r2, [r3, #32]
 8016e5a:	697b      	ldr	r3, [r7, #20]
 8016e5c:	1ad3      	subs	r3, r2, r3
 8016e5e:	6a3a      	ldr	r2, [r7, #32]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d915      	bls.n	8016e90 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	6a1a      	ldr	r2, [r3, #32]
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	1ad3      	subs	r3, r2, r3
 8016e72:	025b      	lsls	r3, r3, #9
 8016e74:	69fa      	ldr	r2, [r7, #28]
 8016e76:	4413      	add	r3, r2
 8016e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	f7fe f856 	bl	8014f2e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	7d1b      	ldrb	r3, [r3, #20]
 8016e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016e8a:	b2da      	uxtb	r2, r3
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016e90:	6a3b      	ldr	r3, [r7, #32]
 8016e92:	025b      	lsls	r3, r3, #9
 8016e94:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8016e96:	e044      	b.n	8016f22 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	6a1b      	ldr	r3, [r3, #32]
 8016e9c:	697a      	ldr	r2, [r7, #20]
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d01b      	beq.n	8016eda <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	699a      	ldr	r2, [r3, #24]
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016eaa:	429a      	cmp	r2, r3
 8016eac:	d215      	bcs.n	8016eda <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	7858      	ldrb	r0, [r3, #1]
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016eb8:	2301      	movs	r3, #1
 8016eba:	697a      	ldr	r2, [r7, #20]
 8016ebc:	f7fd ff56 	bl	8014d6c <disk_read>
 8016ec0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d009      	beq.n	8016eda <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	2201      	movs	r2, #1
 8016eca:	755a      	strb	r2, [r3, #21]
 8016ecc:	693b      	ldr	r3, [r7, #16]
 8016ece:	2101      	movs	r1, #1
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7fe f8c0 	bl	8015056 <unlock_fs>
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	e053      	b.n	8016f82 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	697a      	ldr	r2, [r7, #20]
 8016ede:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	699b      	ldr	r3, [r3, #24]
 8016ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ee8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8016eec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	429a      	cmp	r2, r3
 8016ef4:	d901      	bls.n	8016efa <f_write+0x2b8>
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	699b      	ldr	r3, [r3, #24]
 8016f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f08:	4413      	add	r3, r2
 8016f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f0c:	69f9      	ldr	r1, [r7, #28]
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7fe f80d 	bl	8014f2e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	7d1b      	ldrb	r3, [r3, #20]
 8016f18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016f1c:	b2da      	uxtb	r2, r3
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016f22:	69fa      	ldr	r2, [r7, #28]
 8016f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f26:	4413      	add	r3, r2
 8016f28:	61fb      	str	r3, [r7, #28]
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	699a      	ldr	r2, [r3, #24]
 8016f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f30:	441a      	add	r2, r3
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	619a      	str	r2, [r3, #24]
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	68da      	ldr	r2, [r3, #12]
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	699b      	ldr	r3, [r3, #24]
 8016f3e:	429a      	cmp	r2, r3
 8016f40:	bf38      	it	cc
 8016f42:	461a      	movcc	r2, r3
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	60da      	str	r2, [r3, #12]
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	681a      	ldr	r2, [r3, #0]
 8016f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f4e:	441a      	add	r2, r3
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	601a      	str	r2, [r3, #0]
 8016f54:	687a      	ldr	r2, [r7, #4]
 8016f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f58:	1ad3      	subs	r3, r2, r3
 8016f5a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	f47f aeb6 	bne.w	8016cd0 <f_write+0x8e>
 8016f64:	e000      	b.n	8016f68 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016f66:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	7d1b      	ldrb	r3, [r3, #20]
 8016f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f70:	b2da      	uxtb	r2, r3
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8016f76:	693b      	ldr	r3, [r7, #16]
 8016f78:	2100      	movs	r1, #0
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f7fe f86b 	bl	8015056 <unlock_fs>
 8016f80:	2300      	movs	r3, #0
}
 8016f82:	4618      	mov	r0, r3
 8016f84:	3730      	adds	r7, #48	@ 0x30
 8016f86:	46bd      	mov	sp, r7
 8016f88:	bd80      	pop	{r7, pc}

08016f8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016f8a:	b580      	push	{r7, lr}
 8016f8c:	b086      	sub	sp, #24
 8016f8e:	af00      	add	r7, sp, #0
 8016f90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	f107 0208 	add.w	r2, r7, #8
 8016f98:	4611      	mov	r1, r2
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7ff fbe4 	bl	8016768 <validate>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016fa4:	7dfb      	ldrb	r3, [r7, #23]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d16d      	bne.n	8017086 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	7d1b      	ldrb	r3, [r3, #20]
 8016fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d067      	beq.n	8017086 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	7d1b      	ldrb	r3, [r3, #20]
 8016fba:	b25b      	sxtb	r3, r3
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	da1a      	bge.n	8016ff6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	7858      	ldrb	r0, [r3, #1]
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	6a1a      	ldr	r2, [r3, #32]
 8016fce:	2301      	movs	r3, #1
 8016fd0:	f7fd feec 	bl	8014dac <disk_write>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d006      	beq.n	8016fe8 <f_sync+0x5e>
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	2101      	movs	r1, #1
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fe f839 	bl	8015056 <unlock_fs>
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	e055      	b.n	8017094 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	7d1b      	ldrb	r3, [r3, #20]
 8016fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016ff0:	b2da      	uxtb	r2, r3
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016ff6:	f7fb fa49 	bl	801248c <get_fattime>
 8016ffa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016ffc:	68ba      	ldr	r2, [r7, #8]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017002:	4619      	mov	r1, r3
 8017004:	4610      	mov	r0, r2
 8017006:	f7fe f9f1 	bl	80153ec <move_window>
 801700a:	4603      	mov	r3, r0
 801700c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801700e:	7dfb      	ldrb	r3, [r7, #23]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d138      	bne.n	8017086 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017018:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	330b      	adds	r3, #11
 801701e:	781a      	ldrb	r2, [r3, #0]
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	330b      	adds	r3, #11
 8017024:	f042 0220 	orr.w	r2, r2, #32
 8017028:	b2d2      	uxtb	r2, r2
 801702a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	6818      	ldr	r0, [r3, #0]
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	689b      	ldr	r3, [r3, #8]
 8017034:	461a      	mov	r2, r3
 8017036:	68f9      	ldr	r1, [r7, #12]
 8017038:	f7fe fefb 	bl	8015e32 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	f103 021c 	add.w	r2, r3, #28
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	68db      	ldr	r3, [r3, #12]
 8017046:	4619      	mov	r1, r3
 8017048:	4610      	mov	r0, r2
 801704a:	f7fd ff44 	bl	8014ed6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	3316      	adds	r3, #22
 8017052:	6939      	ldr	r1, [r7, #16]
 8017054:	4618      	mov	r0, r3
 8017056:	f7fd ff3e 	bl	8014ed6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	3312      	adds	r3, #18
 801705e:	2100      	movs	r1, #0
 8017060:	4618      	mov	r0, r3
 8017062:	f7fd ff1d 	bl	8014ea0 <st_word>
					fs->wflag = 1;
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	2201      	movs	r2, #1
 801706a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	4618      	mov	r0, r3
 8017070:	f7fe f9ea 	bl	8015448 <sync_fs>
 8017074:	4603      	mov	r3, r0
 8017076:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	7d1b      	ldrb	r3, [r3, #20]
 801707c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017080:	b2da      	uxtb	r2, r3
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	7dfa      	ldrb	r2, [r7, #23]
 801708a:	4611      	mov	r1, r2
 801708c:	4618      	mov	r0, r3
 801708e:	f7fd ffe2 	bl	8015056 <unlock_fs>
 8017092:	7dfb      	ldrb	r3, [r7, #23]
}
 8017094:	4618      	mov	r0, r3
 8017096:	3718      	adds	r7, #24
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}

0801709c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f7ff ff70 	bl	8016f8a <f_sync>
 80170aa:	4603      	mov	r3, r0
 80170ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80170ae:	7bfb      	ldrb	r3, [r7, #15]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d11d      	bne.n	80170f0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f107 0208 	add.w	r2, r7, #8
 80170ba:	4611      	mov	r1, r2
 80170bc:	4618      	mov	r0, r3
 80170be:	f7ff fb53 	bl	8016768 <validate>
 80170c2:	4603      	mov	r3, r0
 80170c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80170c6:	7bfb      	ldrb	r3, [r7, #15]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d111      	bne.n	80170f0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	691b      	ldr	r3, [r3, #16]
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7fe f8e7 	bl	80152a4 <dec_lock>
 80170d6:	4603      	mov	r3, r0
 80170d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80170da:	7bfb      	ldrb	r3, [r7, #15]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d102      	bne.n	80170e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2200      	movs	r2, #0
 80170e4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	2100      	movs	r1, #0
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7fd ffb3 	bl	8015056 <unlock_fs>
#endif
		}
	}
	return res;
 80170f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	3710      	adds	r7, #16
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}

080170fa <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80170fa:	b580      	push	{r7, lr}
 80170fc:	b096      	sub	sp, #88	@ 0x58
 80170fe:	af00      	add	r7, sp, #0
 8017100:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8017102:	f107 0108 	add.w	r1, r7, #8
 8017106:	1d3b      	adds	r3, r7, #4
 8017108:	2202      	movs	r2, #2
 801710a:	4618      	mov	r0, r3
 801710c:	f7ff f8d8 	bl	80162c0 <find_volume>
 8017110:	4603      	mov	r3, r0
 8017112:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801711a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801711e:	2b00      	cmp	r3, #0
 8017120:	f040 80ec 	bne.w	80172fc <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8017124:	687a      	ldr	r2, [r7, #4]
 8017126:	f107 030c 	add.w	r3, r7, #12
 801712a:	4611      	mov	r1, r2
 801712c:	4618      	mov	r0, r3
 801712e:	f7fe ffbb 	bl	80160a8 <follow_path>
 8017132:	4603      	mov	r3, r0
 8017134:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801713c:	2b00      	cmp	r3, #0
 801713e:	d102      	bne.n	8017146 <f_mkdir+0x4c>
 8017140:	2308      	movs	r3, #8
 8017142:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8017146:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801714a:	2b04      	cmp	r3, #4
 801714c:	f040 80d6 	bne.w	80172fc <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8017150:	f107 030c 	add.w	r3, r7, #12
 8017154:	2100      	movs	r1, #0
 8017156:	4618      	mov	r0, r3
 8017158:	f7fe fbf9 	bl	801594e <create_chain>
 801715c:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	895b      	ldrh	r3, [r3, #10]
 8017162:	025b      	lsls	r3, r3, #9
 8017164:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8017166:	2300      	movs	r3, #0
 8017168:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801716c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801716e:	2b00      	cmp	r3, #0
 8017170:	d102      	bne.n	8017178 <f_mkdir+0x7e>
 8017172:	2307      	movs	r3, #7
 8017174:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8017178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801717a:	2b01      	cmp	r3, #1
 801717c:	d102      	bne.n	8017184 <f_mkdir+0x8a>
 801717e:	2302      	movs	r3, #2
 8017180:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801718a:	d102      	bne.n	8017192 <f_mkdir+0x98>
 801718c:	2301      	movs	r3, #1
 801718e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8017192:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017196:	2b00      	cmp	r3, #0
 8017198:	d106      	bne.n	80171a8 <f_mkdir+0xae>
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	4618      	mov	r0, r3
 801719e:	f7fe f8e1 	bl	8015364 <sync_window>
 80171a2:	4603      	mov	r3, r0
 80171a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 80171a8:	f7fb f970 	bl	801248c <get_fattime>
 80171ac:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80171ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d16a      	bne.n	801728c <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7fe f9b2 	bl	8015524 <clust2sect>
 80171c0:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 80171c2:	68bb      	ldr	r3, [r7, #8]
 80171c4:	3334      	adds	r3, #52	@ 0x34
 80171c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 80171c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80171cc:	2100      	movs	r1, #0
 80171ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80171d0:	f7fd fece 	bl	8014f70 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80171d4:	220b      	movs	r2, #11
 80171d6:	2120      	movs	r1, #32
 80171d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80171da:	f7fd fec9 	bl	8014f70 <mem_set>
					dir[DIR_Name] = '.';
 80171de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171e0:	222e      	movs	r2, #46	@ 0x2e
 80171e2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80171e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171e6:	330b      	adds	r3, #11
 80171e8:	2210      	movs	r2, #16
 80171ea:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80171ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171ee:	3316      	adds	r3, #22
 80171f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7fd fe6f 	bl	8014ed6 <st_dword>
					st_clust(fs, dir, dcl);
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80171fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80171fe:	4618      	mov	r0, r3
 8017200:	f7fe fe17 	bl	8015e32 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8017204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017206:	3320      	adds	r3, #32
 8017208:	2220      	movs	r2, #32
 801720a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801720c:	4618      	mov	r0, r3
 801720e:	f7fd fe8e 	bl	8014f2e <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017214:	3321      	adds	r3, #33	@ 0x21
 8017216:	222e      	movs	r2, #46	@ 0x2e
 8017218:	701a      	strb	r2, [r3, #0]
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801721e:	68bb      	ldr	r3, [r7, #8]
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	2b03      	cmp	r3, #3
 8017224:	d106      	bne.n	8017234 <f_mkdir+0x13a>
 8017226:	68bb      	ldr	r3, [r7, #8]
 8017228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801722a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801722c:	429a      	cmp	r2, r3
 801722e:	d101      	bne.n	8017234 <f_mkdir+0x13a>
 8017230:	2300      	movs	r3, #0
 8017232:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8017234:	68b8      	ldr	r0, [r7, #8]
 8017236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017238:	3320      	adds	r3, #32
 801723a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801723c:	4619      	mov	r1, r3
 801723e:	f7fe fdf8 	bl	8015e32 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017242:	68bb      	ldr	r3, [r7, #8]
 8017244:	895b      	ldrh	r3, [r3, #10]
 8017246:	653b      	str	r3, [r7, #80]	@ 0x50
 8017248:	e01b      	b.n	8017282 <f_mkdir+0x188>
					fs->winsect = dsc++;
 801724a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801724c:	1c5a      	adds	r2, r3, #1
 801724e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8017250:	68ba      	ldr	r2, [r7, #8]
 8017252:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	2201      	movs	r2, #1
 8017258:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801725a:	68bb      	ldr	r3, [r7, #8]
 801725c:	4618      	mov	r0, r3
 801725e:	f7fe f881 	bl	8015364 <sync_window>
 8017262:	4603      	mov	r3, r0
 8017264:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8017268:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801726c:	2b00      	cmp	r3, #0
 801726e:	d10c      	bne.n	801728a <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8017270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017274:	2100      	movs	r1, #0
 8017276:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017278:	f7fd fe7a 	bl	8014f70 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801727c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801727e:	3b01      	subs	r3, #1
 8017280:	653b      	str	r3, [r7, #80]	@ 0x50
 8017282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017284:	2b00      	cmp	r3, #0
 8017286:	d1e0      	bne.n	801724a <f_mkdir+0x150>
 8017288:	e000      	b.n	801728c <f_mkdir+0x192>
					if (res != FR_OK) break;
 801728a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801728c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017290:	2b00      	cmp	r3, #0
 8017292:	d107      	bne.n	80172a4 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8017294:	f107 030c 	add.w	r3, r7, #12
 8017298:	4618      	mov	r0, r3
 801729a:	f7fe fe3f 	bl	8015f1c <dir_register>
 801729e:	4603      	mov	r3, r0
 80172a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 80172a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d120      	bne.n	80172ee <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80172ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80172b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172b2:	3316      	adds	r3, #22
 80172b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7fd fe0d 	bl	8014ed6 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80172bc:	68bb      	ldr	r3, [r7, #8]
 80172be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80172c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7fe fdb5 	bl	8015e32 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80172c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172ca:	330b      	adds	r3, #11
 80172cc:	2210      	movs	r2, #16
 80172ce:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80172d0:	68bb      	ldr	r3, [r7, #8]
 80172d2:	2201      	movs	r2, #1
 80172d4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80172d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d10e      	bne.n	80172fc <f_mkdir+0x202>
					res = sync_fs(fs);
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7fe f8b1 	bl	8015448 <sync_fs>
 80172e6:	4603      	mov	r3, r0
 80172e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80172ec:	e006      	b.n	80172fc <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80172ee:	f107 030c 	add.w	r3, r7, #12
 80172f2:	2200      	movs	r2, #0
 80172f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80172f6:	4618      	mov	r0, r3
 80172f8:	f7fe fac4 	bl	8015884 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8017302:	4611      	mov	r1, r2
 8017304:	4618      	mov	r0, r3
 8017306:	f7fd fea6 	bl	8015056 <unlock_fs>
 801730a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 801730e:	4618      	mov	r0, r3
 8017310:	3758      	adds	r7, #88	@ 0x58
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}
	...

08017318 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8017318:	b590      	push	{r4, r7, lr}
 801731a:	b09d      	sub	sp, #116	@ 0x74
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	607a      	str	r2, [r7, #4]
 8017322:	603b      	str	r3, [r7, #0]
 8017324:	460b      	mov	r3, r1
 8017326:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8017328:	2301      	movs	r3, #1
 801732a:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 801732c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017330:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8017332:	f107 030c 	add.w	r3, r7, #12
 8017336:	4618      	mov	r0, r3
 8017338:	f7fe ff27 	bl	801618a <get_ldnumber>
 801733c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801733e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017340:	2b00      	cmp	r3, #0
 8017342:	da02      	bge.n	801734a <f_mkfs+0x32>
 8017344:	230b      	movs	r3, #11
 8017346:	f000 bc0d 	b.w	8017b64 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801734a:	4a94      	ldr	r2, [pc, #592]	@ (801759c <f_mkfs+0x284>)
 801734c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801734e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d005      	beq.n	8017362 <f_mkfs+0x4a>
 8017356:	4a91      	ldr	r2, [pc, #580]	@ (801759c <f_mkfs+0x284>)
 8017358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801735a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801735e:	2200      	movs	r2, #0
 8017360:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8017362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017364:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8017368:	2300      	movs	r3, #0
 801736a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801736e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017372:	4618      	mov	r0, r3
 8017374:	f7fd fcd4 	bl	8014d20 <disk_initialize>
 8017378:	4603      	mov	r3, r0
 801737a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801737e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8017382:	f003 0301 	and.w	r3, r3, #1
 8017386:	2b00      	cmp	r3, #0
 8017388:	d001      	beq.n	801738e <f_mkfs+0x76>
 801738a:	2303      	movs	r3, #3
 801738c:	e3ea      	b.n	8017b64 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801738e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8017392:	f003 0304 	and.w	r3, r3, #4
 8017396:	2b00      	cmp	r3, #0
 8017398:	d001      	beq.n	801739e <f_mkfs+0x86>
 801739a:	230a      	movs	r3, #10
 801739c:	e3e2      	b.n	8017b64 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801739e:	f107 0214 	add.w	r2, r7, #20
 80173a2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80173a6:	2103      	movs	r1, #3
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7fd fd1f 	bl	8014dec <disk_ioctl>
 80173ae:	4603      	mov	r3, r0
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d10c      	bne.n	80173ce <f_mkfs+0xb6>
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d009      	beq.n	80173ce <f_mkfs+0xb6>
 80173ba:	697b      	ldr	r3, [r7, #20]
 80173bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80173c0:	d805      	bhi.n	80173ce <f_mkfs+0xb6>
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	1e5a      	subs	r2, r3, #1
 80173c6:	697b      	ldr	r3, [r7, #20]
 80173c8:	4013      	ands	r3, r2
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d001      	beq.n	80173d2 <f_mkfs+0xba>
 80173ce:	2301      	movs	r3, #1
 80173d0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80173d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80173d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d003      	beq.n	80173e6 <f_mkfs+0xce>
 80173de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d309      	bcc.n	80173fa <f_mkfs+0xe2>
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80173ec:	d805      	bhi.n	80173fa <f_mkfs+0xe2>
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	1e5a      	subs	r2, r3, #1
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	4013      	ands	r3, r2
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d001      	beq.n	80173fe <f_mkfs+0xe6>
 80173fa:	2313      	movs	r3, #19
 80173fc:	e3b2      	b.n	8017b64 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80173fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017400:	687a      	ldr	r2, [r7, #4]
 8017402:	fbb2 f3f3 	udiv	r3, r2, r3
 8017406:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 801740c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801740e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017412:	fbb2 f3f3 	udiv	r3, r2, r3
 8017416:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8017418:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801741a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801741c:	fb02 f303 	mul.w	r3, r2, r3
 8017420:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8017422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017424:	2b00      	cmp	r3, #0
 8017426:	d101      	bne.n	801742c <f_mkfs+0x114>
 8017428:	230e      	movs	r3, #14
 801742a:	e39b      	b.n	8017b64 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 801742c:	f107 0210 	add.w	r2, r7, #16
 8017430:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017434:	2101      	movs	r1, #1
 8017436:	4618      	mov	r0, r3
 8017438:	f7fd fcd8 	bl	8014dec <disk_ioctl>
 801743c:	4603      	mov	r3, r0
 801743e:	2b00      	cmp	r3, #0
 8017440:	d001      	beq.n	8017446 <f_mkfs+0x12e>
 8017442:	2301      	movs	r3, #1
 8017444:	e38e      	b.n	8017b64 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8017446:	7afb      	ldrb	r3, [r7, #11]
 8017448:	f003 0308 	and.w	r3, r3, #8
 801744c:	2b00      	cmp	r3, #0
 801744e:	d001      	beq.n	8017454 <f_mkfs+0x13c>
 8017450:	2300      	movs	r3, #0
 8017452:	e000      	b.n	8017456 <f_mkfs+0x13e>
 8017454:	233f      	movs	r3, #63	@ 0x3f
 8017456:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8017458:	693b      	ldr	r3, [r7, #16]
 801745a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801745c:	429a      	cmp	r2, r3
 801745e:	d901      	bls.n	8017464 <f_mkfs+0x14c>
 8017460:	230e      	movs	r3, #14
 8017462:	e37f      	b.n	8017b64 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8017464:	693a      	ldr	r2, [r7, #16]
 8017466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017468:	1ad3      	subs	r3, r2, r3
 801746a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017470:	d801      	bhi.n	8017476 <f_mkfs+0x15e>
 8017472:	230e      	movs	r3, #14
 8017474:	e376      	b.n	8017b64 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2b80      	cmp	r3, #128	@ 0x80
 801747a:	d901      	bls.n	8017480 <f_mkfs+0x168>
 801747c:	2313      	movs	r3, #19
 801747e:	e371      	b.n	8017b64 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8017480:	7afb      	ldrb	r3, [r7, #11]
 8017482:	f003 0302 	and.w	r3, r3, #2
 8017486:	2b00      	cmp	r3, #0
 8017488:	d00d      	beq.n	80174a6 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801748a:	7afb      	ldrb	r3, [r7, #11]
 801748c:	f003 0307 	and.w	r3, r3, #7
 8017490:	2b02      	cmp	r3, #2
 8017492:	d004      	beq.n	801749e <f_mkfs+0x186>
 8017494:	7afb      	ldrb	r3, [r7, #11]
 8017496:	f003 0301 	and.w	r3, r3, #1
 801749a:	2b00      	cmp	r3, #0
 801749c:	d103      	bne.n	80174a6 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801749e:	2303      	movs	r3, #3
 80174a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80174a4:	e009      	b.n	80174ba <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80174a6:	7afb      	ldrb	r3, [r7, #11]
 80174a8:	f003 0301 	and.w	r3, r3, #1
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d101      	bne.n	80174b4 <f_mkfs+0x19c>
 80174b0:	2313      	movs	r3, #19
 80174b2:	e357      	b.n	8017b64 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80174b4:	2302      	movs	r3, #2
 80174b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80174be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80174c2:	2b03      	cmp	r3, #3
 80174c4:	d13c      	bne.n	8017540 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80174c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d11b      	bne.n	8017504 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	0c5b      	lsrs	r3, r3, #17
 80174d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80174d2:	2300      	movs	r3, #0
 80174d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80174d6:	2301      	movs	r3, #1
 80174d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80174da:	e005      	b.n	80174e8 <f_mkfs+0x1d0>
 80174dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174de:	3301      	adds	r3, #1
 80174e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80174e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80174e4:	005b      	lsls	r3, r3, #1
 80174e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80174e8:	4a2d      	ldr	r2, [pc, #180]	@ (80175a0 <f_mkfs+0x288>)
 80174ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d007      	beq.n	8017504 <f_mkfs+0x1ec>
 80174f4:	4a2a      	ldr	r2, [pc, #168]	@ (80175a0 <f_mkfs+0x288>)
 80174f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80174fc:	461a      	mov	r2, r3
 80174fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017500:	4293      	cmp	r3, r2
 8017502:	d2eb      	bcs.n	80174dc <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8017504:	693a      	ldr	r2, [r7, #16]
 8017506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017508:	fbb2 f3f3 	udiv	r3, r2, r3
 801750c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801750e:	6a3b      	ldr	r3, [r7, #32]
 8017510:	3302      	adds	r3, #2
 8017512:	009a      	lsls	r2, r3, #2
 8017514:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017516:	4413      	add	r3, r2
 8017518:	1e5a      	subs	r2, r3, #1
 801751a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017520:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8017522:	2320      	movs	r3, #32
 8017524:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8017526:	2300      	movs	r3, #0
 8017528:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801752a:	6a3b      	ldr	r3, [r7, #32]
 801752c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8017530:	4293      	cmp	r3, r2
 8017532:	d903      	bls.n	801753c <f_mkfs+0x224>
 8017534:	6a3b      	ldr	r3, [r7, #32]
 8017536:	4a1b      	ldr	r2, [pc, #108]	@ (80175a4 <f_mkfs+0x28c>)
 8017538:	4293      	cmp	r3, r2
 801753a:	d952      	bls.n	80175e2 <f_mkfs+0x2ca>
 801753c:	230e      	movs	r3, #14
 801753e:	e311      	b.n	8017b64 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8017540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017542:	2b00      	cmp	r3, #0
 8017544:	d11b      	bne.n	801757e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8017546:	693b      	ldr	r3, [r7, #16]
 8017548:	0b1b      	lsrs	r3, r3, #12
 801754a:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801754c:	2300      	movs	r3, #0
 801754e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017550:	2301      	movs	r3, #1
 8017552:	653b      	str	r3, [r7, #80]	@ 0x50
 8017554:	e005      	b.n	8017562 <f_mkfs+0x24a>
 8017556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017558:	3301      	adds	r3, #1
 801755a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801755c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801755e:	005b      	lsls	r3, r3, #1
 8017560:	653b      	str	r3, [r7, #80]	@ 0x50
 8017562:	4a11      	ldr	r2, [pc, #68]	@ (80175a8 <f_mkfs+0x290>)
 8017564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d007      	beq.n	801757e <f_mkfs+0x266>
 801756e:	4a0e      	ldr	r2, [pc, #56]	@ (80175a8 <f_mkfs+0x290>)
 8017570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017576:	461a      	mov	r2, r3
 8017578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801757a:	4293      	cmp	r3, r2
 801757c:	d2eb      	bcs.n	8017556 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 801757e:	693a      	ldr	r2, [r7, #16]
 8017580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017582:	fbb2 f3f3 	udiv	r3, r2, r3
 8017586:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8017588:	6a3b      	ldr	r3, [r7, #32]
 801758a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801758e:	4293      	cmp	r3, r2
 8017590:	d90c      	bls.n	80175ac <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8017592:	6a3b      	ldr	r3, [r7, #32]
 8017594:	3302      	adds	r3, #2
 8017596:	005b      	lsls	r3, r3, #1
 8017598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801759a:	e012      	b.n	80175c2 <f_mkfs+0x2aa>
 801759c:	200023e0 	.word	0x200023e0
 80175a0:	0801ed98 	.word	0x0801ed98
 80175a4:	0ffffff5 	.word	0x0ffffff5
 80175a8:	0801eda8 	.word	0x0801eda8
				} else {
					fmt = FS_FAT12;
 80175ac:	2301      	movs	r3, #1
 80175ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80175b2:	6a3a      	ldr	r2, [r7, #32]
 80175b4:	4613      	mov	r3, r2
 80175b6:	005b      	lsls	r3, r3, #1
 80175b8:	4413      	add	r3, r2
 80175ba:	3301      	adds	r3, #1
 80175bc:	085b      	lsrs	r3, r3, #1
 80175be:	3303      	adds	r3, #3
 80175c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80175c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80175c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80175c6:	4413      	add	r3, r2
 80175c8:	1e5a      	subs	r2, r3, #1
 80175ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80175cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80175d0:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80175d2:	2301      	movs	r3, #1
 80175d4:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80175d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175d8:	015a      	lsls	r2, r3, #5
 80175da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80175dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80175e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80175e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175e6:	4413      	add	r3, r2
 80175e8:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80175ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80175ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80175ee:	fb03 f202 	mul.w	r2, r3, r2
 80175f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80175f4:	4413      	add	r3, r2
 80175f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80175f8:	4413      	add	r3, r2
 80175fa:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80175fc:	697a      	ldr	r2, [r7, #20]
 80175fe:	69fb      	ldr	r3, [r7, #28]
 8017600:	4413      	add	r3, r2
 8017602:	1e5a      	subs	r2, r3, #1
 8017604:	697b      	ldr	r3, [r7, #20]
 8017606:	425b      	negs	r3, r3
 8017608:	401a      	ands	r2, r3
 801760a:	69fb      	ldr	r3, [r7, #28]
 801760c:	1ad3      	subs	r3, r2, r3
 801760e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8017610:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017614:	2b03      	cmp	r3, #3
 8017616:	d108      	bne.n	801762a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8017618:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801761a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801761c:	4413      	add	r3, r2
 801761e:	657b      	str	r3, [r7, #84]	@ 0x54
 8017620:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017624:	4413      	add	r3, r2
 8017626:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017628:	e006      	b.n	8017638 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801762a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801762c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801762e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017632:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017634:	4413      	add	r3, r2
 8017636:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8017638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801763a:	011a      	lsls	r2, r3, #4
 801763c:	69fb      	ldr	r3, [r7, #28]
 801763e:	441a      	add	r2, r3
 8017640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017642:	1ad2      	subs	r2, r2, r3
 8017644:	693b      	ldr	r3, [r7, #16]
 8017646:	429a      	cmp	r2, r3
 8017648:	d901      	bls.n	801764e <f_mkfs+0x336>
 801764a:	230e      	movs	r3, #14
 801764c:	e28a      	b.n	8017b64 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 801764e:	693a      	ldr	r2, [r7, #16]
 8017650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017652:	1ad2      	subs	r2, r2, r3
 8017654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017656:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017658:	fb01 f303 	mul.w	r3, r1, r3
 801765c:	1ad2      	subs	r2, r2, r3
 801765e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017660:	1ad2      	subs	r2, r2, r3
 8017662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017664:	fbb2 f3f3 	udiv	r3, r2, r3
 8017668:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801766a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801766e:	2b03      	cmp	r3, #3
 8017670:	d10f      	bne.n	8017692 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8017672:	6a3b      	ldr	r3, [r7, #32]
 8017674:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8017678:	4293      	cmp	r3, r2
 801767a:	d80a      	bhi.n	8017692 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d105      	bne.n	801768e <f_mkfs+0x376>
 8017682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017684:	085b      	lsrs	r3, r3, #1
 8017686:	607b      	str	r3, [r7, #4]
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d144      	bne.n	8017718 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801768e:	230e      	movs	r3, #14
 8017690:	e268      	b.n	8017b64 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8017692:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017696:	2b02      	cmp	r3, #2
 8017698:	d133      	bne.n	8017702 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801769a:	6a3b      	ldr	r3, [r7, #32]
 801769c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80176a0:	4293      	cmp	r3, r2
 80176a2:	d91e      	bls.n	80176e2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d107      	bne.n	80176ba <f_mkfs+0x3a2>
 80176aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80176ac:	005b      	lsls	r3, r3, #1
 80176ae:	2b40      	cmp	r3, #64	@ 0x40
 80176b0:	d803      	bhi.n	80176ba <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80176b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80176b4:	005b      	lsls	r3, r3, #1
 80176b6:	607b      	str	r3, [r7, #4]
 80176b8:	e033      	b.n	8017722 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80176ba:	7afb      	ldrb	r3, [r7, #11]
 80176bc:	f003 0302 	and.w	r3, r3, #2
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d003      	beq.n	80176cc <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80176c4:	2303      	movs	r3, #3
 80176c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80176ca:	e02a      	b.n	8017722 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d105      	bne.n	80176de <f_mkfs+0x3c6>
 80176d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80176d4:	005b      	lsls	r3, r3, #1
 80176d6:	607b      	str	r3, [r7, #4]
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	2b80      	cmp	r3, #128	@ 0x80
 80176dc:	d91e      	bls.n	801771c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80176de:	230e      	movs	r3, #14
 80176e0:	e240      	b.n	8017b64 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80176e2:	6a3b      	ldr	r3, [r7, #32]
 80176e4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80176e8:	4293      	cmp	r3, r2
 80176ea:	d80a      	bhi.n	8017702 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d105      	bne.n	80176fe <f_mkfs+0x3e6>
 80176f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80176f4:	005b      	lsls	r3, r3, #1
 80176f6:	607b      	str	r3, [r7, #4]
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	2b80      	cmp	r3, #128	@ 0x80
 80176fc:	d910      	bls.n	8017720 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80176fe:	230e      	movs	r3, #14
 8017700:	e230      	b.n	8017b64 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8017702:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017706:	2b01      	cmp	r3, #1
 8017708:	d10c      	bne.n	8017724 <f_mkfs+0x40c>
 801770a:	6a3b      	ldr	r3, [r7, #32]
 801770c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8017710:	4293      	cmp	r3, r2
 8017712:	d907      	bls.n	8017724 <f_mkfs+0x40c>
 8017714:	230e      	movs	r3, #14
 8017716:	e225      	b.n	8017b64 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8017718:	bf00      	nop
 801771a:	e6ce      	b.n	80174ba <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801771c:	bf00      	nop
 801771e:	e6cc      	b.n	80174ba <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017720:	bf00      	nop
			pau = au;
 8017722:	e6ca      	b.n	80174ba <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8017724:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8017726:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017728:	461a      	mov	r2, r3
 801772a:	2100      	movs	r1, #0
 801772c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801772e:	f7fd fc1f 	bl	8014f70 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8017732:	220b      	movs	r2, #11
 8017734:	49b2      	ldr	r1, [pc, #712]	@ (8017a00 <f_mkfs+0x6e8>)
 8017736:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017738:	f7fd fbf9 	bl	8014f2e <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 801773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801773e:	330b      	adds	r3, #11
 8017740:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017742:	4611      	mov	r1, r2
 8017744:	4618      	mov	r0, r3
 8017746:	f7fd fbab 	bl	8014ea0 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801774c:	330d      	adds	r3, #13
 801774e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017750:	b2d2      	uxtb	r2, r2
 8017752:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8017754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017756:	330e      	adds	r3, #14
 8017758:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801775a:	b292      	uxth	r2, r2
 801775c:	4611      	mov	r1, r2
 801775e:	4618      	mov	r0, r3
 8017760:	f7fd fb9e 	bl	8014ea0 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8017764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017766:	3310      	adds	r3, #16
 8017768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801776a:	b2d2      	uxtb	r2, r2
 801776c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 801776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017770:	f103 0211 	add.w	r2, r3, #17
 8017774:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017778:	2b03      	cmp	r3, #3
 801777a:	d002      	beq.n	8017782 <f_mkfs+0x46a>
 801777c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801777e:	b29b      	uxth	r3, r3
 8017780:	e000      	b.n	8017784 <f_mkfs+0x46c>
 8017782:	2300      	movs	r3, #0
 8017784:	4619      	mov	r1, r3
 8017786:	4610      	mov	r0, r2
 8017788:	f7fd fb8a 	bl	8014ea0 <st_word>
		if (sz_vol < 0x10000) {
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017792:	d208      	bcs.n	80177a6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8017794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017796:	3313      	adds	r3, #19
 8017798:	693a      	ldr	r2, [r7, #16]
 801779a:	b292      	uxth	r2, r2
 801779c:	4611      	mov	r1, r2
 801779e:	4618      	mov	r0, r3
 80177a0:	f7fd fb7e 	bl	8014ea0 <st_word>
 80177a4:	e006      	b.n	80177b4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80177a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177a8:	3320      	adds	r3, #32
 80177aa:	693a      	ldr	r2, [r7, #16]
 80177ac:	4611      	mov	r1, r2
 80177ae:	4618      	mov	r0, r3
 80177b0:	f7fd fb91 	bl	8014ed6 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80177b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177b6:	3315      	adds	r3, #21
 80177b8:	22f8      	movs	r2, #248	@ 0xf8
 80177ba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80177bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177be:	3318      	adds	r3, #24
 80177c0:	213f      	movs	r1, #63	@ 0x3f
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7fd fb6c 	bl	8014ea0 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80177c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177ca:	331a      	adds	r3, #26
 80177cc:	21ff      	movs	r1, #255	@ 0xff
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7fd fb66 	bl	8014ea0 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80177d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177d6:	331c      	adds	r3, #28
 80177d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80177da:	4618      	mov	r0, r3
 80177dc:	f7fd fb7b 	bl	8014ed6 <st_dword>
		if (fmt == FS_FAT32) {
 80177e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80177e4:	2b03      	cmp	r3, #3
 80177e6:	d131      	bne.n	801784c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80177e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177ea:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 80177ee:	f7fa fe4d 	bl	801248c <get_fattime>
 80177f2:	4603      	mov	r3, r0
 80177f4:	4619      	mov	r1, r3
 80177f6:	4620      	mov	r0, r4
 80177f8:	f7fd fb6d 	bl	8014ed6 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80177fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177fe:	3324      	adds	r3, #36	@ 0x24
 8017800:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017802:	4618      	mov	r0, r3
 8017804:	f7fd fb67 	bl	8014ed6 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8017808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801780a:	332c      	adds	r3, #44	@ 0x2c
 801780c:	2102      	movs	r1, #2
 801780e:	4618      	mov	r0, r3
 8017810:	f7fd fb61 	bl	8014ed6 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8017814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017816:	3330      	adds	r3, #48	@ 0x30
 8017818:	2101      	movs	r1, #1
 801781a:	4618      	mov	r0, r3
 801781c:	f7fd fb40 	bl	8014ea0 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8017820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017822:	3332      	adds	r3, #50	@ 0x32
 8017824:	2106      	movs	r1, #6
 8017826:	4618      	mov	r0, r3
 8017828:	f7fd fb3a 	bl	8014ea0 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 801782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801782e:	3340      	adds	r3, #64	@ 0x40
 8017830:	2280      	movs	r2, #128	@ 0x80
 8017832:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8017834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017836:	3342      	adds	r3, #66	@ 0x42
 8017838:	2229      	movs	r2, #41	@ 0x29
 801783a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 801783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801783e:	3347      	adds	r3, #71	@ 0x47
 8017840:	2213      	movs	r2, #19
 8017842:	4970      	ldr	r1, [pc, #448]	@ (8017a04 <f_mkfs+0x6ec>)
 8017844:	4618      	mov	r0, r3
 8017846:	f7fd fb72 	bl	8014f2e <mem_cpy>
 801784a:	e020      	b.n	801788e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 801784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801784e:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8017852:	f7fa fe1b 	bl	801248c <get_fattime>
 8017856:	4603      	mov	r3, r0
 8017858:	4619      	mov	r1, r3
 801785a:	4620      	mov	r0, r4
 801785c:	f7fd fb3b 	bl	8014ed6 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8017860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017862:	3316      	adds	r3, #22
 8017864:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017866:	b292      	uxth	r2, r2
 8017868:	4611      	mov	r1, r2
 801786a:	4618      	mov	r0, r3
 801786c:	f7fd fb18 	bl	8014ea0 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8017870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017872:	3324      	adds	r3, #36	@ 0x24
 8017874:	2280      	movs	r2, #128	@ 0x80
 8017876:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8017878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801787a:	3326      	adds	r3, #38	@ 0x26
 801787c:	2229      	movs	r2, #41	@ 0x29
 801787e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8017880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017882:	332b      	adds	r3, #43	@ 0x2b
 8017884:	2213      	movs	r2, #19
 8017886:	4960      	ldr	r1, [pc, #384]	@ (8017a08 <f_mkfs+0x6f0>)
 8017888:	4618      	mov	r0, r3
 801788a:	f7fd fb50 	bl	8014f2e <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 801788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017890:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8017894:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8017898:	4618      	mov	r0, r3
 801789a:	f7fd fb01 	bl	8014ea0 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801789e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80178a2:	2301      	movs	r3, #1
 80178a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80178a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80178a8:	f7fd fa80 	bl	8014dac <disk_write>
 80178ac:	4603      	mov	r3, r0
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d001      	beq.n	80178b6 <f_mkfs+0x59e>
 80178b2:	2301      	movs	r3, #1
 80178b4:	e156      	b.n	8017b64 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80178b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80178ba:	2b03      	cmp	r3, #3
 80178bc:	d140      	bne.n	8017940 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80178be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c0:	1d9a      	adds	r2, r3, #6
 80178c2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80178c6:	2301      	movs	r3, #1
 80178c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80178ca:	f7fd fa6f 	bl	8014dac <disk_write>
			mem_set(buf, 0, ss);
 80178ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80178d0:	461a      	mov	r2, r3
 80178d2:	2100      	movs	r1, #0
 80178d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80178d6:	f7fd fb4b 	bl	8014f70 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80178da:	494c      	ldr	r1, [pc, #304]	@ (8017a0c <f_mkfs+0x6f4>)
 80178dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80178de:	f7fd fafa 	bl	8014ed6 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80178e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80178e8:	4949      	ldr	r1, [pc, #292]	@ (8017a10 <f_mkfs+0x6f8>)
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7fd faf3 	bl	8014ed6 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80178f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178f2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80178f6:	6a3b      	ldr	r3, [r7, #32]
 80178f8:	3b01      	subs	r3, #1
 80178fa:	4619      	mov	r1, r3
 80178fc:	4610      	mov	r0, r2
 80178fe:	f7fd faea 	bl	8014ed6 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8017902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017904:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8017908:	2102      	movs	r1, #2
 801790a:	4618      	mov	r0, r3
 801790c:	f7fd fae3 	bl	8014ed6 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8017910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017912:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8017916:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801791a:	4618      	mov	r0, r3
 801791c:	f7fd fac0 	bl	8014ea0 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8017920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017922:	1dda      	adds	r2, r3, #7
 8017924:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8017928:	2301      	movs	r3, #1
 801792a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801792c:	f7fd fa3e 	bl	8014dac <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8017930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017932:	1c5a      	adds	r2, r3, #1
 8017934:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8017938:	2301      	movs	r3, #1
 801793a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801793c:	f7fd fa36 	bl	8014dac <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8017940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017942:	2100      	movs	r1, #0
 8017944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017946:	f7fd fb13 	bl	8014f70 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801794a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801794c:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801794e:	2300      	movs	r3, #0
 8017950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017952:	e04b      	b.n	80179ec <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8017954:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017958:	2b03      	cmp	r3, #3
 801795a:	d113      	bne.n	8017984 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 801795c:	f06f 0107 	mvn.w	r1, #7
 8017960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017962:	f7fd fab8 	bl	8014ed6 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8017966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017968:	3304      	adds	r3, #4
 801796a:	f04f 31ff 	mov.w	r1, #4294967295
 801796e:	4618      	mov	r0, r3
 8017970:	f7fd fab1 	bl	8014ed6 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8017974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017976:	3308      	adds	r3, #8
 8017978:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 801797c:	4618      	mov	r0, r3
 801797e:	f7fd faaa 	bl	8014ed6 <st_dword>
 8017982:	e00b      	b.n	801799c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8017984:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017988:	2b01      	cmp	r3, #1
 801798a:	d101      	bne.n	8017990 <f_mkfs+0x678>
 801798c:	4b21      	ldr	r3, [pc, #132]	@ (8017a14 <f_mkfs+0x6fc>)
 801798e:	e001      	b.n	8017994 <f_mkfs+0x67c>
 8017990:	f06f 0307 	mvn.w	r3, #7
 8017994:	4619      	mov	r1, r3
 8017996:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017998:	f7fd fa9d 	bl	8014ed6 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 801799c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801799e:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80179a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80179a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179a4:	4293      	cmp	r3, r2
 80179a6:	bf28      	it	cs
 80179a8:	4613      	movcs	r3, r2
 80179aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80179ac:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80179b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80179b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80179b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80179b6:	f7fd f9f9 	bl	8014dac <disk_write>
 80179ba:	4603      	mov	r3, r0
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d001      	beq.n	80179c4 <f_mkfs+0x6ac>
 80179c0:	2301      	movs	r3, #1
 80179c2:	e0cf      	b.n	8017b64 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80179c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80179c6:	461a      	mov	r2, r3
 80179c8:	2100      	movs	r1, #0
 80179ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80179cc:	f7fd fad0 	bl	8014f70 <mem_set>
				sect += n; nsect -= n;
 80179d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80179d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80179d4:	4413      	add	r3, r2
 80179d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80179d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80179da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80179dc:	1ad3      	subs	r3, r2, r3
 80179de:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 80179e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d1dc      	bne.n	80179a0 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80179e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80179e8:	3301      	adds	r3, #1
 80179ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80179ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80179ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d3af      	bcc.n	8017954 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80179f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80179f8:	2b03      	cmp	r3, #3
 80179fa:	d10d      	bne.n	8017a18 <f_mkfs+0x700>
 80179fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179fe:	e00c      	b.n	8017a1a <f_mkfs+0x702>
 8017a00:	0801eca8 	.word	0x0801eca8
 8017a04:	0801ecb4 	.word	0x0801ecb4
 8017a08:	0801ecc8 	.word	0x0801ecc8
 8017a0c:	41615252 	.word	0x41615252
 8017a10:	61417272 	.word	0x61417272
 8017a14:	00fffff8 	.word	0x00fffff8
 8017a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017a1a:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8017a1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a20:	4293      	cmp	r3, r2
 8017a22:	bf28      	it	cs
 8017a24:	4613      	movcs	r3, r2
 8017a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8017a28:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8017a2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017a30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017a32:	f7fd f9bb 	bl	8014dac <disk_write>
 8017a36:	4603      	mov	r3, r0
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d001      	beq.n	8017a40 <f_mkfs+0x728>
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	e091      	b.n	8017b64 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8017a40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a44:	4413      	add	r3, r2
 8017a46:	667b      	str	r3, [r7, #100]	@ 0x64
 8017a48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a4c:	1ad3      	subs	r3, r2, r3
 8017a4e:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8017a50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d1e2      	bne.n	8017a1c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8017a56:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017a5a:	2b03      	cmp	r3, #3
 8017a5c:	d103      	bne.n	8017a66 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8017a5e:	230c      	movs	r3, #12
 8017a60:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8017a64:	e010      	b.n	8017a88 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8017a66:	693b      	ldr	r3, [r7, #16]
 8017a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017a6c:	d303      	bcc.n	8017a76 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8017a6e:	2306      	movs	r3, #6
 8017a70:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8017a74:	e008      	b.n	8017a88 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8017a76:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017a7a:	2b02      	cmp	r3, #2
 8017a7c:	d101      	bne.n	8017a82 <f_mkfs+0x76a>
 8017a7e:	2304      	movs	r3, #4
 8017a80:	e000      	b.n	8017a84 <f_mkfs+0x76c>
 8017a82:	2301      	movs	r3, #1
 8017a84:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8017a88:	7afb      	ldrb	r3, [r7, #11]
 8017a8a:	f003 0308 	and.w	r3, r3, #8
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d15b      	bne.n	8017b4a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8017a92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017a94:	461a      	mov	r2, r3
 8017a96:	2100      	movs	r1, #0
 8017a98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017a9a:	f7fd fa69 	bl	8014f70 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8017a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aa0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8017aa4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f7fd f9f9 	bl	8014ea0 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8017aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ab0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8017ab4:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8017ab6:	69bb      	ldr	r3, [r7, #24]
 8017ab8:	2200      	movs	r2, #0
 8017aba:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8017abc:	69bb      	ldr	r3, [r7, #24]
 8017abe:	3301      	adds	r3, #1
 8017ac0:	2201      	movs	r2, #1
 8017ac2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8017ac4:	69bb      	ldr	r3, [r7, #24]
 8017ac6:	3302      	adds	r3, #2
 8017ac8:	2201      	movs	r2, #1
 8017aca:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8017acc:	69bb      	ldr	r3, [r7, #24]
 8017ace:	3303      	adds	r3, #3
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8017ad4:	69bb      	ldr	r3, [r7, #24]
 8017ad6:	3304      	adds	r3, #4
 8017ad8:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8017adc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8017ade:	693a      	ldr	r2, [r7, #16]
 8017ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ae2:	441a      	add	r2, r3
 8017ae4:	4b21      	ldr	r3, [pc, #132]	@ (8017b6c <f_mkfs+0x854>)
 8017ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8017aea:	1ad2      	subs	r2, r2, r3
 8017aec:	0852      	lsrs	r2, r2, #1
 8017aee:	4413      	add	r3, r2
 8017af0:	0b5b      	lsrs	r3, r3, #13
 8017af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8017af4:	69bb      	ldr	r3, [r7, #24]
 8017af6:	3305      	adds	r3, #5
 8017af8:	22fe      	movs	r2, #254	@ 0xfe
 8017afa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8017afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017afe:	089b      	lsrs	r3, r3, #2
 8017b00:	b2da      	uxtb	r2, r3
 8017b02:	69bb      	ldr	r3, [r7, #24]
 8017b04:	3306      	adds	r3, #6
 8017b06:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8017b0a:	b2d2      	uxtb	r2, r2
 8017b0c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8017b0e:	69bb      	ldr	r3, [r7, #24]
 8017b10:	3307      	adds	r3, #7
 8017b12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017b14:	b2d2      	uxtb	r2, r2
 8017b16:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8017b18:	69bb      	ldr	r3, [r7, #24]
 8017b1a:	3308      	adds	r3, #8
 8017b1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f7fd f9d9 	bl	8014ed6 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8017b24:	69bb      	ldr	r3, [r7, #24]
 8017b26:	330c      	adds	r3, #12
 8017b28:	693a      	ldr	r2, [r7, #16]
 8017b2a:	4611      	mov	r1, r2
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7fd f9d2 	bl	8014ed6 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8017b32:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8017b36:	2301      	movs	r3, #1
 8017b38:	2200      	movs	r2, #0
 8017b3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017b3c:	f7fd f936 	bl	8014dac <disk_write>
 8017b40:	4603      	mov	r3, r0
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d001      	beq.n	8017b4a <f_mkfs+0x832>
 8017b46:	2301      	movs	r3, #1
 8017b48:	e00c      	b.n	8017b64 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8017b4a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017b4e:	2200      	movs	r2, #0
 8017b50:	2100      	movs	r1, #0
 8017b52:	4618      	mov	r0, r3
 8017b54:	f7fd f94a 	bl	8014dec <disk_ioctl>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d001      	beq.n	8017b62 <f_mkfs+0x84a>
 8017b5e:	2301      	movs	r3, #1
 8017b60:	e000      	b.n	8017b64 <f_mkfs+0x84c>

	return FR_OK;
 8017b62:	2300      	movs	r3, #0
}
 8017b64:	4618      	mov	r0, r3
 8017b66:	3774      	adds	r7, #116	@ 0x74
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	bd90      	pop	{r4, r7, pc}
 8017b6c:	0515565b 	.word	0x0515565b

08017b70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017b70:	b480      	push	{r7}
 8017b72:	b087      	sub	sp, #28
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	60f8      	str	r0, [r7, #12]
 8017b78:	60b9      	str	r1, [r7, #8]
 8017b7a:	4613      	mov	r3, r2
 8017b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017b7e:	2301      	movs	r3, #1
 8017b80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017b82:	2300      	movs	r3, #0
 8017b84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017b86:	4b1f      	ldr	r3, [pc, #124]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017b88:	7a5b      	ldrb	r3, [r3, #9]
 8017b8a:	b2db      	uxtb	r3, r3
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d131      	bne.n	8017bf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017b90:	4b1c      	ldr	r3, [pc, #112]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017b92:	7a5b      	ldrb	r3, [r3, #9]
 8017b94:	b2db      	uxtb	r3, r3
 8017b96:	461a      	mov	r2, r3
 8017b98:	4b1a      	ldr	r3, [pc, #104]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017b9a:	2100      	movs	r1, #0
 8017b9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017b9e:	4b19      	ldr	r3, [pc, #100]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017ba0:	7a5b      	ldrb	r3, [r3, #9]
 8017ba2:	b2db      	uxtb	r3, r3
 8017ba4:	4a17      	ldr	r2, [pc, #92]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017ba6:	009b      	lsls	r3, r3, #2
 8017ba8:	4413      	add	r3, r2
 8017baa:	68fa      	ldr	r2, [r7, #12]
 8017bac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017bae:	4b15      	ldr	r3, [pc, #84]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017bb0:	7a5b      	ldrb	r3, [r3, #9]
 8017bb2:	b2db      	uxtb	r3, r3
 8017bb4:	461a      	mov	r2, r3
 8017bb6:	4b13      	ldr	r3, [pc, #76]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017bb8:	4413      	add	r3, r2
 8017bba:	79fa      	ldrb	r2, [r7, #7]
 8017bbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017bbe:	4b11      	ldr	r3, [pc, #68]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017bc0:	7a5b      	ldrb	r3, [r3, #9]
 8017bc2:	b2db      	uxtb	r3, r3
 8017bc4:	1c5a      	adds	r2, r3, #1
 8017bc6:	b2d1      	uxtb	r1, r2
 8017bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8017c04 <FATFS_LinkDriverEx+0x94>)
 8017bca:	7251      	strb	r1, [r2, #9]
 8017bcc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017bce:	7dbb      	ldrb	r3, [r7, #22]
 8017bd0:	3330      	adds	r3, #48	@ 0x30
 8017bd2:	b2da      	uxtb	r2, r3
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	3301      	adds	r3, #1
 8017bdc:	223a      	movs	r2, #58	@ 0x3a
 8017bde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	3302      	adds	r3, #2
 8017be4:	222f      	movs	r2, #47	@ 0x2f
 8017be6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	3303      	adds	r3, #3
 8017bec:	2200      	movs	r2, #0
 8017bee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	371c      	adds	r7, #28
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c00:	4770      	bx	lr
 8017c02:	bf00      	nop
 8017c04:	20002408 	.word	0x20002408

08017c08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b082      	sub	sp, #8
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017c12:	2200      	movs	r2, #0
 8017c14:	6839      	ldr	r1, [r7, #0]
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f7ff ffaa 	bl	8017b70 <FATFS_LinkDriverEx>
 8017c1c:	4603      	mov	r3, r0
}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3708      	adds	r7, #8
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}

08017c26 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8017c26:	b580      	push	{r7, lr}
 8017c28:	b086      	sub	sp, #24
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	6039      	str	r1, [r7, #0]
 8017c30:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8017c32:	2300      	movs	r3, #0
 8017c34:	60fb      	str	r3, [r7, #12]
 8017c36:	2300      	movs	r3, #0
 8017c38:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8017c3a:	f107 030c 	add.w	r3, r7, #12
 8017c3e:	2101      	movs	r1, #1
 8017c40:	4618      	mov	r0, r3
 8017c42:	f000 f8e9 	bl	8017e18 <osSemaphoreCreate>
 8017c46:	4602      	mov	r2, r0
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	bf14      	ite	ne
 8017c54:	2301      	movne	r3, #1
 8017c56:	2300      	moveq	r3, #0
 8017c58:	b2db      	uxtb	r3, r3
 8017c5a:	617b      	str	r3, [r7, #20]

    return ret;
 8017c5c:	697b      	ldr	r3, [r7, #20]
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	3718      	adds	r7, #24
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}

08017c66 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8017c66:	b580      	push	{r7, lr}
 8017c68:	b082      	sub	sp, #8
 8017c6a:	af00      	add	r7, sp, #0
 8017c6c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f000 f996 	bl	8017fa0 <osSemaphoreDelete>
#endif
    return 1;
 8017c74:	2301      	movs	r3, #1
}
 8017c76:	4618      	mov	r0, r3
 8017c78:	3708      	adds	r7, #8
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}

08017c7e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8017c7e:	b580      	push	{r7, lr}
 8017c80:	b084      	sub	sp, #16
 8017c82:	af00      	add	r7, sp, #0
 8017c84:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8017c86:	2300      	movs	r3, #0
 8017c88:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8017c8a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f000 f902 	bl	8017e98 <osSemaphoreWait>
 8017c94:	4603      	mov	r3, r0
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d101      	bne.n	8017c9e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8017c9a:	2301      	movs	r3, #1
 8017c9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017c9e:	68fb      	ldr	r3, [r7, #12]
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3710      	adds	r7, #16
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}

08017ca8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f000 f93f 	bl	8017f34 <osSemaphoreRelease>
#endif
}
 8017cb6:	bf00      	nop
 8017cb8:	3708      	adds	r7, #8
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}

08017cbe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8017cbe:	b480      	push	{r7}
 8017cc0:	b085      	sub	sp, #20
 8017cc2:	af00      	add	r7, sp, #0
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8017cc8:	2300      	movs	r3, #0
 8017cca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8017ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017cd0:	2b84      	cmp	r3, #132	@ 0x84
 8017cd2:	d005      	beq.n	8017ce0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8017cd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	4413      	add	r3, r2
 8017cdc:	3303      	adds	r3, #3
 8017cde:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8017ce0:	68fb      	ldr	r3, [r7, #12]
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3714      	adds	r7, #20
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr

08017cee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8017cee:	b480      	push	{r7}
 8017cf0:	b083      	sub	sp, #12
 8017cf2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017cf4:	f3ef 8305 	mrs	r3, IPSR
 8017cf8:	607b      	str	r3, [r7, #4]
  return(result);
 8017cfa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	bf14      	ite	ne
 8017d00:	2301      	movne	r3, #1
 8017d02:	2300      	moveq	r3, #0
 8017d04:	b2db      	uxtb	r3, r3
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	370c      	adds	r7, #12
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d10:	4770      	bx	lr

08017d12 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017d12:	b580      	push	{r7, lr}
 8017d14:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8017d16:	f001 fd33 	bl	8019780 <vTaskStartScheduler>
  
  return osOK;
 8017d1a:	2300      	movs	r3, #0
}
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	bd80      	pop	{r7, pc}

08017d20 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8017d24:	f002 f994 	bl	801a050 <xTaskGetSchedulerState>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	2b01      	cmp	r3, #1
 8017d2c:	d101      	bne.n	8017d32 <osKernelRunning+0x12>
    return 0;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	e000      	b.n	8017d34 <osKernelRunning+0x14>
  else
    return 1;
 8017d32:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8017d34:	4618      	mov	r0, r3
 8017d36:	bd80      	pop	{r7, pc}

08017d38 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8017d3c:	f7ff ffd7 	bl	8017cee <inHandlerMode>
 8017d40:	4603      	mov	r3, r0
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d003      	beq.n	8017d4e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8017d46:	f001 fe3f 	bl	80199c8 <xTaskGetTickCountFromISR>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	e002      	b.n	8017d54 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8017d4e:	f001 fe2b 	bl	80199a8 <xTaskGetTickCount>
 8017d52:	4603      	mov	r3, r0
  }
}
 8017d54:	4618      	mov	r0, r3
 8017d56:	bd80      	pop	{r7, pc}

08017d58 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d5a:	b089      	sub	sp, #36	@ 0x24
 8017d5c:	af04      	add	r7, sp, #16
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	695b      	ldr	r3, [r3, #20]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d020      	beq.n	8017dac <osThreadCreate+0x54>
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	699b      	ldr	r3, [r3, #24]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d01c      	beq.n	8017dac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	685c      	ldr	r4, [r3, #4]
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	691e      	ldr	r6, [r3, #16]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7ff ff9a 	bl	8017cbe <makeFreeRtosPriority>
 8017d8a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	695b      	ldr	r3, [r3, #20]
 8017d90:	687a      	ldr	r2, [r7, #4]
 8017d92:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017d94:	9202      	str	r2, [sp, #8]
 8017d96:	9301      	str	r3, [sp, #4]
 8017d98:	9100      	str	r1, [sp, #0]
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	4632      	mov	r2, r6
 8017d9e:	4629      	mov	r1, r5
 8017da0:	4620      	mov	r0, r4
 8017da2:	f001 fb0b 	bl	80193bc <xTaskCreateStatic>
 8017da6:	4603      	mov	r3, r0
 8017da8:	60fb      	str	r3, [r7, #12]
 8017daa:	e01c      	b.n	8017de6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	685c      	ldr	r4, [r3, #4]
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017db8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7ff ff7c 	bl	8017cbe <makeFreeRtosPriority>
 8017dc6:	4602      	mov	r2, r0
 8017dc8:	f107 030c 	add.w	r3, r7, #12
 8017dcc:	9301      	str	r3, [sp, #4]
 8017dce:	9200      	str	r2, [sp, #0]
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	4632      	mov	r2, r6
 8017dd4:	4629      	mov	r1, r5
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	f001 fb56 	bl	8019488 <xTaskCreate>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	2b01      	cmp	r3, #1
 8017de0:	d001      	beq.n	8017de6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8017de2:	2300      	movs	r3, #0
 8017de4:	e000      	b.n	8017de8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8017de6:	68fb      	ldr	r3, [r7, #12]
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	3714      	adds	r7, #20
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017df0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b084      	sub	sp, #16
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d001      	beq.n	8017e06 <osDelay+0x16>
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	e000      	b.n	8017e08 <osDelay+0x18>
 8017e06:	2301      	movs	r3, #1
 8017e08:	4618      	mov	r0, r3
 8017e0a:	f001 fc81 	bl	8019710 <vTaskDelay>
  
  return osOK;
 8017e0e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8017e10:	4618      	mov	r0, r3
 8017e12:	3710      	adds	r7, #16
 8017e14:	46bd      	mov	sp, r7
 8017e16:	bd80      	pop	{r7, pc}

08017e18 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b086      	sub	sp, #24
 8017e1c:	af02      	add	r7, sp, #8
 8017e1e:	6078      	str	r0, [r7, #4]
 8017e20:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	685b      	ldr	r3, [r3, #4]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d016      	beq.n	8017e58 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	2b01      	cmp	r3, #1
 8017e2e:	d10a      	bne.n	8017e46 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	685b      	ldr	r3, [r3, #4]
 8017e34:	2203      	movs	r2, #3
 8017e36:	9200      	str	r2, [sp, #0]
 8017e38:	2200      	movs	r2, #0
 8017e3a:	2100      	movs	r1, #0
 8017e3c:	2001      	movs	r0, #1
 8017e3e:	f000 fad5 	bl	80183ec <xQueueGenericCreateStatic>
 8017e42:	4603      	mov	r3, r0
 8017e44:	e023      	b.n	8017e8e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8017e46:	6838      	ldr	r0, [r7, #0]
 8017e48:	6839      	ldr	r1, [r7, #0]
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	685b      	ldr	r3, [r3, #4]
 8017e4e:	461a      	mov	r2, r3
 8017e50:	f000 fbb5 	bl	80185be <xQueueCreateCountingSemaphoreStatic>
 8017e54:	4603      	mov	r3, r0
 8017e56:	e01a      	b.n	8017e8e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	2b01      	cmp	r3, #1
 8017e5c:	d110      	bne.n	8017e80 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8017e5e:	2203      	movs	r2, #3
 8017e60:	2100      	movs	r1, #0
 8017e62:	2001      	movs	r0, #1
 8017e64:	f000 fb49 	bl	80184fa <xQueueGenericCreate>
 8017e68:	60f8      	str	r0, [r7, #12]
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d005      	beq.n	8017e7c <osSemaphoreCreate+0x64>
 8017e70:	2300      	movs	r3, #0
 8017e72:	2200      	movs	r2, #0
 8017e74:	2100      	movs	r1, #0
 8017e76:	68f8      	ldr	r0, [r7, #12]
 8017e78:	f000 fc18 	bl	80186ac <xQueueGenericSend>
      return sema;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	e006      	b.n	8017e8e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	683a      	ldr	r2, [r7, #0]
 8017e84:	4611      	mov	r1, r2
 8017e86:	4618      	mov	r0, r3
 8017e88:	f000 fbd6 	bl	8018638 <xQueueCreateCountingSemaphore>
 8017e8c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8017e8e:	4618      	mov	r0, r3
 8017e90:	3710      	adds	r7, #16
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}
	...

08017e98 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b084      	sub	sp, #16
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
 8017ea0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d101      	bne.n	8017eb0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8017eac:	2380      	movs	r3, #128	@ 0x80
 8017eae:	e03a      	b.n	8017f26 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017eba:	d103      	bne.n	8017ec4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8017ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8017ec0:	60fb      	str	r3, [r7, #12]
 8017ec2:	e009      	b.n	8017ed8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8017ec4:	683b      	ldr	r3, [r7, #0]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d006      	beq.n	8017ed8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8017eca:	683b      	ldr	r3, [r7, #0]
 8017ecc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d101      	bne.n	8017ed8 <osSemaphoreWait+0x40>
      ticks = 1;
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8017ed8:	f7ff ff09 	bl	8017cee <inHandlerMode>
 8017edc:	4603      	mov	r3, r0
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d017      	beq.n	8017f12 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8017ee2:	f107 0308 	add.w	r3, r7, #8
 8017ee6:	461a      	mov	r2, r3
 8017ee8:	2100      	movs	r1, #0
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f001 f824 	bl	8018f38 <xQueueReceiveFromISR>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	2b01      	cmp	r3, #1
 8017ef4:	d001      	beq.n	8017efa <osSemaphoreWait+0x62>
      return osErrorOS;
 8017ef6:	23ff      	movs	r3, #255	@ 0xff
 8017ef8:	e015      	b.n	8017f26 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8017efa:	68bb      	ldr	r3, [r7, #8]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d011      	beq.n	8017f24 <osSemaphoreWait+0x8c>
 8017f00:	4b0b      	ldr	r3, [pc, #44]	@ (8017f30 <osSemaphoreWait+0x98>)
 8017f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f06:	601a      	str	r2, [r3, #0]
 8017f08:	f3bf 8f4f 	dsb	sy
 8017f0c:	f3bf 8f6f 	isb	sy
 8017f10:	e008      	b.n	8017f24 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8017f12:	68f9      	ldr	r1, [r7, #12]
 8017f14:	6878      	ldr	r0, [r7, #4]
 8017f16:	f000 fef7 	bl	8018d08 <xQueueSemaphoreTake>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b01      	cmp	r3, #1
 8017f1e:	d001      	beq.n	8017f24 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8017f20:	23ff      	movs	r3, #255	@ 0xff
 8017f22:	e000      	b.n	8017f26 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8017f24:	2300      	movs	r3, #0
}
 8017f26:	4618      	mov	r0, r3
 8017f28:	3710      	adds	r7, #16
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}
 8017f2e:	bf00      	nop
 8017f30:	e000ed04 	.word	0xe000ed04

08017f34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b084      	sub	sp, #16
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8017f40:	2300      	movs	r3, #0
 8017f42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8017f44:	f7ff fed3 	bl	8017cee <inHandlerMode>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d016      	beq.n	8017f7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8017f4e:	f107 0308 	add.w	r3, r7, #8
 8017f52:	4619      	mov	r1, r3
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f000 fd56 	bl	8018a06 <xQueueGiveFromISR>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	2b01      	cmp	r3, #1
 8017f5e:	d001      	beq.n	8017f64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8017f60:	23ff      	movs	r3, #255	@ 0xff
 8017f62:	e017      	b.n	8017f94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d013      	beq.n	8017f92 <osSemaphoreRelease+0x5e>
 8017f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8017f9c <osSemaphoreRelease+0x68>)
 8017f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f70:	601a      	str	r2, [r3, #0]
 8017f72:	f3bf 8f4f 	dsb	sy
 8017f76:	f3bf 8f6f 	isb	sy
 8017f7a:	e00a      	b.n	8017f92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	2200      	movs	r2, #0
 8017f80:	2100      	movs	r1, #0
 8017f82:	6878      	ldr	r0, [r7, #4]
 8017f84:	f000 fb92 	bl	80186ac <xQueueGenericSend>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	2b01      	cmp	r3, #1
 8017f8c:	d001      	beq.n	8017f92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8017f8e:	23ff      	movs	r3, #255	@ 0xff
 8017f90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8017f92:	68fb      	ldr	r3, [r7, #12]
}
 8017f94:	4618      	mov	r0, r3
 8017f96:	3710      	adds	r7, #16
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}
 8017f9c:	e000ed04 	.word	0xe000ed04

08017fa0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8017fa8:	f7ff fea1 	bl	8017cee <inHandlerMode>
 8017fac:	4603      	mov	r3, r0
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d001      	beq.n	8017fb6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8017fb2:	2382      	movs	r3, #130	@ 0x82
 8017fb4:	e003      	b.n	8017fbe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f001 f888 	bl	80190cc <vQueueDelete>

  return osOK; 
 8017fbc:	2300      	movs	r3, #0
}
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	3708      	adds	r7, #8
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}

08017fc6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8017fc6:	b590      	push	{r4, r7, lr}
 8017fc8:	b085      	sub	sp, #20
 8017fca:	af02      	add	r7, sp, #8
 8017fcc:	6078      	str	r0, [r7, #4]
 8017fce:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	689b      	ldr	r3, [r3, #8]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d011      	beq.n	8017ffc <osMessageCreate+0x36>
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	68db      	ldr	r3, [r3, #12]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d00d      	beq.n	8017ffc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6818      	ldr	r0, [r3, #0]
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6859      	ldr	r1, [r3, #4]
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	689a      	ldr	r2, [r3, #8]
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	2400      	movs	r4, #0
 8017ff2:	9400      	str	r4, [sp, #0]
 8017ff4:	f000 f9fa 	bl	80183ec <xQueueGenericCreateStatic>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	e008      	b.n	801800e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	6818      	ldr	r0, [r3, #0]
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	685b      	ldr	r3, [r3, #4]
 8018004:	2200      	movs	r2, #0
 8018006:	4619      	mov	r1, r3
 8018008:	f000 fa77 	bl	80184fa <xQueueGenericCreate>
 801800c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801800e:	4618      	mov	r0, r3
 8018010:	370c      	adds	r7, #12
 8018012:	46bd      	mov	sp, r7
 8018014:	bd90      	pop	{r4, r7, pc}
	...

08018018 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b086      	sub	sp, #24
 801801c:	af00      	add	r7, sp, #0
 801801e:	60f8      	str	r0, [r7, #12]
 8018020:	60b9      	str	r1, [r7, #8]
 8018022:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8018024:	2300      	movs	r3, #0
 8018026:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d101      	bne.n	8018036 <osMessagePut+0x1e>
    ticks = 1;
 8018032:	2301      	movs	r3, #1
 8018034:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8018036:	f7ff fe5a 	bl	8017cee <inHandlerMode>
 801803a:	4603      	mov	r3, r0
 801803c:	2b00      	cmp	r3, #0
 801803e:	d018      	beq.n	8018072 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8018040:	f107 0210 	add.w	r2, r7, #16
 8018044:	f107 0108 	add.w	r1, r7, #8
 8018048:	2300      	movs	r3, #0
 801804a:	68f8      	ldr	r0, [r7, #12]
 801804c:	f000 fc38 	bl	80188c0 <xQueueGenericSendFromISR>
 8018050:	4603      	mov	r3, r0
 8018052:	2b01      	cmp	r3, #1
 8018054:	d001      	beq.n	801805a <osMessagePut+0x42>
      return osErrorOS;
 8018056:	23ff      	movs	r3, #255	@ 0xff
 8018058:	e018      	b.n	801808c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d014      	beq.n	801808a <osMessagePut+0x72>
 8018060:	4b0c      	ldr	r3, [pc, #48]	@ (8018094 <osMessagePut+0x7c>)
 8018062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018066:	601a      	str	r2, [r3, #0]
 8018068:	f3bf 8f4f 	dsb	sy
 801806c:	f3bf 8f6f 	isb	sy
 8018070:	e00b      	b.n	801808a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8018072:	f107 0108 	add.w	r1, r7, #8
 8018076:	2300      	movs	r3, #0
 8018078:	697a      	ldr	r2, [r7, #20]
 801807a:	68f8      	ldr	r0, [r7, #12]
 801807c:	f000 fb16 	bl	80186ac <xQueueGenericSend>
 8018080:	4603      	mov	r3, r0
 8018082:	2b01      	cmp	r3, #1
 8018084:	d001      	beq.n	801808a <osMessagePut+0x72>
      return osErrorOS;
 8018086:	23ff      	movs	r3, #255	@ 0xff
 8018088:	e000      	b.n	801808c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801808a:	2300      	movs	r3, #0
}
 801808c:	4618      	mov	r0, r3
 801808e:	3718      	adds	r7, #24
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}
 8018094:	e000ed04 	.word	0xe000ed04

08018098 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8018098:	b590      	push	{r4, r7, lr}
 801809a:	b08b      	sub	sp, #44	@ 0x2c
 801809c:	af00      	add	r7, sp, #0
 801809e:	60f8      	str	r0, [r7, #12]
 80180a0:	60b9      	str	r1, [r7, #8]
 80180a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80180a8:	2300      	movs	r3, #0
 80180aa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d10a      	bne.n	80180c8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80180b2:	2380      	movs	r3, #128	@ 0x80
 80180b4:	617b      	str	r3, [r7, #20]
    return event;
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	461c      	mov	r4, r3
 80180ba:	f107 0314 	add.w	r3, r7, #20
 80180be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80180c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80180c6:	e054      	b.n	8018172 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80180c8:	2300      	movs	r3, #0
 80180ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80180cc:	2300      	movs	r3, #0
 80180ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180d6:	d103      	bne.n	80180e0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80180d8:	f04f 33ff 	mov.w	r3, #4294967295
 80180dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80180de:	e009      	b.n	80180f4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d006      	beq.n	80180f4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80180ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d101      	bne.n	80180f4 <osMessageGet+0x5c>
      ticks = 1;
 80180f0:	2301      	movs	r3, #1
 80180f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80180f4:	f7ff fdfb 	bl	8017cee <inHandlerMode>
 80180f8:	4603      	mov	r3, r0
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d01c      	beq.n	8018138 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80180fe:	f107 0220 	add.w	r2, r7, #32
 8018102:	f107 0314 	add.w	r3, r7, #20
 8018106:	3304      	adds	r3, #4
 8018108:	4619      	mov	r1, r3
 801810a:	68b8      	ldr	r0, [r7, #8]
 801810c:	f000 ff14 	bl	8018f38 <xQueueReceiveFromISR>
 8018110:	4603      	mov	r3, r0
 8018112:	2b01      	cmp	r3, #1
 8018114:	d102      	bne.n	801811c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8018116:	2310      	movs	r3, #16
 8018118:	617b      	str	r3, [r7, #20]
 801811a:	e001      	b.n	8018120 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801811c:	2300      	movs	r3, #0
 801811e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018120:	6a3b      	ldr	r3, [r7, #32]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d01d      	beq.n	8018162 <osMessageGet+0xca>
 8018126:	4b15      	ldr	r3, [pc, #84]	@ (801817c <osMessageGet+0xe4>)
 8018128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801812c:	601a      	str	r2, [r3, #0]
 801812e:	f3bf 8f4f 	dsb	sy
 8018132:	f3bf 8f6f 	isb	sy
 8018136:	e014      	b.n	8018162 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8018138:	f107 0314 	add.w	r3, r7, #20
 801813c:	3304      	adds	r3, #4
 801813e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018140:	4619      	mov	r1, r3
 8018142:	68b8      	ldr	r0, [r7, #8]
 8018144:	f000 fcf8 	bl	8018b38 <xQueueReceive>
 8018148:	4603      	mov	r3, r0
 801814a:	2b01      	cmp	r3, #1
 801814c:	d102      	bne.n	8018154 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801814e:	2310      	movs	r3, #16
 8018150:	617b      	str	r3, [r7, #20]
 8018152:	e006      	b.n	8018162 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8018154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018156:	2b00      	cmp	r3, #0
 8018158:	d101      	bne.n	801815e <osMessageGet+0xc6>
 801815a:	2300      	movs	r3, #0
 801815c:	e000      	b.n	8018160 <osMessageGet+0xc8>
 801815e:	2340      	movs	r3, #64	@ 0x40
 8018160:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	461c      	mov	r4, r3
 8018166:	f107 0314 	add.w	r3, r7, #20
 801816a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801816e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018172:	68f8      	ldr	r0, [r7, #12]
 8018174:	372c      	adds	r7, #44	@ 0x2c
 8018176:	46bd      	mov	sp, r7
 8018178:	bd90      	pop	{r4, r7, pc}
 801817a:	bf00      	nop
 801817c:	e000ed04 	.word	0xe000ed04

08018180 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b082      	sub	sp, #8
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8018188:	f7ff fdb1 	bl	8017cee <inHandlerMode>
 801818c:	4603      	mov	r3, r0
 801818e:	2b00      	cmp	r3, #0
 8018190:	d004      	beq.n	801819c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8018192:	6878      	ldr	r0, [r7, #4]
 8018194:	f000 ff79 	bl	801908a <uxQueueMessagesWaitingFromISR>
 8018198:	4603      	mov	r3, r0
 801819a:	e003      	b.n	80181a4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f000 ff53 	bl	8019048 <uxQueueMessagesWaiting>
 80181a2:	4603      	mov	r3, r0
  }
}
 80181a4:	4618      	mov	r0, r3
 80181a6:	3708      	adds	r7, #8
 80181a8:	46bd      	mov	sp, r7
 80181aa:	bd80      	pop	{r7, pc}

080181ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80181ac:	b480      	push	{r7}
 80181ae:	b083      	sub	sp, #12
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f103 0208 	add.w	r2, r3, #8
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f04f 32ff 	mov.w	r2, #4294967295
 80181c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	f103 0208 	add.w	r2, r3, #8
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f103 0208 	add.w	r2, r3, #8
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2200      	movs	r2, #0
 80181de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80181e0:	bf00      	nop
 80181e2:	370c      	adds	r7, #12
 80181e4:	46bd      	mov	sp, r7
 80181e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ea:	4770      	bx	lr

080181ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80181ec:	b480      	push	{r7}
 80181ee:	b083      	sub	sp, #12
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	2200      	movs	r2, #0
 80181f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80181fa:	bf00      	nop
 80181fc:	370c      	adds	r7, #12
 80181fe:	46bd      	mov	sp, r7
 8018200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018204:	4770      	bx	lr

08018206 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018206:	b480      	push	{r7}
 8018208:	b085      	sub	sp, #20
 801820a:	af00      	add	r7, sp, #0
 801820c:	6078      	str	r0, [r7, #4]
 801820e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	685b      	ldr	r3, [r3, #4]
 8018214:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018216:	683b      	ldr	r3, [r7, #0]
 8018218:	68fa      	ldr	r2, [r7, #12]
 801821a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	689a      	ldr	r2, [r3, #8]
 8018220:	683b      	ldr	r3, [r7, #0]
 8018222:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	689b      	ldr	r3, [r3, #8]
 8018228:	683a      	ldr	r2, [r7, #0]
 801822a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	683a      	ldr	r2, [r7, #0]
 8018230:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018232:	683b      	ldr	r3, [r7, #0]
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	1c5a      	adds	r2, r3, #1
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	601a      	str	r2, [r3, #0]
}
 8018242:	bf00      	nop
 8018244:	3714      	adds	r7, #20
 8018246:	46bd      	mov	sp, r7
 8018248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824c:	4770      	bx	lr

0801824e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801824e:	b480      	push	{r7}
 8018250:	b085      	sub	sp, #20
 8018252:	af00      	add	r7, sp, #0
 8018254:	6078      	str	r0, [r7, #4]
 8018256:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801825e:	68bb      	ldr	r3, [r7, #8]
 8018260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018264:	d103      	bne.n	801826e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	691b      	ldr	r3, [r3, #16]
 801826a:	60fb      	str	r3, [r7, #12]
 801826c:	e00c      	b.n	8018288 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	3308      	adds	r3, #8
 8018272:	60fb      	str	r3, [r7, #12]
 8018274:	e002      	b.n	801827c <vListInsert+0x2e>
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	685b      	ldr	r3, [r3, #4]
 801827a:	60fb      	str	r3, [r7, #12]
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	685b      	ldr	r3, [r3, #4]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	68ba      	ldr	r2, [r7, #8]
 8018284:	429a      	cmp	r2, r3
 8018286:	d2f6      	bcs.n	8018276 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	685a      	ldr	r2, [r3, #4]
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	685b      	ldr	r3, [r3, #4]
 8018294:	683a      	ldr	r2, [r7, #0]
 8018296:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018298:	683b      	ldr	r3, [r7, #0]
 801829a:	68fa      	ldr	r2, [r7, #12]
 801829c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	683a      	ldr	r2, [r7, #0]
 80182a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80182a4:	683b      	ldr	r3, [r7, #0]
 80182a6:	687a      	ldr	r2, [r7, #4]
 80182a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	1c5a      	adds	r2, r3, #1
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	601a      	str	r2, [r3, #0]
}
 80182b4:	bf00      	nop
 80182b6:	3714      	adds	r7, #20
 80182b8:	46bd      	mov	sp, r7
 80182ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182be:	4770      	bx	lr

080182c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80182c0:	b480      	push	{r7}
 80182c2:	b085      	sub	sp, #20
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	691b      	ldr	r3, [r3, #16]
 80182cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	685b      	ldr	r3, [r3, #4]
 80182d2:	687a      	ldr	r2, [r7, #4]
 80182d4:	6892      	ldr	r2, [r2, #8]
 80182d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	689b      	ldr	r3, [r3, #8]
 80182dc:	687a      	ldr	r2, [r7, #4]
 80182de:	6852      	ldr	r2, [r2, #4]
 80182e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	687a      	ldr	r2, [r7, #4]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d103      	bne.n	80182f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	689a      	ldr	r2, [r3, #8]
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2200      	movs	r2, #0
 80182f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	1e5a      	subs	r2, r3, #1
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	681b      	ldr	r3, [r3, #0]
}
 8018308:	4618      	mov	r0, r3
 801830a:	3714      	adds	r7, #20
 801830c:	46bd      	mov	sp, r7
 801830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018312:	4770      	bx	lr

08018314 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b084      	sub	sp, #16
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d10d      	bne.n	8018344 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801832c:	b672      	cpsid	i
 801832e:	f383 8811 	msr	BASEPRI, r3
 8018332:	f3bf 8f6f 	isb	sy
 8018336:	f3bf 8f4f 	dsb	sy
 801833a:	b662      	cpsie	i
 801833c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801833e:	bf00      	nop
 8018340:	bf00      	nop
 8018342:	e7fd      	b.n	8018340 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8018344:	f002 f9da 	bl	801a6fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	681a      	ldr	r2, [r3, #0]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018350:	68f9      	ldr	r1, [r7, #12]
 8018352:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018354:	fb01 f303 	mul.w	r3, r1, r3
 8018358:	441a      	add	r2, r3
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	2200      	movs	r2, #0
 8018362:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	681a      	ldr	r2, [r3, #0]
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	681a      	ldr	r2, [r3, #0]
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018374:	3b01      	subs	r3, #1
 8018376:	68f9      	ldr	r1, [r7, #12]
 8018378:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801837a:	fb01 f303 	mul.w	r3, r1, r3
 801837e:	441a      	add	r2, r3
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	22ff      	movs	r2, #255	@ 0xff
 8018388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	22ff      	movs	r2, #255	@ 0xff
 8018390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d114      	bne.n	80183c4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	691b      	ldr	r3, [r3, #16]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d01a      	beq.n	80183d8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	3310      	adds	r3, #16
 80183a6:	4618      	mov	r0, r3
 80183a8:	f001 fc88 	bl	8019cbc <xTaskRemoveFromEventList>
 80183ac:	4603      	mov	r3, r0
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d012      	beq.n	80183d8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80183b2:	4b0d      	ldr	r3, [pc, #52]	@ (80183e8 <xQueueGenericReset+0xd4>)
 80183b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80183b8:	601a      	str	r2, [r3, #0]
 80183ba:	f3bf 8f4f 	dsb	sy
 80183be:	f3bf 8f6f 	isb	sy
 80183c2:	e009      	b.n	80183d8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	3310      	adds	r3, #16
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7ff feef 	bl	80181ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	3324      	adds	r3, #36	@ 0x24
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7ff feea 	bl	80181ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80183d8:	f002 f9c6 	bl	801a768 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80183dc:	2301      	movs	r3, #1
}
 80183de:	4618      	mov	r0, r3
 80183e0:	3710      	adds	r7, #16
 80183e2:	46bd      	mov	sp, r7
 80183e4:	bd80      	pop	{r7, pc}
 80183e6:	bf00      	nop
 80183e8:	e000ed04 	.word	0xe000ed04

080183ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b08e      	sub	sp, #56	@ 0x38
 80183f0:	af02      	add	r7, sp, #8
 80183f2:	60f8      	str	r0, [r7, #12]
 80183f4:	60b9      	str	r1, [r7, #8]
 80183f6:	607a      	str	r2, [r7, #4]
 80183f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d10d      	bne.n	801841c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8018400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018404:	b672      	cpsid	i
 8018406:	f383 8811 	msr	BASEPRI, r3
 801840a:	f3bf 8f6f 	isb	sy
 801840e:	f3bf 8f4f 	dsb	sy
 8018412:	b662      	cpsie	i
 8018414:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018416:	bf00      	nop
 8018418:	bf00      	nop
 801841a:	e7fd      	b.n	8018418 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d10d      	bne.n	801843e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8018422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018426:	b672      	cpsid	i
 8018428:	f383 8811 	msr	BASEPRI, r3
 801842c:	f3bf 8f6f 	isb	sy
 8018430:	f3bf 8f4f 	dsb	sy
 8018434:	b662      	cpsie	i
 8018436:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018438:	bf00      	nop
 801843a:	bf00      	nop
 801843c:	e7fd      	b.n	801843a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d002      	beq.n	801844a <xQueueGenericCreateStatic+0x5e>
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d001      	beq.n	801844e <xQueueGenericCreateStatic+0x62>
 801844a:	2301      	movs	r3, #1
 801844c:	e000      	b.n	8018450 <xQueueGenericCreateStatic+0x64>
 801844e:	2300      	movs	r3, #0
 8018450:	2b00      	cmp	r3, #0
 8018452:	d10d      	bne.n	8018470 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8018454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018458:	b672      	cpsid	i
 801845a:	f383 8811 	msr	BASEPRI, r3
 801845e:	f3bf 8f6f 	isb	sy
 8018462:	f3bf 8f4f 	dsb	sy
 8018466:	b662      	cpsie	i
 8018468:	623b      	str	r3, [r7, #32]
}
 801846a:	bf00      	nop
 801846c:	bf00      	nop
 801846e:	e7fd      	b.n	801846c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d102      	bne.n	801847c <xQueueGenericCreateStatic+0x90>
 8018476:	68bb      	ldr	r3, [r7, #8]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d101      	bne.n	8018480 <xQueueGenericCreateStatic+0x94>
 801847c:	2301      	movs	r3, #1
 801847e:	e000      	b.n	8018482 <xQueueGenericCreateStatic+0x96>
 8018480:	2300      	movs	r3, #0
 8018482:	2b00      	cmp	r3, #0
 8018484:	d10d      	bne.n	80184a2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8018486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801848a:	b672      	cpsid	i
 801848c:	f383 8811 	msr	BASEPRI, r3
 8018490:	f3bf 8f6f 	isb	sy
 8018494:	f3bf 8f4f 	dsb	sy
 8018498:	b662      	cpsie	i
 801849a:	61fb      	str	r3, [r7, #28]
}
 801849c:	bf00      	nop
 801849e:	bf00      	nop
 80184a0:	e7fd      	b.n	801849e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80184a2:	2348      	movs	r3, #72	@ 0x48
 80184a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	2b48      	cmp	r3, #72	@ 0x48
 80184aa:	d00d      	beq.n	80184c8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80184ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184b0:	b672      	cpsid	i
 80184b2:	f383 8811 	msr	BASEPRI, r3
 80184b6:	f3bf 8f6f 	isb	sy
 80184ba:	f3bf 8f4f 	dsb	sy
 80184be:	b662      	cpsie	i
 80184c0:	61bb      	str	r3, [r7, #24]
}
 80184c2:	bf00      	nop
 80184c4:	bf00      	nop
 80184c6:	e7fd      	b.n	80184c4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80184c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80184ca:	683b      	ldr	r3, [r7, #0]
 80184cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80184ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d00d      	beq.n	80184f0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80184d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184d6:	2201      	movs	r2, #1
 80184d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80184dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80184e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184e2:	9300      	str	r3, [sp, #0]
 80184e4:	4613      	mov	r3, r2
 80184e6:	687a      	ldr	r2, [r7, #4]
 80184e8:	68b9      	ldr	r1, [r7, #8]
 80184ea:	68f8      	ldr	r0, [r7, #12]
 80184ec:	f000 f848 	bl	8018580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80184f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80184f2:	4618      	mov	r0, r3
 80184f4:	3730      	adds	r7, #48	@ 0x30
 80184f6:	46bd      	mov	sp, r7
 80184f8:	bd80      	pop	{r7, pc}

080184fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80184fa:	b580      	push	{r7, lr}
 80184fc:	b08a      	sub	sp, #40	@ 0x28
 80184fe:	af02      	add	r7, sp, #8
 8018500:	60f8      	str	r0, [r7, #12]
 8018502:	60b9      	str	r1, [r7, #8]
 8018504:	4613      	mov	r3, r2
 8018506:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d10d      	bne.n	801852a <xQueueGenericCreate+0x30>
	__asm volatile
 801850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018512:	b672      	cpsid	i
 8018514:	f383 8811 	msr	BASEPRI, r3
 8018518:	f3bf 8f6f 	isb	sy
 801851c:	f3bf 8f4f 	dsb	sy
 8018520:	b662      	cpsie	i
 8018522:	613b      	str	r3, [r7, #16]
}
 8018524:	bf00      	nop
 8018526:	bf00      	nop
 8018528:	e7fd      	b.n	8018526 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801852a:	68bb      	ldr	r3, [r7, #8]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d102      	bne.n	8018536 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018530:	2300      	movs	r3, #0
 8018532:	61fb      	str	r3, [r7, #28]
 8018534:	e004      	b.n	8018540 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	68ba      	ldr	r2, [r7, #8]
 801853a:	fb02 f303 	mul.w	r3, r2, r3
 801853e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018540:	69fb      	ldr	r3, [r7, #28]
 8018542:	3348      	adds	r3, #72	@ 0x48
 8018544:	4618      	mov	r0, r3
 8018546:	f002 fa07 	bl	801a958 <pvPortMalloc>
 801854a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801854c:	69bb      	ldr	r3, [r7, #24]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d011      	beq.n	8018576 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018552:	69bb      	ldr	r3, [r7, #24]
 8018554:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018556:	697b      	ldr	r3, [r7, #20]
 8018558:	3348      	adds	r3, #72	@ 0x48
 801855a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801855c:	69bb      	ldr	r3, [r7, #24]
 801855e:	2200      	movs	r2, #0
 8018560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018564:	79fa      	ldrb	r2, [r7, #7]
 8018566:	69bb      	ldr	r3, [r7, #24]
 8018568:	9300      	str	r3, [sp, #0]
 801856a:	4613      	mov	r3, r2
 801856c:	697a      	ldr	r2, [r7, #20]
 801856e:	68b9      	ldr	r1, [r7, #8]
 8018570:	68f8      	ldr	r0, [r7, #12]
 8018572:	f000 f805 	bl	8018580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018576:	69bb      	ldr	r3, [r7, #24]
	}
 8018578:	4618      	mov	r0, r3
 801857a:	3720      	adds	r7, #32
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}

08018580 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b084      	sub	sp, #16
 8018584:	af00      	add	r7, sp, #0
 8018586:	60f8      	str	r0, [r7, #12]
 8018588:	60b9      	str	r1, [r7, #8]
 801858a:	607a      	str	r2, [r7, #4]
 801858c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801858e:	68bb      	ldr	r3, [r7, #8]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d103      	bne.n	801859c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018594:	69bb      	ldr	r3, [r7, #24]
 8018596:	69ba      	ldr	r2, [r7, #24]
 8018598:	601a      	str	r2, [r3, #0]
 801859a:	e002      	b.n	80185a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801859c:	69bb      	ldr	r3, [r7, #24]
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80185a2:	69bb      	ldr	r3, [r7, #24]
 80185a4:	68fa      	ldr	r2, [r7, #12]
 80185a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80185a8:	69bb      	ldr	r3, [r7, #24]
 80185aa:	68ba      	ldr	r2, [r7, #8]
 80185ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80185ae:	2101      	movs	r1, #1
 80185b0:	69b8      	ldr	r0, [r7, #24]
 80185b2:	f7ff feaf 	bl	8018314 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80185b6:	bf00      	nop
 80185b8:	3710      	adds	r7, #16
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bd80      	pop	{r7, pc}

080185be <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80185be:	b580      	push	{r7, lr}
 80185c0:	b08a      	sub	sp, #40	@ 0x28
 80185c2:	af02      	add	r7, sp, #8
 80185c4:	60f8      	str	r0, [r7, #12]
 80185c6:	60b9      	str	r1, [r7, #8]
 80185c8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d10d      	bne.n	80185ec <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80185d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185d4:	b672      	cpsid	i
 80185d6:	f383 8811 	msr	BASEPRI, r3
 80185da:	f3bf 8f6f 	isb	sy
 80185de:	f3bf 8f4f 	dsb	sy
 80185e2:	b662      	cpsie	i
 80185e4:	61bb      	str	r3, [r7, #24]
}
 80185e6:	bf00      	nop
 80185e8:	bf00      	nop
 80185ea:	e7fd      	b.n	80185e8 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80185ec:	68ba      	ldr	r2, [r7, #8]
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d90d      	bls.n	8018610 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 80185f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185f8:	b672      	cpsid	i
 80185fa:	f383 8811 	msr	BASEPRI, r3
 80185fe:	f3bf 8f6f 	isb	sy
 8018602:	f3bf 8f4f 	dsb	sy
 8018606:	b662      	cpsie	i
 8018608:	617b      	str	r3, [r7, #20]
}
 801860a:	bf00      	nop
 801860c:	bf00      	nop
 801860e:	e7fd      	b.n	801860c <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018610:	2302      	movs	r3, #2
 8018612:	9300      	str	r3, [sp, #0]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	2200      	movs	r2, #0
 8018618:	2100      	movs	r1, #0
 801861a:	68f8      	ldr	r0, [r7, #12]
 801861c:	f7ff fee6 	bl	80183ec <xQueueGenericCreateStatic>
 8018620:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8018622:	69fb      	ldr	r3, [r7, #28]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d002      	beq.n	801862e <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018628:	69fb      	ldr	r3, [r7, #28]
 801862a:	68ba      	ldr	r2, [r7, #8]
 801862c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801862e:	69fb      	ldr	r3, [r7, #28]
	}
 8018630:	4618      	mov	r0, r3
 8018632:	3720      	adds	r7, #32
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}

08018638 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8018638:	b580      	push	{r7, lr}
 801863a:	b086      	sub	sp, #24
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d10d      	bne.n	8018664 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8018648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801864c:	b672      	cpsid	i
 801864e:	f383 8811 	msr	BASEPRI, r3
 8018652:	f3bf 8f6f 	isb	sy
 8018656:	f3bf 8f4f 	dsb	sy
 801865a:	b662      	cpsie	i
 801865c:	613b      	str	r3, [r7, #16]
}
 801865e:	bf00      	nop
 8018660:	bf00      	nop
 8018662:	e7fd      	b.n	8018660 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018664:	683a      	ldr	r2, [r7, #0]
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	429a      	cmp	r2, r3
 801866a:	d90d      	bls.n	8018688 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 801866c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018670:	b672      	cpsid	i
 8018672:	f383 8811 	msr	BASEPRI, r3
 8018676:	f3bf 8f6f 	isb	sy
 801867a:	f3bf 8f4f 	dsb	sy
 801867e:	b662      	cpsie	i
 8018680:	60fb      	str	r3, [r7, #12]
}
 8018682:	bf00      	nop
 8018684:	bf00      	nop
 8018686:	e7fd      	b.n	8018684 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018688:	2202      	movs	r2, #2
 801868a:	2100      	movs	r1, #0
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f7ff ff34 	bl	80184fa <xQueueGenericCreate>
 8018692:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8018694:	697b      	ldr	r3, [r7, #20]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d002      	beq.n	80186a0 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801869a:	697b      	ldr	r3, [r7, #20]
 801869c:	683a      	ldr	r2, [r7, #0]
 801869e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80186a0:	697b      	ldr	r3, [r7, #20]
	}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3718      	adds	r7, #24
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bd80      	pop	{r7, pc}
	...

080186ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b08e      	sub	sp, #56	@ 0x38
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	60f8      	str	r0, [r7, #12]
 80186b4:	60b9      	str	r1, [r7, #8]
 80186b6:	607a      	str	r2, [r7, #4]
 80186b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80186ba:	2300      	movs	r3, #0
 80186bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80186c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d10d      	bne.n	80186e4 <xQueueGenericSend+0x38>
	__asm volatile
 80186c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186cc:	b672      	cpsid	i
 80186ce:	f383 8811 	msr	BASEPRI, r3
 80186d2:	f3bf 8f6f 	isb	sy
 80186d6:	f3bf 8f4f 	dsb	sy
 80186da:	b662      	cpsie	i
 80186dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80186de:	bf00      	nop
 80186e0:	bf00      	nop
 80186e2:	e7fd      	b.n	80186e0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d103      	bne.n	80186f2 <xQueueGenericSend+0x46>
 80186ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d101      	bne.n	80186f6 <xQueueGenericSend+0x4a>
 80186f2:	2301      	movs	r3, #1
 80186f4:	e000      	b.n	80186f8 <xQueueGenericSend+0x4c>
 80186f6:	2300      	movs	r3, #0
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d10d      	bne.n	8018718 <xQueueGenericSend+0x6c>
	__asm volatile
 80186fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018700:	b672      	cpsid	i
 8018702:	f383 8811 	msr	BASEPRI, r3
 8018706:	f3bf 8f6f 	isb	sy
 801870a:	f3bf 8f4f 	dsb	sy
 801870e:	b662      	cpsie	i
 8018710:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018712:	bf00      	nop
 8018714:	bf00      	nop
 8018716:	e7fd      	b.n	8018714 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018718:	683b      	ldr	r3, [r7, #0]
 801871a:	2b02      	cmp	r3, #2
 801871c:	d103      	bne.n	8018726 <xQueueGenericSend+0x7a>
 801871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018722:	2b01      	cmp	r3, #1
 8018724:	d101      	bne.n	801872a <xQueueGenericSend+0x7e>
 8018726:	2301      	movs	r3, #1
 8018728:	e000      	b.n	801872c <xQueueGenericSend+0x80>
 801872a:	2300      	movs	r3, #0
 801872c:	2b00      	cmp	r3, #0
 801872e:	d10d      	bne.n	801874c <xQueueGenericSend+0xa0>
	__asm volatile
 8018730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018734:	b672      	cpsid	i
 8018736:	f383 8811 	msr	BASEPRI, r3
 801873a:	f3bf 8f6f 	isb	sy
 801873e:	f3bf 8f4f 	dsb	sy
 8018742:	b662      	cpsie	i
 8018744:	623b      	str	r3, [r7, #32]
}
 8018746:	bf00      	nop
 8018748:	bf00      	nop
 801874a:	e7fd      	b.n	8018748 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801874c:	f001 fc80 	bl	801a050 <xTaskGetSchedulerState>
 8018750:	4603      	mov	r3, r0
 8018752:	2b00      	cmp	r3, #0
 8018754:	d102      	bne.n	801875c <xQueueGenericSend+0xb0>
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d101      	bne.n	8018760 <xQueueGenericSend+0xb4>
 801875c:	2301      	movs	r3, #1
 801875e:	e000      	b.n	8018762 <xQueueGenericSend+0xb6>
 8018760:	2300      	movs	r3, #0
 8018762:	2b00      	cmp	r3, #0
 8018764:	d10d      	bne.n	8018782 <xQueueGenericSend+0xd6>
	__asm volatile
 8018766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801876a:	b672      	cpsid	i
 801876c:	f383 8811 	msr	BASEPRI, r3
 8018770:	f3bf 8f6f 	isb	sy
 8018774:	f3bf 8f4f 	dsb	sy
 8018778:	b662      	cpsie	i
 801877a:	61fb      	str	r3, [r7, #28]
}
 801877c:	bf00      	nop
 801877e:	bf00      	nop
 8018780:	e7fd      	b.n	801877e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018782:	f001 ffbb 	bl	801a6fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801878c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801878e:	429a      	cmp	r2, r3
 8018790:	d302      	bcc.n	8018798 <xQueueGenericSend+0xec>
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	2b02      	cmp	r3, #2
 8018796:	d129      	bne.n	80187ec <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018798:	683a      	ldr	r2, [r7, #0]
 801879a:	68b9      	ldr	r1, [r7, #8]
 801879c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801879e:	f000 fcd3 	bl	8019148 <prvCopyDataToQueue>
 80187a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80187a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d010      	beq.n	80187ce <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80187ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187ae:	3324      	adds	r3, #36	@ 0x24
 80187b0:	4618      	mov	r0, r3
 80187b2:	f001 fa83 	bl	8019cbc <xTaskRemoveFromEventList>
 80187b6:	4603      	mov	r3, r0
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d013      	beq.n	80187e4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80187bc:	4b3f      	ldr	r3, [pc, #252]	@ (80188bc <xQueueGenericSend+0x210>)
 80187be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80187c2:	601a      	str	r2, [r3, #0]
 80187c4:	f3bf 8f4f 	dsb	sy
 80187c8:	f3bf 8f6f 	isb	sy
 80187cc:	e00a      	b.n	80187e4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80187ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d007      	beq.n	80187e4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80187d4:	4b39      	ldr	r3, [pc, #228]	@ (80188bc <xQueueGenericSend+0x210>)
 80187d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80187da:	601a      	str	r2, [r3, #0]
 80187dc:	f3bf 8f4f 	dsb	sy
 80187e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80187e4:	f001 ffc0 	bl	801a768 <vPortExitCritical>
				return pdPASS;
 80187e8:	2301      	movs	r3, #1
 80187ea:	e063      	b.n	80188b4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d103      	bne.n	80187fa <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80187f2:	f001 ffb9 	bl	801a768 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80187f6:	2300      	movs	r3, #0
 80187f8:	e05c      	b.n	80188b4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80187fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d106      	bne.n	801880e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018800:	f107 0314 	add.w	r3, r7, #20
 8018804:	4618      	mov	r0, r3
 8018806:	f001 fabf 	bl	8019d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801880a:	2301      	movs	r3, #1
 801880c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801880e:	f001 ffab 	bl	801a768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018812:	f001 f81b 	bl	801984c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018816:	f001 ff71 	bl	801a6fc <vPortEnterCritical>
 801881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801881c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018820:	b25b      	sxtb	r3, r3
 8018822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018826:	d103      	bne.n	8018830 <xQueueGenericSend+0x184>
 8018828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801882a:	2200      	movs	r2, #0
 801882c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018832:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018836:	b25b      	sxtb	r3, r3
 8018838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801883c:	d103      	bne.n	8018846 <xQueueGenericSend+0x19a>
 801883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018840:	2200      	movs	r2, #0
 8018842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018846:	f001 ff8f 	bl	801a768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801884a:	1d3a      	adds	r2, r7, #4
 801884c:	f107 0314 	add.w	r3, r7, #20
 8018850:	4611      	mov	r1, r2
 8018852:	4618      	mov	r0, r3
 8018854:	f001 faae 	bl	8019db4 <xTaskCheckForTimeOut>
 8018858:	4603      	mov	r3, r0
 801885a:	2b00      	cmp	r3, #0
 801885c:	d124      	bne.n	80188a8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801885e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018860:	f000 fd6a 	bl	8019338 <prvIsQueueFull>
 8018864:	4603      	mov	r3, r0
 8018866:	2b00      	cmp	r3, #0
 8018868:	d018      	beq.n	801889c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801886c:	3310      	adds	r3, #16
 801886e:	687a      	ldr	r2, [r7, #4]
 8018870:	4611      	mov	r1, r2
 8018872:	4618      	mov	r0, r3
 8018874:	f001 f9fa 	bl	8019c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801887a:	f000 fcf5 	bl	8019268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801887e:	f000 fff3 	bl	8019868 <xTaskResumeAll>
 8018882:	4603      	mov	r3, r0
 8018884:	2b00      	cmp	r3, #0
 8018886:	f47f af7c 	bne.w	8018782 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801888a:	4b0c      	ldr	r3, [pc, #48]	@ (80188bc <xQueueGenericSend+0x210>)
 801888c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018890:	601a      	str	r2, [r3, #0]
 8018892:	f3bf 8f4f 	dsb	sy
 8018896:	f3bf 8f6f 	isb	sy
 801889a:	e772      	b.n	8018782 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801889c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801889e:	f000 fce3 	bl	8019268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80188a2:	f000 ffe1 	bl	8019868 <xTaskResumeAll>
 80188a6:	e76c      	b.n	8018782 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80188a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80188aa:	f000 fcdd 	bl	8019268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80188ae:	f000 ffdb 	bl	8019868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80188b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80188b4:	4618      	mov	r0, r3
 80188b6:	3738      	adds	r7, #56	@ 0x38
 80188b8:	46bd      	mov	sp, r7
 80188ba:	bd80      	pop	{r7, pc}
 80188bc:	e000ed04 	.word	0xe000ed04

080188c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b08e      	sub	sp, #56	@ 0x38
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	60f8      	str	r0, [r7, #12]
 80188c8:	60b9      	str	r1, [r7, #8]
 80188ca:	607a      	str	r2, [r7, #4]
 80188cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80188d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d10d      	bne.n	80188f4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80188d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188dc:	b672      	cpsid	i
 80188de:	f383 8811 	msr	BASEPRI, r3
 80188e2:	f3bf 8f6f 	isb	sy
 80188e6:	f3bf 8f4f 	dsb	sy
 80188ea:	b662      	cpsie	i
 80188ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80188ee:	bf00      	nop
 80188f0:	bf00      	nop
 80188f2:	e7fd      	b.n	80188f0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d103      	bne.n	8018902 <xQueueGenericSendFromISR+0x42>
 80188fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d101      	bne.n	8018906 <xQueueGenericSendFromISR+0x46>
 8018902:	2301      	movs	r3, #1
 8018904:	e000      	b.n	8018908 <xQueueGenericSendFromISR+0x48>
 8018906:	2300      	movs	r3, #0
 8018908:	2b00      	cmp	r3, #0
 801890a:	d10d      	bne.n	8018928 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 801890c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018910:	b672      	cpsid	i
 8018912:	f383 8811 	msr	BASEPRI, r3
 8018916:	f3bf 8f6f 	isb	sy
 801891a:	f3bf 8f4f 	dsb	sy
 801891e:	b662      	cpsie	i
 8018920:	623b      	str	r3, [r7, #32]
}
 8018922:	bf00      	nop
 8018924:	bf00      	nop
 8018926:	e7fd      	b.n	8018924 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	2b02      	cmp	r3, #2
 801892c:	d103      	bne.n	8018936 <xQueueGenericSendFromISR+0x76>
 801892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018932:	2b01      	cmp	r3, #1
 8018934:	d101      	bne.n	801893a <xQueueGenericSendFromISR+0x7a>
 8018936:	2301      	movs	r3, #1
 8018938:	e000      	b.n	801893c <xQueueGenericSendFromISR+0x7c>
 801893a:	2300      	movs	r3, #0
 801893c:	2b00      	cmp	r3, #0
 801893e:	d10d      	bne.n	801895c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8018940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018944:	b672      	cpsid	i
 8018946:	f383 8811 	msr	BASEPRI, r3
 801894a:	f3bf 8f6f 	isb	sy
 801894e:	f3bf 8f4f 	dsb	sy
 8018952:	b662      	cpsie	i
 8018954:	61fb      	str	r3, [r7, #28]
}
 8018956:	bf00      	nop
 8018958:	bf00      	nop
 801895a:	e7fd      	b.n	8018958 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801895c:	f001 ffb6 	bl	801a8cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018960:	f3ef 8211 	mrs	r2, BASEPRI
 8018964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018968:	b672      	cpsid	i
 801896a:	f383 8811 	msr	BASEPRI, r3
 801896e:	f3bf 8f6f 	isb	sy
 8018972:	f3bf 8f4f 	dsb	sy
 8018976:	b662      	cpsie	i
 8018978:	61ba      	str	r2, [r7, #24]
 801897a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801897c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801897e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018988:	429a      	cmp	r2, r3
 801898a:	d302      	bcc.n	8018992 <xQueueGenericSendFromISR+0xd2>
 801898c:	683b      	ldr	r3, [r7, #0]
 801898e:	2b02      	cmp	r3, #2
 8018990:	d12c      	bne.n	80189ec <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018994:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801899c:	683a      	ldr	r2, [r7, #0]
 801899e:	68b9      	ldr	r1, [r7, #8]
 80189a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80189a2:	f000 fbd1 	bl	8019148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80189a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80189aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189ae:	d112      	bne.n	80189d6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80189b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d016      	beq.n	80189e6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80189b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189ba:	3324      	adds	r3, #36	@ 0x24
 80189bc:	4618      	mov	r0, r3
 80189be:	f001 f97d 	bl	8019cbc <xTaskRemoveFromEventList>
 80189c2:	4603      	mov	r3, r0
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d00e      	beq.n	80189e6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d00b      	beq.n	80189e6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	2201      	movs	r2, #1
 80189d2:	601a      	str	r2, [r3, #0]
 80189d4:	e007      	b.n	80189e6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80189d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80189da:	3301      	adds	r3, #1
 80189dc:	b2db      	uxtb	r3, r3
 80189de:	b25a      	sxtb	r2, r3
 80189e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80189e6:	2301      	movs	r3, #1
 80189e8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80189ea:	e001      	b.n	80189f0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80189ec:	2300      	movs	r3, #0
 80189ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80189f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80189fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80189fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80189fe:	4618      	mov	r0, r3
 8018a00:	3738      	adds	r7, #56	@ 0x38
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}

08018a06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018a06:	b580      	push	{r7, lr}
 8018a08:	b08e      	sub	sp, #56	@ 0x38
 8018a0a:	af00      	add	r7, sp, #0
 8018a0c:	6078      	str	r0, [r7, #4]
 8018a0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d10d      	bne.n	8018a36 <xQueueGiveFromISR+0x30>
	__asm volatile
 8018a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a1e:	b672      	cpsid	i
 8018a20:	f383 8811 	msr	BASEPRI, r3
 8018a24:	f3bf 8f6f 	isb	sy
 8018a28:	f3bf 8f4f 	dsb	sy
 8018a2c:	b662      	cpsie	i
 8018a2e:	623b      	str	r3, [r7, #32]
}
 8018a30:	bf00      	nop
 8018a32:	bf00      	nop
 8018a34:	e7fd      	b.n	8018a32 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d00d      	beq.n	8018a5a <xQueueGiveFromISR+0x54>
	__asm volatile
 8018a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a42:	b672      	cpsid	i
 8018a44:	f383 8811 	msr	BASEPRI, r3
 8018a48:	f3bf 8f6f 	isb	sy
 8018a4c:	f3bf 8f4f 	dsb	sy
 8018a50:	b662      	cpsie	i
 8018a52:	61fb      	str	r3, [r7, #28]
}
 8018a54:	bf00      	nop
 8018a56:	bf00      	nop
 8018a58:	e7fd      	b.n	8018a56 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d103      	bne.n	8018a6a <xQueueGiveFromISR+0x64>
 8018a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a64:	689b      	ldr	r3, [r3, #8]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d101      	bne.n	8018a6e <xQueueGiveFromISR+0x68>
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	e000      	b.n	8018a70 <xQueueGiveFromISR+0x6a>
 8018a6e:	2300      	movs	r3, #0
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d10d      	bne.n	8018a90 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8018a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a78:	b672      	cpsid	i
 8018a7a:	f383 8811 	msr	BASEPRI, r3
 8018a7e:	f3bf 8f6f 	isb	sy
 8018a82:	f3bf 8f4f 	dsb	sy
 8018a86:	b662      	cpsie	i
 8018a88:	61bb      	str	r3, [r7, #24]
}
 8018a8a:	bf00      	nop
 8018a8c:	bf00      	nop
 8018a8e:	e7fd      	b.n	8018a8c <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018a90:	f001 ff1c 	bl	801a8cc <vPortValidateInterruptPriority>
	__asm volatile
 8018a94:	f3ef 8211 	mrs	r2, BASEPRI
 8018a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a9c:	b672      	cpsid	i
 8018a9e:	f383 8811 	msr	BASEPRI, r3
 8018aa2:	f3bf 8f6f 	isb	sy
 8018aa6:	f3bf 8f4f 	dsb	sy
 8018aaa:	b662      	cpsie	i
 8018aac:	617a      	str	r2, [r7, #20]
 8018aae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018ab0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ab8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d22b      	bcs.n	8018b1c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ad0:	1c5a      	adds	r2, r3, #1
 8018ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ad4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ade:	d112      	bne.n	8018b06 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d016      	beq.n	8018b16 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018aea:	3324      	adds	r3, #36	@ 0x24
 8018aec:	4618      	mov	r0, r3
 8018aee:	f001 f8e5 	bl	8019cbc <xTaskRemoveFromEventList>
 8018af2:	4603      	mov	r3, r0
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d00e      	beq.n	8018b16 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d00b      	beq.n	8018b16 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	2201      	movs	r2, #1
 8018b02:	601a      	str	r2, [r3, #0]
 8018b04:	e007      	b.n	8018b16 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018b06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018b0a:	3301      	adds	r3, #1
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	b25a      	sxtb	r2, r3
 8018b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8018b16:	2301      	movs	r3, #1
 8018b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8018b1a:	e001      	b.n	8018b20 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b22:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	f383 8811 	msr	BASEPRI, r3
}
 8018b2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3738      	adds	r7, #56	@ 0x38
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd80      	pop	{r7, pc}
	...

08018b38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b08c      	sub	sp, #48	@ 0x30
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	60f8      	str	r0, [r7, #12]
 8018b40:	60b9      	str	r1, [r7, #8]
 8018b42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018b44:	2300      	movs	r3, #0
 8018b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d10d      	bne.n	8018b6e <xQueueReceive+0x36>
	__asm volatile
 8018b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b56:	b672      	cpsid	i
 8018b58:	f383 8811 	msr	BASEPRI, r3
 8018b5c:	f3bf 8f6f 	isb	sy
 8018b60:	f3bf 8f4f 	dsb	sy
 8018b64:	b662      	cpsie	i
 8018b66:	623b      	str	r3, [r7, #32]
}
 8018b68:	bf00      	nop
 8018b6a:	bf00      	nop
 8018b6c:	e7fd      	b.n	8018b6a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018b6e:	68bb      	ldr	r3, [r7, #8]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d103      	bne.n	8018b7c <xQueueReceive+0x44>
 8018b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d101      	bne.n	8018b80 <xQueueReceive+0x48>
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	e000      	b.n	8018b82 <xQueueReceive+0x4a>
 8018b80:	2300      	movs	r3, #0
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d10d      	bne.n	8018ba2 <xQueueReceive+0x6a>
	__asm volatile
 8018b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b8a:	b672      	cpsid	i
 8018b8c:	f383 8811 	msr	BASEPRI, r3
 8018b90:	f3bf 8f6f 	isb	sy
 8018b94:	f3bf 8f4f 	dsb	sy
 8018b98:	b662      	cpsie	i
 8018b9a:	61fb      	str	r3, [r7, #28]
}
 8018b9c:	bf00      	nop
 8018b9e:	bf00      	nop
 8018ba0:	e7fd      	b.n	8018b9e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018ba2:	f001 fa55 	bl	801a050 <xTaskGetSchedulerState>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d102      	bne.n	8018bb2 <xQueueReceive+0x7a>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d101      	bne.n	8018bb6 <xQueueReceive+0x7e>
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	e000      	b.n	8018bb8 <xQueueReceive+0x80>
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d10d      	bne.n	8018bd8 <xQueueReceive+0xa0>
	__asm volatile
 8018bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bc0:	b672      	cpsid	i
 8018bc2:	f383 8811 	msr	BASEPRI, r3
 8018bc6:	f3bf 8f6f 	isb	sy
 8018bca:	f3bf 8f4f 	dsb	sy
 8018bce:	b662      	cpsie	i
 8018bd0:	61bb      	str	r3, [r7, #24]
}
 8018bd2:	bf00      	nop
 8018bd4:	bf00      	nop
 8018bd6:	e7fd      	b.n	8018bd4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018bd8:	f001 fd90 	bl	801a6fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018be0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d01f      	beq.n	8018c28 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018be8:	68b9      	ldr	r1, [r7, #8]
 8018bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018bec:	f000 fb16 	bl	801921c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bf2:	1e5a      	subs	r2, r3, #1
 8018bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bf6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bfa:	691b      	ldr	r3, [r3, #16]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d00f      	beq.n	8018c20 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c02:	3310      	adds	r3, #16
 8018c04:	4618      	mov	r0, r3
 8018c06:	f001 f859 	bl	8019cbc <xTaskRemoveFromEventList>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d007      	beq.n	8018c20 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018c10:	4b3c      	ldr	r3, [pc, #240]	@ (8018d04 <xQueueReceive+0x1cc>)
 8018c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018c16:	601a      	str	r2, [r3, #0]
 8018c18:	f3bf 8f4f 	dsb	sy
 8018c1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018c20:	f001 fda2 	bl	801a768 <vPortExitCritical>
				return pdPASS;
 8018c24:	2301      	movs	r3, #1
 8018c26:	e069      	b.n	8018cfc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d103      	bne.n	8018c36 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018c2e:	f001 fd9b 	bl	801a768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018c32:	2300      	movs	r3, #0
 8018c34:	e062      	b.n	8018cfc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d106      	bne.n	8018c4a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018c3c:	f107 0310 	add.w	r3, r7, #16
 8018c40:	4618      	mov	r0, r3
 8018c42:	f001 f8a1 	bl	8019d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018c46:	2301      	movs	r3, #1
 8018c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018c4a:	f001 fd8d 	bl	801a768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018c4e:	f000 fdfd 	bl	801984c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018c52:	f001 fd53 	bl	801a6fc <vPortEnterCritical>
 8018c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018c5c:	b25b      	sxtb	r3, r3
 8018c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c62:	d103      	bne.n	8018c6c <xQueueReceive+0x134>
 8018c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c66:	2200      	movs	r2, #0
 8018c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018c72:	b25b      	sxtb	r3, r3
 8018c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c78:	d103      	bne.n	8018c82 <xQueueReceive+0x14a>
 8018c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018c82:	f001 fd71 	bl	801a768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018c86:	1d3a      	adds	r2, r7, #4
 8018c88:	f107 0310 	add.w	r3, r7, #16
 8018c8c:	4611      	mov	r1, r2
 8018c8e:	4618      	mov	r0, r3
 8018c90:	f001 f890 	bl	8019db4 <xTaskCheckForTimeOut>
 8018c94:	4603      	mov	r3, r0
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d123      	bne.n	8018ce2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c9c:	f000 fb36 	bl	801930c <prvIsQueueEmpty>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d017      	beq.n	8018cd6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ca8:	3324      	adds	r3, #36	@ 0x24
 8018caa:	687a      	ldr	r2, [r7, #4]
 8018cac:	4611      	mov	r1, r2
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f000 ffdc 	bl	8019c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018cb6:	f000 fad7 	bl	8019268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018cba:	f000 fdd5 	bl	8019868 <xTaskResumeAll>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d189      	bne.n	8018bd8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8018cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8018d04 <xQueueReceive+0x1cc>)
 8018cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018cca:	601a      	str	r2, [r3, #0]
 8018ccc:	f3bf 8f4f 	dsb	sy
 8018cd0:	f3bf 8f6f 	isb	sy
 8018cd4:	e780      	b.n	8018bd8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018cd8:	f000 fac6 	bl	8019268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018cdc:	f000 fdc4 	bl	8019868 <xTaskResumeAll>
 8018ce0:	e77a      	b.n	8018bd8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018ce4:	f000 fac0 	bl	8019268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018ce8:	f000 fdbe 	bl	8019868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018cec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018cee:	f000 fb0d 	bl	801930c <prvIsQueueEmpty>
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	f43f af6f 	beq.w	8018bd8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018cfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	3730      	adds	r7, #48	@ 0x30
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	e000ed04 	.word	0xe000ed04

08018d08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b08e      	sub	sp, #56	@ 0x38
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
 8018d10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8018d12:	2300      	movs	r3, #0
 8018d14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d10d      	bne.n	8018d40 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8018d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d28:	b672      	cpsid	i
 8018d2a:	f383 8811 	msr	BASEPRI, r3
 8018d2e:	f3bf 8f6f 	isb	sy
 8018d32:	f3bf 8f4f 	dsb	sy
 8018d36:	b662      	cpsie	i
 8018d38:	623b      	str	r3, [r7, #32]
}
 8018d3a:	bf00      	nop
 8018d3c:	bf00      	nop
 8018d3e:	e7fd      	b.n	8018d3c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d00d      	beq.n	8018d64 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8018d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d4c:	b672      	cpsid	i
 8018d4e:	f383 8811 	msr	BASEPRI, r3
 8018d52:	f3bf 8f6f 	isb	sy
 8018d56:	f3bf 8f4f 	dsb	sy
 8018d5a:	b662      	cpsie	i
 8018d5c:	61fb      	str	r3, [r7, #28]
}
 8018d5e:	bf00      	nop
 8018d60:	bf00      	nop
 8018d62:	e7fd      	b.n	8018d60 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018d64:	f001 f974 	bl	801a050 <xTaskGetSchedulerState>
 8018d68:	4603      	mov	r3, r0
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d102      	bne.n	8018d74 <xQueueSemaphoreTake+0x6c>
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d101      	bne.n	8018d78 <xQueueSemaphoreTake+0x70>
 8018d74:	2301      	movs	r3, #1
 8018d76:	e000      	b.n	8018d7a <xQueueSemaphoreTake+0x72>
 8018d78:	2300      	movs	r3, #0
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d10d      	bne.n	8018d9a <xQueueSemaphoreTake+0x92>
	__asm volatile
 8018d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d82:	b672      	cpsid	i
 8018d84:	f383 8811 	msr	BASEPRI, r3
 8018d88:	f3bf 8f6f 	isb	sy
 8018d8c:	f3bf 8f4f 	dsb	sy
 8018d90:	b662      	cpsie	i
 8018d92:	61bb      	str	r3, [r7, #24]
}
 8018d94:	bf00      	nop
 8018d96:	bf00      	nop
 8018d98:	e7fd      	b.n	8018d96 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018d9a:	f001 fcaf 	bl	801a6fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018da2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d024      	beq.n	8018df4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018dac:	1e5a      	subs	r2, r3, #1
 8018dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018db0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d104      	bne.n	8018dc4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018dba:	f001 fb13 	bl	801a3e4 <pvTaskIncrementMutexHeldCount>
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dc6:	691b      	ldr	r3, [r3, #16]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d00f      	beq.n	8018dec <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dce:	3310      	adds	r3, #16
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f000 ff73 	bl	8019cbc <xTaskRemoveFromEventList>
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d007      	beq.n	8018dec <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018ddc:	4b55      	ldr	r3, [pc, #340]	@ (8018f34 <xQueueSemaphoreTake+0x22c>)
 8018dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018de2:	601a      	str	r2, [r3, #0]
 8018de4:	f3bf 8f4f 	dsb	sy
 8018de8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018dec:	f001 fcbc 	bl	801a768 <vPortExitCritical>
				return pdPASS;
 8018df0:	2301      	movs	r3, #1
 8018df2:	e09a      	b.n	8018f2a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018df4:	683b      	ldr	r3, [r7, #0]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d114      	bne.n	8018e24 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d00d      	beq.n	8018e1c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8018e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e04:	b672      	cpsid	i
 8018e06:	f383 8811 	msr	BASEPRI, r3
 8018e0a:	f3bf 8f6f 	isb	sy
 8018e0e:	f3bf 8f4f 	dsb	sy
 8018e12:	b662      	cpsie	i
 8018e14:	617b      	str	r3, [r7, #20]
}
 8018e16:	bf00      	nop
 8018e18:	bf00      	nop
 8018e1a:	e7fd      	b.n	8018e18 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8018e1c:	f001 fca4 	bl	801a768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018e20:	2300      	movs	r3, #0
 8018e22:	e082      	b.n	8018f2a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d106      	bne.n	8018e38 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018e2a:	f107 030c 	add.w	r3, r7, #12
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f000 ffaa 	bl	8019d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018e34:	2301      	movs	r3, #1
 8018e36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018e38:	f001 fc96 	bl	801a768 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018e3c:	f000 fd06 	bl	801984c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018e40:	f001 fc5c 	bl	801a6fc <vPortEnterCritical>
 8018e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018e4a:	b25b      	sxtb	r3, r3
 8018e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e50:	d103      	bne.n	8018e5a <xQueueSemaphoreTake+0x152>
 8018e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e54:	2200      	movs	r2, #0
 8018e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018e60:	b25b      	sxtb	r3, r3
 8018e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e66:	d103      	bne.n	8018e70 <xQueueSemaphoreTake+0x168>
 8018e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018e70:	f001 fc7a 	bl	801a768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018e74:	463a      	mov	r2, r7
 8018e76:	f107 030c 	add.w	r3, r7, #12
 8018e7a:	4611      	mov	r1, r2
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f000 ff99 	bl	8019db4 <xTaskCheckForTimeOut>
 8018e82:	4603      	mov	r3, r0
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d132      	bne.n	8018eee <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018e88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018e8a:	f000 fa3f 	bl	801930c <prvIsQueueEmpty>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d026      	beq.n	8018ee2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d109      	bne.n	8018eb0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8018e9c:	f001 fc2e 	bl	801a6fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ea2:	689b      	ldr	r3, [r3, #8]
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f001 f8f1 	bl	801a08c <xTaskPriorityInherit>
 8018eaa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8018eac:	f001 fc5c 	bl	801a768 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018eb2:	3324      	adds	r3, #36	@ 0x24
 8018eb4:	683a      	ldr	r2, [r7, #0]
 8018eb6:	4611      	mov	r1, r2
 8018eb8:	4618      	mov	r0, r3
 8018eba:	f000 fed7 	bl	8019c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018ebe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018ec0:	f000 f9d2 	bl	8019268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018ec4:	f000 fcd0 	bl	8019868 <xTaskResumeAll>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	f47f af65 	bne.w	8018d9a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8018ed0:	4b18      	ldr	r3, [pc, #96]	@ (8018f34 <xQueueSemaphoreTake+0x22c>)
 8018ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ed6:	601a      	str	r2, [r3, #0]
 8018ed8:	f3bf 8f4f 	dsb	sy
 8018edc:	f3bf 8f6f 	isb	sy
 8018ee0:	e75b      	b.n	8018d9a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8018ee2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018ee4:	f000 f9c0 	bl	8019268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018ee8:	f000 fcbe 	bl	8019868 <xTaskResumeAll>
 8018eec:	e755      	b.n	8018d9a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018eee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018ef0:	f000 f9ba 	bl	8019268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018ef4:	f000 fcb8 	bl	8019868 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018ef8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018efa:	f000 fa07 	bl	801930c <prvIsQueueEmpty>
 8018efe:	4603      	mov	r3, r0
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	f43f af4a 	beq.w	8018d9a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8018f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d00d      	beq.n	8018f28 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8018f0c:	f001 fbf6 	bl	801a6fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018f10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018f12:	f000 f901 	bl	8019118 <prvGetDisinheritPriorityAfterTimeout>
 8018f16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8018f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f1a:	689b      	ldr	r3, [r3, #8]
 8018f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f001 f9c0 	bl	801a2a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018f24:	f001 fc20 	bl	801a768 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018f28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	3738      	adds	r7, #56	@ 0x38
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	bd80      	pop	{r7, pc}
 8018f32:	bf00      	nop
 8018f34:	e000ed04 	.word	0xe000ed04

08018f38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b08e      	sub	sp, #56	@ 0x38
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	60f8      	str	r0, [r7, #12]
 8018f40:	60b9      	str	r1, [r7, #8]
 8018f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8018f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d10d      	bne.n	8018f6a <xQueueReceiveFromISR+0x32>
	__asm volatile
 8018f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f52:	b672      	cpsid	i
 8018f54:	f383 8811 	msr	BASEPRI, r3
 8018f58:	f3bf 8f6f 	isb	sy
 8018f5c:	f3bf 8f4f 	dsb	sy
 8018f60:	b662      	cpsie	i
 8018f62:	623b      	str	r3, [r7, #32]
}
 8018f64:	bf00      	nop
 8018f66:	bf00      	nop
 8018f68:	e7fd      	b.n	8018f66 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f6a:	68bb      	ldr	r3, [r7, #8]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d103      	bne.n	8018f78 <xQueueReceiveFromISR+0x40>
 8018f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d101      	bne.n	8018f7c <xQueueReceiveFromISR+0x44>
 8018f78:	2301      	movs	r3, #1
 8018f7a:	e000      	b.n	8018f7e <xQueueReceiveFromISR+0x46>
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d10d      	bne.n	8018f9e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8018f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f86:	b672      	cpsid	i
 8018f88:	f383 8811 	msr	BASEPRI, r3
 8018f8c:	f3bf 8f6f 	isb	sy
 8018f90:	f3bf 8f4f 	dsb	sy
 8018f94:	b662      	cpsie	i
 8018f96:	61fb      	str	r3, [r7, #28]
}
 8018f98:	bf00      	nop
 8018f9a:	bf00      	nop
 8018f9c:	e7fd      	b.n	8018f9a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018f9e:	f001 fc95 	bl	801a8cc <vPortValidateInterruptPriority>
	__asm volatile
 8018fa2:	f3ef 8211 	mrs	r2, BASEPRI
 8018fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018faa:	b672      	cpsid	i
 8018fac:	f383 8811 	msr	BASEPRI, r3
 8018fb0:	f3bf 8f6f 	isb	sy
 8018fb4:	f3bf 8f4f 	dsb	sy
 8018fb8:	b662      	cpsie	i
 8018fba:	61ba      	str	r2, [r7, #24]
 8018fbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018fbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018fc6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d02f      	beq.n	801902e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018fd8:	68b9      	ldr	r1, [r7, #8]
 8018fda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018fdc:	f000 f91e 	bl	801921c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fe2:	1e5a      	subs	r2, r3, #1
 8018fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fe6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018fe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ff0:	d112      	bne.n	8019018 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ff4:	691b      	ldr	r3, [r3, #16]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d016      	beq.n	8019028 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ffc:	3310      	adds	r3, #16
 8018ffe:	4618      	mov	r0, r3
 8019000:	f000 fe5c 	bl	8019cbc <xTaskRemoveFromEventList>
 8019004:	4603      	mov	r3, r0
 8019006:	2b00      	cmp	r3, #0
 8019008:	d00e      	beq.n	8019028 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d00b      	beq.n	8019028 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2201      	movs	r2, #1
 8019014:	601a      	str	r2, [r3, #0]
 8019016:	e007      	b.n	8019028 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801901c:	3301      	adds	r3, #1
 801901e:	b2db      	uxtb	r3, r3
 8019020:	b25a      	sxtb	r2, r3
 8019022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8019028:	2301      	movs	r3, #1
 801902a:	637b      	str	r3, [r7, #52]	@ 0x34
 801902c:	e001      	b.n	8019032 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801902e:	2300      	movs	r3, #0
 8019030:	637b      	str	r3, [r7, #52]	@ 0x34
 8019032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019034:	613b      	str	r3, [r7, #16]
	__asm volatile
 8019036:	693b      	ldr	r3, [r7, #16]
 8019038:	f383 8811 	msr	BASEPRI, r3
}
 801903c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801903e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8019040:	4618      	mov	r0, r3
 8019042:	3738      	adds	r7, #56	@ 0x38
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}

08019048 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b084      	sub	sp, #16
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d10d      	bne.n	8019072 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8019056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801905a:	b672      	cpsid	i
 801905c:	f383 8811 	msr	BASEPRI, r3
 8019060:	f3bf 8f6f 	isb	sy
 8019064:	f3bf 8f4f 	dsb	sy
 8019068:	b662      	cpsie	i
 801906a:	60bb      	str	r3, [r7, #8]
}
 801906c:	bf00      	nop
 801906e:	bf00      	nop
 8019070:	e7fd      	b.n	801906e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8019072:	f001 fb43 	bl	801a6fc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801907a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801907c:	f001 fb74 	bl	801a768 <vPortExitCritical>

	return uxReturn;
 8019080:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019082:	4618      	mov	r0, r3
 8019084:	3710      	adds	r7, #16
 8019086:	46bd      	mov	sp, r7
 8019088:	bd80      	pop	{r7, pc}

0801908a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801908a:	b480      	push	{r7}
 801908c:	b087      	sub	sp, #28
 801908e:	af00      	add	r7, sp, #0
 8019090:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8019096:	697b      	ldr	r3, [r7, #20]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d10d      	bne.n	80190b8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 801909c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190a0:	b672      	cpsid	i
 80190a2:	f383 8811 	msr	BASEPRI, r3
 80190a6:	f3bf 8f6f 	isb	sy
 80190aa:	f3bf 8f4f 	dsb	sy
 80190ae:	b662      	cpsie	i
 80190b0:	60fb      	str	r3, [r7, #12]
}
 80190b2:	bf00      	nop
 80190b4:	bf00      	nop
 80190b6:	e7fd      	b.n	80190b4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80190b8:	697b      	ldr	r3, [r7, #20]
 80190ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80190bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80190be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80190c0:	4618      	mov	r0, r3
 80190c2:	371c      	adds	r7, #28
 80190c4:	46bd      	mov	sp, r7
 80190c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ca:	4770      	bx	lr

080190cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b084      	sub	sp, #16
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d10d      	bne.n	80190fa <vQueueDelete+0x2e>
	__asm volatile
 80190de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190e2:	b672      	cpsid	i
 80190e4:	f383 8811 	msr	BASEPRI, r3
 80190e8:	f3bf 8f6f 	isb	sy
 80190ec:	f3bf 8f4f 	dsb	sy
 80190f0:	b662      	cpsie	i
 80190f2:	60bb      	str	r3, [r7, #8]
}
 80190f4:	bf00      	nop
 80190f6:	bf00      	nop
 80190f8:	e7fd      	b.n	80190f6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80190fa:	68f8      	ldr	r0, [r7, #12]
 80190fc:	f000 f934 	bl	8019368 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8019106:	2b00      	cmp	r3, #0
 8019108:	d102      	bne.n	8019110 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801910a:	68f8      	ldr	r0, [r7, #12]
 801910c:	f001 fcf6 	bl	801aafc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8019110:	bf00      	nop
 8019112:	3710      	adds	r7, #16
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}

08019118 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8019118:	b480      	push	{r7}
 801911a:	b085      	sub	sp, #20
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019124:	2b00      	cmp	r3, #0
 8019126:	d006      	beq.n	8019136 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	f1c3 0307 	rsb	r3, r3, #7
 8019132:	60fb      	str	r3, [r7, #12]
 8019134:	e001      	b.n	801913a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8019136:	2300      	movs	r3, #0
 8019138:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801913a:	68fb      	ldr	r3, [r7, #12]
	}
 801913c:	4618      	mov	r0, r3
 801913e:	3714      	adds	r7, #20
 8019140:	46bd      	mov	sp, r7
 8019142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019146:	4770      	bx	lr

08019148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b086      	sub	sp, #24
 801914c:	af00      	add	r7, sp, #0
 801914e:	60f8      	str	r0, [r7, #12]
 8019150:	60b9      	str	r1, [r7, #8]
 8019152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019154:	2300      	movs	r3, #0
 8019156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801915c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019162:	2b00      	cmp	r3, #0
 8019164:	d10d      	bne.n	8019182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d14d      	bne.n	801920a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	689b      	ldr	r3, [r3, #8]
 8019172:	4618      	mov	r0, r3
 8019174:	f001 f80a 	bl	801a18c <xTaskPriorityDisinherit>
 8019178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	2200      	movs	r2, #0
 801917e:	609a      	str	r2, [r3, #8]
 8019180:	e043      	b.n	801920a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d119      	bne.n	80191bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	6858      	ldr	r0, [r3, #4]
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019190:	461a      	mov	r2, r3
 8019192:	68b9      	ldr	r1, [r7, #8]
 8019194:	f002 fa96 	bl	801b6c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	685a      	ldr	r2, [r3, #4]
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80191a0:	441a      	add	r2, r3
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	685a      	ldr	r2, [r3, #4]
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	689b      	ldr	r3, [r3, #8]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	d32b      	bcc.n	801920a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	681a      	ldr	r2, [r3, #0]
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	605a      	str	r2, [r3, #4]
 80191ba:	e026      	b.n	801920a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	68d8      	ldr	r0, [r3, #12]
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80191c4:	461a      	mov	r2, r3
 80191c6:	68b9      	ldr	r1, [r7, #8]
 80191c8:	f002 fa7c 	bl	801b6c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	68da      	ldr	r2, [r3, #12]
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80191d4:	425b      	negs	r3, r3
 80191d6:	441a      	add	r2, r3
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	68da      	ldr	r2, [r3, #12]
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	429a      	cmp	r2, r3
 80191e6:	d207      	bcs.n	80191f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	689a      	ldr	r2, [r3, #8]
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80191f0:	425b      	negs	r3, r3
 80191f2:	441a      	add	r2, r3
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	2b02      	cmp	r3, #2
 80191fc:	d105      	bne.n	801920a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80191fe:	693b      	ldr	r3, [r7, #16]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d002      	beq.n	801920a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019204:	693b      	ldr	r3, [r7, #16]
 8019206:	3b01      	subs	r3, #1
 8019208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801920a:	693b      	ldr	r3, [r7, #16]
 801920c:	1c5a      	adds	r2, r3, #1
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8019212:	697b      	ldr	r3, [r7, #20]
}
 8019214:	4618      	mov	r0, r3
 8019216:	3718      	adds	r7, #24
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}

0801921c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801922a:	2b00      	cmp	r3, #0
 801922c:	d018      	beq.n	8019260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	68da      	ldr	r2, [r3, #12]
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019236:	441a      	add	r2, r3
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	68da      	ldr	r2, [r3, #12]
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	689b      	ldr	r3, [r3, #8]
 8019244:	429a      	cmp	r2, r3
 8019246:	d303      	bcc.n	8019250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	681a      	ldr	r2, [r3, #0]
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	68d9      	ldr	r1, [r3, #12]
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019258:	461a      	mov	r2, r3
 801925a:	6838      	ldr	r0, [r7, #0]
 801925c:	f002 fa32 	bl	801b6c4 <memcpy>
	}
}
 8019260:	bf00      	nop
 8019262:	3708      	adds	r7, #8
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}

08019268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b084      	sub	sp, #16
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019270:	f001 fa44 	bl	801a6fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801927a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801927c:	e011      	b.n	80192a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019282:	2b00      	cmp	r3, #0
 8019284:	d012      	beq.n	80192ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	3324      	adds	r3, #36	@ 0x24
 801928a:	4618      	mov	r0, r3
 801928c:	f000 fd16 	bl	8019cbc <xTaskRemoveFromEventList>
 8019290:	4603      	mov	r3, r0
 8019292:	2b00      	cmp	r3, #0
 8019294:	d001      	beq.n	801929a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019296:	f000 fdf5 	bl	8019e84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801929a:	7bfb      	ldrb	r3, [r7, #15]
 801929c:	3b01      	subs	r3, #1
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80192a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	dce9      	bgt.n	801927e <prvUnlockQueue+0x16>
 80192aa:	e000      	b.n	80192ae <prvUnlockQueue+0x46>
					break;
 80192ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	22ff      	movs	r2, #255	@ 0xff
 80192b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80192b6:	f001 fa57 	bl	801a768 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80192ba:	f001 fa1f 	bl	801a6fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80192c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80192c6:	e011      	b.n	80192ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	691b      	ldr	r3, [r3, #16]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d012      	beq.n	80192f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	3310      	adds	r3, #16
 80192d4:	4618      	mov	r0, r3
 80192d6:	f000 fcf1 	bl	8019cbc <xTaskRemoveFromEventList>
 80192da:	4603      	mov	r3, r0
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d001      	beq.n	80192e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80192e0:	f000 fdd0 	bl	8019e84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80192e4:	7bbb      	ldrb	r3, [r7, #14]
 80192e6:	3b01      	subs	r3, #1
 80192e8:	b2db      	uxtb	r3, r3
 80192ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80192ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	dce9      	bgt.n	80192c8 <prvUnlockQueue+0x60>
 80192f4:	e000      	b.n	80192f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80192f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	22ff      	movs	r2, #255	@ 0xff
 80192fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8019300:	f001 fa32 	bl	801a768 <vPortExitCritical>
}
 8019304:	bf00      	nop
 8019306:	3710      	adds	r7, #16
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}

0801930c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b084      	sub	sp, #16
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019314:	f001 f9f2 	bl	801a6fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801931c:	2b00      	cmp	r3, #0
 801931e:	d102      	bne.n	8019326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019320:	2301      	movs	r3, #1
 8019322:	60fb      	str	r3, [r7, #12]
 8019324:	e001      	b.n	801932a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019326:	2300      	movs	r3, #0
 8019328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801932a:	f001 fa1d 	bl	801a768 <vPortExitCritical>

	return xReturn;
 801932e:	68fb      	ldr	r3, [r7, #12]
}
 8019330:	4618      	mov	r0, r3
 8019332:	3710      	adds	r7, #16
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}

08019338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b084      	sub	sp, #16
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019340:	f001 f9dc 	bl	801a6fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801934c:	429a      	cmp	r2, r3
 801934e:	d102      	bne.n	8019356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019350:	2301      	movs	r3, #1
 8019352:	60fb      	str	r3, [r7, #12]
 8019354:	e001      	b.n	801935a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019356:	2300      	movs	r3, #0
 8019358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801935a:	f001 fa05 	bl	801a768 <vPortExitCritical>

	return xReturn;
 801935e:	68fb      	ldr	r3, [r7, #12]
}
 8019360:	4618      	mov	r0, r3
 8019362:	3710      	adds	r7, #16
 8019364:	46bd      	mov	sp, r7
 8019366:	bd80      	pop	{r7, pc}

08019368 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8019368:	b480      	push	{r7}
 801936a:	b085      	sub	sp, #20
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019370:	2300      	movs	r3, #0
 8019372:	60fb      	str	r3, [r7, #12]
 8019374:	e016      	b.n	80193a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8019376:	4a10      	ldr	r2, [pc, #64]	@ (80193b8 <vQueueUnregisterQueue+0x50>)
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	00db      	lsls	r3, r3, #3
 801937c:	4413      	add	r3, r2
 801937e:	685b      	ldr	r3, [r3, #4]
 8019380:	687a      	ldr	r2, [r7, #4]
 8019382:	429a      	cmp	r2, r3
 8019384:	d10b      	bne.n	801939e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8019386:	4a0c      	ldr	r2, [pc, #48]	@ (80193b8 <vQueueUnregisterQueue+0x50>)
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	2100      	movs	r1, #0
 801938c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8019390:	4a09      	ldr	r2, [pc, #36]	@ (80193b8 <vQueueUnregisterQueue+0x50>)
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	00db      	lsls	r3, r3, #3
 8019396:	4413      	add	r3, r2
 8019398:	2200      	movs	r2, #0
 801939a:	605a      	str	r2, [r3, #4]
				break;
 801939c:	e006      	b.n	80193ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	3301      	adds	r3, #1
 80193a2:	60fb      	str	r3, [r7, #12]
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	2b07      	cmp	r3, #7
 80193a8:	d9e5      	bls.n	8019376 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80193aa:	bf00      	nop
 80193ac:	bf00      	nop
 80193ae:	3714      	adds	r7, #20
 80193b0:	46bd      	mov	sp, r7
 80193b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b6:	4770      	bx	lr
 80193b8:	20002414 	.word	0x20002414

080193bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b08e      	sub	sp, #56	@ 0x38
 80193c0:	af04      	add	r7, sp, #16
 80193c2:	60f8      	str	r0, [r7, #12]
 80193c4:	60b9      	str	r1, [r7, #8]
 80193c6:	607a      	str	r2, [r7, #4]
 80193c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80193ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d10d      	bne.n	80193ec <xTaskCreateStatic+0x30>
	__asm volatile
 80193d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193d4:	b672      	cpsid	i
 80193d6:	f383 8811 	msr	BASEPRI, r3
 80193da:	f3bf 8f6f 	isb	sy
 80193de:	f3bf 8f4f 	dsb	sy
 80193e2:	b662      	cpsie	i
 80193e4:	623b      	str	r3, [r7, #32]
}
 80193e6:	bf00      	nop
 80193e8:	bf00      	nop
 80193ea:	e7fd      	b.n	80193e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80193ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d10d      	bne.n	801940e <xTaskCreateStatic+0x52>
	__asm volatile
 80193f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193f6:	b672      	cpsid	i
 80193f8:	f383 8811 	msr	BASEPRI, r3
 80193fc:	f3bf 8f6f 	isb	sy
 8019400:	f3bf 8f4f 	dsb	sy
 8019404:	b662      	cpsie	i
 8019406:	61fb      	str	r3, [r7, #28]
}
 8019408:	bf00      	nop
 801940a:	bf00      	nop
 801940c:	e7fd      	b.n	801940a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801940e:	2358      	movs	r3, #88	@ 0x58
 8019410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019412:	693b      	ldr	r3, [r7, #16]
 8019414:	2b58      	cmp	r3, #88	@ 0x58
 8019416:	d00d      	beq.n	8019434 <xTaskCreateStatic+0x78>
	__asm volatile
 8019418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801941c:	b672      	cpsid	i
 801941e:	f383 8811 	msr	BASEPRI, r3
 8019422:	f3bf 8f6f 	isb	sy
 8019426:	f3bf 8f4f 	dsb	sy
 801942a:	b662      	cpsie	i
 801942c:	61bb      	str	r3, [r7, #24]
}
 801942e:	bf00      	nop
 8019430:	bf00      	nop
 8019432:	e7fd      	b.n	8019430 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019434:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019438:	2b00      	cmp	r3, #0
 801943a:	d01e      	beq.n	801947a <xTaskCreateStatic+0xbe>
 801943c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801943e:	2b00      	cmp	r3, #0
 8019440:	d01b      	beq.n	801947a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019444:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801944a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801944c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801944e:	2202      	movs	r2, #2
 8019450:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019454:	2300      	movs	r3, #0
 8019456:	9303      	str	r3, [sp, #12]
 8019458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801945a:	9302      	str	r3, [sp, #8]
 801945c:	f107 0314 	add.w	r3, r7, #20
 8019460:	9301      	str	r3, [sp, #4]
 8019462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019464:	9300      	str	r3, [sp, #0]
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	687a      	ldr	r2, [r7, #4]
 801946a:	68b9      	ldr	r1, [r7, #8]
 801946c:	68f8      	ldr	r0, [r7, #12]
 801946e:	f000 f850 	bl	8019512 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019472:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019474:	f000 f8e2 	bl	801963c <prvAddNewTaskToReadyList>
 8019478:	e001      	b.n	801947e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801947a:	2300      	movs	r3, #0
 801947c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801947e:	697b      	ldr	r3, [r7, #20]
	}
 8019480:	4618      	mov	r0, r3
 8019482:	3728      	adds	r7, #40	@ 0x28
 8019484:	46bd      	mov	sp, r7
 8019486:	bd80      	pop	{r7, pc}

08019488 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019488:	b580      	push	{r7, lr}
 801948a:	b08c      	sub	sp, #48	@ 0x30
 801948c:	af04      	add	r7, sp, #16
 801948e:	60f8      	str	r0, [r7, #12]
 8019490:	60b9      	str	r1, [r7, #8]
 8019492:	603b      	str	r3, [r7, #0]
 8019494:	4613      	mov	r3, r2
 8019496:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019498:	88fb      	ldrh	r3, [r7, #6]
 801949a:	009b      	lsls	r3, r3, #2
 801949c:	4618      	mov	r0, r3
 801949e:	f001 fa5b 	bl	801a958 <pvPortMalloc>
 80194a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d00e      	beq.n	80194c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80194aa:	2058      	movs	r0, #88	@ 0x58
 80194ac:	f001 fa54 	bl	801a958 <pvPortMalloc>
 80194b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80194b2:	69fb      	ldr	r3, [r7, #28]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d003      	beq.n	80194c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80194b8:	69fb      	ldr	r3, [r7, #28]
 80194ba:	697a      	ldr	r2, [r7, #20]
 80194bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80194be:	e005      	b.n	80194cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80194c0:	6978      	ldr	r0, [r7, #20]
 80194c2:	f001 fb1b 	bl	801aafc <vPortFree>
 80194c6:	e001      	b.n	80194cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80194c8:	2300      	movs	r3, #0
 80194ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80194cc:	69fb      	ldr	r3, [r7, #28]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d017      	beq.n	8019502 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80194d2:	69fb      	ldr	r3, [r7, #28]
 80194d4:	2200      	movs	r2, #0
 80194d6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80194da:	88fa      	ldrh	r2, [r7, #6]
 80194dc:	2300      	movs	r3, #0
 80194de:	9303      	str	r3, [sp, #12]
 80194e0:	69fb      	ldr	r3, [r7, #28]
 80194e2:	9302      	str	r3, [sp, #8]
 80194e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194e6:	9301      	str	r3, [sp, #4]
 80194e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194ea:	9300      	str	r3, [sp, #0]
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	68b9      	ldr	r1, [r7, #8]
 80194f0:	68f8      	ldr	r0, [r7, #12]
 80194f2:	f000 f80e 	bl	8019512 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80194f6:	69f8      	ldr	r0, [r7, #28]
 80194f8:	f000 f8a0 	bl	801963c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80194fc:	2301      	movs	r3, #1
 80194fe:	61bb      	str	r3, [r7, #24]
 8019500:	e002      	b.n	8019508 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019502:	f04f 33ff 	mov.w	r3, #4294967295
 8019506:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019508:	69bb      	ldr	r3, [r7, #24]
	}
 801950a:	4618      	mov	r0, r3
 801950c:	3720      	adds	r7, #32
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}

08019512 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019512:	b580      	push	{r7, lr}
 8019514:	b088      	sub	sp, #32
 8019516:	af00      	add	r7, sp, #0
 8019518:	60f8      	str	r0, [r7, #12]
 801951a:	60b9      	str	r1, [r7, #8]
 801951c:	607a      	str	r2, [r7, #4]
 801951e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019522:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	461a      	mov	r2, r3
 801952a:	21a5      	movs	r1, #165	@ 0xa5
 801952c:	f002 f85c 	bl	801b5e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019534:	6879      	ldr	r1, [r7, #4]
 8019536:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801953a:	440b      	add	r3, r1
 801953c:	009b      	lsls	r3, r3, #2
 801953e:	4413      	add	r3, r2
 8019540:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019542:	69bb      	ldr	r3, [r7, #24]
 8019544:	f023 0307 	bic.w	r3, r3, #7
 8019548:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801954a:	69bb      	ldr	r3, [r7, #24]
 801954c:	f003 0307 	and.w	r3, r3, #7
 8019550:	2b00      	cmp	r3, #0
 8019552:	d00d      	beq.n	8019570 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8019554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019558:	b672      	cpsid	i
 801955a:	f383 8811 	msr	BASEPRI, r3
 801955e:	f3bf 8f6f 	isb	sy
 8019562:	f3bf 8f4f 	dsb	sy
 8019566:	b662      	cpsie	i
 8019568:	617b      	str	r3, [r7, #20]
}
 801956a:	bf00      	nop
 801956c:	bf00      	nop
 801956e:	e7fd      	b.n	801956c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019570:	68bb      	ldr	r3, [r7, #8]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d01f      	beq.n	80195b6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019576:	2300      	movs	r3, #0
 8019578:	61fb      	str	r3, [r7, #28]
 801957a:	e012      	b.n	80195a2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801957c:	68ba      	ldr	r2, [r7, #8]
 801957e:	69fb      	ldr	r3, [r7, #28]
 8019580:	4413      	add	r3, r2
 8019582:	7819      	ldrb	r1, [r3, #0]
 8019584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019586:	69fb      	ldr	r3, [r7, #28]
 8019588:	4413      	add	r3, r2
 801958a:	3334      	adds	r3, #52	@ 0x34
 801958c:	460a      	mov	r2, r1
 801958e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019590:	68ba      	ldr	r2, [r7, #8]
 8019592:	69fb      	ldr	r3, [r7, #28]
 8019594:	4413      	add	r3, r2
 8019596:	781b      	ldrb	r3, [r3, #0]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d006      	beq.n	80195aa <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801959c:	69fb      	ldr	r3, [r7, #28]
 801959e:	3301      	adds	r3, #1
 80195a0:	61fb      	str	r3, [r7, #28]
 80195a2:	69fb      	ldr	r3, [r7, #28]
 80195a4:	2b0f      	cmp	r3, #15
 80195a6:	d9e9      	bls.n	801957c <prvInitialiseNewTask+0x6a>
 80195a8:	e000      	b.n	80195ac <prvInitialiseNewTask+0x9a>
			{
				break;
 80195aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80195ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195ae:	2200      	movs	r2, #0
 80195b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80195b4:	e003      	b.n	80195be <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80195b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195b8:	2200      	movs	r2, #0
 80195ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80195be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195c0:	2b06      	cmp	r3, #6
 80195c2:	d901      	bls.n	80195c8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80195c4:	2306      	movs	r3, #6
 80195c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80195c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80195cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80195ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80195d2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80195d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195d6:	2200      	movs	r2, #0
 80195d8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80195da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195dc:	3304      	adds	r3, #4
 80195de:	4618      	mov	r0, r3
 80195e0:	f7fe fe04 	bl	80181ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80195e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195e6:	3318      	adds	r3, #24
 80195e8:	4618      	mov	r0, r3
 80195ea:	f7fe fdff 	bl	80181ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80195ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80195f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80195f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195f6:	f1c3 0207 	rsb	r2, r3, #7
 80195fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80195fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019602:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8019604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019606:	2200      	movs	r2, #0
 8019608:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801960c:	2200      	movs	r2, #0
 801960e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019612:	2200      	movs	r2, #0
 8019614:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019618:	683a      	ldr	r2, [r7, #0]
 801961a:	68f9      	ldr	r1, [r7, #12]
 801961c:	69b8      	ldr	r0, [r7, #24]
 801961e:	f000 ff5b 	bl	801a4d8 <pxPortInitialiseStack>
 8019622:	4602      	mov	r2, r0
 8019624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019626:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801962a:	2b00      	cmp	r3, #0
 801962c:	d002      	beq.n	8019634 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801962e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019632:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019634:	bf00      	nop
 8019636:	3720      	adds	r7, #32
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}

0801963c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b082      	sub	sp, #8
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019644:	f001 f85a 	bl	801a6fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019648:	4b2a      	ldr	r3, [pc, #168]	@ (80196f4 <prvAddNewTaskToReadyList+0xb8>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	3301      	adds	r3, #1
 801964e:	4a29      	ldr	r2, [pc, #164]	@ (80196f4 <prvAddNewTaskToReadyList+0xb8>)
 8019650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019652:	4b29      	ldr	r3, [pc, #164]	@ (80196f8 <prvAddNewTaskToReadyList+0xbc>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d109      	bne.n	801966e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801965a:	4a27      	ldr	r2, [pc, #156]	@ (80196f8 <prvAddNewTaskToReadyList+0xbc>)
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019660:	4b24      	ldr	r3, [pc, #144]	@ (80196f4 <prvAddNewTaskToReadyList+0xb8>)
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	2b01      	cmp	r3, #1
 8019666:	d110      	bne.n	801968a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019668:	f000 fc32 	bl	8019ed0 <prvInitialiseTaskLists>
 801966c:	e00d      	b.n	801968a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801966e:	4b23      	ldr	r3, [pc, #140]	@ (80196fc <prvAddNewTaskToReadyList+0xc0>)
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d109      	bne.n	801968a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019676:	4b20      	ldr	r3, [pc, #128]	@ (80196f8 <prvAddNewTaskToReadyList+0xbc>)
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019680:	429a      	cmp	r2, r3
 8019682:	d802      	bhi.n	801968a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019684:	4a1c      	ldr	r2, [pc, #112]	@ (80196f8 <prvAddNewTaskToReadyList+0xbc>)
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801968a:	4b1d      	ldr	r3, [pc, #116]	@ (8019700 <prvAddNewTaskToReadyList+0xc4>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	3301      	adds	r3, #1
 8019690:	4a1b      	ldr	r2, [pc, #108]	@ (8019700 <prvAddNewTaskToReadyList+0xc4>)
 8019692:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019698:	2201      	movs	r2, #1
 801969a:	409a      	lsls	r2, r3
 801969c:	4b19      	ldr	r3, [pc, #100]	@ (8019704 <prvAddNewTaskToReadyList+0xc8>)
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	4313      	orrs	r3, r2
 80196a2:	4a18      	ldr	r2, [pc, #96]	@ (8019704 <prvAddNewTaskToReadyList+0xc8>)
 80196a4:	6013      	str	r3, [r2, #0]
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80196aa:	4613      	mov	r3, r2
 80196ac:	009b      	lsls	r3, r3, #2
 80196ae:	4413      	add	r3, r2
 80196b0:	009b      	lsls	r3, r3, #2
 80196b2:	4a15      	ldr	r2, [pc, #84]	@ (8019708 <prvAddNewTaskToReadyList+0xcc>)
 80196b4:	441a      	add	r2, r3
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	3304      	adds	r3, #4
 80196ba:	4619      	mov	r1, r3
 80196bc:	4610      	mov	r0, r2
 80196be:	f7fe fda2 	bl	8018206 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80196c2:	f001 f851 	bl	801a768 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80196c6:	4b0d      	ldr	r3, [pc, #52]	@ (80196fc <prvAddNewTaskToReadyList+0xc0>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d00e      	beq.n	80196ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80196ce:	4b0a      	ldr	r3, [pc, #40]	@ (80196f8 <prvAddNewTaskToReadyList+0xbc>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80196d8:	429a      	cmp	r2, r3
 80196da:	d207      	bcs.n	80196ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80196dc:	4b0b      	ldr	r3, [pc, #44]	@ (801970c <prvAddNewTaskToReadyList+0xd0>)
 80196de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80196e2:	601a      	str	r2, [r3, #0]
 80196e4:	f3bf 8f4f 	dsb	sy
 80196e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80196ec:	bf00      	nop
 80196ee:	3708      	adds	r7, #8
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}
 80196f4:	20002554 	.word	0x20002554
 80196f8:	20002454 	.word	0x20002454
 80196fc:	20002560 	.word	0x20002560
 8019700:	20002570 	.word	0x20002570
 8019704:	2000255c 	.word	0x2000255c
 8019708:	20002458 	.word	0x20002458
 801970c:	e000ed04 	.word	0xe000ed04

08019710 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019710:	b580      	push	{r7, lr}
 8019712:	b084      	sub	sp, #16
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019718:	2300      	movs	r3, #0
 801971a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d01a      	beq.n	8019758 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019722:	4b15      	ldr	r3, [pc, #84]	@ (8019778 <vTaskDelay+0x68>)
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d00d      	beq.n	8019746 <vTaskDelay+0x36>
	__asm volatile
 801972a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801972e:	b672      	cpsid	i
 8019730:	f383 8811 	msr	BASEPRI, r3
 8019734:	f3bf 8f6f 	isb	sy
 8019738:	f3bf 8f4f 	dsb	sy
 801973c:	b662      	cpsie	i
 801973e:	60bb      	str	r3, [r7, #8]
}
 8019740:	bf00      	nop
 8019742:	bf00      	nop
 8019744:	e7fd      	b.n	8019742 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8019746:	f000 f881 	bl	801984c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801974a:	2100      	movs	r1, #0
 801974c:	6878      	ldr	r0, [r7, #4]
 801974e:	f000 fe5d 	bl	801a40c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019752:	f000 f889 	bl	8019868 <xTaskResumeAll>
 8019756:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d107      	bne.n	801976e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801975e:	4b07      	ldr	r3, [pc, #28]	@ (801977c <vTaskDelay+0x6c>)
 8019760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019764:	601a      	str	r2, [r3, #0]
 8019766:	f3bf 8f4f 	dsb	sy
 801976a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801976e:	bf00      	nop
 8019770:	3710      	adds	r7, #16
 8019772:	46bd      	mov	sp, r7
 8019774:	bd80      	pop	{r7, pc}
 8019776:	bf00      	nop
 8019778:	2000257c 	.word	0x2000257c
 801977c:	e000ed04 	.word	0xe000ed04

08019780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b08a      	sub	sp, #40	@ 0x28
 8019784:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019786:	2300      	movs	r3, #0
 8019788:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801978a:	2300      	movs	r3, #0
 801978c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801978e:	463a      	mov	r2, r7
 8019790:	1d39      	adds	r1, r7, #4
 8019792:	f107 0308 	add.w	r3, r7, #8
 8019796:	4618      	mov	r0, r3
 8019798:	f7e8 f80a 	bl	80017b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801979c:	6839      	ldr	r1, [r7, #0]
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	68ba      	ldr	r2, [r7, #8]
 80197a2:	9202      	str	r2, [sp, #8]
 80197a4:	9301      	str	r3, [sp, #4]
 80197a6:	2300      	movs	r3, #0
 80197a8:	9300      	str	r3, [sp, #0]
 80197aa:	2300      	movs	r3, #0
 80197ac:	460a      	mov	r2, r1
 80197ae:	4921      	ldr	r1, [pc, #132]	@ (8019834 <vTaskStartScheduler+0xb4>)
 80197b0:	4821      	ldr	r0, [pc, #132]	@ (8019838 <vTaskStartScheduler+0xb8>)
 80197b2:	f7ff fe03 	bl	80193bc <xTaskCreateStatic>
 80197b6:	4603      	mov	r3, r0
 80197b8:	4a20      	ldr	r2, [pc, #128]	@ (801983c <vTaskStartScheduler+0xbc>)
 80197ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80197bc:	4b1f      	ldr	r3, [pc, #124]	@ (801983c <vTaskStartScheduler+0xbc>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d002      	beq.n	80197ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80197c4:	2301      	movs	r3, #1
 80197c6:	617b      	str	r3, [r7, #20]
 80197c8:	e001      	b.n	80197ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80197ca:	2300      	movs	r3, #0
 80197cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	2b01      	cmp	r3, #1
 80197d2:	d118      	bne.n	8019806 <vTaskStartScheduler+0x86>
	__asm volatile
 80197d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197d8:	b672      	cpsid	i
 80197da:	f383 8811 	msr	BASEPRI, r3
 80197de:	f3bf 8f6f 	isb	sy
 80197e2:	f3bf 8f4f 	dsb	sy
 80197e6:	b662      	cpsie	i
 80197e8:	613b      	str	r3, [r7, #16]
}
 80197ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80197ec:	4b14      	ldr	r3, [pc, #80]	@ (8019840 <vTaskStartScheduler+0xc0>)
 80197ee:	f04f 32ff 	mov.w	r2, #4294967295
 80197f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80197f4:	4b13      	ldr	r3, [pc, #76]	@ (8019844 <vTaskStartScheduler+0xc4>)
 80197f6:	2201      	movs	r2, #1
 80197f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80197fa:	4b13      	ldr	r3, [pc, #76]	@ (8019848 <vTaskStartScheduler+0xc8>)
 80197fc:	2200      	movs	r2, #0
 80197fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019800:	f000 fefe 	bl	801a600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019804:	e011      	b.n	801982a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019806:	697b      	ldr	r3, [r7, #20]
 8019808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801980c:	d10d      	bne.n	801982a <vTaskStartScheduler+0xaa>
	__asm volatile
 801980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019812:	b672      	cpsid	i
 8019814:	f383 8811 	msr	BASEPRI, r3
 8019818:	f3bf 8f6f 	isb	sy
 801981c:	f3bf 8f4f 	dsb	sy
 8019820:	b662      	cpsie	i
 8019822:	60fb      	str	r3, [r7, #12]
}
 8019824:	bf00      	nop
 8019826:	bf00      	nop
 8019828:	e7fd      	b.n	8019826 <vTaskStartScheduler+0xa6>
}
 801982a:	bf00      	nop
 801982c:	3718      	adds	r7, #24
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}
 8019832:	bf00      	nop
 8019834:	0801ecdc 	.word	0x0801ecdc
 8019838:	08019e9d 	.word	0x08019e9d
 801983c:	20002578 	.word	0x20002578
 8019840:	20002574 	.word	0x20002574
 8019844:	20002560 	.word	0x20002560
 8019848:	20002558 	.word	0x20002558

0801984c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801984c:	b480      	push	{r7}
 801984e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8019850:	4b04      	ldr	r3, [pc, #16]	@ (8019864 <vTaskSuspendAll+0x18>)
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	3301      	adds	r3, #1
 8019856:	4a03      	ldr	r2, [pc, #12]	@ (8019864 <vTaskSuspendAll+0x18>)
 8019858:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801985a:	bf00      	nop
 801985c:	46bd      	mov	sp, r7
 801985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019862:	4770      	bx	lr
 8019864:	2000257c 	.word	0x2000257c

08019868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b084      	sub	sp, #16
 801986c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801986e:	2300      	movs	r3, #0
 8019870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019872:	2300      	movs	r3, #0
 8019874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019876:	4b43      	ldr	r3, [pc, #268]	@ (8019984 <xTaskResumeAll+0x11c>)
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d10d      	bne.n	801989a <xTaskResumeAll+0x32>
	__asm volatile
 801987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019882:	b672      	cpsid	i
 8019884:	f383 8811 	msr	BASEPRI, r3
 8019888:	f3bf 8f6f 	isb	sy
 801988c:	f3bf 8f4f 	dsb	sy
 8019890:	b662      	cpsie	i
 8019892:	603b      	str	r3, [r7, #0]
}
 8019894:	bf00      	nop
 8019896:	bf00      	nop
 8019898:	e7fd      	b.n	8019896 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801989a:	f000 ff2f 	bl	801a6fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801989e:	4b39      	ldr	r3, [pc, #228]	@ (8019984 <xTaskResumeAll+0x11c>)
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	3b01      	subs	r3, #1
 80198a4:	4a37      	ldr	r2, [pc, #220]	@ (8019984 <xTaskResumeAll+0x11c>)
 80198a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80198a8:	4b36      	ldr	r3, [pc, #216]	@ (8019984 <xTaskResumeAll+0x11c>)
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d161      	bne.n	8019974 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80198b0:	4b35      	ldr	r3, [pc, #212]	@ (8019988 <xTaskResumeAll+0x120>)
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d05d      	beq.n	8019974 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80198b8:	e02e      	b.n	8019918 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198ba:	4b34      	ldr	r3, [pc, #208]	@ (801998c <xTaskResumeAll+0x124>)
 80198bc:	68db      	ldr	r3, [r3, #12]
 80198be:	68db      	ldr	r3, [r3, #12]
 80198c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	3318      	adds	r3, #24
 80198c6:	4618      	mov	r0, r3
 80198c8:	f7fe fcfa 	bl	80182c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	3304      	adds	r3, #4
 80198d0:	4618      	mov	r0, r3
 80198d2:	f7fe fcf5 	bl	80182c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198da:	2201      	movs	r2, #1
 80198dc:	409a      	lsls	r2, r3
 80198de:	4b2c      	ldr	r3, [pc, #176]	@ (8019990 <xTaskResumeAll+0x128>)
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	4313      	orrs	r3, r2
 80198e4:	4a2a      	ldr	r2, [pc, #168]	@ (8019990 <xTaskResumeAll+0x128>)
 80198e6:	6013      	str	r3, [r2, #0]
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80198ec:	4613      	mov	r3, r2
 80198ee:	009b      	lsls	r3, r3, #2
 80198f0:	4413      	add	r3, r2
 80198f2:	009b      	lsls	r3, r3, #2
 80198f4:	4a27      	ldr	r2, [pc, #156]	@ (8019994 <xTaskResumeAll+0x12c>)
 80198f6:	441a      	add	r2, r3
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	3304      	adds	r3, #4
 80198fc:	4619      	mov	r1, r3
 80198fe:	4610      	mov	r0, r2
 8019900:	f7fe fc81 	bl	8018206 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019908:	4b23      	ldr	r3, [pc, #140]	@ (8019998 <xTaskResumeAll+0x130>)
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801990e:	429a      	cmp	r2, r3
 8019910:	d302      	bcc.n	8019918 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8019912:	4b22      	ldr	r3, [pc, #136]	@ (801999c <xTaskResumeAll+0x134>)
 8019914:	2201      	movs	r2, #1
 8019916:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019918:	4b1c      	ldr	r3, [pc, #112]	@ (801998c <xTaskResumeAll+0x124>)
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d1cc      	bne.n	80198ba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d001      	beq.n	801992a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019926:	f000 fb73 	bl	801a010 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801992a:	4b1d      	ldr	r3, [pc, #116]	@ (80199a0 <xTaskResumeAll+0x138>)
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d010      	beq.n	8019958 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019936:	f000 f859 	bl	80199ec <xTaskIncrementTick>
 801993a:	4603      	mov	r3, r0
 801993c:	2b00      	cmp	r3, #0
 801993e:	d002      	beq.n	8019946 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8019940:	4b16      	ldr	r3, [pc, #88]	@ (801999c <xTaskResumeAll+0x134>)
 8019942:	2201      	movs	r2, #1
 8019944:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	3b01      	subs	r3, #1
 801994a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d1f1      	bne.n	8019936 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8019952:	4b13      	ldr	r3, [pc, #76]	@ (80199a0 <xTaskResumeAll+0x138>)
 8019954:	2200      	movs	r2, #0
 8019956:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019958:	4b10      	ldr	r3, [pc, #64]	@ (801999c <xTaskResumeAll+0x134>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d009      	beq.n	8019974 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019960:	2301      	movs	r3, #1
 8019962:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019964:	4b0f      	ldr	r3, [pc, #60]	@ (80199a4 <xTaskResumeAll+0x13c>)
 8019966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801996a:	601a      	str	r2, [r3, #0]
 801996c:	f3bf 8f4f 	dsb	sy
 8019970:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019974:	f000 fef8 	bl	801a768 <vPortExitCritical>

	return xAlreadyYielded;
 8019978:	68bb      	ldr	r3, [r7, #8]
}
 801997a:	4618      	mov	r0, r3
 801997c:	3710      	adds	r7, #16
 801997e:	46bd      	mov	sp, r7
 8019980:	bd80      	pop	{r7, pc}
 8019982:	bf00      	nop
 8019984:	2000257c 	.word	0x2000257c
 8019988:	20002554 	.word	0x20002554
 801998c:	20002514 	.word	0x20002514
 8019990:	2000255c 	.word	0x2000255c
 8019994:	20002458 	.word	0x20002458
 8019998:	20002454 	.word	0x20002454
 801999c:	20002568 	.word	0x20002568
 80199a0:	20002564 	.word	0x20002564
 80199a4:	e000ed04 	.word	0xe000ed04

080199a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80199a8:	b480      	push	{r7}
 80199aa:	b083      	sub	sp, #12
 80199ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80199ae:	4b05      	ldr	r3, [pc, #20]	@ (80199c4 <xTaskGetTickCount+0x1c>)
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80199b4:	687b      	ldr	r3, [r7, #4]
}
 80199b6:	4618      	mov	r0, r3
 80199b8:	370c      	adds	r7, #12
 80199ba:	46bd      	mov	sp, r7
 80199bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c0:	4770      	bx	lr
 80199c2:	bf00      	nop
 80199c4:	20002558 	.word	0x20002558

080199c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b082      	sub	sp, #8
 80199cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80199ce:	f000 ff7d 	bl	801a8cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80199d2:	2300      	movs	r3, #0
 80199d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80199d6:	4b04      	ldr	r3, [pc, #16]	@ (80199e8 <xTaskGetTickCountFromISR+0x20>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80199dc:	683b      	ldr	r3, [r7, #0]
}
 80199de:	4618      	mov	r0, r3
 80199e0:	3708      	adds	r7, #8
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}
 80199e6:	bf00      	nop
 80199e8:	20002558 	.word	0x20002558

080199ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b086      	sub	sp, #24
 80199f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80199f2:	2300      	movs	r3, #0
 80199f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80199f6:	4b50      	ldr	r3, [pc, #320]	@ (8019b38 <xTaskIncrementTick+0x14c>)
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	f040 808b 	bne.w	8019b16 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019a00:	4b4e      	ldr	r3, [pc, #312]	@ (8019b3c <xTaskIncrementTick+0x150>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	3301      	adds	r3, #1
 8019a06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019a08:	4a4c      	ldr	r2, [pc, #304]	@ (8019b3c <xTaskIncrementTick+0x150>)
 8019a0a:	693b      	ldr	r3, [r7, #16]
 8019a0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019a0e:	693b      	ldr	r3, [r7, #16]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d123      	bne.n	8019a5c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8019a14:	4b4a      	ldr	r3, [pc, #296]	@ (8019b40 <xTaskIncrementTick+0x154>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d00d      	beq.n	8019a3a <xTaskIncrementTick+0x4e>
	__asm volatile
 8019a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a22:	b672      	cpsid	i
 8019a24:	f383 8811 	msr	BASEPRI, r3
 8019a28:	f3bf 8f6f 	isb	sy
 8019a2c:	f3bf 8f4f 	dsb	sy
 8019a30:	b662      	cpsie	i
 8019a32:	603b      	str	r3, [r7, #0]
}
 8019a34:	bf00      	nop
 8019a36:	bf00      	nop
 8019a38:	e7fd      	b.n	8019a36 <xTaskIncrementTick+0x4a>
 8019a3a:	4b41      	ldr	r3, [pc, #260]	@ (8019b40 <xTaskIncrementTick+0x154>)
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	60fb      	str	r3, [r7, #12]
 8019a40:	4b40      	ldr	r3, [pc, #256]	@ (8019b44 <xTaskIncrementTick+0x158>)
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	4a3e      	ldr	r2, [pc, #248]	@ (8019b40 <xTaskIncrementTick+0x154>)
 8019a46:	6013      	str	r3, [r2, #0]
 8019a48:	4a3e      	ldr	r2, [pc, #248]	@ (8019b44 <xTaskIncrementTick+0x158>)
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	6013      	str	r3, [r2, #0]
 8019a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8019b48 <xTaskIncrementTick+0x15c>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	3301      	adds	r3, #1
 8019a54:	4a3c      	ldr	r2, [pc, #240]	@ (8019b48 <xTaskIncrementTick+0x15c>)
 8019a56:	6013      	str	r3, [r2, #0]
 8019a58:	f000 fada 	bl	801a010 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8019b4c <xTaskIncrementTick+0x160>)
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	693a      	ldr	r2, [r7, #16]
 8019a62:	429a      	cmp	r2, r3
 8019a64:	d348      	bcc.n	8019af8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019a66:	4b36      	ldr	r3, [pc, #216]	@ (8019b40 <xTaskIncrementTick+0x154>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d104      	bne.n	8019a7a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a70:	4b36      	ldr	r3, [pc, #216]	@ (8019b4c <xTaskIncrementTick+0x160>)
 8019a72:	f04f 32ff 	mov.w	r2, #4294967295
 8019a76:	601a      	str	r2, [r3, #0]
					break;
 8019a78:	e03e      	b.n	8019af8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a7a:	4b31      	ldr	r3, [pc, #196]	@ (8019b40 <xTaskIncrementTick+0x154>)
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	68db      	ldr	r3, [r3, #12]
 8019a80:	68db      	ldr	r3, [r3, #12]
 8019a82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019a84:	68bb      	ldr	r3, [r7, #8]
 8019a86:	685b      	ldr	r3, [r3, #4]
 8019a88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019a8a:	693a      	ldr	r2, [r7, #16]
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	429a      	cmp	r2, r3
 8019a90:	d203      	bcs.n	8019a9a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019a92:	4a2e      	ldr	r2, [pc, #184]	@ (8019b4c <xTaskIncrementTick+0x160>)
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019a98:	e02e      	b.n	8019af8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019a9a:	68bb      	ldr	r3, [r7, #8]
 8019a9c:	3304      	adds	r3, #4
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f7fe fc0e 	bl	80182c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019aa4:	68bb      	ldr	r3, [r7, #8]
 8019aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d004      	beq.n	8019ab6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019aac:	68bb      	ldr	r3, [r7, #8]
 8019aae:	3318      	adds	r3, #24
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	f7fe fc05 	bl	80182c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019ab6:	68bb      	ldr	r3, [r7, #8]
 8019ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019aba:	2201      	movs	r2, #1
 8019abc:	409a      	lsls	r2, r3
 8019abe:	4b24      	ldr	r3, [pc, #144]	@ (8019b50 <xTaskIncrementTick+0x164>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	4313      	orrs	r3, r2
 8019ac4:	4a22      	ldr	r2, [pc, #136]	@ (8019b50 <xTaskIncrementTick+0x164>)
 8019ac6:	6013      	str	r3, [r2, #0]
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019acc:	4613      	mov	r3, r2
 8019ace:	009b      	lsls	r3, r3, #2
 8019ad0:	4413      	add	r3, r2
 8019ad2:	009b      	lsls	r3, r3, #2
 8019ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8019b54 <xTaskIncrementTick+0x168>)
 8019ad6:	441a      	add	r2, r3
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	3304      	adds	r3, #4
 8019adc:	4619      	mov	r1, r3
 8019ade:	4610      	mov	r0, r2
 8019ae0:	f7fe fb91 	bl	8018206 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8019b58 <xTaskIncrementTick+0x16c>)
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d3b9      	bcc.n	8019a66 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8019af2:	2301      	movs	r3, #1
 8019af4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019af6:	e7b6      	b.n	8019a66 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019af8:	4b17      	ldr	r3, [pc, #92]	@ (8019b58 <xTaskIncrementTick+0x16c>)
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019afe:	4915      	ldr	r1, [pc, #84]	@ (8019b54 <xTaskIncrementTick+0x168>)
 8019b00:	4613      	mov	r3, r2
 8019b02:	009b      	lsls	r3, r3, #2
 8019b04:	4413      	add	r3, r2
 8019b06:	009b      	lsls	r3, r3, #2
 8019b08:	440b      	add	r3, r1
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	2b01      	cmp	r3, #1
 8019b0e:	d907      	bls.n	8019b20 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8019b10:	2301      	movs	r3, #1
 8019b12:	617b      	str	r3, [r7, #20]
 8019b14:	e004      	b.n	8019b20 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8019b16:	4b11      	ldr	r3, [pc, #68]	@ (8019b5c <xTaskIncrementTick+0x170>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	3301      	adds	r3, #1
 8019b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8019b5c <xTaskIncrementTick+0x170>)
 8019b1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019b20:	4b0f      	ldr	r3, [pc, #60]	@ (8019b60 <xTaskIncrementTick+0x174>)
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d001      	beq.n	8019b2c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8019b28:	2301      	movs	r3, #1
 8019b2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8019b2c:	697b      	ldr	r3, [r7, #20]
}
 8019b2e:	4618      	mov	r0, r3
 8019b30:	3718      	adds	r7, #24
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bd80      	pop	{r7, pc}
 8019b36:	bf00      	nop
 8019b38:	2000257c 	.word	0x2000257c
 8019b3c:	20002558 	.word	0x20002558
 8019b40:	2000250c 	.word	0x2000250c
 8019b44:	20002510 	.word	0x20002510
 8019b48:	2000256c 	.word	0x2000256c
 8019b4c:	20002574 	.word	0x20002574
 8019b50:	2000255c 	.word	0x2000255c
 8019b54:	20002458 	.word	0x20002458
 8019b58:	20002454 	.word	0x20002454
 8019b5c:	20002564 	.word	0x20002564
 8019b60:	20002568 	.word	0x20002568

08019b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b088      	sub	sp, #32
 8019b68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8019c58 <vTaskSwitchContext+0xf4>)
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d003      	beq.n	8019b7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019b72:	4b3a      	ldr	r3, [pc, #232]	@ (8019c5c <vTaskSwitchContext+0xf8>)
 8019b74:	2201      	movs	r2, #1
 8019b76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019b78:	e069      	b.n	8019c4e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8019b7a:	4b38      	ldr	r3, [pc, #224]	@ (8019c5c <vTaskSwitchContext+0xf8>)
 8019b7c:	2200      	movs	r2, #0
 8019b7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8019b80:	4b37      	ldr	r3, [pc, #220]	@ (8019c60 <vTaskSwitchContext+0xfc>)
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b86:	61fb      	str	r3, [r7, #28]
 8019b88:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8019b8c:	61bb      	str	r3, [r7, #24]
 8019b8e:	69fb      	ldr	r3, [r7, #28]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	69ba      	ldr	r2, [r7, #24]
 8019b94:	429a      	cmp	r2, r3
 8019b96:	d111      	bne.n	8019bbc <vTaskSwitchContext+0x58>
 8019b98:	69fb      	ldr	r3, [r7, #28]
 8019b9a:	3304      	adds	r3, #4
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	69ba      	ldr	r2, [r7, #24]
 8019ba0:	429a      	cmp	r2, r3
 8019ba2:	d10b      	bne.n	8019bbc <vTaskSwitchContext+0x58>
 8019ba4:	69fb      	ldr	r3, [r7, #28]
 8019ba6:	3308      	adds	r3, #8
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	69ba      	ldr	r2, [r7, #24]
 8019bac:	429a      	cmp	r2, r3
 8019bae:	d105      	bne.n	8019bbc <vTaskSwitchContext+0x58>
 8019bb0:	69fb      	ldr	r3, [r7, #28]
 8019bb2:	330c      	adds	r3, #12
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	69ba      	ldr	r2, [r7, #24]
 8019bb8:	429a      	cmp	r2, r3
 8019bba:	d008      	beq.n	8019bce <vTaskSwitchContext+0x6a>
 8019bbc:	4b28      	ldr	r3, [pc, #160]	@ (8019c60 <vTaskSwitchContext+0xfc>)
 8019bbe:	681a      	ldr	r2, [r3, #0]
 8019bc0:	4b27      	ldr	r3, [pc, #156]	@ (8019c60 <vTaskSwitchContext+0xfc>)
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	3334      	adds	r3, #52	@ 0x34
 8019bc6:	4619      	mov	r1, r3
 8019bc8:	4610      	mov	r0, r2
 8019bca:	f7e7 fddf 	bl	800178c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019bce:	4b25      	ldr	r3, [pc, #148]	@ (8019c64 <vTaskSwitchContext+0x100>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	fab3 f383 	clz	r3, r3
 8019bda:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8019bdc:	7afb      	ldrb	r3, [r7, #11]
 8019bde:	f1c3 031f 	rsb	r3, r3, #31
 8019be2:	617b      	str	r3, [r7, #20]
 8019be4:	4920      	ldr	r1, [pc, #128]	@ (8019c68 <vTaskSwitchContext+0x104>)
 8019be6:	697a      	ldr	r2, [r7, #20]
 8019be8:	4613      	mov	r3, r2
 8019bea:	009b      	lsls	r3, r3, #2
 8019bec:	4413      	add	r3, r2
 8019bee:	009b      	lsls	r3, r3, #2
 8019bf0:	440b      	add	r3, r1
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d10d      	bne.n	8019c14 <vTaskSwitchContext+0xb0>
	__asm volatile
 8019bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019bfc:	b672      	cpsid	i
 8019bfe:	f383 8811 	msr	BASEPRI, r3
 8019c02:	f3bf 8f6f 	isb	sy
 8019c06:	f3bf 8f4f 	dsb	sy
 8019c0a:	b662      	cpsie	i
 8019c0c:	607b      	str	r3, [r7, #4]
}
 8019c0e:	bf00      	nop
 8019c10:	bf00      	nop
 8019c12:	e7fd      	b.n	8019c10 <vTaskSwitchContext+0xac>
 8019c14:	697a      	ldr	r2, [r7, #20]
 8019c16:	4613      	mov	r3, r2
 8019c18:	009b      	lsls	r3, r3, #2
 8019c1a:	4413      	add	r3, r2
 8019c1c:	009b      	lsls	r3, r3, #2
 8019c1e:	4a12      	ldr	r2, [pc, #72]	@ (8019c68 <vTaskSwitchContext+0x104>)
 8019c20:	4413      	add	r3, r2
 8019c22:	613b      	str	r3, [r7, #16]
 8019c24:	693b      	ldr	r3, [r7, #16]
 8019c26:	685b      	ldr	r3, [r3, #4]
 8019c28:	685a      	ldr	r2, [r3, #4]
 8019c2a:	693b      	ldr	r3, [r7, #16]
 8019c2c:	605a      	str	r2, [r3, #4]
 8019c2e:	693b      	ldr	r3, [r7, #16]
 8019c30:	685a      	ldr	r2, [r3, #4]
 8019c32:	693b      	ldr	r3, [r7, #16]
 8019c34:	3308      	adds	r3, #8
 8019c36:	429a      	cmp	r2, r3
 8019c38:	d104      	bne.n	8019c44 <vTaskSwitchContext+0xe0>
 8019c3a:	693b      	ldr	r3, [r7, #16]
 8019c3c:	685b      	ldr	r3, [r3, #4]
 8019c3e:	685a      	ldr	r2, [r3, #4]
 8019c40:	693b      	ldr	r3, [r7, #16]
 8019c42:	605a      	str	r2, [r3, #4]
 8019c44:	693b      	ldr	r3, [r7, #16]
 8019c46:	685b      	ldr	r3, [r3, #4]
 8019c48:	68db      	ldr	r3, [r3, #12]
 8019c4a:	4a05      	ldr	r2, [pc, #20]	@ (8019c60 <vTaskSwitchContext+0xfc>)
 8019c4c:	6013      	str	r3, [r2, #0]
}
 8019c4e:	bf00      	nop
 8019c50:	3720      	adds	r7, #32
 8019c52:	46bd      	mov	sp, r7
 8019c54:	bd80      	pop	{r7, pc}
 8019c56:	bf00      	nop
 8019c58:	2000257c 	.word	0x2000257c
 8019c5c:	20002568 	.word	0x20002568
 8019c60:	20002454 	.word	0x20002454
 8019c64:	2000255c 	.word	0x2000255c
 8019c68:	20002458 	.word	0x20002458

08019c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d10d      	bne.n	8019c98 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8019c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c80:	b672      	cpsid	i
 8019c82:	f383 8811 	msr	BASEPRI, r3
 8019c86:	f3bf 8f6f 	isb	sy
 8019c8a:	f3bf 8f4f 	dsb	sy
 8019c8e:	b662      	cpsie	i
 8019c90:	60fb      	str	r3, [r7, #12]
}
 8019c92:	bf00      	nop
 8019c94:	bf00      	nop
 8019c96:	e7fd      	b.n	8019c94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019c98:	4b07      	ldr	r3, [pc, #28]	@ (8019cb8 <vTaskPlaceOnEventList+0x4c>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	3318      	adds	r3, #24
 8019c9e:	4619      	mov	r1, r3
 8019ca0:	6878      	ldr	r0, [r7, #4]
 8019ca2:	f7fe fad4 	bl	801824e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019ca6:	2101      	movs	r1, #1
 8019ca8:	6838      	ldr	r0, [r7, #0]
 8019caa:	f000 fbaf 	bl	801a40c <prvAddCurrentTaskToDelayedList>
}
 8019cae:	bf00      	nop
 8019cb0:	3710      	adds	r7, #16
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd80      	pop	{r7, pc}
 8019cb6:	bf00      	nop
 8019cb8:	20002454 	.word	0x20002454

08019cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b086      	sub	sp, #24
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	68db      	ldr	r3, [r3, #12]
 8019cc8:	68db      	ldr	r3, [r3, #12]
 8019cca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019ccc:	693b      	ldr	r3, [r7, #16]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d10d      	bne.n	8019cee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8019cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cd6:	b672      	cpsid	i
 8019cd8:	f383 8811 	msr	BASEPRI, r3
 8019cdc:	f3bf 8f6f 	isb	sy
 8019ce0:	f3bf 8f4f 	dsb	sy
 8019ce4:	b662      	cpsie	i
 8019ce6:	60fb      	str	r3, [r7, #12]
}
 8019ce8:	bf00      	nop
 8019cea:	bf00      	nop
 8019cec:	e7fd      	b.n	8019cea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019cee:	693b      	ldr	r3, [r7, #16]
 8019cf0:	3318      	adds	r3, #24
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7fe fae4 	bl	80182c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8019d70 <xTaskRemoveFromEventList+0xb4>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d11c      	bne.n	8019d3a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019d00:	693b      	ldr	r3, [r7, #16]
 8019d02:	3304      	adds	r3, #4
 8019d04:	4618      	mov	r0, r3
 8019d06:	f7fe fadb 	bl	80182c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019d0a:	693b      	ldr	r3, [r7, #16]
 8019d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d0e:	2201      	movs	r2, #1
 8019d10:	409a      	lsls	r2, r3
 8019d12:	4b18      	ldr	r3, [pc, #96]	@ (8019d74 <xTaskRemoveFromEventList+0xb8>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	4313      	orrs	r3, r2
 8019d18:	4a16      	ldr	r2, [pc, #88]	@ (8019d74 <xTaskRemoveFromEventList+0xb8>)
 8019d1a:	6013      	str	r3, [r2, #0]
 8019d1c:	693b      	ldr	r3, [r7, #16]
 8019d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019d20:	4613      	mov	r3, r2
 8019d22:	009b      	lsls	r3, r3, #2
 8019d24:	4413      	add	r3, r2
 8019d26:	009b      	lsls	r3, r3, #2
 8019d28:	4a13      	ldr	r2, [pc, #76]	@ (8019d78 <xTaskRemoveFromEventList+0xbc>)
 8019d2a:	441a      	add	r2, r3
 8019d2c:	693b      	ldr	r3, [r7, #16]
 8019d2e:	3304      	adds	r3, #4
 8019d30:	4619      	mov	r1, r3
 8019d32:	4610      	mov	r0, r2
 8019d34:	f7fe fa67 	bl	8018206 <vListInsertEnd>
 8019d38:	e005      	b.n	8019d46 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	3318      	adds	r3, #24
 8019d3e:	4619      	mov	r1, r3
 8019d40:	480e      	ldr	r0, [pc, #56]	@ (8019d7c <xTaskRemoveFromEventList+0xc0>)
 8019d42:	f7fe fa60 	bl	8018206 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019d46:	693b      	ldr	r3, [r7, #16]
 8019d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8019d80 <xTaskRemoveFromEventList+0xc4>)
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d50:	429a      	cmp	r2, r3
 8019d52:	d905      	bls.n	8019d60 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019d54:	2301      	movs	r3, #1
 8019d56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019d58:	4b0a      	ldr	r3, [pc, #40]	@ (8019d84 <xTaskRemoveFromEventList+0xc8>)
 8019d5a:	2201      	movs	r2, #1
 8019d5c:	601a      	str	r2, [r3, #0]
 8019d5e:	e001      	b.n	8019d64 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8019d60:	2300      	movs	r3, #0
 8019d62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019d64:	697b      	ldr	r3, [r7, #20]
}
 8019d66:	4618      	mov	r0, r3
 8019d68:	3718      	adds	r7, #24
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd80      	pop	{r7, pc}
 8019d6e:	bf00      	nop
 8019d70:	2000257c 	.word	0x2000257c
 8019d74:	2000255c 	.word	0x2000255c
 8019d78:	20002458 	.word	0x20002458
 8019d7c:	20002514 	.word	0x20002514
 8019d80:	20002454 	.word	0x20002454
 8019d84:	20002568 	.word	0x20002568

08019d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019d88:	b480      	push	{r7}
 8019d8a:	b083      	sub	sp, #12
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019d90:	4b06      	ldr	r3, [pc, #24]	@ (8019dac <vTaskInternalSetTimeOutState+0x24>)
 8019d92:	681a      	ldr	r2, [r3, #0]
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019d98:	4b05      	ldr	r3, [pc, #20]	@ (8019db0 <vTaskInternalSetTimeOutState+0x28>)
 8019d9a:	681a      	ldr	r2, [r3, #0]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	605a      	str	r2, [r3, #4]
}
 8019da0:	bf00      	nop
 8019da2:	370c      	adds	r7, #12
 8019da4:	46bd      	mov	sp, r7
 8019da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019daa:	4770      	bx	lr
 8019dac:	2000256c 	.word	0x2000256c
 8019db0:	20002558 	.word	0x20002558

08019db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b088      	sub	sp, #32
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
 8019dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d10d      	bne.n	8019de0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8019dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dc8:	b672      	cpsid	i
 8019dca:	f383 8811 	msr	BASEPRI, r3
 8019dce:	f3bf 8f6f 	isb	sy
 8019dd2:	f3bf 8f4f 	dsb	sy
 8019dd6:	b662      	cpsie	i
 8019dd8:	613b      	str	r3, [r7, #16]
}
 8019dda:	bf00      	nop
 8019ddc:	bf00      	nop
 8019dde:	e7fd      	b.n	8019ddc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8019de0:	683b      	ldr	r3, [r7, #0]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d10d      	bne.n	8019e02 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8019de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dea:	b672      	cpsid	i
 8019dec:	f383 8811 	msr	BASEPRI, r3
 8019df0:	f3bf 8f6f 	isb	sy
 8019df4:	f3bf 8f4f 	dsb	sy
 8019df8:	b662      	cpsie	i
 8019dfa:	60fb      	str	r3, [r7, #12]
}
 8019dfc:	bf00      	nop
 8019dfe:	bf00      	nop
 8019e00:	e7fd      	b.n	8019dfe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8019e02:	f000 fc7b 	bl	801a6fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019e06:	4b1d      	ldr	r3, [pc, #116]	@ (8019e7c <xTaskCheckForTimeOut+0xc8>)
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	685b      	ldr	r3, [r3, #4]
 8019e10:	69ba      	ldr	r2, [r7, #24]
 8019e12:	1ad3      	subs	r3, r2, r3
 8019e14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019e16:	683b      	ldr	r3, [r7, #0]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e1e:	d102      	bne.n	8019e26 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019e20:	2300      	movs	r3, #0
 8019e22:	61fb      	str	r3, [r7, #28]
 8019e24:	e023      	b.n	8019e6e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681a      	ldr	r2, [r3, #0]
 8019e2a:	4b15      	ldr	r3, [pc, #84]	@ (8019e80 <xTaskCheckForTimeOut+0xcc>)
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	429a      	cmp	r2, r3
 8019e30:	d007      	beq.n	8019e42 <xTaskCheckForTimeOut+0x8e>
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	685b      	ldr	r3, [r3, #4]
 8019e36:	69ba      	ldr	r2, [r7, #24]
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d302      	bcc.n	8019e42 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019e3c:	2301      	movs	r3, #1
 8019e3e:	61fb      	str	r3, [r7, #28]
 8019e40:	e015      	b.n	8019e6e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019e42:	683b      	ldr	r3, [r7, #0]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	697a      	ldr	r2, [r7, #20]
 8019e48:	429a      	cmp	r2, r3
 8019e4a:	d20b      	bcs.n	8019e64 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	681a      	ldr	r2, [r3, #0]
 8019e50:	697b      	ldr	r3, [r7, #20]
 8019e52:	1ad2      	subs	r2, r2, r3
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019e58:	6878      	ldr	r0, [r7, #4]
 8019e5a:	f7ff ff95 	bl	8019d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019e5e:	2300      	movs	r3, #0
 8019e60:	61fb      	str	r3, [r7, #28]
 8019e62:	e004      	b.n	8019e6e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8019e64:	683b      	ldr	r3, [r7, #0]
 8019e66:	2200      	movs	r2, #0
 8019e68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019e6a:	2301      	movs	r3, #1
 8019e6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019e6e:	f000 fc7b 	bl	801a768 <vPortExitCritical>

	return xReturn;
 8019e72:	69fb      	ldr	r3, [r7, #28]
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3720      	adds	r7, #32
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}
 8019e7c:	20002558 	.word	0x20002558
 8019e80:	2000256c 	.word	0x2000256c

08019e84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019e84:	b480      	push	{r7}
 8019e86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019e88:	4b03      	ldr	r3, [pc, #12]	@ (8019e98 <vTaskMissedYield+0x14>)
 8019e8a:	2201      	movs	r2, #1
 8019e8c:	601a      	str	r2, [r3, #0]
}
 8019e8e:	bf00      	nop
 8019e90:	46bd      	mov	sp, r7
 8019e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e96:	4770      	bx	lr
 8019e98:	20002568 	.word	0x20002568

08019e9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b082      	sub	sp, #8
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019ea4:	f000 f854 	bl	8019f50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019ea8:	4b07      	ldr	r3, [pc, #28]	@ (8019ec8 <prvIdleTask+0x2c>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	2b01      	cmp	r3, #1
 8019eae:	d907      	bls.n	8019ec0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8019eb0:	4b06      	ldr	r3, [pc, #24]	@ (8019ecc <prvIdleTask+0x30>)
 8019eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019eb6:	601a      	str	r2, [r3, #0]
 8019eb8:	f3bf 8f4f 	dsb	sy
 8019ebc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8019ec0:	f7e7 fc5d 	bl	800177e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8019ec4:	e7ee      	b.n	8019ea4 <prvIdleTask+0x8>
 8019ec6:	bf00      	nop
 8019ec8:	20002458 	.word	0x20002458
 8019ecc:	e000ed04 	.word	0xe000ed04

08019ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b082      	sub	sp, #8
 8019ed4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	607b      	str	r3, [r7, #4]
 8019eda:	e00c      	b.n	8019ef6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019edc:	687a      	ldr	r2, [r7, #4]
 8019ede:	4613      	mov	r3, r2
 8019ee0:	009b      	lsls	r3, r3, #2
 8019ee2:	4413      	add	r3, r2
 8019ee4:	009b      	lsls	r3, r3, #2
 8019ee6:	4a12      	ldr	r2, [pc, #72]	@ (8019f30 <prvInitialiseTaskLists+0x60>)
 8019ee8:	4413      	add	r3, r2
 8019eea:	4618      	mov	r0, r3
 8019eec:	f7fe f95e 	bl	80181ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	3301      	adds	r3, #1
 8019ef4:	607b      	str	r3, [r7, #4]
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	2b06      	cmp	r3, #6
 8019efa:	d9ef      	bls.n	8019edc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019efc:	480d      	ldr	r0, [pc, #52]	@ (8019f34 <prvInitialiseTaskLists+0x64>)
 8019efe:	f7fe f955 	bl	80181ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019f02:	480d      	ldr	r0, [pc, #52]	@ (8019f38 <prvInitialiseTaskLists+0x68>)
 8019f04:	f7fe f952 	bl	80181ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019f08:	480c      	ldr	r0, [pc, #48]	@ (8019f3c <prvInitialiseTaskLists+0x6c>)
 8019f0a:	f7fe f94f 	bl	80181ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019f0e:	480c      	ldr	r0, [pc, #48]	@ (8019f40 <prvInitialiseTaskLists+0x70>)
 8019f10:	f7fe f94c 	bl	80181ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019f14:	480b      	ldr	r0, [pc, #44]	@ (8019f44 <prvInitialiseTaskLists+0x74>)
 8019f16:	f7fe f949 	bl	80181ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8019f48 <prvInitialiseTaskLists+0x78>)
 8019f1c:	4a05      	ldr	r2, [pc, #20]	@ (8019f34 <prvInitialiseTaskLists+0x64>)
 8019f1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019f20:	4b0a      	ldr	r3, [pc, #40]	@ (8019f4c <prvInitialiseTaskLists+0x7c>)
 8019f22:	4a05      	ldr	r2, [pc, #20]	@ (8019f38 <prvInitialiseTaskLists+0x68>)
 8019f24:	601a      	str	r2, [r3, #0]
}
 8019f26:	bf00      	nop
 8019f28:	3708      	adds	r7, #8
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}
 8019f2e:	bf00      	nop
 8019f30:	20002458 	.word	0x20002458
 8019f34:	200024e4 	.word	0x200024e4
 8019f38:	200024f8 	.word	0x200024f8
 8019f3c:	20002514 	.word	0x20002514
 8019f40:	20002528 	.word	0x20002528
 8019f44:	20002540 	.word	0x20002540
 8019f48:	2000250c 	.word	0x2000250c
 8019f4c:	20002510 	.word	0x20002510

08019f50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019f56:	e019      	b.n	8019f8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019f58:	f000 fbd0 	bl	801a6fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f5c:	4b10      	ldr	r3, [pc, #64]	@ (8019fa0 <prvCheckTasksWaitingTermination+0x50>)
 8019f5e:	68db      	ldr	r3, [r3, #12]
 8019f60:	68db      	ldr	r3, [r3, #12]
 8019f62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	3304      	adds	r3, #4
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7fe f9a9 	bl	80182c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8019fa4 <prvCheckTasksWaitingTermination+0x54>)
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	3b01      	subs	r3, #1
 8019f74:	4a0b      	ldr	r2, [pc, #44]	@ (8019fa4 <prvCheckTasksWaitingTermination+0x54>)
 8019f76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019f78:	4b0b      	ldr	r3, [pc, #44]	@ (8019fa8 <prvCheckTasksWaitingTermination+0x58>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	3b01      	subs	r3, #1
 8019f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8019fa8 <prvCheckTasksWaitingTermination+0x58>)
 8019f80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019f82:	f000 fbf1 	bl	801a768 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019f86:	6878      	ldr	r0, [r7, #4]
 8019f88:	f000 f810 	bl	8019fac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019f8c:	4b06      	ldr	r3, [pc, #24]	@ (8019fa8 <prvCheckTasksWaitingTermination+0x58>)
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d1e1      	bne.n	8019f58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019f94:	bf00      	nop
 8019f96:	bf00      	nop
 8019f98:	3708      	adds	r7, #8
 8019f9a:	46bd      	mov	sp, r7
 8019f9c:	bd80      	pop	{r7, pc}
 8019f9e:	bf00      	nop
 8019fa0:	20002528 	.word	0x20002528
 8019fa4:	20002554 	.word	0x20002554
 8019fa8:	2000253c 	.word	0x2000253c

08019fac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b084      	sub	sp, #16
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d108      	bne.n	8019fd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f000 fd9a 	bl	801aafc <vPortFree>
				vPortFree( pxTCB );
 8019fc8:	6878      	ldr	r0, [r7, #4]
 8019fca:	f000 fd97 	bl	801aafc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019fce:	e01b      	b.n	801a008 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019fd6:	2b01      	cmp	r3, #1
 8019fd8:	d103      	bne.n	8019fe2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8019fda:	6878      	ldr	r0, [r7, #4]
 8019fdc:	f000 fd8e 	bl	801aafc <vPortFree>
	}
 8019fe0:	e012      	b.n	801a008 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019fe8:	2b02      	cmp	r3, #2
 8019fea:	d00d      	beq.n	801a008 <prvDeleteTCB+0x5c>
	__asm volatile
 8019fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ff0:	b672      	cpsid	i
 8019ff2:	f383 8811 	msr	BASEPRI, r3
 8019ff6:	f3bf 8f6f 	isb	sy
 8019ffa:	f3bf 8f4f 	dsb	sy
 8019ffe:	b662      	cpsie	i
 801a000:	60fb      	str	r3, [r7, #12]
}
 801a002:	bf00      	nop
 801a004:	bf00      	nop
 801a006:	e7fd      	b.n	801a004 <prvDeleteTCB+0x58>
	}
 801a008:	bf00      	nop
 801a00a:	3710      	adds	r7, #16
 801a00c:	46bd      	mov	sp, r7
 801a00e:	bd80      	pop	{r7, pc}

0801a010 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a010:	b480      	push	{r7}
 801a012:	b083      	sub	sp, #12
 801a014:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a016:	4b0c      	ldr	r3, [pc, #48]	@ (801a048 <prvResetNextTaskUnblockTime+0x38>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d104      	bne.n	801a02a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a020:	4b0a      	ldr	r3, [pc, #40]	@ (801a04c <prvResetNextTaskUnblockTime+0x3c>)
 801a022:	f04f 32ff 	mov.w	r2, #4294967295
 801a026:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a028:	e008      	b.n	801a03c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a02a:	4b07      	ldr	r3, [pc, #28]	@ (801a048 <prvResetNextTaskUnblockTime+0x38>)
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	68db      	ldr	r3, [r3, #12]
 801a030:	68db      	ldr	r3, [r3, #12]
 801a032:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	685b      	ldr	r3, [r3, #4]
 801a038:	4a04      	ldr	r2, [pc, #16]	@ (801a04c <prvResetNextTaskUnblockTime+0x3c>)
 801a03a:	6013      	str	r3, [r2, #0]
}
 801a03c:	bf00      	nop
 801a03e:	370c      	adds	r7, #12
 801a040:	46bd      	mov	sp, r7
 801a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a046:	4770      	bx	lr
 801a048:	2000250c 	.word	0x2000250c
 801a04c:	20002574 	.word	0x20002574

0801a050 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a050:	b480      	push	{r7}
 801a052:	b083      	sub	sp, #12
 801a054:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a056:	4b0b      	ldr	r3, [pc, #44]	@ (801a084 <xTaskGetSchedulerState+0x34>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d102      	bne.n	801a064 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a05e:	2301      	movs	r3, #1
 801a060:	607b      	str	r3, [r7, #4]
 801a062:	e008      	b.n	801a076 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a064:	4b08      	ldr	r3, [pc, #32]	@ (801a088 <xTaskGetSchedulerState+0x38>)
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d102      	bne.n	801a072 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a06c:	2302      	movs	r3, #2
 801a06e:	607b      	str	r3, [r7, #4]
 801a070:	e001      	b.n	801a076 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a072:	2300      	movs	r3, #0
 801a074:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a076:	687b      	ldr	r3, [r7, #4]
	}
 801a078:	4618      	mov	r0, r3
 801a07a:	370c      	adds	r7, #12
 801a07c:	46bd      	mov	sp, r7
 801a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a082:	4770      	bx	lr
 801a084:	20002560 	.word	0x20002560
 801a088:	2000257c 	.word	0x2000257c

0801a08c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b084      	sub	sp, #16
 801a090:	af00      	add	r7, sp, #0
 801a092:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a098:	2300      	movs	r3, #0
 801a09a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d069      	beq.n	801a176 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a0a2:	68bb      	ldr	r3, [r7, #8]
 801a0a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0a6:	4b36      	ldr	r3, [pc, #216]	@ (801a180 <xTaskPriorityInherit+0xf4>)
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0ac:	429a      	cmp	r2, r3
 801a0ae:	d259      	bcs.n	801a164 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a0b0:	68bb      	ldr	r3, [r7, #8]
 801a0b2:	699b      	ldr	r3, [r3, #24]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	db06      	blt.n	801a0c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a0b8:	4b31      	ldr	r3, [pc, #196]	@ (801a180 <xTaskPriorityInherit+0xf4>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0be:	f1c3 0207 	rsb	r2, r3, #7
 801a0c2:	68bb      	ldr	r3, [r7, #8]
 801a0c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	6959      	ldr	r1, [r3, #20]
 801a0ca:	68bb      	ldr	r3, [r7, #8]
 801a0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0ce:	4613      	mov	r3, r2
 801a0d0:	009b      	lsls	r3, r3, #2
 801a0d2:	4413      	add	r3, r2
 801a0d4:	009b      	lsls	r3, r3, #2
 801a0d6:	4a2b      	ldr	r2, [pc, #172]	@ (801a184 <xTaskPriorityInherit+0xf8>)
 801a0d8:	4413      	add	r3, r2
 801a0da:	4299      	cmp	r1, r3
 801a0dc:	d13a      	bne.n	801a154 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a0de:	68bb      	ldr	r3, [r7, #8]
 801a0e0:	3304      	adds	r3, #4
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	f7fe f8ec 	bl	80182c0 <uxListRemove>
 801a0e8:	4603      	mov	r3, r0
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d115      	bne.n	801a11a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801a0ee:	68bb      	ldr	r3, [r7, #8]
 801a0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0f2:	4924      	ldr	r1, [pc, #144]	@ (801a184 <xTaskPriorityInherit+0xf8>)
 801a0f4:	4613      	mov	r3, r2
 801a0f6:	009b      	lsls	r3, r3, #2
 801a0f8:	4413      	add	r3, r2
 801a0fa:	009b      	lsls	r3, r3, #2
 801a0fc:	440b      	add	r3, r1
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d10a      	bne.n	801a11a <xTaskPriorityInherit+0x8e>
 801a104:	68bb      	ldr	r3, [r7, #8]
 801a106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a108:	2201      	movs	r2, #1
 801a10a:	fa02 f303 	lsl.w	r3, r2, r3
 801a10e:	43da      	mvns	r2, r3
 801a110:	4b1d      	ldr	r3, [pc, #116]	@ (801a188 <xTaskPriorityInherit+0xfc>)
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	4013      	ands	r3, r2
 801a116:	4a1c      	ldr	r2, [pc, #112]	@ (801a188 <xTaskPriorityInherit+0xfc>)
 801a118:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a11a:	4b19      	ldr	r3, [pc, #100]	@ (801a180 <xTaskPriorityInherit+0xf4>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a128:	2201      	movs	r2, #1
 801a12a:	409a      	lsls	r2, r3
 801a12c:	4b16      	ldr	r3, [pc, #88]	@ (801a188 <xTaskPriorityInherit+0xfc>)
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	4313      	orrs	r3, r2
 801a132:	4a15      	ldr	r2, [pc, #84]	@ (801a188 <xTaskPriorityInherit+0xfc>)
 801a134:	6013      	str	r3, [r2, #0]
 801a136:	68bb      	ldr	r3, [r7, #8]
 801a138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a13a:	4613      	mov	r3, r2
 801a13c:	009b      	lsls	r3, r3, #2
 801a13e:	4413      	add	r3, r2
 801a140:	009b      	lsls	r3, r3, #2
 801a142:	4a10      	ldr	r2, [pc, #64]	@ (801a184 <xTaskPriorityInherit+0xf8>)
 801a144:	441a      	add	r2, r3
 801a146:	68bb      	ldr	r3, [r7, #8]
 801a148:	3304      	adds	r3, #4
 801a14a:	4619      	mov	r1, r3
 801a14c:	4610      	mov	r0, r2
 801a14e:	f7fe f85a 	bl	8018206 <vListInsertEnd>
 801a152:	e004      	b.n	801a15e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a154:	4b0a      	ldr	r3, [pc, #40]	@ (801a180 <xTaskPriorityInherit+0xf4>)
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a15a:	68bb      	ldr	r3, [r7, #8]
 801a15c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a15e:	2301      	movs	r3, #1
 801a160:	60fb      	str	r3, [r7, #12]
 801a162:	e008      	b.n	801a176 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a164:	68bb      	ldr	r3, [r7, #8]
 801a166:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a168:	4b05      	ldr	r3, [pc, #20]	@ (801a180 <xTaskPriorityInherit+0xf4>)
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a16e:	429a      	cmp	r2, r3
 801a170:	d201      	bcs.n	801a176 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a172:	2301      	movs	r3, #1
 801a174:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a176:	68fb      	ldr	r3, [r7, #12]
	}
 801a178:	4618      	mov	r0, r3
 801a17a:	3710      	adds	r7, #16
 801a17c:	46bd      	mov	sp, r7
 801a17e:	bd80      	pop	{r7, pc}
 801a180:	20002454 	.word	0x20002454
 801a184:	20002458 	.word	0x20002458
 801a188:	2000255c 	.word	0x2000255c

0801a18c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b086      	sub	sp, #24
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a198:	2300      	movs	r3, #0
 801a19a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d074      	beq.n	801a28c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a1a2:	4b3d      	ldr	r3, [pc, #244]	@ (801a298 <xTaskPriorityDisinherit+0x10c>)
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	693a      	ldr	r2, [r7, #16]
 801a1a8:	429a      	cmp	r2, r3
 801a1aa:	d00d      	beq.n	801a1c8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801a1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1b0:	b672      	cpsid	i
 801a1b2:	f383 8811 	msr	BASEPRI, r3
 801a1b6:	f3bf 8f6f 	isb	sy
 801a1ba:	f3bf 8f4f 	dsb	sy
 801a1be:	b662      	cpsie	i
 801a1c0:	60fb      	str	r3, [r7, #12]
}
 801a1c2:	bf00      	nop
 801a1c4:	bf00      	nop
 801a1c6:	e7fd      	b.n	801a1c4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801a1c8:	693b      	ldr	r3, [r7, #16]
 801a1ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d10d      	bne.n	801a1ec <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801a1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1d4:	b672      	cpsid	i
 801a1d6:	f383 8811 	msr	BASEPRI, r3
 801a1da:	f3bf 8f6f 	isb	sy
 801a1de:	f3bf 8f4f 	dsb	sy
 801a1e2:	b662      	cpsie	i
 801a1e4:	60bb      	str	r3, [r7, #8]
}
 801a1e6:	bf00      	nop
 801a1e8:	bf00      	nop
 801a1ea:	e7fd      	b.n	801a1e8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a1f0:	1e5a      	subs	r2, r3, #1
 801a1f2:	693b      	ldr	r3, [r7, #16]
 801a1f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a1f6:	693b      	ldr	r3, [r7, #16]
 801a1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a1fa:	693b      	ldr	r3, [r7, #16]
 801a1fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a1fe:	429a      	cmp	r2, r3
 801a200:	d044      	beq.n	801a28c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a202:	693b      	ldr	r3, [r7, #16]
 801a204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a206:	2b00      	cmp	r3, #0
 801a208:	d140      	bne.n	801a28c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a20a:	693b      	ldr	r3, [r7, #16]
 801a20c:	3304      	adds	r3, #4
 801a20e:	4618      	mov	r0, r3
 801a210:	f7fe f856 	bl	80182c0 <uxListRemove>
 801a214:	4603      	mov	r3, r0
 801a216:	2b00      	cmp	r3, #0
 801a218:	d115      	bne.n	801a246 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a21a:	693b      	ldr	r3, [r7, #16]
 801a21c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a21e:	491f      	ldr	r1, [pc, #124]	@ (801a29c <xTaskPriorityDisinherit+0x110>)
 801a220:	4613      	mov	r3, r2
 801a222:	009b      	lsls	r3, r3, #2
 801a224:	4413      	add	r3, r2
 801a226:	009b      	lsls	r3, r3, #2
 801a228:	440b      	add	r3, r1
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d10a      	bne.n	801a246 <xTaskPriorityDisinherit+0xba>
 801a230:	693b      	ldr	r3, [r7, #16]
 801a232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a234:	2201      	movs	r2, #1
 801a236:	fa02 f303 	lsl.w	r3, r2, r3
 801a23a:	43da      	mvns	r2, r3
 801a23c:	4b18      	ldr	r3, [pc, #96]	@ (801a2a0 <xTaskPriorityDisinherit+0x114>)
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	4013      	ands	r3, r2
 801a242:	4a17      	ldr	r2, [pc, #92]	@ (801a2a0 <xTaskPriorityDisinherit+0x114>)
 801a244:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a246:	693b      	ldr	r3, [r7, #16]
 801a248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a24a:	693b      	ldr	r3, [r7, #16]
 801a24c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a24e:	693b      	ldr	r3, [r7, #16]
 801a250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a252:	f1c3 0207 	rsb	r2, r3, #7
 801a256:	693b      	ldr	r3, [r7, #16]
 801a258:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a25a:	693b      	ldr	r3, [r7, #16]
 801a25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a25e:	2201      	movs	r2, #1
 801a260:	409a      	lsls	r2, r3
 801a262:	4b0f      	ldr	r3, [pc, #60]	@ (801a2a0 <xTaskPriorityDisinherit+0x114>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	4313      	orrs	r3, r2
 801a268:	4a0d      	ldr	r2, [pc, #52]	@ (801a2a0 <xTaskPriorityDisinherit+0x114>)
 801a26a:	6013      	str	r3, [r2, #0]
 801a26c:	693b      	ldr	r3, [r7, #16]
 801a26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a270:	4613      	mov	r3, r2
 801a272:	009b      	lsls	r3, r3, #2
 801a274:	4413      	add	r3, r2
 801a276:	009b      	lsls	r3, r3, #2
 801a278:	4a08      	ldr	r2, [pc, #32]	@ (801a29c <xTaskPriorityDisinherit+0x110>)
 801a27a:	441a      	add	r2, r3
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	3304      	adds	r3, #4
 801a280:	4619      	mov	r1, r3
 801a282:	4610      	mov	r0, r2
 801a284:	f7fd ffbf 	bl	8018206 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a288:	2301      	movs	r3, #1
 801a28a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a28c:	697b      	ldr	r3, [r7, #20]
	}
 801a28e:	4618      	mov	r0, r3
 801a290:	3718      	adds	r7, #24
 801a292:	46bd      	mov	sp, r7
 801a294:	bd80      	pop	{r7, pc}
 801a296:	bf00      	nop
 801a298:	20002454 	.word	0x20002454
 801a29c:	20002458 	.word	0x20002458
 801a2a0:	2000255c 	.word	0x2000255c

0801a2a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b088      	sub	sp, #32
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]
 801a2ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	f000 8089 	beq.w	801a3d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a2be:	69bb      	ldr	r3, [r7, #24]
 801a2c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d10d      	bne.n	801a2e2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801a2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2ca:	b672      	cpsid	i
 801a2cc:	f383 8811 	msr	BASEPRI, r3
 801a2d0:	f3bf 8f6f 	isb	sy
 801a2d4:	f3bf 8f4f 	dsb	sy
 801a2d8:	b662      	cpsie	i
 801a2da:	60fb      	str	r3, [r7, #12]
}
 801a2dc:	bf00      	nop
 801a2de:	bf00      	nop
 801a2e0:	e7fd      	b.n	801a2de <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a2e2:	69bb      	ldr	r3, [r7, #24]
 801a2e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a2e6:	683a      	ldr	r2, [r7, #0]
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	d902      	bls.n	801a2f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	61fb      	str	r3, [r7, #28]
 801a2f0:	e002      	b.n	801a2f8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a2f2:	69bb      	ldr	r3, [r7, #24]
 801a2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a2f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a2f8:	69bb      	ldr	r3, [r7, #24]
 801a2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a2fc:	69fa      	ldr	r2, [r7, #28]
 801a2fe:	429a      	cmp	r2, r3
 801a300:	d066      	beq.n	801a3d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a302:	69bb      	ldr	r3, [r7, #24]
 801a304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a306:	697a      	ldr	r2, [r7, #20]
 801a308:	429a      	cmp	r2, r3
 801a30a:	d161      	bne.n	801a3d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a30c:	4b32      	ldr	r3, [pc, #200]	@ (801a3d8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	69ba      	ldr	r2, [r7, #24]
 801a312:	429a      	cmp	r2, r3
 801a314:	d10d      	bne.n	801a332 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 801a316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a31a:	b672      	cpsid	i
 801a31c:	f383 8811 	msr	BASEPRI, r3
 801a320:	f3bf 8f6f 	isb	sy
 801a324:	f3bf 8f4f 	dsb	sy
 801a328:	b662      	cpsie	i
 801a32a:	60bb      	str	r3, [r7, #8]
}
 801a32c:	bf00      	nop
 801a32e:	bf00      	nop
 801a330:	e7fd      	b.n	801a32e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a332:	69bb      	ldr	r3, [r7, #24]
 801a334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a336:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a338:	69bb      	ldr	r3, [r7, #24]
 801a33a:	69fa      	ldr	r2, [r7, #28]
 801a33c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a33e:	69bb      	ldr	r3, [r7, #24]
 801a340:	699b      	ldr	r3, [r3, #24]
 801a342:	2b00      	cmp	r3, #0
 801a344:	db04      	blt.n	801a350 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a346:	69fb      	ldr	r3, [r7, #28]
 801a348:	f1c3 0207 	rsb	r2, r3, #7
 801a34c:	69bb      	ldr	r3, [r7, #24]
 801a34e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a350:	69bb      	ldr	r3, [r7, #24]
 801a352:	6959      	ldr	r1, [r3, #20]
 801a354:	693a      	ldr	r2, [r7, #16]
 801a356:	4613      	mov	r3, r2
 801a358:	009b      	lsls	r3, r3, #2
 801a35a:	4413      	add	r3, r2
 801a35c:	009b      	lsls	r3, r3, #2
 801a35e:	4a1f      	ldr	r2, [pc, #124]	@ (801a3dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a360:	4413      	add	r3, r2
 801a362:	4299      	cmp	r1, r3
 801a364:	d134      	bne.n	801a3d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a366:	69bb      	ldr	r3, [r7, #24]
 801a368:	3304      	adds	r3, #4
 801a36a:	4618      	mov	r0, r3
 801a36c:	f7fd ffa8 	bl	80182c0 <uxListRemove>
 801a370:	4603      	mov	r3, r0
 801a372:	2b00      	cmp	r3, #0
 801a374:	d115      	bne.n	801a3a2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a376:	69bb      	ldr	r3, [r7, #24]
 801a378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a37a:	4918      	ldr	r1, [pc, #96]	@ (801a3dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a37c:	4613      	mov	r3, r2
 801a37e:	009b      	lsls	r3, r3, #2
 801a380:	4413      	add	r3, r2
 801a382:	009b      	lsls	r3, r3, #2
 801a384:	440b      	add	r3, r1
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d10a      	bne.n	801a3a2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 801a38c:	69bb      	ldr	r3, [r7, #24]
 801a38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a390:	2201      	movs	r2, #1
 801a392:	fa02 f303 	lsl.w	r3, r2, r3
 801a396:	43da      	mvns	r2, r3
 801a398:	4b11      	ldr	r3, [pc, #68]	@ (801a3e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	4013      	ands	r3, r2
 801a39e:	4a10      	ldr	r2, [pc, #64]	@ (801a3e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a3a0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a3a2:	69bb      	ldr	r3, [r7, #24]
 801a3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3a6:	2201      	movs	r2, #1
 801a3a8:	409a      	lsls	r2, r3
 801a3aa:	4b0d      	ldr	r3, [pc, #52]	@ (801a3e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	4313      	orrs	r3, r2
 801a3b0:	4a0b      	ldr	r2, [pc, #44]	@ (801a3e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a3b2:	6013      	str	r3, [r2, #0]
 801a3b4:	69bb      	ldr	r3, [r7, #24]
 801a3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a3b8:	4613      	mov	r3, r2
 801a3ba:	009b      	lsls	r3, r3, #2
 801a3bc:	4413      	add	r3, r2
 801a3be:	009b      	lsls	r3, r3, #2
 801a3c0:	4a06      	ldr	r2, [pc, #24]	@ (801a3dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a3c2:	441a      	add	r2, r3
 801a3c4:	69bb      	ldr	r3, [r7, #24]
 801a3c6:	3304      	adds	r3, #4
 801a3c8:	4619      	mov	r1, r3
 801a3ca:	4610      	mov	r0, r2
 801a3cc:	f7fd ff1b 	bl	8018206 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a3d0:	bf00      	nop
 801a3d2:	3720      	adds	r7, #32
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	bd80      	pop	{r7, pc}
 801a3d8:	20002454 	.word	0x20002454
 801a3dc:	20002458 	.word	0x20002458
 801a3e0:	2000255c 	.word	0x2000255c

0801a3e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a3e4:	b480      	push	{r7}
 801a3e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a3e8:	4b07      	ldr	r3, [pc, #28]	@ (801a408 <pvTaskIncrementMutexHeldCount+0x24>)
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d004      	beq.n	801a3fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a3f0:	4b05      	ldr	r3, [pc, #20]	@ (801a408 <pvTaskIncrementMutexHeldCount+0x24>)
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a3f6:	3201      	adds	r2, #1
 801a3f8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801a3fa:	4b03      	ldr	r3, [pc, #12]	@ (801a408 <pvTaskIncrementMutexHeldCount+0x24>)
 801a3fc:	681b      	ldr	r3, [r3, #0]
	}
 801a3fe:	4618      	mov	r0, r3
 801a400:	46bd      	mov	sp, r7
 801a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a406:	4770      	bx	lr
 801a408:	20002454 	.word	0x20002454

0801a40c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b084      	sub	sp, #16
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
 801a414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a416:	4b29      	ldr	r3, [pc, #164]	@ (801a4bc <prvAddCurrentTaskToDelayedList+0xb0>)
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a41c:	4b28      	ldr	r3, [pc, #160]	@ (801a4c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	3304      	adds	r3, #4
 801a422:	4618      	mov	r0, r3
 801a424:	f7fd ff4c 	bl	80182c0 <uxListRemove>
 801a428:	4603      	mov	r3, r0
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d10b      	bne.n	801a446 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801a42e:	4b24      	ldr	r3, [pc, #144]	@ (801a4c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a434:	2201      	movs	r2, #1
 801a436:	fa02 f303 	lsl.w	r3, r2, r3
 801a43a:	43da      	mvns	r2, r3
 801a43c:	4b21      	ldr	r3, [pc, #132]	@ (801a4c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	4013      	ands	r3, r2
 801a442:	4a20      	ldr	r2, [pc, #128]	@ (801a4c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a444:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a44c:	d10a      	bne.n	801a464 <prvAddCurrentTaskToDelayedList+0x58>
 801a44e:	683b      	ldr	r3, [r7, #0]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d007      	beq.n	801a464 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a454:	4b1a      	ldr	r3, [pc, #104]	@ (801a4c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	3304      	adds	r3, #4
 801a45a:	4619      	mov	r1, r3
 801a45c:	481a      	ldr	r0, [pc, #104]	@ (801a4c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801a45e:	f7fd fed2 	bl	8018206 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a462:	e026      	b.n	801a4b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a464:	68fa      	ldr	r2, [r7, #12]
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	4413      	add	r3, r2
 801a46a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a46c:	4b14      	ldr	r3, [pc, #80]	@ (801a4c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	68ba      	ldr	r2, [r7, #8]
 801a472:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a474:	68ba      	ldr	r2, [r7, #8]
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	429a      	cmp	r2, r3
 801a47a:	d209      	bcs.n	801a490 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a47c:	4b13      	ldr	r3, [pc, #76]	@ (801a4cc <prvAddCurrentTaskToDelayedList+0xc0>)
 801a47e:	681a      	ldr	r2, [r3, #0]
 801a480:	4b0f      	ldr	r3, [pc, #60]	@ (801a4c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	3304      	adds	r3, #4
 801a486:	4619      	mov	r1, r3
 801a488:	4610      	mov	r0, r2
 801a48a:	f7fd fee0 	bl	801824e <vListInsert>
}
 801a48e:	e010      	b.n	801a4b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a490:	4b0f      	ldr	r3, [pc, #60]	@ (801a4d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 801a492:	681a      	ldr	r2, [r3, #0]
 801a494:	4b0a      	ldr	r3, [pc, #40]	@ (801a4c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	3304      	adds	r3, #4
 801a49a:	4619      	mov	r1, r3
 801a49c:	4610      	mov	r0, r2
 801a49e:	f7fd fed6 	bl	801824e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a4a2:	4b0c      	ldr	r3, [pc, #48]	@ (801a4d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	68ba      	ldr	r2, [r7, #8]
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d202      	bcs.n	801a4b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801a4ac:	4a09      	ldr	r2, [pc, #36]	@ (801a4d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	6013      	str	r3, [r2, #0]
}
 801a4b2:	bf00      	nop
 801a4b4:	3710      	adds	r7, #16
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	bd80      	pop	{r7, pc}
 801a4ba:	bf00      	nop
 801a4bc:	20002558 	.word	0x20002558
 801a4c0:	20002454 	.word	0x20002454
 801a4c4:	2000255c 	.word	0x2000255c
 801a4c8:	20002540 	.word	0x20002540
 801a4cc:	20002510 	.word	0x20002510
 801a4d0:	2000250c 	.word	0x2000250c
 801a4d4:	20002574 	.word	0x20002574

0801a4d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a4d8:	b480      	push	{r7}
 801a4da:	b085      	sub	sp, #20
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	60f8      	str	r0, [r7, #12]
 801a4e0:	60b9      	str	r1, [r7, #8]
 801a4e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	3b04      	subs	r3, #4
 801a4e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801a4f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	3b04      	subs	r3, #4
 801a4f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a4f8:	68bb      	ldr	r3, [r7, #8]
 801a4fa:	f023 0201 	bic.w	r2, r3, #1
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	3b04      	subs	r3, #4
 801a506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a508:	4a0c      	ldr	r2, [pc, #48]	@ (801a53c <pxPortInitialiseStack+0x64>)
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	3b14      	subs	r3, #20
 801a512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a514:	687a      	ldr	r2, [r7, #4]
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	3b04      	subs	r3, #4
 801a51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	f06f 0202 	mvn.w	r2, #2
 801a526:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	3b20      	subs	r3, #32
 801a52c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a52e:	68fb      	ldr	r3, [r7, #12]
}
 801a530:	4618      	mov	r0, r3
 801a532:	3714      	adds	r7, #20
 801a534:	46bd      	mov	sp, r7
 801a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a53a:	4770      	bx	lr
 801a53c:	0801a541 	.word	0x0801a541

0801a540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a540:	b480      	push	{r7}
 801a542:	b085      	sub	sp, #20
 801a544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a546:	2300      	movs	r3, #0
 801a548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a54a:	4b15      	ldr	r3, [pc, #84]	@ (801a5a0 <prvTaskExitError+0x60>)
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a552:	d00d      	beq.n	801a570 <prvTaskExitError+0x30>
	__asm volatile
 801a554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a558:	b672      	cpsid	i
 801a55a:	f383 8811 	msr	BASEPRI, r3
 801a55e:	f3bf 8f6f 	isb	sy
 801a562:	f3bf 8f4f 	dsb	sy
 801a566:	b662      	cpsie	i
 801a568:	60fb      	str	r3, [r7, #12]
}
 801a56a:	bf00      	nop
 801a56c:	bf00      	nop
 801a56e:	e7fd      	b.n	801a56c <prvTaskExitError+0x2c>
	__asm volatile
 801a570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a574:	b672      	cpsid	i
 801a576:	f383 8811 	msr	BASEPRI, r3
 801a57a:	f3bf 8f6f 	isb	sy
 801a57e:	f3bf 8f4f 	dsb	sy
 801a582:	b662      	cpsie	i
 801a584:	60bb      	str	r3, [r7, #8]
}
 801a586:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a588:	bf00      	nop
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d0fc      	beq.n	801a58a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a590:	bf00      	nop
 801a592:	bf00      	nop
 801a594:	3714      	adds	r7, #20
 801a596:	46bd      	mov	sp, r7
 801a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59c:	4770      	bx	lr
 801a59e:	bf00      	nop
 801a5a0:	2000008c 	.word	0x2000008c
	...

0801a5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a5b0:	4b07      	ldr	r3, [pc, #28]	@ (801a5d0 <pxCurrentTCBConst2>)
 801a5b2:	6819      	ldr	r1, [r3, #0]
 801a5b4:	6808      	ldr	r0, [r1, #0]
 801a5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ba:	f380 8809 	msr	PSP, r0
 801a5be:	f3bf 8f6f 	isb	sy
 801a5c2:	f04f 0000 	mov.w	r0, #0
 801a5c6:	f380 8811 	msr	BASEPRI, r0
 801a5ca:	4770      	bx	lr
 801a5cc:	f3af 8000 	nop.w

0801a5d0 <pxCurrentTCBConst2>:
 801a5d0:	20002454 	.word	0x20002454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a5d4:	bf00      	nop
 801a5d6:	bf00      	nop

0801a5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a5d8:	4808      	ldr	r0, [pc, #32]	@ (801a5fc <prvPortStartFirstTask+0x24>)
 801a5da:	6800      	ldr	r0, [r0, #0]
 801a5dc:	6800      	ldr	r0, [r0, #0]
 801a5de:	f380 8808 	msr	MSP, r0
 801a5e2:	f04f 0000 	mov.w	r0, #0
 801a5e6:	f380 8814 	msr	CONTROL, r0
 801a5ea:	b662      	cpsie	i
 801a5ec:	b661      	cpsie	f
 801a5ee:	f3bf 8f4f 	dsb	sy
 801a5f2:	f3bf 8f6f 	isb	sy
 801a5f6:	df00      	svc	0
 801a5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a5fa:	bf00      	nop
 801a5fc:	e000ed08 	.word	0xe000ed08

0801a600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b084      	sub	sp, #16
 801a604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a606:	4b37      	ldr	r3, [pc, #220]	@ (801a6e4 <xPortStartScheduler+0xe4>)
 801a608:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	781b      	ldrb	r3, [r3, #0]
 801a60e:	b2db      	uxtb	r3, r3
 801a610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	22ff      	movs	r2, #255	@ 0xff
 801a616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	781b      	ldrb	r3, [r3, #0]
 801a61c:	b2db      	uxtb	r3, r3
 801a61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a620:	78fb      	ldrb	r3, [r7, #3]
 801a622:	b2db      	uxtb	r3, r3
 801a624:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801a628:	b2da      	uxtb	r2, r3
 801a62a:	4b2f      	ldr	r3, [pc, #188]	@ (801a6e8 <xPortStartScheduler+0xe8>)
 801a62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a62e:	4b2f      	ldr	r3, [pc, #188]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a630:	2207      	movs	r2, #7
 801a632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a634:	e009      	b.n	801a64a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801a636:	4b2d      	ldr	r3, [pc, #180]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	3b01      	subs	r3, #1
 801a63c:	4a2b      	ldr	r2, [pc, #172]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a640:	78fb      	ldrb	r3, [r7, #3]
 801a642:	b2db      	uxtb	r3, r3
 801a644:	005b      	lsls	r3, r3, #1
 801a646:	b2db      	uxtb	r3, r3
 801a648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a64a:	78fb      	ldrb	r3, [r7, #3]
 801a64c:	b2db      	uxtb	r3, r3
 801a64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a652:	2b80      	cmp	r3, #128	@ 0x80
 801a654:	d0ef      	beq.n	801a636 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a656:	4b25      	ldr	r3, [pc, #148]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	f1c3 0307 	rsb	r3, r3, #7
 801a65e:	2b04      	cmp	r3, #4
 801a660:	d00d      	beq.n	801a67e <xPortStartScheduler+0x7e>
	__asm volatile
 801a662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a666:	b672      	cpsid	i
 801a668:	f383 8811 	msr	BASEPRI, r3
 801a66c:	f3bf 8f6f 	isb	sy
 801a670:	f3bf 8f4f 	dsb	sy
 801a674:	b662      	cpsie	i
 801a676:	60bb      	str	r3, [r7, #8]
}
 801a678:	bf00      	nop
 801a67a:	bf00      	nop
 801a67c:	e7fd      	b.n	801a67a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a67e:	4b1b      	ldr	r3, [pc, #108]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	021b      	lsls	r3, r3, #8
 801a684:	4a19      	ldr	r2, [pc, #100]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a686:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a688:	4b18      	ldr	r3, [pc, #96]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a690:	4a16      	ldr	r2, [pc, #88]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a692:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	b2da      	uxtb	r2, r3
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a69c:	4b14      	ldr	r3, [pc, #80]	@ (801a6f0 <xPortStartScheduler+0xf0>)
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	4a13      	ldr	r2, [pc, #76]	@ (801a6f0 <xPortStartScheduler+0xf0>)
 801a6a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801a6a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a6a8:	4b11      	ldr	r3, [pc, #68]	@ (801a6f0 <xPortStartScheduler+0xf0>)
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	4a10      	ldr	r2, [pc, #64]	@ (801a6f0 <xPortStartScheduler+0xf0>)
 801a6ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801a6b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a6b4:	f000 f8dc 	bl	801a870 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a6b8:	4b0e      	ldr	r3, [pc, #56]	@ (801a6f4 <xPortStartScheduler+0xf4>)
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a6be:	f000 f8fb 	bl	801a8b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a6c2:	4b0d      	ldr	r3, [pc, #52]	@ (801a6f8 <xPortStartScheduler+0xf8>)
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	4a0c      	ldr	r2, [pc, #48]	@ (801a6f8 <xPortStartScheduler+0xf8>)
 801a6c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801a6cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a6ce:	f7ff ff83 	bl	801a5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a6d2:	f7ff fa47 	bl	8019b64 <vTaskSwitchContext>
	prvTaskExitError();
 801a6d6:	f7ff ff33 	bl	801a540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a6da:	2300      	movs	r3, #0
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	3710      	adds	r7, #16
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}
 801a6e4:	e000e400 	.word	0xe000e400
 801a6e8:	20002580 	.word	0x20002580
 801a6ec:	20002584 	.word	0x20002584
 801a6f0:	e000ed20 	.word	0xe000ed20
 801a6f4:	2000008c 	.word	0x2000008c
 801a6f8:	e000ef34 	.word	0xe000ef34

0801a6fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a6fc:	b480      	push	{r7}
 801a6fe:	b083      	sub	sp, #12
 801a700:	af00      	add	r7, sp, #0
	__asm volatile
 801a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a706:	b672      	cpsid	i
 801a708:	f383 8811 	msr	BASEPRI, r3
 801a70c:	f3bf 8f6f 	isb	sy
 801a710:	f3bf 8f4f 	dsb	sy
 801a714:	b662      	cpsie	i
 801a716:	607b      	str	r3, [r7, #4]
}
 801a718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a71a:	4b11      	ldr	r3, [pc, #68]	@ (801a760 <vPortEnterCritical+0x64>)
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	3301      	adds	r3, #1
 801a720:	4a0f      	ldr	r2, [pc, #60]	@ (801a760 <vPortEnterCritical+0x64>)
 801a722:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a724:	4b0e      	ldr	r3, [pc, #56]	@ (801a760 <vPortEnterCritical+0x64>)
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	2b01      	cmp	r3, #1
 801a72a:	d112      	bne.n	801a752 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a72c:	4b0d      	ldr	r3, [pc, #52]	@ (801a764 <vPortEnterCritical+0x68>)
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	b2db      	uxtb	r3, r3
 801a732:	2b00      	cmp	r3, #0
 801a734:	d00d      	beq.n	801a752 <vPortEnterCritical+0x56>
	__asm volatile
 801a736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a73a:	b672      	cpsid	i
 801a73c:	f383 8811 	msr	BASEPRI, r3
 801a740:	f3bf 8f6f 	isb	sy
 801a744:	f3bf 8f4f 	dsb	sy
 801a748:	b662      	cpsie	i
 801a74a:	603b      	str	r3, [r7, #0]
}
 801a74c:	bf00      	nop
 801a74e:	bf00      	nop
 801a750:	e7fd      	b.n	801a74e <vPortEnterCritical+0x52>
	}
}
 801a752:	bf00      	nop
 801a754:	370c      	adds	r7, #12
 801a756:	46bd      	mov	sp, r7
 801a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a75c:	4770      	bx	lr
 801a75e:	bf00      	nop
 801a760:	2000008c 	.word	0x2000008c
 801a764:	e000ed04 	.word	0xe000ed04

0801a768 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a768:	b480      	push	{r7}
 801a76a:	b083      	sub	sp, #12
 801a76c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a76e:	4b13      	ldr	r3, [pc, #76]	@ (801a7bc <vPortExitCritical+0x54>)
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d10d      	bne.n	801a792 <vPortExitCritical+0x2a>
	__asm volatile
 801a776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a77a:	b672      	cpsid	i
 801a77c:	f383 8811 	msr	BASEPRI, r3
 801a780:	f3bf 8f6f 	isb	sy
 801a784:	f3bf 8f4f 	dsb	sy
 801a788:	b662      	cpsie	i
 801a78a:	607b      	str	r3, [r7, #4]
}
 801a78c:	bf00      	nop
 801a78e:	bf00      	nop
 801a790:	e7fd      	b.n	801a78e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801a792:	4b0a      	ldr	r3, [pc, #40]	@ (801a7bc <vPortExitCritical+0x54>)
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	3b01      	subs	r3, #1
 801a798:	4a08      	ldr	r2, [pc, #32]	@ (801a7bc <vPortExitCritical+0x54>)
 801a79a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a79c:	4b07      	ldr	r3, [pc, #28]	@ (801a7bc <vPortExitCritical+0x54>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d105      	bne.n	801a7b0 <vPortExitCritical+0x48>
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	f383 8811 	msr	BASEPRI, r3
}
 801a7ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a7b0:	bf00      	nop
 801a7b2:	370c      	adds	r7, #12
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ba:	4770      	bx	lr
 801a7bc:	2000008c 	.word	0x2000008c

0801a7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a7c0:	f3ef 8009 	mrs	r0, PSP
 801a7c4:	f3bf 8f6f 	isb	sy
 801a7c8:	4b15      	ldr	r3, [pc, #84]	@ (801a820 <pxCurrentTCBConst>)
 801a7ca:	681a      	ldr	r2, [r3, #0]
 801a7cc:	f01e 0f10 	tst.w	lr, #16
 801a7d0:	bf08      	it	eq
 801a7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7da:	6010      	str	r0, [r2, #0]
 801a7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a7e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801a7e4:	b672      	cpsid	i
 801a7e6:	f380 8811 	msr	BASEPRI, r0
 801a7ea:	f3bf 8f4f 	dsb	sy
 801a7ee:	f3bf 8f6f 	isb	sy
 801a7f2:	b662      	cpsie	i
 801a7f4:	f7ff f9b6 	bl	8019b64 <vTaskSwitchContext>
 801a7f8:	f04f 0000 	mov.w	r0, #0
 801a7fc:	f380 8811 	msr	BASEPRI, r0
 801a800:	bc09      	pop	{r0, r3}
 801a802:	6819      	ldr	r1, [r3, #0]
 801a804:	6808      	ldr	r0, [r1, #0]
 801a806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a80a:	f01e 0f10 	tst.w	lr, #16
 801a80e:	bf08      	it	eq
 801a810:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a814:	f380 8809 	msr	PSP, r0
 801a818:	f3bf 8f6f 	isb	sy
 801a81c:	4770      	bx	lr
 801a81e:	bf00      	nop

0801a820 <pxCurrentTCBConst>:
 801a820:	20002454 	.word	0x20002454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a824:	bf00      	nop
 801a826:	bf00      	nop

0801a828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b082      	sub	sp, #8
 801a82c:	af00      	add	r7, sp, #0
	__asm volatile
 801a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a832:	b672      	cpsid	i
 801a834:	f383 8811 	msr	BASEPRI, r3
 801a838:	f3bf 8f6f 	isb	sy
 801a83c:	f3bf 8f4f 	dsb	sy
 801a840:	b662      	cpsie	i
 801a842:	607b      	str	r3, [r7, #4]
}
 801a844:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a846:	f7ff f8d1 	bl	80199ec <xTaskIncrementTick>
 801a84a:	4603      	mov	r3, r0
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d003      	beq.n	801a858 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a850:	4b06      	ldr	r3, [pc, #24]	@ (801a86c <SysTick_Handler+0x44>)
 801a852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a856:	601a      	str	r2, [r3, #0]
 801a858:	2300      	movs	r3, #0
 801a85a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	f383 8811 	msr	BASEPRI, r3
}
 801a862:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a864:	bf00      	nop
 801a866:	3708      	adds	r7, #8
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd80      	pop	{r7, pc}
 801a86c:	e000ed04 	.word	0xe000ed04

0801a870 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a870:	b480      	push	{r7}
 801a872:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a874:	4b0b      	ldr	r3, [pc, #44]	@ (801a8a4 <vPortSetupTimerInterrupt+0x34>)
 801a876:	2200      	movs	r2, #0
 801a878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a87a:	4b0b      	ldr	r3, [pc, #44]	@ (801a8a8 <vPortSetupTimerInterrupt+0x38>)
 801a87c:	2200      	movs	r2, #0
 801a87e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a880:	4b0a      	ldr	r3, [pc, #40]	@ (801a8ac <vPortSetupTimerInterrupt+0x3c>)
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	4a0a      	ldr	r2, [pc, #40]	@ (801a8b0 <vPortSetupTimerInterrupt+0x40>)
 801a886:	fba2 2303 	umull	r2, r3, r2, r3
 801a88a:	099b      	lsrs	r3, r3, #6
 801a88c:	4a09      	ldr	r2, [pc, #36]	@ (801a8b4 <vPortSetupTimerInterrupt+0x44>)
 801a88e:	3b01      	subs	r3, #1
 801a890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a892:	4b04      	ldr	r3, [pc, #16]	@ (801a8a4 <vPortSetupTimerInterrupt+0x34>)
 801a894:	2207      	movs	r2, #7
 801a896:	601a      	str	r2, [r3, #0]
}
 801a898:	bf00      	nop
 801a89a:	46bd      	mov	sp, r7
 801a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a0:	4770      	bx	lr
 801a8a2:	bf00      	nop
 801a8a4:	e000e010 	.word	0xe000e010
 801a8a8:	e000e018 	.word	0xe000e018
 801a8ac:	20000018 	.word	0x20000018
 801a8b0:	10624dd3 	.word	0x10624dd3
 801a8b4:	e000e014 	.word	0xe000e014

0801a8b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a8b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801a8c8 <vPortEnableVFP+0x10>
 801a8bc:	6801      	ldr	r1, [r0, #0]
 801a8be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801a8c2:	6001      	str	r1, [r0, #0]
 801a8c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a8c6:	bf00      	nop
 801a8c8:	e000ed88 	.word	0xe000ed88

0801a8cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a8cc:	b480      	push	{r7}
 801a8ce:	b085      	sub	sp, #20
 801a8d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a8d2:	f3ef 8305 	mrs	r3, IPSR
 801a8d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	2b0f      	cmp	r3, #15
 801a8dc:	d917      	bls.n	801a90e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a8de:	4a1a      	ldr	r2, [pc, #104]	@ (801a948 <vPortValidateInterruptPriority+0x7c>)
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	4413      	add	r3, r2
 801a8e4:	781b      	ldrb	r3, [r3, #0]
 801a8e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a8e8:	4b18      	ldr	r3, [pc, #96]	@ (801a94c <vPortValidateInterruptPriority+0x80>)
 801a8ea:	781b      	ldrb	r3, [r3, #0]
 801a8ec:	7afa      	ldrb	r2, [r7, #11]
 801a8ee:	429a      	cmp	r2, r3
 801a8f0:	d20d      	bcs.n	801a90e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 801a8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8f6:	b672      	cpsid	i
 801a8f8:	f383 8811 	msr	BASEPRI, r3
 801a8fc:	f3bf 8f6f 	isb	sy
 801a900:	f3bf 8f4f 	dsb	sy
 801a904:	b662      	cpsie	i
 801a906:	607b      	str	r3, [r7, #4]
}
 801a908:	bf00      	nop
 801a90a:	bf00      	nop
 801a90c:	e7fd      	b.n	801a90a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a90e:	4b10      	ldr	r3, [pc, #64]	@ (801a950 <vPortValidateInterruptPriority+0x84>)
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801a916:	4b0f      	ldr	r3, [pc, #60]	@ (801a954 <vPortValidateInterruptPriority+0x88>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d90d      	bls.n	801a93a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801a91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a922:	b672      	cpsid	i
 801a924:	f383 8811 	msr	BASEPRI, r3
 801a928:	f3bf 8f6f 	isb	sy
 801a92c:	f3bf 8f4f 	dsb	sy
 801a930:	b662      	cpsie	i
 801a932:	603b      	str	r3, [r7, #0]
}
 801a934:	bf00      	nop
 801a936:	bf00      	nop
 801a938:	e7fd      	b.n	801a936 <vPortValidateInterruptPriority+0x6a>
	}
 801a93a:	bf00      	nop
 801a93c:	3714      	adds	r7, #20
 801a93e:	46bd      	mov	sp, r7
 801a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a944:	4770      	bx	lr
 801a946:	bf00      	nop
 801a948:	e000e3f0 	.word	0xe000e3f0
 801a94c:	20002580 	.word	0x20002580
 801a950:	e000ed0c 	.word	0xe000ed0c
 801a954:	20002584 	.word	0x20002584

0801a958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b08a      	sub	sp, #40	@ 0x28
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a960:	2300      	movs	r3, #0
 801a962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a964:	f7fe ff72 	bl	801984c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a968:	4b5f      	ldr	r3, [pc, #380]	@ (801aae8 <pvPortMalloc+0x190>)
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d101      	bne.n	801a974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a970:	f000 f924 	bl	801abbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a974:	4b5d      	ldr	r3, [pc, #372]	@ (801aaec <pvPortMalloc+0x194>)
 801a976:	681a      	ldr	r2, [r3, #0]
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	4013      	ands	r3, r2
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	f040 8094 	bne.w	801aaaa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d020      	beq.n	801a9ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 801a988:	2208      	movs	r2, #8
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	4413      	add	r3, r2
 801a98e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	f003 0307 	and.w	r3, r3, #7
 801a996:	2b00      	cmp	r3, #0
 801a998:	d017      	beq.n	801a9ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	f023 0307 	bic.w	r3, r3, #7
 801a9a0:	3308      	adds	r3, #8
 801a9a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f003 0307 	and.w	r3, r3, #7
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d00d      	beq.n	801a9ca <pvPortMalloc+0x72>
	__asm volatile
 801a9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9b2:	b672      	cpsid	i
 801a9b4:	f383 8811 	msr	BASEPRI, r3
 801a9b8:	f3bf 8f6f 	isb	sy
 801a9bc:	f3bf 8f4f 	dsb	sy
 801a9c0:	b662      	cpsie	i
 801a9c2:	617b      	str	r3, [r7, #20]
}
 801a9c4:	bf00      	nop
 801a9c6:	bf00      	nop
 801a9c8:	e7fd      	b.n	801a9c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d06c      	beq.n	801aaaa <pvPortMalloc+0x152>
 801a9d0:	4b47      	ldr	r3, [pc, #284]	@ (801aaf0 <pvPortMalloc+0x198>)
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	687a      	ldr	r2, [r7, #4]
 801a9d6:	429a      	cmp	r2, r3
 801a9d8:	d867      	bhi.n	801aaaa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a9da:	4b46      	ldr	r3, [pc, #280]	@ (801aaf4 <pvPortMalloc+0x19c>)
 801a9dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a9de:	4b45      	ldr	r3, [pc, #276]	@ (801aaf4 <pvPortMalloc+0x19c>)
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a9e4:	e004      	b.n	801a9f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 801a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9f2:	685b      	ldr	r3, [r3, #4]
 801a9f4:	687a      	ldr	r2, [r7, #4]
 801a9f6:	429a      	cmp	r2, r3
 801a9f8:	d903      	bls.n	801aa02 <pvPortMalloc+0xaa>
 801a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d1f1      	bne.n	801a9e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801aa02:	4b39      	ldr	r3, [pc, #228]	@ (801aae8 <pvPortMalloc+0x190>)
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa08:	429a      	cmp	r2, r3
 801aa0a:	d04e      	beq.n	801aaaa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801aa0c:	6a3b      	ldr	r3, [r7, #32]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	2208      	movs	r2, #8
 801aa12:	4413      	add	r3, r2
 801aa14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa18:	681a      	ldr	r2, [r3, #0]
 801aa1a:	6a3b      	ldr	r3, [r7, #32]
 801aa1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801aa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa20:	685a      	ldr	r2, [r3, #4]
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	1ad2      	subs	r2, r2, r3
 801aa26:	2308      	movs	r3, #8
 801aa28:	005b      	lsls	r3, r3, #1
 801aa2a:	429a      	cmp	r2, r3
 801aa2c:	d922      	bls.n	801aa74 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801aa2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	4413      	add	r3, r2
 801aa34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801aa36:	69bb      	ldr	r3, [r7, #24]
 801aa38:	f003 0307 	and.w	r3, r3, #7
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d00d      	beq.n	801aa5c <pvPortMalloc+0x104>
	__asm volatile
 801aa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa44:	b672      	cpsid	i
 801aa46:	f383 8811 	msr	BASEPRI, r3
 801aa4a:	f3bf 8f6f 	isb	sy
 801aa4e:	f3bf 8f4f 	dsb	sy
 801aa52:	b662      	cpsie	i
 801aa54:	613b      	str	r3, [r7, #16]
}
 801aa56:	bf00      	nop
 801aa58:	bf00      	nop
 801aa5a:	e7fd      	b.n	801aa58 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801aa5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa5e:	685a      	ldr	r2, [r3, #4]
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	1ad2      	subs	r2, r2, r3
 801aa64:	69bb      	ldr	r3, [r7, #24]
 801aa66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa6a:	687a      	ldr	r2, [r7, #4]
 801aa6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801aa6e:	69b8      	ldr	r0, [r7, #24]
 801aa70:	f000 f906 	bl	801ac80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801aa74:	4b1e      	ldr	r3, [pc, #120]	@ (801aaf0 <pvPortMalloc+0x198>)
 801aa76:	681a      	ldr	r2, [r3, #0]
 801aa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa7a:	685b      	ldr	r3, [r3, #4]
 801aa7c:	1ad3      	subs	r3, r2, r3
 801aa7e:	4a1c      	ldr	r2, [pc, #112]	@ (801aaf0 <pvPortMalloc+0x198>)
 801aa80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801aa82:	4b1b      	ldr	r3, [pc, #108]	@ (801aaf0 <pvPortMalloc+0x198>)
 801aa84:	681a      	ldr	r2, [r3, #0]
 801aa86:	4b1c      	ldr	r3, [pc, #112]	@ (801aaf8 <pvPortMalloc+0x1a0>)
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	429a      	cmp	r2, r3
 801aa8c:	d203      	bcs.n	801aa96 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801aa8e:	4b18      	ldr	r3, [pc, #96]	@ (801aaf0 <pvPortMalloc+0x198>)
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	4a19      	ldr	r2, [pc, #100]	@ (801aaf8 <pvPortMalloc+0x1a0>)
 801aa94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa98:	685a      	ldr	r2, [r3, #4]
 801aa9a:	4b14      	ldr	r3, [pc, #80]	@ (801aaec <pvPortMalloc+0x194>)
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	431a      	orrs	r2, r3
 801aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801aaaa:	f7fe fedd 	bl	8019868 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801aaae:	69fb      	ldr	r3, [r7, #28]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d101      	bne.n	801aab8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801aab4:	f7e6 fe75 	bl	80017a2 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801aab8:	69fb      	ldr	r3, [r7, #28]
 801aaba:	f003 0307 	and.w	r3, r3, #7
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d00d      	beq.n	801aade <pvPortMalloc+0x186>
	__asm volatile
 801aac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aac6:	b672      	cpsid	i
 801aac8:	f383 8811 	msr	BASEPRI, r3
 801aacc:	f3bf 8f6f 	isb	sy
 801aad0:	f3bf 8f4f 	dsb	sy
 801aad4:	b662      	cpsie	i
 801aad6:	60fb      	str	r3, [r7, #12]
}
 801aad8:	bf00      	nop
 801aada:	bf00      	nop
 801aadc:	e7fd      	b.n	801aada <pvPortMalloc+0x182>
	return pvReturn;
 801aade:	69fb      	ldr	r3, [r7, #28]
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3728      	adds	r7, #40	@ 0x28
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}
 801aae8:	2000a590 	.word	0x2000a590
 801aaec:	2000a59c 	.word	0x2000a59c
 801aaf0:	2000a594 	.word	0x2000a594
 801aaf4:	2000a588 	.word	0x2000a588
 801aaf8:	2000a598 	.word	0x2000a598

0801aafc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b086      	sub	sp, #24
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d04e      	beq.n	801abac <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ab0e:	2308      	movs	r3, #8
 801ab10:	425b      	negs	r3, r3
 801ab12:	697a      	ldr	r2, [r7, #20]
 801ab14:	4413      	add	r3, r2
 801ab16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ab18:	697b      	ldr	r3, [r7, #20]
 801ab1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ab1c:	693b      	ldr	r3, [r7, #16]
 801ab1e:	685a      	ldr	r2, [r3, #4]
 801ab20:	4b24      	ldr	r3, [pc, #144]	@ (801abb4 <vPortFree+0xb8>)
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	4013      	ands	r3, r2
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d10d      	bne.n	801ab46 <vPortFree+0x4a>
	__asm volatile
 801ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab2e:	b672      	cpsid	i
 801ab30:	f383 8811 	msr	BASEPRI, r3
 801ab34:	f3bf 8f6f 	isb	sy
 801ab38:	f3bf 8f4f 	dsb	sy
 801ab3c:	b662      	cpsie	i
 801ab3e:	60fb      	str	r3, [r7, #12]
}
 801ab40:	bf00      	nop
 801ab42:	bf00      	nop
 801ab44:	e7fd      	b.n	801ab42 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ab46:	693b      	ldr	r3, [r7, #16]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d00d      	beq.n	801ab6a <vPortFree+0x6e>
	__asm volatile
 801ab4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab52:	b672      	cpsid	i
 801ab54:	f383 8811 	msr	BASEPRI, r3
 801ab58:	f3bf 8f6f 	isb	sy
 801ab5c:	f3bf 8f4f 	dsb	sy
 801ab60:	b662      	cpsie	i
 801ab62:	60bb      	str	r3, [r7, #8]
}
 801ab64:	bf00      	nop
 801ab66:	bf00      	nop
 801ab68:	e7fd      	b.n	801ab66 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ab6a:	693b      	ldr	r3, [r7, #16]
 801ab6c:	685a      	ldr	r2, [r3, #4]
 801ab6e:	4b11      	ldr	r3, [pc, #68]	@ (801abb4 <vPortFree+0xb8>)
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	4013      	ands	r3, r2
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d019      	beq.n	801abac <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ab78:	693b      	ldr	r3, [r7, #16]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d115      	bne.n	801abac <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ab80:	693b      	ldr	r3, [r7, #16]
 801ab82:	685a      	ldr	r2, [r3, #4]
 801ab84:	4b0b      	ldr	r3, [pc, #44]	@ (801abb4 <vPortFree+0xb8>)
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	43db      	mvns	r3, r3
 801ab8a:	401a      	ands	r2, r3
 801ab8c:	693b      	ldr	r3, [r7, #16]
 801ab8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ab90:	f7fe fe5c 	bl	801984c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ab94:	693b      	ldr	r3, [r7, #16]
 801ab96:	685a      	ldr	r2, [r3, #4]
 801ab98:	4b07      	ldr	r3, [pc, #28]	@ (801abb8 <vPortFree+0xbc>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	4413      	add	r3, r2
 801ab9e:	4a06      	ldr	r2, [pc, #24]	@ (801abb8 <vPortFree+0xbc>)
 801aba0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801aba2:	6938      	ldr	r0, [r7, #16]
 801aba4:	f000 f86c 	bl	801ac80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801aba8:	f7fe fe5e 	bl	8019868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801abac:	bf00      	nop
 801abae:	3718      	adds	r7, #24
 801abb0:	46bd      	mov	sp, r7
 801abb2:	bd80      	pop	{r7, pc}
 801abb4:	2000a59c 	.word	0x2000a59c
 801abb8:	2000a594 	.word	0x2000a594

0801abbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801abbc:	b480      	push	{r7}
 801abbe:	b085      	sub	sp, #20
 801abc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801abc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801abc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801abc8:	4b27      	ldr	r3, [pc, #156]	@ (801ac68 <prvHeapInit+0xac>)
 801abca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	f003 0307 	and.w	r3, r3, #7
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d00c      	beq.n	801abf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	3307      	adds	r3, #7
 801abda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	f023 0307 	bic.w	r3, r3, #7
 801abe2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801abe4:	68ba      	ldr	r2, [r7, #8]
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	1ad3      	subs	r3, r2, r3
 801abea:	4a1f      	ldr	r2, [pc, #124]	@ (801ac68 <prvHeapInit+0xac>)
 801abec:	4413      	add	r3, r2
 801abee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801abf4:	4a1d      	ldr	r2, [pc, #116]	@ (801ac6c <prvHeapInit+0xb0>)
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801abfa:	4b1c      	ldr	r3, [pc, #112]	@ (801ac6c <prvHeapInit+0xb0>)
 801abfc:	2200      	movs	r2, #0
 801abfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	68ba      	ldr	r2, [r7, #8]
 801ac04:	4413      	add	r3, r2
 801ac06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801ac08:	2208      	movs	r2, #8
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	1a9b      	subs	r3, r3, r2
 801ac0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	f023 0307 	bic.w	r3, r3, #7
 801ac16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	4a15      	ldr	r2, [pc, #84]	@ (801ac70 <prvHeapInit+0xb4>)
 801ac1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801ac1e:	4b14      	ldr	r3, [pc, #80]	@ (801ac70 <prvHeapInit+0xb4>)
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	2200      	movs	r2, #0
 801ac24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ac26:	4b12      	ldr	r3, [pc, #72]	@ (801ac70 <prvHeapInit+0xb4>)
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	68fa      	ldr	r2, [r7, #12]
 801ac36:	1ad2      	subs	r2, r2, r3
 801ac38:	683b      	ldr	r3, [r7, #0]
 801ac3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801ac3c:	4b0c      	ldr	r3, [pc, #48]	@ (801ac70 <prvHeapInit+0xb4>)
 801ac3e:	681a      	ldr	r2, [r3, #0]
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	685b      	ldr	r3, [r3, #4]
 801ac48:	4a0a      	ldr	r2, [pc, #40]	@ (801ac74 <prvHeapInit+0xb8>)
 801ac4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ac4c:	683b      	ldr	r3, [r7, #0]
 801ac4e:	685b      	ldr	r3, [r3, #4]
 801ac50:	4a09      	ldr	r2, [pc, #36]	@ (801ac78 <prvHeapInit+0xbc>)
 801ac52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801ac54:	4b09      	ldr	r3, [pc, #36]	@ (801ac7c <prvHeapInit+0xc0>)
 801ac56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801ac5a:	601a      	str	r2, [r3, #0]
}
 801ac5c:	bf00      	nop
 801ac5e:	3714      	adds	r7, #20
 801ac60:	46bd      	mov	sp, r7
 801ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac66:	4770      	bx	lr
 801ac68:	20002588 	.word	0x20002588
 801ac6c:	2000a588 	.word	0x2000a588
 801ac70:	2000a590 	.word	0x2000a590
 801ac74:	2000a598 	.word	0x2000a598
 801ac78:	2000a594 	.word	0x2000a594
 801ac7c:	2000a59c 	.word	0x2000a59c

0801ac80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801ac80:	b480      	push	{r7}
 801ac82:	b085      	sub	sp, #20
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801ac88:	4b28      	ldr	r3, [pc, #160]	@ (801ad2c <prvInsertBlockIntoFreeList+0xac>)
 801ac8a:	60fb      	str	r3, [r7, #12]
 801ac8c:	e002      	b.n	801ac94 <prvInsertBlockIntoFreeList+0x14>
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	60fb      	str	r3, [r7, #12]
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	687a      	ldr	r2, [r7, #4]
 801ac9a:	429a      	cmp	r2, r3
 801ac9c:	d8f7      	bhi.n	801ac8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	685b      	ldr	r3, [r3, #4]
 801aca6:	68ba      	ldr	r2, [r7, #8]
 801aca8:	4413      	add	r3, r2
 801acaa:	687a      	ldr	r2, [r7, #4]
 801acac:	429a      	cmp	r2, r3
 801acae:	d108      	bne.n	801acc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	685a      	ldr	r2, [r3, #4]
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	685b      	ldr	r3, [r3, #4]
 801acb8:	441a      	add	r2, r3
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	685b      	ldr	r3, [r3, #4]
 801acca:	68ba      	ldr	r2, [r7, #8]
 801accc:	441a      	add	r2, r3
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	429a      	cmp	r2, r3
 801acd4:	d118      	bne.n	801ad08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	681a      	ldr	r2, [r3, #0]
 801acda:	4b15      	ldr	r3, [pc, #84]	@ (801ad30 <prvInsertBlockIntoFreeList+0xb0>)
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	429a      	cmp	r2, r3
 801ace0:	d00d      	beq.n	801acfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	685a      	ldr	r2, [r3, #4]
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	685b      	ldr	r3, [r3, #4]
 801acec:	441a      	add	r2, r3
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	681a      	ldr	r2, [r3, #0]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	601a      	str	r2, [r3, #0]
 801acfc:	e008      	b.n	801ad10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801acfe:	4b0c      	ldr	r3, [pc, #48]	@ (801ad30 <prvInsertBlockIntoFreeList+0xb0>)
 801ad00:	681a      	ldr	r2, [r3, #0]
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	601a      	str	r2, [r3, #0]
 801ad06:	e003      	b.n	801ad10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	681a      	ldr	r2, [r3, #0]
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ad10:	68fa      	ldr	r2, [r7, #12]
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	429a      	cmp	r2, r3
 801ad16:	d002      	beq.n	801ad1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	687a      	ldr	r2, [r7, #4]
 801ad1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ad1e:	bf00      	nop
 801ad20:	3714      	adds	r7, #20
 801ad22:	46bd      	mov	sp, r7
 801ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad28:	4770      	bx	lr
 801ad2a:	bf00      	nop
 801ad2c:	2000a588 	.word	0x2000a588
 801ad30:	2000a590 	.word	0x2000a590

0801ad34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801ad38:	2201      	movs	r2, #1
 801ad3a:	490e      	ldr	r1, [pc, #56]	@ (801ad74 <MX_USB_HOST_Init+0x40>)
 801ad3c:	480e      	ldr	r0, [pc, #56]	@ (801ad78 <MX_USB_HOST_Init+0x44>)
 801ad3e:	f7f8 f9b5 	bl	80130ac <USBH_Init>
 801ad42:	4603      	mov	r3, r0
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d001      	beq.n	801ad4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801ad48:	f7e8 fcae 	bl	80036a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801ad4c:	490b      	ldr	r1, [pc, #44]	@ (801ad7c <MX_USB_HOST_Init+0x48>)
 801ad4e:	480a      	ldr	r0, [pc, #40]	@ (801ad78 <MX_USB_HOST_Init+0x44>)
 801ad50:	f7f8 fa7f 	bl	8013252 <USBH_RegisterClass>
 801ad54:	4603      	mov	r3, r0
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d001      	beq.n	801ad5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801ad5a:	f7e8 fca5 	bl	80036a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801ad5e:	4806      	ldr	r0, [pc, #24]	@ (801ad78 <MX_USB_HOST_Init+0x44>)
 801ad60:	f7f8 fb03 	bl	801336a <USBH_Start>
 801ad64:	4603      	mov	r3, r0
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d001      	beq.n	801ad6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801ad6a:	f7e8 fc9d 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801ad6e:	bf00      	nop
 801ad70:	bd80      	pop	{r7, pc}
 801ad72:	bf00      	nop
 801ad74:	0801ad81 	.word	0x0801ad81
 801ad78:	2000a5a0 	.word	0x2000a5a0
 801ad7c:	2000006c 	.word	0x2000006c

0801ad80 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801ad80:	b480      	push	{r7}
 801ad82:	b083      	sub	sp, #12
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	6078      	str	r0, [r7, #4]
 801ad88:	460b      	mov	r3, r1
 801ad8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801ad8c:	78fb      	ldrb	r3, [r7, #3]
 801ad8e:	3b01      	subs	r3, #1
 801ad90:	2b04      	cmp	r3, #4
 801ad92:	d819      	bhi.n	801adc8 <USBH_UserProcess+0x48>
 801ad94:	a201      	add	r2, pc, #4	@ (adr r2, 801ad9c <USBH_UserProcess+0x1c>)
 801ad96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad9a:	bf00      	nop
 801ad9c:	0801adc9 	.word	0x0801adc9
 801ada0:	0801adb9 	.word	0x0801adb9
 801ada4:	0801adc9 	.word	0x0801adc9
 801ada8:	0801adc1 	.word	0x0801adc1
 801adac:	0801adb1 	.word	0x0801adb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801adb0:	4b09      	ldr	r3, [pc, #36]	@ (801add8 <USBH_UserProcess+0x58>)
 801adb2:	2203      	movs	r2, #3
 801adb4:	701a      	strb	r2, [r3, #0]
  break;
 801adb6:	e008      	b.n	801adca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801adb8:	4b07      	ldr	r3, [pc, #28]	@ (801add8 <USBH_UserProcess+0x58>)
 801adba:	2202      	movs	r2, #2
 801adbc:	701a      	strb	r2, [r3, #0]
  break;
 801adbe:	e004      	b.n	801adca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801adc0:	4b05      	ldr	r3, [pc, #20]	@ (801add8 <USBH_UserProcess+0x58>)
 801adc2:	2201      	movs	r2, #1
 801adc4:	701a      	strb	r2, [r3, #0]
  break;
 801adc6:	e000      	b.n	801adca <USBH_UserProcess+0x4a>

  default:
  break;
 801adc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801adca:	bf00      	nop
 801adcc:	370c      	adds	r7, #12
 801adce:	46bd      	mov	sp, r7
 801add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801add4:	4770      	bx	lr
 801add6:	bf00      	nop
 801add8:	2000a984 	.word	0x2000a984

0801addc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b08a      	sub	sp, #40	@ 0x28
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ade4:	f107 0314 	add.w	r3, r7, #20
 801ade8:	2200      	movs	r2, #0
 801adea:	601a      	str	r2, [r3, #0]
 801adec:	605a      	str	r2, [r3, #4]
 801adee:	609a      	str	r2, [r3, #8]
 801adf0:	60da      	str	r2, [r3, #12]
 801adf2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801adfc:	d13c      	bne.n	801ae78 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801adfe:	4b20      	ldr	r3, [pc, #128]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ae02:	4a1f      	ldr	r2, [pc, #124]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae04:	f043 0301 	orr.w	r3, r3, #1
 801ae08:	6313      	str	r3, [r2, #48]	@ 0x30
 801ae0a:	4b1d      	ldr	r3, [pc, #116]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ae0e:	f003 0301 	and.w	r3, r3, #1
 801ae12:	613b      	str	r3, [r7, #16]
 801ae14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801ae16:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801ae1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ae1c:	2302      	movs	r3, #2
 801ae1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ae20:	2300      	movs	r3, #0
 801ae22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ae24:	2303      	movs	r3, #3
 801ae26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801ae28:	230a      	movs	r3, #10
 801ae2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ae2c:	f107 0314 	add.w	r3, r7, #20
 801ae30:	4619      	mov	r1, r3
 801ae32:	4814      	ldr	r0, [pc, #80]	@ (801ae84 <HAL_HCD_MspInit+0xa8>)
 801ae34:	f7ec fb20 	bl	8007478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ae38:	4b11      	ldr	r3, [pc, #68]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ae3c:	4a10      	ldr	r2, [pc, #64]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ae42:	6353      	str	r3, [r2, #52]	@ 0x34
 801ae44:	4b0e      	ldr	r3, [pc, #56]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ae48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ae4c:	60fb      	str	r3, [r7, #12]
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	4b0b      	ldr	r3, [pc, #44]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ae54:	4a0a      	ldr	r2, [pc, #40]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801ae5a:	6453      	str	r3, [r2, #68]	@ 0x44
 801ae5c:	4b08      	ldr	r3, [pc, #32]	@ (801ae80 <HAL_HCD_MspInit+0xa4>)
 801ae5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ae60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801ae64:	60bb      	str	r3, [r7, #8]
 801ae66:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801ae68:	2200      	movs	r2, #0
 801ae6a:	2105      	movs	r1, #5
 801ae6c:	2043      	movs	r0, #67	@ 0x43
 801ae6e:	f7ea ffbf 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801ae72:	2043      	movs	r0, #67	@ 0x43
 801ae74:	f7ea ffd8 	bl	8005e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801ae78:	bf00      	nop
 801ae7a:	3728      	adds	r7, #40	@ 0x28
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	bd80      	pop	{r7, pc}
 801ae80:	40023800 	.word	0x40023800
 801ae84:	40020000 	.word	0x40020000

0801ae88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b082      	sub	sp, #8
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801ae96:	4618      	mov	r0, r3
 801ae98:	f7f8 fe9f 	bl	8013bda <USBH_LL_IncTimer>
}
 801ae9c:	bf00      	nop
 801ae9e:	3708      	adds	r7, #8
 801aea0:	46bd      	mov	sp, r7
 801aea2:	bd80      	pop	{r7, pc}

0801aea4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b082      	sub	sp, #8
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	f7f8 fedf 	bl	8013c76 <USBH_LL_Connect>
}
 801aeb8:	bf00      	nop
 801aeba:	3708      	adds	r7, #8
 801aebc:	46bd      	mov	sp, r7
 801aebe:	bd80      	pop	{r7, pc}

0801aec0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b082      	sub	sp, #8
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801aece:	4618      	mov	r0, r3
 801aed0:	f7f8 feec 	bl	8013cac <USBH_LL_Disconnect>
}
 801aed4:	bf00      	nop
 801aed6:	3708      	adds	r7, #8
 801aed8:	46bd      	mov	sp, r7
 801aeda:	bd80      	pop	{r7, pc}

0801aedc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801aedc:	b580      	push	{r7, lr}
 801aede:	b082      	sub	sp, #8
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	6078      	str	r0, [r7, #4]
 801aee4:	460b      	mov	r3, r1
 801aee6:	70fb      	strb	r3, [r7, #3]
 801aee8:	4613      	mov	r3, r2
 801aeea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801aef2:	4618      	mov	r0, r3
 801aef4:	f7f8 ff40 	bl	8013d78 <USBH_LL_NotifyURBChange>
#endif
}
 801aef8:	bf00      	nop
 801aefa:	3708      	adds	r7, #8
 801aefc:	46bd      	mov	sp, r7
 801aefe:	bd80      	pop	{r7, pc}

0801af00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801af00:	b580      	push	{r7, lr}
 801af02:	b082      	sub	sp, #8
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801af0e:	4618      	mov	r0, r3
 801af10:	f7f8 fe8d 	bl	8013c2e <USBH_LL_PortEnabled>
}
 801af14:	bf00      	nop
 801af16:	3708      	adds	r7, #8
 801af18:	46bd      	mov	sp, r7
 801af1a:	bd80      	pop	{r7, pc}

0801af1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b082      	sub	sp, #8
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801af2a:	4618      	mov	r0, r3
 801af2c:	f7f8 fe91 	bl	8013c52 <USBH_LL_PortDisabled>
}
 801af30:	bf00      	nop
 801af32:	3708      	adds	r7, #8
 801af34:	46bd      	mov	sp, r7
 801af36:	bd80      	pop	{r7, pc}

0801af38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b082      	sub	sp, #8
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801af46:	2b01      	cmp	r3, #1
 801af48:	d12a      	bne.n	801afa0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801af4a:	4a18      	ldr	r2, [pc, #96]	@ (801afac <USBH_LL_Init+0x74>)
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	4a15      	ldr	r2, [pc, #84]	@ (801afac <USBH_LL_Init+0x74>)
 801af56:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801af5a:	4b14      	ldr	r3, [pc, #80]	@ (801afac <USBH_LL_Init+0x74>)
 801af5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801af60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801af62:	4b12      	ldr	r3, [pc, #72]	@ (801afac <USBH_LL_Init+0x74>)
 801af64:	2208      	movs	r2, #8
 801af66:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801af68:	4b10      	ldr	r3, [pc, #64]	@ (801afac <USBH_LL_Init+0x74>)
 801af6a:	2201      	movs	r2, #1
 801af6c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801af6e:	4b0f      	ldr	r3, [pc, #60]	@ (801afac <USBH_LL_Init+0x74>)
 801af70:	2200      	movs	r2, #0
 801af72:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801af74:	4b0d      	ldr	r3, [pc, #52]	@ (801afac <USBH_LL_Init+0x74>)
 801af76:	2202      	movs	r2, #2
 801af78:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801af7a:	4b0c      	ldr	r3, [pc, #48]	@ (801afac <USBH_LL_Init+0x74>)
 801af7c:	2200      	movs	r2, #0
 801af7e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801af80:	480a      	ldr	r0, [pc, #40]	@ (801afac <USBH_LL_Init+0x74>)
 801af82:	f7ec fc3e 	bl	8007802 <HAL_HCD_Init>
 801af86:	4603      	mov	r3, r0
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d001      	beq.n	801af90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801af8c:	f7e8 fb8c 	bl	80036a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801af90:	4806      	ldr	r0, [pc, #24]	@ (801afac <USBH_LL_Init+0x74>)
 801af92:	f7ed f89f 	bl	80080d4 <HAL_HCD_GetCurrentFrame>
 801af96:	4603      	mov	r3, r0
 801af98:	4619      	mov	r1, r3
 801af9a:	6878      	ldr	r0, [r7, #4]
 801af9c:	f7f8 fe0e 	bl	8013bbc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801afa0:	2300      	movs	r3, #0
}
 801afa2:	4618      	mov	r0, r3
 801afa4:	3708      	adds	r7, #8
 801afa6:	46bd      	mov	sp, r7
 801afa8:	bd80      	pop	{r7, pc}
 801afaa:	bf00      	nop
 801afac:	2000a988 	.word	0x2000a988

0801afb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b084      	sub	sp, #16
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801afb8:	2300      	movs	r3, #0
 801afba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801afbc:	2300      	movs	r3, #0
 801afbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801afc6:	4618      	mov	r0, r3
 801afc8:	f7ed f80c 	bl	8007fe4 <HAL_HCD_Start>
 801afcc:	4603      	mov	r3, r0
 801afce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801afd0:	7bfb      	ldrb	r3, [r7, #15]
 801afd2:	4618      	mov	r0, r3
 801afd4:	f000 f95e 	bl	801b294 <USBH_Get_USB_Status>
 801afd8:	4603      	mov	r3, r0
 801afda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801afdc:	7bbb      	ldrb	r3, [r7, #14]
}
 801afde:	4618      	mov	r0, r3
 801afe0:	3710      	adds	r7, #16
 801afe2:	46bd      	mov	sp, r7
 801afe4:	bd80      	pop	{r7, pc}

0801afe6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801afe6:	b580      	push	{r7, lr}
 801afe8:	b084      	sub	sp, #16
 801afea:	af00      	add	r7, sp, #0
 801afec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801afee:	2300      	movs	r3, #0
 801aff0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801aff2:	2300      	movs	r3, #0
 801aff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801affc:	4618      	mov	r0, r3
 801affe:	f7ed f814 	bl	800802a <HAL_HCD_Stop>
 801b002:	4603      	mov	r3, r0
 801b004:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b006:	7bfb      	ldrb	r3, [r7, #15]
 801b008:	4618      	mov	r0, r3
 801b00a:	f000 f943 	bl	801b294 <USBH_Get_USB_Status>
 801b00e:	4603      	mov	r3, r0
 801b010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b012:	7bbb      	ldrb	r3, [r7, #14]
}
 801b014:	4618      	mov	r0, r3
 801b016:	3710      	adds	r7, #16
 801b018:	46bd      	mov	sp, r7
 801b01a:	bd80      	pop	{r7, pc}

0801b01c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b084      	sub	sp, #16
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801b024:	2301      	movs	r3, #1
 801b026:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801b02e:	4618      	mov	r0, r3
 801b030:	f7ed f85e 	bl	80080f0 <HAL_HCD_GetCurrentSpeed>
 801b034:	4603      	mov	r3, r0
 801b036:	2b02      	cmp	r3, #2
 801b038:	d00c      	beq.n	801b054 <USBH_LL_GetSpeed+0x38>
 801b03a:	2b02      	cmp	r3, #2
 801b03c:	d80d      	bhi.n	801b05a <USBH_LL_GetSpeed+0x3e>
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d002      	beq.n	801b048 <USBH_LL_GetSpeed+0x2c>
 801b042:	2b01      	cmp	r3, #1
 801b044:	d003      	beq.n	801b04e <USBH_LL_GetSpeed+0x32>
 801b046:	e008      	b.n	801b05a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801b048:	2300      	movs	r3, #0
 801b04a:	73fb      	strb	r3, [r7, #15]
    break;
 801b04c:	e008      	b.n	801b060 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801b04e:	2301      	movs	r3, #1
 801b050:	73fb      	strb	r3, [r7, #15]
    break;
 801b052:	e005      	b.n	801b060 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801b054:	2302      	movs	r3, #2
 801b056:	73fb      	strb	r3, [r7, #15]
    break;
 801b058:	e002      	b.n	801b060 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801b05a:	2301      	movs	r3, #1
 801b05c:	73fb      	strb	r3, [r7, #15]
    break;
 801b05e:	bf00      	nop
  }
  return  speed;
 801b060:	7bfb      	ldrb	r3, [r7, #15]
}
 801b062:	4618      	mov	r0, r3
 801b064:	3710      	adds	r7, #16
 801b066:	46bd      	mov	sp, r7
 801b068:	bd80      	pop	{r7, pc}

0801b06a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801b06a:	b580      	push	{r7, lr}
 801b06c:	b084      	sub	sp, #16
 801b06e:	af00      	add	r7, sp, #0
 801b070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b072:	2300      	movs	r3, #0
 801b074:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b076:	2300      	movs	r3, #0
 801b078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801b080:	4618      	mov	r0, r3
 801b082:	f7ec ffef 	bl	8008064 <HAL_HCD_ResetPort>
 801b086:	4603      	mov	r3, r0
 801b088:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b08a:	7bfb      	ldrb	r3, [r7, #15]
 801b08c:	4618      	mov	r0, r3
 801b08e:	f000 f901 	bl	801b294 <USBH_Get_USB_Status>
 801b092:	4603      	mov	r3, r0
 801b094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b096:	7bbb      	ldrb	r3, [r7, #14]
}
 801b098:	4618      	mov	r0, r3
 801b09a:	3710      	adds	r7, #16
 801b09c:	46bd      	mov	sp, r7
 801b09e:	bd80      	pop	{r7, pc}

0801b0a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b082      	sub	sp, #8
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	6078      	str	r0, [r7, #4]
 801b0a8:	460b      	mov	r3, r1
 801b0aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801b0b2:	78fa      	ldrb	r2, [r7, #3]
 801b0b4:	4611      	mov	r1, r2
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	f7ec fff7 	bl	80080aa <HAL_HCD_HC_GetXferCount>
 801b0bc:	4603      	mov	r3, r0
}
 801b0be:	4618      	mov	r0, r3
 801b0c0:	3708      	adds	r7, #8
 801b0c2:	46bd      	mov	sp, r7
 801b0c4:	bd80      	pop	{r7, pc}

0801b0c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801b0c6:	b590      	push	{r4, r7, lr}
 801b0c8:	b089      	sub	sp, #36	@ 0x24
 801b0ca:	af04      	add	r7, sp, #16
 801b0cc:	6078      	str	r0, [r7, #4]
 801b0ce:	4608      	mov	r0, r1
 801b0d0:	4611      	mov	r1, r2
 801b0d2:	461a      	mov	r2, r3
 801b0d4:	4603      	mov	r3, r0
 801b0d6:	70fb      	strb	r3, [r7, #3]
 801b0d8:	460b      	mov	r3, r1
 801b0da:	70bb      	strb	r3, [r7, #2]
 801b0dc:	4613      	mov	r3, r2
 801b0de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0e0:	2300      	movs	r3, #0
 801b0e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801b0ee:	787c      	ldrb	r4, [r7, #1]
 801b0f0:	78ba      	ldrb	r2, [r7, #2]
 801b0f2:	78f9      	ldrb	r1, [r7, #3]
 801b0f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b0f6:	9302      	str	r3, [sp, #8]
 801b0f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b0fc:	9301      	str	r3, [sp, #4]
 801b0fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b102:	9300      	str	r3, [sp, #0]
 801b104:	4623      	mov	r3, r4
 801b106:	f7ec fbe3 	bl	80078d0 <HAL_HCD_HC_Init>
 801b10a:	4603      	mov	r3, r0
 801b10c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801b10e:	7bfb      	ldrb	r3, [r7, #15]
 801b110:	4618      	mov	r0, r3
 801b112:	f000 f8bf 	bl	801b294 <USBH_Get_USB_Status>
 801b116:	4603      	mov	r3, r0
 801b118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b11a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b11c:	4618      	mov	r0, r3
 801b11e:	3714      	adds	r7, #20
 801b120:	46bd      	mov	sp, r7
 801b122:	bd90      	pop	{r4, r7, pc}

0801b124 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b124:	b580      	push	{r7, lr}
 801b126:	b084      	sub	sp, #16
 801b128:	af00      	add	r7, sp, #0
 801b12a:	6078      	str	r0, [r7, #4]
 801b12c:	460b      	mov	r3, r1
 801b12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b130:	2300      	movs	r3, #0
 801b132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b134:	2300      	movs	r3, #0
 801b136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801b13e:	78fa      	ldrb	r2, [r7, #3]
 801b140:	4611      	mov	r1, r2
 801b142:	4618      	mov	r0, r3
 801b144:	f7ec fc7c 	bl	8007a40 <HAL_HCD_HC_Halt>
 801b148:	4603      	mov	r3, r0
 801b14a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b14c:	7bfb      	ldrb	r3, [r7, #15]
 801b14e:	4618      	mov	r0, r3
 801b150:	f000 f8a0 	bl	801b294 <USBH_Get_USB_Status>
 801b154:	4603      	mov	r3, r0
 801b156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b158:	7bbb      	ldrb	r3, [r7, #14]
}
 801b15a:	4618      	mov	r0, r3
 801b15c:	3710      	adds	r7, #16
 801b15e:	46bd      	mov	sp, r7
 801b160:	bd80      	pop	{r7, pc}

0801b162 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801b162:	b590      	push	{r4, r7, lr}
 801b164:	b089      	sub	sp, #36	@ 0x24
 801b166:	af04      	add	r7, sp, #16
 801b168:	6078      	str	r0, [r7, #4]
 801b16a:	4608      	mov	r0, r1
 801b16c:	4611      	mov	r1, r2
 801b16e:	461a      	mov	r2, r3
 801b170:	4603      	mov	r3, r0
 801b172:	70fb      	strb	r3, [r7, #3]
 801b174:	460b      	mov	r3, r1
 801b176:	70bb      	strb	r3, [r7, #2]
 801b178:	4613      	mov	r3, r2
 801b17a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b17c:	2300      	movs	r3, #0
 801b17e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b180:	2300      	movs	r3, #0
 801b182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801b18a:	787c      	ldrb	r4, [r7, #1]
 801b18c:	78ba      	ldrb	r2, [r7, #2]
 801b18e:	78f9      	ldrb	r1, [r7, #3]
 801b190:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801b194:	9303      	str	r3, [sp, #12]
 801b196:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b198:	9302      	str	r3, [sp, #8]
 801b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b19c:	9301      	str	r3, [sp, #4]
 801b19e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b1a2:	9300      	str	r3, [sp, #0]
 801b1a4:	4623      	mov	r3, r4
 801b1a6:	f7ec fc6f 	bl	8007a88 <HAL_HCD_HC_SubmitRequest>
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801b1ae:	7bfb      	ldrb	r3, [r7, #15]
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f000 f86f 	bl	801b294 <USBH_Get_USB_Status>
 801b1b6:	4603      	mov	r3, r0
 801b1b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b1ba:	7bbb      	ldrb	r3, [r7, #14]
}
 801b1bc:	4618      	mov	r0, r3
 801b1be:	3714      	adds	r7, #20
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bd90      	pop	{r4, r7, pc}

0801b1c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b082      	sub	sp, #8
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
 801b1cc:	460b      	mov	r3, r1
 801b1ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801b1d6:	78fa      	ldrb	r2, [r7, #3]
 801b1d8:	4611      	mov	r1, r2
 801b1da:	4618      	mov	r0, r3
 801b1dc:	f7ec ff50 	bl	8008080 <HAL_HCD_HC_GetURBState>
 801b1e0:	4603      	mov	r3, r0
}
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	3708      	adds	r7, #8
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	bd80      	pop	{r7, pc}

0801b1ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801b1ea:	b580      	push	{r7, lr}
 801b1ec:	b082      	sub	sp, #8
 801b1ee:	af00      	add	r7, sp, #0
 801b1f0:	6078      	str	r0, [r7, #4]
 801b1f2:	460b      	mov	r3, r1
 801b1f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801b1fc:	2b01      	cmp	r3, #1
 801b1fe:	d103      	bne.n	801b208 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801b200:	78fb      	ldrb	r3, [r7, #3]
 801b202:	4618      	mov	r0, r3
 801b204:	f000 f872 	bl	801b2ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801b208:	20c8      	movs	r0, #200	@ 0xc8
 801b20a:	f7ea fa7d 	bl	8005708 <HAL_Delay>
  return USBH_OK;
 801b20e:	2300      	movs	r3, #0
}
 801b210:	4618      	mov	r0, r3
 801b212:	3708      	adds	r7, #8
 801b214:	46bd      	mov	sp, r7
 801b216:	bd80      	pop	{r7, pc}

0801b218 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801b218:	b480      	push	{r7}
 801b21a:	b085      	sub	sp, #20
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
 801b220:	460b      	mov	r3, r1
 801b222:	70fb      	strb	r3, [r7, #3]
 801b224:	4613      	mov	r3, r2
 801b226:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801b22e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801b230:	78fa      	ldrb	r2, [r7, #3]
 801b232:	68f9      	ldr	r1, [r7, #12]
 801b234:	4613      	mov	r3, r2
 801b236:	011b      	lsls	r3, r3, #4
 801b238:	1a9b      	subs	r3, r3, r2
 801b23a:	009b      	lsls	r3, r3, #2
 801b23c:	440b      	add	r3, r1
 801b23e:	3317      	adds	r3, #23
 801b240:	781b      	ldrb	r3, [r3, #0]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d00a      	beq.n	801b25c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801b246:	78fa      	ldrb	r2, [r7, #3]
 801b248:	68f9      	ldr	r1, [r7, #12]
 801b24a:	4613      	mov	r3, r2
 801b24c:	011b      	lsls	r3, r3, #4
 801b24e:	1a9b      	subs	r3, r3, r2
 801b250:	009b      	lsls	r3, r3, #2
 801b252:	440b      	add	r3, r1
 801b254:	333c      	adds	r3, #60	@ 0x3c
 801b256:	78ba      	ldrb	r2, [r7, #2]
 801b258:	701a      	strb	r2, [r3, #0]
 801b25a:	e009      	b.n	801b270 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801b25c:	78fa      	ldrb	r2, [r7, #3]
 801b25e:	68f9      	ldr	r1, [r7, #12]
 801b260:	4613      	mov	r3, r2
 801b262:	011b      	lsls	r3, r3, #4
 801b264:	1a9b      	subs	r3, r3, r2
 801b266:	009b      	lsls	r3, r3, #2
 801b268:	440b      	add	r3, r1
 801b26a:	333d      	adds	r3, #61	@ 0x3d
 801b26c:	78ba      	ldrb	r2, [r7, #2]
 801b26e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801b270:	2300      	movs	r3, #0
}
 801b272:	4618      	mov	r0, r3
 801b274:	3714      	adds	r7, #20
 801b276:	46bd      	mov	sp, r7
 801b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27c:	4770      	bx	lr

0801b27e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801b27e:	b580      	push	{r7, lr}
 801b280:	b082      	sub	sp, #8
 801b282:	af00      	add	r7, sp, #0
 801b284:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801b286:	6878      	ldr	r0, [r7, #4]
 801b288:	f7ea fa3e 	bl	8005708 <HAL_Delay>
}
 801b28c:	bf00      	nop
 801b28e:	3708      	adds	r7, #8
 801b290:	46bd      	mov	sp, r7
 801b292:	bd80      	pop	{r7, pc}

0801b294 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b294:	b480      	push	{r7}
 801b296:	b085      	sub	sp, #20
 801b298:	af00      	add	r7, sp, #0
 801b29a:	4603      	mov	r3, r0
 801b29c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b29e:	2300      	movs	r3, #0
 801b2a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b2a2:	79fb      	ldrb	r3, [r7, #7]
 801b2a4:	2b03      	cmp	r3, #3
 801b2a6:	d817      	bhi.n	801b2d8 <USBH_Get_USB_Status+0x44>
 801b2a8:	a201      	add	r2, pc, #4	@ (adr r2, 801b2b0 <USBH_Get_USB_Status+0x1c>)
 801b2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2ae:	bf00      	nop
 801b2b0:	0801b2c1 	.word	0x0801b2c1
 801b2b4:	0801b2c7 	.word	0x0801b2c7
 801b2b8:	0801b2cd 	.word	0x0801b2cd
 801b2bc:	0801b2d3 	.word	0x0801b2d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801b2c0:	2300      	movs	r3, #0
 801b2c2:	73fb      	strb	r3, [r7, #15]
    break;
 801b2c4:	e00b      	b.n	801b2de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801b2c6:	2302      	movs	r3, #2
 801b2c8:	73fb      	strb	r3, [r7, #15]
    break;
 801b2ca:	e008      	b.n	801b2de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801b2cc:	2301      	movs	r3, #1
 801b2ce:	73fb      	strb	r3, [r7, #15]
    break;
 801b2d0:	e005      	b.n	801b2de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801b2d2:	2302      	movs	r3, #2
 801b2d4:	73fb      	strb	r3, [r7, #15]
    break;
 801b2d6:	e002      	b.n	801b2de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801b2d8:	2302      	movs	r3, #2
 801b2da:	73fb      	strb	r3, [r7, #15]
    break;
 801b2dc:	bf00      	nop
  }
  return usb_status;
 801b2de:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	3714      	adds	r7, #20
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ea:	4770      	bx	lr

0801b2ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	b084      	sub	sp, #16
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801b2f6:	79fb      	ldrb	r3, [r7, #7]
 801b2f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801b2fa:	79fb      	ldrb	r3, [r7, #7]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d102      	bne.n	801b306 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801b300:	2300      	movs	r3, #0
 801b302:	73fb      	strb	r3, [r7, #15]
 801b304:	e001      	b.n	801b30a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801b306:	2301      	movs	r3, #1
 801b308:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801b30a:	7bfb      	ldrb	r3, [r7, #15]
 801b30c:	461a      	mov	r2, r3
 801b30e:	2120      	movs	r1, #32
 801b310:	4803      	ldr	r0, [pc, #12]	@ (801b320 <MX_DriverVbusFS+0x34>)
 801b312:	f7ec fa5d 	bl	80077d0 <HAL_GPIO_WritePin>
}
 801b316:	bf00      	nop
 801b318:	3710      	adds	r7, #16
 801b31a:	46bd      	mov	sp, r7
 801b31c:	bd80      	pop	{r7, pc}
 801b31e:	bf00      	nop
 801b320:	40020c00 	.word	0x40020c00

0801b324 <malloc>:
 801b324:	4b02      	ldr	r3, [pc, #8]	@ (801b330 <malloc+0xc>)
 801b326:	4601      	mov	r1, r0
 801b328:	6818      	ldr	r0, [r3, #0]
 801b32a:	f000 b82d 	b.w	801b388 <_malloc_r>
 801b32e:	bf00      	nop
 801b330:	20000090 	.word	0x20000090

0801b334 <free>:
 801b334:	4b02      	ldr	r3, [pc, #8]	@ (801b340 <free+0xc>)
 801b336:	4601      	mov	r1, r0
 801b338:	6818      	ldr	r0, [r3, #0]
 801b33a:	f000 b9d1 	b.w	801b6e0 <_free_r>
 801b33e:	bf00      	nop
 801b340:	20000090 	.word	0x20000090

0801b344 <sbrk_aligned>:
 801b344:	b570      	push	{r4, r5, r6, lr}
 801b346:	4e0f      	ldr	r6, [pc, #60]	@ (801b384 <sbrk_aligned+0x40>)
 801b348:	460c      	mov	r4, r1
 801b34a:	6831      	ldr	r1, [r6, #0]
 801b34c:	4605      	mov	r5, r0
 801b34e:	b911      	cbnz	r1, 801b356 <sbrk_aligned+0x12>
 801b350:	f000 f97c 	bl	801b64c <_sbrk_r>
 801b354:	6030      	str	r0, [r6, #0]
 801b356:	4621      	mov	r1, r4
 801b358:	4628      	mov	r0, r5
 801b35a:	f000 f977 	bl	801b64c <_sbrk_r>
 801b35e:	1c43      	adds	r3, r0, #1
 801b360:	d103      	bne.n	801b36a <sbrk_aligned+0x26>
 801b362:	f04f 34ff 	mov.w	r4, #4294967295
 801b366:	4620      	mov	r0, r4
 801b368:	bd70      	pop	{r4, r5, r6, pc}
 801b36a:	1cc4      	adds	r4, r0, #3
 801b36c:	f024 0403 	bic.w	r4, r4, #3
 801b370:	42a0      	cmp	r0, r4
 801b372:	d0f8      	beq.n	801b366 <sbrk_aligned+0x22>
 801b374:	1a21      	subs	r1, r4, r0
 801b376:	4628      	mov	r0, r5
 801b378:	f000 f968 	bl	801b64c <_sbrk_r>
 801b37c:	3001      	adds	r0, #1
 801b37e:	d1f2      	bne.n	801b366 <sbrk_aligned+0x22>
 801b380:	e7ef      	b.n	801b362 <sbrk_aligned+0x1e>
 801b382:	bf00      	nop
 801b384:	2000ad68 	.word	0x2000ad68

0801b388 <_malloc_r>:
 801b388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b38c:	1ccd      	adds	r5, r1, #3
 801b38e:	f025 0503 	bic.w	r5, r5, #3
 801b392:	3508      	adds	r5, #8
 801b394:	2d0c      	cmp	r5, #12
 801b396:	bf38      	it	cc
 801b398:	250c      	movcc	r5, #12
 801b39a:	2d00      	cmp	r5, #0
 801b39c:	4606      	mov	r6, r0
 801b39e:	db01      	blt.n	801b3a4 <_malloc_r+0x1c>
 801b3a0:	42a9      	cmp	r1, r5
 801b3a2:	d904      	bls.n	801b3ae <_malloc_r+0x26>
 801b3a4:	230c      	movs	r3, #12
 801b3a6:	6033      	str	r3, [r6, #0]
 801b3a8:	2000      	movs	r0, #0
 801b3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b484 <_malloc_r+0xfc>
 801b3b2:	f000 f869 	bl	801b488 <__malloc_lock>
 801b3b6:	f8d8 3000 	ldr.w	r3, [r8]
 801b3ba:	461c      	mov	r4, r3
 801b3bc:	bb44      	cbnz	r4, 801b410 <_malloc_r+0x88>
 801b3be:	4629      	mov	r1, r5
 801b3c0:	4630      	mov	r0, r6
 801b3c2:	f7ff ffbf 	bl	801b344 <sbrk_aligned>
 801b3c6:	1c43      	adds	r3, r0, #1
 801b3c8:	4604      	mov	r4, r0
 801b3ca:	d158      	bne.n	801b47e <_malloc_r+0xf6>
 801b3cc:	f8d8 4000 	ldr.w	r4, [r8]
 801b3d0:	4627      	mov	r7, r4
 801b3d2:	2f00      	cmp	r7, #0
 801b3d4:	d143      	bne.n	801b45e <_malloc_r+0xd6>
 801b3d6:	2c00      	cmp	r4, #0
 801b3d8:	d04b      	beq.n	801b472 <_malloc_r+0xea>
 801b3da:	6823      	ldr	r3, [r4, #0]
 801b3dc:	4639      	mov	r1, r7
 801b3de:	4630      	mov	r0, r6
 801b3e0:	eb04 0903 	add.w	r9, r4, r3
 801b3e4:	f000 f932 	bl	801b64c <_sbrk_r>
 801b3e8:	4581      	cmp	r9, r0
 801b3ea:	d142      	bne.n	801b472 <_malloc_r+0xea>
 801b3ec:	6821      	ldr	r1, [r4, #0]
 801b3ee:	1a6d      	subs	r5, r5, r1
 801b3f0:	4629      	mov	r1, r5
 801b3f2:	4630      	mov	r0, r6
 801b3f4:	f7ff ffa6 	bl	801b344 <sbrk_aligned>
 801b3f8:	3001      	adds	r0, #1
 801b3fa:	d03a      	beq.n	801b472 <_malloc_r+0xea>
 801b3fc:	6823      	ldr	r3, [r4, #0]
 801b3fe:	442b      	add	r3, r5
 801b400:	6023      	str	r3, [r4, #0]
 801b402:	f8d8 3000 	ldr.w	r3, [r8]
 801b406:	685a      	ldr	r2, [r3, #4]
 801b408:	bb62      	cbnz	r2, 801b464 <_malloc_r+0xdc>
 801b40a:	f8c8 7000 	str.w	r7, [r8]
 801b40e:	e00f      	b.n	801b430 <_malloc_r+0xa8>
 801b410:	6822      	ldr	r2, [r4, #0]
 801b412:	1b52      	subs	r2, r2, r5
 801b414:	d420      	bmi.n	801b458 <_malloc_r+0xd0>
 801b416:	2a0b      	cmp	r2, #11
 801b418:	d917      	bls.n	801b44a <_malloc_r+0xc2>
 801b41a:	1961      	adds	r1, r4, r5
 801b41c:	42a3      	cmp	r3, r4
 801b41e:	6025      	str	r5, [r4, #0]
 801b420:	bf18      	it	ne
 801b422:	6059      	strne	r1, [r3, #4]
 801b424:	6863      	ldr	r3, [r4, #4]
 801b426:	bf08      	it	eq
 801b428:	f8c8 1000 	streq.w	r1, [r8]
 801b42c:	5162      	str	r2, [r4, r5]
 801b42e:	604b      	str	r3, [r1, #4]
 801b430:	4630      	mov	r0, r6
 801b432:	f000 f82f 	bl	801b494 <__malloc_unlock>
 801b436:	f104 000b 	add.w	r0, r4, #11
 801b43a:	1d23      	adds	r3, r4, #4
 801b43c:	f020 0007 	bic.w	r0, r0, #7
 801b440:	1ac2      	subs	r2, r0, r3
 801b442:	bf1c      	itt	ne
 801b444:	1a1b      	subne	r3, r3, r0
 801b446:	50a3      	strne	r3, [r4, r2]
 801b448:	e7af      	b.n	801b3aa <_malloc_r+0x22>
 801b44a:	6862      	ldr	r2, [r4, #4]
 801b44c:	42a3      	cmp	r3, r4
 801b44e:	bf0c      	ite	eq
 801b450:	f8c8 2000 	streq.w	r2, [r8]
 801b454:	605a      	strne	r2, [r3, #4]
 801b456:	e7eb      	b.n	801b430 <_malloc_r+0xa8>
 801b458:	4623      	mov	r3, r4
 801b45a:	6864      	ldr	r4, [r4, #4]
 801b45c:	e7ae      	b.n	801b3bc <_malloc_r+0x34>
 801b45e:	463c      	mov	r4, r7
 801b460:	687f      	ldr	r7, [r7, #4]
 801b462:	e7b6      	b.n	801b3d2 <_malloc_r+0x4a>
 801b464:	461a      	mov	r2, r3
 801b466:	685b      	ldr	r3, [r3, #4]
 801b468:	42a3      	cmp	r3, r4
 801b46a:	d1fb      	bne.n	801b464 <_malloc_r+0xdc>
 801b46c:	2300      	movs	r3, #0
 801b46e:	6053      	str	r3, [r2, #4]
 801b470:	e7de      	b.n	801b430 <_malloc_r+0xa8>
 801b472:	230c      	movs	r3, #12
 801b474:	6033      	str	r3, [r6, #0]
 801b476:	4630      	mov	r0, r6
 801b478:	f000 f80c 	bl	801b494 <__malloc_unlock>
 801b47c:	e794      	b.n	801b3a8 <_malloc_r+0x20>
 801b47e:	6005      	str	r5, [r0, #0]
 801b480:	e7d6      	b.n	801b430 <_malloc_r+0xa8>
 801b482:	bf00      	nop
 801b484:	2000ad6c 	.word	0x2000ad6c

0801b488 <__malloc_lock>:
 801b488:	4801      	ldr	r0, [pc, #4]	@ (801b490 <__malloc_lock+0x8>)
 801b48a:	f000 b919 	b.w	801b6c0 <__retarget_lock_acquire_recursive>
 801b48e:	bf00      	nop
 801b490:	2000aeac 	.word	0x2000aeac

0801b494 <__malloc_unlock>:
 801b494:	4801      	ldr	r0, [pc, #4]	@ (801b49c <__malloc_unlock+0x8>)
 801b496:	f000 b914 	b.w	801b6c2 <__retarget_lock_release_recursive>
 801b49a:	bf00      	nop
 801b49c:	2000aeac 	.word	0x2000aeac

0801b4a0 <sniprintf>:
 801b4a0:	b40c      	push	{r2, r3}
 801b4a2:	b530      	push	{r4, r5, lr}
 801b4a4:	4b18      	ldr	r3, [pc, #96]	@ (801b508 <sniprintf+0x68>)
 801b4a6:	1e0c      	subs	r4, r1, #0
 801b4a8:	681d      	ldr	r5, [r3, #0]
 801b4aa:	b09d      	sub	sp, #116	@ 0x74
 801b4ac:	da08      	bge.n	801b4c0 <sniprintf+0x20>
 801b4ae:	238b      	movs	r3, #139	@ 0x8b
 801b4b0:	602b      	str	r3, [r5, #0]
 801b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 801b4b6:	b01d      	add	sp, #116	@ 0x74
 801b4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b4bc:	b002      	add	sp, #8
 801b4be:	4770      	bx	lr
 801b4c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b4c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b4c8:	f04f 0300 	mov.w	r3, #0
 801b4cc:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b4ce:	bf14      	ite	ne
 801b4d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b4d4:	4623      	moveq	r3, r4
 801b4d6:	9304      	str	r3, [sp, #16]
 801b4d8:	9307      	str	r3, [sp, #28]
 801b4da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b4de:	9002      	str	r0, [sp, #8]
 801b4e0:	9006      	str	r0, [sp, #24]
 801b4e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b4e6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b4e8:	ab21      	add	r3, sp, #132	@ 0x84
 801b4ea:	a902      	add	r1, sp, #8
 801b4ec:	4628      	mov	r0, r5
 801b4ee:	9301      	str	r3, [sp, #4]
 801b4f0:	f000 f99c 	bl	801b82c <_svfiprintf_r>
 801b4f4:	1c43      	adds	r3, r0, #1
 801b4f6:	bfbc      	itt	lt
 801b4f8:	238b      	movlt	r3, #139	@ 0x8b
 801b4fa:	602b      	strlt	r3, [r5, #0]
 801b4fc:	2c00      	cmp	r4, #0
 801b4fe:	d0da      	beq.n	801b4b6 <sniprintf+0x16>
 801b500:	9b02      	ldr	r3, [sp, #8]
 801b502:	2200      	movs	r2, #0
 801b504:	701a      	strb	r2, [r3, #0]
 801b506:	e7d6      	b.n	801b4b6 <sniprintf+0x16>
 801b508:	20000090 	.word	0x20000090

0801b50c <siprintf>:
 801b50c:	b40e      	push	{r1, r2, r3}
 801b50e:	b510      	push	{r4, lr}
 801b510:	b09d      	sub	sp, #116	@ 0x74
 801b512:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b514:	9002      	str	r0, [sp, #8]
 801b516:	9006      	str	r0, [sp, #24]
 801b518:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b51c:	480a      	ldr	r0, [pc, #40]	@ (801b548 <siprintf+0x3c>)
 801b51e:	9107      	str	r1, [sp, #28]
 801b520:	9104      	str	r1, [sp, #16]
 801b522:	490a      	ldr	r1, [pc, #40]	@ (801b54c <siprintf+0x40>)
 801b524:	f853 2b04 	ldr.w	r2, [r3], #4
 801b528:	9105      	str	r1, [sp, #20]
 801b52a:	2400      	movs	r4, #0
 801b52c:	a902      	add	r1, sp, #8
 801b52e:	6800      	ldr	r0, [r0, #0]
 801b530:	9301      	str	r3, [sp, #4]
 801b532:	941b      	str	r4, [sp, #108]	@ 0x6c
 801b534:	f000 f97a 	bl	801b82c <_svfiprintf_r>
 801b538:	9b02      	ldr	r3, [sp, #8]
 801b53a:	701c      	strb	r4, [r3, #0]
 801b53c:	b01d      	add	sp, #116	@ 0x74
 801b53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b542:	b003      	add	sp, #12
 801b544:	4770      	bx	lr
 801b546:	bf00      	nop
 801b548:	20000090 	.word	0x20000090
 801b54c:	ffff0208 	.word	0xffff0208

0801b550 <_vsniprintf_r>:
 801b550:	b530      	push	{r4, r5, lr}
 801b552:	4614      	mov	r4, r2
 801b554:	2c00      	cmp	r4, #0
 801b556:	b09b      	sub	sp, #108	@ 0x6c
 801b558:	4605      	mov	r5, r0
 801b55a:	461a      	mov	r2, r3
 801b55c:	da05      	bge.n	801b56a <_vsniprintf_r+0x1a>
 801b55e:	238b      	movs	r3, #139	@ 0x8b
 801b560:	6003      	str	r3, [r0, #0]
 801b562:	f04f 30ff 	mov.w	r0, #4294967295
 801b566:	b01b      	add	sp, #108	@ 0x6c
 801b568:	bd30      	pop	{r4, r5, pc}
 801b56a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b56e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b572:	f04f 0300 	mov.w	r3, #0
 801b576:	9319      	str	r3, [sp, #100]	@ 0x64
 801b578:	bf14      	ite	ne
 801b57a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b57e:	4623      	moveq	r3, r4
 801b580:	9302      	str	r3, [sp, #8]
 801b582:	9305      	str	r3, [sp, #20]
 801b584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b588:	9100      	str	r1, [sp, #0]
 801b58a:	9104      	str	r1, [sp, #16]
 801b58c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b590:	4669      	mov	r1, sp
 801b592:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b594:	f000 f94a 	bl	801b82c <_svfiprintf_r>
 801b598:	1c43      	adds	r3, r0, #1
 801b59a:	bfbc      	itt	lt
 801b59c:	238b      	movlt	r3, #139	@ 0x8b
 801b59e:	602b      	strlt	r3, [r5, #0]
 801b5a0:	2c00      	cmp	r4, #0
 801b5a2:	d0e0      	beq.n	801b566 <_vsniprintf_r+0x16>
 801b5a4:	9b00      	ldr	r3, [sp, #0]
 801b5a6:	2200      	movs	r2, #0
 801b5a8:	701a      	strb	r2, [r3, #0]
 801b5aa:	e7dc      	b.n	801b566 <_vsniprintf_r+0x16>

0801b5ac <vsniprintf>:
 801b5ac:	b507      	push	{r0, r1, r2, lr}
 801b5ae:	9300      	str	r3, [sp, #0]
 801b5b0:	4613      	mov	r3, r2
 801b5b2:	460a      	mov	r2, r1
 801b5b4:	4601      	mov	r1, r0
 801b5b6:	4803      	ldr	r0, [pc, #12]	@ (801b5c4 <vsniprintf+0x18>)
 801b5b8:	6800      	ldr	r0, [r0, #0]
 801b5ba:	f7ff ffc9 	bl	801b550 <_vsniprintf_r>
 801b5be:	b003      	add	sp, #12
 801b5c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b5c4:	20000090 	.word	0x20000090

0801b5c8 <memcmp>:
 801b5c8:	b510      	push	{r4, lr}
 801b5ca:	3901      	subs	r1, #1
 801b5cc:	4402      	add	r2, r0
 801b5ce:	4290      	cmp	r0, r2
 801b5d0:	d101      	bne.n	801b5d6 <memcmp+0xe>
 801b5d2:	2000      	movs	r0, #0
 801b5d4:	e005      	b.n	801b5e2 <memcmp+0x1a>
 801b5d6:	7803      	ldrb	r3, [r0, #0]
 801b5d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b5dc:	42a3      	cmp	r3, r4
 801b5de:	d001      	beq.n	801b5e4 <memcmp+0x1c>
 801b5e0:	1b18      	subs	r0, r3, r4
 801b5e2:	bd10      	pop	{r4, pc}
 801b5e4:	3001      	adds	r0, #1
 801b5e6:	e7f2      	b.n	801b5ce <memcmp+0x6>

0801b5e8 <memset>:
 801b5e8:	4402      	add	r2, r0
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	d100      	bne.n	801b5f2 <memset+0xa>
 801b5f0:	4770      	bx	lr
 801b5f2:	f803 1b01 	strb.w	r1, [r3], #1
 801b5f6:	e7f9      	b.n	801b5ec <memset+0x4>

0801b5f8 <strncpy>:
 801b5f8:	b510      	push	{r4, lr}
 801b5fa:	3901      	subs	r1, #1
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	b132      	cbz	r2, 801b60e <strncpy+0x16>
 801b600:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b604:	f803 4b01 	strb.w	r4, [r3], #1
 801b608:	3a01      	subs	r2, #1
 801b60a:	2c00      	cmp	r4, #0
 801b60c:	d1f7      	bne.n	801b5fe <strncpy+0x6>
 801b60e:	441a      	add	r2, r3
 801b610:	2100      	movs	r1, #0
 801b612:	4293      	cmp	r3, r2
 801b614:	d100      	bne.n	801b618 <strncpy+0x20>
 801b616:	bd10      	pop	{r4, pc}
 801b618:	f803 1b01 	strb.w	r1, [r3], #1
 801b61c:	e7f9      	b.n	801b612 <strncpy+0x1a>

0801b61e <strstr>:
 801b61e:	780a      	ldrb	r2, [r1, #0]
 801b620:	b570      	push	{r4, r5, r6, lr}
 801b622:	b96a      	cbnz	r2, 801b640 <strstr+0x22>
 801b624:	bd70      	pop	{r4, r5, r6, pc}
 801b626:	429a      	cmp	r2, r3
 801b628:	d109      	bne.n	801b63e <strstr+0x20>
 801b62a:	460c      	mov	r4, r1
 801b62c:	4605      	mov	r5, r0
 801b62e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b632:	2b00      	cmp	r3, #0
 801b634:	d0f6      	beq.n	801b624 <strstr+0x6>
 801b636:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b63a:	429e      	cmp	r6, r3
 801b63c:	d0f7      	beq.n	801b62e <strstr+0x10>
 801b63e:	3001      	adds	r0, #1
 801b640:	7803      	ldrb	r3, [r0, #0]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d1ef      	bne.n	801b626 <strstr+0x8>
 801b646:	4618      	mov	r0, r3
 801b648:	e7ec      	b.n	801b624 <strstr+0x6>
	...

0801b64c <_sbrk_r>:
 801b64c:	b538      	push	{r3, r4, r5, lr}
 801b64e:	4d06      	ldr	r5, [pc, #24]	@ (801b668 <_sbrk_r+0x1c>)
 801b650:	2300      	movs	r3, #0
 801b652:	4604      	mov	r4, r0
 801b654:	4608      	mov	r0, r1
 801b656:	602b      	str	r3, [r5, #0]
 801b658:	f7e9 fa08 	bl	8004a6c <_sbrk>
 801b65c:	1c43      	adds	r3, r0, #1
 801b65e:	d102      	bne.n	801b666 <_sbrk_r+0x1a>
 801b660:	682b      	ldr	r3, [r5, #0]
 801b662:	b103      	cbz	r3, 801b666 <_sbrk_r+0x1a>
 801b664:	6023      	str	r3, [r4, #0]
 801b666:	bd38      	pop	{r3, r4, r5, pc}
 801b668:	2000aea8 	.word	0x2000aea8

0801b66c <__errno>:
 801b66c:	4b01      	ldr	r3, [pc, #4]	@ (801b674 <__errno+0x8>)
 801b66e:	6818      	ldr	r0, [r3, #0]
 801b670:	4770      	bx	lr
 801b672:	bf00      	nop
 801b674:	20000090 	.word	0x20000090

0801b678 <__libc_init_array>:
 801b678:	b570      	push	{r4, r5, r6, lr}
 801b67a:	4d0d      	ldr	r5, [pc, #52]	@ (801b6b0 <__libc_init_array+0x38>)
 801b67c:	4c0d      	ldr	r4, [pc, #52]	@ (801b6b4 <__libc_init_array+0x3c>)
 801b67e:	1b64      	subs	r4, r4, r5
 801b680:	10a4      	asrs	r4, r4, #2
 801b682:	2600      	movs	r6, #0
 801b684:	42a6      	cmp	r6, r4
 801b686:	d109      	bne.n	801b69c <__libc_init_array+0x24>
 801b688:	4d0b      	ldr	r5, [pc, #44]	@ (801b6b8 <__libc_init_array+0x40>)
 801b68a:	4c0c      	ldr	r4, [pc, #48]	@ (801b6bc <__libc_init_array+0x44>)
 801b68c:	f000 fba6 	bl	801bddc <_init>
 801b690:	1b64      	subs	r4, r4, r5
 801b692:	10a4      	asrs	r4, r4, #2
 801b694:	2600      	movs	r6, #0
 801b696:	42a6      	cmp	r6, r4
 801b698:	d105      	bne.n	801b6a6 <__libc_init_array+0x2e>
 801b69a:	bd70      	pop	{r4, r5, r6, pc}
 801b69c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6a0:	4798      	blx	r3
 801b6a2:	3601      	adds	r6, #1
 801b6a4:	e7ee      	b.n	801b684 <__libc_init_array+0xc>
 801b6a6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6aa:	4798      	blx	r3
 801b6ac:	3601      	adds	r6, #1
 801b6ae:	e7f2      	b.n	801b696 <__libc_init_array+0x1e>
 801b6b0:	0801edf4 	.word	0x0801edf4
 801b6b4:	0801edf4 	.word	0x0801edf4
 801b6b8:	0801edf4 	.word	0x0801edf4
 801b6bc:	0801edf8 	.word	0x0801edf8

0801b6c0 <__retarget_lock_acquire_recursive>:
 801b6c0:	4770      	bx	lr

0801b6c2 <__retarget_lock_release_recursive>:
 801b6c2:	4770      	bx	lr

0801b6c4 <memcpy>:
 801b6c4:	440a      	add	r2, r1
 801b6c6:	4291      	cmp	r1, r2
 801b6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6cc:	d100      	bne.n	801b6d0 <memcpy+0xc>
 801b6ce:	4770      	bx	lr
 801b6d0:	b510      	push	{r4, lr}
 801b6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b6da:	4291      	cmp	r1, r2
 801b6dc:	d1f9      	bne.n	801b6d2 <memcpy+0xe>
 801b6de:	bd10      	pop	{r4, pc}

0801b6e0 <_free_r>:
 801b6e0:	b538      	push	{r3, r4, r5, lr}
 801b6e2:	4605      	mov	r5, r0
 801b6e4:	2900      	cmp	r1, #0
 801b6e6:	d041      	beq.n	801b76c <_free_r+0x8c>
 801b6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6ec:	1f0c      	subs	r4, r1, #4
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	bfb8      	it	lt
 801b6f2:	18e4      	addlt	r4, r4, r3
 801b6f4:	f7ff fec8 	bl	801b488 <__malloc_lock>
 801b6f8:	4a1d      	ldr	r2, [pc, #116]	@ (801b770 <_free_r+0x90>)
 801b6fa:	6813      	ldr	r3, [r2, #0]
 801b6fc:	b933      	cbnz	r3, 801b70c <_free_r+0x2c>
 801b6fe:	6063      	str	r3, [r4, #4]
 801b700:	6014      	str	r4, [r2, #0]
 801b702:	4628      	mov	r0, r5
 801b704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b708:	f7ff bec4 	b.w	801b494 <__malloc_unlock>
 801b70c:	42a3      	cmp	r3, r4
 801b70e:	d908      	bls.n	801b722 <_free_r+0x42>
 801b710:	6820      	ldr	r0, [r4, #0]
 801b712:	1821      	adds	r1, r4, r0
 801b714:	428b      	cmp	r3, r1
 801b716:	bf01      	itttt	eq
 801b718:	6819      	ldreq	r1, [r3, #0]
 801b71a:	685b      	ldreq	r3, [r3, #4]
 801b71c:	1809      	addeq	r1, r1, r0
 801b71e:	6021      	streq	r1, [r4, #0]
 801b720:	e7ed      	b.n	801b6fe <_free_r+0x1e>
 801b722:	461a      	mov	r2, r3
 801b724:	685b      	ldr	r3, [r3, #4]
 801b726:	b10b      	cbz	r3, 801b72c <_free_r+0x4c>
 801b728:	42a3      	cmp	r3, r4
 801b72a:	d9fa      	bls.n	801b722 <_free_r+0x42>
 801b72c:	6811      	ldr	r1, [r2, #0]
 801b72e:	1850      	adds	r0, r2, r1
 801b730:	42a0      	cmp	r0, r4
 801b732:	d10b      	bne.n	801b74c <_free_r+0x6c>
 801b734:	6820      	ldr	r0, [r4, #0]
 801b736:	4401      	add	r1, r0
 801b738:	1850      	adds	r0, r2, r1
 801b73a:	4283      	cmp	r3, r0
 801b73c:	6011      	str	r1, [r2, #0]
 801b73e:	d1e0      	bne.n	801b702 <_free_r+0x22>
 801b740:	6818      	ldr	r0, [r3, #0]
 801b742:	685b      	ldr	r3, [r3, #4]
 801b744:	6053      	str	r3, [r2, #4]
 801b746:	4408      	add	r0, r1
 801b748:	6010      	str	r0, [r2, #0]
 801b74a:	e7da      	b.n	801b702 <_free_r+0x22>
 801b74c:	d902      	bls.n	801b754 <_free_r+0x74>
 801b74e:	230c      	movs	r3, #12
 801b750:	602b      	str	r3, [r5, #0]
 801b752:	e7d6      	b.n	801b702 <_free_r+0x22>
 801b754:	6820      	ldr	r0, [r4, #0]
 801b756:	1821      	adds	r1, r4, r0
 801b758:	428b      	cmp	r3, r1
 801b75a:	bf04      	itt	eq
 801b75c:	6819      	ldreq	r1, [r3, #0]
 801b75e:	685b      	ldreq	r3, [r3, #4]
 801b760:	6063      	str	r3, [r4, #4]
 801b762:	bf04      	itt	eq
 801b764:	1809      	addeq	r1, r1, r0
 801b766:	6021      	streq	r1, [r4, #0]
 801b768:	6054      	str	r4, [r2, #4]
 801b76a:	e7ca      	b.n	801b702 <_free_r+0x22>
 801b76c:	bd38      	pop	{r3, r4, r5, pc}
 801b76e:	bf00      	nop
 801b770:	2000ad6c 	.word	0x2000ad6c

0801b774 <__ssputs_r>:
 801b774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b778:	688e      	ldr	r6, [r1, #8]
 801b77a:	461f      	mov	r7, r3
 801b77c:	42be      	cmp	r6, r7
 801b77e:	680b      	ldr	r3, [r1, #0]
 801b780:	4682      	mov	sl, r0
 801b782:	460c      	mov	r4, r1
 801b784:	4690      	mov	r8, r2
 801b786:	d82d      	bhi.n	801b7e4 <__ssputs_r+0x70>
 801b788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b78c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b790:	d026      	beq.n	801b7e0 <__ssputs_r+0x6c>
 801b792:	6965      	ldr	r5, [r4, #20]
 801b794:	6909      	ldr	r1, [r1, #16]
 801b796:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b79a:	eba3 0901 	sub.w	r9, r3, r1
 801b79e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b7a2:	1c7b      	adds	r3, r7, #1
 801b7a4:	444b      	add	r3, r9
 801b7a6:	106d      	asrs	r5, r5, #1
 801b7a8:	429d      	cmp	r5, r3
 801b7aa:	bf38      	it	cc
 801b7ac:	461d      	movcc	r5, r3
 801b7ae:	0553      	lsls	r3, r2, #21
 801b7b0:	d527      	bpl.n	801b802 <__ssputs_r+0x8e>
 801b7b2:	4629      	mov	r1, r5
 801b7b4:	f7ff fde8 	bl	801b388 <_malloc_r>
 801b7b8:	4606      	mov	r6, r0
 801b7ba:	b360      	cbz	r0, 801b816 <__ssputs_r+0xa2>
 801b7bc:	6921      	ldr	r1, [r4, #16]
 801b7be:	464a      	mov	r2, r9
 801b7c0:	f7ff ff80 	bl	801b6c4 <memcpy>
 801b7c4:	89a3      	ldrh	r3, [r4, #12]
 801b7c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b7ce:	81a3      	strh	r3, [r4, #12]
 801b7d0:	6126      	str	r6, [r4, #16]
 801b7d2:	6165      	str	r5, [r4, #20]
 801b7d4:	444e      	add	r6, r9
 801b7d6:	eba5 0509 	sub.w	r5, r5, r9
 801b7da:	6026      	str	r6, [r4, #0]
 801b7dc:	60a5      	str	r5, [r4, #8]
 801b7de:	463e      	mov	r6, r7
 801b7e0:	42be      	cmp	r6, r7
 801b7e2:	d900      	bls.n	801b7e6 <__ssputs_r+0x72>
 801b7e4:	463e      	mov	r6, r7
 801b7e6:	6820      	ldr	r0, [r4, #0]
 801b7e8:	4632      	mov	r2, r6
 801b7ea:	4641      	mov	r1, r8
 801b7ec:	f000 faa6 	bl	801bd3c <memmove>
 801b7f0:	68a3      	ldr	r3, [r4, #8]
 801b7f2:	1b9b      	subs	r3, r3, r6
 801b7f4:	60a3      	str	r3, [r4, #8]
 801b7f6:	6823      	ldr	r3, [r4, #0]
 801b7f8:	4433      	add	r3, r6
 801b7fa:	6023      	str	r3, [r4, #0]
 801b7fc:	2000      	movs	r0, #0
 801b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b802:	462a      	mov	r2, r5
 801b804:	f000 fab4 	bl	801bd70 <_realloc_r>
 801b808:	4606      	mov	r6, r0
 801b80a:	2800      	cmp	r0, #0
 801b80c:	d1e0      	bne.n	801b7d0 <__ssputs_r+0x5c>
 801b80e:	6921      	ldr	r1, [r4, #16]
 801b810:	4650      	mov	r0, sl
 801b812:	f7ff ff65 	bl	801b6e0 <_free_r>
 801b816:	230c      	movs	r3, #12
 801b818:	f8ca 3000 	str.w	r3, [sl]
 801b81c:	89a3      	ldrh	r3, [r4, #12]
 801b81e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b822:	81a3      	strh	r3, [r4, #12]
 801b824:	f04f 30ff 	mov.w	r0, #4294967295
 801b828:	e7e9      	b.n	801b7fe <__ssputs_r+0x8a>
	...

0801b82c <_svfiprintf_r>:
 801b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b830:	4698      	mov	r8, r3
 801b832:	898b      	ldrh	r3, [r1, #12]
 801b834:	061b      	lsls	r3, r3, #24
 801b836:	b09d      	sub	sp, #116	@ 0x74
 801b838:	4607      	mov	r7, r0
 801b83a:	460d      	mov	r5, r1
 801b83c:	4614      	mov	r4, r2
 801b83e:	d510      	bpl.n	801b862 <_svfiprintf_r+0x36>
 801b840:	690b      	ldr	r3, [r1, #16]
 801b842:	b973      	cbnz	r3, 801b862 <_svfiprintf_r+0x36>
 801b844:	2140      	movs	r1, #64	@ 0x40
 801b846:	f7ff fd9f 	bl	801b388 <_malloc_r>
 801b84a:	6028      	str	r0, [r5, #0]
 801b84c:	6128      	str	r0, [r5, #16]
 801b84e:	b930      	cbnz	r0, 801b85e <_svfiprintf_r+0x32>
 801b850:	230c      	movs	r3, #12
 801b852:	603b      	str	r3, [r7, #0]
 801b854:	f04f 30ff 	mov.w	r0, #4294967295
 801b858:	b01d      	add	sp, #116	@ 0x74
 801b85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b85e:	2340      	movs	r3, #64	@ 0x40
 801b860:	616b      	str	r3, [r5, #20]
 801b862:	2300      	movs	r3, #0
 801b864:	9309      	str	r3, [sp, #36]	@ 0x24
 801b866:	2320      	movs	r3, #32
 801b868:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b86c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b870:	2330      	movs	r3, #48	@ 0x30
 801b872:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ba10 <_svfiprintf_r+0x1e4>
 801b876:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b87a:	f04f 0901 	mov.w	r9, #1
 801b87e:	4623      	mov	r3, r4
 801b880:	469a      	mov	sl, r3
 801b882:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b886:	b10a      	cbz	r2, 801b88c <_svfiprintf_r+0x60>
 801b888:	2a25      	cmp	r2, #37	@ 0x25
 801b88a:	d1f9      	bne.n	801b880 <_svfiprintf_r+0x54>
 801b88c:	ebba 0b04 	subs.w	fp, sl, r4
 801b890:	d00b      	beq.n	801b8aa <_svfiprintf_r+0x7e>
 801b892:	465b      	mov	r3, fp
 801b894:	4622      	mov	r2, r4
 801b896:	4629      	mov	r1, r5
 801b898:	4638      	mov	r0, r7
 801b89a:	f7ff ff6b 	bl	801b774 <__ssputs_r>
 801b89e:	3001      	adds	r0, #1
 801b8a0:	f000 80a7 	beq.w	801b9f2 <_svfiprintf_r+0x1c6>
 801b8a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8a6:	445a      	add	r2, fp
 801b8a8:	9209      	str	r2, [sp, #36]	@ 0x24
 801b8aa:	f89a 3000 	ldrb.w	r3, [sl]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	f000 809f 	beq.w	801b9f2 <_svfiprintf_r+0x1c6>
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	f04f 32ff 	mov.w	r2, #4294967295
 801b8ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b8be:	f10a 0a01 	add.w	sl, sl, #1
 801b8c2:	9304      	str	r3, [sp, #16]
 801b8c4:	9307      	str	r3, [sp, #28]
 801b8c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b8ca:	931a      	str	r3, [sp, #104]	@ 0x68
 801b8cc:	4654      	mov	r4, sl
 801b8ce:	2205      	movs	r2, #5
 801b8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8d4:	484e      	ldr	r0, [pc, #312]	@ (801ba10 <_svfiprintf_r+0x1e4>)
 801b8d6:	f7e4 fcb3 	bl	8000240 <memchr>
 801b8da:	9a04      	ldr	r2, [sp, #16]
 801b8dc:	b9d8      	cbnz	r0, 801b916 <_svfiprintf_r+0xea>
 801b8de:	06d0      	lsls	r0, r2, #27
 801b8e0:	bf44      	itt	mi
 801b8e2:	2320      	movmi	r3, #32
 801b8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b8e8:	0711      	lsls	r1, r2, #28
 801b8ea:	bf44      	itt	mi
 801b8ec:	232b      	movmi	r3, #43	@ 0x2b
 801b8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b8f2:	f89a 3000 	ldrb.w	r3, [sl]
 801b8f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801b8f8:	d015      	beq.n	801b926 <_svfiprintf_r+0xfa>
 801b8fa:	9a07      	ldr	r2, [sp, #28]
 801b8fc:	4654      	mov	r4, sl
 801b8fe:	2000      	movs	r0, #0
 801b900:	f04f 0c0a 	mov.w	ip, #10
 801b904:	4621      	mov	r1, r4
 801b906:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b90a:	3b30      	subs	r3, #48	@ 0x30
 801b90c:	2b09      	cmp	r3, #9
 801b90e:	d94b      	bls.n	801b9a8 <_svfiprintf_r+0x17c>
 801b910:	b1b0      	cbz	r0, 801b940 <_svfiprintf_r+0x114>
 801b912:	9207      	str	r2, [sp, #28]
 801b914:	e014      	b.n	801b940 <_svfiprintf_r+0x114>
 801b916:	eba0 0308 	sub.w	r3, r0, r8
 801b91a:	fa09 f303 	lsl.w	r3, r9, r3
 801b91e:	4313      	orrs	r3, r2
 801b920:	9304      	str	r3, [sp, #16]
 801b922:	46a2      	mov	sl, r4
 801b924:	e7d2      	b.n	801b8cc <_svfiprintf_r+0xa0>
 801b926:	9b03      	ldr	r3, [sp, #12]
 801b928:	1d19      	adds	r1, r3, #4
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	9103      	str	r1, [sp, #12]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	bfbb      	ittet	lt
 801b932:	425b      	neglt	r3, r3
 801b934:	f042 0202 	orrlt.w	r2, r2, #2
 801b938:	9307      	strge	r3, [sp, #28]
 801b93a:	9307      	strlt	r3, [sp, #28]
 801b93c:	bfb8      	it	lt
 801b93e:	9204      	strlt	r2, [sp, #16]
 801b940:	7823      	ldrb	r3, [r4, #0]
 801b942:	2b2e      	cmp	r3, #46	@ 0x2e
 801b944:	d10a      	bne.n	801b95c <_svfiprintf_r+0x130>
 801b946:	7863      	ldrb	r3, [r4, #1]
 801b948:	2b2a      	cmp	r3, #42	@ 0x2a
 801b94a:	d132      	bne.n	801b9b2 <_svfiprintf_r+0x186>
 801b94c:	9b03      	ldr	r3, [sp, #12]
 801b94e:	1d1a      	adds	r2, r3, #4
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	9203      	str	r2, [sp, #12]
 801b954:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b958:	3402      	adds	r4, #2
 801b95a:	9305      	str	r3, [sp, #20]
 801b95c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ba20 <_svfiprintf_r+0x1f4>
 801b960:	7821      	ldrb	r1, [r4, #0]
 801b962:	2203      	movs	r2, #3
 801b964:	4650      	mov	r0, sl
 801b966:	f7e4 fc6b 	bl	8000240 <memchr>
 801b96a:	b138      	cbz	r0, 801b97c <_svfiprintf_r+0x150>
 801b96c:	9b04      	ldr	r3, [sp, #16]
 801b96e:	eba0 000a 	sub.w	r0, r0, sl
 801b972:	2240      	movs	r2, #64	@ 0x40
 801b974:	4082      	lsls	r2, r0
 801b976:	4313      	orrs	r3, r2
 801b978:	3401      	adds	r4, #1
 801b97a:	9304      	str	r3, [sp, #16]
 801b97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b980:	4824      	ldr	r0, [pc, #144]	@ (801ba14 <_svfiprintf_r+0x1e8>)
 801b982:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b986:	2206      	movs	r2, #6
 801b988:	f7e4 fc5a 	bl	8000240 <memchr>
 801b98c:	2800      	cmp	r0, #0
 801b98e:	d036      	beq.n	801b9fe <_svfiprintf_r+0x1d2>
 801b990:	4b21      	ldr	r3, [pc, #132]	@ (801ba18 <_svfiprintf_r+0x1ec>)
 801b992:	bb1b      	cbnz	r3, 801b9dc <_svfiprintf_r+0x1b0>
 801b994:	9b03      	ldr	r3, [sp, #12]
 801b996:	3307      	adds	r3, #7
 801b998:	f023 0307 	bic.w	r3, r3, #7
 801b99c:	3308      	adds	r3, #8
 801b99e:	9303      	str	r3, [sp, #12]
 801b9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9a2:	4433      	add	r3, r6
 801b9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b9a6:	e76a      	b.n	801b87e <_svfiprintf_r+0x52>
 801b9a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b9ac:	460c      	mov	r4, r1
 801b9ae:	2001      	movs	r0, #1
 801b9b0:	e7a8      	b.n	801b904 <_svfiprintf_r+0xd8>
 801b9b2:	2300      	movs	r3, #0
 801b9b4:	3401      	adds	r4, #1
 801b9b6:	9305      	str	r3, [sp, #20]
 801b9b8:	4619      	mov	r1, r3
 801b9ba:	f04f 0c0a 	mov.w	ip, #10
 801b9be:	4620      	mov	r0, r4
 801b9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b9c4:	3a30      	subs	r2, #48	@ 0x30
 801b9c6:	2a09      	cmp	r2, #9
 801b9c8:	d903      	bls.n	801b9d2 <_svfiprintf_r+0x1a6>
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d0c6      	beq.n	801b95c <_svfiprintf_r+0x130>
 801b9ce:	9105      	str	r1, [sp, #20]
 801b9d0:	e7c4      	b.n	801b95c <_svfiprintf_r+0x130>
 801b9d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b9d6:	4604      	mov	r4, r0
 801b9d8:	2301      	movs	r3, #1
 801b9da:	e7f0      	b.n	801b9be <_svfiprintf_r+0x192>
 801b9dc:	ab03      	add	r3, sp, #12
 801b9de:	9300      	str	r3, [sp, #0]
 801b9e0:	462a      	mov	r2, r5
 801b9e2:	4b0e      	ldr	r3, [pc, #56]	@ (801ba1c <_svfiprintf_r+0x1f0>)
 801b9e4:	a904      	add	r1, sp, #16
 801b9e6:	4638      	mov	r0, r7
 801b9e8:	f3af 8000 	nop.w
 801b9ec:	1c42      	adds	r2, r0, #1
 801b9ee:	4606      	mov	r6, r0
 801b9f0:	d1d6      	bne.n	801b9a0 <_svfiprintf_r+0x174>
 801b9f2:	89ab      	ldrh	r3, [r5, #12]
 801b9f4:	065b      	lsls	r3, r3, #25
 801b9f6:	f53f af2d 	bmi.w	801b854 <_svfiprintf_r+0x28>
 801b9fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b9fc:	e72c      	b.n	801b858 <_svfiprintf_r+0x2c>
 801b9fe:	ab03      	add	r3, sp, #12
 801ba00:	9300      	str	r3, [sp, #0]
 801ba02:	462a      	mov	r2, r5
 801ba04:	4b05      	ldr	r3, [pc, #20]	@ (801ba1c <_svfiprintf_r+0x1f0>)
 801ba06:	a904      	add	r1, sp, #16
 801ba08:	4638      	mov	r0, r7
 801ba0a:	f000 f879 	bl	801bb00 <_printf_i>
 801ba0e:	e7ed      	b.n	801b9ec <_svfiprintf_r+0x1c0>
 801ba10:	0801edb6 	.word	0x0801edb6
 801ba14:	0801edc0 	.word	0x0801edc0
 801ba18:	00000000 	.word	0x00000000
 801ba1c:	0801b775 	.word	0x0801b775
 801ba20:	0801edbc 	.word	0x0801edbc

0801ba24 <_printf_common>:
 801ba24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba28:	4616      	mov	r6, r2
 801ba2a:	4698      	mov	r8, r3
 801ba2c:	688a      	ldr	r2, [r1, #8]
 801ba2e:	690b      	ldr	r3, [r1, #16]
 801ba30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ba34:	4293      	cmp	r3, r2
 801ba36:	bfb8      	it	lt
 801ba38:	4613      	movlt	r3, r2
 801ba3a:	6033      	str	r3, [r6, #0]
 801ba3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ba40:	4607      	mov	r7, r0
 801ba42:	460c      	mov	r4, r1
 801ba44:	b10a      	cbz	r2, 801ba4a <_printf_common+0x26>
 801ba46:	3301      	adds	r3, #1
 801ba48:	6033      	str	r3, [r6, #0]
 801ba4a:	6823      	ldr	r3, [r4, #0]
 801ba4c:	0699      	lsls	r1, r3, #26
 801ba4e:	bf42      	ittt	mi
 801ba50:	6833      	ldrmi	r3, [r6, #0]
 801ba52:	3302      	addmi	r3, #2
 801ba54:	6033      	strmi	r3, [r6, #0]
 801ba56:	6825      	ldr	r5, [r4, #0]
 801ba58:	f015 0506 	ands.w	r5, r5, #6
 801ba5c:	d106      	bne.n	801ba6c <_printf_common+0x48>
 801ba5e:	f104 0a19 	add.w	sl, r4, #25
 801ba62:	68e3      	ldr	r3, [r4, #12]
 801ba64:	6832      	ldr	r2, [r6, #0]
 801ba66:	1a9b      	subs	r3, r3, r2
 801ba68:	42ab      	cmp	r3, r5
 801ba6a:	dc26      	bgt.n	801baba <_printf_common+0x96>
 801ba6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ba70:	6822      	ldr	r2, [r4, #0]
 801ba72:	3b00      	subs	r3, #0
 801ba74:	bf18      	it	ne
 801ba76:	2301      	movne	r3, #1
 801ba78:	0692      	lsls	r2, r2, #26
 801ba7a:	d42b      	bmi.n	801bad4 <_printf_common+0xb0>
 801ba7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ba80:	4641      	mov	r1, r8
 801ba82:	4638      	mov	r0, r7
 801ba84:	47c8      	blx	r9
 801ba86:	3001      	adds	r0, #1
 801ba88:	d01e      	beq.n	801bac8 <_printf_common+0xa4>
 801ba8a:	6823      	ldr	r3, [r4, #0]
 801ba8c:	6922      	ldr	r2, [r4, #16]
 801ba8e:	f003 0306 	and.w	r3, r3, #6
 801ba92:	2b04      	cmp	r3, #4
 801ba94:	bf02      	ittt	eq
 801ba96:	68e5      	ldreq	r5, [r4, #12]
 801ba98:	6833      	ldreq	r3, [r6, #0]
 801ba9a:	1aed      	subeq	r5, r5, r3
 801ba9c:	68a3      	ldr	r3, [r4, #8]
 801ba9e:	bf0c      	ite	eq
 801baa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801baa4:	2500      	movne	r5, #0
 801baa6:	4293      	cmp	r3, r2
 801baa8:	bfc4      	itt	gt
 801baaa:	1a9b      	subgt	r3, r3, r2
 801baac:	18ed      	addgt	r5, r5, r3
 801baae:	2600      	movs	r6, #0
 801bab0:	341a      	adds	r4, #26
 801bab2:	42b5      	cmp	r5, r6
 801bab4:	d11a      	bne.n	801baec <_printf_common+0xc8>
 801bab6:	2000      	movs	r0, #0
 801bab8:	e008      	b.n	801bacc <_printf_common+0xa8>
 801baba:	2301      	movs	r3, #1
 801babc:	4652      	mov	r2, sl
 801babe:	4641      	mov	r1, r8
 801bac0:	4638      	mov	r0, r7
 801bac2:	47c8      	blx	r9
 801bac4:	3001      	adds	r0, #1
 801bac6:	d103      	bne.n	801bad0 <_printf_common+0xac>
 801bac8:	f04f 30ff 	mov.w	r0, #4294967295
 801bacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bad0:	3501      	adds	r5, #1
 801bad2:	e7c6      	b.n	801ba62 <_printf_common+0x3e>
 801bad4:	18e1      	adds	r1, r4, r3
 801bad6:	1c5a      	adds	r2, r3, #1
 801bad8:	2030      	movs	r0, #48	@ 0x30
 801bada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bade:	4422      	add	r2, r4
 801bae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bae4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bae8:	3302      	adds	r3, #2
 801baea:	e7c7      	b.n	801ba7c <_printf_common+0x58>
 801baec:	2301      	movs	r3, #1
 801baee:	4622      	mov	r2, r4
 801baf0:	4641      	mov	r1, r8
 801baf2:	4638      	mov	r0, r7
 801baf4:	47c8      	blx	r9
 801baf6:	3001      	adds	r0, #1
 801baf8:	d0e6      	beq.n	801bac8 <_printf_common+0xa4>
 801bafa:	3601      	adds	r6, #1
 801bafc:	e7d9      	b.n	801bab2 <_printf_common+0x8e>
	...

0801bb00 <_printf_i>:
 801bb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bb04:	7e0f      	ldrb	r7, [r1, #24]
 801bb06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bb08:	2f78      	cmp	r7, #120	@ 0x78
 801bb0a:	4691      	mov	r9, r2
 801bb0c:	4680      	mov	r8, r0
 801bb0e:	460c      	mov	r4, r1
 801bb10:	469a      	mov	sl, r3
 801bb12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bb16:	d807      	bhi.n	801bb28 <_printf_i+0x28>
 801bb18:	2f62      	cmp	r7, #98	@ 0x62
 801bb1a:	d80a      	bhi.n	801bb32 <_printf_i+0x32>
 801bb1c:	2f00      	cmp	r7, #0
 801bb1e:	f000 80d1 	beq.w	801bcc4 <_printf_i+0x1c4>
 801bb22:	2f58      	cmp	r7, #88	@ 0x58
 801bb24:	f000 80b8 	beq.w	801bc98 <_printf_i+0x198>
 801bb28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bb2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bb30:	e03a      	b.n	801bba8 <_printf_i+0xa8>
 801bb32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bb36:	2b15      	cmp	r3, #21
 801bb38:	d8f6      	bhi.n	801bb28 <_printf_i+0x28>
 801bb3a:	a101      	add	r1, pc, #4	@ (adr r1, 801bb40 <_printf_i+0x40>)
 801bb3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bb40:	0801bb99 	.word	0x0801bb99
 801bb44:	0801bbad 	.word	0x0801bbad
 801bb48:	0801bb29 	.word	0x0801bb29
 801bb4c:	0801bb29 	.word	0x0801bb29
 801bb50:	0801bb29 	.word	0x0801bb29
 801bb54:	0801bb29 	.word	0x0801bb29
 801bb58:	0801bbad 	.word	0x0801bbad
 801bb5c:	0801bb29 	.word	0x0801bb29
 801bb60:	0801bb29 	.word	0x0801bb29
 801bb64:	0801bb29 	.word	0x0801bb29
 801bb68:	0801bb29 	.word	0x0801bb29
 801bb6c:	0801bcab 	.word	0x0801bcab
 801bb70:	0801bbd7 	.word	0x0801bbd7
 801bb74:	0801bc65 	.word	0x0801bc65
 801bb78:	0801bb29 	.word	0x0801bb29
 801bb7c:	0801bb29 	.word	0x0801bb29
 801bb80:	0801bccd 	.word	0x0801bccd
 801bb84:	0801bb29 	.word	0x0801bb29
 801bb88:	0801bbd7 	.word	0x0801bbd7
 801bb8c:	0801bb29 	.word	0x0801bb29
 801bb90:	0801bb29 	.word	0x0801bb29
 801bb94:	0801bc6d 	.word	0x0801bc6d
 801bb98:	6833      	ldr	r3, [r6, #0]
 801bb9a:	1d1a      	adds	r2, r3, #4
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	6032      	str	r2, [r6, #0]
 801bba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bba8:	2301      	movs	r3, #1
 801bbaa:	e09c      	b.n	801bce6 <_printf_i+0x1e6>
 801bbac:	6833      	ldr	r3, [r6, #0]
 801bbae:	6820      	ldr	r0, [r4, #0]
 801bbb0:	1d19      	adds	r1, r3, #4
 801bbb2:	6031      	str	r1, [r6, #0]
 801bbb4:	0606      	lsls	r6, r0, #24
 801bbb6:	d501      	bpl.n	801bbbc <_printf_i+0xbc>
 801bbb8:	681d      	ldr	r5, [r3, #0]
 801bbba:	e003      	b.n	801bbc4 <_printf_i+0xc4>
 801bbbc:	0645      	lsls	r5, r0, #25
 801bbbe:	d5fb      	bpl.n	801bbb8 <_printf_i+0xb8>
 801bbc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bbc4:	2d00      	cmp	r5, #0
 801bbc6:	da03      	bge.n	801bbd0 <_printf_i+0xd0>
 801bbc8:	232d      	movs	r3, #45	@ 0x2d
 801bbca:	426d      	negs	r5, r5
 801bbcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bbd0:	4858      	ldr	r0, [pc, #352]	@ (801bd34 <_printf_i+0x234>)
 801bbd2:	230a      	movs	r3, #10
 801bbd4:	e011      	b.n	801bbfa <_printf_i+0xfa>
 801bbd6:	6821      	ldr	r1, [r4, #0]
 801bbd8:	6833      	ldr	r3, [r6, #0]
 801bbda:	0608      	lsls	r0, r1, #24
 801bbdc:	f853 5b04 	ldr.w	r5, [r3], #4
 801bbe0:	d402      	bmi.n	801bbe8 <_printf_i+0xe8>
 801bbe2:	0649      	lsls	r1, r1, #25
 801bbe4:	bf48      	it	mi
 801bbe6:	b2ad      	uxthmi	r5, r5
 801bbe8:	2f6f      	cmp	r7, #111	@ 0x6f
 801bbea:	4852      	ldr	r0, [pc, #328]	@ (801bd34 <_printf_i+0x234>)
 801bbec:	6033      	str	r3, [r6, #0]
 801bbee:	bf14      	ite	ne
 801bbf0:	230a      	movne	r3, #10
 801bbf2:	2308      	moveq	r3, #8
 801bbf4:	2100      	movs	r1, #0
 801bbf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bbfa:	6866      	ldr	r6, [r4, #4]
 801bbfc:	60a6      	str	r6, [r4, #8]
 801bbfe:	2e00      	cmp	r6, #0
 801bc00:	db05      	blt.n	801bc0e <_printf_i+0x10e>
 801bc02:	6821      	ldr	r1, [r4, #0]
 801bc04:	432e      	orrs	r6, r5
 801bc06:	f021 0104 	bic.w	r1, r1, #4
 801bc0a:	6021      	str	r1, [r4, #0]
 801bc0c:	d04b      	beq.n	801bca6 <_printf_i+0x1a6>
 801bc0e:	4616      	mov	r6, r2
 801bc10:	fbb5 f1f3 	udiv	r1, r5, r3
 801bc14:	fb03 5711 	mls	r7, r3, r1, r5
 801bc18:	5dc7      	ldrb	r7, [r0, r7]
 801bc1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bc1e:	462f      	mov	r7, r5
 801bc20:	42bb      	cmp	r3, r7
 801bc22:	460d      	mov	r5, r1
 801bc24:	d9f4      	bls.n	801bc10 <_printf_i+0x110>
 801bc26:	2b08      	cmp	r3, #8
 801bc28:	d10b      	bne.n	801bc42 <_printf_i+0x142>
 801bc2a:	6823      	ldr	r3, [r4, #0]
 801bc2c:	07df      	lsls	r7, r3, #31
 801bc2e:	d508      	bpl.n	801bc42 <_printf_i+0x142>
 801bc30:	6923      	ldr	r3, [r4, #16]
 801bc32:	6861      	ldr	r1, [r4, #4]
 801bc34:	4299      	cmp	r1, r3
 801bc36:	bfde      	ittt	le
 801bc38:	2330      	movle	r3, #48	@ 0x30
 801bc3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bc3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bc42:	1b92      	subs	r2, r2, r6
 801bc44:	6122      	str	r2, [r4, #16]
 801bc46:	f8cd a000 	str.w	sl, [sp]
 801bc4a:	464b      	mov	r3, r9
 801bc4c:	aa03      	add	r2, sp, #12
 801bc4e:	4621      	mov	r1, r4
 801bc50:	4640      	mov	r0, r8
 801bc52:	f7ff fee7 	bl	801ba24 <_printf_common>
 801bc56:	3001      	adds	r0, #1
 801bc58:	d14a      	bne.n	801bcf0 <_printf_i+0x1f0>
 801bc5a:	f04f 30ff 	mov.w	r0, #4294967295
 801bc5e:	b004      	add	sp, #16
 801bc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc64:	6823      	ldr	r3, [r4, #0]
 801bc66:	f043 0320 	orr.w	r3, r3, #32
 801bc6a:	6023      	str	r3, [r4, #0]
 801bc6c:	4832      	ldr	r0, [pc, #200]	@ (801bd38 <_printf_i+0x238>)
 801bc6e:	2778      	movs	r7, #120	@ 0x78
 801bc70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bc74:	6823      	ldr	r3, [r4, #0]
 801bc76:	6831      	ldr	r1, [r6, #0]
 801bc78:	061f      	lsls	r7, r3, #24
 801bc7a:	f851 5b04 	ldr.w	r5, [r1], #4
 801bc7e:	d402      	bmi.n	801bc86 <_printf_i+0x186>
 801bc80:	065f      	lsls	r7, r3, #25
 801bc82:	bf48      	it	mi
 801bc84:	b2ad      	uxthmi	r5, r5
 801bc86:	6031      	str	r1, [r6, #0]
 801bc88:	07d9      	lsls	r1, r3, #31
 801bc8a:	bf44      	itt	mi
 801bc8c:	f043 0320 	orrmi.w	r3, r3, #32
 801bc90:	6023      	strmi	r3, [r4, #0]
 801bc92:	b11d      	cbz	r5, 801bc9c <_printf_i+0x19c>
 801bc94:	2310      	movs	r3, #16
 801bc96:	e7ad      	b.n	801bbf4 <_printf_i+0xf4>
 801bc98:	4826      	ldr	r0, [pc, #152]	@ (801bd34 <_printf_i+0x234>)
 801bc9a:	e7e9      	b.n	801bc70 <_printf_i+0x170>
 801bc9c:	6823      	ldr	r3, [r4, #0]
 801bc9e:	f023 0320 	bic.w	r3, r3, #32
 801bca2:	6023      	str	r3, [r4, #0]
 801bca4:	e7f6      	b.n	801bc94 <_printf_i+0x194>
 801bca6:	4616      	mov	r6, r2
 801bca8:	e7bd      	b.n	801bc26 <_printf_i+0x126>
 801bcaa:	6833      	ldr	r3, [r6, #0]
 801bcac:	6825      	ldr	r5, [r4, #0]
 801bcae:	6961      	ldr	r1, [r4, #20]
 801bcb0:	1d18      	adds	r0, r3, #4
 801bcb2:	6030      	str	r0, [r6, #0]
 801bcb4:	062e      	lsls	r6, r5, #24
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	d501      	bpl.n	801bcbe <_printf_i+0x1be>
 801bcba:	6019      	str	r1, [r3, #0]
 801bcbc:	e002      	b.n	801bcc4 <_printf_i+0x1c4>
 801bcbe:	0668      	lsls	r0, r5, #25
 801bcc0:	d5fb      	bpl.n	801bcba <_printf_i+0x1ba>
 801bcc2:	8019      	strh	r1, [r3, #0]
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	6123      	str	r3, [r4, #16]
 801bcc8:	4616      	mov	r6, r2
 801bcca:	e7bc      	b.n	801bc46 <_printf_i+0x146>
 801bccc:	6833      	ldr	r3, [r6, #0]
 801bcce:	1d1a      	adds	r2, r3, #4
 801bcd0:	6032      	str	r2, [r6, #0]
 801bcd2:	681e      	ldr	r6, [r3, #0]
 801bcd4:	6862      	ldr	r2, [r4, #4]
 801bcd6:	2100      	movs	r1, #0
 801bcd8:	4630      	mov	r0, r6
 801bcda:	f7e4 fab1 	bl	8000240 <memchr>
 801bcde:	b108      	cbz	r0, 801bce4 <_printf_i+0x1e4>
 801bce0:	1b80      	subs	r0, r0, r6
 801bce2:	6060      	str	r0, [r4, #4]
 801bce4:	6863      	ldr	r3, [r4, #4]
 801bce6:	6123      	str	r3, [r4, #16]
 801bce8:	2300      	movs	r3, #0
 801bcea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bcee:	e7aa      	b.n	801bc46 <_printf_i+0x146>
 801bcf0:	6923      	ldr	r3, [r4, #16]
 801bcf2:	4632      	mov	r2, r6
 801bcf4:	4649      	mov	r1, r9
 801bcf6:	4640      	mov	r0, r8
 801bcf8:	47d0      	blx	sl
 801bcfa:	3001      	adds	r0, #1
 801bcfc:	d0ad      	beq.n	801bc5a <_printf_i+0x15a>
 801bcfe:	6823      	ldr	r3, [r4, #0]
 801bd00:	079b      	lsls	r3, r3, #30
 801bd02:	d413      	bmi.n	801bd2c <_printf_i+0x22c>
 801bd04:	68e0      	ldr	r0, [r4, #12]
 801bd06:	9b03      	ldr	r3, [sp, #12]
 801bd08:	4298      	cmp	r0, r3
 801bd0a:	bfb8      	it	lt
 801bd0c:	4618      	movlt	r0, r3
 801bd0e:	e7a6      	b.n	801bc5e <_printf_i+0x15e>
 801bd10:	2301      	movs	r3, #1
 801bd12:	4632      	mov	r2, r6
 801bd14:	4649      	mov	r1, r9
 801bd16:	4640      	mov	r0, r8
 801bd18:	47d0      	blx	sl
 801bd1a:	3001      	adds	r0, #1
 801bd1c:	d09d      	beq.n	801bc5a <_printf_i+0x15a>
 801bd1e:	3501      	adds	r5, #1
 801bd20:	68e3      	ldr	r3, [r4, #12]
 801bd22:	9903      	ldr	r1, [sp, #12]
 801bd24:	1a5b      	subs	r3, r3, r1
 801bd26:	42ab      	cmp	r3, r5
 801bd28:	dcf2      	bgt.n	801bd10 <_printf_i+0x210>
 801bd2a:	e7eb      	b.n	801bd04 <_printf_i+0x204>
 801bd2c:	2500      	movs	r5, #0
 801bd2e:	f104 0619 	add.w	r6, r4, #25
 801bd32:	e7f5      	b.n	801bd20 <_printf_i+0x220>
 801bd34:	0801edc7 	.word	0x0801edc7
 801bd38:	0801edd8 	.word	0x0801edd8

0801bd3c <memmove>:
 801bd3c:	4288      	cmp	r0, r1
 801bd3e:	b510      	push	{r4, lr}
 801bd40:	eb01 0402 	add.w	r4, r1, r2
 801bd44:	d902      	bls.n	801bd4c <memmove+0x10>
 801bd46:	4284      	cmp	r4, r0
 801bd48:	4623      	mov	r3, r4
 801bd4a:	d807      	bhi.n	801bd5c <memmove+0x20>
 801bd4c:	1e43      	subs	r3, r0, #1
 801bd4e:	42a1      	cmp	r1, r4
 801bd50:	d008      	beq.n	801bd64 <memmove+0x28>
 801bd52:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bd56:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bd5a:	e7f8      	b.n	801bd4e <memmove+0x12>
 801bd5c:	4402      	add	r2, r0
 801bd5e:	4601      	mov	r1, r0
 801bd60:	428a      	cmp	r2, r1
 801bd62:	d100      	bne.n	801bd66 <memmove+0x2a>
 801bd64:	bd10      	pop	{r4, pc}
 801bd66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bd6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bd6e:	e7f7      	b.n	801bd60 <memmove+0x24>

0801bd70 <_realloc_r>:
 801bd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd74:	4607      	mov	r7, r0
 801bd76:	4614      	mov	r4, r2
 801bd78:	460d      	mov	r5, r1
 801bd7a:	b921      	cbnz	r1, 801bd86 <_realloc_r+0x16>
 801bd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd80:	4611      	mov	r1, r2
 801bd82:	f7ff bb01 	b.w	801b388 <_malloc_r>
 801bd86:	b92a      	cbnz	r2, 801bd94 <_realloc_r+0x24>
 801bd88:	f7ff fcaa 	bl	801b6e0 <_free_r>
 801bd8c:	4625      	mov	r5, r4
 801bd8e:	4628      	mov	r0, r5
 801bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd94:	f000 f81a 	bl	801bdcc <_malloc_usable_size_r>
 801bd98:	4284      	cmp	r4, r0
 801bd9a:	4606      	mov	r6, r0
 801bd9c:	d802      	bhi.n	801bda4 <_realloc_r+0x34>
 801bd9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bda2:	d8f4      	bhi.n	801bd8e <_realloc_r+0x1e>
 801bda4:	4621      	mov	r1, r4
 801bda6:	4638      	mov	r0, r7
 801bda8:	f7ff faee 	bl	801b388 <_malloc_r>
 801bdac:	4680      	mov	r8, r0
 801bdae:	b908      	cbnz	r0, 801bdb4 <_realloc_r+0x44>
 801bdb0:	4645      	mov	r5, r8
 801bdb2:	e7ec      	b.n	801bd8e <_realloc_r+0x1e>
 801bdb4:	42b4      	cmp	r4, r6
 801bdb6:	4622      	mov	r2, r4
 801bdb8:	4629      	mov	r1, r5
 801bdba:	bf28      	it	cs
 801bdbc:	4632      	movcs	r2, r6
 801bdbe:	f7ff fc81 	bl	801b6c4 <memcpy>
 801bdc2:	4629      	mov	r1, r5
 801bdc4:	4638      	mov	r0, r7
 801bdc6:	f7ff fc8b 	bl	801b6e0 <_free_r>
 801bdca:	e7f1      	b.n	801bdb0 <_realloc_r+0x40>

0801bdcc <_malloc_usable_size_r>:
 801bdcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bdd0:	1f18      	subs	r0, r3, #4
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	bfbc      	itt	lt
 801bdd6:	580b      	ldrlt	r3, [r1, r0]
 801bdd8:	18c0      	addlt	r0, r0, r3
 801bdda:	4770      	bx	lr

0801bddc <_init>:
 801bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdde:	bf00      	nop
 801bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bde2:	bc08      	pop	{r3}
 801bde4:	469e      	mov	lr, r3
 801bde6:	4770      	bx	lr

0801bde8 <_fini>:
 801bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdea:	bf00      	nop
 801bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdee:	bc08      	pop	{r3}
 801bdf0:	469e      	mov	lr, r3
 801bdf2:	4770      	bx	lr
