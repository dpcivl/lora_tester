
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b68  08017594  08017594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080190fc  080190fc  0001b208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080190fc  080190fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019104  08019104  0001b208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019104  08019104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019108  08019108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  0801910c  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c8  080191d4  0001b0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000168  08019274  0001b168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000098b0  20000208  08019314  0001b208  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20009ab8  08019314  0001bab8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001b208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00041bfd  00000000  00000000  0001b238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000935b  00000000  00000000  0005ce35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003630  00000000  00000000  00066190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002a1e  00000000  00000000  000697c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037e57  00000000  00000000  0006c1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a42e  00000000  00000000  000a4035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012c1a6  00000000  00000000  000ee463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021a609  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000eac8  00000000  00000000  0021a64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00229114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801757c 	.word	0x0801757c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0801757c 	.word	0x0801757c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include "uart.h"
#include "logger.h"
#include <stddef.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f003 fe3e 	bl	80042ac <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f016 fba2 	bl	8016d88 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f016 faf6 	bl	8016c60 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f003 fe0e 	bl	80042ac <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f003 fedf 	bl	8004454 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f003 fe00 	bl	80042ac <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f003 fdf8 	bl	80042ac <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f003 fdf3 	bl	80042ac <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08017594 	.word	0x08017594
 80006d4:	080175b0 	.word	0x080175b0
 80006d8:	080175b8 	.word	0x080175b8
 80006dc:	080175d0 	.word	0x080175d0
 80006e0:	08017600 	.word	0x08017600
 80006e4:	08017638 	.word	0x08017638

080006e8 <get_state_name>:
#include "logger.h"
#include <stddef.h>
#include <stdio.h>

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	08017668 	.word	0x08017668
 800076c:	08017670 	.word	0x08017670
 8000770:	0801767c 	.word	0x0801767c
 8000774:	08017684 	.word	0x08017684
 8000778:	08017690 	.word	0x08017690
 800077c:	080176a0 	.word	0x080176a0
 8000780:	080176b0 	.word	0x080176b0
 8000784:	080176c4 	.word	0x080176c4
 8000788:	080176d8 	.word	0x080176d8
 800078c:	080176e4 	.word	0x080176e4
 8000790:	080176ec 	.word	0x080176ec
 8000794:	080176f4 	.word	0x080176f4

08000798 <LoraStarter_Process>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b0bf      	sub	sp, #252	@ 0xfc
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	f000 8289 	beq.w	8000cbc <LoraStarter_Process+0x524>

    LoraState old_state = ctx->state;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	f200 8261 	bhi.w	8000c7e <LoraStarter_Process+0x4e6>
 80007bc:	a201      	add	r2, pc, #4	@ (adr r2, 80007c4 <LoraStarter_Process+0x2c>)
 80007be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c2:	bf00      	nop
 80007c4:	080007e9 	.word	0x080007e9
 80007c8:	08000837 	.word	0x08000837
 80007cc:	0800088d 	.word	0x0800088d
 80007d0:	08000947 	.word	0x08000947
 80007d4:	0800095d 	.word	0x0800095d
 80007d8:	080009ab 	.word	0x080009ab
 80007dc:	08000a69 	.word	0x08000a69
 80007e0:	08000ba5 	.word	0x08000ba5
 80007e4:	08000c0b 	.word	0x08000c0b
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d102      	bne.n	8000808 <LoraStarter_Process+0x70>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <LoraStarter_Process+0x7e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4aaa      	ldr	r2, [pc, #680]	@ (8000abc <LoraStarter_Process+0x324>)
 8000814:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082c:	49a4      	ldr	r1, [pc, #656]	@ (8000ac0 <LoraStarter_Process+0x328>)
 800082e:	2001      	movs	r0, #1
 8000830:	f003 fd3c 	bl	80042ac <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000834:	e22a      	b.n	8000c8c <LoraStarter_Process+0x4f4>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	da20      	bge.n	8000884 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	1c59      	adds	r1, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68d8      	ldr	r0, [r3, #12]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4603      	mov	r3, r0
 800085e:	460a      	mov	r2, r1
 8000860:	4998      	ldr	r1, [pc, #608]	@ (8000ac4 <LoraStarter_Process+0x32c>)
 8000862:	2000      	movs	r0, #0
 8000864:	f003 fd22 	bl	80042ac <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fec8 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2202      	movs	r2, #2
 8000880:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000882:	e203      	b.n	8000c8c <LoraStarter_Process+0x4f4>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2203      	movs	r2, #3
 8000888:	701a      	strb	r2, [r3, #0]
            break;
 800088a:	e1ff      	b.n	8000c8c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 81f7 	beq.w	8000c82 <LoraStarter_Process+0x4ea>
                if (is_response_ok(uart_rx)) {
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f000 fa31 	bl	8000cfc <is_response_ok>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d010      	beq.n	80008c2 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	461a      	mov	r2, r3
 80008a8:	4987      	ldr	r1, [pc, #540]	@ (8000ac8 <LoraStarter_Process+0x330>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f003 fcfe 	bl	80042ac <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 80008c0:	e1df      	b.n	8000c82 <LoraStarter_Process+0x4ea>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 80008c2:	4982      	ldr	r1, [pc, #520]	@ (8000acc <LoraStarter_Process+0x334>)
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f016 fa7a 	bl	8016dbe <strstr>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d107      	bne.n	80008e0 <LoraStarter_Process+0x148>
 80008d0:	497f      	ldr	r1, [pc, #508]	@ (8000ad0 <LoraStarter_Process+0x338>)
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f016 fa73 	bl	8016dbe <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 81d1 	beq.w	8000c82 <LoraStarter_Process+0x4ea>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	497a      	ldr	r1, [pc, #488]	@ (8000ad4 <LoraStarter_Process+0x33c>)
 80008ea:	2002      	movs	r0, #2
 80008ec:	f003 fcde 	bl	80042ac <LOGGER_SendFormatted>
                    ctx->error_count++;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	dc0d      	bgt.n	800091e <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	3301      	adds	r3, #1
 800090e:	4972      	ldr	r1, [pc, #456]	@ (8000ad8 <LoraStarter_Process+0x340>)
 8000910:	2001      	movs	r0, #1
 8000912:	f003 fccb 	bl	80042ac <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
            break;
 800091c:	e1b1      	b.n	8000c82 <LoraStarter_Process+0x4ea>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	461a      	mov	r2, r3
 8000926:	496d      	ldr	r1, [pc, #436]	@ (8000adc <LoraStarter_Process+0x344>)
 8000928:	2002      	movs	r0, #2
 800092a:	f003 fcbf 	bl	80042ac <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
            break;
 8000944:	e19d      	b.n	8000c82 <LoraStarter_Process+0x4ea>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 8000946:	4966      	ldr	r1, [pc, #408]	@ (8000ae0 <LoraStarter_Process+0x348>)
 8000948:	2001      	movs	r0, #1
 800094a:	f003 fcaf 	bl	80042ac <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 800094e:	4865      	ldr	r0, [pc, #404]	@ (8000ae4 <LoraStarter_Process+0x34c>)
 8000950:	f7ff fe5c 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2204      	movs	r2, #4
 8000958:	701a      	strb	r2, [r3, #0]
            break;
 800095a:	e197      	b.n	8000c8c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8191 	beq.w	8000c86 <LoraStarter_Process+0x4ee>
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f000 fa31 	bl	8000dcc <is_join_response_ok>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 818a 	beq.w	8000c86 <LoraStarter_Process+0x4ee>
                LORA_LOG_JOIN_SUCCESS();
 8000972:	495d      	ldr	r1, [pc, #372]	@ (8000ae8 <LoraStarter_Process+0x350>)
 8000974:	2001      	movs	r0, #1
 8000976:	f003 fc99 	bl	80042ac <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2205      	movs	r2, #5
 800097e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	461a      	mov	r2, r3
 80009a0:	4952      	ldr	r1, [pc, #328]	@ (8000aec <LoraStarter_Process+0x354>)
 80009a2:	2001      	movs	r0, #1
 80009a4:	f003 fc82 	bl	80042ac <LOGGER_SendFormatted>
            }
            break;
 80009a8:	e16d      	b.n	8000c86 <LoraStarter_Process+0x4ee>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <LoraStarter_Process+0x220>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	e000      	b.n	80009ba <LoraStarter_Process+0x222>
 80009b8:	4b40      	ldr	r3, [pc, #256]	@ (8000abc <LoraStarter_Process+0x324>)
 80009ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 80009be:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80009c2:	f7ff fc2f 	bl	8000224 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80009d2:	e014      	b.n	80009fe <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 80009d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	f107 020c 	add.w	r2, r7, #12
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009e4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4940      	ldr	r1, [pc, #256]	@ (8000af0 <LoraStarter_Process+0x358>)
 80009f0:	f016 f96c 	bl	8016ccc <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 80009f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009f8:	3301      	adds	r3, #1
 80009fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80009fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a06:	429a      	cmp	r2, r3
 8000a08:	da03      	bge.n	8000a12 <LoraStarter_Process+0x27a>
 8000a0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a0e:	2b1e      	cmp	r3, #30
 8000a10:	dde0      	ble.n	80009d4 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	33f0      	adds	r3, #240	@ 0xf0
 8000a1a:	443b      	add	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000a2a:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <LoraStarter_Process+0x35c>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	f016 f917 	bl	8016c60 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a36:	4930      	ldr	r1, [pc, #192]	@ (8000af8 <LoraStarter_Process+0x360>)
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f003 fc37 	bl	80042ac <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000a3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fde2 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4927      	ldr	r1, [pc, #156]	@ (8000afc <LoraStarter_Process+0x364>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f003 fc23 	bl	80042ac <LOGGER_SendFormatted>
            }
            break;
 8000a66:	e111      	b.n	8000c8c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 810d 	beq.w	8000c8a <LoraStarter_Process+0x4f2>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000a70:	6838      	ldr	r0, [r7, #0]
 8000a72:	f000 fa2d 	bl	8000ed0 <ResponseHandler_ParseSendResponse>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000a7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d03f      	beq.n	8000b04 <LoraStarter_Process+0x36c>
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	f300 8086 	bgt.w	8000b96 <LoraStarter_Process+0x3fe>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <LoraStarter_Process+0x2fc>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d04c      	beq.n	8000b2c <LoraStarter_Process+0x394>
 8000a92:	e080      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000a94:	491a      	ldr	r1, [pc, #104]	@ (8000b00 <LoraStarter_Process+0x368>)
 8000a96:	2001      	movs	r0, #1
 8000a98:	f003 fc08 	bl	80042ac <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000ab0:	f003 fba6 	bl	8004200 <TIME_GetCurrentMs>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]
                        break;
 8000aba:	e072      	b.n	8000ba2 <LoraStarter_Process+0x40a>
 8000abc:	08017718 	.word	0x08017718
 8000ac0:	08017720 	.word	0x08017720
 8000ac4:	08017758 	.word	0x08017758
 8000ac8:	0801777c 	.word	0x0801777c
 8000acc:	080176ec 	.word	0x080176ec
 8000ad0:	0801779c 	.word	0x0801779c
 8000ad4:	080177b4 	.word	0x080177b4
 8000ad8:	080177d4 	.word	0x080177d4
 8000adc:	08017800 	.word	0x08017800
 8000ae0:	0801783c 	.word	0x0801783c
 8000ae4:	08017858 	.word	0x08017858
 8000ae8:	08017864 	.word	0x08017864
 8000aec:	0801787c 	.word	0x0801787c
 8000af0:	080178ac 	.word	0x080178ac
 8000af4:	080178b4 	.word	0x080178b4
 8000af8:	080178c4 	.word	0x080178c4
 8000afc:	080178dc 	.word	0x080178dc
 8000b00:	080178f4 	.word	0x080178f4
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b04:	496f      	ldr	r1, [pc, #444]	@ (8000cc4 <LoraStarter_Process+0x52c>)
 8000b06:	2002      	movs	r0, #2
 8000b08:	f003 fbd0 	bl	80042ac <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2207      	movs	r2, #7
 8000b10:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b20:	f003 fb6e 	bl	8004200 <TIME_GetCurrentMs>
 8000b24:	4602      	mov	r2, r0
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	611a      	str	r2, [r3, #16]
                        break;
 8000b2a:	e03a      	b.n	8000ba2 <LoraStarter_Process+0x40a>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000b2c:	4a66      	ldr	r2, [pc, #408]	@ (8000cc8 <LoraStarter_Process+0x530>)
 8000b2e:	4967      	ldr	r1, [pc, #412]	@ (8000ccc <LoraStarter_Process+0x534>)
 8000b30:	2002      	movs	r0, #2
 8000b32:	f003 fbbb 	bl	80042ac <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4962      	ldr	r1, [pc, #392]	@ (8000cd0 <LoraStarter_Process+0x538>)
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f003 fbaf 	bl	80042ac <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <LoraStarter_Process+0x3ca>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a1a      	ldr	r2, [r3, #32]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	da11      	bge.n	8000b86 <LoraStarter_Process+0x3ee>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a1a      	ldr	r2, [r3, #32]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <LoraStarter_Process+0x3dc>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	e000      	b.n	8000b76 <LoraStarter_Process+0x3de>
 8000b74:	4b57      	ldr	r3, [pc, #348]	@ (8000cd4 <LoraStarter_Process+0x53c>)
 8000b76:	4958      	ldr	r1, [pc, #352]	@ (8000cd8 <LoraStarter_Process+0x540>)
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f003 fb97 	bl	80042ac <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2208      	movs	r2, #8
 8000b82:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000b84:	e00d      	b.n	8000ba2 <LoraStarter_Process+0x40a>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000b86:	4955      	ldr	r1, [pc, #340]	@ (8000cdc <LoraStarter_Process+0x544>)
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f003 fb8f 	bl	80042ac <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	220a      	movs	r2, #10
 8000b92:	701a      	strb	r2, [r3, #0]
                        break;
 8000b94:	e005      	b.n	8000ba2 <LoraStarter_Process+0x40a>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	4951      	ldr	r1, [pc, #324]	@ (8000ce0 <LoraStarter_Process+0x548>)
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f003 fb86 	bl	80042ac <LOGGER_SendFormatted>
                        break;
 8000ba0:	bf00      	nop
                }
            }
            break;
 8000ba2:	e072      	b.n	8000c8a <LoraStarter_Process+0x4f2>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000ba4:	f003 fb2c 	bl	8004200 <TIME_GetCurrentMs>
 8000ba8:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <LoraStarter_Process+0x422>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	e001      	b.n	8000bbe <LoraStarter_Process+0x426>
 8000bba:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d809      	bhi.n	8000be8 <LoraStarter_Process+0x450>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000bd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bd8:	4942      	ldr	r1, [pc, #264]	@ (8000ce4 <LoraStarter_Process+0x54c>)
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f003 fb66 	bl	80042ac <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2205      	movs	r2, #5
 8000be4:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000be6:	e051      	b.n	8000c8c <LoraStarter_Process+0x4f4>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691a      	ldr	r2, [r3, #16]
 8000bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bf6:	4413      	add	r3, r2
 8000bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000bfc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c00:	4939      	ldr	r1, [pc, #228]	@ (8000ce8 <LoraStarter_Process+0x550>)
 8000c02:	2000      	movs	r0, #0
 8000c04:	f003 fb52 	bl	80042ac <LOGGER_SendFormatted>
            break;
 8000c08:	e040      	b.n	8000c8c <LoraStarter_Process+0x4f4>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c0a:	f003 faf9 	bl	8004200 <TIME_GetCurrentMs>
 8000c0e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10b      	bne.n	8000c32 <LoraStarter_Process+0x49a>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c1a:	4934      	ldr	r1, [pc, #208]	@ (8000cec <LoraStarter_Process+0x554>)
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f003 fb45 	bl	80042ac <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c28:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000c30:	e02c      	b.n	8000c8c <LoraStarter_Process+0x4f4>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c3a:	1ad2      	subs	r2, r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d30e      	bcc.n	8000c62 <LoraStarter_Process+0x4ca>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4929      	ldr	r1, [pc, #164]	@ (8000cf0 <LoraStarter_Process+0x558>)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f003 fb2d 	bl	80042ac <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c58:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	701a      	strb	r2, [r3, #0]
            break;
 8000c60:	e014      	b.n	8000c8c <LoraStarter_Process+0x4f4>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000c6e:	1acb      	subs	r3, r1, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	461a      	mov	r2, r3
 8000c74:	491f      	ldr	r1, [pc, #124]	@ (8000cf4 <LoraStarter_Process+0x55c>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f003 fb18 	bl	80042ac <LOGGER_SendFormatted>
            break;
 8000c7c:	e006      	b.n	8000c8c <LoraStarter_Process+0x4f4>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000c7e:	bf00      	nop
 8000c80:	e004      	b.n	8000c8c <LoraStarter_Process+0x4f4>
            break;
 8000c82:	bf00      	nop
 8000c84:	e002      	b.n	8000c8c <LoraStarter_Process+0x4f4>
            break;
 8000c86:	bf00      	nop
 8000c88:	e000      	b.n	8000c8c <LoraStarter_Process+0x4f4>
            break;
 8000c8a:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d012      	beq.n	8000cbe <LoraStarter_Process+0x526>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000c98:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd23 	bl	80006e8 <get_state_name>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fd1d 	bl	80006e8 <get_state_name>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4622      	mov	r2, r4
 8000cb2:	4911      	ldr	r1, [pc, #68]	@ (8000cf8 <LoraStarter_Process+0x560>)
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f003 faf9 	bl	80042ac <LOGGER_SendFormatted>
 8000cba:	e000      	b.n	8000cbe <LoraStarter_Process+0x526>
    if (ctx == NULL) return;
 8000cbc:	bf00      	nop
    }
}
 8000cbe:	37f4      	adds	r7, #244	@ 0xf4
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	0801790c 	.word	0x0801790c
 8000cc8:	08017920 	.word	0x08017920
 8000ccc:	08017930 	.word	0x08017930
 8000cd0:	08017948 	.word	0x08017948
 8000cd4:	08017960 	.word	0x08017960
 8000cd8:	08017964 	.word	0x08017964
 8000cdc:	08017980 	.word	0x08017980
 8000ce0:	080179a4 	.word	0x080179a4
 8000ce4:	080179c0 	.word	0x080179c0
 8000ce8:	080179fc 	.word	0x080179fc
 8000cec:	08017a30 	.word	0x08017a30
 8000cf0:	08017a48 	.word	0x08017a48
 8000cf4:	08017a70 	.word	0x08017a70
 8000cf8:	08017aa4 	.word	0x08017aa4

08000cfc <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d105      	bne.n	8000d16 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000d0a:	4925      	ldr	r1, [pc, #148]	@ (8000da0 <is_response_ok+0xa4>)
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f003 facd 	bl	80042ac <LOGGER_SendFormatted>
        return false;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e03f      	b.n	8000d96 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4922      	ldr	r1, [pc, #136]	@ (8000da4 <is_response_ok+0xa8>)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f003 fac6 	bl	80042ac <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000d20:	4921      	ldr	r1, [pc, #132]	@ (8000da8 <is_response_ok+0xac>)
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fa74 	bl	8000210 <strcmp>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000d2e:	491f      	ldr	r1, [pc, #124]	@ (8000dac <is_response_ok+0xb0>)
 8000d30:	2000      	movs	r0, #0
 8000d32:	f003 fabb 	bl	80042ac <LOGGER_SendFormatted>
        return true;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e02d      	b.n	8000d96 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000d3a:	491d      	ldr	r1, [pc, #116]	@ (8000db0 <is_response_ok+0xb4>)
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fa67 	bl	8000210 <strcmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000d48:	491a      	ldr	r1, [pc, #104]	@ (8000db4 <is_response_ok+0xb8>)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f003 faae 	bl	80042ac <LOGGER_SendFormatted>
        return true;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e020      	b.n	8000d96 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000d54:	4918      	ldr	r1, [pc, #96]	@ (8000db8 <is_response_ok+0xbc>)
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fa5a 	bl	8000210 <strcmp>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000d62:	4916      	ldr	r1, [pc, #88]	@ (8000dbc <is_response_ok+0xc0>)
 8000d64:	2000      	movs	r0, #0
 8000d66:	f003 faa1 	bl	80042ac <LOGGER_SendFormatted>
        return true;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e013      	b.n	8000d96 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000d6e:	4914      	ldr	r1, [pc, #80]	@ (8000dc0 <is_response_ok+0xc4>)
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f016 f824 	bl	8016dbe <strstr>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4911      	ldr	r1, [pc, #68]	@ (8000dc4 <is_response_ok+0xc8>)
 8000d80:	2000      	movs	r0, #0
 8000d82:	f003 fa93 	bl	80042ac <LOGGER_SendFormatted>
        return true;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e005      	b.n	8000d96 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	490e      	ldr	r1, [pc, #56]	@ (8000dc8 <is_response_ok+0xcc>)
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f003 fa8c 	bl	80042ac <LOGGER_SendFormatted>
    return false;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	08017ac4 	.word	0x08017ac4
 8000da4:	08017af4 	.word	0x08017af4
 8000da8:	08017b24 	.word	0x08017b24
 8000dac:	08017b28 	.word	0x08017b28
 8000db0:	08017b50 	.word	0x08017b50
 8000db4:	08017b58 	.word	0x08017b58
 8000db8:	08017b8c 	.word	0x08017b8c
 8000dbc:	08017b90 	.word	0x08017b90
 8000dc0:	08017bc4 	.word	0x08017bc4
 8000dc4:	08017bcc 	.word	0x08017bcc
 8000dc8:	08017c00 	.word	0x08017c00

08000dcc <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0c4      	sub	sp, #272	@ 0x110
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000dda:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000ddc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000de0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d105      	bne.n	8000df6 <is_join_response_ok+0x2a>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000dea:	4934      	ldr	r1, [pc, #208]	@ (8000ebc <is_join_response_ok+0xf0>)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f003 fa5d 	bl	80042ac <LOGGER_SendFormatted>
        return false;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e05d      	b.n	8000eb2 <is_join_response_ok+0xe6>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	492f      	ldr	r1, [pc, #188]	@ (8000ec0 <is_join_response_ok+0xf4>)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f003 fa52 	bl	80042ac <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[256];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000e08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e10:	f107 0008 	add.w	r0, r7, #8
 8000e14:	22ff      	movs	r2, #255	@ 0xff
 8000e16:	6819      	ldr	r1, [r3, #0]
 8000e18:	f015 ffbe 	bl	8016d98 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000e1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    while (*pos) {
 8000e32:	e013      	b.n	8000e5c <is_join_response_ok+0x90>
        if (*pos == '\r' || *pos == '\n') {
 8000e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b0d      	cmp	r3, #13
 8000e3c:	d004      	beq.n	8000e48 <is_join_response_ok+0x7c>
 8000e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b0a      	cmp	r3, #10
 8000e46:	d104      	bne.n	8000e52 <is_join_response_ok+0x86>
            *pos = '\0';
 8000e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
            break;
 8000e50:	e009      	b.n	8000e66 <is_join_response_ok+0x9a>
        }
        pos++;
 8000e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e56:	3301      	adds	r3, #1
 8000e58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    while (*pos) {
 8000e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e6      	bne.n	8000e34 <is_join_response_ok+0x68>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4916      	ldr	r1, [pc, #88]	@ (8000ec4 <is_join_response_ok+0xf8>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f9cf 	bl	8000210 <strcmp>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf0c      	ite	eq
 8000e78:	2301      	moveq	r3, #1
 8000e7a:	2300      	movne	r3, #0
 8000e7c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    
    if (result) {
 8000e80:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d009      	beq.n	8000e9c <is_join_response_ok+0xd0>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 8000e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <is_join_response_ok+0xfc>)
 8000e94:	2001      	movs	r0, #1
 8000e96:	f003 fa09 	bl	80042ac <LOGGER_SendFormatted>
 8000e9a:	e008      	b.n	8000eae <is_join_response_ok+0xe2>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000e9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ea0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4909      	ldr	r1, [pc, #36]	@ (8000ecc <is_join_response_ok+0x100>)
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f003 f9ff 	bl	80042ac <LOGGER_SendFormatted>
    }
    
    return result;
 8000eae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08017c2c 	.word	0x08017c2c
 8000ec0:	08017c64 	.word	0x08017c64
 8000ec4:	08017c94 	.word	0x08017c94
 8000ec8:	08017ca0 	.word	0x08017ca0
 8000ecc:	08017cd0 	.word	0x08017cd0

08000ed0 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8000ede:	491e      	ldr	r1, [pc, #120]	@ (8000f58 <ResponseHandler_ParseSendResponse+0x88>)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f003 f9e3 	bl	80042ac <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e031      	b.n	8000f4e <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	491b      	ldr	r1, [pc, #108]	@ (8000f5c <ResponseHandler_ParseSendResponse+0x8c>)
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f003 f9dc 	bl	80042ac <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8000ef4:	491a      	ldr	r1, [pc, #104]	@ (8000f60 <ResponseHandler_ParseSendResponse+0x90>)
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f015 ff61 	bl	8016dbe <strstr>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d005      	beq.n	8000f0e <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8000f02:	4918      	ldr	r1, [pc, #96]	@ (8000f64 <ResponseHandler_ParseSendResponse+0x94>)
 8000f04:	2001      	movs	r0, #1
 8000f06:	f003 f9d1 	bl	80042ac <LOGGER_SendFormatted>
        return RESPONSE_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e01f      	b.n	8000f4e <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8000f0e:	4916      	ldr	r1, [pc, #88]	@ (8000f68 <ResponseHandler_ParseSendResponse+0x98>)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f015 ff54 	bl	8016dbe <strstr>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8000f1c:	4913      	ldr	r1, [pc, #76]	@ (8000f6c <ResponseHandler_ParseSendResponse+0x9c>)
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f003 f9c4 	bl	80042ac <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e012      	b.n	8000f4e <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8000f28:	4911      	ldr	r1, [pc, #68]	@ (8000f70 <ResponseHandler_ParseSendResponse+0xa0>)
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff f970 	bl	8000210 <strcmp>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d105      	bne.n	8000f42 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8000f36:	490f      	ldr	r1, [pc, #60]	@ (8000f74 <ResponseHandler_ParseSendResponse+0xa4>)
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f003 f9b7 	bl	80042ac <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e005      	b.n	8000f4e <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <ResponseHandler_ParseSendResponse+0xa8>)
 8000f46:	2000      	movs	r0, #0
 8000f48:	f003 f9b0 	bl	80042ac <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8000f4c:	2303      	movs	r3, #3
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08017cfc 	.word	0x08017cfc
 8000f5c:	08017d30 	.word	0x08017d30
 8000f60:	08017d60 	.word	0x08017d60
 8000f64:	08017d78 	.word	0x08017d78
 8000f68:	08017da8 	.word	0x08017da8
 8000f6c:	08017dc4 	.word	0x08017dc4
 8000f70:	08017df8 	.word	0x08017df8
 8000f74:	08017e00 	.word	0x08017e00
 8000f78:	08017e2c 	.word	0x08017e2c

08000f7c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <vApplicationGetIdleTaskMemory+0x2c>)
 8000fc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <vApplicationGetIdleTaskMemory+0x30>)
 8000fc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2280      	movs	r2, #128	@ 0x80
 8000fcc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000224 	.word	0x20000224
 8000fe0:	2000027c 	.word	0x2000027c

08000fe4 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART DMA 콜백 함수들
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <HAL_UART_RxCpltCallback+0x38>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10e      	bne.n	8001014 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_UART_RxCpltCallback+0x3c>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_UART_RxCpltCallback+0x40>)
 8000ffe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001002:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <HAL_UART_RxCpltCallback+0x40>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	4906      	ldr	r1, [pc, #24]	@ (8001028 <HAL_UART_RxCpltCallback+0x44>)
 800100e:	2001      	movs	r0, #1
 8001010:	f003 f94c 	bl	80042ac <LOGGER_SendFormatted>
  }
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40011400 	.word	0x40011400
 8001020:	20000fd4 	.word	0x20000fd4
 8001024:	20000fd6 	.word	0x20000fd6
 8001028:	08017e5c 	.word	0x08017e5c

0800102c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <HAL_UART_RxHalfCpltCallback+0x24>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d103      	bne.n	8001046 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 800103e:	4905      	ldr	r1, [pc, #20]	@ (8001054 <HAL_UART_RxHalfCpltCallback+0x28>)
 8001040:	2002      	movs	r0, #2
 8001042:	f003 f933 	bl	80042ac <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40011400 	.word	0x40011400
 8001054:	08017e94 	.word	0x08017e94

08001058 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a3c      	ldr	r2, [pc, #240]	@ (8001158 <HAL_UART_ErrorCallback+0x100>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d171      	bne.n	800114e <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 800106a:	4b3c      	ldr	r3, [pc, #240]	@ (800115c <HAL_UART_ErrorCallback+0x104>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8001070:	493b      	ldr	r1, [pc, #236]	@ (8001160 <HAL_UART_ErrorCallback+0x108>)
 8001072:	2002      	movs	r0, #2
 8001074:	f003 f91a 	bl	80042ac <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b08      	cmp	r3, #8
 8001084:	d107      	bne.n	8001096 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2208      	movs	r2, #8
 800108c:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 800108e:	4935      	ldr	r1, [pc, #212]	@ (8001164 <HAL_UART_ErrorCallback+0x10c>)
 8001090:	2002      	movs	r0, #2
 8001092:	f003 f90b 	bl	80042ac <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d107      	bne.n	80010b4 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2204      	movs	r2, #4
 80010aa:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 80010ac:	492e      	ldr	r1, [pc, #184]	@ (8001168 <HAL_UART_ErrorCallback+0x110>)
 80010ae:	2002      	movs	r0, #2
 80010b0:	f003 f8fc 	bl	80042ac <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d107      	bne.n	80010d2 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2202      	movs	r2, #2
 80010c8:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 80010ca:	4928      	ldr	r1, [pc, #160]	@ (800116c <HAL_UART_ErrorCallback+0x114>)
 80010cc:	2002      	movs	r0, #2
 80010ce:	f003 f8ed 	bl	80042ac <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d107      	bne.n	80010f0 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 80010e8:	4921      	ldr	r1, [pc, #132]	@ (8001170 <HAL_UART_ErrorCallback+0x118>)
 80010ea:	2002      	movs	r0, #2
 80010ec:	f003 f8de 	bl	80042ac <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f00d f86e 	bl	800e1d2 <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2220      	movs	r2, #32
 80010fa:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2220      	movs	r2, #32
 8001100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8001116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800111a:	2100      	movs	r1, #0
 800111c:	4815      	ldr	r0, [pc, #84]	@ (8001174 <HAL_UART_ErrorCallback+0x11c>)
 800111e:	f015 fe33 	bl	8016d88 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001126:	4913      	ldr	r1, [pc, #76]	@ (8001174 <HAL_UART_ErrorCallback+0x11c>)
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f00d f80e 	bl	800e14a <HAL_UART_Receive_DMA>
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d104      	bne.n	8001142 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8001138:	490f      	ldr	r1, [pc, #60]	@ (8001178 <HAL_UART_ErrorCallback+0x120>)
 800113a:	2001      	movs	r0, #1
 800113c:	f003 f8b6 	bl	80042ac <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8001140:	e005      	b.n	800114e <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	461a      	mov	r2, r3
 8001146:	490d      	ldr	r1, [pc, #52]	@ (800117c <HAL_UART_ErrorCallback+0x124>)
 8001148:	2003      	movs	r0, #3
 800114a:	f003 f8af 	bl	80042ac <LOGGER_SendFormatted>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40011400 	.word	0x40011400
 800115c:	20000fd5 	.word	0x20000fd5
 8001160:	08017ee0 	.word	0x08017ee0
 8001164:	08017f0c 	.word	0x08017f0c
 8001168:	08017f28 	.word	0x08017f28
 800116c:	08017f44 	.word	0x08017f44
 8001170:	08017f60 	.word	0x08017f60
 8001174:	20000d6c 	.word	0x20000d6c
 8001178:	08017f7c 	.word	0x08017f7c
 800117c:	08017fb0 	.word	0x08017fb0

08001180 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a3e      	ldr	r2, [pc, #248]	@ (8001288 <USER_UART_IDLECallback+0x108>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d175      	bne.n	800127e <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d103      	bne.n	80011ac <USER_UART_IDLECallback+0x2c>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d103      	bne.n	80011c2 <USER_UART_IDLECallback+0x42>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d103      	bne.n	80011d8 <USER_UART_IDLECallback+0x58>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d103      	bne.n	80011ee <USER_UART_IDLECallback+0x6e>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 80011f8:	897b      	ldrh	r3, [r7, #10]
 80011fa:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <USER_UART_IDLECallback+0x10c>)
 8001202:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <USER_UART_IDLECallback+0x10c>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d033      	beq.n	8001276 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <USER_UART_IDLECallback+0x110>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <USER_UART_IDLECallback+0x10c>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	491b      	ldr	r1, [pc, #108]	@ (8001294 <USER_UART_IDLECallback+0x114>)
 8001226:	2002      	movs	r0, #2
 8001228:	f003 f840 	bl	80042ac <LOGGER_SendFormatted>
 800122c:	e007      	b.n	800123e <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <USER_UART_IDLECallback+0x10c>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	4918      	ldr	r1, [pc, #96]	@ (8001298 <USER_UART_IDLECallback+0x118>)
 8001238:	2001      	movs	r0, #1
 800123a:	f003 f837 	bl	80042ac <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 800123e:	4b13      	ldr	r3, [pc, #76]	@ (800128c <USER_UART_IDLECallback+0x10c>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d912      	bls.n	800126e <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <USER_UART_IDLECallback+0x11c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4b13      	ldr	r3, [pc, #76]	@ (800129c <USER_UART_IDLECallback+0x11c>)
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	4618      	mov	r0, r3
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <USER_UART_IDLECallback+0x11c>)
 8001256:	789b      	ldrb	r3, [r3, #2]
 8001258:	461a      	mov	r2, r3
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <USER_UART_IDLECallback+0x11c>)
 800125c:	78db      	ldrb	r3, [r3, #3]
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	490e      	ldr	r1, [pc, #56]	@ (80012a0 <USER_UART_IDLECallback+0x120>)
 8001268:	2000      	movs	r0, #0
 800126a:	f003 f81f 	bl	80042ac <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f00c ffaf 	bl	800e1d2 <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8001274:	e003      	b.n	800127e <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8001276:	490b      	ldr	r1, [pc, #44]	@ (80012a4 <USER_UART_IDLECallback+0x124>)
 8001278:	2000      	movs	r0, #0
 800127a:	f003 f817 	bl	80042ac <LOGGER_SendFormatted>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40011400 	.word	0x40011400
 800128c:	20000fd6 	.word	0x20000fd6
 8001290:	20000fd4 	.word	0x20000fd4
 8001294:	08017fe8 	.word	0x08017fe8
 8001298:	08018028 	.word	0x08018028
 800129c:	20000d6c 	.word	0x20000d6c
 80012a0:	08018050 	.word	0x08018050
 80012a4:	0801807c 	.word	0x0801807c

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b08e      	sub	sp, #56	@ 0x38
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f003 fc0a 	bl	8004ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f883 	bl	80013bc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012b6:	f000 f8f3 	bl	80014a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f001 f8b1 	bl	8002420 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 80012be:	f001 fd7b 	bl	8002db8 <MX_DMA_Init>
//  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
  MX_ADC3_Init();
 80012c2:	f000 f91f 	bl	8001504 <MX_ADC3_Init>
  MX_CRC_Init();
 80012c6:	f000 f96f 	bl	80015a8 <MX_CRC_Init>
  MX_DCMI_Init();
 80012ca:	f000 f98f 	bl	80015ec <MX_DCMI_Init>
  MX_DMA2D_Init();
 80012ce:	f000 f9c1 	bl	8001654 <MX_DMA2D_Init>
  MX_ETH_Init();
 80012d2:	f000 f9f1 	bl	80016b8 <MX_ETH_Init>
  MX_FMC_Init();
 80012d6:	f001 f853 	bl	8002380 <MX_FMC_Init>
  MX_I2C1_Init();
 80012da:	f000 fa3b 	bl	8001754 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012de:	f000 fa79 	bl	80017d4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80012e2:	f000 fab7 	bl	8001854 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80012e6:	f000 fb37 	bl	8001958 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80012ea:	f000 fb61 	bl	80019b0 <MX_RTC_Init>
  MX_SAI2_Init();
 80012ee:	f000 fc03 	bl	8001af8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80012f2:	f000 fca9 	bl	8001c48 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80012f6:	f000 fcc9 	bl	8001c8c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80012fa:	f000 fcf7 	bl	8001cec <MX_SPI2_Init>
  MX_TIM1_Init();
 80012fe:	f000 fd33 	bl	8001d68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001302:	f000 fddd 	bl	8001ec0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001306:	f000 fe51 	bl	8001fac <MX_TIM3_Init>
  MX_TIM5_Init();
 800130a:	f000 fec7 	bl	800209c <MX_TIM5_Init>
  MX_TIM8_Init();
 800130e:	f000 ff3d 	bl	800218c <MX_TIM8_Init>
  MX_TIM12_Init();
 8001312:	f000 ff8f 	bl	8002234 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001316:	f000 ffd3 	bl	80022c0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800131a:	f001 f801 	bl	8002320 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <main+0xfc>)
 8001320:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <main+0x100>)
 8001322:	675a      	str	r2, [r3, #116]	@ 0x74
 8001324:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <main+0x100>)
 8001326:	4a1f      	ldr	r2, [pc, #124]	@ (80013a4 <main+0xfc>)
 8001328:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800132a:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <main+0xfc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <main+0xfc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0210 	orr.w	r2, r2, #16
 8001338:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 800133a:	f010 f8c1 	bl	80114c0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // UART6 DMA 초기화 (UART 초기화 후)
  MX_USART6_DMA_Init();
 800133e:	f001 fd61 	bl	8002e04 <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <main+0xfc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <main+0xfc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0210 	orr.w	r2, r2, #16
 8001350:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <main+0x104>)
 8001354:	f107 041c 	add.w	r4, r7, #28
 8001358:	461d      	mov	r5, r3
 800135a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f012 fd6d 	bl	8013e4c <osThreadCreate>
 8001372:	4603      	mov	r3, r0
 8001374:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <main+0x108>)
 8001376:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <main+0x10c>)
 800137a:	463c      	mov	r4, r7
 800137c:	461d      	mov	r5, r3
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800138a:	463b      	mov	r3, r7
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f012 fd5c 	bl	8013e4c <osThreadCreate>
 8001394:	4603      	mov	r3, r0
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <main+0x110>)
 8001398:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800139a:	f012 fd34 	bl	8013e06 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800139e:	bf00      	nop
 80013a0:	e7fd      	b.n	800139e <main+0xf6>
 80013a2:	bf00      	nop
 80013a4:	20000ca8 	.word	0x20000ca8
 80013a8:	20000f74 	.word	0x20000f74
 80013ac:	080180a8 	.word	0x080180a8
 80013b0:	20000d64 	.word	0x20000d64
 80013b4:	080180d0 	.word	0x080180d0
 80013b8:	20000d68 	.word	0x20000d68

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	@ 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2230      	movs	r2, #48	@ 0x30
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f015 fcdc 	bl	8016d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013e0:	f008 f9ae 	bl	8009740 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <SystemClock_Config+0xdc>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001498 <SystemClock_Config+0xdc>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f0:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <SystemClock_Config+0xdc>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fc:	4b27      	ldr	r3, [pc, #156]	@ (800149c <SystemClock_Config+0xe0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a26      	ldr	r2, [pc, #152]	@ (800149c <SystemClock_Config+0xe0>)
 8001402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <SystemClock_Config+0xe0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001414:	2309      	movs	r3, #9
 8001416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800141e:	2301      	movs	r3, #1
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001426:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800142c:	2319      	movs	r3, #25
 800142e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001430:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001434:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800143a:	2309      	movs	r3, #9
 800143c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	4618      	mov	r0, r3
 8001444:	f008 fa9e 	bl	8009984 <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800144e:	f001 fcad 	bl	8002dac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001452:	f008 f985 	bl	8009760 <HAL_PWREx_EnableOverDrive>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800145c:	f001 fca6 	bl	8002dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2302      	movs	r3, #2
 8001466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800146c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001470:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001476:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2106      	movs	r1, #6
 800147e:	4618      	mov	r0, r3
 8001480:	f008 fd24 	bl	8009ecc <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800148a:	f001 fc8f 	bl	8002dac <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	@ 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0a2      	sub	sp, #136	@ 0x88
 80014a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2284      	movs	r2, #132	@ 0x84
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f015 fc6b 	bl	8016d88 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <PeriphCommonClock_Config+0x60>)
 80014b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80014b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014ba:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80014bc:	2305      	movs	r3, #5
 80014be:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80014c4:	2303      	movs	r3, #3
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80014d2:	2300      	movs	r3, #0
 80014d4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80014d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80014da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4618      	mov	r0, r3
 80014e8:	f008 ff08 	bl	800a2fc <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014f2:	f001 fc5b 	bl	8002dac <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3788      	adds	r7, #136	@ 0x88
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	00b00008 	.word	0x00b00008

08001504 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001516:	4b21      	ldr	r3, [pc, #132]	@ (800159c <MX_ADC3_Init+0x98>)
 8001518:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <MX_ADC3_Init+0x9c>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <MX_ADC3_Init+0x98>)
 800151e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001522:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <MX_ADC3_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <MX_ADC3_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001530:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <MX_ADC3_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <MX_ADC3_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <MX_ADC3_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <MX_ADC3_Init+0x98>)
 8001546:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <MX_ADC3_Init+0xa0>)
 8001548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154a:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_ADC3_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <MX_ADC3_Init+0x98>)
 8001552:	2201      	movs	r2, #1
 8001554:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_ADC3_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_ADC3_Init+0x98>)
 8001560:	2201      	movs	r2, #1
 8001562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <MX_ADC3_Init+0x98>)
 8001566:	f003 faff 	bl	8004b68 <HAL_ADC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001570:	f001 fc1c 	bl	8002dac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001574:	2304      	movs	r3, #4
 8001576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001578:	2301      	movs	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_ADC3_Init+0x98>)
 8001586:	f003 fb33 	bl	8004bf0 <HAL_ADC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001590:	f001 fc0c 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200004b4 	.word	0x200004b4
 80015a0:	40012200 	.word	0x40012200
 80015a4:	0f000001 	.word	0x0f000001

080015a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <MX_CRC_Init+0x3c>)
 80015ae:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <MX_CRC_Init+0x40>)
 80015b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_CRC_Init+0x3c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <MX_CRC_Init+0x3c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_CRC_Init+0x3c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_CRC_Init+0x3c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_CRC_Init+0x3c>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_CRC_Init+0x3c>)
 80015d2:	f003 fe43 	bl	800525c <HAL_CRC_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015dc:	f001 fbe6 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200004fc 	.word	0x200004fc
 80015e8:	40023000 	.word	0x40023000

080015ec <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <MX_DCMI_Init+0x60>)
 80015f2:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <MX_DCMI_Init+0x64>)
 80015f4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MX_DCMI_Init+0x60>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <MX_DCMI_Init+0x60>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_DCMI_Init+0x60>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001608:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_DCMI_Init+0x60>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_DCMI_Init+0x60>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001614:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <MX_DCMI_Init+0x60>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_DCMI_Init+0x60>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <MX_DCMI_Init+0x60>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_DCMI_Init+0x60>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <MX_DCMI_Init+0x60>)
 800162e:	2200      	movs	r2, #0
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_DCMI_Init+0x60>)
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	@ (800164c <MX_DCMI_Init+0x60>)
 800163a:	f003 ff01 	bl	8005440 <HAL_DCMI_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001644:	f001 fbb2 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000520 	.word	0x20000520
 8001650:	50050000 	.word	0x50050000

08001654 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 800165a:	4a16      	ldr	r2, [pc, #88]	@ (80016b4 <MX_DMA2D_Init+0x60>)
 800165c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800165e:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 8001678:	2200      	movs	r2, #0
 800167a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 800167e:	2200      	movs	r2, #0
 8001680:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 8001684:	2200      	movs	r2, #0
 8001686:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001688:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 800168a:	f004 fbc7 	bl	8005e1c <HAL_DMA2D_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001694:	f001 fb8a 	bl	8002dac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001698:	2101      	movs	r1, #1
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <MX_DMA2D_Init+0x5c>)
 800169c:	f004 fd18 	bl	80060d0 <HAL_DMA2D_ConfigLayer>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80016a6:	f001 fb81 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000570 	.word	0x20000570
 80016b4:	4002b000 	.word	0x4002b000

080016b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <MX_ETH_Init+0x84>)
 80016be:	4a20      	ldr	r2, [pc, #128]	@ (8001740 <MX_ETH_Init+0x88>)
 80016c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <MX_ETH_Init+0x8c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <MX_ETH_Init+0x8c>)
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_ETH_Init+0x8c>)
 80016d0:	22e1      	movs	r2, #225	@ 0xe1
 80016d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_ETH_Init+0x8c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_ETH_Init+0x8c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_ETH_Init+0x8c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <MX_ETH_Init+0x84>)
 80016e8:	4a16      	ldr	r2, [pc, #88]	@ (8001744 <MX_ETH_Init+0x8c>)
 80016ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016ec:	4b13      	ldr	r3, [pc, #76]	@ (800173c <MX_ETH_Init+0x84>)
 80016ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80016f4:	4b11      	ldr	r3, [pc, #68]	@ (800173c <MX_ETH_Init+0x84>)
 80016f6:	4a14      	ldr	r2, [pc, #80]	@ (8001748 <MX_ETH_Init+0x90>)
 80016f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <MX_ETH_Init+0x84>)
 80016fc:	4a13      	ldr	r2, [pc, #76]	@ (800174c <MX_ETH_Init+0x94>)
 80016fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <MX_ETH_Init+0x84>)
 8001702:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001706:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001708:	480c      	ldr	r0, [pc, #48]	@ (800173c <MX_ETH_Init+0x84>)
 800170a:	f004 fd73 	bl	80061f4 <HAL_ETH_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001714:	f001 fb4a 	bl	8002dac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001718:	2238      	movs	r2, #56	@ 0x38
 800171a:	2100      	movs	r1, #0
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <MX_ETH_Init+0x98>)
 800171e:	f015 fb33 	bl	8016d88 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <MX_ETH_Init+0x98>)
 8001724:	2221      	movs	r2, #33	@ 0x21
 8001726:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <MX_ETH_Init+0x98>)
 800172a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800172e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <MX_ETH_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200005b0 	.word	0x200005b0
 8001740:	40028000 	.word	0x40028000
 8001744:	20000fd8 	.word	0x20000fd8
 8001748:	20000168 	.word	0x20000168
 800174c:	200000c8 	.word	0x200000c8
 8001750:	2000047c 	.word	0x2000047c

08001754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <MX_I2C1_Init+0x74>)
 800175a:	4a1c      	ldr	r2, [pc, #112]	@ (80017cc <MX_I2C1_Init+0x78>)
 800175c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001760:	4a1b      	ldr	r2, [pc, #108]	@ (80017d0 <MX_I2C1_Init+0x7c>)
 8001762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <MX_I2C1_Init+0x74>)
 800176c:	2201      	movs	r2, #1
 800176e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <MX_I2C1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178e:	480e      	ldr	r0, [pc, #56]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001790:	f007 fb90 	bl	8008eb4 <HAL_I2C_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800179a:	f001 fb07 	bl	8002dac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800179e:	2100      	movs	r1, #0
 80017a0:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <MX_I2C1_Init+0x74>)
 80017a2:	f007 fc23 	bl	8008fec <HAL_I2CEx_ConfigAnalogFilter>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017ac:	f001 fafe 	bl	8002dac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017b0:	2100      	movs	r1, #0
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_I2C1_Init+0x74>)
 80017b4:	f007 fc65 	bl	8009082 <HAL_I2CEx_ConfigDigitalFilter>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017be:	f001 faf5 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000660 	.word	0x20000660
 80017cc:	40005400 	.word	0x40005400
 80017d0:	00c0eaff 	.word	0x00c0eaff

080017d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <MX_I2C3_Init+0x74>)
 80017da:	4a1c      	ldr	r2, [pc, #112]	@ (800184c <MX_I2C3_Init+0x78>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80017de:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <MX_I2C3_Init+0x74>)
 80017e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001850 <MX_I2C3_Init+0x7c>)
 80017e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <MX_I2C3_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ea:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <MX_I2C3_Init+0x74>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f0:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <MX_I2C3_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <MX_I2C3_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <MX_I2C3_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_I2C3_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <MX_I2C3_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800180e:	480e      	ldr	r0, [pc, #56]	@ (8001848 <MX_I2C3_Init+0x74>)
 8001810:	f007 fb50 	bl	8008eb4 <HAL_I2C_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800181a:	f001 fac7 	bl	8002dac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	4809      	ldr	r0, [pc, #36]	@ (8001848 <MX_I2C3_Init+0x74>)
 8001822:	f007 fbe3 	bl	8008fec <HAL_I2CEx_ConfigAnalogFilter>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800182c:	f001 fabe 	bl	8002dac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001830:	2100      	movs	r1, #0
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_I2C3_Init+0x74>)
 8001834:	f007 fc25 	bl	8009082 <HAL_I2CEx_ConfigDigitalFilter>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800183e:	f001 fab5 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200006b4 	.word	0x200006b4
 800184c:	40005c00 	.word	0x40005c00
 8001850:	00c0eaff 	.word	0x00c0eaff

08001854 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	@ 0x38
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2234      	movs	r2, #52	@ 0x34
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f015 fa91 	bl	8016d88 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001866:	4b3a      	ldr	r3, [pc, #232]	@ (8001950 <MX_LTDC_Init+0xfc>)
 8001868:	4a3a      	ldr	r2, [pc, #232]	@ (8001954 <MX_LTDC_Init+0x100>)
 800186a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800186c:	4b38      	ldr	r3, [pc, #224]	@ (8001950 <MX_LTDC_Init+0xfc>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001872:	4b37      	ldr	r3, [pc, #220]	@ (8001950 <MX_LTDC_Init+0xfc>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001878:	4b35      	ldr	r3, [pc, #212]	@ (8001950 <MX_LTDC_Init+0xfc>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800187e:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <MX_LTDC_Init+0xfc>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001884:	4b32      	ldr	r3, [pc, #200]	@ (8001950 <MX_LTDC_Init+0xfc>)
 8001886:	2228      	movs	r2, #40	@ 0x28
 8001888:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800188a:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <MX_LTDC_Init+0xfc>)
 800188c:	2209      	movs	r2, #9
 800188e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001890:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <MX_LTDC_Init+0xfc>)
 8001892:	2235      	movs	r2, #53	@ 0x35
 8001894:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001896:	4b2e      	ldr	r3, [pc, #184]	@ (8001950 <MX_LTDC_Init+0xfc>)
 8001898:	220b      	movs	r2, #11
 800189a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800189c:	4b2c      	ldr	r3, [pc, #176]	@ (8001950 <MX_LTDC_Init+0xfc>)
 800189e:	f240 2215 	movw	r2, #533	@ 0x215
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80018a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001950 <MX_LTDC_Init+0xfc>)
 80018a6:	f240 121b 	movw	r2, #283	@ 0x11b
 80018aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80018ac:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <MX_LTDC_Init+0xfc>)
 80018ae:	f240 2235 	movw	r2, #565	@ 0x235
 80018b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80018b4:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <MX_LTDC_Init+0xfc>)
 80018b6:	f240 121d 	movw	r2, #285	@ 0x11d
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80018bc:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <MX_LTDC_Init+0xfc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80018c4:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <MX_LTDC_Init+0xfc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <MX_LTDC_Init+0xfc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018d4:	481e      	ldr	r0, [pc, #120]	@ (8001950 <MX_LTDC_Init+0xfc>)
 80018d6:	f007 fc20 	bl	800911a <HAL_LTDC_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80018e0:	f001 fa64 	bl	8002dac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80018e8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018ec:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80018f2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80018f6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80018f8:	2302      	movs	r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80018fc:	23ff      	movs	r3, #255	@ 0xff
 80018fe:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001904:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001908:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800190a:	2307      	movs	r3, #7
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800190e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001914:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800191a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800191e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	@ (8001950 <MX_LTDC_Init+0xfc>)
 800193a:	f007 fd4d 	bl	80093d8 <HAL_LTDC_ConfigLayer>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001944:	f001 fa32 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3738      	adds	r7, #56	@ 0x38
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000708 	.word	0x20000708
 8001954:	40016800 	.word	0x40016800

08001958 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 800195e:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <MX_QUADSPI_Init+0x54>)
 8001960:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 8001964:	2201      	movs	r2, #1
 8001966:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 800196a:	2204      	movs	r2, #4
 800196c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 8001970:	2210      	movs	r2, #16
 8001972:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 8001976:	2218      	movs	r2, #24
 8001978:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 800197c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001980:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <MX_QUADSPI_Init+0x50>)
 8001996:	f007 ff33 	bl	8009800 <HAL_QSPI_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80019a0:	f001 fa04 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200007b0 	.word	0x200007b0
 80019ac:	a0001000 	.word	0xa0001000

080019b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b090      	sub	sp, #64	@ 0x40
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80019ca:	463b      	mov	r3, r7
 80019cc:	2228      	movs	r2, #40	@ 0x28
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f015 f9d9 	bl	8016d88 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019d6:	4b46      	ldr	r3, [pc, #280]	@ (8001af0 <MX_RTC_Init+0x140>)
 80019d8:	4a46      	ldr	r2, [pc, #280]	@ (8001af4 <MX_RTC_Init+0x144>)
 80019da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019dc:	4b44      	ldr	r3, [pc, #272]	@ (8001af0 <MX_RTC_Init+0x140>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019e2:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <MX_RTC_Init+0x140>)
 80019e4:	227f      	movs	r2, #127	@ 0x7f
 80019e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019e8:	4b41      	ldr	r3, [pc, #260]	@ (8001af0 <MX_RTC_Init+0x140>)
 80019ea:	22ff      	movs	r2, #255	@ 0xff
 80019ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019ee:	4b40      	ldr	r3, [pc, #256]	@ (8001af0 <MX_RTC_Init+0x140>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019f4:	4b3e      	ldr	r3, [pc, #248]	@ (8001af0 <MX_RTC_Init+0x140>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019fa:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <MX_RTC_Init+0x140>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a00:	483b      	ldr	r0, [pc, #236]	@ (8001af0 <MX_RTC_Init+0x140>)
 8001a02:	f009 f9ab 	bl	800ad5c <HAL_RTC_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001a0c:	f001 f9ce 	bl	8002dac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4619      	mov	r1, r3
 8001a32:	482f      	ldr	r0, [pc, #188]	@ (8001af0 <MX_RTC_Init+0x140>)
 8001a34:	f009 fa14 	bl	800ae60 <HAL_RTC_SetTime>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001a3e:	f001 f9b5 	bl	8002dac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4619      	mov	r1, r3
 8001a62:	4823      	ldr	r0, [pc, #140]	@ (8001af0 <MX_RTC_Init+0x140>)
 8001a64:	f009 fa96 	bl	800af94 <HAL_RTC_SetDate>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001a6e:	f001 f99d 	bl	8002dac <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <MX_RTC_Init+0x140>)
 8001aaa:	f009 faf7 	bl	800b09c <HAL_RTC_SetAlarm>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001ab4:	f001 f97a 	bl	8002dac <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480a      	ldr	r0, [pc, #40]	@ (8001af0 <MX_RTC_Init+0x140>)
 8001ac6:	f009 fae9 	bl	800b09c <HAL_RTC_SetAlarm>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001ad0:	f001 f96c 	bl	8002dac <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <MX_RTC_Init+0x140>)
 8001ada:	f009 fca9 	bl	800b430 <HAL_RTCEx_SetTimeStamp>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001ae4:	f001 f962 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3740      	adds	r7, #64	@ 0x40
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200007fc 	.word	0x200007fc
 8001af4:	40002800 	.word	0x40002800

08001af8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001afc:	4b4d      	ldr	r3, [pc, #308]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001afe:	4a4e      	ldr	r2, [pc, #312]	@ (8001c38 <MX_SAI2_Init+0x140>)
 8001b00:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b02:	4b4c      	ldr	r3, [pc, #304]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b08:	4b4a      	ldr	r3, [pc, #296]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001b0e:	4b49      	ldr	r3, [pc, #292]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b10:	2240      	movs	r2, #64	@ 0x40
 8001b12:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b14:	4b47      	ldr	r3, [pc, #284]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b1a:	4b46      	ldr	r3, [pc, #280]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b20:	4b44      	ldr	r3, [pc, #272]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b26:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b2c:	4b41      	ldr	r3, [pc, #260]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b32:	4b40      	ldr	r3, [pc, #256]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b3a:	4a40      	ldr	r2, [pc, #256]	@ (8001c3c <MX_SAI2_Init+0x144>)
 8001b3c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b44:	4b3b      	ldr	r3, [pc, #236]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b50:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001b56:	4b37      	ldr	r3, [pc, #220]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b58:	2208      	movs	r2, #8
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001b5c:	4b35      	ldr	r3, [pc, #212]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b62:	4b34      	ldr	r3, [pc, #208]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b68:	4b32      	ldr	r3, [pc, #200]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b6e:	4b31      	ldr	r3, [pc, #196]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001b74:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001b80:	4b2c      	ldr	r3, [pc, #176]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001b86:	4b2b      	ldr	r3, [pc, #172]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001b8c:	4829      	ldr	r0, [pc, #164]	@ (8001c34 <MX_SAI2_Init+0x13c>)
 8001b8e:	f009 fcb7 	bl	800b500 <HAL_SAI_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001b98:	f001 f908 	bl	8002dac <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001b9e:	4a29      	ldr	r2, [pc, #164]	@ (8001c44 <MX_SAI2_Init+0x14c>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ba2:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001baa:	2203      	movs	r2, #3
 8001bac:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001bae:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bb0:	2240      	movs	r2, #64	@ 0x40
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bba:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bec:	2208      	movs	r2, #8
 8001bee:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bfc:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c08:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001c20:	4807      	ldr	r0, [pc, #28]	@ (8001c40 <MX_SAI2_Init+0x148>)
 8001c22:	f009 fc6d 	bl	800b500 <HAL_SAI_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001c2c:	f001 f8be 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000081c 	.word	0x2000081c
 8001c38:	40015c04 	.word	0x40015c04
 8001c3c:	0002ee00 	.word	0x0002ee00
 8001c40:	200008a0 	.word	0x200008a0
 8001c44:	40015c24 	.word	0x40015c24

08001c48 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <MX_SDMMC1_SD_Init+0x3c>)
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <MX_SDMMC1_SD_Init+0x40>)
 8001c50:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <MX_SDMMC1_SD_Init+0x3c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <MX_SDMMC1_SD_Init+0x3c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <MX_SDMMC1_SD_Init+0x3c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <MX_SDMMC1_SD_Init+0x3c>)
 8001c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c6a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <MX_SDMMC1_SD_Init+0x3c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <MX_SDMMC1_SD_Init+0x3c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000924 	.word	0x20000924
 8001c88:	40012c00 	.word	0x40012c00

08001c8c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001c92:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001c96:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ca4:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <MX_SPDIFRX_Init+0x5c>)
 8001cd6:	f00a fe97 	bl	800ca08 <HAL_SPDIFRX_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001ce0:	f001 f864 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200009a8 	.word	0x200009a8

08001cec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d64 <MX_SPI2_Init+0x78>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001cf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d04:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d06:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d46:	2208      	movs	r2, #8
 8001d48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <MX_SPI2_Init+0x74>)
 8001d4c:	f00a feb8 	bl	800cac0 <HAL_SPI_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d56:	f001 f829 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200009f4 	.word	0x200009f4
 8001d64:	40003800 	.word	0x40003800

08001d68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09a      	sub	sp, #104	@ 0x68
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	615a      	str	r2, [r3, #20]
 8001d9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	222c      	movs	r2, #44	@ 0x2c
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f014 fff0 	bl	8016d88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001da8:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001daa:	4a44      	ldr	r2, [pc, #272]	@ (8001ebc <MX_TIM1_Init+0x154>)
 8001dac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dae:	4b42      	ldr	r3, [pc, #264]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db4:	4b40      	ldr	r3, [pc, #256]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dba:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dd4:	4838      	ldr	r0, [pc, #224]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001dd6:	f00a ff1e 	bl	800cc16 <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001de0:	f000 ffe4 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001dee:	4619      	mov	r1, r3
 8001df0:	4831      	ldr	r0, [pc, #196]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001df2:	f00b fa51 	bl	800d298 <HAL_TIM_ConfigClockSource>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001dfc:	f000 ffd6 	bl	8002dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e00:	482d      	ldr	r0, [pc, #180]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001e02:	f00a ffd7 	bl	800cdb4 <HAL_TIM_PWM_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e0c:	f000 ffce 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e20:	4619      	mov	r1, r3
 8001e22:	4825      	ldr	r0, [pc, #148]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001e24:	f00b fec8 	bl	800dbb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e2e:	f000 ffbd 	bl	8002dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e32:	2360      	movs	r3, #96	@ 0x60
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e52:	2200      	movs	r2, #0
 8001e54:	4619      	mov	r1, r3
 8001e56:	4818      	ldr	r0, [pc, #96]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001e58:	f00b f90a 	bl	800d070 <HAL_TIM_PWM_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e62:	f000 ffa3 	bl	8002dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001e9c:	f00b ff1a 	bl	800dcd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001ea6:	f000 ff81 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <MX_TIM1_Init+0x150>)
 8001eac:	f001 fde6 	bl	8003a7c <HAL_TIM_MspPostInit>

}
 8001eb0:	bf00      	nop
 8001eb2:	3768      	adds	r7, #104	@ 0x68
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000a58 	.word	0x20000a58
 8001ebc:	40010000 	.word	0x40010000

08001ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	@ 0x38
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001ef4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ef8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001efa:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b29      	ldr	r3, [pc, #164]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f06:	4b28      	ldr	r3, [pc, #160]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f1a:	4823      	ldr	r0, [pc, #140]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f1c:	f00a fe7b 	bl	800cc16 <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001f26:	f000 ff41 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f34:	4619      	mov	r1, r3
 8001f36:	481c      	ldr	r0, [pc, #112]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f38:	f00b f9ae 	bl	800d298 <HAL_TIM_ConfigClockSource>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001f42:	f000 ff33 	bl	8002dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f46:	4818      	ldr	r0, [pc, #96]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f48:	f00a ff34 	bl	800cdb4 <HAL_TIM_PWM_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001f52:	f000 ff2b 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	4810      	ldr	r0, [pc, #64]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f66:	f00b fe27 	bl	800dbb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001f70:	f000 ff1c 	bl	8002dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f74:	2360      	movs	r3, #96	@ 0x60
 8001f76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4807      	ldr	r0, [pc, #28]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f8c:	f00b f870 	bl	800d070 <HAL_TIM_PWM_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f96:	f000 ff09 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f9a:	4803      	ldr	r0, [pc, #12]	@ (8001fa8 <MX_TIM2_Init+0xe8>)
 8001f9c:	f001 fd6e 	bl	8003a7c <HAL_TIM_MspPostInit>

}
 8001fa0:	bf00      	nop
 8001fa2:	3738      	adds	r7, #56	@ 0x38
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000aa4 	.word	0x20000aa4

08001fac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	@ 0x38
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fcc:	463b      	mov	r3, r7
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
 8001fda:	615a      	str	r2, [r3, #20]
 8001fdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fde:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8001fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <MX_TIM3_Init+0xec>)
 8001fe2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b2a      	ldr	r3, [pc, #168]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8001ff2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002004:	4823      	ldr	r0, [pc, #140]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8002006:	f00a fe06 	bl	800cc16 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002010:	f000 fecc 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800201a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800201e:	4619      	mov	r1, r3
 8002020:	481c      	ldr	r0, [pc, #112]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8002022:	f00b f939 	bl	800d298 <HAL_TIM_ConfigClockSource>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800202c:	f000 febe 	bl	8002dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002030:	4818      	ldr	r0, [pc, #96]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8002032:	f00a febf 	bl	800cdb4 <HAL_TIM_PWM_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800203c:	f000 feb6 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	4619      	mov	r1, r3
 800204e:	4811      	ldr	r0, [pc, #68]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8002050:	f00b fdb2 	bl	800dbb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800205a:	f000 fea7 	bl	8002dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205e:	2360      	movs	r3, #96	@ 0x60
 8002060:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800206e:	463b      	mov	r3, r7
 8002070:	2200      	movs	r2, #0
 8002072:	4619      	mov	r1, r3
 8002074:	4807      	ldr	r0, [pc, #28]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8002076:	f00a fffb 	bl	800d070 <HAL_TIM_PWM_ConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002080:	f000 fe94 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002084:	4803      	ldr	r0, [pc, #12]	@ (8002094 <MX_TIM3_Init+0xe8>)
 8002086:	f001 fcf9 	bl	8003a7c <HAL_TIM_MspPostInit>

}
 800208a:	bf00      	nop
 800208c:	3738      	adds	r7, #56	@ 0x38
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000af0 	.word	0x20000af0
 8002098:	40000400 	.word	0x40000400

0800209c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	@ 0x38
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020bc:	463b      	mov	r3, r7
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	615a      	str	r2, [r3, #20]
 80020cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <MX_TIM5_Init+0xe8>)
 80020d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002188 <MX_TIM5_Init+0xec>)
 80020d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80020d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002184 <MX_TIM5_Init+0xe8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020da:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <MX_TIM5_Init+0xe8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80020e0:	4b28      	ldr	r3, [pc, #160]	@ (8002184 <MX_TIM5_Init+0xe8>)
 80020e2:	f04f 32ff 	mov.w	r2, #4294967295
 80020e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e8:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <MX_TIM5_Init+0xe8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ee:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <MX_TIM5_Init+0xe8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020f4:	4823      	ldr	r0, [pc, #140]	@ (8002184 <MX_TIM5_Init+0xe8>)
 80020f6:	f00a fd8e 	bl	800cc16 <HAL_TIM_Base_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002100:	f000 fe54 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800210a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800210e:	4619      	mov	r1, r3
 8002110:	481c      	ldr	r0, [pc, #112]	@ (8002184 <MX_TIM5_Init+0xe8>)
 8002112:	f00b f8c1 	bl	800d298 <HAL_TIM_ConfigClockSource>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800211c:	f000 fe46 	bl	8002dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002120:	4818      	ldr	r0, [pc, #96]	@ (8002184 <MX_TIM5_Init+0xe8>)
 8002122:	f00a fe47 	bl	800cdb4 <HAL_TIM_PWM_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800212c:	f000 fe3e 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4811      	ldr	r0, [pc, #68]	@ (8002184 <MX_TIM5_Init+0xe8>)
 8002140:	f00b fd3a 	bl	800dbb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800214a:	f000 fe2f 	bl	8002dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214e:	2360      	movs	r3, #96	@ 0x60
 8002150:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800215e:	463b      	mov	r3, r7
 8002160:	220c      	movs	r2, #12
 8002162:	4619      	mov	r1, r3
 8002164:	4807      	ldr	r0, [pc, #28]	@ (8002184 <MX_TIM5_Init+0xe8>)
 8002166:	f00a ff83 	bl	800d070 <HAL_TIM_PWM_ConfigChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002170:	f000 fe1c 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002174:	4803      	ldr	r0, [pc, #12]	@ (8002184 <MX_TIM5_Init+0xe8>)
 8002176:	f001 fc81 	bl	8003a7c <HAL_TIM_MspPostInit>

}
 800217a:	bf00      	nop
 800217c:	3738      	adds	r7, #56	@ 0x38
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000b3c 	.word	0x20000b3c
 8002188:	40000c00 	.word	0x40000c00

0800218c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021ac:	4a20      	ldr	r2, [pc, #128]	@ (8002230 <MX_TIM8_Init+0xa4>)
 80021ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021b0:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b6:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021ca:	4b18      	ldr	r3, [pc, #96]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d0:	4b16      	ldr	r3, [pc, #88]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021d6:	4815      	ldr	r0, [pc, #84]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021d8:	f00a fd1d 	bl	800cc16 <HAL_TIM_Base_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80021e2:	f000 fde3 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	4619      	mov	r1, r3
 80021f2:	480e      	ldr	r0, [pc, #56]	@ (800222c <MX_TIM8_Init+0xa0>)
 80021f4:	f00b f850 	bl	800d298 <HAL_TIM_ConfigClockSource>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80021fe:	f000 fdd5 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4806      	ldr	r0, [pc, #24]	@ (800222c <MX_TIM8_Init+0xa0>)
 8002214:	f00b fcd0 	bl	800dbb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800221e:	f000 fdc5 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000b88 	.word	0x20000b88
 8002230:	40010400 	.word	0x40010400

08002234 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
 8002248:	615a      	str	r2, [r3, #20]
 800224a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800224c:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <MX_TIM12_Init+0x84>)
 800224e:	4a1b      	ldr	r2, [pc, #108]	@ (80022bc <MX_TIM12_Init+0x88>)
 8002250:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002252:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <MX_TIM12_Init+0x84>)
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <MX_TIM12_Init+0x84>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800225e:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <MX_TIM12_Init+0x84>)
 8002260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002264:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002266:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <MX_TIM12_Init+0x84>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226c:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <MX_TIM12_Init+0x84>)
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002272:	4811      	ldr	r0, [pc, #68]	@ (80022b8 <MX_TIM12_Init+0x84>)
 8002274:	f00a fd9e 	bl	800cdb4 <HAL_TIM_PWM_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800227e:	f000 fd95 	bl	8002dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	@ 0x60
 8002284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <MX_TIM12_Init+0x84>)
 800229a:	f00a fee9 	bl	800d070 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80022a4:	f000 fd82 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80022a8:	4803      	ldr	r0, [pc, #12]	@ (80022b8 <MX_TIM12_Init+0x84>)
 80022aa:	f001 fbe7 	bl	8003a7c <HAL_TIM_MspPostInit>

}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000bd4 	.word	0x20000bd4
 80022bc:	40001800 	.word	0x40001800

080022c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022c4:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022c6:	4a15      	ldr	r2, [pc, #84]	@ (800231c <MX_USART1_UART_Init+0x5c>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	@ (8002318 <MX_USART1_UART_Init+0x58>)
 8002304:	f00b fd82 	bl	800de0c <HAL_UART_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800230e:	f000 fd4d 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000c20 	.word	0x20000c20
 800231c:	40011000 	.word	0x40011000

08002320 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002324:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 8002326:	4a15      	ldr	r2, [pc, #84]	@ (800237c <MX_USART6_UART_Init+0x5c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800232a:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_USART6_UART_Init+0x58>)
 8002364:	f00b fd52 	bl	800de0c <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800236e:	f000 fd1d 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000ca8 	.word	0x20000ca8
 800237c:	40011400 	.word	0x40011400

08002380 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	615a      	str	r2, [r3, #20]
 8002396:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <MX_FMC_Init+0x98>)
 800239a:	4a20      	ldr	r2, [pc, #128]	@ (800241c <MX_FMC_Init+0x9c>)
 800239c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800239e:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <MX_FMC_Init+0x98>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80023a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <MX_FMC_Init+0x98>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <MX_FMC_Init+0x98>)
 80023ac:	2204      	movs	r2, #4
 80023ae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <MX_FMC_Init+0x98>)
 80023b2:	2210      	movs	r2, #16
 80023b4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023b6:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <MX_FMC_Init+0x98>)
 80023b8:	2240      	movs	r2, #64	@ 0x40
 80023ba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80023bc:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <MX_FMC_Init+0x98>)
 80023be:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80023c2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023c4:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <MX_FMC_Init+0x98>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <MX_FMC_Init+0x98>)
 80023cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023d0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <MX_FMC_Init+0x98>)
 80023d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <MX_FMC_Init+0x98>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80023e0:	2302      	movs	r3, #2
 80023e2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80023e4:	2307      	movs	r3, #7
 80023e6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80023e8:	2304      	movs	r3, #4
 80023ea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80023ec:	2307      	movs	r3, #7
 80023ee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80023f0:	2303      	movs	r3, #3
 80023f2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80023f8:	2302      	movs	r3, #2
 80023fa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	@ (8002418 <MX_FMC_Init+0x98>)
 8002402:	f00a facc 	bl	800c99e <HAL_SDRAM_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800240c:	f000 fcce 	bl	8002dac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002410:	bf00      	nop
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000d30 	.word	0x20000d30
 800241c:	a0000140 	.word	0xa0000140

08002420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b090      	sub	sp, #64	@ 0x40
 8002424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002436:	4bb0      	ldr	r3, [pc, #704]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	4aaf      	ldr	r2, [pc, #700]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	6313      	str	r3, [r2, #48]	@ 0x30
 8002442:	4bad      	ldr	r3, [pc, #692]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800244e:	4baa      	ldr	r3, [pc, #680]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4aa9      	ldr	r2, [pc, #676]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002458:	6313      	str	r3, [r2, #48]	@ 0x30
 800245a:	4ba7      	ldr	r3, [pc, #668]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	4ba4      	ldr	r3, [pc, #656]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	4aa3      	ldr	r2, [pc, #652]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6313      	str	r3, [r2, #48]	@ 0x30
 8002472:	4ba1      	ldr	r3, [pc, #644]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800247e:	4b9e      	ldr	r3, [pc, #632]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	4a9d      	ldr	r2, [pc, #628]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	6313      	str	r3, [r2, #48]	@ 0x30
 800248a:	4b9b      	ldr	r3, [pc, #620]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	4b98      	ldr	r3, [pc, #608]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	4a97      	ldr	r2, [pc, #604]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a2:	4b95      	ldr	r3, [pc, #596]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	4b92      	ldr	r3, [pc, #584]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a91      	ldr	r2, [pc, #580]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b8f      	ldr	r3, [pc, #572]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80024c6:	4b8c      	ldr	r3, [pc, #560]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4a8b      	ldr	r2, [pc, #556]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4b89      	ldr	r3, [pc, #548]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80024de:	4b86      	ldr	r3, [pc, #536]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	4a85      	ldr	r2, [pc, #532]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ea:	4b83      	ldr	r3, [pc, #524]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80024f6:	4b80      	ldr	r3, [pc, #512]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a7f      	ldr	r2, [pc, #508]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 80024fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b7d      	ldr	r3, [pc, #500]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800250e:	4b7a      	ldr	r3, [pc, #488]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a79      	ldr	r2, [pc, #484]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002514:	f043 0320 	orr.w	r3, r3, #32
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b77      	ldr	r3, [pc, #476]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002526:	4b74      	ldr	r3, [pc, #464]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a73      	ldr	r2, [pc, #460]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 800252c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b71      	ldr	r3, [pc, #452]	@ (80026f8 <MX_GPIO_Init+0x2d8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800253e:	2201      	movs	r2, #1
 8002540:	2120      	movs	r1, #32
 8002542:	486e      	ldr	r0, [pc, #440]	@ (80026fc <MX_GPIO_Init+0x2dc>)
 8002544:	f004 fb68 	bl	8006c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
 800254a:	210c      	movs	r1, #12
 800254c:	486c      	ldr	r0, [pc, #432]	@ (8002700 <MX_GPIO_Init+0x2e0>)
 800254e:	f004 fb63 	bl	8006c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002552:	2201      	movs	r2, #1
 8002554:	2108      	movs	r1, #8
 8002556:	486b      	ldr	r0, [pc, #428]	@ (8002704 <MX_GPIO_Init+0x2e4>)
 8002558:	f004 fb5e 	bl	8006c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002562:	4867      	ldr	r0, [pc, #412]	@ (8002700 <MX_GPIO_Init+0x2e0>)
 8002564:	f004 fb58 	bl	8006c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800256e:	4866      	ldr	r0, [pc, #408]	@ (8002708 <MX_GPIO_Init+0x2e8>)
 8002570:	f004 fb52 	bl	8006c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	21c8      	movs	r1, #200	@ 0xc8
 8002578:	4864      	ldr	r0, [pc, #400]	@ (800270c <MX_GPIO_Init+0x2ec>)
 800257a:	f004 fb4d 	bl	8006c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800257e:	2308      	movs	r3, #8
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002582:	2300      	movs	r3, #0
 8002584:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800258a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800258e:	4619      	mov	r1, r3
 8002590:	485f      	ldr	r0, [pc, #380]	@ (8002710 <MX_GPIO_Init+0x2f0>)
 8002592:	f004 f97d 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002596:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025a8:	230a      	movs	r3, #10
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025b0:	4619      	mov	r1, r3
 80025b2:	4858      	ldr	r0, [pc, #352]	@ (8002714 <MX_GPIO_Init+0x2f4>)
 80025b4:	f004 f96c 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80025b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ca:	4619      	mov	r1, r3
 80025cc:	4852      	ldr	r0, [pc, #328]	@ (8002718 <MX_GPIO_Init+0x2f8>)
 80025ce:	f004 f95f 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80025d2:	2340      	movs	r3, #64	@ 0x40
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80025d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025e4:	4619      	mov	r1, r3
 80025e6:	4845      	ldr	r0, [pc, #276]	@ (80026fc <MX_GPIO_Init+0x2dc>)
 80025e8:	f004 f952 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80025ec:	2320      	movs	r3, #32
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002600:	4619      	mov	r1, r3
 8002602:	483e      	ldr	r0, [pc, #248]	@ (80026fc <MX_GPIO_Init+0x2dc>)
 8002604:	f004 f944 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002608:	f241 030c 	movw	r3, #4108	@ 0x100c
 800260c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260e:	2301      	movs	r3, #1
 8002610:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800261a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800261e:	4619      	mov	r1, r3
 8002620:	4837      	ldr	r0, [pc, #220]	@ (8002700 <MX_GPIO_Init+0x2e0>)
 8002622:	f004 f935 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262c:	2300      	movs	r3, #0
 800262e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002638:	4619      	mov	r1, r3
 800263a:	4838      	ldr	r0, [pc, #224]	@ (800271c <MX_GPIO_Init+0x2fc>)
 800263c:	f004 f928 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002640:	2308      	movs	r3, #8
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002654:	4619      	mov	r1, r3
 8002656:	482b      	ldr	r0, [pc, #172]	@ (8002704 <MX_GPIO_Init+0x2e4>)
 8002658:	f004 f91a 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800265c:	2310      	movs	r3, #16
 800265e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2300      	movs	r3, #0
 8002662:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002668:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800266c:	4619      	mov	r1, r3
 800266e:	4823      	ldr	r0, [pc, #140]	@ (80026fc <MX_GPIO_Init+0x2dc>)
 8002670:	f004 f90e 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002674:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267a:	2300      	movs	r3, #0
 800267c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002682:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002686:	4619      	mov	r1, r3
 8002688:	481f      	ldr	r0, [pc, #124]	@ (8002708 <MX_GPIO_Init+0x2e8>)
 800268a:	f004 f901 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800268e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026a4:	4619      	mov	r1, r3
 80026a6:	4818      	ldr	r0, [pc, #96]	@ (8002708 <MX_GPIO_Init+0x2e8>)
 80026a8:	f004 f8f2 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80026ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80026b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80026b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80026bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026c0:	4619      	mov	r1, r3
 80026c2:	480f      	ldr	r0, [pc, #60]	@ (8002700 <MX_GPIO_Init+0x2e0>)
 80026c4:	f004 f8e4 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80026c8:	2310      	movs	r3, #16
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026d8:	230a      	movs	r3, #10
 80026da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026e0:	4619      	mov	r1, r3
 80026e2:	4809      	ldr	r0, [pc, #36]	@ (8002708 <MX_GPIO_Init+0x2e8>)
 80026e4:	f004 f8d4 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80026e8:	23c8      	movs	r3, #200	@ 0xc8
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f4:	e014      	b.n	8002720 <MX_GPIO_Init+0x300>
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020c00 	.word	0x40020c00
 8002700:	40022000 	.word	0x40022000
 8002704:	40022800 	.word	0x40022800
 8002708:	40021c00 	.word	0x40021c00
 800270c:	40021800 	.word	0x40021800
 8002710:	40021000 	.word	0x40021000
 8002714:	40020400 	.word	0x40020400
 8002718:	40022400 	.word	0x40022400
 800271c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002724:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002728:	4619      	mov	r1, r3
 800272a:	4819      	ldr	r0, [pc, #100]	@ (8002790 <MX_GPIO_Init+0x370>)
 800272c:	f004 f8b0 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002730:	2305      	movs	r3, #5
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002740:	230a      	movs	r3, #10
 8002742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002748:	4619      	mov	r1, r3
 800274a:	4812      	ldr	r0, [pc, #72]	@ (8002794 <MX_GPIO_Init+0x374>)
 800274c:	f004 f8a0 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002750:	2304      	movs	r3, #4
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002754:	2300      	movs	r3, #0
 8002756:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002760:	4619      	mov	r1, r3
 8002762:	480b      	ldr	r0, [pc, #44]	@ (8002790 <MX_GPIO_Init+0x370>)
 8002764:	f004 f894 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002768:	2328      	movs	r3, #40	@ 0x28
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002778:	230a      	movs	r3, #10
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002780:	4619      	mov	r1, r3
 8002782:	4805      	ldr	r0, [pc, #20]	@ (8002798 <MX_GPIO_Init+0x378>)
 8002784:	f004 f884 	bl	8006890 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002788:	bf00      	nop
 800278a:	3740      	adds	r7, #64	@ 0x40
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021800 	.word	0x40021800
 8002794:	40020800 	.word	0x40020800
 8002798:	40020000 	.word	0x40020000

0800279c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800279c:	b5b0      	push	{r4, r5, r7, lr}
 800279e:	b098      	sub	sp, #96	@ 0x60
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80027a4:	f013 fea6 	bl	80164f4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // Logger 초기화 (STM32에서는 단순히 연결 상태 설정)
  LOGGER_Connect("STM32", 0);
 80027a8:	2100      	movs	r1, #0
 80027aa:	4890      	ldr	r0, [pc, #576]	@ (80029ec <StartDefaultTask+0x250>)
 80027ac:	f001 fd36 	bl	800421c <LOGGER_Connect>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 80027b0:	498f      	ldr	r1, [pc, #572]	@ (80029f0 <StartDefaultTask+0x254>)
 80027b2:	2001      	movs	r0, #1
 80027b4:	f001 fd7a 	bl	80042ac <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 80027b8:	4b8e      	ldr	r3, [pc, #568]	@ (80029f4 <StartDefaultTask+0x258>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a8e      	ldr	r2, [pc, #568]	@ (80029f8 <StartDefaultTask+0x25c>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	461a      	mov	r2, r3
 80027c6:	498d      	ldr	r1, [pc, #564]	@ (80029fc <StartDefaultTask+0x260>)
 80027c8:	2001      	movs	r0, #1
 80027ca:	f001 fd6f 	bl	80042ac <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 80027ce:	498c      	ldr	r1, [pc, #560]	@ (8002a00 <StartDefaultTask+0x264>)
 80027d0:	2001      	movs	r0, #1
 80027d2:	f001 fd6b 	bl	80042ac <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 80027d6:	498b      	ldr	r1, [pc, #556]	@ (8002a04 <StartDefaultTask+0x268>)
 80027d8:	2001      	movs	r0, #1
 80027da:	f001 fd67 	bl	80042ac <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 80027de:	498a      	ldr	r1, [pc, #552]	@ (8002a08 <StartDefaultTask+0x26c>)
 80027e0:	2001      	movs	r0, #1
 80027e2:	f001 fd63 	bl	80042ac <LOGGER_SendFormatted>
  
  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 80027e6:	4989      	ldr	r1, [pc, #548]	@ (8002a0c <StartDefaultTask+0x270>)
 80027e8:	2001      	movs	r0, #1
 80027ea:	f001 fd5f 	bl	80042ac <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 80027ee:	4888      	ldr	r0, [pc, #544]	@ (8002a10 <StartDefaultTask+0x274>)
 80027f0:	f001 fdf8 	bl	80043e4 <UART_Connect>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  if (uart_status == UART_STATUS_OK) {
 80027fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <StartDefaultTask+0x7a>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 8002802:	4984      	ldr	r1, [pc, #528]	@ (8002a14 <StartDefaultTask+0x278>)
 8002804:	2001      	movs	r0, #1
 8002806:	f001 fd51 	bl	80042ac <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 800280a:	f001 fec1 	bl	8004590 <UART_IsConnected>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d044      	beq.n	800289e <StartDefaultTask+0x102>
 8002814:	e00b      	b.n	800282e <StartDefaultTask+0x92>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8002816:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800281a:	461a      	mov	r2, r3
 800281c:	497e      	ldr	r1, [pc, #504]	@ (8002a18 <StartDefaultTask+0x27c>)
 800281e:	2003      	movs	r0, #3
 8002820:	f001 fd44 	bl	80042ac <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002824:	497d      	ldr	r1, [pc, #500]	@ (8002a1c <StartDefaultTask+0x280>)
 8002826:	2003      	movs	r0, #3
 8002828:	f001 fd40 	bl	80042ac <LOGGER_SendFormatted>
    goto idle_loop;
 800282c:	e0c7      	b.n	80029be <StartDefaultTask+0x222>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 800282e:	497c      	ldr	r1, [pc, #496]	@ (8002a20 <StartDefaultTask+0x284>)
 8002830:	2001      	movs	r0, #1
 8002832:	f001 fd3b 	bl	80042ac <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8002836:	497b      	ldr	r1, [pc, #492]	@ (8002a24 <StartDefaultTask+0x288>)
 8002838:	2001      	movs	r0, #1
 800283a:	f001 fd37 	bl	80042ac <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 800283e:	497a      	ldr	r1, [pc, #488]	@ (8002a28 <StartDefaultTask+0x28c>)
 8002840:	2001      	movs	r0, #1
 8002842:	f001 fd33 	bl	80042ac <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8002846:	f242 7010 	movw	r0, #10000	@ 0x2710
 800284a:	f011 fb4b 	bl	8013ee4 <osDelay>
  
  // LoRa 기본 연결 테스트 + 초기 설정 명령어들
  const char* lora_init_commands[] = {
 800284e:	4b77      	ldr	r3, [pc, #476]	@ (8002a2c <StartDefaultTask+0x290>)
 8002850:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002854:	461d      	mov	r5, r3
 8002856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800285a:	682b      	ldr	r3, [r5, #0]
 800285c:	6023      	str	r3, [r4, #0]
    "AT+CLASS=A\r\n",   // Class A 설정
    "AT+BAND=7\r\n"     // Asia 923 MHz 대역 설정
  };
  
  // LoraStarter 컨텍스트 초기화
  LoraStarterContext lora_ctx = {
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	2230      	movs	r2, #48	@ 0x30
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f014 fa8e 	bl	8016d88 <memset>
 800286c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	2305      	movs	r3, #5
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	4b6e      	ldr	r3, [pc, #440]	@ (8002a30 <StartDefaultTask+0x294>)
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a34 <StartDefaultTask+0x298>)
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
 800287e:	2303      	movs	r3, #3
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    .send_message = "TEST",
    .max_retry_count = 3,
    .send_interval_ms = 300000  // 5분 간격
  };
  
  LOG_INFO("=== LoRa Initialization ===");
 8002882:	496d      	ldr	r1, [pc, #436]	@ (8002a38 <StartDefaultTask+0x29c>)
 8002884:	2001      	movs	r0, #1
 8002886:	f001 fd11 	bl	80042ac <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800288e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	460b      	mov	r3, r1
 8002894:	4969      	ldr	r1, [pc, #420]	@ (8002a3c <StartDefaultTask+0x2a0>)
 8002896:	2001      	movs	r0, #1
 8002898:	f001 fd08 	bl	80042ac <LOGGER_SendFormatted>
 800289c:	e008      	b.n	80028b0 <StartDefaultTask+0x114>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 800289e:	4968      	ldr	r1, [pc, #416]	@ (8002a40 <StartDefaultTask+0x2a4>)
 80028a0:	2003      	movs	r0, #3
 80028a2:	f001 fd03 	bl	80042ac <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 80028a6:	495d      	ldr	r1, [pc, #372]	@ (8002a1c <StartDefaultTask+0x280>)
 80028a8:	2003      	movs	r0, #3
 80028aa:	f001 fcff 	bl	80042ac <LOGGER_SendFormatted>
    goto idle_loop;
 80028ae:	e086      	b.n	80029be <StartDefaultTask+0x222>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (lora_new_response) {
 80028b4:	4b63      	ldr	r3, [pc, #396]	@ (8002a44 <StartDefaultTask+0x2a8>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <StartDefaultTask+0x136>
      rx_data = lora_rx_response;
 80028be:	4b62      	ldr	r3, [pc, #392]	@ (8002a48 <StartDefaultTask+0x2ac>)
 80028c0:	657b      	str	r3, [r7, #84]	@ 0x54
      lora_new_response = false; // 플래그 클리어
 80028c2:	4b60      	ldr	r3, [pc, #384]	@ (8002a44 <StartDefaultTask+0x2a8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 80028c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80028ca:	4960      	ldr	r1, [pc, #384]	@ (8002a4c <StartDefaultTask+0x2b0>)
 80028cc:	2000      	movs	r0, #0
 80028ce:	f001 fced 	bl	80042ac <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd ff5d 	bl	8000798 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 80028de:	7a3b      	ldrb	r3, [r7, #8]
 80028e0:	4619      	mov	r1, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	460a      	mov	r2, r1
 80028ec:	4958      	ldr	r1, [pc, #352]	@ (8002a50 <StartDefaultTask+0x2b4>)
 80028ee:	2000      	movs	r0, #0
 80028f0:	f001 fcdc 	bl	80042ac <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 80028f4:	7a3b      	ldrb	r3, [r7, #8]
 80028f6:	2b0a      	cmp	r3, #10
 80028f8:	d85b      	bhi.n	80029b2 <StartDefaultTask+0x216>
 80028fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <StartDefaultTask+0x164>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	0800292d 	.word	0x0800292d
 8002904:	08002937 	.word	0x08002937
 8002908:	0800294f 	.word	0x0800294f
 800290c:	08002967 	.word	0x08002967
 8002910:	08002971 	.word	0x08002971
 8002914:	08002967 	.word	0x08002967
 8002918:	08002971 	.word	0x08002971
 800291c:	0800297b 	.word	0x0800297b
 8002920:	08002991 	.word	0x08002991
 8002924:	0800299b 	.word	0x0800299b
 8002928:	0800299b 	.word	0x0800299b
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 800292c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002930:	f011 fad8 	bl	8013ee4 <osDelay>
        break;
 8002934:	e042      	b.n	80029bc <StartDefaultTask+0x220>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4945      	ldr	r1, [pc, #276]	@ (8002a54 <StartDefaultTask+0x2b8>)
 800293e:	2001      	movs	r0, #1
 8002940:	f001 fcb4 	bl	80042ac <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8002944:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002948:	f011 facc 	bl	8013ee4 <osDelay>
        break;
 800294c:	e036      	b.n	80029bc <StartDefaultTask+0x220>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	461a      	mov	r2, r3
 8002954:	4940      	ldr	r1, [pc, #256]	@ (8002a58 <StartDefaultTask+0x2bc>)
 8002956:	2000      	movs	r0, #0
 8002958:	f001 fca8 	bl	80042ac <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 800295c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002960:	f011 fac0 	bl	8013ee4 <osDelay>
        break;
 8002964:	e02a      	b.n	80029bc <StartDefaultTask+0x220>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 8002966:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800296a:	f011 fabb 	bl	8013ee4 <osDelay>
        break;
 800296e:	e025      	b.n	80029bc <StartDefaultTask+0x220>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8002970:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002974:	f011 fab6 	bl	8013ee4 <osDelay>
        break;
 8002978:	e020      	b.n	80029bc <StartDefaultTask+0x220>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	461a      	mov	r2, r3
 800297e:	4937      	ldr	r1, [pc, #220]	@ (8002a5c <StartDefaultTask+0x2c0>)
 8002980:	2000      	movs	r0, #0
 8002982:	f001 fc93 	bl	80042ac <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8002986:	f241 3088 	movw	r0, #5000	@ 0x1388
 800298a:	f011 faab 	bl	8013ee4 <osDelay>
        break;
 800298e:	e015      	b.n	80029bc <StartDefaultTask+0x220>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8002990:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002994:	f011 faa6 	bl	8013ee4 <osDelay>
        break;
 8002998:	e010      	b.n	80029bc <StartDefaultTask+0x220>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 800299a:	7a3b      	ldrb	r3, [r7, #8]
 800299c:	2b09      	cmp	r3, #9
 800299e:	d101      	bne.n	80029a4 <StartDefaultTask+0x208>
 80029a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a60 <StartDefaultTask+0x2c4>)
 80029a2:	e000      	b.n	80029a6 <StartDefaultTask+0x20a>
 80029a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a64 <StartDefaultTask+0x2c8>)
 80029a6:	461a      	mov	r2, r3
 80029a8:	492f      	ldr	r1, [pc, #188]	@ (8002a68 <StartDefaultTask+0x2cc>)
 80029aa:	2001      	movs	r0, #1
 80029ac:	f001 fc7e 	bl	80042ac <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 80029b0:	e005      	b.n	80029be <StartDefaultTask+0x222>
      default:
        osDelay(1000);
 80029b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029b6:	f011 fa95 	bl	8013ee4 <osDelay>
        break;
 80029ba:	bf00      	nop
  {
 80029bc:	e778      	b.n	80028b0 <StartDefaultTask+0x114>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 80029be:	492b      	ldr	r1, [pc, #172]	@ (8002a6c <StartDefaultTask+0x2d0>)
 80029c0:	2001      	movs	r0, #1
 80029c2:	f001 fc73 	bl	80042ac <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	653b      	str	r3, [r7, #80]	@ 0x50
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 80029ca:	f247 5030 	movw	r0, #30000	@ 0x7530
 80029ce:	f011 fa89 	bl	8013ee4 <osDelay>
    idle_counter++;
 80029d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d4:	3301      	adds	r3, #1
 80029d6:	653b      	str	r3, [r7, #80]	@ 0x50
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 80029d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	461a      	mov	r2, r3
 80029de:	4924      	ldr	r1, [pc, #144]	@ (8002a70 <StartDefaultTask+0x2d4>)
 80029e0:	2001      	movs	r0, #1
 80029e2:	f001 fc63 	bl	80042ac <LOGGER_SendFormatted>
    osDelay(30000);
 80029e6:	bf00      	nop
 80029e8:	e7ef      	b.n	80029ca <StartDefaultTask+0x22e>
 80029ea:	bf00      	nop
 80029ec:	080180ec 	.word	0x080180ec
 80029f0:	080180f4 	.word	0x080180f4
 80029f4:	20000000 	.word	0x20000000
 80029f8:	431bde83 	.word	0x431bde83
 80029fc:	08018120 	.word	0x08018120
 8002a00:	08018138 	.word	0x08018138
 8002a04:	08018160 	.word	0x08018160
 8002a08:	080181ac 	.word	0x080181ac
 8002a0c:	080181e8 	.word	0x080181e8
 8002a10:	08018214 	.word	0x08018214
 8002a14:	0801821c 	.word	0x0801821c
 8002a18:	08018248 	.word	0x08018248
 8002a1c:	08018280 	.word	0x08018280
 8002a20:	080182c4 	.word	0x080182c4
 8002a24:	08018320 	.word	0x08018320
 8002a28:	08018358 	.word	0x08018358
 8002a2c:	080185b0 	.word	0x080185b0
 8002a30:	000493e0 	.word	0x000493e0
 8002a34:	08018398 	.word	0x08018398
 8002a38:	080183a0 	.word	0x080183a0
 8002a3c:	080183bc 	.word	0x080183bc
 8002a40:	080182f4 	.word	0x080182f4
 8002a44:	20000f70 	.word	0x20000f70
 8002a48:	20000e70 	.word	0x20000e70
 8002a4c:	080183ec 	.word	0x080183ec
 8002a50:	0801841c 	.word	0x0801841c
 8002a54:	08018448 	.word	0x08018448
 8002a58:	08018470 	.word	0x08018470
 8002a5c:	080184a4 	.word	0x080184a4
 8002a60:	080184d4 	.word	0x080184d4
 8002a64:	080184dc 	.word	0x080184dc
 8002a68:	080184e4 	.word	0x080184e4
 8002a6c:	0801851c 	.word	0x0801851c
 8002a70:	08018544 	.word	0x08018544

08002a74 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b0c9      	sub	sp, #292	@ 0x124
 8002a78:	af04      	add	r7, sp, #16
 8002a7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a82:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8002a84:	49a8      	ldr	r1, [pc, #672]	@ (8002d28 <StartReceiveTask+0x2b4>)
 8002a86:	2001      	movs	r0, #1
 8002a88:	f001 fc10 	bl	80042ac <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8002a8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a90:	f011 fa28 	bl	8013ee4 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[256];
  int local_bytes_received = 0;
 8002a94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8002aa0:	f107 0208 	add.w	r2, r7, #8
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 fd15 	bl	80044dc <UART_Receive>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8002ab8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d2c <StartReceiveTask+0x2b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a9b      	ldr	r2, [pc, #620]	@ (8002d2c <StartReceiveTask+0x2b8>)
 8002ac0:	6013      	str	r3, [r2, #0]
    if (debug_counter % 200 == 0 && status != UART_STATUS_TIMEOUT) {  // 10초마다, 타임아웃 제외
 8002ac2:	4b9a      	ldr	r3, [pc, #616]	@ (8002d2c <StartReceiveTask+0x2b8>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b9a      	ldr	r3, [pc, #616]	@ (8002d30 <StartReceiveTask+0x2bc>)
 8002ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	21c8      	movs	r1, #200	@ 0xc8
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11f      	bne.n	8002b1a <StartReceiveTask+0xa6>
 8002ada:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d01b      	beq.n	8002b1a <StartReceiveTask+0xa6>
      LOG_INFO("[RX_TASK] Status check #%lu: status=%d, bytes=%d, flags: rx_complete=%d, rx_error=%d", 
 8002ae2:	4b92      	ldr	r3, [pc, #584]	@ (8002d2c <StartReceiveTask+0x2b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a92      	ldr	r2, [pc, #584]	@ (8002d30 <StartReceiveTask+0x2bc>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	099a      	lsrs	r2, r3, #6
 8002aee:	f897 110e 	ldrb.w	r1, [r7, #270]	@ 0x10e
 8002af2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	488d      	ldr	r0, [pc, #564]	@ (8002d34 <StartReceiveTask+0x2c0>)
 8002afe:	7800      	ldrb	r0, [r0, #0]
 8002b00:	b2c0      	uxtb	r0, r0
 8002b02:	4604      	mov	r4, r0
 8002b04:	488c      	ldr	r0, [pc, #560]	@ (8002d38 <StartReceiveTask+0x2c4>)
 8002b06:	7800      	ldrb	r0, [r0, #0]
 8002b08:	b2c0      	uxtb	r0, r0
 8002b0a:	9002      	str	r0, [sp, #8]
 8002b0c:	9401      	str	r4, [sp, #4]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	460b      	mov	r3, r1
 8002b12:	498a      	ldr	r1, [pc, #552]	@ (8002d3c <StartReceiveTask+0x2c8>)
 8002b14:	2001      	movs	r0, #1
 8002b16:	f001 fbc9 	bl	80042ac <LOGGER_SendFormatted>
               debug_counter / 200, status, local_bytes_received, uart_rx_complete_flag, uart_rx_error_flag);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8002b1a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 80fd 	bne.w	8002d1e <StartReceiveTask+0x2aa>
 8002b24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f340 80f5 	ble.w	8002d1e <StartReceiveTask+0x2aa>
      // 수신 완료 - TDD ResponseHandler로 분석
      LOG_INFO("📥 RECV: '%s' (%d bytes)", local_buffer, local_bytes_received);
 8002b34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f107 020c 	add.w	r2, r7, #12
 8002b42:	497f      	ldr	r1, [pc, #508]	@ (8002d40 <StartReceiveTask+0x2cc>)
 8002b44:	2001      	movs	r0, #1
 8002b46:	f001 fbb1 	bl	80042ac <LOGGER_SendFormatted>
      
      // TDD ResponseHandler를 사용하여 응답 분석
      if (is_response_ok(local_buffer)) {
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f8d4 	bl	8000cfc <is_response_ok>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <StartReceiveTask+0xf0>
        LOG_INFO("✅ OK response");
 8002b5a:	497a      	ldr	r1, [pc, #488]	@ (8002d44 <StartReceiveTask+0x2d0>)
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f001 fba5 	bl	80042ac <LOGGER_SendFormatted>
 8002b62:	e04a      	b.n	8002bfa <StartReceiveTask+0x186>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8002b64:	f107 030c 	add.w	r3, r7, #12
 8002b68:	4977      	ldr	r1, [pc, #476]	@ (8002d48 <StartReceiveTask+0x2d4>)
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f014 f927 	bl	8016dbe <strstr>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <StartReceiveTask+0x10c>
        LOG_INFO("✅ JOIN response");
 8002b76:	4975      	ldr	r1, [pc, #468]	@ (8002d4c <StartReceiveTask+0x2d8>)
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f001 fb97 	bl	80042ac <LOGGER_SendFormatted>
 8002b7e:	e03c      	b.n	8002bfa <StartReceiveTask+0x186>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	4972      	ldr	r1, [pc, #456]	@ (8002d50 <StartReceiveTask+0x2dc>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	f014 f919 	bl	8016dbe <strstr>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <StartReceiveTask+0x128>
        LOG_INFO("📡 LoRa module boot message (ignored)");
 8002b92:	4970      	ldr	r1, [pc, #448]	@ (8002d54 <StartReceiveTask+0x2e0>)
 8002b94:	2001      	movs	r0, #1
 8002b96:	f001 fb89 	bl	80042ac <LOGGER_SendFormatted>
 8002b9a:	e02e      	b.n	8002bfa <StartReceiveTask+0x186>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe f995 	bl	8000ed0 <ResponseHandler_ParseSendResponse>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
        switch (response_type) {
 8002bac:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d822      	bhi.n	8002bfa <StartReceiveTask+0x186>
 8002bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bbc <StartReceiveTask+0x148>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002bd7 	.word	0x08002bd7
 8002bc4:	08002be1 	.word	0x08002be1
 8002bc8:	08002beb 	.word	0x08002beb
          case RESPONSE_OK:
            LOG_INFO("✅ OK");
 8002bcc:	4962      	ldr	r1, [pc, #392]	@ (8002d58 <StartReceiveTask+0x2e4>)
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f001 fb6c 	bl	80042ac <LOGGER_SendFormatted>
            break;
 8002bd4:	e011      	b.n	8002bfa <StartReceiveTask+0x186>
          case RESPONSE_ERROR:
            LOG_WARN("⚠️ ERROR");
 8002bd6:	4961      	ldr	r1, [pc, #388]	@ (8002d5c <StartReceiveTask+0x2e8>)
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f001 fb67 	bl	80042ac <LOGGER_SendFormatted>
            break;
 8002bde:	e00c      	b.n	8002bfa <StartReceiveTask+0x186>
          case RESPONSE_TIMEOUT:
            LOG_WARN("⚠️ TIMEOUT");
 8002be0:	495f      	ldr	r1, [pc, #380]	@ (8002d60 <StartReceiveTask+0x2ec>)
 8002be2:	2002      	movs	r0, #2
 8002be4:	f001 fb62 	bl	80042ac <LOGGER_SendFormatted>
            break;
 8002be8:	e007      	b.n	8002bfa <StartReceiveTask+0x186>
          case RESPONSE_UNKNOWN:
            LOG_INFO("❓ UNKNOWN format: %.20s...", local_buffer);  // 처음 20자만 표시
 8002bea:	f107 030c 	add.w	r3, r7, #12
 8002bee:	461a      	mov	r2, r3
 8002bf0:	495c      	ldr	r1, [pc, #368]	@ (8002d64 <StartReceiveTask+0x2f0>)
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f001 fb5a 	bl	80042ac <LOGGER_SendFormatted>
            break;
 8002bf8:	bf00      	nop
        }
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8002bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4856      	ldr	r0, [pc, #344]	@ (8002d68 <StartReceiveTask+0x2f4>)
 8002c0e:	f014 f929 	bl	8016e64 <memcpy>
      rx_bytes_received = local_bytes_received;
 8002c12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a53      	ldr	r2, [pc, #332]	@ (8002d6c <StartReceiveTask+0x2f8>)
 8002c1e:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      
      if (is_response_ok(local_buffer)) {
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f866 	bl	8000cfc <is_response_ok>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <StartReceiveTask+0x1ca>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002c3c:	e03f      	b.n	8002cbe <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	4941      	ldr	r1, [pc, #260]	@ (8002d48 <StartReceiveTask+0x2d4>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f014 f8ba 	bl	8016dbe <strstr>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <StartReceiveTask+0x1e4>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002c56:	e032      	b.n	8002cbe <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	4944      	ldr	r1, [pc, #272]	@ (8002d70 <StartReceiveTask+0x2fc>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f014 f8ad 	bl	8016dbe <strstr>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <StartReceiveTask+0x1fe>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002c70:	e025      	b.n	8002cbe <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	4936      	ldr	r1, [pc, #216]	@ (8002d50 <StartReceiveTask+0x2dc>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f014 f8a0 	bl	8016dbe <strstr>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d108      	bne.n	8002c96 <StartReceiveTask+0x222>
 8002c84:	f107 030c 	add.w	r3, r7, #12
 8002c88:	493a      	ldr	r1, [pc, #232]	@ (8002d74 <StartReceiveTask+0x300>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f014 f897 	bl	8016dbe <strstr>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <StartReceiveTask+0x22c>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8002c96:	4938      	ldr	r1, [pc, #224]	@ (8002d78 <StartReceiveTask+0x304>)
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f001 fb07 	bl	80042ac <LOGGER_SendFormatted>
 8002c9e:	e00e      	b.n	8002cbe <StartReceiveTask+0x24a>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe f913 	bl	8000ed0 <ResponseHandler_ParseSendResponse>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
        if (response_type != RESPONSE_UNKNOWN) {
 8002cb0:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d002      	beq.n	8002cbe <StartReceiveTask+0x24a>
          is_lora_command_response = true;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8002cbe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01d      	beq.n	8002d02 <StartReceiveTask+0x28e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8002cc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4828      	ldr	r0, [pc, #160]	@ (8002d7c <StartReceiveTask+0x308>)
 8002cda:	f014 f8c3 	bl	8016e64 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8002cde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a24      	ldr	r2, [pc, #144]	@ (8002d7c <StartReceiveTask+0x308>)
 8002cea:	2100      	movs	r1, #0
 8002cec:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8002cee:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <StartReceiveTask+0x30c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4922      	ldr	r1, [pc, #136]	@ (8002d84 <StartReceiveTask+0x310>)
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f001 fad5 	bl	80042ac <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f014 f83b 	bl	8016d88 <memset>
      local_bytes_received = 0;
 8002d12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8002d1e:	2032      	movs	r0, #50	@ 0x32
 8002d20:	f011 f8e0 	bl	8013ee4 <osDelay>
  {
 8002d24:	e6bc      	b.n	8002aa0 <StartReceiveTask+0x2c>
 8002d26:	bf00      	nop
 8002d28:	080185c4 	.word	0x080185c4
 8002d2c:	20000fe0 	.word	0x20000fe0
 8002d30:	51eb851f 	.word	0x51eb851f
 8002d34:	20000fd4 	.word	0x20000fd4
 8002d38:	20000fd5 	.word	0x20000fd5
 8002d3c:	080185ec 	.word	0x080185ec
 8002d40:	08018644 	.word	0x08018644
 8002d44:	08018660 	.word	0x08018660
 8002d48:	08018670 	.word	0x08018670
 8002d4c:	0801867c 	.word	0x0801867c
 8002d50:	08018690 	.word	0x08018690
 8002d54:	0801869c 	.word	0x0801869c
 8002d58:	080186c4 	.word	0x080186c4
 8002d5c:	080186cc 	.word	0x080186cc
 8002d60:	080186dc 	.word	0x080186dc
 8002d64:	080186ec 	.word	0x080186ec
 8002d68:	20000d6c 	.word	0x20000d6c
 8002d6c:	20000e6c 	.word	0x20000e6c
 8002d70:	0801870c 	.word	0x0801870c
 8002d74:	08018714 	.word	0x08018714
 8002d78:	08018724 	.word	0x08018724
 8002d7c:	20000e70 	.word	0x20000e70
 8002d80:	20000f70 	.word	0x20000f70
 8002d84:	08018760 	.word	0x08018760

08002d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002d9a:	f001 fea1 	bl	8004ae0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40001000 	.word	0x40001000

08002dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db0:	b672      	cpsid	i
}
 8002db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <Error_Handler+0x8>

08002db8 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <MX_DMA_Init+0x48>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002e00 <MX_DMA_Init+0x48>)
 8002dc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <MX_DMA_Init+0x48>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2105      	movs	r1, #5
 8002dda:	2039      	movs	r0, #57	@ 0x39
 8002ddc:	f002 fa14 	bl	8005208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002de0:	2039      	movs	r0, #57	@ 0x39
 8002de2:	f002 fa2d 	bl	8005240 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2105      	movs	r1, #5
 8002dea:	2047      	movs	r0, #71	@ 0x47
 8002dec:	f002 fa0c 	bl	8005208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002df0:	2047      	movs	r0, #71	@ 0x47
 8002df2:	f002 fa25 	bl	8005240 <HAL_NVIC_EnableIRQ>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800

08002e04 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8002e08:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e0a:	4a19      	ldr	r2, [pc, #100]	@ (8002e70 <MX_USART6_DMA_Init+0x6c>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e10:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002e14:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e22:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e28:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e30:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e42:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002e4a:	4808      	ldr	r0, [pc, #32]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e4c:	f002 fb72 	bl	8005534 <HAL_DMA_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_USART6_DMA_Init+0x56>
  {
    Error_Handler();
 8002e56:	f7ff ffa9 	bl	8002dac <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <MX_USART6_DMA_Init+0x70>)
 8002e5c:	4a03      	ldr	r2, [pc, #12]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e5e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002e60:	4b02      	ldr	r3, [pc, #8]	@ (8002e6c <MX_USART6_DMA_Init+0x68>)
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <MX_USART6_DMA_Init+0x70>)
 8002e64:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000f74 	.word	0x20000f74
 8002e70:	40026428 	.word	0x40026428
 8002e74:	20000ca8 	.word	0x20000ca8

08002e78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <HAL_MspInit+0x4c>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	4a10      	ldr	r2, [pc, #64]	@ (8002ec4 <HAL_MspInit+0x4c>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <HAL_MspInit+0x4c>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_MspInit+0x4c>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <HAL_MspInit+0x4c>)
 8002e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea2:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <HAL_MspInit+0x4c>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	210f      	movs	r1, #15
 8002eb2:	f06f 0001 	mvn.w	r0, #1
 8002eb6:	f002 f9a7 	bl	8005208 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800

08002ec8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	@ 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a21      	ldr	r2, [pc, #132]	@ (8002f6c <HAL_ADC_MspInit+0xa4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d13c      	bne.n	8002f64 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002eea:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	4a20      	ldr	r2, [pc, #128]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002ef0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f02:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	4a1a      	ldr	r2, [pc, #104]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002f08:	f043 0320 	orr.w	r3, r3, #32
 8002f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0e:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	4a14      	ldr	r2, [pc, #80]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f26:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <HAL_ADC_MspInit+0xa8>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002f32:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002f36:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	480b      	ldr	r0, [pc, #44]	@ (8002f74 <HAL_ADC_MspInit+0xac>)
 8002f48:	f003 fca2 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f50:	2303      	movs	r3, #3
 8002f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4806      	ldr	r0, [pc, #24]	@ (8002f78 <HAL_ADC_MspInit+0xb0>)
 8002f60:	f003 fc96 	bl	8006890 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8002f64:	bf00      	nop
 8002f66:	3728      	adds	r7, #40	@ 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40012200 	.word	0x40012200
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40021400 	.word	0x40021400
 8002f78:	40020000 	.word	0x40020000

08002f7c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <HAL_CRC_MspInit+0x38>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_CRC_MspInit+0x3c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a09      	ldr	r2, [pc, #36]	@ (8002fb8 <HAL_CRC_MspInit+0x3c>)
 8002f94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <HAL_CRC_MspInit+0x3c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023000 	.word	0x40023000
 8002fb8:	40023800 	.word	0x40023800

08002fbc <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08e      	sub	sp, #56	@ 0x38
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a50      	ldr	r2, [pc, #320]	@ (800311c <HAL_DCMI_MspInit+0x160>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f040 809a 	bne.w	8003114 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe4:	4a4e      	ldr	r2, [pc, #312]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6353      	str	r3, [r2, #52]	@ 0x34
 8002fec:	4b4c      	ldr	r3, [pc, #304]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8002fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ff8:	4b49      	ldr	r3, [pc, #292]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffc:	4a48      	ldr	r2, [pc, #288]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8002ffe:	f043 0310 	orr.w	r3, r3, #16
 8003002:	6313      	str	r3, [r2, #48]	@ 0x30
 8003004:	4b46      	ldr	r3, [pc, #280]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003010:	4b43      	ldr	r3, [pc, #268]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	4a42      	ldr	r2, [pc, #264]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6313      	str	r3, [r2, #48]	@ 0x30
 800301c:	4b40      	ldr	r3, [pc, #256]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003028:	4b3d      	ldr	r3, [pc, #244]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	4a3c      	ldr	r2, [pc, #240]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 800302e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003032:	6313      	str	r3, [r2, #48]	@ 0x30
 8003034:	4b3a      	ldr	r3, [pc, #232]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003040:	4b37      	ldr	r3, [pc, #220]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	4a36      	ldr	r2, [pc, #216]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8003046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800304a:	6313      	str	r3, [r2, #48]	@ 0x30
 800304c:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003058:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	4a30      	ldr	r2, [pc, #192]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6313      	str	r3, [r2, #48]	@ 0x30
 8003064:	4b2e      	ldr	r3, [pc, #184]	@ (8003120 <HAL_DCMI_MspInit+0x164>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003070:	2360      	movs	r3, #96	@ 0x60
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	2300      	movs	r3, #0
 800307e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003080:	230d      	movs	r3, #13
 8003082:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003088:	4619      	mov	r1, r3
 800308a:	4826      	ldr	r0, [pc, #152]	@ (8003124 <HAL_DCMI_MspInit+0x168>)
 800308c:	f003 fc00 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003090:	2308      	movs	r3, #8
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80030a0:	230d      	movs	r3, #13
 80030a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80030a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030a8:	4619      	mov	r1, r3
 80030aa:	481f      	ldr	r0, [pc, #124]	@ (8003128 <HAL_DCMI_MspInit+0x16c>)
 80030ac:	f003 fbf0 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80030b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	2300      	movs	r3, #0
 80030c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80030c2:	230d      	movs	r3, #13
 80030c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80030c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ca:	4619      	mov	r1, r3
 80030cc:	4817      	ldr	r0, [pc, #92]	@ (800312c <HAL_DCMI_MspInit+0x170>)
 80030ce:	f003 fbdf 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80030d2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80030e4:	230d      	movs	r3, #13
 80030e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ec:	4619      	mov	r1, r3
 80030ee:	4810      	ldr	r0, [pc, #64]	@ (8003130 <HAL_DCMI_MspInit+0x174>)
 80030f0:	f003 fbce 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80030f4:	2350      	movs	r3, #80	@ 0x50
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f8:	2302      	movs	r3, #2
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003104:	230d      	movs	r3, #13
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800310c:	4619      	mov	r1, r3
 800310e:	4809      	ldr	r0, [pc, #36]	@ (8003134 <HAL_DCMI_MspInit+0x178>)
 8003110:	f003 fbbe 	bl	8006890 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8003114:	bf00      	nop
 8003116:	3738      	adds	r7, #56	@ 0x38
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	50050000 	.word	0x50050000
 8003120:	40023800 	.word	0x40023800
 8003124:	40021000 	.word	0x40021000
 8003128:	40020c00 	.word	0x40020c00
 800312c:	40021800 	.word	0x40021800
 8003130:	40021c00 	.word	0x40021c00
 8003134:	40020000 	.word	0x40020000

08003138 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0d      	ldr	r2, [pc, #52]	@ (800317c <HAL_DMA2D_MspInit+0x44>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d113      	bne.n	8003172 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800314a:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <HAL_DMA2D_MspInit+0x48>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	4a0c      	ldr	r2, [pc, #48]	@ (8003180 <HAL_DMA2D_MspInit+0x48>)
 8003150:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003154:	6313      	str	r3, [r2, #48]	@ 0x30
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <HAL_DMA2D_MspInit+0x48>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2105      	movs	r1, #5
 8003166:	205a      	movs	r0, #90	@ 0x5a
 8003168:	f002 f84e 	bl	8005208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800316c:	205a      	movs	r0, #90	@ 0x5a
 800316e:	f002 f867 	bl	8005240 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	4002b000 	.word	0x4002b000
 8003180:	40023800 	.word	0x40023800

08003184 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08e      	sub	sp, #56	@ 0x38
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a3f      	ldr	r2, [pc, #252]	@ (80032a0 <HAL_ETH_MspInit+0x11c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d178      	bne.n	8003298 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031a6:	4b3f      	ldr	r3, [pc, #252]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	4a3e      	ldr	r2, [pc, #248]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b2:	4b3c      	ldr	r3, [pc, #240]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	4a38      	ldr	r2, [pc, #224]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ca:	4b36      	ldr	r3, [pc, #216]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4b33      	ldr	r3, [pc, #204]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	4a32      	ldr	r2, [pc, #200]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80031e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e2:	4b30      	ldr	r3, [pc, #192]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031ee:	4b2d      	ldr	r3, [pc, #180]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	4a2c      	ldr	r2, [pc, #176]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fa:	4b2a      	ldr	r3, [pc, #168]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003206:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	4a26      	ldr	r2, [pc, #152]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	6313      	str	r3, [r2, #48]	@ 0x30
 8003212:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321e:	4b21      	ldr	r3, [pc, #132]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a20      	ldr	r2, [pc, #128]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b1e      	ldr	r3, [pc, #120]	@ (80032a4 <HAL_ETH_MspInit+0x120>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003236:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003244:	2303      	movs	r3, #3
 8003246:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003248:	230b      	movs	r3, #11
 800324a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800324c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	4815      	ldr	r0, [pc, #84]	@ (80032a8 <HAL_ETH_MspInit+0x124>)
 8003254:	f003 fb1c 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003258:	2332      	movs	r3, #50	@ 0x32
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003268:	230b      	movs	r3, #11
 800326a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003270:	4619      	mov	r1, r3
 8003272:	480e      	ldr	r0, [pc, #56]	@ (80032ac <HAL_ETH_MspInit+0x128>)
 8003274:	f003 fb0c 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003278:	2386      	movs	r3, #134	@ 0x86
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	2303      	movs	r3, #3
 8003286:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003288:	230b      	movs	r3, #11
 800328a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003290:	4619      	mov	r1, r3
 8003292:	4807      	ldr	r0, [pc, #28]	@ (80032b0 <HAL_ETH_MspInit+0x12c>)
 8003294:	f003 fafc 	bl	8006890 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003298:	bf00      	nop
 800329a:	3738      	adds	r7, #56	@ 0x38
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40028000 	.word	0x40028000
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40021800 	.word	0x40021800
 80032ac:	40020800 	.word	0x40020800
 80032b0:	40020000 	.word	0x40020000

080032b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b0ac      	sub	sp, #176	@ 0xb0
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032cc:	f107 0318 	add.w	r3, r7, #24
 80032d0:	2284      	movs	r2, #132	@ 0x84
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f013 fd57 	bl	8016d88 <memset>
  if(hi2c->Instance==I2C1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a44      	ldr	r2, [pc, #272]	@ (80033f0 <HAL_I2C_MspInit+0x13c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d13d      	bne.n	8003360 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032ea:	2300      	movs	r3, #0
 80032ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032ee:	f107 0318 	add.w	r3, r7, #24
 80032f2:	4618      	mov	r0, r3
 80032f4:	f007 f802 	bl	800a2fc <HAL_RCCEx_PeriphCLKConfig>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80032fe:	f7ff fd55 	bl	8002dac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	4b3c      	ldr	r3, [pc, #240]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	4a3b      	ldr	r2, [pc, #236]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	6313      	str	r3, [r2, #48]	@ 0x30
 800330e:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800331a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800331e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003322:	2312      	movs	r3, #18
 8003324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003328:	2301      	movs	r3, #1
 800332a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003334:	2304      	movs	r3, #4
 8003336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800333e:	4619      	mov	r1, r3
 8003340:	482d      	ldr	r0, [pc, #180]	@ (80033f8 <HAL_I2C_MspInit+0x144>)
 8003342:	f003 faa5 	bl	8006890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003346:	4b2b      	ldr	r3, [pc, #172]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	4a2a      	ldr	r2, [pc, #168]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 800334c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003350:	6413      	str	r3, [r2, #64]	@ 0x40
 8003352:	4b28      	ldr	r3, [pc, #160]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800335e:	e042      	b.n	80033e6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a25      	ldr	r2, [pc, #148]	@ (80033fc <HAL_I2C_MspInit+0x148>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d13d      	bne.n	80033e6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800336a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800336e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003376:	f107 0318 	add.w	r3, r7, #24
 800337a:	4618      	mov	r0, r3
 800337c:	f006 ffbe 	bl	800a2fc <HAL_RCCEx_PeriphCLKConfig>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003386:	f7ff fd11 	bl	8002dac <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800338a:	4b1a      	ldr	r3, [pc, #104]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	4a19      	ldr	r2, [pc, #100]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 8003390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003394:	6313      	str	r3, [r2, #48]	@ 0x30
 8003396:	4b17      	ldr	r3, [pc, #92]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80033a2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80033a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033aa:	2312      	movs	r3, #18
 80033ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033bc:	2304      	movs	r3, #4
 80033be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033c6:	4619      	mov	r1, r3
 80033c8:	480d      	ldr	r0, [pc, #52]	@ (8003400 <HAL_I2C_MspInit+0x14c>)
 80033ca:	f003 fa61 	bl	8006890 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80033ce:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	4a08      	ldr	r2, [pc, #32]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 80033d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_I2C_MspInit+0x140>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
}
 80033e6:	bf00      	nop
 80033e8:	37b0      	adds	r7, #176	@ 0xb0
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40005400 	.word	0x40005400
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020400 	.word	0x40020400
 80033fc:	40005c00 	.word	0x40005c00
 8003400:	40021c00 	.word	0x40021c00

08003404 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08e      	sub	sp, #56	@ 0x38
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a55      	ldr	r2, [pc, #340]	@ (8003578 <HAL_LTDC_MspInit+0x174>)
 8003422:	4293      	cmp	r3, r2
 8003424:	f040 80a3 	bne.w	800356e <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003428:	4b54      	ldr	r3, [pc, #336]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 800342a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342c:	4a53      	ldr	r2, [pc, #332]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 800342e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003432:	6453      	str	r3, [r2, #68]	@ 0x44
 8003434:	4b51      	ldr	r3, [pc, #324]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003440:	4b4e      	ldr	r3, [pc, #312]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	4a4d      	ldr	r2, [pc, #308]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 8003446:	f043 0310 	orr.w	r3, r3, #16
 800344a:	6313      	str	r3, [r2, #48]	@ 0x30
 800344c:	4b4b      	ldr	r3, [pc, #300]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003458:	4b48      	ldr	r3, [pc, #288]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	4a47      	ldr	r2, [pc, #284]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 800345e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003462:	6313      	str	r3, [r2, #48]	@ 0x30
 8003464:	4b45      	ldr	r3, [pc, #276]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003470:	4b42      	ldr	r3, [pc, #264]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	4a41      	ldr	r2, [pc, #260]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 8003476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800347a:	6313      	str	r3, [r2, #48]	@ 0x30
 800347c:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003488:	4b3c      	ldr	r3, [pc, #240]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	4a3b      	ldr	r2, [pc, #236]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 800348e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003492:	6313      	str	r3, [r2, #48]	@ 0x30
 8003494:	4b39      	ldr	r3, [pc, #228]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034a0:	4b36      	ldr	r3, [pc, #216]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	4a35      	ldr	r2, [pc, #212]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ac:	4b33      	ldr	r3, [pc, #204]	@ (800357c <HAL_LTDC_MspInit+0x178>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80034b8:	2310      	movs	r3, #16
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	2300      	movs	r3, #0
 80034c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034c8:	230e      	movs	r3, #14
 80034ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80034cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d0:	4619      	mov	r1, r3
 80034d2:	482b      	ldr	r0, [pc, #172]	@ (8003580 <HAL_LTDC_MspInit+0x17c>)
 80034d4:	f003 f9dc 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80034d8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034ea:	230e      	movs	r3, #14
 80034ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80034ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034f2:	4619      	mov	r1, r3
 80034f4:	4823      	ldr	r0, [pc, #140]	@ (8003584 <HAL_LTDC_MspInit+0x180>)
 80034f6:	f003 f9cb 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80034fa:	23f7      	movs	r3, #247	@ 0xf7
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	2300      	movs	r3, #0
 8003508:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800350a:	230e      	movs	r3, #14
 800350c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800350e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003512:	4619      	mov	r1, r3
 8003514:	481c      	ldr	r0, [pc, #112]	@ (8003588 <HAL_LTDC_MspInit+0x184>)
 8003516:	f003 f9bb 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800351a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	2300      	movs	r3, #0
 800352a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800352c:	2309      	movs	r3, #9
 800352e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003534:	4619      	mov	r1, r3
 8003536:	4815      	ldr	r0, [pc, #84]	@ (800358c <HAL_LTDC_MspInit+0x188>)
 8003538:	f003 f9aa 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800353c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354a:	2300      	movs	r3, #0
 800354c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800354e:	230e      	movs	r3, #14
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003556:	4619      	mov	r1, r3
 8003558:	480d      	ldr	r0, [pc, #52]	@ (8003590 <HAL_LTDC_MspInit+0x18c>)
 800355a:	f003 f999 	bl	8006890 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2105      	movs	r1, #5
 8003562:	2058      	movs	r0, #88	@ 0x58
 8003564:	f001 fe50 	bl	8005208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003568:	2058      	movs	r0, #88	@ 0x58
 800356a:	f001 fe69 	bl	8005240 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800356e:	bf00      	nop
 8003570:	3738      	adds	r7, #56	@ 0x38
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40016800 	.word	0x40016800
 800357c:	40023800 	.word	0x40023800
 8003580:	40021000 	.word	0x40021000
 8003584:	40022400 	.word	0x40022400
 8003588:	40022800 	.word	0x40022800
 800358c:	40021800 	.word	0x40021800
 8003590:	40022000 	.word	0x40022000

08003594 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08c      	sub	sp, #48	@ 0x30
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 031c 	add.w	r3, r7, #28
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3b      	ldr	r2, [pc, #236]	@ (80036a0 <HAL_QSPI_MspInit+0x10c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d170      	bne.n	8003698 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80035b6:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ba:	4a3a      	ldr	r2, [pc, #232]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80035c2:	4b38      	ldr	r3, [pc, #224]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ce:	4b35      	ldr	r3, [pc, #212]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035d4:	f043 0310 	orr.w	r3, r3, #16
 80035d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035da:	4b32      	ldr	r3, [pc, #200]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	4b2f      	ldr	r3, [pc, #188]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	4a2e      	ldr	r2, [pc, #184]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f2:	4b2c      	ldr	r3, [pc, #176]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fe:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	4a28      	ldr	r2, [pc, #160]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	6313      	str	r3, [r2, #48]	@ 0x30
 800360a:	4b26      	ldr	r3, [pc, #152]	@ (80036a4 <HAL_QSPI_MspInit+0x110>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003616:	2304      	movs	r3, #4
 8003618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003622:	2303      	movs	r3, #3
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003626:	2309      	movs	r3, #9
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800362a:	f107 031c 	add.w	r3, r7, #28
 800362e:	4619      	mov	r1, r3
 8003630:	481d      	ldr	r0, [pc, #116]	@ (80036a8 <HAL_QSPI_MspInit+0x114>)
 8003632:	f003 f92d 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003636:	2340      	movs	r3, #64	@ 0x40
 8003638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003646:	230a      	movs	r3, #10
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800364a:	f107 031c 	add.w	r3, r7, #28
 800364e:	4619      	mov	r1, r3
 8003650:	4816      	ldr	r0, [pc, #88]	@ (80036ac <HAL_QSPI_MspInit+0x118>)
 8003652:	f003 f91d 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003656:	2304      	movs	r3, #4
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003662:	2303      	movs	r3, #3
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003666:	2309      	movs	r3, #9
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	480e      	ldr	r0, [pc, #56]	@ (80036ac <HAL_QSPI_MspInit+0x118>)
 8003672:	f003 f90d 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003676:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800367a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003688:	2309      	movs	r3, #9
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800368c:	f107 031c 	add.w	r3, r7, #28
 8003690:	4619      	mov	r1, r3
 8003692:	4807      	ldr	r0, [pc, #28]	@ (80036b0 <HAL_QSPI_MspInit+0x11c>)
 8003694:	f003 f8fc 	bl	8006890 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003698:	bf00      	nop
 800369a:	3730      	adds	r7, #48	@ 0x30
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	a0001000 	.word	0xa0001000
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020c00 	.word	0x40020c00

080036b4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b0a4      	sub	sp, #144	@ 0x90
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	2284      	movs	r2, #132	@ 0x84
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f013 fb5f 	bl	8016d88 <memset>
  if(hrtc->Instance==RTC)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003708 <HAL_RTC_MspInit+0x54>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d114      	bne.n	80036fe <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036d4:	2320      	movs	r3, #32
 80036d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80036d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036de:	f107 030c 	add.w	r3, r7, #12
 80036e2:	4618      	mov	r0, r3
 80036e4:	f006 fe0a 	bl	800a2fc <HAL_RCCEx_PeriphCLKConfig>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80036ee:	f7ff fb5d 	bl	8002dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_RTC_MspInit+0x58>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	4a05      	ldr	r2, [pc, #20]	@ (800370c <HAL_RTC_MspInit+0x58>)
 80036f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80036fe:	bf00      	nop
 8003700:	3790      	adds	r7, #144	@ 0x90
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40002800 	.word	0x40002800
 800370c:	40023800 	.word	0x40023800

08003710 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	@ 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a25      	ldr	r2, [pc, #148]	@ (80037c4 <HAL_SD_MspInit+0xb4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d144      	bne.n	80037bc <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003732:	4b25      	ldr	r3, [pc, #148]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	4a24      	ldr	r2, [pc, #144]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 8003738:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800373c:	6453      	str	r3, [r2, #68]	@ 0x44
 800373e:	4b22      	ldr	r3, [pc, #136]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374a:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	4a1e      	ldr	r2, [pc, #120]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	6313      	str	r3, [r2, #48]	@ 0x30
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003762:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a18      	ldr	r2, [pc, #96]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	6313      	str	r3, [r2, #48]	@ 0x30
 800376e:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <HAL_SD_MspInit+0xb8>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800377a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800377e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003788:	2303      	movs	r3, #3
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800378c:	230c      	movs	r3, #12
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4619      	mov	r1, r3
 8003796:	480d      	ldr	r0, [pc, #52]	@ (80037cc <HAL_SD_MspInit+0xbc>)
 8003798:	f003 f87a 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800379c:	2304      	movs	r3, #4
 800379e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80037ac:	230c      	movs	r3, #12
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4619      	mov	r1, r3
 80037b6:	4806      	ldr	r0, [pc, #24]	@ (80037d0 <HAL_SD_MspInit+0xc0>)
 80037b8:	f003 f86a 	bl	8006890 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80037bc:	bf00      	nop
 80037be:	3728      	adds	r7, #40	@ 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40020800 	.word	0x40020800
 80037d0:	40020c00 	.word	0x40020c00

080037d4 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b0aa      	sub	sp, #168	@ 0xa8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037ec:	f107 0310 	add.w	r3, r7, #16
 80037f0:	2284      	movs	r2, #132	@ 0x84
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f013 fac7 	bl	8016d88 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8003802:	d143      	bne.n	800388c <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003804:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003808:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800380a:	2364      	movs	r3, #100	@ 0x64
 800380c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800380e:	2302      	movs	r3, #2
 8003810:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003812:	2302      	movs	r3, #2
 8003814:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003816:	2302      	movs	r3, #2
 8003818:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800381a:	2301      	movs	r3, #1
 800381c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800381e:	f107 0310 	add.w	r3, r7, #16
 8003822:	4618      	mov	r0, r3
 8003824:	f006 fd6a 	bl	800a2fc <HAL_RCCEx_PeriphCLKConfig>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800382e:	f7ff fabd 	bl	8002dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003832:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <HAL_SPDIFRX_MspInit+0xc0>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	4a17      	ldr	r2, [pc, #92]	@ (8003894 <HAL_SPDIFRX_MspInit+0xc0>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800383c:	6413      	str	r3, [r2, #64]	@ 0x40
 800383e:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <HAL_SPDIFRX_MspInit+0xc0>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800384a:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <HAL_SPDIFRX_MspInit+0xc0>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	4a11      	ldr	r2, [pc, #68]	@ (8003894 <HAL_SPDIFRX_MspInit+0xc0>)
 8003850:	f043 0308 	orr.w	r3, r3, #8
 8003854:	6313      	str	r3, [r2, #48]	@ 0x30
 8003856:	4b0f      	ldr	r3, [pc, #60]	@ (8003894 <HAL_SPDIFRX_MspInit+0xc0>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003862:	2380      	movs	r3, #128	@ 0x80
 8003864:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	2300      	movs	r3, #0
 8003876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800387a:	2308      	movs	r3, #8
 800387c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003880:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003884:	4619      	mov	r1, r3
 8003886:	4804      	ldr	r0, [pc, #16]	@ (8003898 <HAL_SPDIFRX_MspInit+0xc4>)
 8003888:	f003 f802 	bl	8006890 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 800388c:	bf00      	nop
 800388e:	37a8      	adds	r7, #168	@ 0xa8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	40020c00 	.word	0x40020c00

0800389c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	@ 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a25      	ldr	r2, [pc, #148]	@ (8003950 <HAL_SPI_MspInit+0xb4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d144      	bne.n	8003948 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038be:	4b25      	ldr	r3, [pc, #148]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	4a24      	ldr	r2, [pc, #144]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ca:	4b22      	ldr	r3, [pc, #136]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80038d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ee:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038fa:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <HAL_SPI_MspInit+0xb8>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003906:	2302      	movs	r3, #2
 8003908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003916:	2305      	movs	r3, #5
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800391a:	f107 0314 	add.w	r3, r7, #20
 800391e:	4619      	mov	r1, r3
 8003920:	480d      	ldr	r0, [pc, #52]	@ (8003958 <HAL_SPI_MspInit+0xbc>)
 8003922:	f002 ffb5 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003926:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800392a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003938:	2305      	movs	r3, #5
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	4619      	mov	r1, r3
 8003942:	4806      	ldr	r0, [pc, #24]	@ (800395c <HAL_SPI_MspInit+0xc0>)
 8003944:	f002 ffa4 	bl	8006890 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003948:	bf00      	nop
 800394a:	3728      	adds	r7, #40	@ 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40003800 	.word	0x40003800
 8003954:	40023800 	.word	0x40023800
 8003958:	40022000 	.word	0x40022000
 800395c:	40020400 	.word	0x40020400

08003960 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	@ 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a28 <HAL_TIM_Base_MspInit+0xc8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10c      	bne.n	800398c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003972:	4b2e      	ldr	r3, [pc, #184]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	4a2d      	ldr	r2, [pc, #180]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6453      	str	r3, [r2, #68]	@ 0x44
 800397e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800398a:	e046      	b.n	8003a1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003994:	d10c      	bne.n	80039b0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003996:	4b25      	ldr	r3, [pc, #148]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	4a24      	ldr	r2, [pc, #144]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a2:	4b22      	ldr	r3, [pc, #136]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	69bb      	ldr	r3, [r7, #24]
}
 80039ae:	e034      	b.n	8003a1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a30 <HAL_TIM_Base_MspInit+0xd0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d10c      	bne.n	80039d4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039ba:	4b1c      	ldr	r3, [pc, #112]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039c6:	4b19      	ldr	r3, [pc, #100]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
}
 80039d2:	e022      	b.n	8003a1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a16      	ldr	r2, [pc, #88]	@ (8003a34 <HAL_TIM_Base_MspInit+0xd4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10c      	bne.n	80039f8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039de:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a12      	ldr	r2, [pc, #72]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 80039e4:	f043 0308 	orr.w	r3, r3, #8
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
}
 80039f6:	e010      	b.n	8003a1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003a38 <HAL_TIM_Base_MspInit+0xd8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10b      	bne.n	8003a1a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a02:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a0e:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <HAL_TIM_Base_MspInit+0xcc>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
}
 8003a1a:	bf00      	nop
 8003a1c:	3724      	adds	r7, #36	@ 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40010400 	.word	0x40010400

08003a3c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <HAL_TIM_PWM_MspInit+0x38>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10b      	bne.n	8003a66 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5a:	4b07      	ldr	r3, [pc, #28]	@ (8003a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40001800 	.word	0x40001800
 8003a78:	40023800 	.word	0x40023800

08003a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	@ 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a56      	ldr	r2, [pc, #344]	@ (8003bf4 <HAL_TIM_MspPostInit+0x178>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d11d      	bne.n	8003ada <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	4b56      	ldr	r3, [pc, #344]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	4a55      	ldr	r2, [pc, #340]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aaa:	4b53      	ldr	r3, [pc, #332]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abc:	2302      	movs	r3, #2
 8003abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003acc:	f107 031c 	add.w	r3, r7, #28
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	484a      	ldr	r0, [pc, #296]	@ (8003bfc <HAL_TIM_MspPostInit+0x180>)
 8003ad4:	f002 fedc 	bl	8006890 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003ad8:	e087      	b.n	8003bea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae2:	d11d      	bne.n	8003b20 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	4b44      	ldr	r3, [pc, #272]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	4a43      	ldr	r2, [pc, #268]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af0:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003afc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003b12:	f107 031c 	add.w	r3, r7, #28
 8003b16:	4619      	mov	r1, r3
 8003b18:	4838      	ldr	r0, [pc, #224]	@ (8003bfc <HAL_TIM_MspPostInit+0x180>)
 8003b1a:	f002 feb9 	bl	8006890 <HAL_GPIO_Init>
}
 8003b1e:	e064      	b.n	8003bea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a36      	ldr	r2, [pc, #216]	@ (8003c00 <HAL_TIM_MspPostInit+0x184>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d11c      	bne.n	8003b64 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2a:	4b33      	ldr	r3, [pc, #204]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	4a32      	ldr	r2, [pc, #200]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b36:	4b30      	ldr	r3, [pc, #192]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003b42:	2310      	movs	r3, #16
 8003b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	2302      	movs	r3, #2
 8003b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b52:	2302      	movs	r3, #2
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003b56:	f107 031c 	add.w	r3, r7, #28
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4829      	ldr	r0, [pc, #164]	@ (8003c04 <HAL_TIM_MspPostInit+0x188>)
 8003b5e:	f002 fe97 	bl	8006890 <HAL_GPIO_Init>
}
 8003b62:	e042      	b.n	8003bea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a27      	ldr	r2, [pc, #156]	@ (8003c08 <HAL_TIM_MspPostInit+0x18c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d11c      	bne.n	8003ba8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b6e:	4b22      	ldr	r3, [pc, #136]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	4a21      	ldr	r2, [pc, #132]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b96:	2302      	movs	r3, #2
 8003b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003b9a:	f107 031c 	add.w	r3, r7, #28
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	481a      	ldr	r0, [pc, #104]	@ (8003c0c <HAL_TIM_MspPostInit+0x190>)
 8003ba2:	f002 fe75 	bl	8006890 <HAL_GPIO_Init>
}
 8003ba6:	e020      	b.n	8003bea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a18      	ldr	r2, [pc, #96]	@ (8003c10 <HAL_TIM_MspPostInit+0x194>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d11b      	bne.n	8003bea <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bb2:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	4a10      	ldr	r2, [pc, #64]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf8 <HAL_TIM_MspPostInit+0x17c>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003bca:	2340      	movs	r3, #64	@ 0x40
 8003bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003bda:	2309      	movs	r3, #9
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	4619      	mov	r1, r3
 8003be4:	480b      	ldr	r0, [pc, #44]	@ (8003c14 <HAL_TIM_MspPostInit+0x198>)
 8003be6:	f002 fe53 	bl	8006890 <HAL_GPIO_Init>
}
 8003bea:	bf00      	nop
 8003bec:	3730      	adds	r7, #48	@ 0x30
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40020400 	.word	0x40020400
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40022000 	.word	0x40022000
 8003c10:	40001800 	.word	0x40001800
 8003c14:	40021c00 	.word	0x40021c00

08003c18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b0ae      	sub	sp, #184	@ 0xb8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c30:	f107 0320 	add.w	r3, r7, #32
 8003c34:	2284      	movs	r2, #132	@ 0x84
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f013 f8a5 	bl	8016d88 <memset>
  if(huart->Instance==USART1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a53      	ldr	r2, [pc, #332]	@ (8003d90 <HAL_UART_MspInit+0x178>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d15d      	bne.n	8003d04 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c48:	2340      	movs	r3, #64	@ 0x40
 8003c4a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c50:	f107 0320 	add.w	r3, r7, #32
 8003c54:	4618      	mov	r0, r3
 8003c56:	f006 fb51 	bl	800a2fc <HAL_RCCEx_PeriphCLKConfig>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c60:	f7ff f8a4 	bl	8002dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c64:	4b4b      	ldr	r3, [pc, #300]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c68:	4a4a      	ldr	r2, [pc, #296]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003c6a:	f043 0310 	orr.w	r3, r3, #16
 8003c6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c70:	4b48      	ldr	r3, [pc, #288]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7c:	4b45      	ldr	r3, [pc, #276]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	4a44      	ldr	r2, [pc, #272]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c88:	4b42      	ldr	r3, [pc, #264]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c94:	4b3f      	ldr	r3, [pc, #252]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	4a3e      	ldr	r2, [pc, #248]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cc4:	2307      	movs	r3, #7
 8003cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003cca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4831      	ldr	r0, [pc, #196]	@ (8003d98 <HAL_UART_MspInit+0x180>)
 8003cd2:	f002 fddd 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003cd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cf0:	2307      	movs	r3, #7
 8003cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003cf6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4827      	ldr	r0, [pc, #156]	@ (8003d9c <HAL_UART_MspInit+0x184>)
 8003cfe:	f002 fdc7 	bl	8006890 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d02:	e040      	b.n	8003d86 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a25      	ldr	r2, [pc, #148]	@ (8003da0 <HAL_UART_MspInit+0x188>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d13b      	bne.n	8003d86 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003d0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d12:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003d14:	2300      	movs	r3, #0
 8003d16:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d18:	f107 0320 	add.w	r3, r7, #32
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f006 faed 	bl	800a2fc <HAL_RCCEx_PeriphCLKConfig>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8003d28:	f7ff f840 	bl	8002dac <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	4a18      	ldr	r2, [pc, #96]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003d32:	f043 0320 	orr.w	r3, r3, #32
 8003d36:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d38:	4b16      	ldr	r3, [pc, #88]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d44:	4b13      	ldr	r3, [pc, #76]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	4a12      	ldr	r2, [pc, #72]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d50:	4b10      	ldr	r3, [pc, #64]	@ (8003d94 <HAL_UART_MspInit+0x17c>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003d5c:	23c0      	movs	r3, #192	@ 0xc0
 8003d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d74:	2308      	movs	r3, #8
 8003d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d7a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4808      	ldr	r0, [pc, #32]	@ (8003da4 <HAL_UART_MspInit+0x18c>)
 8003d82:	f002 fd85 	bl	8006890 <HAL_GPIO_Init>
}
 8003d86:	bf00      	nop
 8003d88:	37b8      	adds	r7, #184	@ 0xb8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40011000 	.word	0x40011000
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40020400 	.word	0x40020400
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	40011400 	.word	0x40011400
 8003da4:	40020800 	.word	0x40020800

08003da8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea8 <HAL_FMC_MspInit+0x100>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d16d      	bne.n	8003ea0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003dc4:	4b38      	ldr	r3, [pc, #224]	@ (8003ea8 <HAL_FMC_MspInit+0x100>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003dca:	4b38      	ldr	r3, [pc, #224]	@ (8003eac <HAL_FMC_MspInit+0x104>)
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	4a37      	ldr	r2, [pc, #220]	@ (8003eac <HAL_FMC_MspInit+0x104>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6393      	str	r3, [r2, #56]	@ 0x38
 8003dd6:	4b35      	ldr	r3, [pc, #212]	@ (8003eac <HAL_FMC_MspInit+0x104>)
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003de2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003de6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de8:	2302      	movs	r3, #2
 8003dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df0:	2303      	movs	r3, #3
 8003df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003df4:	230c      	movs	r3, #12
 8003df6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003df8:	1d3b      	adds	r3, r7, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	482c      	ldr	r0, [pc, #176]	@ (8003eb0 <HAL_FMC_MspInit+0x108>)
 8003dfe:	f002 fd47 	bl	8006890 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003e02:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003e06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e10:	2303      	movs	r3, #3
 8003e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e14:	230c      	movs	r3, #12
 8003e16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4825      	ldr	r0, [pc, #148]	@ (8003eb4 <HAL_FMC_MspInit+0x10c>)
 8003e1e:	f002 fd37 	bl	8006890 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003e22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003e26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e30:	2303      	movs	r3, #3
 8003e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e34:	230c      	movs	r3, #12
 8003e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	481e      	ldr	r0, [pc, #120]	@ (8003eb8 <HAL_FMC_MspInit+0x110>)
 8003e3e:	f002 fd27 	bl	8006890 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003e42:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003e46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e50:	2303      	movs	r3, #3
 8003e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e54:	230c      	movs	r3, #12
 8003e56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4817      	ldr	r0, [pc, #92]	@ (8003ebc <HAL_FMC_MspInit+0x114>)
 8003e5e:	f002 fd17 	bl	8006890 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003e62:	2328      	movs	r3, #40	@ 0x28
 8003e64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e72:	230c      	movs	r3, #12
 8003e74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4811      	ldr	r0, [pc, #68]	@ (8003ec0 <HAL_FMC_MspInit+0x118>)
 8003e7c:	f002 fd08 	bl	8006890 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003e80:	2308      	movs	r3, #8
 8003e82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e90:	230c      	movs	r3, #12
 8003e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	4619      	mov	r1, r3
 8003e98:	480a      	ldr	r0, [pc, #40]	@ (8003ec4 <HAL_FMC_MspInit+0x11c>)
 8003e9a:	f002 fcf9 	bl	8006890 <HAL_GPIO_Init>
 8003e9e:	e000      	b.n	8003ea2 <HAL_FMC_MspInit+0xfa>
    return;
 8003ea0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000fe4 	.word	0x20000fe4
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40021800 	.word	0x40021800
 8003eb8:	40020c00 	.word	0x40020c00
 8003ebc:	40021400 	.word	0x40021400
 8003ec0:	40021c00 	.word	0x40021c00
 8003ec4:	40020800 	.word	0x40020800

08003ec8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003ed0:	f7ff ff6a 	bl	8003da8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	@ 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f98 <HAL_SAI_MspInit+0xbc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d124      	bne.n	8003f38 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003eee:	4b2b      	ldr	r3, [pc, #172]	@ (8003f9c <HAL_SAI_MspInit+0xc0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa0 <HAL_SAI_MspInit+0xc4>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	4a29      	ldr	r2, [pc, #164]	@ (8003fa0 <HAL_SAI_MspInit+0xc4>)
 8003efc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f02:	4b27      	ldr	r3, [pc, #156]	@ (8003fa0 <HAL_SAI_MspInit+0xc4>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003f0e:	4b23      	ldr	r3, [pc, #140]	@ (8003f9c <HAL_SAI_MspInit+0xc0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3301      	adds	r3, #1
 8003f14:	4a21      	ldr	r2, [pc, #132]	@ (8003f9c <HAL_SAI_MspInit+0xc0>)
 8003f16:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003f18:	23f0      	movs	r3, #240	@ 0xf0
 8003f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f24:	2300      	movs	r3, #0
 8003f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003f28:	230a      	movs	r3, #10
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	4619      	mov	r1, r3
 8003f32:	481c      	ldr	r0, [pc, #112]	@ (8003fa4 <HAL_SAI_MspInit+0xc8>)
 8003f34:	f002 fcac 	bl	8006890 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa8 <HAL_SAI_MspInit+0xcc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d125      	bne.n	8003f8e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003f42:	4b16      	ldr	r3, [pc, #88]	@ (8003f9c <HAL_SAI_MspInit+0xc0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003f4a:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <HAL_SAI_MspInit+0xc4>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	4a14      	ldr	r2, [pc, #80]	@ (8003fa0 <HAL_SAI_MspInit+0xc4>)
 8003f50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f56:	4b12      	ldr	r3, [pc, #72]	@ (8003fa0 <HAL_SAI_MspInit+0xc4>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <HAL_SAI_MspInit+0xc0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3301      	adds	r3, #1
 8003f68:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <HAL_SAI_MspInit+0xc0>)
 8003f6a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f72:	2302      	movs	r3, #2
 8003f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003f7e:	230a      	movs	r3, #10
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003f82:	f107 0314 	add.w	r3, r7, #20
 8003f86:	4619      	mov	r1, r3
 8003f88:	4808      	ldr	r0, [pc, #32]	@ (8003fac <HAL_SAI_MspInit+0xd0>)
 8003f8a:	f002 fc81 	bl	8006890 <HAL_GPIO_Init>

    }
}
 8003f8e:	bf00      	nop
 8003f90:	3728      	adds	r7, #40	@ 0x28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40015c04 	.word	0x40015c04
 8003f9c:	20000fe8 	.word	0x20000fe8
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40015c24 	.word	0x40015c24
 8003fac:	40021800 	.word	0x40021800

08003fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08e      	sub	sp, #56	@ 0x38
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <HAL_InitTick+0xe0>)
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	4a32      	ldr	r2, [pc, #200]	@ (8004090 <HAL_InitTick+0xe0>)
 8003fc6:	f043 0310 	orr.w	r3, r3, #16
 8003fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fcc:	4b30      	ldr	r3, [pc, #192]	@ (8004090 <HAL_InitTick+0xe0>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fd8:	f107 0210 	add.w	r2, r7, #16
 8003fdc:	f107 0314 	add.w	r3, r7, #20
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f006 f958 	bl	800a298 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ff2:	f006 f929 	bl	800a248 <HAL_RCC_GetPCLK1Freq>
 8003ff6:	6378      	str	r0, [r7, #52]	@ 0x34
 8003ff8:	e004      	b.n	8004004 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ffa:	f006 f925 	bl	800a248 <HAL_RCC_GetPCLK1Freq>
 8003ffe:	4603      	mov	r3, r0
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004006:	4a23      	ldr	r2, [pc, #140]	@ (8004094 <HAL_InitTick+0xe4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	0c9b      	lsrs	r3, r3, #18
 800400e:	3b01      	subs	r3, #1
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004012:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <HAL_InitTick+0xe8>)
 8004014:	4a21      	ldr	r2, [pc, #132]	@ (800409c <HAL_InitTick+0xec>)
 8004016:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004018:	4b1f      	ldr	r3, [pc, #124]	@ (8004098 <HAL_InitTick+0xe8>)
 800401a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800401e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004020:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <HAL_InitTick+0xe8>)
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004026:	4b1c      	ldr	r3, [pc, #112]	@ (8004098 <HAL_InitTick+0xe8>)
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800402c:	4b1a      	ldr	r3, [pc, #104]	@ (8004098 <HAL_InitTick+0xe8>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004032:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <HAL_InitTick+0xe8>)
 8004034:	2200      	movs	r2, #0
 8004036:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004038:	4817      	ldr	r0, [pc, #92]	@ (8004098 <HAL_InitTick+0xe8>)
 800403a:	f008 fdec 	bl	800cc16 <HAL_TIM_Base_Init>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004044:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11b      	bne.n	8004084 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800404c:	4812      	ldr	r0, [pc, #72]	@ (8004098 <HAL_InitTick+0xe8>)
 800404e:	f008 fe39 	bl	800ccc4 <HAL_TIM_Base_Start_IT>
 8004052:	4603      	mov	r3, r0
 8004054:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800405c:	2b00      	cmp	r3, #0
 800405e:	d111      	bne.n	8004084 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004060:	2036      	movs	r0, #54	@ 0x36
 8004062:	f001 f8ed 	bl	8005240 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b0f      	cmp	r3, #15
 800406a:	d808      	bhi.n	800407e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800406c:	2200      	movs	r2, #0
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	2036      	movs	r0, #54	@ 0x36
 8004072:	f001 f8c9 	bl	8005208 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004076:	4a0a      	ldr	r2, [pc, #40]	@ (80040a0 <HAL_InitTick+0xf0>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e002      	b.n	8004084 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004084:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004088:	4618      	mov	r0, r3
 800408a:	3738      	adds	r7, #56	@ 0x38
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	431bde83 	.word	0x431bde83
 8004098:	20000fec 	.word	0x20000fec
 800409c:	40001000 	.word	0x40001000
 80040a0:	2000004c 	.word	0x2000004c

080040a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <NMI_Handler+0x4>

080040ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <HardFault_Handler+0x4>

080040b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <MemManage_Handler+0x4>

080040bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <BusFault_Handler+0x4>

080040c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <UsageFault_Handler+0x4>

080040cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040e0:	4802      	ldr	r0, [pc, #8]	@ (80040ec <TIM6_DAC_IRQHandler+0x10>)
 80040e2:	f008 febe 	bl	800ce62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000fec 	.word	0x20000fec

080040f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80040f4:	4802      	ldr	r0, [pc, #8]	@ (8004100 <OTG_FS_IRQHandler+0x10>)
 80040f6:	f003 f889 	bl	800720c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20009590 	.word	0x20009590

08004104 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004108:	4802      	ldr	r0, [pc, #8]	@ (8004114 <LTDC_IRQHandler+0x10>)
 800410a:	f005 f8a3 	bl	8009254 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000708 	.word	0x20000708

08004118 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800411c:	4802      	ldr	r0, [pc, #8]	@ (8004128 <DMA2D_IRQHandler+0x10>)
 800411e:	f001 fec7 	bl	8005eb0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000570 	.word	0x20000570

0800412c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004130:	4802      	ldr	r0, [pc, #8]	@ (800413c <DMA2_Stream1_IRQHandler+0x10>)
 8004132:	f001 fbfd 	bl	8005930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000f74 	.word	0x20000f74

08004140 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <USART6_IRQHandler+0x2c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d106      	bne.n	8004160 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <USART6_IRQHandler+0x2c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2210      	movs	r2, #16
 8004158:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 800415a:	4804      	ldr	r0, [pc, #16]	@ (800416c <USART6_IRQHandler+0x2c>)
 800415c:	f7fd f810 	bl	8001180 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004160:	4802      	ldr	r0, [pc, #8]	@ (800416c <USART6_IRQHandler+0x2c>)
 8004162:	f00a f8c9 	bl	800e2f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000ca8 	.word	0x20000ca8

08004170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004178:	4a14      	ldr	r2, [pc, #80]	@ (80041cc <_sbrk+0x5c>)
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <_sbrk+0x60>)
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004184:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <_sbrk+0x64>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800418c:	4b11      	ldr	r3, [pc, #68]	@ (80041d4 <_sbrk+0x64>)
 800418e:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <_sbrk+0x68>)
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004192:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <_sbrk+0x64>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d207      	bcs.n	80041b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041a0:	f012 fe34 	bl	8016e0c <__errno>
 80041a4:	4603      	mov	r3, r0
 80041a6:	220c      	movs	r2, #12
 80041a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e009      	b.n	80041c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041b0:	4b08      	ldr	r3, [pc, #32]	@ (80041d4 <_sbrk+0x64>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041b6:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <_sbrk+0x64>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	4a05      	ldr	r2, [pc, #20]	@ (80041d4 <_sbrk+0x64>)
 80041c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20050000 	.word	0x20050000
 80041d0:	00000400 	.word	0x00000400
 80041d4:	20001038 	.word	0x20001038
 80041d8:	20009ab8 	.word	0x20009ab8

080041dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <SystemInit+0x20>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	4a05      	ldr	r2, [pc, #20]	@ (80041fc <SystemInit+0x20>)
 80041e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004204:	f000 f803 	bl	800420e <TIME_Platform_GetCurrentMs>
 8004208:	4603      	mov	r3, r0
}
 800420a:	4618      	mov	r0, r3
 800420c:	bd80      	pop	{r7, pc}

0800420e <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8004212:	f000 fc79 	bl	8004b08 <HAL_GetTick>
 8004216:	4603      	mov	r3, r0
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}

0800421c <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <LOGGER_Connect+0x16>
 800422c:	f04f 33ff 	mov.w	r3, #4294967295
 8004230:	e016      	b.n	8004260 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8004232:	223f      	movs	r2, #63	@ 0x3f
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	480c      	ldr	r0, [pc, #48]	@ (8004268 <LOGGER_Connect+0x4c>)
 8004238:	f012 fdae 	bl	8016d98 <strncpy>
    current_config.server_port = port;
 800423c:	4a0b      	ldr	r2, [pc, #44]	@ (800426c <LOGGER_Connect+0x50>)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f891 	bl	800436c <LOGGER_Platform_Connect>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 800424e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <LOGGER_Connect+0x40>
        logger_connected = true;
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <LOGGER_Connect+0x54>)
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
    }
    return status;
 800425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000007 	.word	0x20000007
 800426c:	20000004 	.word	0x20000004
 8004270:	2000103c 	.word	0x2000103c

08004274 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <LOGGER_Send+0x34>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	f083 0301 	eor.w	r3, r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <LOGGER_Send+0x1c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <LOGGER_Send+0x22>
 8004290:	f04f 33ff 	mov.w	r3, #4294967295
 8004294:	e003      	b.n	800429e <LOGGER_Send+0x2a>
    return LOGGER_Platform_Send(message);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f874 	bl	8004384 <LOGGER_Platform_Send>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	2000103c 	.word	0x2000103c

080042ac <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 80042ac:	b40e      	push	{r1, r2, r3}
 80042ae:	b590      	push	{r4, r7, lr}
 80042b0:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4602      	mov	r2, r0
 80042b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80042bc:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80042c0:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 80042c2:	4b27      	ldr	r3, [pc, #156]	@ (8004360 <LOGGER_SendFormatted+0xb4>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80042ca:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d33c      	bcc.n	800434e <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 80042d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80042d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80042dc:	4a21      	ldr	r2, [pc, #132]	@ (8004364 <LOGGER_SendFormatted+0xb8>)
 80042de:	461c      	mov	r4, r3
 80042e0:	4613      	mov	r3, r2
 80042e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 80042e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80042ec:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80042f6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80042fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fe:	f107 001c 	add.w	r0, r7, #28
 8004302:	4a19      	ldr	r2, [pc, #100]	@ (8004368 <LOGGER_SendFormatted+0xbc>)
 8004304:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004308:	f012 fcaa 	bl	8016c60 <sniprintf>
 800430c:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8004310:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004314:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004318:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800431c:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 800431e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004322:	f107 021c 	add.w	r2, r7, #28
 8004326:	18d0      	adds	r0, r2, r3
 8004328:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800432c:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004330:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004334:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800433e:	f012 fd15 	bl	8016d6c <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 8004342:	f107 031c 	add.w	r3, r7, #28
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ff94 	bl	8004274 <LOGGER_Send>
 800434c:	e000      	b.n	8004350 <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 800434e:	bf00      	nop
}
 8004350:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800435a:	b003      	add	sp, #12
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000004 	.word	0x20000004
 8004364:	080187cc 	.word	0x080187cc
 8004368:	080187dc 	.word	0x080187dc

0800436c <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <LOGGER_Platform_Send+0x14>
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	e01c      	b.n	80043d2 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fb ff43 	bl	8000224 <strlen>
 800439e:	4603      	mov	r3, r0
 80043a0:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	dd12      	ble.n	80043ce <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	480a      	ldr	r0, [pc, #40]	@ (80043dc <LOGGER_Platform_Send+0x58>)
 80043b4:	f009 fd78 	bl	800dea8 <HAL_UART_Transmit>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d107      	bne.n	80043ce <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80043be:	2364      	movs	r3, #100	@ 0x64
 80043c0:	2202      	movs	r2, #2
 80043c2:	4907      	ldr	r1, [pc, #28]	@ (80043e0 <LOGGER_Platform_Send+0x5c>)
 80043c4:	4805      	ldr	r0, [pc, #20]	@ (80043dc <LOGGER_Platform_Send+0x58>)
 80043c6:	f009 fd6f 	bl	800dea8 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e001      	b.n	80043d2 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000c20 	.word	0x20000c20
 80043e0:	080187e0 	.word	0x080187e0

080043e4 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d105      	bne.n	80043fe <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 80043f2:	4913      	ldr	r1, [pc, #76]	@ (8004440 <UART_Connect+0x5c>)
 80043f4:	2003      	movs	r0, #3
 80043f6:	f7ff ff59 	bl	80042ac <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e01c      	b.n	8004438 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4910      	ldr	r1, [pc, #64]	@ (8004444 <UART_Connect+0x60>)
 8004402:	2001      	movs	r0, #1
 8004404:	f7ff ff52 	bl	80042ac <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f8fb 	bl	8004604 <UART_Platform_Connect>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d108      	bne.n	800442a <UART_Connect+0x46>
        uart_connected = true;
 8004418:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <UART_Connect+0x64>)
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	490a      	ldr	r1, [pc, #40]	@ (800444c <UART_Connect+0x68>)
 8004422:	2001      	movs	r0, #1
 8004424:	f7ff ff42 	bl	80042ac <LOGGER_SendFormatted>
 8004428:	e005      	b.n	8004436 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	4908      	ldr	r1, [pc, #32]	@ (8004450 <UART_Connect+0x6c>)
 8004430:	2003      	movs	r0, #3
 8004432:	f7ff ff3b 	bl	80042ac <LOGGER_SendFormatted>
    }

    return status;
 8004436:	7bfb      	ldrb	r3, [r7, #15]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	080187e4 	.word	0x080187e4
 8004444:	08018808 	.word	0x08018808
 8004448:	2000103d 	.word	0x2000103d
 800444c:	08018820 	.word	0x08018820
 8004450:	08018844 	.word	0x08018844

08004454 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 800445c:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <UART_Send+0x70>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	f083 0301 	eor.w	r3, r3, #1
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 800446a:	4917      	ldr	r1, [pc, #92]	@ (80044c8 <UART_Send+0x74>)
 800446c:	2003      	movs	r0, #3
 800446e:	f7ff ff1d 	bl	80042ac <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e022      	b.n	80044bc <UART_Send+0x68>
    }

    if (data == NULL) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 800447c:	4913      	ldr	r1, [pc, #76]	@ (80044cc <UART_Send+0x78>)
 800447e:	2003      	movs	r0, #3
 8004480:	f7ff ff14 	bl	80042ac <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e019      	b.n	80044bc <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4911      	ldr	r1, [pc, #68]	@ (80044d0 <UART_Send+0x7c>)
 800448c:	2000      	movs	r0, #0
 800448e:	f7ff ff0d 	bl	80042ac <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f99e 	bl	80047d4 <UART_Platform_Send>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	490b      	ldr	r1, [pc, #44]	@ (80044d4 <UART_Send+0x80>)
 80044a6:	2000      	movs	r0, #0
 80044a8:	f7ff ff00 	bl	80042ac <LOGGER_SendFormatted>
 80044ac:	e005      	b.n	80044ba <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4909      	ldr	r1, [pc, #36]	@ (80044d8 <UART_Send+0x84>)
 80044b4:	2003      	movs	r0, #3
 80044b6:	f7ff fef9 	bl	80042ac <LOGGER_SendFormatted>
    }

    return status;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	2000103d 	.word	0x2000103d
 80044c8:	08018870 	.word	0x08018870
 80044cc:	08018894 	.word	0x08018894
 80044d0:	080188b4 	.word	0x080188b4
 80044d4:	080188cc 	.word	0x080188cc
 80044d8:	080188e8 	.word	0x080188e8

080044dc <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 80044e8:	4b22      	ldr	r3, [pc, #136]	@ (8004574 <UART_Receive+0x98>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	f083 0301 	eor.w	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 80044f6:	4920      	ldr	r1, [pc, #128]	@ (8004578 <UART_Receive+0x9c>)
 80044f8:	2003      	movs	r0, #3
 80044fa:	f7ff fed7 	bl	80042ac <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e034      	b.n	800456c <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <UART_Receive+0x38>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	dd02      	ble.n	8004514 <UART_Receive+0x38>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8004514:	4919      	ldr	r1, [pc, #100]	@ (800457c <UART_Receive+0xa0>)
 8004516:	2003      	movs	r0, #3
 8004518:	f7ff fec8 	bl	80042ac <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e025      	b.n	800456c <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	4917      	ldr	r1, [pc, #92]	@ (8004580 <UART_Receive+0xa4>)
 8004524:	2000      	movs	r0, #0
 8004526:	f7ff fec1 	bl	80042ac <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f98c 	bl	800484c <UART_Platform_Receive>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	490f      	ldr	r1, [pc, #60]	@ (8004584 <UART_Receive+0xa8>)
 8004546:	2000      	movs	r0, #0
 8004548:	f7ff feb0 	bl	80042ac <LOGGER_SendFormatted>
 800454c:	e00d      	b.n	800456a <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d104      	bne.n	800455e <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8004554:	490c      	ldr	r1, [pc, #48]	@ (8004588 <UART_Receive+0xac>)
 8004556:	2000      	movs	r0, #0
 8004558:	f7ff fea8 	bl	80042ac <LOGGER_SendFormatted>
 800455c:	e005      	b.n	800456a <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	461a      	mov	r2, r3
 8004562:	490a      	ldr	r1, [pc, #40]	@ (800458c <UART_Receive+0xb0>)
 8004564:	2003      	movs	r0, #3
 8004566:	f7ff fea1 	bl	80042ac <LOGGER_SendFormatted>
    }

    return status;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	2000103d 	.word	0x2000103d
 8004578:	0801890c 	.word	0x0801890c
 800457c:	08018934 	.word	0x08018934
 8004580:	08018960 	.word	0x08018960
 8004584:	08018988 	.word	0x08018988
 8004588:	080189a8 	.word	0x080189a8
 800458c:	080189c0 	.word	0x080189c0

08004590 <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
    return uart_connected;
 8004594:	4b03      	ldr	r3, [pc, #12]	@ (80045a4 <UART_IsConnected+0x14>)
 8004596:	781b      	ldrb	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	2000103d 	.word	0x2000103d

080045a8 <flush_rx_buffer>:
// 전역 변수
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80045b2:	e007      	b.n	80045c4 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 80045b4:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <flush_rx_buffer+0x58>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3301      	adds	r3, #1
 80045c2:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <flush_rx_buffer+0x58>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d106      	bne.n	80045e0 <flush_rx_buffer+0x38>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b63      	cmp	r3, #99	@ 0x63
 80045d6:	dded      	ble.n	80045b4 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80045d8:	e002      	b.n	80045e0 <flush_rx_buffer+0x38>
        flush_count++;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3301      	adds	r3, #1
 80045de:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80045e0:	1cf9      	adds	r1, r7, #3
 80045e2:	2301      	movs	r3, #1
 80045e4:	2201      	movs	r2, #1
 80045e6:	4806      	ldr	r0, [pc, #24]	@ (8004600 <flush_rx_buffer+0x58>)
 80045e8:	f009 fce7 	bl	800dfba <HAL_UART_Receive>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <flush_rx_buffer+0x50>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b63      	cmp	r3, #99	@ 0x63
 80045f6:	ddf0      	ble.n	80045da <flush_rx_buffer+0x32>
    }
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000ca8 	.word	0x20000ca8

08004604 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 800460c:	4b5b      	ldr	r3, [pc, #364]	@ (800477c <UART_Platform_Connect+0x178>)
 800460e:	2201      	movs	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8004612:	4b5b      	ldr	r3, [pc, #364]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004614:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004616:	4b5a      	ldr	r3, [pc, #360]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461c:	4959      	ldr	r1, [pc, #356]	@ (8004784 <UART_Platform_Connect+0x180>)
 800461e:	2001      	movs	r0, #1
 8004620:	f7ff fe44 	bl	80042ac <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8004624:	4b56      	ldr	r3, [pc, #344]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00e      	beq.n	800464a <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 800462c:	4956      	ldr	r1, [pc, #344]	@ (8004788 <UART_Platform_Connect+0x184>)
 800462e:	2001      	movs	r0, #1
 8004630:	f7ff fe3c 	bl	80042ac <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004634:	4b52      	ldr	r3, [pc, #328]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	4952      	ldr	r1, [pc, #328]	@ (800478c <UART_Platform_Connect+0x188>)
 8004642:	2001      	movs	r0, #1
 8004644:	f7ff fe32 	bl	80042ac <LOGGER_SendFormatted>
 8004648:	e018      	b.n	800467c <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 800464a:	4951      	ldr	r1, [pc, #324]	@ (8004790 <UART_Platform_Connect+0x18c>)
 800464c:	2003      	movs	r0, #3
 800464e:	f7ff fe2d 	bl	80042ac <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004652:	4b4b      	ldr	r3, [pc, #300]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004654:	4a4f      	ldr	r2, [pc, #316]	@ (8004794 <UART_Platform_Connect+0x190>)
 8004656:	675a      	str	r2, [r3, #116]	@ 0x74
 8004658:	4b4e      	ldr	r3, [pc, #312]	@ (8004794 <UART_Platform_Connect+0x190>)
 800465a:	4a49      	ldr	r2, [pc, #292]	@ (8004780 <UART_Platform_Connect+0x17c>)
 800465c:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 800465e:	4b48      	ldr	r3, [pc, #288]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004662:	2b00      	cmp	r3, #0
 8004664:	d004      	beq.n	8004670 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8004666:	494c      	ldr	r1, [pc, #304]	@ (8004798 <UART_Platform_Connect+0x194>)
 8004668:	2001      	movs	r0, #1
 800466a:	f7ff fe1f 	bl	80042ac <LOGGER_SendFormatted>
 800466e:	e005      	b.n	800467c <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8004670:	494a      	ldr	r1, [pc, #296]	@ (800479c <UART_Platform_Connect+0x198>)
 8004672:	2003      	movs	r0, #3
 8004674:	f7ff fe1a 	bl	80042ac <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e07a      	b.n	8004772 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 800467c:	4b48      	ldr	r3, [pc, #288]	@ (80047a0 <UART_Platform_Connect+0x19c>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8004684:	483e      	ldr	r0, [pc, #248]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004686:	f009 fda4 	bl	800e1d2 <HAL_UART_DMAStop>
        dma_receiving = false;
 800468a:	4b45      	ldr	r3, [pc, #276]	@ (80047a0 <UART_Platform_Connect+0x19c>)
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8004690:	4944      	ldr	r1, [pc, #272]	@ (80047a4 <UART_Platform_Connect+0x1a0>)
 8004692:	2001      	movs	r0, #1
 8004694:	f7ff fe0a 	bl	80042ac <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8004698:	4b39      	ldr	r3, [pc, #228]	@ (8004780 <UART_Platform_Connect+0x17c>)
 800469a:	2220      	movs	r2, #32
 800469c:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 800469e:	4b38      	ldr	r3, [pc, #224]	@ (8004780 <UART_Platform_Connect+0x17c>)
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 80046a6:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <UART_Platform_Connect+0x17c>)
 80046a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d026      	beq.n	80046fc <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 80046ae:	4b34      	ldr	r3, [pc, #208]	@ (8004780 <UART_Platform_Connect+0x17c>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d01a      	beq.n	80046f2 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 80046bc:	493a      	ldr	r1, [pc, #232]	@ (80047a8 <UART_Platform_Connect+0x1a4>)
 80046be:	2001      	movs	r0, #1
 80046c0:	f7ff fdf4 	bl	80042ac <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 80046c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004780 <UART_Platform_Connect+0x17c>)
 80046c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 ffe1 	bl	8005690 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 80046ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004780 <UART_Platform_Connect+0x17c>)
 80046d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff2e 	bl	8005534 <HAL_DMA_Init>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 80046de:	4933      	ldr	r1, [pc, #204]	@ (80047ac <UART_Platform_Connect+0x1a8>)
 80046e0:	2003      	movs	r0, #3
 80046e2:	f7ff fde3 	bl	80042ac <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e043      	b.n	8004772 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 80046ea:	4931      	ldr	r1, [pc, #196]	@ (80047b0 <UART_Platform_Connect+0x1ac>)
 80046ec:	2001      	movs	r0, #1
 80046ee:	f7ff fddd 	bl	80042ac <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80046f2:	4b23      	ldr	r3, [pc, #140]	@ (8004780 <UART_Platform_Connect+0x17c>)
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 80046fc:	f7ff ff54 	bl	80045a8 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8004700:	4b2c      	ldr	r3, [pc, #176]	@ (80047b4 <UART_Platform_Connect+0x1b0>)
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8004706:	4b2c      	ldr	r3, [pc, #176]	@ (80047b8 <UART_Platform_Connect+0x1b4>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <UART_Platform_Connect+0x1b8>)
 800470e:	2200      	movs	r2, #0
 8004710:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004716:	2100      	movs	r1, #0
 8004718:	4829      	ldr	r0, [pc, #164]	@ (80047c0 <UART_Platform_Connect+0x1bc>)
 800471a:	f012 fb35 	bl	8016d88 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 800471e:	4929      	ldr	r1, [pc, #164]	@ (80047c4 <UART_Platform_Connect+0x1c0>)
 8004720:	2001      	movs	r0, #1
 8004722:	f7ff fdc3 	bl	80042ac <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800472a:	4925      	ldr	r1, [pc, #148]	@ (80047c0 <UART_Platform_Connect+0x1bc>)
 800472c:	4814      	ldr	r0, [pc, #80]	@ (8004780 <UART_Platform_Connect+0x17c>)
 800472e:	f009 fd0c 	bl	800e14a <HAL_UART_Receive_DMA>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 800473c:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <UART_Platform_Connect+0x19c>)
 800473e:	2201      	movs	r2, #1
 8004740:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8004742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004746:	4920      	ldr	r1, [pc, #128]	@ (80047c8 <UART_Platform_Connect+0x1c4>)
 8004748:	2001      	movs	r0, #1
 800474a:	f7ff fdaf 	bl	80042ac <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e00f      	b.n	8004772 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	461a      	mov	r2, r3
 8004756:	491d      	ldr	r1, [pc, #116]	@ (80047cc <UART_Platform_Connect+0x1c8>)
 8004758:	2003      	movs	r0, #3
 800475a:	f7ff fda7 	bl	80042ac <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 800475e:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004760:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004762:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <UART_Platform_Connect+0x17c>)
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004768:	4919      	ldr	r1, [pc, #100]	@ (80047d0 <UART_Platform_Connect+0x1cc>)
 800476a:	2003      	movs	r0, #3
 800476c:	f7ff fd9e 	bl	80042ac <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004770:	2301      	movs	r3, #1
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	2000103e 	.word	0x2000103e
 8004780:	20000ca8 	.word	0x20000ca8
 8004784:	08018bbc 	.word	0x08018bbc
 8004788:	08018be8 	.word	0x08018be8
 800478c:	08018c10 	.word	0x08018c10
 8004790:	08018c2c 	.word	0x08018c2c
 8004794:	20000f74 	.word	0x20000f74
 8004798:	08018c68 	.word	0x08018c68
 800479c:	08018c94 	.word	0x08018c94
 80047a0:	2000103f 	.word	0x2000103f
 80047a4:	08018cc0 	.word	0x08018cc0
 80047a8:	08018cec 	.word	0x08018cec
 80047ac:	08018d1c 	.word	0x08018d1c
 80047b0:	08018d48 	.word	0x08018d48
 80047b4:	20000fd4 	.word	0x20000fd4
 80047b8:	20000fd5 	.word	0x20000fd5
 80047bc:	20000fd6 	.word	0x20000fd6
 80047c0:	20000d6c 	.word	0x20000d6c
 80047c4:	08018d74 	.word	0x08018d74
 80047c8:	08018d9c 	.word	0x08018d9c
 80047cc:	08018de0 	.word	0x08018de0
 80047d0:	08018e1c 	.word	0x08018e1c

080047d4 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <UART_Platform_Send+0x1c>
 80047e2:	4b17      	ldr	r3, [pc, #92]	@ (8004840 <UART_Platform_Send+0x6c>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	f083 0301 	eor.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <UART_Platform_Send+0x20>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e021      	b.n	8004838 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fb fd15 	bl	8000224 <strlen>
 80047fa:	4603      	mov	r3, r0
 80047fc:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <UART_Platform_Send+0x34>
 8004804:	2300      	movs	r3, #0
 8004806:	e017      	b.n	8004838 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8004808:	f7ff fece 	bl	80045a8 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	b29a      	uxth	r2, r3
 8004810:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	480b      	ldr	r0, [pc, #44]	@ (8004844 <UART_Platform_Send+0x70>)
 8004818:	f009 fb46 	bl	800dea8 <HAL_UART_Transmit>
 800481c:	4603      	mov	r3, r0
 800481e:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8004820:	7afb      	ldrb	r3, [r7, #11]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e006      	b.n	8004838 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 800482a:	7afb      	ldrb	r3, [r7, #11]
 800482c:	461a      	mov	r2, r3
 800482e:	4906      	ldr	r1, [pc, #24]	@ (8004848 <UART_Platform_Send+0x74>)
 8004830:	2003      	movs	r0, #3
 8004832:	f7ff fd3b 	bl	80042ac <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004836:	2301      	movs	r3, #1
    }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	2000103e 	.word	0x2000103e
 8004844:	20000ca8 	.word	0x20000ca8
 8004848:	08018e7c 	.word	0x08018e7c

0800484c <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	@ 0x28
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <UART_Platform_Receive+0x26>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d006      	beq.n	8004872 <UART_Platform_Receive+0x26>
 8004864:	4b74      	ldr	r3, [pc, #464]	@ (8004a38 <UART_Platform_Receive+0x1ec>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f083 0301 	eor.w	r3, r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0dc      	b.n	8004a30 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	dc04      	bgt.n	8004886 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0d4      	b.n	8004a30 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 800488c:	4b6b      	ldr	r3, [pc, #428]	@ (8004a3c <UART_Platform_Receive+0x1f0>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f083 0301 	eor.w	r3, r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0c8      	b.n	8004a30 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 800489e:	4b68      	ldr	r3, [pc, #416]	@ (8004a40 <UART_Platform_Receive+0x1f4>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 80048a8:	4b65      	ldr	r3, [pc, #404]	@ (8004a40 <UART_Platform_Receive+0x1f4>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 80048ae:	4965      	ldr	r1, [pc, #404]	@ (8004a44 <UART_Platform_Receive+0x1f8>)
 80048b0:	2002      	movs	r0, #2
 80048b2:	f7ff fcfb 	bl	80042ac <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0ba      	b.n	8004a30 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 80048ba:	4b63      	ldr	r3, [pc, #396]	@ (8004a48 <UART_Platform_Receive+0x1fc>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80b4 	beq.w	8004a2e <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 80048c6:	4b60      	ldr	r3, [pc, #384]	@ (8004a48 <UART_Platform_Receive+0x1fc>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 80048cc:	4b5f      	ldr	r3, [pc, #380]	@ (8004a4c <UART_Platform_Receive+0x200>)
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	837b      	strh	r3, [r7, #26]
        LOG_INFO("[UART_STM32] DMA received %d bytes", received_length);
 80048d2:	8b7b      	ldrh	r3, [r7, #26]
 80048d4:	461a      	mov	r2, r3
 80048d6:	495e      	ldr	r1, [pc, #376]	@ (8004a50 <UART_Platform_Receive+0x204>)
 80048d8:	2001      	movs	r0, #1
 80048da:	f7ff fce7 	bl	80042ac <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 80048de:	8b7b      	ldrh	r3, [r7, #26]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 809e 	beq.w	8004a22 <UART_Platform_Receive+0x1d6>
 80048e6:	8b7b      	ldrh	r3, [r7, #26]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	f340 8099 	ble.w	8004a22 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 80048f0:	8b7b      	ldrh	r3, [r7, #26]
 80048f2:	461a      	mov	r2, r3
 80048f4:	4957      	ldr	r1, [pc, #348]	@ (8004a54 <UART_Platform_Receive+0x208>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f012 fab4 	bl	8016e64 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 80048fc:	8b7b      	ldrh	r3, [r7, #26]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8004906:	8b7a      	ldrh	r2, [r7, #26]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_INFO("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 800490c:	8b7a      	ldrh	r2, [r7, #26]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4951      	ldr	r1, [pc, #324]	@ (8004a58 <UART_Platform_Receive+0x20c>)
 8004912:	2001      	movs	r0, #1
 8004914:	f7ff fcca 	bl	80042ac <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8004918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800491c:	2100      	movs	r1, #0
 800491e:	484d      	ldr	r0, [pc, #308]	@ (8004a54 <UART_Platform_Receive+0x208>)
 8004920:	f012 fa32 	bl	8016d88 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8004924:	484d      	ldr	r0, [pc, #308]	@ (8004a5c <UART_Platform_Receive+0x210>)
 8004926:	f009 fc54 	bl	800e1d2 <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 800492a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a5c <UART_Platform_Receive+0x210>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8004932:	4b4a      	ldr	r3, [pc, #296]	@ (8004a5c <UART_Platform_Receive+0x210>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2202      	movs	r2, #2
 8004938:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 800493a:	4b48      	ldr	r3, [pc, #288]	@ (8004a5c <UART_Platform_Receive+0x210>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2204      	movs	r2, #4
 8004940:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8004942:	4b46      	ldr	r3, [pc, #280]	@ (8004a5c <UART_Platform_Receive+0x210>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2208      	movs	r2, #8
 8004948:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 800494a:	4b44      	ldr	r3, [pc, #272]	@ (8004a5c <UART_Platform_Receive+0x210>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2210      	movs	r2, #16
 8004950:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8004952:	4b42      	ldr	r3, [pc, #264]	@ (8004a5c <UART_Platform_Receive+0x210>)
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	2b00      	cmp	r3, #0
 8004958:	d025      	beq.n	80049a6 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 800495a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800495e:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004960:	e00b      	b.n	800497a <UART_Platform_Receive+0x12e>
                    timeout--;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3b01      	subs	r3, #1
 8004966:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e002      	b.n	8004974 <UART_Platform_Receive+0x128>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b63      	cmp	r3, #99	@ 0x63
 8004978:	ddf9      	ble.n	800496e <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 800497a:	4b38      	ldr	r3, [pc, #224]	@ (8004a5c <UART_Platform_Receive+0x210>)
 800497c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d002      	beq.n	800498e <UART_Platform_Receive+0x142>
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	dce9      	bgt.n	8004962 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d108      	bne.n	80049a6 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8004994:	4932      	ldr	r1, [pc, #200]	@ (8004a60 <UART_Platform_Receive+0x214>)
 8004996:	2002      	movs	r0, #2
 8004998:	f7ff fc88 	bl	80042ac <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 800499c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a5c <UART_Platform_Receive+0x210>)
 800499e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 80049a6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a5c <UART_Platform_Receive+0x210>)
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 80049ae:	4b2b      	ldr	r3, [pc, #172]	@ (8004a5c <UART_Platform_Receive+0x210>)
 80049b0:	2220      	movs	r2, #32
 80049b2:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	e002      	b.n	80049c0 <UART_Platform_Receive+0x174>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80049c6:	4293      	cmp	r3, r2
 80049c8:	ddf7      	ble.n	80049ba <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80049ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049ce:	4921      	ldr	r1, [pc, #132]	@ (8004a54 <UART_Platform_Receive+0x208>)
 80049d0:	4822      	ldr	r0, [pc, #136]	@ (8004a5c <UART_Platform_Receive+0x210>)
 80049d2:	f009 fbba 	bl	800e14a <HAL_UART_Receive_DMA>
 80049d6:	4603      	mov	r3, r0
 80049d8:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 80049da:	7e7b      	ldrb	r3, [r7, #25]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d104      	bne.n	80049ea <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 80049e0:	4920      	ldr	r1, [pc, #128]	@ (8004a64 <UART_Platform_Receive+0x218>)
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff fc62 	bl	80042ac <LOGGER_SendFormatted>
 80049e8:	e019      	b.n	8004a1e <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 80049ea:	7e7a      	ldrb	r2, [r7, #25]
 80049ec:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <UART_Platform_Receive+0x210>)
 80049ee:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80049f0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a5c <UART_Platform_Receive+0x210>)
 80049f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	460b      	mov	r3, r1
 80049fa:	491b      	ldr	r1, [pc, #108]	@ (8004a68 <UART_Platform_Receive+0x21c>)
 80049fc:	2002      	movs	r0, #2
 80049fe:	f7ff fc55 	bl	80042ac <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8004a02:	4b16      	ldr	r3, [pc, #88]	@ (8004a5c <UART_Platform_Receive+0x210>)
 8004a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8004a0a:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <UART_Platform_Receive+0x210>)
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	4915      	ldr	r1, [pc, #84]	@ (8004a6c <UART_Platform_Receive+0x220>)
 8004a18:	2002      	movs	r0, #2
 8004a1a:	f7ff fc47 	bl	80042ac <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e006      	b.n	8004a30 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8004a22:	8b7a      	ldrh	r2, [r7, #26]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4912      	ldr	r1, [pc, #72]	@ (8004a70 <UART_Platform_Receive+0x224>)
 8004a28:	2002      	movs	r0, #2
 8004a2a:	f7ff fc3f 	bl	80042ac <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8004a2e:	2302      	movs	r3, #2
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	2000103e 	.word	0x2000103e
 8004a3c:	2000103f 	.word	0x2000103f
 8004a40:	20000fd5 	.word	0x20000fd5
 8004a44:	08018eb4 	.word	0x08018eb4
 8004a48:	20000fd4 	.word	0x20000fd4
 8004a4c:	20000fd6 	.word	0x20000fd6
 8004a50:	08018ee4 	.word	0x08018ee4
 8004a54:	20000d6c 	.word	0x20000d6c
 8004a58:	08018f08 	.word	0x08018f08
 8004a5c:	20000ca8 	.word	0x20000ca8
 8004a60:	08018f34 	.word	0x08018f34
 8004a64:	08018f70 	.word	0x08018f70
 8004a68:	08018fa0 	.word	0x08018fa0
 8004a6c:	08018fe8 	.word	0x08018fe8
 8004a70:	08019004 	.word	0x08019004

08004a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004aac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a78:	f7ff fbb0 	bl	80041dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a7c:	480c      	ldr	r0, [pc, #48]	@ (8004ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a7e:	490d      	ldr	r1, [pc, #52]	@ (8004ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a80:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a84:	e002      	b.n	8004a8c <LoopCopyDataInit>

08004a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a8a:	3304      	adds	r3, #4

08004a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a90:	d3f9      	bcc.n	8004a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a92:	4a0a      	ldr	r2, [pc, #40]	@ (8004abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a94:	4c0a      	ldr	r4, [pc, #40]	@ (8004ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a98:	e001      	b.n	8004a9e <LoopFillZerobss>

08004a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a9c:	3204      	adds	r2, #4

08004a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aa0:	d3fb      	bcc.n	8004a9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004aa2:	f012 f9b9 	bl	8016e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aa6:	f7fc fbff 	bl	80012a8 <main>
  bx  lr    
 8004aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004aac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ab4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004ab8:	0801910c 	.word	0x0801910c
  ldr r2, =_sbss
 8004abc:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004ac0:	20009ab8 	.word	0x20009ab8

08004ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ac4:	e7fe      	b.n	8004ac4 <ADC_IRQHandler>

08004ac6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aca:	2003      	movs	r0, #3
 8004acc:	f000 fb91 	bl	80051f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f7ff fa6d 	bl	8003fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ad6:	f7fe f9cf 	bl	8002e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <HAL_IncTick+0x20>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_IncTick+0x24>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4413      	add	r3, r2
 8004af0:	4a04      	ldr	r2, [pc, #16]	@ (8004b04 <HAL_IncTick+0x24>)
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000050 	.word	0x20000050
 8004b04:	20001040 	.word	0x20001040

08004b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <HAL_GetTick+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20001040 	.word	0x20001040

08004b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b28:	f7ff ffee 	bl	8004b08 <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d005      	beq.n	8004b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <HAL_Delay+0x44>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b46:	bf00      	nop
 8004b48:	f7ff ffde 	bl	8004b08 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d8f7      	bhi.n	8004b48 <HAL_Delay+0x28>
  {
  }
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000050 	.word	0x20000050

08004b68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e031      	b.n	8004be2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fe f99e 	bl	8002ec8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d116      	bne.n	8004bd4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004baa:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <HAL_ADC_Init+0x84>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	f043 0202 	orr.w	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f974 	bl	8004ea4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	f043 0201 	orr.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004bd2:	e001      	b.n	8004bd8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	ffffeefd 	.word	0xffffeefd

08004bf0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x1c>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e13a      	b.n	8004e82 <HAL_ADC_ConfigChannel+0x292>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b09      	cmp	r3, #9
 8004c1a:	d93a      	bls.n	8004c92 <HAL_ADC_ConfigChannel+0xa2>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c24:	d035      	beq.n	8004c92 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68d9      	ldr	r1, [r3, #12]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	4613      	mov	r3, r2
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	4413      	add	r3, r2
 8004c3a:	3b1e      	subs	r3, #30
 8004c3c:	2207      	movs	r2, #7
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43da      	mvns	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	400a      	ands	r2, r1
 8004c4a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a8f      	ldr	r2, [pc, #572]	@ (8004e90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10a      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68d9      	ldr	r1, [r3, #12]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	061a      	lsls	r2, r3, #24
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c6a:	e039      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68d9      	ldr	r1, [r3, #12]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4403      	add	r3, r0
 8004c84:	3b1e      	subs	r3, #30
 8004c86:	409a      	lsls	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c90:	e026      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6919      	ldr	r1, [r3, #16]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2207      	movs	r2, #7
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43da      	mvns	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6919      	ldr	r1, [r3, #16]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4618      	mov	r0, r3
 8004ccc:	4603      	mov	r3, r0
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4403      	add	r3, r0
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b06      	cmp	r3, #6
 8004ce6:	d824      	bhi.n	8004d32 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3b05      	subs	r3, #5
 8004cfa:	221f      	movs	r2, #31
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43da      	mvns	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	400a      	ands	r2, r1
 8004d08:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4618      	mov	r0, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	3b05      	subs	r3, #5
 8004d24:	fa00 f203 	lsl.w	r2, r0, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d30:	e04c      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d824      	bhi.n	8004d84 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	3b23      	subs	r3, #35	@ 0x23
 8004d4c:	221f      	movs	r2, #31
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43da      	mvns	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	400a      	ands	r2, r1
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4618      	mov	r0, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	3b23      	subs	r3, #35	@ 0x23
 8004d76:	fa00 f203 	lsl.w	r2, r0, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d82:	e023      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	3b41      	subs	r3, #65	@ 0x41
 8004d96:	221f      	movs	r2, #31
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43da      	mvns	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	400a      	ands	r2, r1
 8004da4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	4618      	mov	r0, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3b41      	subs	r3, #65	@ 0x41
 8004dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a30      	ldr	r2, [pc, #192]	@ (8004e94 <HAL_ADC_ConfigChannel+0x2a4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10a      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x1fc>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dde:	d105      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004de0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004de6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004dea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a28      	ldr	r2, [pc, #160]	@ (8004e94 <HAL_ADC_ConfigChannel+0x2a4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10f      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x226>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b12      	cmp	r3, #18
 8004dfc:	d10b      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004dfe:	4b26      	ldr	r3, [pc, #152]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4a25      	ldr	r2, [pc, #148]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e08:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004e0a:	4b23      	ldr	r3, [pc, #140]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	4a22      	ldr	r2, [pc, #136]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e94 <HAL_ADC_ConfigChannel+0x2a4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d12b      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x288>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1a      	ldr	r2, [pc, #104]	@ (8004e90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <HAL_ADC_ConfigChannel+0x242>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b11      	cmp	r3, #17
 8004e30:	d122      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004e32:	4b19      	ldr	r3, [pc, #100]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4a18      	ldr	r2, [pc, #96]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e38:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004e3c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004e3e:	4b16      	ldr	r3, [pc, #88]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4a15      	ldr	r2, [pc, #84]	@ (8004e98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a10      	ldr	r2, [pc, #64]	@ (8004e90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d111      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004e54:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_ADC_ConfigChannel+0x2ac>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a11      	ldr	r2, [pc, #68]	@ (8004ea0 <HAL_ADC_ConfigChannel+0x2b0>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	0c9a      	lsrs	r2, r3, #18
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004e6a:	e002      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f9      	bne.n	8004e6c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	10000012 	.word	0x10000012
 8004e94:	40012000 	.word	0x40012000
 8004e98:	40012300 	.word	0x40012300
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	431bde83 	.word	0x431bde83

08004ea4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004eac:	4b78      	ldr	r3, [pc, #480]	@ (8005090 <ADC_Init+0x1ec>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a77      	ldr	r2, [pc, #476]	@ (8005090 <ADC_Init+0x1ec>)
 8004eb2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004eb6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004eb8:	4b75      	ldr	r3, [pc, #468]	@ (8005090 <ADC_Init+0x1ec>)
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4973      	ldr	r1, [pc, #460]	@ (8005090 <ADC_Init+0x1ec>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	021a      	lsls	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004ef8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6899      	ldr	r1, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	4a58      	ldr	r2, [pc, #352]	@ (8005094 <ADC_Init+0x1f0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d022      	beq.n	8004f7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6899      	ldr	r1, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6899      	ldr	r1, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	e00f      	b.n	8004f9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0202 	bic.w	r2, r2, #2
 8004fac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6899      	ldr	r1, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	005a      	lsls	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004fea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	035a      	lsls	r2, r3, #13
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	e007      	b.n	8005014 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005012:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005022:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	3b01      	subs	r3, #1
 8005030:	051a      	lsls	r2, r3, #20
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6899      	ldr	r1, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005056:	025a      	lsls	r2, r3, #9
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800506e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6899      	ldr	r1, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	029a      	lsls	r2, r3, #10
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40012300 	.word	0x40012300
 8005094:	0f000001 	.word	0x0f000001

08005098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050a8:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <__NVIC_SetPriorityGrouping+0x40>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050b4:	4013      	ands	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050c0:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <__NVIC_SetPriorityGrouping+0x44>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050c6:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <__NVIC_SetPriorityGrouping+0x40>)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	60d3      	str	r3, [r2, #12]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000ed00 	.word	0xe000ed00
 80050dc:	05fa0000 	.word	0x05fa0000

080050e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050e4:	4b04      	ldr	r3, [pc, #16]	@ (80050f8 <__NVIC_GetPriorityGrouping+0x18>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	f003 0307 	and.w	r3, r3, #7
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db0b      	blt.n	8005126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	f003 021f 	and.w	r2, r3, #31
 8005114:	4907      	ldr	r1, [pc, #28]	@ (8005134 <__NVIC_EnableIRQ+0x38>)
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	2001      	movs	r0, #1
 800511e:	fa00 f202 	lsl.w	r2, r0, r2
 8005122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000e100 	.word	0xe000e100

08005138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	6039      	str	r1, [r7, #0]
 8005142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005148:	2b00      	cmp	r3, #0
 800514a:	db0a      	blt.n	8005162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	490c      	ldr	r1, [pc, #48]	@ (8005184 <__NVIC_SetPriority+0x4c>)
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	440b      	add	r3, r1
 800515c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005160:	e00a      	b.n	8005178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4908      	ldr	r1, [pc, #32]	@ (8005188 <__NVIC_SetPriority+0x50>)
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	3b04      	subs	r3, #4
 8005170:	0112      	lsls	r2, r2, #4
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	440b      	add	r3, r1
 8005176:	761a      	strb	r2, [r3, #24]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	e000e100 	.word	0xe000e100
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	@ 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f1c3 0307 	rsb	r3, r3, #7
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	bf28      	it	cs
 80051aa:	2304      	movcs	r3, #4
 80051ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2b06      	cmp	r3, #6
 80051b4:	d902      	bls.n	80051bc <NVIC_EncodePriority+0x30>
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3b03      	subs	r3, #3
 80051ba:	e000      	b.n	80051be <NVIC_EncodePriority+0x32>
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c0:	f04f 32ff 	mov.w	r2, #4294967295
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43da      	mvns	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	401a      	ands	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051d4:	f04f 31ff 	mov.w	r1, #4294967295
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	43d9      	mvns	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e4:	4313      	orrs	r3, r2
         );
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3724      	adds	r7, #36	@ 0x24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ff4c 	bl	8005098 <__NVIC_SetPriorityGrouping>
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800521a:	f7ff ff61 	bl	80050e0 <__NVIC_GetPriorityGrouping>
 800521e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	6978      	ldr	r0, [r7, #20]
 8005226:	f7ff ffb1 	bl	800518c <NVIC_EncodePriority>
 800522a:	4602      	mov	r2, r0
 800522c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff ff80 	bl	8005138 <__NVIC_SetPriority>
}
 8005238:	bf00      	nop
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff ff54 	bl	80050fc <__NVIC_EnableIRQ>
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e054      	b.n	8005318 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	7f5b      	ldrb	r3, [r3, #29]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fd fe7c 	bl	8002f7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	791b      	ldrb	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a22      	ldr	r2, [pc, #136]	@ (8005320 <HAL_CRC_Init+0xc4>)
 8005298:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0218 	bic.w	r2, r2, #24
 80052a8:	609a      	str	r2, [r3, #8]
 80052aa:	e00c      	b.n	80052c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6899      	ldr	r1, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f834 	bl	8005324 <HAL_CRCEx_Polynomial_Set>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e028      	b.n	8005318 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	795b      	ldrb	r3, [r3, #5]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295
 80052d6:	611a      	str	r2, [r3, #16]
 80052d8:	e004      	b.n	80052e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6912      	ldr	r2, [r2, #16]
 80052e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	04c11db7 	.word	0x04c11db7

08005324 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005334:	231f      	movs	r3, #31
 8005336:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
 8005346:	e063      	b.n	8005410 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005348:	bf00      	nop
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	613a      	str	r2, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HAL_CRCEx_Polynomial_Set+0x44>
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b18      	cmp	r3, #24
 800536c:	d846      	bhi.n	80053fc <HAL_CRCEx_Polynomial_Set+0xd8>
 800536e:	a201      	add	r2, pc, #4	@ (adr r2, 8005374 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	08005403 	.word	0x08005403
 8005378:	080053fd 	.word	0x080053fd
 800537c:	080053fd 	.word	0x080053fd
 8005380:	080053fd 	.word	0x080053fd
 8005384:	080053fd 	.word	0x080053fd
 8005388:	080053fd 	.word	0x080053fd
 800538c:	080053fd 	.word	0x080053fd
 8005390:	080053fd 	.word	0x080053fd
 8005394:	080053f1 	.word	0x080053f1
 8005398:	080053fd 	.word	0x080053fd
 800539c:	080053fd 	.word	0x080053fd
 80053a0:	080053fd 	.word	0x080053fd
 80053a4:	080053fd 	.word	0x080053fd
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	080053fd 	.word	0x080053fd
 80053b4:	080053e5 	.word	0x080053e5
 80053b8:	080053fd 	.word	0x080053fd
 80053bc:	080053fd 	.word	0x080053fd
 80053c0:	080053fd 	.word	0x080053fd
 80053c4:	080053fd 	.word	0x080053fd
 80053c8:	080053fd 	.word	0x080053fd
 80053cc:	080053fd 	.word	0x080053fd
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	080053d9 	.word	0x080053d9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b06      	cmp	r3, #6
 80053dc:	d913      	bls.n	8005406 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80053e2:	e010      	b.n	8005406 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b07      	cmp	r3, #7
 80053e8:	d90f      	bls.n	800540a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80053ee:	e00c      	b.n	800540a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	d90b      	bls.n	800540e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80053fa:	e008      	b.n	800540e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	75fb      	strb	r3, [r7, #23]
        break;
 8005400:	e006      	b.n	8005410 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005402:	bf00      	nop
 8005404:	e004      	b.n	8005410 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005406:	bf00      	nop
 8005408:	e002      	b.n	8005410 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800540a:	bf00      	nop
 800540c:	e000      	b.n	8005410 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800540e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10d      	bne.n	8005432 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f023 0118 	bic.w	r1, r3, #24
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	430a      	orrs	r2, r1
 8005430:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
}
 8005434:	4618      	mov	r0, r3
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e069      	b.n	8005526 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd fdac 	bl	8002fbc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b2a      	ldr	r3, [pc, #168]	@ (8005530 <HAL_DCMI_Init+0xf0>)
 8005486:	400b      	ands	r3, r1
 8005488:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6819      	ldr	r1, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800549e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80054aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80054b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80054c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80054ce:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d112      	bne.n	8005506 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7f1b      	ldrb	r3, [r3, #28]
 80054e4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7f5b      	ldrb	r3, [r3, #29]
 80054ea:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80054ec:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7f9b      	ldrb	r3, [r3, #30]
 80054f2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80054f4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	7fdb      	ldrb	r3, [r3, #31]
 80054fc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005502:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005504:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 021e 	orr.w	r2, r2, #30
 8005514:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	ffe0f007 	.word	0xffe0f007

08005534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005540:	f7ff fae2 	bl	8004b08 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e099      	b.n	8005684 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005570:	e00f      	b.n	8005592 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005572:	f7ff fac9 	bl	8004b08 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b05      	cmp	r3, #5
 800557e:	d908      	bls.n	8005592 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2203      	movs	r2, #3
 800558a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e078      	b.n	8005684 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e8      	bne.n	8005572 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4b38      	ldr	r3, [pc, #224]	@ (800568c <HAL_DMA_Init+0x158>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d107      	bne.n	80055fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f4:	4313      	orrs	r3, r2
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0307 	bic.w	r3, r3, #7
 8005612:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b04      	cmp	r3, #4
 8005624:	d117      	bne.n	8005656 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00e      	beq.n	8005656 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fb73 	bl	8005d24 <DMA_CheckFifoParam>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2240      	movs	r2, #64	@ 0x40
 8005648:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005652:	2301      	movs	r3, #1
 8005654:	e016      	b.n	8005684 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fb2a 	bl	8005cb8 <DMA_CalcBaseAndBitshift>
 8005664:	4603      	mov	r3, r0
 8005666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566c:	223f      	movs	r2, #63	@ 0x3f
 800566e:	409a      	lsls	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	f010803f 	.word	0xf010803f

08005690 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e050      	b.n	8005744 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d101      	bne.n	80056b2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
 80056b0:	e048      	b.n	8005744 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0201 	bic.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2200      	movs	r2, #0
 80056e8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2221      	movs	r2, #33	@ 0x21
 80056f0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fae0 	bl	8005cb8 <DMA_CalcBaseAndBitshift>
 80056f8:	4603      	mov	r3, r0
 80056fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005700:	223f      	movs	r2, #63	@ 0x3f
 8005702:	409a      	lsls	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_DMA_Start_IT+0x26>
 800576e:	2302      	movs	r3, #2
 8005770:	e048      	b.n	8005804 <HAL_DMA_Start_IT+0xb8>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d137      	bne.n	80057f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fa5e 	bl	8005c5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a4:	223f      	movs	r2, #63	@ 0x3f
 80057a6:	409a      	lsls	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0216 	orr.w	r2, r2, #22
 80057ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0208 	orr.w	r2, r2, #8
 80057e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e005      	b.n	8005802 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
 8005800:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005802:	7dfb      	ldrb	r3, [r7, #23]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005818:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800581a:	f7ff f975 	bl	8004b08 <HAL_GetTick>
 800581e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d008      	beq.n	800583e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2280      	movs	r2, #128	@ 0x80
 8005830:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e052      	b.n	80058e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0216 	bic.w	r2, r2, #22
 800584c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800585c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <HAL_DMA_Abort+0x62>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0208 	bic.w	r2, r2, #8
 800587c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0201 	bic.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800588e:	e013      	b.n	80058b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005890:	f7ff f93a 	bl	8004b08 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b05      	cmp	r3, #5
 800589c:	d90c      	bls.n	80058b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2203      	movs	r2, #3
 80058a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e015      	b.n	80058e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e4      	bne.n	8005890 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ca:	223f      	movs	r2, #63	@ 0x3f
 80058cc:	409a      	lsls	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d004      	beq.n	800590a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2280      	movs	r2, #128	@ 0x80
 8005904:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e00c      	b.n	8005924 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2205      	movs	r2, #5
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800593c:	4b8e      	ldr	r3, [pc, #568]	@ (8005b78 <HAL_DMA_IRQHandler+0x248>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a8e      	ldr	r2, [pc, #568]	@ (8005b7c <HAL_DMA_IRQHandler+0x24c>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	0a9b      	lsrs	r3, r3, #10
 8005948:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800595a:	2208      	movs	r2, #8
 800595c:	409a      	lsls	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01a      	beq.n	800599c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d013      	beq.n	800599c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0204 	bic.w	r2, r2, #4
 8005982:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005988:	2208      	movs	r2, #8
 800598a:	409a      	lsls	r2, r3
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005994:	f043 0201 	orr.w	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a0:	2201      	movs	r2, #1
 80059a2:	409a      	lsls	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d012      	beq.n	80059d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00b      	beq.n	80059d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059be:	2201      	movs	r2, #1
 80059c0:	409a      	lsls	r2, r3
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	f043 0202 	orr.w	r2, r3, #2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d6:	2204      	movs	r2, #4
 80059d8:	409a      	lsls	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d012      	beq.n	8005a08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f4:	2204      	movs	r2, #4
 80059f6:	409a      	lsls	r2, r3
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a00:	f043 0204 	orr.w	r2, r3, #4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d043      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d03c      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2a:	2210      	movs	r2, #16
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d018      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d108      	bne.n	8005a60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d024      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
 8005a5e:	e01f      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01b      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
 8005a70:	e016      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d107      	bne.n	8005a90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0208 	bic.w	r2, r2, #8
 8005a8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 808f 	beq.w	8005bd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8087 	beq.w	8005bd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	d136      	bne.n	8005b48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0216 	bic.w	r2, r2, #22
 8005ae8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695a      	ldr	r2, [r3, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005af8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <HAL_DMA_IRQHandler+0x1da>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0208 	bic.w	r2, r2, #8
 8005b18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1e:	223f      	movs	r2, #63	@ 0x3f
 8005b20:	409a      	lsls	r2, r3
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d07e      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
        }
        return;
 8005b46:	e079      	b.n	8005c3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01d      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10d      	bne.n	8005b80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d031      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
 8005b74:	e02c      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x2a0>
 8005b76:	bf00      	nop
 8005b78:	20000000 	.word	0x20000000
 8005b7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d023      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
 8005b90:	e01e      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10f      	bne.n	8005bc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0210 	bic.w	r2, r2, #16
 8005bae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d032      	beq.n	8005c3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d022      	beq.n	8005c2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2205      	movs	r2, #5
 8005be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d307      	bcc.n	8005c18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f2      	bne.n	8005bfc <HAL_DMA_IRQHandler+0x2cc>
 8005c16:	e000      	b.n	8005c1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	4798      	blx	r3
 8005c3a:	e000      	b.n	8005c3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c3c:	bf00      	nop
    }
  }
}
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b40      	cmp	r3, #64	@ 0x40
 8005c88:	d108      	bne.n	8005c9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c9a:	e007      	b.n	8005cac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]
}
 8005cac:	bf00      	nop
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	3b10      	subs	r3, #16
 8005cc8:	4a13      	ldr	r2, [pc, #76]	@ (8005d18 <DMA_CalcBaseAndBitshift+0x60>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cd2:	4a12      	ldr	r2, [pc, #72]	@ (8005d1c <DMA_CalcBaseAndBitshift+0x64>)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d908      	bls.n	8005cf8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b0c      	ldr	r3, [pc, #48]	@ (8005d20 <DMA_CalcBaseAndBitshift+0x68>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cf6:	e006      	b.n	8005d06 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4b08      	ldr	r3, [pc, #32]	@ (8005d20 <DMA_CalcBaseAndBitshift+0x68>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	aaaaaaab 	.word	0xaaaaaaab
 8005d1c:	080190ac 	.word	0x080190ac
 8005d20:	fffffc00 	.word	0xfffffc00

08005d24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11f      	bne.n	8005d7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d856      	bhi.n	8005df2 <DMA_CheckFifoParam+0xce>
 8005d44:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <DMA_CheckFifoParam+0x28>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d6f 	.word	0x08005d6f
 8005d54:	08005d5d 	.word	0x08005d5d
 8005d58:	08005df3 	.word	0x08005df3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d046      	beq.n	8005df6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d6c:	e043      	b.n	8005df6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d76:	d140      	bne.n	8005dfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d7c:	e03d      	b.n	8005dfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d86:	d121      	bne.n	8005dcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d837      	bhi.n	8005dfe <DMA_CheckFifoParam+0xda>
 8005d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d94 <DMA_CheckFifoParam+0x70>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005da5 	.word	0x08005da5
 8005d98:	08005dab 	.word	0x08005dab
 8005d9c:	08005da5 	.word	0x08005da5
 8005da0:	08005dbd 	.word	0x08005dbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
      break;
 8005da8:	e030      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d025      	beq.n	8005e02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dba:	e022      	b.n	8005e02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dc4:	d11f      	bne.n	8005e06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005dca:	e01c      	b.n	8005e06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d903      	bls.n	8005dda <DMA_CheckFifoParam+0xb6>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d003      	beq.n	8005de0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005dd8:	e018      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dde:	e015      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00e      	beq.n	8005e0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	e00b      	b.n	8005e0a <DMA_CheckFifoParam+0xe6>
      break;
 8005df2:	bf00      	nop
 8005df4:	e00a      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
      break;
 8005df6:	bf00      	nop
 8005df8:	e008      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
      break;
 8005dfa:	bf00      	nop
 8005dfc:	e006      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
      break;
 8005dfe:	bf00      	nop
 8005e00:	e004      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
      break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
      break;   
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <DMA_CheckFifoParam+0xe8>
      break;
 8005e0a:	bf00      	nop
    }
  } 
  
  return status; 
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop

08005e1c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e039      	b.n	8005ea2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fd f978 	bl	8003138 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6c:	f023 0107 	bic.w	r1, r3, #7
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e82:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <HAL_DMA2D_Init+0x90>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68d1      	ldr	r1, [r2, #12]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	ffffc000 	.word	0xffffc000

08005eb0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d026      	beq.n	8005f20 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d021      	beq.n	8005f20 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eea:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2201      	movs	r2, #1
 8005efe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2204      	movs	r2, #4
 8005f04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d026      	beq.n	8005f78 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d021      	beq.n	8005f78 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f42:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f50:	f043 0202 	orr.w	r2, r3, #2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d026      	beq.n	8005fd0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d021      	beq.n	8005fd0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f9a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa8:	f043 0204 	orr.w	r2, r3, #4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00e      	beq.n	8006002 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ff2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f853 	bl	80060a8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d024      	beq.n	8006056 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01f      	beq.n	8006056 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006024:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2202      	movs	r2, #2
 800602c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01f      	beq.n	80060a0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01a      	beq.n	80060a0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006078:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2210      	movs	r2, #16
 8006080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f80e 	bl	80060bc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_DMA2D_ConfigLayer+0x20>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e079      	b.n	80061e4 <HAL_DMA2D_ConfigLayer+0x114>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	3318      	adds	r3, #24
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	041b      	lsls	r3, r3, #16
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800611a:	4b35      	ldr	r3, [pc, #212]	@ (80061f0 <HAL_DMA2D_ConfigLayer+0x120>)
 800611c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b0a      	cmp	r3, #10
 8006124:	d003      	beq.n	800612e <HAL_DMA2D_ConfigLayer+0x5e>
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b09      	cmp	r3, #9
 800612c:	d107      	bne.n	800613e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e005      	b.n	800614a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	061b      	lsls	r3, r3, #24
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d120      	bne.n	8006192 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	43db      	mvns	r3, r3
 800615a:	ea02 0103 	and.w	r1, r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	430a      	orrs	r2, r1
 8006166:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b0a      	cmp	r3, #10
 8006178:	d003      	beq.n	8006182 <HAL_DMA2D_ConfigLayer+0xb2>
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b09      	cmp	r3, #9
 8006180:	d127      	bne.n	80061d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800618e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006190:	e01f      	b.n	80061d2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	43db      	mvns	r3, r3
 800619c:	ea02 0103 	and.w	r1, r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b0a      	cmp	r3, #10
 80061ba:	d003      	beq.n	80061c4 <HAL_DMA2D_ConfigLayer+0xf4>
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b09      	cmp	r3, #9
 80061c2:	d106      	bne.n	80061d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80061d0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	ff03000f 	.word	0xff03000f

080061f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e086      	b.n	8006314 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fc ffb3 	bl	8003184 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621e:	4b3f      	ldr	r3, [pc, #252]	@ (800631c <HAL_ETH_Init+0x128>)
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	4a3e      	ldr	r2, [pc, #248]	@ (800631c <HAL_ETH_Init+0x128>)
 8006224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006228:	6453      	str	r3, [r2, #68]	@ 0x44
 800622a:	4b3c      	ldr	r3, [pc, #240]	@ (800631c <HAL_ETH_Init+0x128>)
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006236:	4b3a      	ldr	r3, [pc, #232]	@ (8006320 <HAL_ETH_Init+0x12c>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	4a39      	ldr	r2, [pc, #228]	@ (8006320 <HAL_ETH_Init+0x12c>)
 800623c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006240:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006242:	4b37      	ldr	r3, [pc, #220]	@ (8006320 <HAL_ETH_Init+0x12c>)
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	4935      	ldr	r1, [pc, #212]	@ (8006320 <HAL_ETH_Init+0x12c>)
 800624c:	4313      	orrs	r3, r2
 800624e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006250:	4b33      	ldr	r3, [pc, #204]	@ (8006320 <HAL_ETH_Init+0x12c>)
 8006252:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800626a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800626c:	f7fe fc4c 	bl	8004b08 <HAL_GetTick>
 8006270:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006272:	e011      	b.n	8006298 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006274:	f7fe fc48 	bl	8004b08 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006282:	d909      	bls.n	8006298 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2204      	movs	r2, #4
 8006288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	22e0      	movs	r2, #224	@ 0xe0
 8006290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e03d      	b.n	8006314 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e4      	bne.n	8006274 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f97a 	bl	80065a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fa25 	bl	8006700 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa7b 	bl	80067b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	461a      	mov	r2, r3
 80062c2:	2100      	movs	r1, #0
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f9e3 	bl	8006690 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80062d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006324 <HAL_ETH_Init+0x130>)
 80062e8:	430b      	orrs	r3, r1
 80062ea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80062fe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2210      	movs	r2, #16
 800630e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40023800 	.word	0x40023800
 8006320:	40013800 	.word	0x40013800
 8006324:	00020060 	.word	0x00020060

08006328 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4b53      	ldr	r3, [pc, #332]	@ (800648c <ETH_SetMACConfig+0x164>)
 800633e:	4013      	ands	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	7b9b      	ldrb	r3, [r3, #14]
 8006346:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	7c12      	ldrb	r2, [r2, #16]
 800634c:	2a00      	cmp	r2, #0
 800634e:	d102      	bne.n	8006356 <ETH_SetMACConfig+0x2e>
 8006350:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006354:	e000      	b.n	8006358 <ETH_SetMACConfig+0x30>
 8006356:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006358:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	7c52      	ldrb	r2, [r2, #17]
 800635e:	2a00      	cmp	r2, #0
 8006360:	d102      	bne.n	8006368 <ETH_SetMACConfig+0x40>
 8006362:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006366:	e000      	b.n	800636a <ETH_SetMACConfig+0x42>
 8006368:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800636a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006370:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	7fdb      	ldrb	r3, [r3, #31]
 8006376:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006378:	431a      	orrs	r2, r3
                        macconf->Speed |
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800637e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	7f92      	ldrb	r2, [r2, #30]
 8006384:	2a00      	cmp	r2, #0
 8006386:	d102      	bne.n	800638e <ETH_SetMACConfig+0x66>
 8006388:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800638c:	e000      	b.n	8006390 <ETH_SetMACConfig+0x68>
 800638e:	2200      	movs	r2, #0
                        macconf->Speed |
 8006390:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	7f1b      	ldrb	r3, [r3, #28]
 8006396:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006398:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800639e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	791b      	ldrb	r3, [r3, #4]
 80063a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80063a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d102      	bne.n	80063b8 <ETH_SetMACConfig+0x90>
 80063b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b6:	e000      	b.n	80063ba <ETH_SetMACConfig+0x92>
 80063b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80063ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	7bdb      	ldrb	r3, [r3, #15]
 80063c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80063c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80063c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80063d2:	4313      	orrs	r3, r2
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80063ea:	2001      	movs	r0, #1
 80063ec:	f7fe fb98 	bl	8004b20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006406:	4013      	ands	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800640e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006416:	2a00      	cmp	r2, #0
 8006418:	d101      	bne.n	800641e <ETH_SetMACConfig+0xf6>
 800641a:	2280      	movs	r2, #128	@ 0x80
 800641c:	e000      	b.n	8006420 <ETH_SetMACConfig+0xf8>
 800641e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006420:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006426:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800642e:	2a01      	cmp	r2, #1
 8006430:	d101      	bne.n	8006436 <ETH_SetMACConfig+0x10e>
 8006432:	2208      	movs	r2, #8
 8006434:	e000      	b.n	8006438 <ETH_SetMACConfig+0x110>
 8006436:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006438:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8006440:	2a01      	cmp	r2, #1
 8006442:	d101      	bne.n	8006448 <ETH_SetMACConfig+0x120>
 8006444:	2204      	movs	r2, #4
 8006446:	e000      	b.n	800644a <ETH_SetMACConfig+0x122>
 8006448:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800644a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8006452:	2a01      	cmp	r2, #1
 8006454:	d101      	bne.n	800645a <ETH_SetMACConfig+0x132>
 8006456:	2202      	movs	r2, #2
 8006458:	e000      	b.n	800645c <ETH_SetMACConfig+0x134>
 800645a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800645c:	4313      	orrs	r3, r2
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006474:	2001      	movs	r0, #1
 8006476:	f7fe fb53 	bl	8004b20 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	619a      	str	r2, [r3, #24]
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	fd20810f 	.word	0xfd20810f

08006490 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4b3d      	ldr	r3, [pc, #244]	@ (80065a0 <ETH_SetDMAConfig+0x110>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d102      	bne.n	80064bc <ETH_SetDMAConfig+0x2c>
 80064b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80064ba:	e000      	b.n	80064be <ETH_SetDMAConfig+0x2e>
 80064bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	7b5b      	ldrb	r3, [r3, #13]
 80064c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80064c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	7f52      	ldrb	r2, [r2, #29]
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d102      	bne.n	80064d4 <ETH_SetDMAConfig+0x44>
 80064ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80064d2:	e000      	b.n	80064d6 <ETH_SetDMAConfig+0x46>
 80064d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80064d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	7b9b      	ldrb	r3, [r3, #14]
 80064dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80064de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80064e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	7f1b      	ldrb	r3, [r3, #28]
 80064ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80064ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	7f9b      	ldrb	r3, [r3, #30]
 80064f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80064f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80064fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006502:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006504:	4313      	orrs	r3, r2
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006514:	461a      	mov	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006526:	2001      	movs	r0, #1
 8006528:	f7fe fafa 	bl	8004b20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006534:	461a      	mov	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	791b      	ldrb	r3, [r3, #4]
 800653e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006544:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800654a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006550:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006558:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800655a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006562:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006568:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006572:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006576:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006584:	2001      	movs	r0, #1
 8006586:	f7fe facb 	bl	8004b20 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006592:	461a      	mov	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	f8de3f23 	.word	0xf8de3f23

080065a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b0a6      	sub	sp, #152	@ 0x98
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80065b8:	2300      	movs	r3, #0
 80065ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80065da:	2300      	movs	r3, #0
 80065dc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80065e6:	2300      	movs	r3, #0
 80065e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80065fa:	2300      	movs	r3, #0
 80065fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006600:	2300      	movs	r3, #0
 8006602:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800660c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006610:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006612:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006618:	2300      	movs	r3, #0
 800661a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800661e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fe7f 	bl	8006328 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800662a:	2301      	movs	r3, #1
 800662c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800662e:	2301      	movs	r3, #1
 8006630:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006632:	2301      	movs	r3, #1
 8006634:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006638:	2301      	movs	r3, #1
 800663a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800663c:	2300      	movs	r3, #0
 800663e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006640:	2300      	movs	r3, #0
 8006642:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006646:	2300      	movs	r3, #0
 8006648:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800664c:	2300      	movs	r3, #0
 800664e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006656:	2301      	movs	r3, #1
 8006658:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800665a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800665e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006660:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006664:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006666:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800666a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006672:	2300      	movs	r3, #0
 8006674:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800667a:	f107 0308 	add.w	r3, r7, #8
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff ff05 	bl	8006490 <ETH_SetDMAConfig>
}
 8006686:	bf00      	nop
 8006688:	3798      	adds	r7, #152	@ 0x98
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3305      	adds	r3, #5
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	3204      	adds	r2, #4
 80066a8:	7812      	ldrb	r2, [r2, #0]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	4b11      	ldr	r3, [pc, #68]	@ (80066f8 <ETH_MACAddressConfig+0x68>)
 80066b2:	4413      	add	r3, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3303      	adds	r3, #3
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	061a      	lsls	r2, r3, #24
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3302      	adds	r3, #2
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3301      	adds	r3, #1
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	4313      	orrs	r3, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	7812      	ldrb	r2, [r2, #0]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <ETH_MACAddressConfig+0x6c>)
 80066e2:	4413      	add	r3, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	6013      	str	r3, [r2, #0]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40028040 	.word	0x40028040
 80066fc:	40028044 	.word	0x40028044

08006700 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e03e      	b.n	800678c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68d9      	ldr	r1, [r3, #12]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	440b      	add	r3, r1
 800671e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2200      	movs	r2, #0
 800672a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2200      	movs	r2, #0
 8006730:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	3206      	adds	r2, #6
 8006740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d80c      	bhi.n	8006770 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68d9      	ldr	r1, [r3, #12]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	440b      	add	r3, r1
 8006768:	461a      	mov	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	60da      	str	r2, [r3, #12]
 800676e:	e004      	b.n	800677a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	461a      	mov	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d9bd      	bls.n	800670e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067a4:	611a      	str	r2, [r3, #16]
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e048      	b.n	8006852 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6919      	ldr	r1, [r3, #16]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	440b      	add	r3, r1
 80067d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2200      	movs	r2, #0
 80067e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2200      	movs	r2, #0
 80067ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	3212      	adds	r2, #18
 800681e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d80c      	bhi.n	8006842 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6919      	ldr	r1, [r3, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	440b      	add	r3, r1
 800683a:	461a      	mov	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	60da      	str	r2, [r3, #12]
 8006840:	e004      	b.n	800684c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	461a      	mov	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d9b3      	bls.n	80067c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006882:	60da      	str	r2, [r3, #12]
}
 8006884:	bf00      	nop
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006890:	b480      	push	{r7}
 8006892:	b089      	sub	sp, #36	@ 0x24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	e175      	b.n	8006b9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80068b0:	2201      	movs	r2, #1
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	fa02 f303 	lsl.w	r3, r2, r3
 80068b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4013      	ands	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	f040 8164 	bne.w	8006b96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d005      	beq.n	80068e6 <HAL_GPIO_Init+0x56>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d130      	bne.n	8006948 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	2203      	movs	r2, #3
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	43db      	mvns	r3, r3
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	4013      	ands	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800691c:	2201      	movs	r2, #1
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	43db      	mvns	r3, r3
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	4013      	ands	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	f003 0201 	and.w	r2, r3, #1
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	4313      	orrs	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	2b03      	cmp	r3, #3
 8006952:	d017      	beq.n	8006984 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	2203      	movs	r2, #3
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	43db      	mvns	r3, r3
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	4013      	ands	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	4313      	orrs	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d123      	bne.n	80069d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	08da      	lsrs	r2, r3, #3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3208      	adds	r2, #8
 8006998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	220f      	movs	r2, #15
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	43db      	mvns	r3, r3
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	4013      	ands	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	08da      	lsrs	r2, r3, #3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3208      	adds	r2, #8
 80069d2:	69b9      	ldr	r1, [r7, #24]
 80069d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	2203      	movs	r2, #3
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	43db      	mvns	r3, r3
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	4013      	ands	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 0203 	and.w	r2, r3, #3
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80be 	beq.w	8006b96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a1a:	4b66      	ldr	r3, [pc, #408]	@ (8006bb4 <HAL_GPIO_Init+0x324>)
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1e:	4a65      	ldr	r2, [pc, #404]	@ (8006bb4 <HAL_GPIO_Init+0x324>)
 8006a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a26:	4b63      	ldr	r3, [pc, #396]	@ (8006bb4 <HAL_GPIO_Init+0x324>)
 8006a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006a32:	4a61      	ldr	r2, [pc, #388]	@ (8006bb8 <HAL_GPIO_Init+0x328>)
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	089b      	lsrs	r3, r3, #2
 8006a38:	3302      	adds	r3, #2
 8006a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	220f      	movs	r2, #15
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	4013      	ands	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a58      	ldr	r2, [pc, #352]	@ (8006bbc <HAL_GPIO_Init+0x32c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d037      	beq.n	8006ace <HAL_GPIO_Init+0x23e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a57      	ldr	r2, [pc, #348]	@ (8006bc0 <HAL_GPIO_Init+0x330>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d031      	beq.n	8006aca <HAL_GPIO_Init+0x23a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a56      	ldr	r2, [pc, #344]	@ (8006bc4 <HAL_GPIO_Init+0x334>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d02b      	beq.n	8006ac6 <HAL_GPIO_Init+0x236>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a55      	ldr	r2, [pc, #340]	@ (8006bc8 <HAL_GPIO_Init+0x338>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d025      	beq.n	8006ac2 <HAL_GPIO_Init+0x232>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a54      	ldr	r2, [pc, #336]	@ (8006bcc <HAL_GPIO_Init+0x33c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01f      	beq.n	8006abe <HAL_GPIO_Init+0x22e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a53      	ldr	r2, [pc, #332]	@ (8006bd0 <HAL_GPIO_Init+0x340>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d019      	beq.n	8006aba <HAL_GPIO_Init+0x22a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a52      	ldr	r2, [pc, #328]	@ (8006bd4 <HAL_GPIO_Init+0x344>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_GPIO_Init+0x226>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a51      	ldr	r2, [pc, #324]	@ (8006bd8 <HAL_GPIO_Init+0x348>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00d      	beq.n	8006ab2 <HAL_GPIO_Init+0x222>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a50      	ldr	r2, [pc, #320]	@ (8006bdc <HAL_GPIO_Init+0x34c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d007      	beq.n	8006aae <HAL_GPIO_Init+0x21e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8006be0 <HAL_GPIO_Init+0x350>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d101      	bne.n	8006aaa <HAL_GPIO_Init+0x21a>
 8006aa6:	2309      	movs	r3, #9
 8006aa8:	e012      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006aaa:	230a      	movs	r3, #10
 8006aac:	e010      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006aae:	2308      	movs	r3, #8
 8006ab0:	e00e      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006ab2:	2307      	movs	r3, #7
 8006ab4:	e00c      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006ab6:	2306      	movs	r3, #6
 8006ab8:	e00a      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006aba:	2305      	movs	r3, #5
 8006abc:	e008      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006abe:	2304      	movs	r3, #4
 8006ac0:	e006      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e004      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e002      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_GPIO_Init+0x240>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	f002 0203 	and.w	r2, r2, #3
 8006ad6:	0092      	lsls	r2, r2, #2
 8006ad8:	4093      	lsls	r3, r2
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006ae0:	4935      	ldr	r1, [pc, #212]	@ (8006bb8 <HAL_GPIO_Init+0x328>)
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	089b      	lsrs	r3, r3, #2
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006aee:	4b3d      	ldr	r3, [pc, #244]	@ (8006be4 <HAL_GPIO_Init+0x354>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	43db      	mvns	r3, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4013      	ands	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b12:	4a34      	ldr	r2, [pc, #208]	@ (8006be4 <HAL_GPIO_Init+0x354>)
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b18:	4b32      	ldr	r3, [pc, #200]	@ (8006be4 <HAL_GPIO_Init+0x354>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4013      	ands	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b3c:	4a29      	ldr	r2, [pc, #164]	@ (8006be4 <HAL_GPIO_Init+0x354>)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b42:	4b28      	ldr	r3, [pc, #160]	@ (8006be4 <HAL_GPIO_Init+0x354>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b66:	4a1f      	ldr	r2, [pc, #124]	@ (8006be4 <HAL_GPIO_Init+0x354>)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006be4 <HAL_GPIO_Init+0x354>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	43db      	mvns	r3, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b90:	4a14      	ldr	r2, [pc, #80]	@ (8006be4 <HAL_GPIO_Init+0x354>)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b0f      	cmp	r3, #15
 8006ba0:	f67f ae86 	bls.w	80068b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	3724      	adds	r7, #36	@ 0x24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	40013800 	.word	0x40013800
 8006bbc:	40020000 	.word	0x40020000
 8006bc0:	40020400 	.word	0x40020400
 8006bc4:	40020800 	.word	0x40020800
 8006bc8:	40020c00 	.word	0x40020c00
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	40021400 	.word	0x40021400
 8006bd4:	40021800 	.word	0x40021800
 8006bd8:	40021c00 	.word	0x40021c00
 8006bdc:	40022000 	.word	0x40022000
 8006be0:	40022400 	.word	0x40022400
 8006be4:	40013c00 	.word	0x40013c00

08006be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	887b      	ldrh	r3, [r7, #2]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	e001      	b.n	8006c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	807b      	strh	r3, [r7, #2]
 8006c24:	4613      	mov	r3, r2
 8006c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c28:	787b      	ldrb	r3, [r7, #1]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c2e:	887a      	ldrh	r2, [r7, #2]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006c34:	e003      	b.n	8006c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006c36:	887b      	ldrh	r3, [r7, #2]
 8006c38:	041a      	lsls	r2, r3, #16
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	619a      	str	r2, [r3, #24]
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af02      	add	r7, sp, #8
 8006c50:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e059      	b.n	8006d10 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f00f fc90 	bl	801659c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2203      	movs	r2, #3
 8006c80:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c8a:	d102      	bne.n	8006c92 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f009 fb1f 	bl	80102da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7c1a      	ldrb	r2, [r3, #16]
 8006ca4:	f88d 2000 	strb.w	r2, [sp]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cac:	f009 faaa 	bl	8010204 <USB_CoreInit>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e026      	b.n	8006d10 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f009 fb17 	bl	80102fc <USB_SetCurrentMode>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e017      	b.n	8006d10 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	7c1a      	ldrb	r2, [r3, #16]
 8006ce8:	f88d 2000 	strb.w	r2, [sp]
 8006cec:	3304      	adds	r3, #4
 8006cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cf0:	f009 fcc0 	bl	8010674 <USB_HostInit>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e004      	b.n	8006d10 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006d18:	b590      	push	{r4, r7, lr}
 8006d1a:	b08b      	sub	sp, #44	@ 0x2c
 8006d1c:	af04      	add	r7, sp, #16
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	4608      	mov	r0, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	461a      	mov	r2, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	70fb      	strb	r3, [r7, #3]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70bb      	strb	r3, [r7, #2]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8006d32:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006d34:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_HCD_HC_Init+0x2c>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e09d      	b.n	8006e80 <HAL_HCD_HC_Init+0x168>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8006d4c:	78fa      	ldrb	r2, [r7, #3]
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4613      	mov	r3, r2
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	3319      	adds	r3, #25
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	4613      	mov	r3, r2
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3314      	adds	r3, #20
 8006d70:	787a      	ldrb	r2, [r7, #1]
 8006d72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	3315      	adds	r3, #21
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006d88:	78fa      	ldrb	r2, [r7, #3]
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	1a9b      	subs	r3, r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3326      	adds	r3, #38	@ 0x26
 8006d98:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006d9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	78bb      	ldrb	r3, [r7, #2]
 8006da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da6:	b2d8      	uxtb	r0, r3
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	3316      	adds	r3, #22
 8006db6:	4602      	mov	r2, r0
 8006db8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fbc8 	bl	8007554 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8006dc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	da0a      	bge.n	8006de2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006dcc:	78fa      	ldrb	r2, [r7, #3]
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	3317      	adds	r3, #23
 8006ddc:	2201      	movs	r2, #1
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	e009      	b.n	8006df6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	3317      	adds	r3, #23
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f009 fd92 	bl	8010924 <USB_GetHostSpeed>
 8006e00:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8006e02:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d10b      	bne.n	8006e22 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8006e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d107      	bne.n	8006e22 <HAL_HCD_HC_Init+0x10a>
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2bbc      	cmp	r3, #188	@ 0xbc
 8006e1c:	d901      	bls.n	8006e22 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8006e1e:	23bc      	movs	r3, #188	@ 0xbc
 8006e20:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8006e22:	78fa      	ldrb	r2, [r7, #3]
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	1a9b      	subs	r3, r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	3318      	adds	r3, #24
 8006e32:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	b298      	uxth	r0, r3
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	3328      	adds	r3, #40	@ 0x28
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	787c      	ldrb	r4, [r7, #1]
 8006e5a:	78ba      	ldrb	r2, [r7, #2]
 8006e5c:	78f9      	ldrb	r1, [r7, #3]
 8006e5e:	9302      	str	r3, [sp, #8]
 8006e60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	f009 fd81 	bl	8010974 <USB_HC_Init>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}

08006e88 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <HAL_HCD_HC_Halt+0x1e>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e00f      	b.n	8006ec6 <HAL_HCD_HC_Halt+0x3e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	78fa      	ldrb	r2, [r7, #3]
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f00a f913 	bl	80110e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	4608      	mov	r0, r1
 8006eda:	4611      	mov	r1, r2
 8006edc:	461a      	mov	r2, r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	70fb      	strb	r3, [r7, #3]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70bb      	strb	r3, [r7, #2]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3317      	adds	r3, #23
 8006efa:	78ba      	ldrb	r2, [r7, #2]
 8006efc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3326      	adds	r3, #38	@ 0x26
 8006f0e:	787a      	ldrb	r2, [r7, #1]
 8006f10:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006f12:	7c3b      	ldrb	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d114      	bne.n	8006f42 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	1a9b      	subs	r3, r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	332a      	adds	r3, #42	@ 0x2a
 8006f28:	2203      	movs	r2, #3
 8006f2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006f2c:	78fa      	ldrb	r2, [r7, #3]
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	4613      	mov	r3, r2
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	3319      	adds	r3, #25
 8006f3c:	7f3a      	ldrb	r2, [r7, #28]
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	e009      	b.n	8006f56 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f42:	78fa      	ldrb	r2, [r7, #3]
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	332a      	adds	r3, #42	@ 0x2a
 8006f52:	2202      	movs	r2, #2
 8006f54:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006f56:	787b      	ldrb	r3, [r7, #1]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	f200 8102 	bhi.w	8007162 <HAL_HCD_HC_SubmitRequest+0x292>
 8006f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f64 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	0800714d 	.word	0x0800714d
 8006f6c:	08007039 	.word	0x08007039
 8006f70:	080070c3 	.word	0x080070c3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006f74:	7c3b      	ldrb	r3, [r7, #16]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	f040 80f5 	bne.w	8007166 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8006f7c:	78bb      	ldrb	r3, [r7, #2]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d12d      	bne.n	8006fde <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8006f82:	8b3b      	ldrh	r3, [r7, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006f88:	78fa      	ldrb	r2, [r7, #3]
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	333d      	adds	r3, #61	@ 0x3d
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	333d      	adds	r3, #61	@ 0x3d
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006fb2:	78fa      	ldrb	r2, [r7, #3]
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	332a      	adds	r3, #42	@ 0x2a
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8006fc6:	e0ce      	b.n	8007166 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006fc8:	78fa      	ldrb	r2, [r7, #3]
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	332a      	adds	r3, #42	@ 0x2a
 8006fd8:	2202      	movs	r2, #2
 8006fda:	701a      	strb	r2, [r3, #0]
      break;
 8006fdc:	e0c3      	b.n	8007166 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	1a9b      	subs	r3, r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	440b      	add	r3, r1
 8006fec:	331a      	adds	r3, #26
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	f040 80b8 	bne.w	8007166 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	333c      	adds	r3, #60	@ 0x3c
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	4613      	mov	r3, r2
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	332a      	adds	r3, #42	@ 0x2a
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
      break;
 8007020:	e0a1      	b.n	8007166 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	332a      	adds	r3, #42	@ 0x2a
 8007032:	2202      	movs	r2, #2
 8007034:	701a      	strb	r2, [r3, #0]
      break;
 8007036:	e096      	b.n	8007166 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007038:	78bb      	ldrb	r3, [r7, #2]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d120      	bne.n	8007080 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	333d      	adds	r3, #61	@ 0x3d
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	332a      	adds	r3, #42	@ 0x2a
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007068:	e07e      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	1a9b      	subs	r3, r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	332a      	adds	r3, #42	@ 0x2a
 800707a:	2202      	movs	r2, #2
 800707c:	701a      	strb	r2, [r3, #0]
      break;
 800707e:	e073      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4613      	mov	r3, r2
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	1a9b      	subs	r3, r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	333c      	adds	r3, #60	@ 0x3c
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	332a      	adds	r3, #42	@ 0x2a
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
      break;
 80070aa:	e05d      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	332a      	adds	r3, #42	@ 0x2a
 80070bc:	2202      	movs	r2, #2
 80070be:	701a      	strb	r2, [r3, #0]
      break;
 80070c0:	e052      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80070c2:	78bb      	ldrb	r3, [r7, #2]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d120      	bne.n	800710a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	4613      	mov	r3, r2
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	333d      	adds	r3, #61	@ 0x3d
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	332a      	adds	r3, #42	@ 0x2a
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80070f2:	e039      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80070f4:	78fa      	ldrb	r2, [r7, #3]
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	4613      	mov	r3, r2
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	1a9b      	subs	r3, r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	332a      	adds	r3, #42	@ 0x2a
 8007104:	2202      	movs	r2, #2
 8007106:	701a      	strb	r2, [r3, #0]
      break;
 8007108:	e02e      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800710a:	78fa      	ldrb	r2, [r7, #3]
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	011b      	lsls	r3, r3, #4
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	333c      	adds	r3, #60	@ 0x3c
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007120:	78fa      	ldrb	r2, [r7, #3]
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	332a      	adds	r3, #42	@ 0x2a
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
      break;
 8007134:	e018      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	332a      	adds	r3, #42	@ 0x2a
 8007146:	2202      	movs	r2, #2
 8007148:	701a      	strb	r2, [r3, #0]
      break;
 800714a:	e00d      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800714c:	78fa      	ldrb	r2, [r7, #3]
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	4613      	mov	r3, r2
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	332a      	adds	r3, #42	@ 0x2a
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
      break;
 8007160:	e002      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8007162:	bf00      	nop
 8007164:	e000      	b.n	8007168 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8007166:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007168:	78fa      	ldrb	r2, [r7, #3]
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	332c      	adds	r3, #44	@ 0x2c
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800717c:	78fa      	ldrb	r2, [r7, #3]
 800717e:	8b39      	ldrh	r1, [r7, #24]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4613      	mov	r3, r2
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4403      	add	r3, r0
 800718c:	3334      	adds	r3, #52	@ 0x34
 800718e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007190:	78fa      	ldrb	r2, [r7, #3]
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	334c      	adds	r3, #76	@ 0x4c
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	3338      	adds	r3, #56	@ 0x38
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	3315      	adds	r3, #21
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	4613      	mov	r3, r2
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	334d      	adds	r3, #77	@ 0x4d
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	4613      	mov	r3, r2
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	3310      	adds	r3, #16
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	1d19      	adds	r1, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	799b      	ldrb	r3, [r3, #6]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f009 fce6 	bl	8010bcc <USB_HC_StartXfer>
 8007200:	4603      	mov	r3, r0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop

0800720c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f009 f9e0 	bl	80105e8 <USB_GetMode>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	f040 80fb 	bne.w	8007426 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f009 f9a3 	bl	8010580 <USB_ReadInterrupts>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80f1 	beq.w	8007424 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f009 f99a 	bl	8010580 <USB_ReadInterrupts>
 800724c:	4603      	mov	r3, r0
 800724e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007252:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007256:	d104      	bne.n	8007262 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f009 f98a 	bl	8010580 <USB_ReadInterrupts>
 800726c:	4603      	mov	r3, r0
 800726e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007276:	d104      	bne.n	8007282 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f009 f97a 	bl	8010580 <USB_ReadInterrupts>
 800728c:	4603      	mov	r3, r0
 800728e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007292:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007296:	d104      	bne.n	80072a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80072a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f009 f96a 	bl	8010580 <USB_ReadInterrupts>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d103      	bne.n	80072be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2202      	movs	r2, #2
 80072bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f009 f95c 	bl	8010580 <USB_ReadInterrupts>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d2:	d120      	bne.n	8007316 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80072dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d113      	bne.n	8007316 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80072ee:	2110      	movs	r1, #16
 80072f0:	6938      	ldr	r0, [r7, #16]
 80072f2:	f009 f84f 	bl	8010394 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80072f6:	6938      	ldr	r0, [r7, #16]
 80072f8:	f009 f87e 	bl	80103f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	7a5b      	ldrb	r3, [r3, #9]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d105      	bne.n	8007310 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2101      	movs	r1, #1
 800730a:	4618      	mov	r0, r3
 800730c:	f009 fa6a 	bl	80107e4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f00f f9b5 	bl	8016680 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f009 f930 	bl	8010580 <USB_ReadInterrupts>
 8007320:	4603      	mov	r3, r0
 8007322:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800732a:	d102      	bne.n	8007332 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 fd4d 	bl	8008dcc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f009 f922 	bl	8010580 <USB_ReadInterrupts>
 800733c:	4603      	mov	r3, r0
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b08      	cmp	r3, #8
 8007344:	d106      	bne.n	8007354 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f00f f97e 	bl	8016648 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2208      	movs	r2, #8
 8007352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f009 f911 	bl	8010580 <USB_ReadInterrupts>
 800735e:	4603      	mov	r3, r0
 8007360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007364:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007368:	d139      	bne.n	80073de <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f009 fea6 	bl	80110c0 <USB_HC_ReadInterrupt>
 8007374:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e025      	b.n	80073c8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d018      	beq.n	80073c2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073a6:	d106      	bne.n	80073b6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f905 	bl	80075be <HCD_HC_IN_IRQHandler>
 80073b4:	e005      	b.n	80073c2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 ff67 	bl	8008290 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	3301      	adds	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	795b      	ldrb	r3, [r3, #5]
 80073cc:	461a      	mov	r2, r3
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d3d3      	bcc.n	800737c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80073dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f009 f8cc 	bl	8010580 <USB_ReadInterrupts>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f003 0310 	and.w	r3, r3, #16
 80073ee:	2b10      	cmp	r3, #16
 80073f0:	d101      	bne.n	80073f6 <HAL_HCD_IRQHandler+0x1ea>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <HAL_HCD_IRQHandler+0x1ec>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d014      	beq.n	8007426 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0210 	bic.w	r2, r2, #16
 800740a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 fbfe 	bl	8008c0e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f042 0210 	orr.w	r2, r2, #16
 8007420:	619a      	str	r2, [r3, #24]
 8007422:	e000      	b.n	8007426 <HAL_HCD_IRQHandler+0x21a>
      return;
 8007424:	bf00      	nop
    }
  }
}
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <HAL_HCD_Start+0x16>
 800743e:	2302      	movs	r3, #2
 8007440:	e013      	b.n	800746a <HAL_HCD_Start+0x3e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2101      	movs	r1, #1
 8007450:	4618      	mov	r0, r3
 8007452:	f009 fa2e 	bl	80108b2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f008 ff2c 	bl	80102b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_HCD_Stop+0x16>
 8007484:	2302      	movs	r3, #2
 8007486:	e00d      	b.n	80074a4 <HAL_HCD_Stop+0x32>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f009 ff81 	bl	801139c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f009 f9d0 	bl	801085e <USB_ResetPort>
 80074be:	4603      	mov	r3, r0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	4613      	mov	r3, r2
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	334c      	adds	r3, #76	@ 0x4c
 80074e4:	781b      	ldrb	r3, [r3, #0]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	3338      	adds	r3, #56	@ 0x38
 800750e:	681b      	ldr	r3, [r3, #0]
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f009 fa12 	bl	8010952 <USB_GetCurrentFrame>
 800752e:	4603      	mov	r3, r0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f009 f9ed 	bl	8010924 <USB_GetHostSpeed>
 800754a:	4603      	mov	r3, r0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	1a9b      	subs	r3, r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	331a      	adds	r3, #26
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8007574:	78fa      	ldrb	r2, [r7, #3]
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4613      	mov	r3, r2
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	331b      	adds	r3, #27
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	3325      	adds	r3, #37	@ 0x25
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	3324      	adds	r3, #36	@ 0x24
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	78fa      	ldrb	r2, [r7, #3]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f008 ffe2 	bl	80105a6 <USB_ReadChInterrupts>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d11a      	bne.n	8007622 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f8:	461a      	mov	r2, r3
 80075fa:	2304      	movs	r3, #4
 80075fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	334d      	adds	r3, #77	@ 0x4d
 800760e:	2207      	movs	r2, #7
 8007610:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f009 fd61 	bl	80110e2 <USB_HC_Halt>
 8007620:	e09e      	b.n	8007760 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	4611      	mov	r1, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f008 ffbb 	bl	80105a6 <USB_ReadChInterrupts>
 8007630:	4603      	mov	r3, r0
 8007632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800763a:	d11b      	bne.n	8007674 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	4413      	add	r3, r2
 8007644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007648:	461a      	mov	r2, r3
 800764a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800764e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	4613      	mov	r3, r2
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	440b      	add	r3, r1
 800765e:	334d      	adds	r3, #77	@ 0x4d
 8007660:	2208      	movs	r2, #8
 8007662:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f009 fd38 	bl	80110e2 <USB_HC_Halt>
 8007672:	e075      	b.n	8007760 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	4611      	mov	r1, r2
 800767c:	4618      	mov	r0, r3
 800767e:	f008 ff92 	bl	80105a6 <USB_ReadChInterrupts>
 8007682:	4603      	mov	r3, r0
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b08      	cmp	r3, #8
 800768a:	d11a      	bne.n	80076c2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	4413      	add	r3, r2
 8007694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007698:	461a      	mov	r2, r3
 800769a:	2308      	movs	r3, #8
 800769c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	4613      	mov	r3, r2
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	440b      	add	r3, r1
 80076ac:	334d      	adds	r3, #77	@ 0x4d
 80076ae:	2206      	movs	r2, #6
 80076b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	78fa      	ldrb	r2, [r7, #3]
 80076b8:	4611      	mov	r1, r2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f009 fd11 	bl	80110e2 <USB_HC_Halt>
 80076c0:	e04e      	b.n	8007760 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	78fa      	ldrb	r2, [r7, #3]
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f008 ff6b 	bl	80105a6 <USB_ReadChInterrupts>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076da:	d11b      	bne.n	8007714 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e8:	461a      	mov	r2, r3
 80076ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	4613      	mov	r3, r2
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	334d      	adds	r3, #77	@ 0x4d
 8007700:	2209      	movs	r2, #9
 8007702:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	4611      	mov	r1, r2
 800770c:	4618      	mov	r0, r3
 800770e:	f009 fce8 	bl	80110e2 <USB_HC_Halt>
 8007712:	e025      	b.n	8007760 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	78fa      	ldrb	r2, [r7, #3]
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f008 ff42 	bl	80105a6 <USB_ReadChInterrupts>
 8007722:	4603      	mov	r3, r0
 8007724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007728:	2b80      	cmp	r3, #128	@ 0x80
 800772a:	d119      	bne.n	8007760 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4413      	add	r3, r2
 8007734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007738:	461a      	mov	r2, r3
 800773a:	2380      	movs	r3, #128	@ 0x80
 800773c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	334d      	adds	r3, #77	@ 0x4d
 800774e:	2207      	movs	r2, #7
 8007750:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	78fa      	ldrb	r2, [r7, #3]
 8007758:	4611      	mov	r1, r2
 800775a:	4618      	mov	r0, r3
 800775c:	f009 fcc1 	bl	80110e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f008 ff1c 	bl	80105a6 <USB_ReadChInterrupts>
 800776e:	4603      	mov	r3, r0
 8007770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007778:	d112      	bne.n	80077a0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f009 fcad 	bl	80110e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	4413      	add	r3, r2
 8007790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007794:	461a      	mov	r2, r3
 8007796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800779a:	6093      	str	r3, [r2, #8]
 800779c:	f000 bd75 	b.w	800828a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	78fa      	ldrb	r2, [r7, #3]
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f008 fefc 	bl	80105a6 <USB_ReadChInterrupts>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	f040 8128 	bne.w	8007a0a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c6:	461a      	mov	r2, r3
 80077c8:	2320      	movs	r3, #32
 80077ca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80077cc:	78fa      	ldrb	r2, [r7, #3]
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	4613      	mov	r3, r2
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	331b      	adds	r3, #27
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d119      	bne.n	8007816 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	331b      	adds	r3, #27
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007814:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	799b      	ldrb	r3, [r3, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01b      	beq.n	8007856 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	3330      	adds	r3, #48	@ 0x30
 800782e:	6819      	ldr	r1, [r3, #0]
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	1ac9      	subs	r1, r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4613      	mov	r3, r2
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4403      	add	r3, r0
 8007852:	3338      	adds	r3, #56	@ 0x38
 8007854:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	334d      	adds	r3, #77	@ 0x4d
 8007866:	2201      	movs	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	4613      	mov	r3, r2
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	1a9b      	subs	r3, r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	3344      	adds	r3, #68	@ 0x44
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800788a:	461a      	mov	r2, r3
 800788c:	2301      	movs	r3, #1
 800788e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	1a9b      	subs	r3, r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	3326      	adds	r3, #38	@ 0x26
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80078a6:	78fa      	ldrb	r2, [r7, #3]
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	3326      	adds	r3, #38	@ 0x26
 80078b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d110      	bne.n	80078de <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	4611      	mov	r1, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f009 fc0c 	bl	80110e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d6:	461a      	mov	r2, r3
 80078d8:	2310      	movs	r3, #16
 80078da:	6093      	str	r3, [r2, #8]
 80078dc:	e03d      	b.n	800795a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80078de:	78fa      	ldrb	r2, [r7, #3]
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	4613      	mov	r3, r2
 80078e4:	011b      	lsls	r3, r3, #4
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	3326      	adds	r3, #38	@ 0x26
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d00a      	beq.n	800790a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80078f4:	78fa      	ldrb	r2, [r7, #3]
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	4613      	mov	r3, r2
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	1a9b      	subs	r3, r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	440b      	add	r3, r1
 8007902:	3326      	adds	r3, #38	@ 0x26
 8007904:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007906:	2b01      	cmp	r3, #1
 8007908:	d127      	bne.n	800795a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	4413      	add	r3, r2
 8007912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	440a      	add	r2, r1
 8007920:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007924:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007928:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	440b      	add	r3, r1
 8007938:	334c      	adds	r3, #76	@ 0x4c
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	334c      	adds	r3, #76	@ 0x4c
 800794e:	781a      	ldrb	r2, [r3, #0]
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f00e fea1 	bl	801669c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	799b      	ldrb	r3, [r3, #6]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d13b      	bne.n	80079da <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	3338      	adds	r3, #56	@ 0x38
 8007972:	6819      	ldr	r1, [r3, #0]
 8007974:	78fa      	ldrb	r2, [r7, #3]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4403      	add	r3, r0
 8007982:	3328      	adds	r3, #40	@ 0x28
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	440b      	add	r3, r1
 8007988:	1e59      	subs	r1, r3, #1
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	4613      	mov	r3, r2
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4403      	add	r3, r0
 8007998:	3328      	adds	r3, #40	@ 0x28
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	fbb1 f3f3 	udiv	r3, r1, r3
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 8470 	beq.w	800828a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80079aa:	78fa      	ldrb	r2, [r7, #3]
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	333c      	adds	r3, #60	@ 0x3c
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	f083 0301 	eor.w	r3, r3, #1
 80079c2:	b2d8      	uxtb	r0, r3
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	333c      	adds	r3, #60	@ 0x3c
 80079d2:	4602      	mov	r2, r0
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	f000 bc58 	b.w	800828a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	333c      	adds	r3, #60	@ 0x3c
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	78fa      	ldrb	r2, [r7, #3]
 80079ee:	f083 0301 	eor.w	r3, r3, #1
 80079f2:	b2d8      	uxtb	r0, r3
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	333c      	adds	r3, #60	@ 0x3c
 8007a02:	4602      	mov	r2, r0
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	f000 bc40 	b.w	800828a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f008 fdc7 	bl	80105a6 <USB_ReadChInterrupts>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	d131      	bne.n	8007a86 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2320      	movs	r3, #32
 8007a32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	331a      	adds	r3, #26
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	f040 841f 	bne.w	800828a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	331b      	adds	r3, #27
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007a60:	78fa      	ldrb	r2, [r7, #3]
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	1a9b      	subs	r3, r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	334d      	adds	r3, #77	@ 0x4d
 8007a70:	2203      	movs	r2, #3
 8007a72:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f009 fb30 	bl	80110e2 <USB_HC_Halt>
 8007a82:	f000 bc02 	b.w	800828a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f008 fd89 	bl	80105a6 <USB_ReadChInterrupts>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	f040 8305 	bne.w	80080aa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aac:	461a      	mov	r2, r3
 8007aae:	2302      	movs	r3, #2
 8007ab0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	1a9b      	subs	r3, r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	334d      	adds	r3, #77	@ 0x4d
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d114      	bne.n	8007af2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	1a9b      	subs	r3, r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	334d      	adds	r3, #77	@ 0x4d
 8007ad8:	2202      	movs	r2, #2
 8007ada:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	334c      	adds	r3, #76	@ 0x4c
 8007aec:	2201      	movs	r2, #1
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	e2cc      	b.n	800808c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	334d      	adds	r3, #77	@ 0x4d
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b06      	cmp	r3, #6
 8007b06:	d114      	bne.n	8007b32 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007b08:	78fa      	ldrb	r2, [r7, #3]
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	1a9b      	subs	r3, r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	334d      	adds	r3, #77	@ 0x4d
 8007b18:	2202      	movs	r2, #2
 8007b1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007b1c:	78fa      	ldrb	r2, [r7, #3]
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	334c      	adds	r3, #76	@ 0x4c
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	701a      	strb	r2, [r3, #0]
 8007b30:	e2ac      	b.n	800808c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4613      	mov	r3, r2
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	440b      	add	r3, r1
 8007b40:	334d      	adds	r3, #77	@ 0x4d
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b07      	cmp	r3, #7
 8007b46:	d00b      	beq.n	8007b60 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	334d      	adds	r3, #77	@ 0x4d
 8007b58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007b5a:	2b09      	cmp	r3, #9
 8007b5c:	f040 80a6 	bne.w	8007cac <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	334d      	adds	r3, #77	@ 0x4d
 8007b70:	2202      	movs	r2, #2
 8007b72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	3344      	adds	r3, #68	@ 0x44
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	1c59      	adds	r1, r3, #1
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4403      	add	r3, r0
 8007b94:	3344      	adds	r3, #68	@ 0x44
 8007b96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	1a9b      	subs	r3, r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	3344      	adds	r3, #68	@ 0x44
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d943      	bls.n	8007c36 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	1a9b      	subs	r3, r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	3344      	adds	r3, #68	@ 0x44
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8007bc2:	78fa      	ldrb	r2, [r7, #3]
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	1a9b      	subs	r3, r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	331a      	adds	r3, #26
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d123      	bne.n	8007c20 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8007bd8:	78fa      	ldrb	r2, [r7, #3]
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	331b      	adds	r3, #27
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8007bec:	78fa      	ldrb	r2, [r7, #3]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	331c      	adds	r3, #28
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	78fa      	ldrb	r2, [r7, #3]
 8007c10:	0151      	lsls	r1, r2, #5
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	440a      	add	r2, r1
 8007c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c1e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	011b      	lsls	r3, r3, #4
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	334c      	adds	r3, #76	@ 0x4c
 8007c30:	2204      	movs	r2, #4
 8007c32:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007c34:	e229      	b.n	800808a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	334c      	adds	r3, #76	@ 0x4c
 8007c46:	2202      	movs	r2, #2
 8007c48:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	3326      	adds	r3, #38	@ 0x26
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007c60:	78fa      	ldrb	r2, [r7, #3]
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	4613      	mov	r3, r2
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	1a9b      	subs	r3, r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	3326      	adds	r3, #38	@ 0x26
 8007c70:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	f040 8209 	bne.w	800808a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c8e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c96:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007caa:	e1ee      	b.n	800808a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	334d      	adds	r3, #77	@ 0x4d
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b05      	cmp	r3, #5
 8007cc0:	f040 80c8 	bne.w	8007e54 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	334d      	adds	r3, #77	@ 0x4d
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	331b      	adds	r3, #27
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	f040 81ce 	bne.w	800808c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	3326      	adds	r3, #38	@ 0x26
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d16b      	bne.n	8007dde <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	3348      	adds	r3, #72	@ 0x48
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	1c59      	adds	r1, r3, #1
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	1a9b      	subs	r3, r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4403      	add	r3, r0
 8007d26:	3348      	adds	r3, #72	@ 0x48
 8007d28:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8007d2a:	78fa      	ldrb	r2, [r7, #3]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	1a9b      	subs	r3, r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	3348      	adds	r3, #72	@ 0x48
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d943      	bls.n	8007dc8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	3348      	adds	r3, #72	@ 0x48
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	6879      	ldr	r1, [r7, #4]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	1a9b      	subs	r3, r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	440b      	add	r3, r1
 8007d62:	331b      	adds	r3, #27
 8007d64:	2200      	movs	r2, #0
 8007d66:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	3344      	adds	r3, #68	@ 0x44
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d809      	bhi.n	8007d92 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8007d7e:	78fa      	ldrb	r2, [r7, #3]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	331c      	adds	r3, #28
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	78fa      	ldrb	r2, [r7, #3]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007db0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	334c      	adds	r3, #76	@ 0x4c
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	e014      	b.n	8007df2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	334c      	adds	r3, #76	@ 0x4c
 8007dd8:	2202      	movs	r2, #2
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	e009      	b.n	8007df2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	334c      	adds	r3, #76	@ 0x4c
 8007dee:	2202      	movs	r2, #2
 8007df0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007df2:	78fa      	ldrb	r2, [r7, #3]
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	1a9b      	subs	r3, r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	3326      	adds	r3, #38	@ 0x26
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007e08:	78fa      	ldrb	r2, [r7, #3]
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	1a9b      	subs	r3, r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	440b      	add	r3, r1
 8007e16:	3326      	adds	r3, #38	@ 0x26
 8007e18:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	f040 8136 	bne.w	800808c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e36:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e3e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e11b      	b.n	800808c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007e54:	78fa      	ldrb	r2, [r7, #3]
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	1a9b      	subs	r3, r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	440b      	add	r3, r1
 8007e62:	334d      	adds	r3, #77	@ 0x4d
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	f040 8081 	bne.w	8007f6e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007e6c:	78fa      	ldrb	r2, [r7, #3]
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	4613      	mov	r3, r2
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	334d      	adds	r3, #77	@ 0x4d
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007e80:	78fa      	ldrb	r2, [r7, #3]
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	4613      	mov	r3, r2
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	440b      	add	r3, r1
 8007e8e:	331b      	adds	r3, #27
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	f040 80fa 	bne.w	800808c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007e98:	78fa      	ldrb	r2, [r7, #3]
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	334c      	adds	r3, #76	@ 0x4c
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	78fa      	ldrb	r2, [r7, #3]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eca:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eea:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	78fa      	ldrb	r2, [r7, #3]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f06:	f023 0320 	bic.w	r3, r3, #32
 8007f0a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4613      	mov	r3, r2
 8007f12:	011b      	lsls	r3, r3, #4
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	3326      	adds	r3, #38	@ 0x26
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	3326      	adds	r3, #38	@ 0x26
 8007f32:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	f040 80a9 	bne.w	800808c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f50:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f58:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f66:	461a      	mov	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	e08e      	b.n	800808c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	334d      	adds	r3, #77	@ 0x4d
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d143      	bne.n	800800c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	334d      	adds	r3, #77	@ 0x4d
 8007f94:	2202      	movs	r2, #2
 8007f96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007f98:	78fa      	ldrb	r2, [r7, #3]
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	334c      	adds	r3, #76	@ 0x4c
 8007fa8:	2202      	movs	r2, #2
 8007faa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	3326      	adds	r3, #38	@ 0x26
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007fc2:	78fa      	ldrb	r2, [r7, #3]
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	3326      	adds	r3, #38	@ 0x26
 8007fd2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d159      	bne.n	800808c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007fee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ff6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008004:	461a      	mov	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e03f      	b.n	800808c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800800c:	78fa      	ldrb	r2, [r7, #3]
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	334d      	adds	r3, #77	@ 0x4d
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b08      	cmp	r3, #8
 8008020:	d126      	bne.n	8008070 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	334d      	adds	r3, #77	@ 0x4d
 8008032:	2202      	movs	r2, #2
 8008034:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	1a9b      	subs	r3, r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	3344      	adds	r3, #68	@ 0x44
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1c59      	adds	r1, r3, #1
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4613      	mov	r3, r2
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	1a9b      	subs	r3, r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4403      	add	r3, r0
 8008056:	3344      	adds	r3, #68	@ 0x44
 8008058:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	4613      	mov	r3, r2
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	1a9b      	subs	r3, r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	440b      	add	r3, r1
 8008068:	334c      	adds	r3, #76	@ 0x4c
 800806a:	2204      	movs	r2, #4
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	e00d      	b.n	800808c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8008070:	78fa      	ldrb	r2, [r7, #3]
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	334d      	adds	r3, #77	@ 0x4d
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b02      	cmp	r3, #2
 8008084:	f000 8100 	beq.w	8008288 <HCD_HC_IN_IRQHandler+0xcca>
 8008088:	e000      	b.n	800808c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800808a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	334c      	adds	r3, #76	@ 0x4c
 800809c:	781a      	ldrb	r2, [r3, #0]
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f00e fafa 	bl	801669c <HAL_HCD_HC_NotifyURBChange_Callback>
 80080a8:	e0ef      	b.n	800828a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	78fa      	ldrb	r2, [r7, #3]
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f008 fa77 	bl	80105a6 <USB_ReadChInterrupts>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080be:	2b40      	cmp	r3, #64	@ 0x40
 80080c0:	d12f      	bne.n	8008122 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ce:	461a      	mov	r2, r3
 80080d0:	2340      	movs	r3, #64	@ 0x40
 80080d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	334d      	adds	r3, #77	@ 0x4d
 80080e4:	2205      	movs	r2, #5
 80080e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80080e8:	78fa      	ldrb	r2, [r7, #3]
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	4613      	mov	r3, r2
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	1a9b      	subs	r3, r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	331a      	adds	r3, #26
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	1a9b      	subs	r3, r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	3344      	adds	r3, #68	@ 0x44
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f008 ffe1 	bl	80110e2 <USB_HC_Halt>
 8008120:	e0b3      	b.n	800828a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f008 fa3b 	bl	80105a6 <USB_ReadChInterrupts>
 8008130:	4603      	mov	r3, r0
 8008132:	f003 0310 	and.w	r3, r3, #16
 8008136:	2b10      	cmp	r3, #16
 8008138:	f040 80a7 	bne.w	800828a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4613      	mov	r3, r2
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	3326      	adds	r3, #38	@ 0x26
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b03      	cmp	r3, #3
 8008150:	d11b      	bne.n	800818a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	3344      	adds	r3, #68	@ 0x44
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	334d      	adds	r3, #77	@ 0x4d
 8008176:	2204      	movs	r2, #4
 8008178:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f008 ffad 	bl	80110e2 <USB_HC_Halt>
 8008188:	e03f      	b.n	800820a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3326      	adds	r3, #38	@ 0x26
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80081a0:	78fa      	ldrb	r2, [r7, #3]
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	3326      	adds	r3, #38	@ 0x26
 80081b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d129      	bne.n	800820a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	3344      	adds	r3, #68	@ 0x44
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	799b      	ldrb	r3, [r3, #6]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <HCD_HC_IN_IRQHandler+0xc2a>
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	6879      	ldr	r1, [r7, #4]
 80081d6:	4613      	mov	r3, r2
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	440b      	add	r3, r1
 80081e0:	331b      	adds	r3, #27
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d110      	bne.n	800820a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80081e8:	78fa      	ldrb	r2, [r7, #3]
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	4613      	mov	r3, r2
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	1a9b      	subs	r3, r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	440b      	add	r3, r1
 80081f6:	334d      	adds	r3, #77	@ 0x4d
 80081f8:	2204      	movs	r2, #4
 80081fa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	4611      	mov	r1, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f008 ff6c 	bl	80110e2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800820a:	78fa      	ldrb	r2, [r7, #3]
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	4613      	mov	r3, r2
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	331b      	adds	r3, #27
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d129      	bne.n	8008274 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4613      	mov	r3, r2
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	440b      	add	r3, r1
 800822e:	331b      	adds	r3, #27
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	4413      	add	r3, r2
 800823c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	440a      	add	r2, r1
 800824a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800824e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008252:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	4413      	add	r3, r2
 800825c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	0151      	lsls	r1, r2, #5
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	440a      	add	r2, r1
 800826a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800826e:	f043 0320 	orr.w	r3, r3, #32
 8008272:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	4413      	add	r3, r2
 800827c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008280:	461a      	mov	r2, r3
 8008282:	2310      	movs	r3, #16
 8008284:	6093      	str	r3, [r2, #8]
 8008286:	e000      	b.n	800828a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008288:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	78fa      	ldrb	r2, [r7, #3]
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f008 f979 	bl	80105a6 <USB_ReadChInterrupts>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d11b      	bne.n	80082f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ca:	461a      	mov	r2, r3
 80082cc:	2304      	movs	r3, #4
 80082ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	4613      	mov	r3, r2
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	334d      	adds	r3, #77	@ 0x4d
 80082e0:	2207      	movs	r2, #7
 80082e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	78fa      	ldrb	r2, [r7, #3]
 80082ea:	4611      	mov	r1, r2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f008 fef8 	bl	80110e2 <USB_HC_Halt>
 80082f2:	f000 bc89 	b.w	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	4611      	mov	r1, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f008 f951 	bl	80105a6 <USB_ReadChInterrupts>
 8008304:	4603      	mov	r3, r0
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b20      	cmp	r3, #32
 800830c:	f040 8082 	bne.w	8008414 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	4413      	add	r3, r2
 8008318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831c:	461a      	mov	r2, r3
 800831e:	2320      	movs	r3, #32
 8008320:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	3319      	adds	r3, #25
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d124      	bne.n	8008382 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	011b      	lsls	r3, r3, #4
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	440b      	add	r3, r1
 8008346:	3319      	adds	r3, #25
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	334c      	adds	r3, #76	@ 0x4c
 800835c:	2202      	movs	r2, #2
 800835e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008360:	78fa      	ldrb	r2, [r7, #3]
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	334d      	adds	r3, #77	@ 0x4d
 8008370:	2203      	movs	r2, #3
 8008372:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	78fa      	ldrb	r2, [r7, #3]
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f008 feb0 	bl	80110e2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8008382:	78fa      	ldrb	r2, [r7, #3]
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	4613      	mov	r3, r2
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	331a      	adds	r3, #26
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	f040 8437 	bne.w	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	331b      	adds	r3, #27
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f040 842b 	bne.w	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	4613      	mov	r3, r2
 80083b8:	011b      	lsls	r3, r3, #4
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	3326      	adds	r3, #38	@ 0x26
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d009      	beq.n	80083dc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80083c8:	78fa      	ldrb	r2, [r7, #3]
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	331b      	adds	r3, #27
 80083d8:	2201      	movs	r2, #1
 80083da:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4613      	mov	r3, r2
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	334d      	adds	r3, #77	@ 0x4d
 80083ec:	2203      	movs	r2, #3
 80083ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f008 fe72 	bl	80110e2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4613      	mov	r3, r2
 8008404:	011b      	lsls	r3, r3, #4
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	3344      	adds	r3, #68	@ 0x44
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	e3f9      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f008 f8c2 	bl	80105a6 <USB_ReadChInterrupts>
 8008422:	4603      	mov	r3, r0
 8008424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800842c:	d111      	bne.n	8008452 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4413      	add	r3, r2
 8008436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800843a:	461a      	mov	r2, r3
 800843c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008440:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f008 fe49 	bl	80110e2 <USB_HC_Halt>
 8008450:	e3da      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f008 f8a3 	bl	80105a6 <USB_ReadChInterrupts>
 8008460:	4603      	mov	r3, r0
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d168      	bne.n	800853c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	3344      	adds	r3, #68	@ 0x44
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f008 f88d 	bl	80105a6 <USB_ReadChInterrupts>
 800848c:	4603      	mov	r3, r0
 800848e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008492:	2b40      	cmp	r3, #64	@ 0x40
 8008494:	d112      	bne.n	80084bc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008496:	78fa      	ldrb	r2, [r7, #3]
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	4613      	mov	r3, r2
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	440b      	add	r3, r1
 80084a4:	3319      	adds	r3, #25
 80084a6:	2201      	movs	r2, #1
 80084a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b6:	461a      	mov	r2, r3
 80084b8:	2340      	movs	r3, #64	@ 0x40
 80084ba:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80084bc:	78fa      	ldrb	r2, [r7, #3]
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	331b      	adds	r3, #27
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d019      	beq.n	8008506 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	331b      	adds	r3, #27
 80084e2:	2200      	movs	r2, #0
 80084e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80084e6:	78fb      	ldrb	r3, [r7, #3]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	78fa      	ldrb	r2, [r7, #3]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008504:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008512:	461a      	mov	r2, r3
 8008514:	2301      	movs	r3, #1
 8008516:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008518:	78fa      	ldrb	r2, [r7, #3]
 800851a:	6879      	ldr	r1, [r7, #4]
 800851c:	4613      	mov	r3, r2
 800851e:	011b      	lsls	r3, r3, #4
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	440b      	add	r3, r1
 8008526:	334d      	adds	r3, #77	@ 0x4d
 8008528:	2201      	movs	r2, #1
 800852a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f008 fdd4 	bl	80110e2 <USB_HC_Halt>
 800853a:	e365      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f008 f82e 	bl	80105a6 <USB_ReadChInterrupts>
 800854a:	4603      	mov	r3, r0
 800854c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008550:	2b40      	cmp	r3, #64	@ 0x40
 8008552:	d139      	bne.n	80085c8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4613      	mov	r3, r2
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	1a9b      	subs	r3, r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	334d      	adds	r3, #77	@ 0x4d
 8008564:	2205      	movs	r2, #5
 8008566:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008568:	78fa      	ldrb	r2, [r7, #3]
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	4613      	mov	r3, r2
 800856e:	011b      	lsls	r3, r3, #4
 8008570:	1a9b      	subs	r3, r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	331a      	adds	r3, #26
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	4613      	mov	r3, r2
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	440b      	add	r3, r1
 800858c:	3319      	adds	r3, #25
 800858e:	2201      	movs	r2, #1
 8008590:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	3344      	adds	r3, #68	@ 0x44
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	78fa      	ldrb	r2, [r7, #3]
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f008 fd97 	bl	80110e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c0:	461a      	mov	r2, r3
 80085c2:	2340      	movs	r3, #64	@ 0x40
 80085c4:	6093      	str	r3, [r2, #8]
 80085c6:	e31f      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	78fa      	ldrb	r2, [r7, #3]
 80085ce:	4611      	mov	r1, r2
 80085d0:	4618      	mov	r0, r3
 80085d2:	f007 ffe8 	bl	80105a6 <USB_ReadChInterrupts>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d11a      	bne.n	8008616 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ec:	461a      	mov	r2, r3
 80085ee:	2308      	movs	r3, #8
 80085f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	4613      	mov	r3, r2
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	1a9b      	subs	r3, r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	440b      	add	r3, r1
 8008600:	334d      	adds	r3, #77	@ 0x4d
 8008602:	2206      	movs	r2, #6
 8008604:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	78fa      	ldrb	r2, [r7, #3]
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f008 fd67 	bl	80110e2 <USB_HC_Halt>
 8008614:	e2f8      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f007 ffc1 	bl	80105a6 <USB_ReadChInterrupts>
 8008624:	4603      	mov	r3, r0
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b10      	cmp	r3, #16
 800862c:	d144      	bne.n	80086b8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800862e:	78fa      	ldrb	r2, [r7, #3]
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	4613      	mov	r3, r2
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	1a9b      	subs	r3, r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	440b      	add	r3, r1
 800863c:	3344      	adds	r3, #68	@ 0x44
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	440b      	add	r3, r1
 8008650:	334d      	adds	r3, #77	@ 0x4d
 8008652:	2204      	movs	r2, #4
 8008654:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008656:	78fa      	ldrb	r2, [r7, #3]
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	3319      	adds	r3, #25
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d114      	bne.n	8008696 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	3318      	adds	r3, #24
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	3319      	adds	r3, #25
 8008692:	2201      	movs	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f008 fd1f 	bl	80110e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086b0:	461a      	mov	r2, r3
 80086b2:	2310      	movs	r3, #16
 80086b4:	6093      	str	r3, [r2, #8]
 80086b6:	e2a7      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	4611      	mov	r1, r2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f007 ff70 	bl	80105a6 <USB_ReadChInterrupts>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086cc:	2b80      	cmp	r3, #128	@ 0x80
 80086ce:	f040 8083 	bne.w	80087d8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	799b      	ldrb	r3, [r3, #6]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d111      	bne.n	80086fe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	334d      	adds	r3, #77	@ 0x4d
 80086ea:	2207      	movs	r2, #7
 80086ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f008 fcf3 	bl	80110e2 <USB_HC_Halt>
 80086fc:	e062      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3344      	adds	r3, #68	@ 0x44
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	1c59      	adds	r1, r3, #1
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4613      	mov	r3, r2
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	1a9b      	subs	r3, r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4403      	add	r3, r0
 800871e:	3344      	adds	r3, #68	@ 0x44
 8008720:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4613      	mov	r3, r2
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	3344      	adds	r3, #68	@ 0x44
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d922      	bls.n	800877e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4613      	mov	r3, r2
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	3344      	adds	r3, #68	@ 0x44
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800874c:	78fa      	ldrb	r2, [r7, #3]
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	334c      	adds	r3, #76	@ 0x4c
 800875c:	2204      	movs	r2, #4
 800875e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	4613      	mov	r3, r2
 8008766:	011b      	lsls	r3, r3, #4
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	334c      	adds	r3, #76	@ 0x4c
 8008770:	781a      	ldrb	r2, [r3, #0]
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f00d ff90 	bl	801669c <HAL_HCD_HC_NotifyURBChange_Callback>
 800877c:	e022      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	334c      	adds	r3, #76	@ 0x4c
 800878e:	2202      	movs	r2, #2
 8008790:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	4413      	add	r3, r2
 800879a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087a8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087b0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087be:	461a      	mov	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087d0:	461a      	mov	r2, r3
 80087d2:	2380      	movs	r3, #128	@ 0x80
 80087d4:	6093      	str	r3, [r2, #8]
 80087d6:	e217      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f007 fee0 	bl	80105a6 <USB_ReadChInterrupts>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087f0:	d11b      	bne.n	800882a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	1a9b      	subs	r3, r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	334d      	adds	r3, #77	@ 0x4d
 8008802:	2209      	movs	r2, #9
 8008804:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f008 fc67 	bl	80110e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4413      	add	r3, r2
 800881c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008820:	461a      	mov	r2, r3
 8008822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008826:	6093      	str	r3, [r2, #8]
 8008828:	e1ee      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	4611      	mov	r1, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f007 feb7 	bl	80105a6 <USB_ReadChInterrupts>
 8008838:	4603      	mov	r3, r0
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b02      	cmp	r3, #2
 8008840:	f040 81df 	bne.w	8008c02 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	4413      	add	r3, r2
 800884c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008850:	461a      	mov	r2, r3
 8008852:	2302      	movs	r3, #2
 8008854:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	334d      	adds	r3, #77	@ 0x4d
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2b01      	cmp	r3, #1
 800886a:	f040 8093 	bne.w	8008994 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	4613      	mov	r3, r2
 8008874:	011b      	lsls	r3, r3, #4
 8008876:	1a9b      	subs	r3, r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	440b      	add	r3, r1
 800887c:	334d      	adds	r3, #77	@ 0x4d
 800887e:	2202      	movs	r2, #2
 8008880:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	1a9b      	subs	r3, r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	440b      	add	r3, r1
 8008890:	334c      	adds	r3, #76	@ 0x4c
 8008892:	2201      	movs	r2, #1
 8008894:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	3326      	adds	r3, #38	@ 0x26
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d00b      	beq.n	80088c4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80088ac:	78fa      	ldrb	r2, [r7, #3]
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	4613      	mov	r3, r2
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	3326      	adds	r3, #38	@ 0x26
 80088bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80088be:	2b03      	cmp	r3, #3
 80088c0:	f040 8190 	bne.w	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	799b      	ldrb	r3, [r3, #6]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d115      	bne.n	80088f8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80088cc:	78fa      	ldrb	r2, [r7, #3]
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	011b      	lsls	r3, r3, #4
 80088d4:	1a9b      	subs	r3, r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	333d      	adds	r3, #61	@ 0x3d
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	f083 0301 	eor.w	r3, r3, #1
 80088e4:	b2d8      	uxtb	r0, r3
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	333d      	adds	r3, #61	@ 0x3d
 80088f4:	4602      	mov	r2, r0
 80088f6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	799b      	ldrb	r3, [r3, #6]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	f040 8171 	bne.w	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	4613      	mov	r3, r2
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	3334      	adds	r3, #52	@ 0x34
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8165 	beq.w	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	1a9b      	subs	r3, r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	3334      	adds	r3, #52	@ 0x34
 800892a:	6819      	ldr	r1, [r3, #0]
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4613      	mov	r3, r2
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4403      	add	r3, r0
 800893a:	3328      	adds	r3, #40	@ 0x28
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	440b      	add	r3, r1
 8008940:	1e59      	subs	r1, r3, #1
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4403      	add	r3, r0
 8008950:	3328      	adds	r3, #40	@ 0x28
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	fbb1 f3f3 	udiv	r3, r1, r3
 8008958:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 813f 	beq.w	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008966:	78fa      	ldrb	r2, [r7, #3]
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	4613      	mov	r3, r2
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	1a9b      	subs	r3, r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	440b      	add	r3, r1
 8008974:	333d      	adds	r3, #61	@ 0x3d
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	f083 0301 	eor.w	r3, r3, #1
 800897e:	b2d8      	uxtb	r0, r3
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	333d      	adds	r3, #61	@ 0x3d
 800898e:	4602      	mov	r2, r0
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	e127      	b.n	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4613      	mov	r3, r2
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	440b      	add	r3, r1
 80089a2:	334d      	adds	r3, #77	@ 0x4d
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d120      	bne.n	80089ec <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	334d      	adds	r3, #77	@ 0x4d
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4613      	mov	r3, r2
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	331b      	adds	r3, #27
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f040 8107 	bne.w	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	334c      	adds	r3, #76	@ 0x4c
 80089e6:	2202      	movs	r2, #2
 80089e8:	701a      	strb	r2, [r3, #0]
 80089ea:	e0fb      	b.n	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	4613      	mov	r3, r2
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	334d      	adds	r3, #77	@ 0x4d
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d13a      	bne.n	8008a78 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008a02:	78fa      	ldrb	r2, [r7, #3]
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	4613      	mov	r3, r2
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	440b      	add	r3, r1
 8008a10:	334d      	adds	r3, #77	@ 0x4d
 8008a12:	2202      	movs	r2, #2
 8008a14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	334c      	adds	r3, #76	@ 0x4c
 8008a26:	2202      	movs	r2, #2
 8008a28:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	1a9b      	subs	r3, r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	331b      	adds	r3, #27
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	f040 80d1 	bne.w	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008a42:	78fa      	ldrb	r2, [r7, #3]
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	1a9b      	subs	r3, r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	331b      	adds	r3, #27
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a74:	6053      	str	r3, [r2, #4]
 8008a76:	e0b5      	b.n	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008a78:	78fa      	ldrb	r2, [r7, #3]
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	334d      	adds	r3, #77	@ 0x4d
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	d114      	bne.n	8008ab8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	4613      	mov	r3, r2
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	1a9b      	subs	r3, r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	440b      	add	r3, r1
 8008a9c:	334d      	adds	r3, #77	@ 0x4d
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8008aa2:	78fa      	ldrb	r2, [r7, #3]
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	011b      	lsls	r3, r3, #4
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	440b      	add	r3, r1
 8008ab0:	334c      	adds	r3, #76	@ 0x4c
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	e095      	b.n	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008ab8:	78fa      	ldrb	r2, [r7, #3]
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	4613      	mov	r3, r2
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	1a9b      	subs	r3, r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	440b      	add	r3, r1
 8008ac6:	334d      	adds	r3, #77	@ 0x4d
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b06      	cmp	r3, #6
 8008acc:	d114      	bne.n	8008af8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	1a9b      	subs	r3, r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	440b      	add	r3, r1
 8008adc:	334d      	adds	r3, #77	@ 0x4d
 8008ade:	2202      	movs	r2, #2
 8008ae0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	011b      	lsls	r3, r3, #4
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	440b      	add	r3, r1
 8008af0:	334c      	adds	r3, #76	@ 0x4c
 8008af2:	2205      	movs	r2, #5
 8008af4:	701a      	strb	r2, [r3, #0]
 8008af6:	e075      	b.n	8008be4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008af8:	78fa      	ldrb	r2, [r7, #3]
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	4613      	mov	r3, r2
 8008afe:	011b      	lsls	r3, r3, #4
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	334d      	adds	r3, #77	@ 0x4d
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b07      	cmp	r3, #7
 8008b0c:	d00a      	beq.n	8008b24 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	334d      	adds	r3, #77	@ 0x4d
 8008b1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008b20:	2b09      	cmp	r3, #9
 8008b22:	d170      	bne.n	8008c06 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	1a9b      	subs	r3, r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	440b      	add	r3, r1
 8008b32:	334d      	adds	r3, #77	@ 0x4d
 8008b34:	2202      	movs	r2, #2
 8008b36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	3344      	adds	r3, #68	@ 0x44
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	1c59      	adds	r1, r3, #1
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4403      	add	r3, r0
 8008b58:	3344      	adds	r3, #68	@ 0x44
 8008b5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4613      	mov	r3, r2
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	3344      	adds	r3, #68	@ 0x44
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d914      	bls.n	8008b9c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	3344      	adds	r3, #68	@ 0x44
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	011b      	lsls	r3, r3, #4
 8008b8e:	1a9b      	subs	r3, r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	334c      	adds	r3, #76	@ 0x4c
 8008b96:	2204      	movs	r2, #4
 8008b98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008b9a:	e022      	b.n	8008be2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008b9c:	78fa      	ldrb	r2, [r7, #3]
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	440b      	add	r3, r1
 8008baa:	334c      	adds	r3, #76	@ 0x4c
 8008bac:	2202      	movs	r2, #2
 8008bae:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bc6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008be2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008be4:	78fa      	ldrb	r2, [r7, #3]
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	4613      	mov	r3, r2
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	1a9b      	subs	r3, r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	440b      	add	r3, r1
 8008bf2:	334c      	adds	r3, #76	@ 0x4c
 8008bf4:	781a      	ldrb	r2, [r3, #0]
 8008bf6:	78fb      	ldrb	r3, [r7, #3]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f00d fd4e 	bl	801669c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008c00:	e002      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8008c02:	bf00      	nop
 8008c04:	e000      	b.n	8008c08 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8008c06:	bf00      	nop
  }
}
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b08a      	sub	sp, #40	@ 0x28
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	f003 030f 	and.w	r3, r3, #15
 8008c2e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	0c5b      	lsrs	r3, r3, #17
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	091b      	lsrs	r3, r3, #4
 8008c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c42:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d004      	beq.n	8008c54 <HCD_RXQLVL_IRQHandler+0x46>
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b05      	cmp	r3, #5
 8008c4e:	f000 80b6 	beq.w	8008dbe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008c52:	e0b7      	b.n	8008dc4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80b3 	beq.w	8008dc2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	4613      	mov	r3, r2
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	440b      	add	r3, r1
 8008c6a:	332c      	adds	r3, #44	@ 0x2c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 80a7 	beq.w	8008dc2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	1a9b      	subs	r3, r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	440b      	add	r3, r1
 8008c82:	3338      	adds	r3, #56	@ 0x38
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	18d1      	adds	r1, r2, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4403      	add	r3, r0
 8008c98:	3334      	adds	r3, #52	@ 0x34
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	f200 8083 	bhi.w	8008da8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	4613      	mov	r3, r2
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	1a9b      	subs	r3, r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	332c      	adds	r3, #44	@ 0x2c
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	b292      	uxth	r2, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	f007 fc07 	bl	80104d0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	011b      	lsls	r3, r3, #4
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	332c      	adds	r3, #44	@ 0x2c
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	18d1      	adds	r1, r2, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	011b      	lsls	r3, r3, #4
 8008ce0:	1a9b      	subs	r3, r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4403      	add	r3, r0
 8008ce6:	332c      	adds	r3, #44	@ 0x2c
 8008ce8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	011b      	lsls	r3, r3, #4
 8008cf2:	1a9b      	subs	r3, r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	440b      	add	r3, r1
 8008cf8:	3338      	adds	r3, #56	@ 0x38
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	18d1      	adds	r1, r2, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	4613      	mov	r3, r2
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	1a9b      	subs	r3, r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4403      	add	r3, r0
 8008d0e:	3338      	adds	r3, #56	@ 0x38
 8008d10:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	0cdb      	lsrs	r3, r3, #19
 8008d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d26:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	3328      	adds	r3, #40	@ 0x28
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d13f      	bne.n	8008dc2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d03c      	beq.n	8008dc2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d5e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d66:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d74:	461a      	mov	r2, r3
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	1a9b      	subs	r3, r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	333c      	adds	r3, #60	@ 0x3c
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	f083 0301 	eor.w	r3, r3, #1
 8008d90:	b2d8      	uxtb	r0, r3
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	4613      	mov	r3, r2
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	333c      	adds	r3, #60	@ 0x3c
 8008da2:	4602      	mov	r2, r0
 8008da4:	701a      	strb	r2, [r3, #0]
      break;
 8008da6:	e00c      	b.n	8008dc2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	4613      	mov	r3, r2
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	440b      	add	r3, r1
 8008db6:	334c      	adds	r3, #76	@ 0x4c
 8008db8:	2204      	movs	r2, #4
 8008dba:	701a      	strb	r2, [r3, #0]
      break;
 8008dbc:	e001      	b.n	8008dc2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8008dbe:	bf00      	nop
 8008dc0:	e000      	b.n	8008dc4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008dc2:	bf00      	nop
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	3728      	adds	r7, #40	@ 0x28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008df8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d10b      	bne.n	8008e1c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d102      	bne.n	8008e14 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f00d fc28 	bl	8016664 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f043 0302 	orr.w	r3, r3, #2
 8008e1a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f003 0308 	and.w	r3, r3, #8
 8008e22:	2b08      	cmp	r3, #8
 8008e24:	d132      	bne.n	8008e8c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f043 0308 	orr.w	r3, r3, #8
 8008e2c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d126      	bne.n	8008e86 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	7a5b      	ldrb	r3, [r3, #9]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d113      	bne.n	8008e68 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008e46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e4a:	d106      	bne.n	8008e5a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2102      	movs	r1, #2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f007 fcc6 	bl	80107e4 <USB_InitFSLSPClkSel>
 8008e58:	e011      	b.n	8008e7e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2101      	movs	r1, #1
 8008e60:	4618      	mov	r0, r3
 8008e62:	f007 fcbf 	bl	80107e4 <USB_InitFSLSPClkSel>
 8008e66:	e00a      	b.n	8008e7e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	79db      	ldrb	r3, [r3, #7]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d106      	bne.n	8008e7e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e76:	461a      	mov	r2, r3
 8008e78:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008e7c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f00d fc1e 	bl	80166c0 <HAL_HCD_PortEnabled_Callback>
 8008e84:	e002      	b.n	8008e8c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f00d fc28 	bl	80166dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	2b20      	cmp	r3, #32
 8008e94:	d103      	bne.n	8008e9e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f043 0320 	orr.w	r3, r3, #32
 8008e9c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6013      	str	r3, [r2, #0]
}
 8008eaa:	bf00      	nop
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e08b      	b.n	8008fde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7fa f9ea 	bl	80032b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2224      	movs	r2, #36	@ 0x24
 8008ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0201 	bic.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d107      	bne.n	8008f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f2a:	609a      	str	r2, [r3, #8]
 8008f2c:	e006      	b.n	8008f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d108      	bne.n	8008f56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f52:	605a      	str	r2, [r3, #4]
 8008f54:	e007      	b.n	8008f66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6859      	ldr	r1, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe8 <HAL_I2C_Init+0x134>)
 8008f72:	430b      	orrs	r3, r1
 8008f74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691a      	ldr	r2, [r3, #16]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	69d9      	ldr	r1, [r3, #28]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1a      	ldr	r2, [r3, #32]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0201 	orr.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	02008000 	.word	0x02008000

08008fec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	d138      	bne.n	8009074 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800900c:	2302      	movs	r3, #2
 800900e:	e032      	b.n	8009076 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2224      	movs	r2, #36	@ 0x24
 800901c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0201 	bic.w	r2, r2, #1
 800902e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800903e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6819      	ldr	r1, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	430a      	orrs	r2, r1
 800904e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0201 	orr.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2220      	movs	r2, #32
 8009064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	e000      	b.n	8009076 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009074:	2302      	movs	r3, #2
  }
}
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009082:	b480      	push	{r7}
 8009084:	b085      	sub	sp, #20
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b20      	cmp	r3, #32
 8009096:	d139      	bne.n	800910c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d101      	bne.n	80090a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090a2:	2302      	movs	r3, #2
 80090a4:	e033      	b.n	800910e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2224      	movs	r2, #36	@ 0x24
 80090b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 0201 	bic.w	r2, r2, #1
 80090c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80090d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	e000      	b.n	800910e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800910c:	2302      	movs	r3, #2
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e08f      	b.n	800924c <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7fa f95f 	bl	8003404 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2202      	movs	r2, #2
 800914a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	699a      	ldr	r2, [r3, #24]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800915c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6999      	ldr	r1, [r3, #24]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009172:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6999      	ldr	r1, [r3, #24]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	430a      	orrs	r2, r1
 8009196:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	041b      	lsls	r3, r3, #16
 800919e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a19      	ldr	r1, [r3, #32]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b2:	041b      	lsls	r3, r3, #16
 80091b4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c8:	041b      	lsls	r3, r3, #16
 80091ca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80091fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4313      	orrs	r3, r2
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0206 	orr.w	r2, r2, #6
 8009228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	699a      	ldr	r2, [r3, #24]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0201 	orr.w	r2, r2, #1
 8009238:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009262:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800926a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f003 0304 	and.w	r3, r3, #4
 8009272:	2b00      	cmp	r3, #0
 8009274:	d023      	beq.n	80092be <HAL_LTDC_IRQHandler+0x6a>
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	f003 0304 	and.w	r3, r3, #4
 800927c:	2b00      	cmp	r3, #0
 800927e:	d01e      	beq.n	80092be <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0204 	bic.w	r2, r2, #4
 800928e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2204      	movs	r2, #4
 8009296:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800929e:	f043 0201 	orr.w	r2, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2204      	movs	r2, #4
 80092ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f86f 	bl	800939c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d023      	beq.n	8009310 <HAL_LTDC_IRQHandler+0xbc>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d01e      	beq.n	8009310 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0202 	bic.w	r2, r2, #2
 80092e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2202      	movs	r2, #2
 80092e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80092f0:	f043 0202 	orr.w	r2, r3, #2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2204      	movs	r2, #4
 80092fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f846 	bl	800939c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d01b      	beq.n	8009352 <HAL_LTDC_IRQHandler+0xfe>
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d016      	beq.n	8009352 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0201 	bic.w	r2, r2, #1
 8009332:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2201      	movs	r2, #1
 800933a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f82f 	bl	80093b0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f003 0308 	and.w	r3, r3, #8
 8009358:	2b00      	cmp	r3, #0
 800935a:	d01b      	beq.n	8009394 <HAL_LTDC_IRQHandler+0x140>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d016      	beq.n	8009394 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0208 	bic.w	r2, r2, #8
 8009374:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2208      	movs	r2, #8
 800937c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f818 	bl	80093c4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80093d8:	b5b0      	push	{r4, r5, r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_LTDC_ConfigLayer+0x1a>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e02c      	b.n	800944c <HAL_LTDC_ConfigLayer+0x74>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2202      	movs	r2, #2
 80093fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2134      	movs	r1, #52	@ 0x34
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	4413      	add	r3, r2
 800940e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4614      	mov	r4, r2
 8009416:	461d      	mov	r5, r3
 8009418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800941a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800941c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800941e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	68b9      	ldr	r1, [r7, #8]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 f811 	bl	8009454 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2201      	movs	r2, #1
 8009438:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bdb0      	pop	{r4, r5, r7, pc}

08009454 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009454:	b480      	push	{r7}
 8009456:	b089      	sub	sp, #36	@ 0x24
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	0c1b      	lsrs	r3, r3, #16
 800946c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009470:	4413      	add	r3, r2
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	01db      	lsls	r3, r3, #7
 8009480:	4413      	add	r3, r2
 8009482:	3384      	adds	r3, #132	@ 0x84
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	6812      	ldr	r2, [r2, #0]
 800948a:	4611      	mov	r1, r2
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	01d2      	lsls	r2, r2, #7
 8009490:	440a      	add	r2, r1
 8009492:	3284      	adds	r2, #132	@ 0x84
 8009494:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009498:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	0c1b      	lsrs	r3, r3, #16
 80094a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80094aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80094ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4619      	mov	r1, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	01db      	lsls	r3, r3, #7
 80094b8:	440b      	add	r3, r1
 80094ba:	3384      	adds	r3, #132	@ 0x84
 80094bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80094c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	68da      	ldr	r2, [r3, #12]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094d2:	4413      	add	r3, r2
 80094d4:	041b      	lsls	r3, r3, #16
 80094d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	01db      	lsls	r3, r3, #7
 80094e2:	4413      	add	r3, r2
 80094e4:	3384      	adds	r3, #132	@ 0x84
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	6812      	ldr	r2, [r2, #0]
 80094ec:	4611      	mov	r1, r2
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	01d2      	lsls	r2, r2, #7
 80094f2:	440a      	add	r2, r1
 80094f4:	3284      	adds	r2, #132	@ 0x84
 80094f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80094fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800950a:	4413      	add	r3, r2
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4619      	mov	r1, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	01db      	lsls	r3, r3, #7
 8009518:	440b      	add	r3, r1
 800951a:	3384      	adds	r3, #132	@ 0x84
 800951c:	4619      	mov	r1, r3
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	4313      	orrs	r3, r2
 8009522:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	01db      	lsls	r3, r3, #7
 800952e:	4413      	add	r3, r2
 8009530:	3384      	adds	r3, #132	@ 0x84
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	6812      	ldr	r2, [r2, #0]
 8009538:	4611      	mov	r1, r2
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	01d2      	lsls	r2, r2, #7
 800953e:	440a      	add	r2, r1
 8009540:	3284      	adds	r2, #132	@ 0x84
 8009542:	f023 0307 	bic.w	r3, r3, #7
 8009546:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	01db      	lsls	r3, r3, #7
 8009552:	4413      	add	r3, r2
 8009554:	3384      	adds	r3, #132	@ 0x84
 8009556:	461a      	mov	r2, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800956e:	041b      	lsls	r3, r3, #16
 8009570:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	061b      	lsls	r3, r3, #24
 8009578:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009580:	461a      	mov	r2, r3
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	431a      	orrs	r2, r3
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	431a      	orrs	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4619      	mov	r1, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	01db      	lsls	r3, r3, #7
 8009594:	440b      	add	r3, r1
 8009596:	3384      	adds	r3, #132	@ 0x84
 8009598:	4619      	mov	r1, r3
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	4313      	orrs	r3, r2
 800959e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	461a      	mov	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	01db      	lsls	r3, r3, #7
 80095aa:	4413      	add	r3, r2
 80095ac:	3384      	adds	r3, #132	@ 0x84
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	6812      	ldr	r2, [r2, #0]
 80095b4:	4611      	mov	r1, r2
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	01d2      	lsls	r2, r2, #7
 80095ba:	440a      	add	r2, r1
 80095bc:	3284      	adds	r2, #132	@ 0x84
 80095be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80095c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	01db      	lsls	r3, r3, #7
 80095ce:	4413      	add	r3, r2
 80095d0:	3384      	adds	r3, #132	@ 0x84
 80095d2:	461a      	mov	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	01db      	lsls	r3, r3, #7
 80095e4:	4413      	add	r3, r2
 80095e6:	3384      	adds	r3, #132	@ 0x84
 80095e8:	69da      	ldr	r2, [r3, #28]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4619      	mov	r1, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	01db      	lsls	r3, r3, #7
 80095f4:	440b      	add	r3, r1
 80095f6:	3384      	adds	r3, #132	@ 0x84
 80095f8:	4619      	mov	r1, r3
 80095fa:	4b4f      	ldr	r3, [pc, #316]	@ (8009738 <LTDC_SetConfig+0x2e4>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	69da      	ldr	r2, [r3, #28]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	68f9      	ldr	r1, [r7, #12]
 800960a:	6809      	ldr	r1, [r1, #0]
 800960c:	4608      	mov	r0, r1
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	01c9      	lsls	r1, r1, #7
 8009612:	4401      	add	r1, r0
 8009614:	3184      	adds	r1, #132	@ 0x84
 8009616:	4313      	orrs	r3, r2
 8009618:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	01db      	lsls	r3, r3, #7
 8009624:	4413      	add	r3, r2
 8009626:	3384      	adds	r3, #132	@ 0x84
 8009628:	461a      	mov	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d102      	bne.n	800963e <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009638:	2304      	movs	r3, #4
 800963a:	61fb      	str	r3, [r7, #28]
 800963c:	e01b      	b.n	8009676 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d102      	bne.n	800964c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009646:	2303      	movs	r3, #3
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	e014      	b.n	8009676 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	2b04      	cmp	r3, #4
 8009652:	d00b      	beq.n	800966c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009658:	2b02      	cmp	r3, #2
 800965a:	d007      	beq.n	800966c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009660:	2b03      	cmp	r3, #3
 8009662:	d003      	beq.n	800966c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009668:	2b07      	cmp	r3, #7
 800966a:	d102      	bne.n	8009672 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800966c:	2302      	movs	r3, #2
 800966e:	61fb      	str	r3, [r7, #28]
 8009670:	e001      	b.n	8009676 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8009672:	2301      	movs	r3, #1
 8009674:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	01db      	lsls	r3, r3, #7
 8009680:	4413      	add	r3, r2
 8009682:	3384      	adds	r3, #132	@ 0x84
 8009684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	6812      	ldr	r2, [r2, #0]
 800968a:	4611      	mov	r1, r2
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	01d2      	lsls	r2, r2, #7
 8009690:	440a      	add	r2, r1
 8009692:	3284      	adds	r2, #132	@ 0x84
 8009694:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009698:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	fb02 f303 	mul.w	r3, r2, r3
 80096a4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6859      	ldr	r1, [r3, #4]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	1acb      	subs	r3, r1, r3
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	fb01 f303 	mul.w	r3, r1, r3
 80096b6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80096b8:	68f9      	ldr	r1, [r7, #12]
 80096ba:	6809      	ldr	r1, [r1, #0]
 80096bc:	4608      	mov	r0, r1
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	01c9      	lsls	r1, r1, #7
 80096c2:	4401      	add	r1, r0
 80096c4:	3184      	adds	r1, #132	@ 0x84
 80096c6:	4313      	orrs	r3, r2
 80096c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	01db      	lsls	r3, r3, #7
 80096d4:	4413      	add	r3, r2
 80096d6:	3384      	adds	r3, #132	@ 0x84
 80096d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4619      	mov	r1, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	01db      	lsls	r3, r3, #7
 80096e4:	440b      	add	r3, r1
 80096e6:	3384      	adds	r3, #132	@ 0x84
 80096e8:	4619      	mov	r1, r3
 80096ea:	4b14      	ldr	r3, [pc, #80]	@ (800973c <LTDC_SetConfig+0x2e8>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	01db      	lsls	r3, r3, #7
 80096fa:	4413      	add	r3, r2
 80096fc:	3384      	adds	r3, #132	@ 0x84
 80096fe:	461a      	mov	r2, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009704:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	01db      	lsls	r3, r3, #7
 8009710:	4413      	add	r3, r2
 8009712:	3384      	adds	r3, #132	@ 0x84
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	6812      	ldr	r2, [r2, #0]
 800971a:	4611      	mov	r1, r2
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	01d2      	lsls	r2, r2, #7
 8009720:	440a      	add	r2, r1
 8009722:	3284      	adds	r2, #132	@ 0x84
 8009724:	f043 0301 	orr.w	r3, r3, #1
 8009728:	6013      	str	r3, [r2, #0]
}
 800972a:	bf00      	nop
 800972c:	3724      	adds	r7, #36	@ 0x24
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	fffff8f8 	.word	0xfffff8f8
 800973c:	fffff800 	.word	0xfffff800

08009740 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009744:	4b05      	ldr	r3, [pc, #20]	@ (800975c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a04      	ldr	r2, [pc, #16]	@ (800975c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800974a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800974e:	6013      	str	r3, [r2, #0]
}
 8009750:	bf00      	nop
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40007000 	.word	0x40007000

08009760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800976a:	4b23      	ldr	r3, [pc, #140]	@ (80097f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800976c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976e:	4a22      	ldr	r2, [pc, #136]	@ (80097f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009774:	6413      	str	r3, [r2, #64]	@ 0x40
 8009776:	4b20      	ldr	r3, [pc, #128]	@ (80097f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009782:	4b1e      	ldr	r3, [pc, #120]	@ (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a1d      	ldr	r2, [pc, #116]	@ (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800978c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800978e:	f7fb f9bb 	bl	8004b08 <HAL_GetTick>
 8009792:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009794:	e009      	b.n	80097aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009796:	f7fb f9b7 	bl	8004b08 <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097a4:	d901      	bls.n	80097aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e022      	b.n	80097f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097aa:	4b14      	ldr	r3, [pc, #80]	@ (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097b6:	d1ee      	bne.n	8009796 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80097b8:	4b10      	ldr	r3, [pc, #64]	@ (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a0f      	ldr	r2, [pc, #60]	@ (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80097be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097c4:	f7fb f9a0 	bl	8004b08 <HAL_GetTick>
 80097c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097ca:	e009      	b.n	80097e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097cc:	f7fb f99c 	bl	8004b08 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097da:	d901      	bls.n	80097e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e007      	b.n	80097f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097e0:	4b06      	ldr	r3, [pc, #24]	@ (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ec:	d1ee      	bne.n	80097cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	40023800 	.word	0x40023800
 80097fc:	40007000 	.word	0x40007000

08009800 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af02      	add	r7, sp, #8
 8009806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009808:	f7fb f97e 	bl	8004b08 <HAL_GetTick>
 800980c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e067      	b.n	80098e8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10b      	bne.n	800983c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7f9 feb1 	bl	8003594 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009832:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f85e 	bl	80098f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	021a      	lsls	r2, r3, #8
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	2120      	movs	r1, #32
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f856 	bl	8009914 <QSPI_WaitFlagStateUntilTimeout>
 8009868:	4603      	mov	r3, r0
 800986a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d135      	bne.n	80098de <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	4b1d      	ldr	r3, [pc, #116]	@ (80098f0 <HAL_QSPI_Init+0xf0>)
 800987a:	4013      	ands	r3, r2
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	6852      	ldr	r2, [r2, #4]
 8009880:	0611      	lsls	r1, r2, #24
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	68d2      	ldr	r2, [r2, #12]
 8009886:	4311      	orrs	r1, r2
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	69d2      	ldr	r2, [r2, #28]
 800988c:	4311      	orrs	r1, r2
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6a12      	ldr	r2, [r2, #32]
 8009892:	4311      	orrs	r1, r2
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6812      	ldr	r2, [r2, #0]
 8009898:	430b      	orrs	r3, r1
 800989a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	4b14      	ldr	r3, [pc, #80]	@ (80098f4 <HAL_QSPI_Init+0xf4>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6912      	ldr	r2, [r2, #16]
 80098aa:	0411      	lsls	r1, r2, #16
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6952      	ldr	r2, [r2, #20]
 80098b0:	4311      	orrs	r1, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	6992      	ldr	r2, [r2, #24]
 80098b6:	4311      	orrs	r1, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	6812      	ldr	r2, [r2, #0]
 80098bc:	430b      	orrs	r3, r1
 80098be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80098e6:	7afb      	ldrb	r3, [r7, #11]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	00ffff2f 	.word	0x00ffff2f
 80098f4:	ffe0f8fe 	.word	0xffe0f8fe

080098f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	603b      	str	r3, [r7, #0]
 8009920:	4613      	mov	r3, r2
 8009922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009924:	e01a      	b.n	800995c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992c:	d016      	beq.n	800995c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800992e:	f7fb f8eb 	bl	8004b08 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	429a      	cmp	r2, r3
 800993c:	d302      	bcc.n	8009944 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10b      	bne.n	800995c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2204      	movs	r2, #4
 8009948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009950:	f043 0201 	orr.w	r2, r3, #1
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e00e      	b.n	800997a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	4013      	ands	r3, r2
 8009966:	2b00      	cmp	r3, #0
 8009968:	bf14      	ite	ne
 800996a:	2301      	movne	r3, #1
 800996c:	2300      	moveq	r3, #0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	461a      	mov	r2, r3
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	429a      	cmp	r2, r3
 8009976:	d1d6      	bne.n	8009926 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800998c:	2300      	movs	r3, #0
 800998e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e291      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 8087 	beq.w	8009ab6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80099a8:	4b96      	ldr	r3, [pc, #600]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 030c 	and.w	r3, r3, #12
 80099b0:	2b04      	cmp	r3, #4
 80099b2:	d00c      	beq.n	80099ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099b4:	4b93      	ldr	r3, [pc, #588]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f003 030c 	and.w	r3, r3, #12
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d112      	bne.n	80099e6 <HAL_RCC_OscConfig+0x62>
 80099c0:	4b90      	ldr	r3, [pc, #576]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099cc:	d10b      	bne.n	80099e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099ce:	4b8d      	ldr	r3, [pc, #564]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d06c      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x130>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d168      	bne.n	8009ab4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e26b      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ee:	d106      	bne.n	80099fe <HAL_RCC_OscConfig+0x7a>
 80099f0:	4b84      	ldr	r3, [pc, #528]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a83      	ldr	r2, [pc, #524]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 80099f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	e02e      	b.n	8009a5c <HAL_RCC_OscConfig+0xd8>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10c      	bne.n	8009a20 <HAL_RCC_OscConfig+0x9c>
 8009a06:	4b7f      	ldr	r3, [pc, #508]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	4b7c      	ldr	r3, [pc, #496]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a7b      	ldr	r2, [pc, #492]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	e01d      	b.n	8009a5c <HAL_RCC_OscConfig+0xd8>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a28:	d10c      	bne.n	8009a44 <HAL_RCC_OscConfig+0xc0>
 8009a2a:	4b76      	ldr	r3, [pc, #472]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a75      	ldr	r2, [pc, #468]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	4b73      	ldr	r3, [pc, #460]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a72      	ldr	r2, [pc, #456]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	e00b      	b.n	8009a5c <HAL_RCC_OscConfig+0xd8>
 8009a44:	4b6f      	ldr	r3, [pc, #444]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a6e      	ldr	r2, [pc, #440]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	4b6c      	ldr	r3, [pc, #432]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a6b      	ldr	r2, [pc, #428]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d013      	beq.n	8009a8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a64:	f7fb f850 	bl	8004b08 <HAL_GetTick>
 8009a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a6c:	f7fb f84c 	bl	8004b08 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b64      	cmp	r3, #100	@ 0x64
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e21f      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a7e:	4b61      	ldr	r3, [pc, #388]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f0      	beq.n	8009a6c <HAL_RCC_OscConfig+0xe8>
 8009a8a:	e014      	b.n	8009ab6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8c:	f7fb f83c 	bl	8004b08 <HAL_GetTick>
 8009a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a94:	f7fb f838 	bl	8004b08 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b64      	cmp	r3, #100	@ 0x64
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e20b      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009aa6:	4b57      	ldr	r3, [pc, #348]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f0      	bne.n	8009a94 <HAL_RCC_OscConfig+0x110>
 8009ab2:	e000      	b.n	8009ab6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d069      	beq.n	8009b96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ac2:	4b50      	ldr	r3, [pc, #320]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 030c 	and.w	r3, r3, #12
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00b      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ace:	4b4d      	ldr	r3, [pc, #308]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 030c 	and.w	r3, r3, #12
 8009ad6:	2b08      	cmp	r3, #8
 8009ad8:	d11c      	bne.n	8009b14 <HAL_RCC_OscConfig+0x190>
 8009ada:	4b4a      	ldr	r3, [pc, #296]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d116      	bne.n	8009b14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ae6:	4b47      	ldr	r3, [pc, #284]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d005      	beq.n	8009afe <HAL_RCC_OscConfig+0x17a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d001      	beq.n	8009afe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e1df      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009afe:	4b41      	ldr	r3, [pc, #260]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	493d      	ldr	r1, [pc, #244]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b12:	e040      	b.n	8009b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d023      	beq.n	8009b64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b1c:	4b39      	ldr	r3, [pc, #228]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a38      	ldr	r2, [pc, #224]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b22:	f043 0301 	orr.w	r3, r3, #1
 8009b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b28:	f7fa ffee 	bl	8004b08 <HAL_GetTick>
 8009b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b2e:	e008      	b.n	8009b42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b30:	f7fa ffea 	bl	8004b08 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d901      	bls.n	8009b42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e1bd      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b42:	4b30      	ldr	r3, [pc, #192]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0f0      	beq.n	8009b30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	4929      	ldr	r1, [pc, #164]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	600b      	str	r3, [r1, #0]
 8009b62:	e018      	b.n	8009b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b64:	4b27      	ldr	r3, [pc, #156]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a26      	ldr	r2, [pc, #152]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b6a:	f023 0301 	bic.w	r3, r3, #1
 8009b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b70:	f7fa ffca 	bl	8004b08 <HAL_GetTick>
 8009b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b76:	e008      	b.n	8009b8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b78:	f7fa ffc6 	bl	8004b08 <HAL_GetTick>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d901      	bls.n	8009b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e199      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0302 	and.w	r3, r3, #2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1f0      	bne.n	8009b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0308 	and.w	r3, r3, #8
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d038      	beq.n	8009c14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d019      	beq.n	8009bde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009baa:	4b16      	ldr	r3, [pc, #88]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bae:	4a15      	ldr	r2, [pc, #84]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb6:	f7fa ffa7 	bl	8004b08 <HAL_GetTick>
 8009bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bbc:	e008      	b.n	8009bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bbe:	f7fa ffa3 	bl	8004b08 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d901      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e176      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0f0      	beq.n	8009bbe <HAL_RCC_OscConfig+0x23a>
 8009bdc:	e01a      	b.n	8009c14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bde:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009be2:	4a08      	ldr	r2, [pc, #32]	@ (8009c04 <HAL_RCC_OscConfig+0x280>)
 8009be4:	f023 0301 	bic.w	r3, r3, #1
 8009be8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bea:	f7fa ff8d 	bl	8004b08 <HAL_GetTick>
 8009bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bf0:	e00a      	b.n	8009c08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bf2:	f7fa ff89 	bl	8004b08 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d903      	bls.n	8009c08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e15c      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
 8009c04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c08:	4b91      	ldr	r3, [pc, #580]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1ee      	bne.n	8009bf2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 80a4 	beq.w	8009d6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c22:	4b8b      	ldr	r3, [pc, #556]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10d      	bne.n	8009c4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c2e:	4b88      	ldr	r3, [pc, #544]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c32:	4a87      	ldr	r2, [pc, #540]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c3a:	4b85      	ldr	r3, [pc, #532]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c42:	60bb      	str	r3, [r7, #8]
 8009c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c46:	2301      	movs	r3, #1
 8009c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c4a:	4b82      	ldr	r3, [pc, #520]	@ (8009e54 <HAL_RCC_OscConfig+0x4d0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d118      	bne.n	8009c88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009c56:	4b7f      	ldr	r3, [pc, #508]	@ (8009e54 <HAL_RCC_OscConfig+0x4d0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8009e54 <HAL_RCC_OscConfig+0x4d0>)
 8009c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c62:	f7fa ff51 	bl	8004b08 <HAL_GetTick>
 8009c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c68:	e008      	b.n	8009c7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c6a:	f7fa ff4d 	bl	8004b08 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b64      	cmp	r3, #100	@ 0x64
 8009c76:	d901      	bls.n	8009c7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e120      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c7c:	4b75      	ldr	r3, [pc, #468]	@ (8009e54 <HAL_RCC_OscConfig+0x4d0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0f0      	beq.n	8009c6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d106      	bne.n	8009c9e <HAL_RCC_OscConfig+0x31a>
 8009c90:	4b6f      	ldr	r3, [pc, #444]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c94:	4a6e      	ldr	r2, [pc, #440]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c9c:	e02d      	b.n	8009cfa <HAL_RCC_OscConfig+0x376>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10c      	bne.n	8009cc0 <HAL_RCC_OscConfig+0x33c>
 8009ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009caa:	4a69      	ldr	r2, [pc, #420]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cac:	f023 0301 	bic.w	r3, r3, #1
 8009cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cb2:	4b67      	ldr	r3, [pc, #412]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cb6:	4a66      	ldr	r2, [pc, #408]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cb8:	f023 0304 	bic.w	r3, r3, #4
 8009cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cbe:	e01c      	b.n	8009cfa <HAL_RCC_OscConfig+0x376>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	2b05      	cmp	r3, #5
 8009cc6:	d10c      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x35e>
 8009cc8:	4b61      	ldr	r3, [pc, #388]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ccc:	4a60      	ldr	r2, [pc, #384]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cce:	f043 0304 	orr.w	r3, r3, #4
 8009cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cda:	f043 0301 	orr.w	r3, r3, #1
 8009cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ce0:	e00b      	b.n	8009cfa <HAL_RCC_OscConfig+0x376>
 8009ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009ce8:	f023 0301 	bic.w	r3, r3, #1
 8009cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cee:	4b58      	ldr	r3, [pc, #352]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cf2:	4a57      	ldr	r2, [pc, #348]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009cf4:	f023 0304 	bic.w	r3, r3, #4
 8009cf8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d015      	beq.n	8009d2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d02:	f7fa ff01 	bl	8004b08 <HAL_GetTick>
 8009d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d08:	e00a      	b.n	8009d20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d0a:	f7fa fefd 	bl	8004b08 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d901      	bls.n	8009d20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e0ce      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d20:	4b4b      	ldr	r3, [pc, #300]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d24:	f003 0302 	and.w	r3, r3, #2
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0ee      	beq.n	8009d0a <HAL_RCC_OscConfig+0x386>
 8009d2c:	e014      	b.n	8009d58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d2e:	f7fa feeb 	bl	8004b08 <HAL_GetTick>
 8009d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d34:	e00a      	b.n	8009d4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d36:	f7fa fee7 	bl	8004b08 <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d901      	bls.n	8009d4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e0b8      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d4c:	4b40      	ldr	r3, [pc, #256]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1ee      	bne.n	8009d36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d105      	bne.n	8009d6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d62:	4a3b      	ldr	r2, [pc, #236]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d68:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 80a4 	beq.w	8009ebc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d74:	4b36      	ldr	r3, [pc, #216]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f003 030c 	and.w	r3, r3, #12
 8009d7c:	2b08      	cmp	r3, #8
 8009d7e:	d06b      	beq.n	8009e58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d149      	bne.n	8009e1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d88:	4b31      	ldr	r3, [pc, #196]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a30      	ldr	r2, [pc, #192]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d94:	f7fa feb8 	bl	8004b08 <HAL_GetTick>
 8009d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d9a:	e008      	b.n	8009dae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d9c:	f7fa feb4 	bl	8004b08 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d901      	bls.n	8009dae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e087      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dae:	4b28      	ldr	r3, [pc, #160]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1f0      	bne.n	8009d9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	69da      	ldr	r2, [r3, #28]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc8:	019b      	lsls	r3, r3, #6
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd0:	085b      	lsrs	r3, r3, #1
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	041b      	lsls	r3, r3, #16
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ddc:	061b      	lsls	r3, r3, #24
 8009dde:	4313      	orrs	r3, r2
 8009de0:	4a1b      	ldr	r2, [pc, #108]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009de2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009de6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009de8:	4b19      	ldr	r3, [pc, #100]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a18      	ldr	r2, [pc, #96]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df4:	f7fa fe88 	bl	8004b08 <HAL_GetTick>
 8009df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dfa:	e008      	b.n	8009e0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dfc:	f7fa fe84 	bl	8004b08 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d901      	bls.n	8009e0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e057      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e0e:	4b10      	ldr	r3, [pc, #64]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0f0      	beq.n	8009dfc <HAL_RCC_OscConfig+0x478>
 8009e1a:	e04f      	b.n	8009ebc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a0b      	ldr	r2, [pc, #44]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e28:	f7fa fe6e 	bl	8004b08 <HAL_GetTick>
 8009e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e30:	f7fa fe6a 	bl	8004b08 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e03d      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e42:	4b03      	ldr	r3, [pc, #12]	@ (8009e50 <HAL_RCC_OscConfig+0x4cc>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1f0      	bne.n	8009e30 <HAL_RCC_OscConfig+0x4ac>
 8009e4e:	e035      	b.n	8009ebc <HAL_RCC_OscConfig+0x538>
 8009e50:	40023800 	.word	0x40023800
 8009e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009e58:	4b1b      	ldr	r3, [pc, #108]	@ (8009ec8 <HAL_RCC_OscConfig+0x544>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d028      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d121      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d11a      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009e88:	4013      	ands	r3, r2
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009e8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d111      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9e:	085b      	lsrs	r3, r3, #1
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d107      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d001      	beq.n	8009ebc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e000      	b.n	8009ebe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	40023800 	.word	0x40023800

08009ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e0d0      	b.n	800a086 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ee4:	4b6a      	ldr	r3, [pc, #424]	@ (800a090 <HAL_RCC_ClockConfig+0x1c4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 030f 	and.w	r3, r3, #15
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d910      	bls.n	8009f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ef2:	4b67      	ldr	r3, [pc, #412]	@ (800a090 <HAL_RCC_ClockConfig+0x1c4>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f023 020f 	bic.w	r2, r3, #15
 8009efa:	4965      	ldr	r1, [pc, #404]	@ (800a090 <HAL_RCC_ClockConfig+0x1c4>)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f02:	4b63      	ldr	r3, [pc, #396]	@ (800a090 <HAL_RCC_ClockConfig+0x1c4>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 030f 	and.w	r3, r3, #15
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d001      	beq.n	8009f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e0b8      	b.n	800a086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0302 	and.w	r3, r3, #2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d020      	beq.n	8009f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d005      	beq.n	8009f38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f2c:	4b59      	ldr	r3, [pc, #356]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	4a58      	ldr	r2, [pc, #352]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009f32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009f36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0308 	and.w	r3, r3, #8
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f44:	4b53      	ldr	r3, [pc, #332]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	4a52      	ldr	r2, [pc, #328]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009f4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009f4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f50:	4b50      	ldr	r3, [pc, #320]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	494d      	ldr	r1, [pc, #308]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d040      	beq.n	8009ff0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d107      	bne.n	8009f86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f76:	4b47      	ldr	r3, [pc, #284]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d115      	bne.n	8009fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e07f      	b.n	800a086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d107      	bne.n	8009f9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f8e:	4b41      	ldr	r3, [pc, #260]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d109      	bne.n	8009fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e073      	b.n	800a086 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f9e:	4b3d      	ldr	r3, [pc, #244]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e06b      	b.n	800a086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fae:	4b39      	ldr	r3, [pc, #228]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f023 0203 	bic.w	r2, r3, #3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4936      	ldr	r1, [pc, #216]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fc0:	f7fa fda2 	bl	8004b08 <HAL_GetTick>
 8009fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fc6:	e00a      	b.n	8009fde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fc8:	f7fa fd9e 	bl	8004b08 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e053      	b.n	800a086 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fde:	4b2d      	ldr	r3, [pc, #180]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 020c 	and.w	r2, r3, #12
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d1eb      	bne.n	8009fc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ff0:	4b27      	ldr	r3, [pc, #156]	@ (800a090 <HAL_RCC_ClockConfig+0x1c4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 030f 	and.w	r3, r3, #15
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d210      	bcs.n	800a020 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ffe:	4b24      	ldr	r3, [pc, #144]	@ (800a090 <HAL_RCC_ClockConfig+0x1c4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f023 020f 	bic.w	r2, r3, #15
 800a006:	4922      	ldr	r1, [pc, #136]	@ (800a090 <HAL_RCC_ClockConfig+0x1c4>)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a00e:	4b20      	ldr	r3, [pc, #128]	@ (800a090 <HAL_RCC_ClockConfig+0x1c4>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 030f 	and.w	r3, r3, #15
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d001      	beq.n	800a020 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e032      	b.n	800a086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0304 	and.w	r3, r3, #4
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d008      	beq.n	800a03e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a02c:	4b19      	ldr	r3, [pc, #100]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	4916      	ldr	r1, [pc, #88]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d009      	beq.n	800a05e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a04a:	4b12      	ldr	r3, [pc, #72]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	490e      	ldr	r1, [pc, #56]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 800a05a:	4313      	orrs	r3, r2
 800a05c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a05e:	f000 f821 	bl	800a0a4 <HAL_RCC_GetSysClockFreq>
 800a062:	4602      	mov	r2, r0
 800a064:	4b0b      	ldr	r3, [pc, #44]	@ (800a094 <HAL_RCC_ClockConfig+0x1c8>)
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	091b      	lsrs	r3, r3, #4
 800a06a:	f003 030f 	and.w	r3, r3, #15
 800a06e:	490a      	ldr	r1, [pc, #40]	@ (800a098 <HAL_RCC_ClockConfig+0x1cc>)
 800a070:	5ccb      	ldrb	r3, [r1, r3]
 800a072:	fa22 f303 	lsr.w	r3, r2, r3
 800a076:	4a09      	ldr	r2, [pc, #36]	@ (800a09c <HAL_RCC_ClockConfig+0x1d0>)
 800a078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a07a:	4b09      	ldr	r3, [pc, #36]	@ (800a0a0 <HAL_RCC_ClockConfig+0x1d4>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f9 ff96 	bl	8003fb0 <HAL_InitTick>

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	40023c00 	.word	0x40023c00
 800a094:	40023800 	.word	0x40023800
 800a098:	08019094 	.word	0x08019094
 800a09c:	20000000 	.word	0x20000000
 800a0a0:	2000004c 	.word	0x2000004c

0800a0a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0a8:	b090      	sub	sp, #64	@ 0x40
 800a0aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0bc:	4b59      	ldr	r3, [pc, #356]	@ (800a224 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f003 030c 	and.w	r3, r3, #12
 800a0c4:	2b08      	cmp	r3, #8
 800a0c6:	d00d      	beq.n	800a0e4 <HAL_RCC_GetSysClockFreq+0x40>
 800a0c8:	2b08      	cmp	r3, #8
 800a0ca:	f200 80a1 	bhi.w	800a210 <HAL_RCC_GetSysClockFreq+0x16c>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x34>
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d003      	beq.n	800a0de <HAL_RCC_GetSysClockFreq+0x3a>
 800a0d6:	e09b      	b.n	800a210 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a0d8:	4b53      	ldr	r3, [pc, #332]	@ (800a228 <HAL_RCC_GetSysClockFreq+0x184>)
 800a0da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a0dc:	e09b      	b.n	800a216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a0de:	4b53      	ldr	r3, [pc, #332]	@ (800a22c <HAL_RCC_GetSysClockFreq+0x188>)
 800a0e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a0e2:	e098      	b.n	800a216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0e4:	4b4f      	ldr	r3, [pc, #316]	@ (800a224 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a0ee:	4b4d      	ldr	r3, [pc, #308]	@ (800a224 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d028      	beq.n	800a14c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0fa:	4b4a      	ldr	r3, [pc, #296]	@ (800a224 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	099b      	lsrs	r3, r3, #6
 800a100:	2200      	movs	r2, #0
 800a102:	623b      	str	r3, [r7, #32]
 800a104:	627a      	str	r2, [r7, #36]	@ 0x24
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a10c:	2100      	movs	r1, #0
 800a10e:	4b47      	ldr	r3, [pc, #284]	@ (800a22c <HAL_RCC_GetSysClockFreq+0x188>)
 800a110:	fb03 f201 	mul.w	r2, r3, r1
 800a114:	2300      	movs	r3, #0
 800a116:	fb00 f303 	mul.w	r3, r0, r3
 800a11a:	4413      	add	r3, r2
 800a11c:	4a43      	ldr	r2, [pc, #268]	@ (800a22c <HAL_RCC_GetSysClockFreq+0x188>)
 800a11e:	fba0 1202 	umull	r1, r2, r0, r2
 800a122:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a124:	460a      	mov	r2, r1
 800a126:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a12a:	4413      	add	r3, r2
 800a12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a130:	2200      	movs	r2, #0
 800a132:	61bb      	str	r3, [r7, #24]
 800a134:	61fa      	str	r2, [r7, #28]
 800a136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a13a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a13e:	f7f6 f8cf 	bl	80002e0 <__aeabi_uldivmod>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4613      	mov	r3, r2
 800a148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a14a:	e053      	b.n	800a1f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a14c:	4b35      	ldr	r3, [pc, #212]	@ (800a224 <HAL_RCC_GetSysClockFreq+0x180>)
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	099b      	lsrs	r3, r3, #6
 800a152:	2200      	movs	r2, #0
 800a154:	613b      	str	r3, [r7, #16]
 800a156:	617a      	str	r2, [r7, #20]
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a15e:	f04f 0b00 	mov.w	fp, #0
 800a162:	4652      	mov	r2, sl
 800a164:	465b      	mov	r3, fp
 800a166:	f04f 0000 	mov.w	r0, #0
 800a16a:	f04f 0100 	mov.w	r1, #0
 800a16e:	0159      	lsls	r1, r3, #5
 800a170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a174:	0150      	lsls	r0, r2, #5
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	ebb2 080a 	subs.w	r8, r2, sl
 800a17e:	eb63 090b 	sbc.w	r9, r3, fp
 800a182:	f04f 0200 	mov.w	r2, #0
 800a186:	f04f 0300 	mov.w	r3, #0
 800a18a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a18e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a192:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a196:	ebb2 0408 	subs.w	r4, r2, r8
 800a19a:	eb63 0509 	sbc.w	r5, r3, r9
 800a19e:	f04f 0200 	mov.w	r2, #0
 800a1a2:	f04f 0300 	mov.w	r3, #0
 800a1a6:	00eb      	lsls	r3, r5, #3
 800a1a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a1ac:	00e2      	lsls	r2, r4, #3
 800a1ae:	4614      	mov	r4, r2
 800a1b0:	461d      	mov	r5, r3
 800a1b2:	eb14 030a 	adds.w	r3, r4, sl
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	eb45 030b 	adc.w	r3, r5, fp
 800a1bc:	607b      	str	r3, [r7, #4]
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	f04f 0300 	mov.w	r3, #0
 800a1c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	028b      	lsls	r3, r1, #10
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	028a      	lsls	r2, r1, #10
 800a1d8:	4610      	mov	r0, r2
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1de:	2200      	movs	r2, #0
 800a1e0:	60bb      	str	r3, [r7, #8]
 800a1e2:	60fa      	str	r2, [r7, #12]
 800a1e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1e8:	f7f6 f87a 	bl	80002e0 <__aeabi_uldivmod>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a1f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a224 <HAL_RCC_GetSysClockFreq+0x180>)
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	0c1b      	lsrs	r3, r3, #16
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	3301      	adds	r3, #1
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a204:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a20e:	e002      	b.n	800a216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a210:	4b05      	ldr	r3, [pc, #20]	@ (800a228 <HAL_RCC_GetSysClockFreq+0x184>)
 800a212:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a214:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3740      	adds	r7, #64	@ 0x40
 800a21c:	46bd      	mov	sp, r7
 800a21e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a222:	bf00      	nop
 800a224:	40023800 	.word	0x40023800
 800a228:	00f42400 	.word	0x00f42400
 800a22c:	017d7840 	.word	0x017d7840

0800a230 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a234:	4b03      	ldr	r3, [pc, #12]	@ (800a244 <HAL_RCC_GetHCLKFreq+0x14>)
 800a236:	681b      	ldr	r3, [r3, #0]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20000000 	.word	0x20000000

0800a248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a24c:	f7ff fff0 	bl	800a230 <HAL_RCC_GetHCLKFreq>
 800a250:	4602      	mov	r2, r0
 800a252:	4b05      	ldr	r3, [pc, #20]	@ (800a268 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	0a9b      	lsrs	r3, r3, #10
 800a258:	f003 0307 	and.w	r3, r3, #7
 800a25c:	4903      	ldr	r1, [pc, #12]	@ (800a26c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a25e:	5ccb      	ldrb	r3, [r1, r3]
 800a260:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a264:	4618      	mov	r0, r3
 800a266:	bd80      	pop	{r7, pc}
 800a268:	40023800 	.word	0x40023800
 800a26c:	080190a4 	.word	0x080190a4

0800a270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a274:	f7ff ffdc 	bl	800a230 <HAL_RCC_GetHCLKFreq>
 800a278:	4602      	mov	r2, r0
 800a27a:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	0b5b      	lsrs	r3, r3, #13
 800a280:	f003 0307 	and.w	r3, r3, #7
 800a284:	4903      	ldr	r1, [pc, #12]	@ (800a294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a286:	5ccb      	ldrb	r3, [r1, r3]
 800a288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	40023800 	.word	0x40023800
 800a294:	080190a4 	.word	0x080190a4

0800a298 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	220f      	movs	r2, #15
 800a2a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a2a8:	4b12      	ldr	r3, [pc, #72]	@ (800a2f4 <HAL_RCC_GetClockConfig+0x5c>)
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f003 0203 	and.w	r2, r3, #3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a2b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f4 <HAL_RCC_GetClockConfig+0x5c>)
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <HAL_RCC_GetClockConfig+0x5c>)
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a2cc:	4b09      	ldr	r3, [pc, #36]	@ (800a2f4 <HAL_RCC_GetClockConfig+0x5c>)
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	08db      	lsrs	r3, r3, #3
 800a2d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a2da:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <HAL_RCC_GetClockConfig+0x60>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 020f 	and.w	r2, r3, #15
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	601a      	str	r2, [r3, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	40023800 	.word	0x40023800
 800a2f8:	40023c00 	.word	0x40023c00

0800a2fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b088      	sub	sp, #32
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d012      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a324:	4b69      	ldr	r3, [pc, #420]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	4a68      	ldr	r2, [pc, #416]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a32a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a32e:	6093      	str	r3, [r2, #8]
 800a330:	4b66      	ldr	r3, [pc, #408]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a338:	4964      	ldr	r1, [pc, #400]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a346:	2301      	movs	r3, #1
 800a348:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d017      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a356:	4b5d      	ldr	r3, [pc, #372]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a35c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a364:	4959      	ldr	r1, [pc, #356]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a366:	4313      	orrs	r3, r2
 800a368:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a374:	d101      	bne.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a376:	2301      	movs	r3, #1
 800a378:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a382:	2301      	movs	r3, #1
 800a384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d017      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a392:	4b4e      	ldr	r3, [pc, #312]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a398:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a0:	494a      	ldr	r1, [pc, #296]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3b0:	d101      	bne.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0320 	and.w	r3, r3, #32
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 808b 	beq.w	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a3e0:	4b3a      	ldr	r3, [pc, #232]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e4:	4a39      	ldr	r2, [pc, #228]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3ea:	6413      	str	r3, [r2, #64]	@ 0x40
 800a3ec:	4b37      	ldr	r3, [pc, #220]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f4:	60bb      	str	r3, [r7, #8]
 800a3f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a3f8:	4b35      	ldr	r3, [pc, #212]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a34      	ldr	r2, [pc, #208]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a3fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a404:	f7fa fb80 	bl	8004b08 <HAL_GetTick>
 800a408:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a40a:	e008      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a40c:	f7fa fb7c 	bl	8004b08 <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	2b64      	cmp	r3, #100	@ 0x64
 800a418:	d901      	bls.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e357      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a41e:	4b2c      	ldr	r3, [pc, #176]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0f0      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a42a:	4b28      	ldr	r3, [pc, #160]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a42c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a42e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a432:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d035      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a43e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	429a      	cmp	r2, r3
 800a446:	d02e      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a448:	4b20      	ldr	r3, [pc, #128]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a44a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a44c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a450:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a452:	4b1e      	ldr	r3, [pc, #120]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a456:	4a1d      	ldr	r2, [pc, #116]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a45c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a45e:	4b1b      	ldr	r3, [pc, #108]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a462:	4a1a      	ldr	r2, [pc, #104]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a468:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a46a:	4a18      	ldr	r2, [pc, #96]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a470:	4b16      	ldr	r3, [pc, #88]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d114      	bne.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a47c:	f7fa fb44 	bl	8004b08 <HAL_GetTick>
 800a480:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a482:	e00a      	b.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a484:	f7fa fb40 	bl	8004b08 <HAL_GetTick>
 800a488:	4602      	mov	r2, r0
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a492:	4293      	cmp	r3, r2
 800a494:	d901      	bls.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a496:	2303      	movs	r3, #3
 800a498:	e319      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a49a:	4b0c      	ldr	r3, [pc, #48]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a49c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0ee      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4b2:	d111      	bne.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a4c0:	4b04      	ldr	r3, [pc, #16]	@ (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a4c2:	400b      	ands	r3, r1
 800a4c4:	4901      	ldr	r1, [pc, #4]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	608b      	str	r3, [r1, #8]
 800a4ca:	e00b      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a4cc:	40023800 	.word	0x40023800
 800a4d0:	40007000 	.word	0x40007000
 800a4d4:	0ffffcff 	.word	0x0ffffcff
 800a4d8:	4baa      	ldr	r3, [pc, #680]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	4aa9      	ldr	r2, [pc, #676]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a4e2:	6093      	str	r3, [r2, #8]
 800a4e4:	4ba7      	ldr	r3, [pc, #668]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4f0:	49a4      	ldr	r1, [pc, #656]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0310 	and.w	r3, r3, #16
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d010      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a502:	4ba0      	ldr	r3, [pc, #640]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a508:	4a9e      	ldr	r2, [pc, #632]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a50a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a50e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800a512:	4b9c      	ldr	r3, [pc, #624]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a514:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a51c:	4999      	ldr	r1, [pc, #612]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00a      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a530:	4b94      	ldr	r3, [pc, #592]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a536:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a53e:	4991      	ldr	r1, [pc, #580]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a540:	4313      	orrs	r3, r2
 800a542:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a552:	4b8c      	ldr	r3, [pc, #560]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a558:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a560:	4988      	ldr	r1, [pc, #544]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00a      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a574:	4b83      	ldr	r3, [pc, #524]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a57a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a582:	4980      	ldr	r1, [pc, #512]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a584:	4313      	orrs	r3, r2
 800a586:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a596:	4b7b      	ldr	r3, [pc, #492]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a59c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5a4:	4977      	ldr	r1, [pc, #476]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00a      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a5b8:	4b72      	ldr	r3, [pc, #456]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5be:	f023 0203 	bic.w	r2, r3, #3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c6:	496f      	ldr	r1, [pc, #444]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5da:	4b6a      	ldr	r3, [pc, #424]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5e0:	f023 020c 	bic.w	r2, r3, #12
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5e8:	4966      	ldr	r1, [pc, #408]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5fc:	4b61      	ldr	r3, [pc, #388]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a602:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a60a:	495e      	ldr	r1, [pc, #376]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00a      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a61e:	4b59      	ldr	r3, [pc, #356]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a624:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a62c:	4955      	ldr	r1, [pc, #340]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00a      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a640:	4b50      	ldr	r3, [pc, #320]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a646:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a64e:	494d      	ldr	r1, [pc, #308]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a650:	4313      	orrs	r3, r2
 800a652:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00a      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a662:	4b48      	ldr	r3, [pc, #288]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a668:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a670:	4944      	ldr	r1, [pc, #272]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a672:	4313      	orrs	r3, r2
 800a674:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00a      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a684:	4b3f      	ldr	r3, [pc, #252]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a68a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a692:	493c      	ldr	r1, [pc, #240]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a694:	4313      	orrs	r3, r2
 800a696:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00a      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a6a6:	4b37      	ldr	r3, [pc, #220]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6b4:	4933      	ldr	r1, [pc, #204]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00a      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a6c8:	4b2e      	ldr	r3, [pc, #184]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6d6:	492b      	ldr	r1, [pc, #172]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d011      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a6ea:	4b26      	ldr	r3, [pc, #152]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6f8:	4922      	ldr	r1, [pc, #136]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a708:	d101      	bne.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a70a:	2301      	movs	r3, #1
 800a70c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a71a:	2301      	movs	r3, #1
 800a71c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a72a:	4b16      	ldr	r3, [pc, #88]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a730:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a738:	4912      	ldr	r1, [pc, #72]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00b      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a74c:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a752:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a75c:	4909      	ldr	r1, [pc, #36]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d006      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 80d9 	beq.w	800a92a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a778:	4b02      	ldr	r3, [pc, #8]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a01      	ldr	r2, [pc, #4]	@ (800a784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a77e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a782:	e001      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a784:	40023800 	.word	0x40023800
 800a788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a78a:	f7fa f9bd 	bl	8004b08 <HAL_GetTick>
 800a78e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a790:	e008      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a792:	f7fa f9b9 	bl	8004b08 <HAL_GetTick>
 800a796:	4602      	mov	r2, r0
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	2b64      	cmp	r3, #100	@ 0x64
 800a79e:	d901      	bls.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e194      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a7a4:	4b6c      	ldr	r3, [pc, #432]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1f0      	bne.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d021      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d11d      	bne.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a7c4:	4b64      	ldr	r3, [pc, #400]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7ca:	0c1b      	lsrs	r3, r3, #16
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a7d2:	4b61      	ldr	r3, [pc, #388]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7d8:	0e1b      	lsrs	r3, r3, #24
 800a7da:	f003 030f 	and.w	r3, r3, #15
 800a7de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	019a      	lsls	r2, r3, #6
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	041b      	lsls	r3, r3, #16
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	061b      	lsls	r3, r3, #24
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	071b      	lsls	r3, r3, #28
 800a7f8:	4957      	ldr	r1, [pc, #348]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a814:	d00a      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d02e      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a826:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a82a:	d129      	bne.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a82c:	4b4a      	ldr	r3, [pc, #296]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a832:	0c1b      	lsrs	r3, r3, #16
 800a834:	f003 0303 	and.w	r3, r3, #3
 800a838:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a83a:	4b47      	ldr	r3, [pc, #284]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a840:	0f1b      	lsrs	r3, r3, #28
 800a842:	f003 0307 	and.w	r3, r3, #7
 800a846:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	019a      	lsls	r2, r3, #6
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	041b      	lsls	r3, r3, #16
 800a852:	431a      	orrs	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	061b      	lsls	r3, r3, #24
 800a85a:	431a      	orrs	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	071b      	lsls	r3, r3, #28
 800a860:	493d      	ldr	r1, [pc, #244]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a862:	4313      	orrs	r3, r2
 800a864:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a868:	4b3b      	ldr	r3, [pc, #236]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a86a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a86e:	f023 021f 	bic.w	r2, r3, #31
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a876:	3b01      	subs	r3, #1
 800a878:	4937      	ldr	r1, [pc, #220]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a87a:	4313      	orrs	r3, r2
 800a87c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01d      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a88c:	4b32      	ldr	r3, [pc, #200]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a892:	0e1b      	lsrs	r3, r3, #24
 800a894:	f003 030f 	and.w	r3, r3, #15
 800a898:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a89a:	4b2f      	ldr	r3, [pc, #188]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a89c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8a0:	0f1b      	lsrs	r3, r3, #28
 800a8a2:	f003 0307 	and.w	r3, r3, #7
 800a8a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	019a      	lsls	r2, r3, #6
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	041b      	lsls	r3, r3, #16
 800a8b4:	431a      	orrs	r2, r3
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	061b      	lsls	r3, r3, #24
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	071b      	lsls	r3, r3, #28
 800a8c0:	4925      	ldr	r1, [pc, #148]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d011      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	019a      	lsls	r2, r3, #6
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	041b      	lsls	r3, r3, #16
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	061b      	lsls	r3, r3, #24
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	071b      	lsls	r3, r3, #28
 800a8f0:	4919      	ldr	r1, [pc, #100]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a8f8:	4b17      	ldr	r3, [pc, #92]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a16      	ldr	r2, [pc, #88]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a8fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a904:	f7fa f900 	bl	8004b08 <HAL_GetTick>
 800a908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a90a:	e008      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a90c:	f7fa f8fc 	bl	8004b08 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b64      	cmp	r3, #100	@ 0x64
 800a918:	d901      	bls.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e0d7      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a91e:	4b0e      	ldr	r3, [pc, #56]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0f0      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	f040 80cd 	bne.w	800aacc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a932:	4b09      	ldr	r3, [pc, #36]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a08      	ldr	r2, [pc, #32]	@ (800a958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a93c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a93e:	f7fa f8e3 	bl	8004b08 <HAL_GetTick>
 800a942:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a944:	e00a      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a946:	f7fa f8df 	bl	8004b08 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b64      	cmp	r3, #100	@ 0x64
 800a952:	d903      	bls.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e0ba      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a958:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a95c:	4b5e      	ldr	r3, [pc, #376]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a968:	d0ed      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d009      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a986:	2b00      	cmp	r3, #0
 800a988:	d02e      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d12a      	bne.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a992:	4b51      	ldr	r3, [pc, #324]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a998:	0c1b      	lsrs	r3, r3, #16
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a9a0:	4b4d      	ldr	r3, [pc, #308]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9a6:	0f1b      	lsrs	r3, r3, #28
 800a9a8:	f003 0307 	and.w	r3, r3, #7
 800a9ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	019a      	lsls	r2, r3, #6
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	041b      	lsls	r3, r3, #16
 800a9b8:	431a      	orrs	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	061b      	lsls	r3, r3, #24
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	071b      	lsls	r3, r3, #28
 800a9c6:	4944      	ldr	r1, [pc, #272]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a9ce:	4b42      	ldr	r3, [pc, #264]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	021b      	lsls	r3, r3, #8
 800a9e0:	493d      	ldr	r1, [pc, #244]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d022      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9fc:	d11d      	bne.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a9fe:	4b36      	ldr	r3, [pc, #216]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa04:	0e1b      	lsrs	r3, r3, #24
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aa0c:	4b32      	ldr	r3, [pc, #200]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa12:	0f1b      	lsrs	r3, r3, #28
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	019a      	lsls	r2, r3, #6
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	041b      	lsls	r3, r3, #16
 800aa26:	431a      	orrs	r2, r3
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	061b      	lsls	r3, r3, #24
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	071b      	lsls	r3, r3, #28
 800aa32:	4929      	ldr	r1, [pc, #164]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0308 	and.w	r3, r3, #8
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d028      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aa46:	4b24      	ldr	r3, [pc, #144]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa4c:	0e1b      	lsrs	r3, r3, #24
 800aa4e:	f003 030f 	and.w	r3, r3, #15
 800aa52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aa54:	4b20      	ldr	r3, [pc, #128]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa5a:	0c1b      	lsrs	r3, r3, #16
 800aa5c:	f003 0303 	and.w	r3, r3, #3
 800aa60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	019a      	lsls	r2, r3, #6
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	041b      	lsls	r3, r3, #16
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	061b      	lsls	r3, r3, #24
 800aa72:	431a      	orrs	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	69db      	ldr	r3, [r3, #28]
 800aa78:	071b      	lsls	r3, r3, #28
 800aa7a:	4917      	ldr	r1, [pc, #92]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800aa82:	4b15      	ldr	r3, [pc, #84]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa90:	4911      	ldr	r1, [pc, #68]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa92:	4313      	orrs	r3, r2
 800aa94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aa98:	4b0f      	ldr	r3, [pc, #60]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a0e      	ldr	r2, [pc, #56]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaa4:	f7fa f830 	bl	8004b08 <HAL_GetTick>
 800aaa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aaaa:	e008      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aaac:	f7fa f82c 	bl	8004b08 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	2b64      	cmp	r3, #100	@ 0x64
 800aab8:	d901      	bls.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e007      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aabe:	4b06      	ldr	r3, [pc, #24]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaca:	d1ef      	bne.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3720      	adds	r7, #32
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	40023800 	.word	0x40023800

0800aadc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800aadc:	b480      	push	{r7}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aafa:	f040 808d 	bne.w	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800aafe:	4b93      	ldr	r3, [pc, #588]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab04:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ab0c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab14:	d07c      	beq.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab1c:	d87b      	bhi.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab2a:	d039      	beq.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ab2c:	e073      	b.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ab2e:	4b87      	ldr	r3, [pc, #540]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d108      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ab3a:	4b84      	ldr	r3, [pc, #528]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab42:	4a83      	ldr	r2, [pc, #524]	@ (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ab44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab48:	613b      	str	r3, [r7, #16]
 800ab4a:	e007      	b.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ab4c:	4b7f      	ldr	r3, [pc, #508]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab54:	4a7f      	ldr	r2, [pc, #508]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab5a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ab5c:	4b7b      	ldr	r3, [pc, #492]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab62:	0e1b      	lsrs	r3, r3, #24
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ab6a:	4b78      	ldr	r3, [pc, #480]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab70:	099b      	lsrs	r3, r3, #6
 800ab72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	fb03 f202 	mul.w	r2, r3, r2
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab82:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ab84:	4b71      	ldr	r3, [pc, #452]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab8a:	0a1b      	lsrs	r3, r3, #8
 800ab8c:	f003 031f 	and.w	r3, r3, #31
 800ab90:	3301      	adds	r3, #1
 800ab92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9c:	617b      	str	r3, [r7, #20]
        break;
 800ab9e:	e03b      	b.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aba0:	4b6a      	ldr	r3, [pc, #424]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d108      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800abac:	4b67      	ldr	r3, [pc, #412]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abb4:	4a66      	ldr	r2, [pc, #408]	@ (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800abb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	e007      	b.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800abbe:	4b63      	ldr	r3, [pc, #396]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abc6:	4a63      	ldr	r2, [pc, #396]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800abc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abcc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800abce:	4b5f      	ldr	r3, [pc, #380]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800abd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abd4:	0e1b      	lsrs	r3, r3, #24
 800abd6:	f003 030f 	and.w	r3, r3, #15
 800abda:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800abdc:	4b5b      	ldr	r3, [pc, #364]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800abde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abe2:	099b      	lsrs	r3, r3, #6
 800abe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	fb03 f202 	mul.w	r2, r3, r2
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800abf6:	4b55      	ldr	r3, [pc, #340]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800abf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abfc:	f003 031f 	and.w	r3, r3, #31
 800ac00:	3301      	adds	r3, #1
 800ac02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0c:	617b      	str	r3, [r7, #20]
        break;
 800ac0e:	e003      	b.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac10:	4b51      	ldr	r3, [pc, #324]	@ (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ac12:	617b      	str	r3, [r7, #20]
        break;
 800ac14:	e000      	b.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800ac16:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac1e:	f040 808d 	bne.w	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ac22:	4b4a      	ldr	r3, [pc, #296]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ac24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac28:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ac30:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac38:	d07c      	beq.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac40:	d87b      	bhi.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d004      	beq.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac4e:	d039      	beq.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ac50:	e073      	b.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ac52:	4b3e      	ldr	r3, [pc, #248]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d108      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ac5e:	4b3b      	ldr	r3, [pc, #236]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac66:	4a3a      	ldr	r2, [pc, #232]	@ (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ac68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6c:	613b      	str	r3, [r7, #16]
 800ac6e:	e007      	b.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ac70:	4b36      	ldr	r3, [pc, #216]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac78:	4a36      	ldr	r2, [pc, #216]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ac7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac7e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ac80:	4b32      	ldr	r3, [pc, #200]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac86:	0e1b      	lsrs	r3, r3, #24
 800ac88:	f003 030f 	and.w	r3, r3, #15
 800ac8c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ac8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ac90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac94:	099b      	lsrs	r3, r3, #6
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	fb03 f202 	mul.w	r2, r3, r2
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800aca8:	4b28      	ldr	r3, [pc, #160]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800acaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acae:	0a1b      	lsrs	r3, r3, #8
 800acb0:	f003 031f 	and.w	r3, r3, #31
 800acb4:	3301      	adds	r3, #1
 800acb6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc0:	617b      	str	r3, [r7, #20]
        break;
 800acc2:	e03b      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800acc4:	4b21      	ldr	r3, [pc, #132]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d108      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800acd0:	4b1e      	ldr	r3, [pc, #120]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800acda:	fbb2 f3f3 	udiv	r3, r2, r3
 800acde:	613b      	str	r3, [r7, #16]
 800ace0:	e007      	b.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ace2:	4b1a      	ldr	r3, [pc, #104]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acea:	4a1a      	ldr	r2, [pc, #104]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800acec:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800acf2:	4b16      	ldr	r3, [pc, #88]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800acf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acf8:	0e1b      	lsrs	r3, r3, #24
 800acfa:	f003 030f 	and.w	r3, r3, #15
 800acfe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ad00:	4b12      	ldr	r3, [pc, #72]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ad02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad06:	099b      	lsrs	r3, r3, #6
 800ad08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	fb03 f202 	mul.w	r2, r3, r2
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad18:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ad1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad20:	f003 031f 	and.w	r3, r3, #31
 800ad24:	3301      	adds	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad30:	617b      	str	r3, [r7, #20]
        break;
 800ad32:	e003      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad34:	4b08      	ldr	r3, [pc, #32]	@ (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ad36:	617b      	str	r3, [r7, #20]
        break;
 800ad38:	e000      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800ad3a:	bf00      	nop
      }
    }
  }

  return frequency;
 800ad3c:	697b      	ldr	r3, [r7, #20]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	40023800 	.word	0x40023800
 800ad50:	00f42400 	.word	0x00f42400
 800ad54:	017d7840 	.word	0x017d7840
 800ad58:	00bb8000 	.word	0x00bb8000

0800ad5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e071      	b.n	800ae52 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	7f5b      	ldrb	r3, [r3, #29]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d105      	bne.n	800ad84 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7f8 fc98 	bl	80036b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f003 0310 	and.w	r3, r3, #16
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	d053      	beq.n	800ae40 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	22ca      	movs	r2, #202	@ 0xca
 800ad9e:	625a      	str	r2, [r3, #36]	@ 0x24
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2253      	movs	r2, #83	@ 0x53
 800ada6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fac7 	bl	800b33c <RTC_EnterInitMode>
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d12a      	bne.n	800ae0e <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6899      	ldr	r1, [r3, #8]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b26      	ldr	r3, [pc, #152]	@ (800ae5c <HAL_RTC_Init+0x100>)
 800adc4:	400b      	ands	r3, r1
 800adc6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6899      	ldr	r1, [r3, #8]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	431a      	orrs	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	430a      	orrs	r2, r1
 800ade4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	68d2      	ldr	r2, [r2, #12]
 800adee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6919      	ldr	r1, [r3, #16]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	041a      	lsls	r2, r3, #16
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	430a      	orrs	r2, r1
 800ae02:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fad0 	bl	800b3aa <RTC_ExitInitMode>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d110      	bne.n	800ae36 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0208 	bic.w	r2, r2, #8
 800ae22:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	22ff      	movs	r2, #255	@ 0xff
 800ae3c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ae3e:	e001      	b.n	800ae44 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d102      	bne.n	800ae50 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	ff8fffbf 	.word	0xff8fffbf

0800ae60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ae60:	b590      	push	{r4, r7, lr}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	7f1b      	ldrb	r3, [r3, #28]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d101      	bne.n	800ae7c <HAL_RTC_SetTime+0x1c>
 800ae78:	2302      	movs	r3, #2
 800ae7a:	e085      	b.n	800af88 <HAL_RTC_SetTime+0x128>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2202      	movs	r2, #2
 800ae86:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d126      	bne.n	800aedc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d102      	bne.n	800aea2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 faa4 	bl	800b3f4 <RTC_ByteToBcd2>
 800aeac:	4603      	mov	r3, r0
 800aeae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	785b      	ldrb	r3, [r3, #1]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fa9d 	bl	800b3f4 <RTC_ByteToBcd2>
 800aeba:	4603      	mov	r3, r0
 800aebc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aebe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	789b      	ldrb	r3, [r3, #2]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fa95 	bl	800b3f4 <RTC_ByteToBcd2>
 800aeca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aecc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	78db      	ldrb	r3, [r3, #3]
 800aed4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aed6:	4313      	orrs	r3, r2
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	e018      	b.n	800af0e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d102      	bne.n	800aef0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2200      	movs	r2, #0
 800aeee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	785b      	ldrb	r3, [r3, #1]
 800aefa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800aefc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800af02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	78db      	ldrb	r3, [r3, #3]
 800af08:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800af0a:	4313      	orrs	r3, r2
 800af0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	22ca      	movs	r2, #202	@ 0xca
 800af14:	625a      	str	r2, [r3, #36]	@ 0x24
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2253      	movs	r2, #83	@ 0x53
 800af1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 fa0c 	bl	800b33c <RTC_EnterInitMode>
 800af24:	4603      	mov	r3, r0
 800af26:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800af28:	7cfb      	ldrb	r3, [r7, #19]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d11e      	bne.n	800af6c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	6979      	ldr	r1, [r7, #20]
 800af34:	4b16      	ldr	r3, [pc, #88]	@ (800af90 <HAL_RTC_SetTime+0x130>)
 800af36:	400b      	ands	r3, r1
 800af38:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689a      	ldr	r2, [r3, #8]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800af48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6899      	ldr	r1, [r3, #8]
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	431a      	orrs	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 fa21 	bl	800b3aa <RTC_ExitInitMode>
 800af68:	4603      	mov	r3, r0
 800af6a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800af6c:	7cfb      	ldrb	r3, [r7, #19]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d102      	bne.n	800af78 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2201      	movs	r2, #1
 800af76:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	22ff      	movs	r2, #255	@ 0xff
 800af7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	771a      	strb	r2, [r3, #28]

  return status;
 800af86:	7cfb      	ldrb	r3, [r7, #19]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	371c      	adds	r7, #28
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd90      	pop	{r4, r7, pc}
 800af90:	007f7f7f 	.word	0x007f7f7f

0800af94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800af94:	b590      	push	{r4, r7, lr}
 800af96:	b087      	sub	sp, #28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	7f1b      	ldrb	r3, [r3, #28]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d101      	bne.n	800afb0 <HAL_RTC_SetDate+0x1c>
 800afac:	2302      	movs	r3, #2
 800afae:	e06f      	b.n	800b090 <HAL_RTC_SetDate+0xfc>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2201      	movs	r2, #1
 800afb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2202      	movs	r2, #2
 800afba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10e      	bne.n	800afe0 <HAL_RTC_SetDate+0x4c>
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	785b      	ldrb	r3, [r3, #1]
 800afc6:	f003 0310 	and.w	r3, r3, #16
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d008      	beq.n	800afe0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	785b      	ldrb	r3, [r3, #1]
 800afd2:	f023 0310 	bic.w	r3, r3, #16
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	330a      	adds	r3, #10
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d11c      	bne.n	800b020 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	78db      	ldrb	r3, [r3, #3]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fa02 	bl	800b3f4 <RTC_ByteToBcd2>
 800aff0:	4603      	mov	r3, r0
 800aff2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	785b      	ldrb	r3, [r3, #1]
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 f9fb 	bl	800b3f4 <RTC_ByteToBcd2>
 800affe:	4603      	mov	r3, r0
 800b000:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b002:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	789b      	ldrb	r3, [r3, #2]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 f9f3 	bl	800b3f4 <RTC_ByteToBcd2>
 800b00e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b010:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b01a:	4313      	orrs	r3, r2
 800b01c:	617b      	str	r3, [r7, #20]
 800b01e:	e00e      	b.n	800b03e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	78db      	ldrb	r3, [r3, #3]
 800b024:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	785b      	ldrb	r3, [r3, #1]
 800b02a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b02c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b032:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b03a:	4313      	orrs	r3, r2
 800b03c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	22ca      	movs	r2, #202	@ 0xca
 800b044:	625a      	str	r2, [r3, #36]	@ 0x24
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2253      	movs	r2, #83	@ 0x53
 800b04c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 f974 	bl	800b33c <RTC_EnterInitMode>
 800b054:	4603      	mov	r3, r0
 800b056:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b058:	7cfb      	ldrb	r3, [r7, #19]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10a      	bne.n	800b074 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	6979      	ldr	r1, [r7, #20]
 800b064:	4b0c      	ldr	r3, [pc, #48]	@ (800b098 <HAL_RTC_SetDate+0x104>)
 800b066:	400b      	ands	r3, r1
 800b068:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 f99d 	bl	800b3aa <RTC_ExitInitMode>
 800b070:	4603      	mov	r3, r0
 800b072:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b074:	7cfb      	ldrb	r3, [r7, #19]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d102      	bne.n	800b080 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2201      	movs	r2, #1
 800b07e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	22ff      	movs	r2, #255	@ 0xff
 800b086:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	771a      	strb	r2, [r3, #28]

  return status;
 800b08e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b090:	4618      	mov	r0, r3
 800b092:	371c      	adds	r7, #28
 800b094:	46bd      	mov	sp, r7
 800b096:	bd90      	pop	{r4, r7, pc}
 800b098:	00ffff3f 	.word	0x00ffff3f

0800b09c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b09c:	b590      	push	{r4, r7, lr}
 800b09e:	b089      	sub	sp, #36	@ 0x24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	7f1b      	ldrb	r3, [r3, #28]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d101      	bne.n	800b0c0 <HAL_RTC_SetAlarm+0x24>
 800b0bc:	2302      	movs	r3, #2
 800b0be:	e113      	b.n	800b2e8 <HAL_RTC_SetAlarm+0x24c>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d137      	bne.n	800b142 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d102      	bne.n	800b0e6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 f982 	bl	800b3f4 <RTC_ByteToBcd2>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	785b      	ldrb	r3, [r3, #1]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 f97b 	bl	800b3f4 <RTC_ByteToBcd2>
 800b0fe:	4603      	mov	r3, r0
 800b100:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b102:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	789b      	ldrb	r3, [r3, #2]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 f973 	bl	800b3f4 <RTC_ByteToBcd2>
 800b10e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b110:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	78db      	ldrb	r3, [r3, #3]
 800b118:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b11a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 f965 	bl	800b3f4 <RTC_ByteToBcd2>
 800b12a:	4603      	mov	r3, r0
 800b12c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b12e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b136:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b13c:	4313      	orrs	r3, r2
 800b13e:	61fb      	str	r3, [r7, #28]
 800b140:	e023      	b.n	800b18a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d102      	bne.n	800b156 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2200      	movs	r2, #0
 800b154:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	785b      	ldrb	r3, [r3, #1]
 800b160:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b162:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b168:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	78db      	ldrb	r3, [r3, #3]
 800b16e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b170:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b178:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b17a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b180:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b186:	4313      	orrs	r3, r2
 800b188:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b192:	4313      	orrs	r3, r2
 800b194:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	22ca      	movs	r2, #202	@ 0xca
 800b19c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2253      	movs	r2, #83	@ 0x53
 800b1a4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1ae:	d148      	bne.n	800b242 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689a      	ldr	r2, [r3, #8]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b1be:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689a      	ldr	r2, [r3, #8]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b1ce:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b1e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b1e2:	f7f9 fc91 	bl	8004b08 <HAL_GetTick>
 800b1e6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b1e8:	e013      	b.n	800b212 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b1ea:	f7f9 fc8d 	bl	8004b08 <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b1f8:	d90b      	bls.n	800b212 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	22ff      	movs	r2, #255	@ 0xff
 800b200:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2203      	movs	r2, #3
 800b206:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b20e:	2303      	movs	r3, #3
 800b210:	e06a      	b.n	800b2e8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d0e4      	beq.n	800b1ea <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	69fa      	ldr	r2, [r7, #28]
 800b226:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689a      	ldr	r2, [r3, #8]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b23e:	609a      	str	r2, [r3, #8]
 800b240:	e047      	b.n	800b2d2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b250:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	689a      	ldr	r2, [r3, #8]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b260:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b272:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b274:	f7f9 fc48 	bl	8004b08 <HAL_GetTick>
 800b278:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b27a:	e013      	b.n	800b2a4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b27c:	f7f9 fc44 	bl	8004b08 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b28a:	d90b      	bls.n	800b2a4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	22ff      	movs	r2, #255	@ 0xff
 800b292:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2203      	movs	r2, #3
 800b298:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e021      	b.n	800b2e8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	f003 0302 	and.w	r3, r3, #2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0e4      	beq.n	800b27c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	69fa      	ldr	r2, [r7, #28]
 800b2b8:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	689a      	ldr	r2, [r3, #8]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	22ff      	movs	r2, #255	@ 0xff
 800b2d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3724      	adds	r7, #36	@ 0x24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd90      	pop	{r4, r7, pc}

0800b2f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0d      	ldr	r2, [pc, #52]	@ (800b338 <HAL_RTC_WaitForSynchro+0x48>)
 800b302:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b304:	f7f9 fc00 	bl	8004b08 <HAL_GetTick>
 800b308:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b30a:	e009      	b.n	800b320 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b30c:	f7f9 fbfc 	bl	8004b08 <HAL_GetTick>
 800b310:	4602      	mov	r2, r0
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b31a:	d901      	bls.n	800b320 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e007      	b.n	800b330 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f003 0320 	and.w	r3, r3, #32
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0ee      	beq.n	800b30c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	0001ff5f 	.word	0x0001ff5f

0800b33c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b344:	2300      	movs	r3, #0
 800b346:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d122      	bne.n	800b3a0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b368:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b36a:	f7f9 fbcd 	bl	8004b08 <HAL_GetTick>
 800b36e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b370:	e00c      	b.n	800b38c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b372:	f7f9 fbc9 	bl	8004b08 <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b380:	d904      	bls.n	800b38c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2204      	movs	r2, #4
 800b386:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b396:	2b00      	cmp	r3, #0
 800b398:	d102      	bne.n	800b3a0 <RTC_EnterInitMode+0x64>
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d1e8      	bne.n	800b372 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b084      	sub	sp, #16
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68da      	ldr	r2, [r3, #12]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b3c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 0320 	and.w	r3, r3, #32
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10a      	bne.n	800b3ea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7ff ff8b 	bl	800b2f0 <HAL_RTC_WaitForSynchro>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800b402:	e005      	b.n	800b410 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3301      	adds	r3, #1
 800b408:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800b40a:	79fb      	ldrb	r3, [r7, #7]
 800b40c:	3b0a      	subs	r3, #10
 800b40e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b410:	79fb      	ldrb	r3, [r7, #7]
 800b412:	2b09      	cmp	r3, #9
 800b414:	d8f6      	bhi.n	800b404 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	011b      	lsls	r3, r3, #4
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	4313      	orrs	r3, r2
 800b422:	b2db      	uxtb	r3, r3
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800b430:	b480      	push	{r7}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	7f1b      	ldrb	r3, [r3, #28]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d101      	bne.n	800b44c <HAL_RTCEx_SetTimeStamp+0x1c>
 800b448:	2302      	movs	r3, #2
 800b44a:	e050      	b.n	800b4ee <HAL_RTCEx_SetTimeStamp+0xbe>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2201      	movs	r2, #1
 800b450:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2202      	movs	r2, #2
 800b456:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f022 0206 	bic.w	r2, r2, #6
 800b466:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	430a      	orrs	r2, r1
 800b476:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	4b1f      	ldr	r3, [pc, #124]	@ (800b4fc <HAL_RTCEx_SetTimeStamp+0xcc>)
 800b480:	4013      	ands	r3, r2
 800b482:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	4313      	orrs	r3, r2
 800b48a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	22ca      	movs	r2, #202	@ 0xca
 800b492:	625a      	str	r2, [r3, #36]	@ 0x24
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2253      	movs	r2, #83	@ 0x53
 800b49a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800b4b4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800b4c6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	689a      	ldr	r2, [r3, #8]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4d6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	22ff      	movs	r2, #255	@ 0xff
 800b4de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	371c      	adds	r7, #28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	fffff7f7 	.word	0xfffff7f7

0800b500 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d101      	bne.n	800b51e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e156      	b.n	800b7cc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d106      	bne.n	800b538 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7f8 fcd2 	bl	8003edc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2202      	movs	r2, #2
 800b53c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f95b 	bl	800b7fc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d00c      	beq.n	800b568 <HAL_SAI_Init+0x68>
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d80d      	bhi.n	800b56e <HAL_SAI_Init+0x6e>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <HAL_SAI_Init+0x5c>
 800b556:	2b01      	cmp	r3, #1
 800b558:	d003      	beq.n	800b562 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800b55a:	e008      	b.n	800b56e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	61fb      	str	r3, [r7, #28]
      break;
 800b560:	e006      	b.n	800b570 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b562:	2310      	movs	r3, #16
 800b564:	61fb      	str	r3, [r7, #28]
      break;
 800b566:	e003      	b.n	800b570 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b568:	2320      	movs	r3, #32
 800b56a:	61fb      	str	r3, [r7, #28]
      break;
 800b56c:	e000      	b.n	800b570 <HAL_SAI_Init+0x70>
      break;
 800b56e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	2b03      	cmp	r3, #3
 800b576:	d81e      	bhi.n	800b5b6 <HAL_SAI_Init+0xb6>
 800b578:	a201      	add	r2, pc, #4	@ (adr r2, 800b580 <HAL_SAI_Init+0x80>)
 800b57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57e:	bf00      	nop
 800b580:	0800b591 	.word	0x0800b591
 800b584:	0800b597 	.word	0x0800b597
 800b588:	0800b59f 	.word	0x0800b59f
 800b58c:	0800b5a7 	.word	0x0800b5a7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	617b      	str	r3, [r7, #20]
    }
    break;
 800b594:	e010      	b.n	800b5b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b59a:	617b      	str	r3, [r7, #20]
    }
    break;
 800b59c:	e00c      	b.n	800b5b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b59e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5a2:	617b      	str	r3, [r7, #20]
    }
    break;
 800b5a4:	e008      	b.n	800b5b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b5a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5aa:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	f043 0301 	orr.w	r3, r3, #1
 800b5b2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800b5b4:	e000      	b.n	800b5b8 <HAL_SAI_Init+0xb8>
    default:
      break;
 800b5b6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a85      	ldr	r2, [pc, #532]	@ (800b7d4 <HAL_SAI_Init+0x2d4>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d004      	beq.n	800b5cc <HAL_SAI_Init+0xcc>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a84      	ldr	r2, [pc, #528]	@ (800b7d8 <HAL_SAI_Init+0x2d8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d103      	bne.n	800b5d4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800b5cc:	4a83      	ldr	r2, [pc, #524]	@ (800b7dc <HAL_SAI_Init+0x2dc>)
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	e002      	b.n	800b5da <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b5d4:	4a82      	ldr	r2, [pc, #520]	@ (800b7e0 <HAL_SAI_Init+0x2e0>)
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d04c      	beq.n	800b67c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a7a      	ldr	r2, [pc, #488]	@ (800b7d4 <HAL_SAI_Init+0x2d4>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d004      	beq.n	800b5fa <HAL_SAI_Init+0xfa>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a78      	ldr	r2, [pc, #480]	@ (800b7d8 <HAL_SAI_Init+0x2d8>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d104      	bne.n	800b604 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b5fa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b5fe:	f7ff fa6d 	bl	800aadc <HAL_RCCEx_GetPeriphCLKFreq>
 800b602:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a76      	ldr	r2, [pc, #472]	@ (800b7e4 <HAL_SAI_Init+0x2e4>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d004      	beq.n	800b618 <HAL_SAI_Init+0x118>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a75      	ldr	r2, [pc, #468]	@ (800b7e8 <HAL_SAI_Init+0x2e8>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d104      	bne.n	800b622 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b618:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b61c:	f7ff fa5e 	bl	800aadc <HAL_RCCEx_GetPeriphCLKFreq>
 800b620:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	4613      	mov	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	461a      	mov	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	025b      	lsls	r3, r3, #9
 800b634:	fbb2 f3f3 	udiv	r3, r2, r3
 800b638:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	4a6b      	ldr	r2, [pc, #428]	@ (800b7ec <HAL_SAI_Init+0x2ec>)
 800b63e:	fba2 2303 	umull	r2, r3, r2, r3
 800b642:	08da      	lsrs	r2, r3, #3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800b648:	68f9      	ldr	r1, [r7, #12]
 800b64a:	4b68      	ldr	r3, [pc, #416]	@ (800b7ec <HAL_SAI_Init+0x2ec>)
 800b64c:	fba3 2301 	umull	r2, r3, r3, r1
 800b650:	08da      	lsrs	r2, r3, #3
 800b652:	4613      	mov	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	1aca      	subs	r2, r1, r3
 800b65c:	2a08      	cmp	r2, #8
 800b65e:	d904      	bls.n	800b66a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	1c5a      	adds	r2, r3, #1
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d104      	bne.n	800b67c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a1b      	ldr	r3, [r3, #32]
 800b676:	085a      	lsrs	r2, r3, #1
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d003      	beq.n	800b68c <HAL_SAI_Init+0x18c>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	2b02      	cmp	r3, #2
 800b68a:	d109      	bne.n	800b6a0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b690:	2b01      	cmp	r3, #1
 800b692:	d101      	bne.n	800b698 <HAL_SAI_Init+0x198>
 800b694:	2300      	movs	r3, #0
 800b696:	e001      	b.n	800b69c <HAL_SAI_Init+0x19c>
 800b698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b69c:	61bb      	str	r3, [r7, #24]
 800b69e:	e008      	b.n	800b6b2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d102      	bne.n	800b6ae <HAL_SAI_Init+0x1ae>
 800b6a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6ac:	e000      	b.n	800b6b0 <HAL_SAI_Init+0x1b0>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6819      	ldr	r1, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	4b4c      	ldr	r3, [pc, #304]	@ (800b7f0 <HAL_SAI_Init+0x2f0>)
 800b6be:	400b      	ands	r3, r1
 800b6c0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6819      	ldr	r1, [r3, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b6d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6dc:	431a      	orrs	r2, r3
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800b6ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b6f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	051b      	lsls	r3, r3, #20
 800b6fe:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6859      	ldr	r1, [r3, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	4b38      	ldr	r3, [pc, #224]	@ (800b7f4 <HAL_SAI_Init+0x2f4>)
 800b714:	400b      	ands	r3, r1
 800b716:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6859      	ldr	r1, [r3, #4]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	699a      	ldr	r2, [r3, #24]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72c:	431a      	orrs	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6899      	ldr	r1, [r3, #8]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f8 <HAL_SAI_Init+0x2f8>)
 800b742:	400b      	ands	r3, r1
 800b744:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6899      	ldr	r1, [r3, #8]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b750:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b756:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800b75c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800b762:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b768:	3b01      	subs	r3, #1
 800b76a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b76c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	430a      	orrs	r2, r1
 800b774:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68d9      	ldr	r1, [r3, #12]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b784:	400b      	ands	r3, r1
 800b786:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68d9      	ldr	r1, [r3, #12]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b796:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b79c:	041b      	lsls	r3, r3, #16
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	021b      	lsls	r3, r3, #8
 800b7a8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3720      	adds	r7, #32
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	40015804 	.word	0x40015804
 800b7d8:	40015824 	.word	0x40015824
 800b7dc:	40015800 	.word	0x40015800
 800b7e0:	40015c00 	.word	0x40015c00
 800b7e4:	40015c04 	.word	0x40015c04
 800b7e8:	40015c24 	.word	0x40015c24
 800b7ec:	cccccccd 	.word	0xcccccccd
 800b7f0:	ff05c010 	.word	0xff05c010
 800b7f4:	ffff1ff0 	.word	0xffff1ff0
 800b7f8:	fff88000 	.word	0xfff88000

0800b7fc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800b804:	4b17      	ldr	r3, [pc, #92]	@ (800b864 <SAI_Disable+0x68>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a17      	ldr	r2, [pc, #92]	@ (800b868 <SAI_Disable+0x6c>)
 800b80a:	fba2 2303 	umull	r2, r3, r2, r3
 800b80e:	0b1b      	lsrs	r3, r3, #12
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b826:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	1e5a      	subs	r2, r3, #1
 800b82c:	60fa      	str	r2, [r7, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10a      	bne.n	800b848 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b838:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800b842:	2303      	movs	r3, #3
 800b844:	72fb      	strb	r3, [r7, #11]
      break;
 800b846:	e006      	b.n	800b856 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1e8      	bne.n	800b828 <SAI_Disable+0x2c>

  return status;
 800b856:	7afb      	ldrb	r3, [r7, #11]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	20000000 	.word	0x20000000
 800b868:	95cbec1b 	.word	0x95cbec1b

0800b86c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d101      	bne.n	800b87e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e022      	b.n	800b8c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d105      	bne.n	800b896 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7f7 ff3d 	bl	8003710 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2203      	movs	r2, #3
 800b89a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f814 	bl	800b8cc <HAL_SD_InitCard>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e00a      	b.n	800b8c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b8cc:	b5b0      	push	{r4, r5, r7, lr}
 800b8ce:	b08e      	sub	sp, #56	@ 0x38
 800b8d0:	af04      	add	r7, sp, #16
 800b8d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b8e8:	2376      	movs	r3, #118	@ 0x76
 800b8ea:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681d      	ldr	r5, [r3, #0]
 800b8f0:	466c      	mov	r4, sp
 800b8f2:	f107 0318 	add.w	r3, r7, #24
 800b8f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8fe:	f107 030c 	add.w	r3, r7, #12
 800b902:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b904:	4628      	mov	r0, r5
 800b906:	f003 ff17 	bl	800f738 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b918:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4618      	mov	r0, r3
 800b920:	f003 ff43 	bl	800f7aa <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b932:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b934:	2002      	movs	r0, #2
 800b936:	f7f9 f8f3 	bl	8004b20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fe10 	bl	800c560 <SD_PowerON>
 800b940:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00b      	beq.n	800b960 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b956:	431a      	orrs	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e02e      	b.n	800b9be <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fd2f 	bl	800c3c4 <SD_InitCard>
 800b966:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00b      	beq.n	800b986 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97c:	431a      	orrs	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e01b      	b.n	800b9be <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b98e:	4618      	mov	r0, r3
 800b990:	f003 ff9e 	bl	800f8d0 <SDMMC_CmdBlockLength>
 800b994:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00f      	beq.n	800b9bc <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a09      	ldr	r2, [pc, #36]	@ (800b9c8 <HAL_SD_InitCard+0xfc>)
 800b9a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9aa:	431a      	orrs	r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3728      	adds	r7, #40	@ 0x28
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bdb0      	pop	{r4, r5, r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	004005ff 	.word	0x004005ff

0800b9cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b08c      	sub	sp, #48	@ 0x30
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
 800b9d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d107      	bne.n	800b9f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e0c3      	b.n	800bb7c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	f040 80bc 	bne.w	800bb7a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ba08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	441a      	add	r2, r3
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d907      	bls.n	800ba26 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba1a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e0aa      	b.n	800bb7c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2203      	movs	r2, #3
 800ba2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2200      	movs	r2, #0
 800ba34:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800ba44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba4a:	4a4e      	ldr	r2, [pc, #312]	@ (800bb84 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ba4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba52:	4a4d      	ldr	r2, [pc, #308]	@ (800bb88 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800ba54:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba62:	2200      	movs	r2, #0
 800ba64:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3380      	adds	r3, #128	@ 0x80
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	025b      	lsls	r3, r3, #9
 800ba94:	089b      	lsrs	r3, r3, #2
 800ba96:	f7f9 fe59 	bl	800574c <HAL_DMA_Start_IT>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d017      	beq.n	800bad0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800baae:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a35      	ldr	r2, [pc, #212]	@ (800bb8c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800bab6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800babc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	e055      	b.n	800bb7c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f042 0208 	orr.w	r2, r2, #8
 800bade:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d002      	beq.n	800baee <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800bae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baea:	025b      	lsls	r3, r3, #9
 800baec:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800baee:	f04f 33ff 	mov.w	r3, #4294967295
 800baf2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	025b      	lsls	r3, r3, #9
 800baf8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bafa:	2390      	movs	r3, #144	@ 0x90
 800bafc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bafe:	2302      	movs	r3, #2
 800bb00:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800bb06:	2301      	movs	r3, #1
 800bb08:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f107 0210 	add.w	r2, r7, #16
 800bb12:	4611      	mov	r1, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f003 feaf 	bl	800f878 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d90a      	bls.n	800bb36 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2282      	movs	r2, #130	@ 0x82
 800bb24:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f003 ff13 	bl	800f958 <SDMMC_CmdReadMultiBlock>
 800bb32:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bb34:	e009      	b.n	800bb4a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2281      	movs	r2, #129	@ 0x81
 800bb3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb42:	4618      	mov	r0, r3
 800bb44:	f003 fee6 	bl	800f914 <SDMMC_CmdReadSingleBlock>
 800bb48:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800bb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d012      	beq.n	800bb76 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a0d      	ldr	r2, [pc, #52]	@ (800bb8c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800bb56:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e002      	b.n	800bb7c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800bb76:	2300      	movs	r3, #0
 800bb78:	e000      	b.n	800bb7c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800bb7a:	2302      	movs	r3, #2
  }
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3730      	adds	r7, #48	@ 0x30
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	0800c2af 	.word	0x0800c2af
 800bb88:	0800c321 	.word	0x0800c321
 800bb8c:	004005ff 	.word	0x004005ff

0800bb90 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08c      	sub	sp, #48	@ 0x30
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d107      	bne.n	800bbb8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e0c6      	b.n	800bd46 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	f040 80bf 	bne.w	800bd44 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bbcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	441a      	add	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d907      	bls.n	800bbea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbde:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e0ad      	b.n	800bd46 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2203      	movs	r2, #3
 800bbee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f042 021a 	orr.w	r2, r2, #26
 800bc08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc0e:	4a50      	ldr	r2, [pc, #320]	@ (800bd50 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800bc10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc16:	4a4f      	ldr	r2, [pc, #316]	@ (800bd54 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800bc18:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc1e:	2200      	movs	r2, #0
 800bc20:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d002      	beq.n	800bc30 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800bc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2c:	025b      	lsls	r3, r3, #9
 800bc2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d90a      	bls.n	800bc4c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	22a0      	movs	r2, #160	@ 0xa0
 800bc3a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc42:	4618      	mov	r0, r3
 800bc44:	f003 fecc 	bl	800f9e0 <SDMMC_CmdWriteMultiBlock>
 800bc48:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bc4a:	e009      	b.n	800bc60 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2290      	movs	r2, #144	@ 0x90
 800bc50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f003 fe9f 	bl	800f99c <SDMMC_CmdWriteSingleBlock>
 800bc5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d012      	beq.n	800bc8c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a3b      	ldr	r2, [pc, #236]	@ (800bd58 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800bc6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc74:	431a      	orrs	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e05c      	b.n	800bd46 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f042 0208 	orr.w	r2, r2, #8
 800bc9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca0:	2240      	movs	r2, #64	@ 0x40
 800bca2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcb4:	689a      	ldr	r2, [r3, #8]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bcc4:	68b9      	ldr	r1, [r7, #8]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3380      	adds	r3, #128	@ 0x80
 800bccc:	461a      	mov	r2, r3
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	025b      	lsls	r3, r3, #9
 800bcd2:	089b      	lsrs	r3, r3, #2
 800bcd4:	f7f9 fd3a 	bl	800574c <HAL_DMA_Start_IT>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d01a      	beq.n	800bd14 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f022 021a 	bic.w	r2, r2, #26
 800bcec:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a19      	ldr	r2, [pc, #100]	@ (800bd58 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800bcf4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcfa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e018      	b.n	800bd46 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd14:	f04f 33ff 	mov.w	r3, #4294967295
 800bd18:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	025b      	lsls	r3, r3, #9
 800bd1e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bd20:	2390      	movs	r3, #144	@ 0x90
 800bd22:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bd24:	2300      	movs	r3, #0
 800bd26:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f107 0210 	add.w	r2, r7, #16
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f003 fd9c 	bl	800f878 <SDMMC_ConfigData>

      return HAL_OK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	e000      	b.n	800bd46 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800bd44:	2302      	movs	r3, #2
  }
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3730      	adds	r7, #48	@ 0x30
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	0800c285 	.word	0x0800c285
 800bd54:	0800c321 	.word	0x0800c321
 800bd58:	004005ff 	.word	0x004005ff

0800bd5c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd7e:	0f9b      	lsrs	r3, r3, #30
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd8a:	0e9b      	lsrs	r3, r3, #26
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	f003 030f 	and.w	r3, r3, #15
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd9c:	0e1b      	lsrs	r3, r3, #24
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	f003 0303 	and.w	r3, r3, #3
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdae:	0c1b      	lsrs	r3, r3, #16
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdba:	0a1b      	lsrs	r3, r3, #8
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdd0:	0d1b      	lsrs	r3, r3, #20
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bddc:	0c1b      	lsrs	r3, r3, #16
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	f003 030f 	and.w	r3, r3, #15
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdee:	0bdb      	lsrs	r3, r3, #15
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be00:	0b9b      	lsrs	r3, r3, #14
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be12:	0b5b      	lsrs	r3, r3, #13
 800be14:	b2db      	uxtb	r3, r3
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be24:	0b1b      	lsrs	r3, r3, #12
 800be26:	b2db      	uxtb	r3, r3
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2200      	movs	r2, #0
 800be36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d163      	bne.n	800bf08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be44:	009a      	lsls	r2, r3, #2
 800be46:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800be4a:	4013      	ands	r3, r2
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800be50:	0f92      	lsrs	r2, r2, #30
 800be52:	431a      	orrs	r2, r3
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be5c:	0edb      	lsrs	r3, r3, #27
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	f003 0307 	and.w	r3, r3, #7
 800be64:	b2da      	uxtb	r2, r3
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be6e:	0e1b      	lsrs	r3, r3, #24
 800be70:	b2db      	uxtb	r3, r3
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	b2da      	uxtb	r2, r3
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be80:	0d5b      	lsrs	r3, r3, #21
 800be82:	b2db      	uxtb	r3, r3
 800be84:	f003 0307 	and.w	r3, r3, #7
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be92:	0c9b      	lsrs	r3, r3, #18
 800be94:	b2db      	uxtb	r3, r3
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bea4:	0bdb      	lsrs	r3, r3, #15
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	f003 0307 	and.w	r3, r3, #7
 800beac:	b2da      	uxtb	r2, r3
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	1c5a      	adds	r2, r3, #1
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	7e1b      	ldrb	r3, [r3, #24]
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f003 0307 	and.w	r3, r3, #7
 800bec6:	3302      	adds	r3, #2
 800bec8:	2201      	movs	r2, #1
 800beca:	fa02 f303 	lsl.w	r3, r2, r3
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800bed2:	fb03 f202 	mul.w	r2, r3, r2
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	7a1b      	ldrb	r3, [r3, #8]
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	f003 030f 	and.w	r3, r3, #15
 800bee4:	2201      	movs	r2, #1
 800bee6:	409a      	lsls	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800bef4:	0a52      	lsrs	r2, r2, #9
 800bef6:	fb03 f202 	mul.w	r2, r3, r2
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf04:	661a      	str	r2, [r3, #96]	@ 0x60
 800bf06:	e031      	b.n	800bf6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d11d      	bne.n	800bf4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf14:	041b      	lsls	r3, r3, #16
 800bf16:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf1e:	0c1b      	lsrs	r3, r3, #16
 800bf20:	431a      	orrs	r2, r3
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	029a      	lsls	r2, r3, #10
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf40:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	661a      	str	r2, [r3, #96]	@ 0x60
 800bf4a:	e00f      	b.n	800bf6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a58      	ldr	r2, [pc, #352]	@ (800c0b4 <HAL_SD_GetCardCSD+0x344>)
 800bf52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e09d      	b.n	800c0a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf70:	0b9b      	lsrs	r3, r3, #14
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf82:	09db      	lsrs	r3, r3, #7
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfa4:	0fdb      	lsrs	r3, r3, #31
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfb0:	0f5b      	lsrs	r3, r3, #29
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f003 0303 	and.w	r3, r3, #3
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfc2:	0e9b      	lsrs	r3, r3, #26
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfd4:	0d9b      	lsrs	r3, r3, #22
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	f003 030f 	and.w	r3, r3, #15
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfe6:	0d5b      	lsrs	r3, r3, #21
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c002:	0c1b      	lsrs	r3, r3, #16
 800c004:	b2db      	uxtb	r3, r3
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c016:	0bdb      	lsrs	r3, r3, #15
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	b2da      	uxtb	r2, r3
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c02a:	0b9b      	lsrs	r3, r3, #14
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	b2da      	uxtb	r2, r3
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c03e:	0b5b      	lsrs	r3, r3, #13
 800c040:	b2db      	uxtb	r3, r3
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	b2da      	uxtb	r2, r3
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c052:	0b1b      	lsrs	r3, r3, #12
 800c054:	b2db      	uxtb	r3, r3
 800c056:	f003 0301 	and.w	r3, r3, #1
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c066:	0a9b      	lsrs	r3, r3, #10
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	f003 0303 	and.w	r3, r3, #3
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	f003 0303 	and.w	r3, r3, #3
 800c082:	b2da      	uxtb	r2, r3
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c08e:	085b      	lsrs	r3, r3, #1
 800c090:	b2db      	uxtb	r3, r3
 800c092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c096:	b2da      	uxtb	r2, r3
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	004005ff 	.word	0x004005ff

0800c0b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c110:	b5b0      	push	{r4, r5, r7, lr}
 800c112:	b08e      	sub	sp, #56	@ 0x38
 800c114:	af04      	add	r7, sp, #16
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2203      	movs	r2, #3
 800c124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d02e      	beq.n	800c18e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c136:	d106      	bne.n	800c146 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c13c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	639a      	str	r2, [r3, #56]	@ 0x38
 800c144:	e029      	b.n	800c19a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c14c:	d10a      	bne.n	800c164 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fabc 	bl	800c6cc <SD_WideBus_Enable>
 800c154:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	431a      	orrs	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	639a      	str	r2, [r3, #56]	@ 0x38
 800c162:	e01a      	b.n	800c19a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10a      	bne.n	800c180 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 faf9 	bl	800c762 <SD_WideBus_Disable>
 800c170:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	431a      	orrs	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	639a      	str	r2, [r3, #56]	@ 0x38
 800c17e:	e00c      	b.n	800c19a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c184:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c18c:	e005      	b.n	800c19a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c192:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00b      	beq.n	800c1ba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a26      	ldr	r2, [pc, #152]	@ (800c240 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c1a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c1b8:	e01f      	b.n	800c1fa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681d      	ldr	r5, [r3, #0]
 800c1e0:	466c      	mov	r4, sp
 800c1e2:	f107 0314 	add.w	r3, r7, #20
 800c1e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c1ee:	f107 0308 	add.w	r3, r7, #8
 800c1f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	f003 fa9f 	bl	800f738 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c202:	4618      	mov	r0, r3
 800c204:	f003 fb64 	bl	800f8d0 <SDMMC_CmdBlockLength>
 800c208:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00c      	beq.n	800c22a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a0a      	ldr	r2, [pc, #40]	@ (800c240 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c216:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	431a      	orrs	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800c232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c236:	4618      	mov	r0, r3
 800c238:	3728      	adds	r7, #40	@ 0x28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bdb0      	pop	{r4, r5, r7, pc}
 800c23e:	bf00      	nop
 800c240:	004005ff 	.word	0x004005ff

0800c244 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c250:	f107 030c 	add.w	r3, r7, #12
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fa10 	bl	800c67c <SD_SendStatus>
 800c25c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d005      	beq.n	800c270 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	0a5b      	lsrs	r3, r3, #9
 800c274:	f003 030f 	and.w	r3, r3, #15
 800c278:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c27a:	693b      	ldr	r3, [r7, #16]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c290:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2a0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2c0:	2b82      	cmp	r3, #130	@ 0x82
 800c2c2:	d111      	bne.n	800c2e8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f003 fbab 	bl	800fa24 <SDMMC_CmdStopTransfer>
 800c2ce:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d008      	beq.n	800c2e8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f7ff fd3a 	bl	800bd5c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f022 0208 	bic.w	r2, r2, #8
 800c2f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c300:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f005 f95f 	bl	80115d4 <HAL_SD_RxCpltCallback>
#endif
}
 800c316:	bf00      	nop
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c32c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7f9 fc88 	bl	8005c44 <HAL_DMA_GetError>
 800c334:	4603      	mov	r3, r0
 800c336:	2b02      	cmp	r3, #2
 800c338:	d03e      	beq.n	800c3b8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c33e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c340:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c348:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d002      	beq.n	800c356 <SD_DMAError+0x36>
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d12d      	bne.n	800c3b2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a19      	ldr	r2, [pc, #100]	@ (800c3c0 <SD_DMAError+0xa0>)
 800c35c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c36c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c372:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c37a:	6978      	ldr	r0, [r7, #20]
 800c37c:	f7ff ff62 	bl	800c244 <HAL_SD_GetCardState>
 800c380:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b06      	cmp	r3, #6
 800c386:	d002      	beq.n	800c38e <SD_DMAError+0x6e>
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	d10a      	bne.n	800c3a4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4618      	mov	r0, r3
 800c394:	f003 fb46 	bl	800fa24 <SDMMC_CmdStopTransfer>
 800c398:	4602      	mov	r2, r0
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c3b2:	6978      	ldr	r0, [r7, #20]
 800c3b4:	f7ff fcd2 	bl	800bd5c <HAL_SD_ErrorCallback>
#endif
  }
}
 800c3b8:	bf00      	nop
 800c3ba:	3718      	adds	r7, #24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	004005ff 	.word	0x004005ff

0800c3c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c3c4:	b5b0      	push	{r4, r5, r7, lr}
 800c3c6:	b094      	sub	sp, #80	@ 0x50
 800c3c8:	af04      	add	r7, sp, #16
 800c3ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f003 f9f6 	bl	800f7c6 <SDMMC_GetPowerState>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d102      	bne.n	800c3e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3e0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c3e4:	e0b8      	b.n	800c558 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d02f      	beq.n	800c44e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f003 fc21 	bl	800fc3a <SDMMC_CmdSendCID>
 800c3f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d001      	beq.n	800c404 <SD_InitCard+0x40>
    {
      return errorstate;
 800c400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c402:	e0a9      	b.n	800c558 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2100      	movs	r1, #0
 800c40a:	4618      	mov	r0, r3
 800c40c:	f003 fa21 	bl	800f852 <SDMMC_GetResponse>
 800c410:	4602      	mov	r2, r0
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2104      	movs	r1, #4
 800c41c:	4618      	mov	r0, r3
 800c41e:	f003 fa18 	bl	800f852 <SDMMC_GetResponse>
 800c422:	4602      	mov	r2, r0
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2108      	movs	r1, #8
 800c42e:	4618      	mov	r0, r3
 800c430:	f003 fa0f 	bl	800f852 <SDMMC_GetResponse>
 800c434:	4602      	mov	r2, r0
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	210c      	movs	r1, #12
 800c440:	4618      	mov	r0, r3
 800c442:	f003 fa06 	bl	800f852 <SDMMC_GetResponse>
 800c446:	4602      	mov	r2, r0
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c452:	2b03      	cmp	r3, #3
 800c454:	d00d      	beq.n	800c472 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f107 020e 	add.w	r2, r7, #14
 800c45e:	4611      	mov	r1, r2
 800c460:	4618      	mov	r0, r3
 800c462:	f003 fc27 	bl	800fcb4 <SDMMC_CmdSetRelAdd>
 800c466:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <SD_InitCard+0xae>
    {
      return errorstate;
 800c46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c470:	e072      	b.n	800c558 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c476:	2b03      	cmp	r3, #3
 800c478:	d036      	beq.n	800c4e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c47a:	89fb      	ldrh	r3, [r7, #14]
 800c47c:	461a      	mov	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c48a:	041b      	lsls	r3, r3, #16
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	f003 fbf1 	bl	800fc76 <SDMMC_CmdSendCSD>
 800c494:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c49e:	e05b      	b.n	800c558 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f003 f9d3 	bl	800f852 <SDMMC_GetResponse>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2104      	movs	r1, #4
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f003 f9ca 	bl	800f852 <SDMMC_GetResponse>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2108      	movs	r1, #8
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f003 f9c1 	bl	800f852 <SDMMC_GetResponse>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	210c      	movs	r1, #12
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f003 f9b8 	bl	800f852 <SDMMC_GetResponse>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2104      	movs	r1, #4
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f003 f9af 	bl	800f852 <SDMMC_GetResponse>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	0d1a      	lsrs	r2, r3, #20
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c4fc:	f107 0310 	add.w	r3, r7, #16
 800c500:	4619      	mov	r1, r3
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7ff fc34 	bl	800bd70 <HAL_SD_GetCardCSD>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c50e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c512:	e021      	b.n	800c558 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6819      	ldr	r1, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c51c:	041b      	lsls	r3, r3, #16
 800c51e:	2200      	movs	r2, #0
 800c520:	461c      	mov	r4, r3
 800c522:	4615      	mov	r5, r2
 800c524:	4622      	mov	r2, r4
 800c526:	462b      	mov	r3, r5
 800c528:	4608      	mov	r0, r1
 800c52a:	f003 fa9d 	bl	800fa68 <SDMMC_CmdSelDesel>
 800c52e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <SD_InitCard+0x176>
  {
    return errorstate;
 800c536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c538:	e00e      	b.n	800c558 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681d      	ldr	r5, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	466c      	mov	r4, sp
 800c542:	f103 0210 	add.w	r2, r3, #16
 800c546:	ca07      	ldmia	r2, {r0, r1, r2}
 800c548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c54c:	3304      	adds	r3, #4
 800c54e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c550:	4628      	mov	r0, r5
 800c552:	f003 f8f1 	bl	800f738 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c556:	2300      	movs	r3, #0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3740      	adds	r7, #64	@ 0x40
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bdb0      	pop	{r4, r5, r7, pc}

0800c560 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	617b      	str	r3, [r7, #20]
 800c570:	2300      	movs	r3, #0
 800c572:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4618      	mov	r0, r3
 800c57a:	f003 fa98 	bl	800faae <SDMMC_CmdGoIdleState>
 800c57e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <SD_PowerON+0x2a>
  {
    return errorstate;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	e072      	b.n	800c670 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4618      	mov	r0, r3
 800c590:	f003 faab 	bl	800faea <SDMMC_CmdOperCond>
 800c594:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00d      	beq.n	800c5b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f003 fa81 	bl	800faae <SDMMC_CmdGoIdleState>
 800c5ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d004      	beq.n	800c5be <SD_PowerON+0x5e>
    {
      return errorstate;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	e05b      	b.n	800c670 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d137      	bne.n	800c636 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f003 faab 	bl	800fb28 <SDMMC_CmdAppCommand>
 800c5d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d02d      	beq.n	800c636 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c5de:	e047      	b.n	800c670 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f003 fa9e 	bl	800fb28 <SDMMC_CmdAppCommand>
 800c5ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <SD_PowerON+0x98>
    {
      return errorstate;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	e03b      	b.n	800c670 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	491e      	ldr	r1, [pc, #120]	@ (800c678 <SD_PowerON+0x118>)
 800c5fe:	4618      	mov	r0, r3
 800c600:	f003 fab4 	bl	800fb6c <SDMMC_CmdAppOperCommand>
 800c604:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c60c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c610:	e02e      	b.n	800c670 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2100      	movs	r1, #0
 800c618:	4618      	mov	r0, r3
 800c61a:	f003 f91a 	bl	800f852 <SDMMC_GetResponse>
 800c61e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	0fdb      	lsrs	r3, r3, #31
 800c624:	2b01      	cmp	r3, #1
 800c626:	d101      	bne.n	800c62c <SD_PowerON+0xcc>
 800c628:	2301      	movs	r3, #1
 800c62a:	e000      	b.n	800c62e <SD_PowerON+0xce>
 800c62c:	2300      	movs	r3, #0
 800c62e:	613b      	str	r3, [r7, #16]

    count++;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	3301      	adds	r3, #1
 800c634:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d802      	bhi.n	800c646 <SD_PowerON+0xe6>
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d0cc      	beq.n	800c5e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d902      	bls.n	800c656 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c654:	e00c      	b.n	800c670 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d003      	beq.n	800c668 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	645a      	str	r2, [r3, #68]	@ 0x44
 800c666:	e002      	b.n	800c66e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	c1100000 	.word	0xc1100000

0800c67c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d102      	bne.n	800c692 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c68c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c690:	e018      	b.n	800c6c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c69a:	041b      	lsls	r3, r3, #16
 800c69c:	4619      	mov	r1, r3
 800c69e:	4610      	mov	r0, r2
 800c6a0:	f003 fb29 	bl	800fcf6 <SDMMC_CmdSendStatus>
 800c6a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	e009      	b.n	800c6c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f003 f8cb 	bl	800f852 <SDMMC_GetResponse>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	2300      	movs	r3, #0
 800c6da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f003 f8b5 	bl	800f852 <SDMMC_GetResponse>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c6ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c6f2:	d102      	bne.n	800c6fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c6f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6f8:	e02f      	b.n	800c75a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c6fa:	f107 030c 	add.w	r3, r7, #12
 800c6fe:	4619      	mov	r1, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f879 	bl	800c7f8 <SD_FindSCR>
 800c706:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	e023      	b.n	800c75a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d01c      	beq.n	800c756 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c724:	041b      	lsls	r3, r3, #16
 800c726:	4619      	mov	r1, r3
 800c728:	4610      	mov	r0, r2
 800c72a:	f003 f9fd 	bl	800fb28 <SDMMC_CmdAppCommand>
 800c72e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	e00f      	b.n	800c75a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2102      	movs	r1, #2
 800c740:	4618      	mov	r0, r3
 800c742:	f003 fa37 	bl	800fbb4 <SDMMC_CmdBusWidth>
 800c746:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	e003      	b.n	800c75a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c752:	2300      	movs	r3, #0
 800c754:	e001      	b.n	800c75a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c756:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b086      	sub	sp, #24
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c76a:	2300      	movs	r3, #0
 800c76c:	60fb      	str	r3, [r7, #12]
 800c76e:	2300      	movs	r3, #0
 800c770:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2100      	movs	r1, #0
 800c778:	4618      	mov	r0, r3
 800c77a:	f003 f86a 	bl	800f852 <SDMMC_GetResponse>
 800c77e:	4603      	mov	r3, r0
 800c780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c784:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c788:	d102      	bne.n	800c790 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c78a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c78e:	e02f      	b.n	800c7f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c790:	f107 030c 	add.w	r3, r7, #12
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f82e 	bl	800c7f8 <SD_FindSCR>
 800c79c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	e023      	b.n	800c7f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d01c      	beq.n	800c7ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ba:	041b      	lsls	r3, r3, #16
 800c7bc:	4619      	mov	r1, r3
 800c7be:	4610      	mov	r0, r2
 800c7c0:	f003 f9b2 	bl	800fb28 <SDMMC_CmdAppCommand>
 800c7c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	e00f      	b.n	800c7f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f003 f9ec 	bl	800fbb4 <SDMMC_CmdBusWidth>
 800c7dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	e003      	b.n	800c7f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	e001      	b.n	800c7f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c7f8:	b590      	push	{r4, r7, lr}
 800c7fa:	b08f      	sub	sp, #60	@ 0x3c
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c802:	f7f8 f981 	bl	8004b08 <HAL_GetTick>
 800c806:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800c808:	2300      	movs	r3, #0
 800c80a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c80c:	2300      	movs	r3, #0
 800c80e:	60bb      	str	r3, [r7, #8]
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2108      	movs	r1, #8
 800c81e:	4618      	mov	r0, r3
 800c820:	f003 f856 	bl	800f8d0 <SDMMC_CmdBlockLength>
 800c824:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82e:	e0b2      	b.n	800c996 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c838:	041b      	lsls	r3, r3, #16
 800c83a:	4619      	mov	r1, r3
 800c83c:	4610      	mov	r0, r2
 800c83e:	f003 f973 	bl	800fb28 <SDMMC_CmdAppCommand>
 800c842:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <SD_FindSCR+0x56>
  {
    return errorstate;
 800c84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84c:	e0a3      	b.n	800c996 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c84e:	f04f 33ff 	mov.w	r3, #4294967295
 800c852:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c854:	2308      	movs	r3, #8
 800c856:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c858:	2330      	movs	r3, #48	@ 0x30
 800c85a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c85c:	2302      	movs	r3, #2
 800c85e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c860:	2300      	movs	r3, #0
 800c862:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c864:	2301      	movs	r3, #1
 800c866:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f107 0210 	add.w	r2, r7, #16
 800c870:	4611      	mov	r1, r2
 800c872:	4618      	mov	r0, r3
 800c874:	f003 f800 	bl	800f878 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f003 f9bb 	bl	800fbf8 <SDMMC_CmdSendSCR>
 800c882:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c886:	2b00      	cmp	r3, #0
 800c888:	d02a      	beq.n	800c8e0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800c88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88c:	e083      	b.n	800c996 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00f      	beq.n	800c8bc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6819      	ldr	r1, [r3, #0]
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	f107 0208 	add.w	r2, r7, #8
 800c8a8:	18d4      	adds	r4, r2, r3
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	f002 ff70 	bl	800f790 <SDMMC_ReadFIFO>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	6023      	str	r3, [r4, #0]
      index++;
 800c8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8ba:	e006      	b.n	800c8ca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d012      	beq.n	800c8f0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c8ca:	f7f8 f91d 	bl	8004b08 <HAL_GetTick>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d8:	d102      	bne.n	800c8e0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c8da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c8de:	e05a      	b.n	800c996 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8e6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d0cf      	beq.n	800c88e <SD_FindSCR+0x96>
 800c8ee:	e000      	b.n	800c8f2 <SD_FindSCR+0xfa>
      break;
 800c8f0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f8:	f003 0308 	and.w	r3, r3, #8
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d005      	beq.n	800c90c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2208      	movs	r2, #8
 800c906:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c908:	2308      	movs	r3, #8
 800c90a:	e044      	b.n	800c996 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c912:	f003 0302 	and.w	r3, r3, #2
 800c916:	2b00      	cmp	r3, #0
 800c918:	d005      	beq.n	800c926 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2202      	movs	r2, #2
 800c920:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c922:	2302      	movs	r3, #2
 800c924:	e037      	b.n	800c996 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c92c:	f003 0320 	and.w	r3, r3, #32
 800c930:	2b00      	cmp	r3, #0
 800c932:	d005      	beq.n	800c940 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2220      	movs	r2, #32
 800c93a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c93c:	2320      	movs	r3, #32
 800c93e:	e02a      	b.n	800c996 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c948:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	061a      	lsls	r2, r3, #24
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	021b      	lsls	r3, r3, #8
 800c952:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c956:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	0a1b      	lsrs	r3, r3, #8
 800c95c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c960:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	0e1b      	lsrs	r3, r3, #24
 800c966:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96a:	601a      	str	r2, [r3, #0]
    scr++;
 800c96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96e:	3304      	adds	r3, #4
 800c970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	061a      	lsls	r2, r3, #24
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	021b      	lsls	r3, r3, #8
 800c97a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c97e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	0a1b      	lsrs	r3, r3, #8
 800c984:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c988:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	0e1b      	lsrs	r3, r3, #24
 800c98e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c992:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	373c      	adds	r7, #60	@ 0x3c
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd90      	pop	{r4, r7, pc}

0800c99e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e025      	b.n	800c9fe <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d106      	bne.n	800c9cc <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7f7 fa7e 	bl	8003ec8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	4619      	mov	r1, r3
 800c9de:	4610      	mov	r0, r2
 800c9e0:	f002 fde4 	bl	800f5ac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6818      	ldr	r0, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	f002 fe38 	bl	800f664 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d101      	bne.n	800ca1a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e04c      	b.n	800cab4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d106      	bne.n	800ca34 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7f6 fed0 	bl	80037d4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2202      	movs	r2, #2
 800ca38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f022 0203 	bic.w	r2, r2, #3
 800ca4a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	4b19      	ldr	r3, [pc, #100]	@ (800cabc <HAL_SPDIFRX_Init+0xb4>)
 800ca58:	4013      	ands	r3, r2
 800ca5a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800ca64:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800ca6a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800ca70:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800ca76:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800ca7c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800ca82:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800ca88:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800ca8e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800ca94:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	fff88407 	.word	0xfff88407

0800cac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d101      	bne.n	800cad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e09d      	b.n	800cc0e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d108      	bne.n	800caec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cae2:	d009      	beq.n	800caf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	61da      	str	r2, [r3, #28]
 800caea:	e005      	b.n	800caf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7f6 fec2 	bl	800389c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cb38:	d902      	bls.n	800cb40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	60fb      	str	r3, [r7, #12]
 800cb3e:	e002      	b.n	800cb46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cb40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800cb4e:	d007      	beq.n	800cb60 <HAL_SPI_Init+0xa0>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cb58:	d002      	beq.n	800cb60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cb70:	431a      	orrs	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	f003 0302 	and.w	r3, r3, #2
 800cb7a:	431a      	orrs	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	431a      	orrs	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	699b      	ldr	r3, [r3, #24]
 800cb8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	69db      	ldr	r3, [r3, #28]
 800cb94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cba2:	ea42 0103 	orr.w	r1, r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbaa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	0c1b      	lsrs	r3, r3, #16
 800cbbc:	f003 0204 	and.w	r2, r3, #4
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc4:	f003 0310 	and.w	r3, r3, #16
 800cbc8:	431a      	orrs	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbce:	f003 0308 	and.w	r3, r3, #8
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cbdc:	ea42 0103 	orr.w	r1, r2, r3
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	430a      	orrs	r2, r1
 800cbec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	69da      	ldr	r2, [r3, #28]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cbfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d101      	bne.n	800cc28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	e049      	b.n	800ccbc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7f6 fe8f 	bl	8003960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2202      	movs	r2, #2
 800cc46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	3304      	adds	r3, #4
 800cc52:	4619      	mov	r1, r3
 800cc54:	4610      	mov	r0, r2
 800cc56:	f000 fc11 	bl	800d47c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2201      	movs	r2, #1
 800cc76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2201      	movs	r2, #1
 800cc86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d001      	beq.n	800ccdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e054      	b.n	800cd86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2202      	movs	r2, #2
 800cce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68da      	ldr	r2, [r3, #12]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f042 0201 	orr.w	r2, r2, #1
 800ccf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a26      	ldr	r2, [pc, #152]	@ (800cd94 <HAL_TIM_Base_Start_IT+0xd0>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d022      	beq.n	800cd44 <HAL_TIM_Base_Start_IT+0x80>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd06:	d01d      	beq.n	800cd44 <HAL_TIM_Base_Start_IT+0x80>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a22      	ldr	r2, [pc, #136]	@ (800cd98 <HAL_TIM_Base_Start_IT+0xd4>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d018      	beq.n	800cd44 <HAL_TIM_Base_Start_IT+0x80>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a21      	ldr	r2, [pc, #132]	@ (800cd9c <HAL_TIM_Base_Start_IT+0xd8>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d013      	beq.n	800cd44 <HAL_TIM_Base_Start_IT+0x80>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a1f      	ldr	r2, [pc, #124]	@ (800cda0 <HAL_TIM_Base_Start_IT+0xdc>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d00e      	beq.n	800cd44 <HAL_TIM_Base_Start_IT+0x80>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a1e      	ldr	r2, [pc, #120]	@ (800cda4 <HAL_TIM_Base_Start_IT+0xe0>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d009      	beq.n	800cd44 <HAL_TIM_Base_Start_IT+0x80>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a1c      	ldr	r2, [pc, #112]	@ (800cda8 <HAL_TIM_Base_Start_IT+0xe4>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d004      	beq.n	800cd44 <HAL_TIM_Base_Start_IT+0x80>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a1b      	ldr	r2, [pc, #108]	@ (800cdac <HAL_TIM_Base_Start_IT+0xe8>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d115      	bne.n	800cd70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	689a      	ldr	r2, [r3, #8]
 800cd4a:	4b19      	ldr	r3, [pc, #100]	@ (800cdb0 <HAL_TIM_Base_Start_IT+0xec>)
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2b06      	cmp	r3, #6
 800cd54:	d015      	beq.n	800cd82 <HAL_TIM_Base_Start_IT+0xbe>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd5c:	d011      	beq.n	800cd82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f042 0201 	orr.w	r2, r2, #1
 800cd6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd6e:	e008      	b.n	800cd82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f042 0201 	orr.w	r2, r2, #1
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	e000      	b.n	800cd84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	40010000 	.word	0x40010000
 800cd98:	40000400 	.word	0x40000400
 800cd9c:	40000800 	.word	0x40000800
 800cda0:	40000c00 	.word	0x40000c00
 800cda4:	40010400 	.word	0x40010400
 800cda8:	40014000 	.word	0x40014000
 800cdac:	40001800 	.word	0x40001800
 800cdb0:	00010007 	.word	0x00010007

0800cdb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e049      	b.n	800ce5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d106      	bne.n	800cde0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7f6 fe2e 	bl	8003a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2202      	movs	r2, #2
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	3304      	adds	r3, #4
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4610      	mov	r0, r2
 800cdf4:	f000 fb42 	bl	800d47c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b084      	sub	sp, #16
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	f003 0302 	and.w	r3, r3, #2
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d020      	beq.n	800cec6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f003 0302 	and.w	r3, r3, #2
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d01b      	beq.n	800cec6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f06f 0202 	mvn.w	r2, #2
 800ce96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	f003 0303 	and.w	r3, r3, #3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fac7 	bl	800d440 <HAL_TIM_IC_CaptureCallback>
 800ceb2:	e005      	b.n	800cec0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 fab9 	bl	800d42c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 faca 	bl	800d454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	f003 0304 	and.w	r3, r3, #4
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d020      	beq.n	800cf12 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f003 0304 	and.w	r3, r3, #4
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d01b      	beq.n	800cf12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f06f 0204 	mvn.w	r2, #4
 800cee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2202      	movs	r2, #2
 800cee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d003      	beq.n	800cf00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 faa1 	bl	800d440 <HAL_TIM_IC_CaptureCallback>
 800cefe:	e005      	b.n	800cf0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fa93 	bl	800d42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 faa4 	bl	800d454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	f003 0308 	and.w	r3, r3, #8
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d020      	beq.n	800cf5e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f003 0308 	and.w	r3, r3, #8
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d01b      	beq.n	800cf5e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f06f 0208 	mvn.w	r2, #8
 800cf2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2204      	movs	r2, #4
 800cf34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	69db      	ldr	r3, [r3, #28]
 800cf3c:	f003 0303 	and.w	r3, r3, #3
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d003      	beq.n	800cf4c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fa7b 	bl	800d440 <HAL_TIM_IC_CaptureCallback>
 800cf4a:	e005      	b.n	800cf58 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 fa6d 	bl	800d42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fa7e 	bl	800d454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	f003 0310 	and.w	r3, r3, #16
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d020      	beq.n	800cfaa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f003 0310 	and.w	r3, r3, #16
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d01b      	beq.n	800cfaa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f06f 0210 	mvn.w	r2, #16
 800cf7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2208      	movs	r2, #8
 800cf80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	69db      	ldr	r3, [r3, #28]
 800cf88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d003      	beq.n	800cf98 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fa55 	bl	800d440 <HAL_TIM_IC_CaptureCallback>
 800cf96:	e005      	b.n	800cfa4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fa47 	bl	800d42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 fa58 	bl	800d454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	f003 0301 	and.w	r3, r3, #1
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00c      	beq.n	800cfce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d007      	beq.n	800cfce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f06f 0201 	mvn.w	r2, #1
 800cfc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7f5 fedd 	bl	8002d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d104      	bne.n	800cfe2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00c      	beq.n	800cffc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d007      	beq.n	800cffc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fef4 	bl	800dde4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00c      	beq.n	800d020 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d007      	beq.n	800d020 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 feec 	bl	800ddf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00c      	beq.n	800d044 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d030:	2b00      	cmp	r3, #0
 800d032:	d007      	beq.n	800d044 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fa12 	bl	800d468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	f003 0320 	and.w	r3, r3, #32
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00c      	beq.n	800d068 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f003 0320 	and.w	r3, r3, #32
 800d054:	2b00      	cmp	r3, #0
 800d056:	d007      	beq.n	800d068 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f06f 0220 	mvn.w	r2, #32
 800d060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 feb4 	bl	800ddd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d068:	bf00      	nop
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d086:	2b01      	cmp	r3, #1
 800d088:	d101      	bne.n	800d08e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d08a:	2302      	movs	r3, #2
 800d08c:	e0ff      	b.n	800d28e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2201      	movs	r2, #1
 800d092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b14      	cmp	r3, #20
 800d09a:	f200 80f0 	bhi.w	800d27e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d09e:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a4:	0800d0f9 	.word	0x0800d0f9
 800d0a8:	0800d27f 	.word	0x0800d27f
 800d0ac:	0800d27f 	.word	0x0800d27f
 800d0b0:	0800d27f 	.word	0x0800d27f
 800d0b4:	0800d139 	.word	0x0800d139
 800d0b8:	0800d27f 	.word	0x0800d27f
 800d0bc:	0800d27f 	.word	0x0800d27f
 800d0c0:	0800d27f 	.word	0x0800d27f
 800d0c4:	0800d17b 	.word	0x0800d17b
 800d0c8:	0800d27f 	.word	0x0800d27f
 800d0cc:	0800d27f 	.word	0x0800d27f
 800d0d0:	0800d27f 	.word	0x0800d27f
 800d0d4:	0800d1bb 	.word	0x0800d1bb
 800d0d8:	0800d27f 	.word	0x0800d27f
 800d0dc:	0800d27f 	.word	0x0800d27f
 800d0e0:	0800d27f 	.word	0x0800d27f
 800d0e4:	0800d1fd 	.word	0x0800d1fd
 800d0e8:	0800d27f 	.word	0x0800d27f
 800d0ec:	0800d27f 	.word	0x0800d27f
 800d0f0:	0800d27f 	.word	0x0800d27f
 800d0f4:	0800d23d 	.word	0x0800d23d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68b9      	ldr	r1, [r7, #8]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 fa62 	bl	800d5c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	699a      	ldr	r2, [r3, #24]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f042 0208 	orr.w	r2, r2, #8
 800d112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	699a      	ldr	r2, [r3, #24]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f022 0204 	bic.w	r2, r2, #4
 800d122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6999      	ldr	r1, [r3, #24]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	691a      	ldr	r2, [r3, #16]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	430a      	orrs	r2, r1
 800d134:	619a      	str	r2, [r3, #24]
      break;
 800d136:	e0a5      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68b9      	ldr	r1, [r7, #8]
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 fab4 	bl	800d6ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	699a      	ldr	r2, [r3, #24]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	699a      	ldr	r2, [r3, #24]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	6999      	ldr	r1, [r3, #24]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	021a      	lsls	r2, r3, #8
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	430a      	orrs	r2, r1
 800d176:	619a      	str	r2, [r3, #24]
      break;
 800d178:	e084      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fb0b 	bl	800d79c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	69da      	ldr	r2, [r3, #28]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f042 0208 	orr.w	r2, r2, #8
 800d194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	69da      	ldr	r2, [r3, #28]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f022 0204 	bic.w	r2, r2, #4
 800d1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	69d9      	ldr	r1, [r3, #28]
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	691a      	ldr	r2, [r3, #16]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	61da      	str	r2, [r3, #28]
      break;
 800d1b8:	e064      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68b9      	ldr	r1, [r7, #8]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 fb61 	bl	800d888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	69da      	ldr	r2, [r3, #28]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d1d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	69da      	ldr	r2, [r3, #28]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d1e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	69d9      	ldr	r1, [r3, #28]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	021a      	lsls	r2, r3, #8
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	430a      	orrs	r2, r1
 800d1f8:	61da      	str	r2, [r3, #28]
      break;
 800d1fa:	e043      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68b9      	ldr	r1, [r7, #8]
 800d202:	4618      	mov	r0, r3
 800d204:	f000 fb98 	bl	800d938 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f042 0208 	orr.w	r2, r2, #8
 800d216:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f022 0204 	bic.w	r2, r2, #4
 800d226:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	691a      	ldr	r2, [r3, #16]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	430a      	orrs	r2, r1
 800d238:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d23a:	e023      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	4618      	mov	r0, r3
 800d244:	f000 fbca 	bl	800d9dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d256:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d266:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	021a      	lsls	r2, r3, #8
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	430a      	orrs	r2, r1
 800d27a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d27c:	e002      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
 800d280:	75fb      	strb	r3, [r7, #23]
      break;
 800d282:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop

0800d298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d101      	bne.n	800d2b4 <HAL_TIM_ConfigClockSource+0x1c>
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	e0b4      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x186>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2202      	movs	r2, #2
 800d2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	4b56      	ldr	r3, [pc, #344]	@ (800d428 <HAL_TIM_ConfigClockSource+0x190>)
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d2da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2ec:	d03e      	beq.n	800d36c <HAL_TIM_ConfigClockSource+0xd4>
 800d2ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2f2:	f200 8087 	bhi.w	800d404 <HAL_TIM_ConfigClockSource+0x16c>
 800d2f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2fa:	f000 8086 	beq.w	800d40a <HAL_TIM_ConfigClockSource+0x172>
 800d2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d302:	d87f      	bhi.n	800d404 <HAL_TIM_ConfigClockSource+0x16c>
 800d304:	2b70      	cmp	r3, #112	@ 0x70
 800d306:	d01a      	beq.n	800d33e <HAL_TIM_ConfigClockSource+0xa6>
 800d308:	2b70      	cmp	r3, #112	@ 0x70
 800d30a:	d87b      	bhi.n	800d404 <HAL_TIM_ConfigClockSource+0x16c>
 800d30c:	2b60      	cmp	r3, #96	@ 0x60
 800d30e:	d050      	beq.n	800d3b2 <HAL_TIM_ConfigClockSource+0x11a>
 800d310:	2b60      	cmp	r3, #96	@ 0x60
 800d312:	d877      	bhi.n	800d404 <HAL_TIM_ConfigClockSource+0x16c>
 800d314:	2b50      	cmp	r3, #80	@ 0x50
 800d316:	d03c      	beq.n	800d392 <HAL_TIM_ConfigClockSource+0xfa>
 800d318:	2b50      	cmp	r3, #80	@ 0x50
 800d31a:	d873      	bhi.n	800d404 <HAL_TIM_ConfigClockSource+0x16c>
 800d31c:	2b40      	cmp	r3, #64	@ 0x40
 800d31e:	d058      	beq.n	800d3d2 <HAL_TIM_ConfigClockSource+0x13a>
 800d320:	2b40      	cmp	r3, #64	@ 0x40
 800d322:	d86f      	bhi.n	800d404 <HAL_TIM_ConfigClockSource+0x16c>
 800d324:	2b30      	cmp	r3, #48	@ 0x30
 800d326:	d064      	beq.n	800d3f2 <HAL_TIM_ConfigClockSource+0x15a>
 800d328:	2b30      	cmp	r3, #48	@ 0x30
 800d32a:	d86b      	bhi.n	800d404 <HAL_TIM_ConfigClockSource+0x16c>
 800d32c:	2b20      	cmp	r3, #32
 800d32e:	d060      	beq.n	800d3f2 <HAL_TIM_ConfigClockSource+0x15a>
 800d330:	2b20      	cmp	r3, #32
 800d332:	d867      	bhi.n	800d404 <HAL_TIM_ConfigClockSource+0x16c>
 800d334:	2b00      	cmp	r3, #0
 800d336:	d05c      	beq.n	800d3f2 <HAL_TIM_ConfigClockSource+0x15a>
 800d338:	2b10      	cmp	r3, #16
 800d33a:	d05a      	beq.n	800d3f2 <HAL_TIM_ConfigClockSource+0x15a>
 800d33c:	e062      	b.n	800d404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d34e:	f000 fc13 	bl	800db78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	609a      	str	r2, [r3, #8]
      break;
 800d36a:	e04f      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d37c:	f000 fbfc 	bl	800db78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	689a      	ldr	r2, [r3, #8]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d38e:	609a      	str	r2, [r3, #8]
      break;
 800d390:	e03c      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d39e:	461a      	mov	r2, r3
 800d3a0:	f000 fb70 	bl	800da84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2150      	movs	r1, #80	@ 0x50
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fbc9 	bl	800db42 <TIM_ITRx_SetConfig>
      break;
 800d3b0:	e02c      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3be:	461a      	mov	r2, r3
 800d3c0:	f000 fb8f 	bl	800dae2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2160      	movs	r1, #96	@ 0x60
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 fbb9 	bl	800db42 <TIM_ITRx_SetConfig>
      break;
 800d3d0:	e01c      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3de:	461a      	mov	r2, r3
 800d3e0:	f000 fb50 	bl	800da84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2140      	movs	r1, #64	@ 0x40
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 fba9 	bl	800db42 <TIM_ITRx_SetConfig>
      break;
 800d3f0:	e00c      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	4610      	mov	r0, r2
 800d3fe:	f000 fba0 	bl	800db42 <TIM_ITRx_SetConfig>
      break;
 800d402:	e003      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	73fb      	strb	r3, [r7, #15]
      break;
 800d408:	e000      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d40a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	fffeff88 	.word	0xfffeff88

0800d42c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d45c:	bf00      	nop
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a43      	ldr	r2, [pc, #268]	@ (800d59c <TIM_Base_SetConfig+0x120>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d013      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d49a:	d00f      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a40      	ldr	r2, [pc, #256]	@ (800d5a0 <TIM_Base_SetConfig+0x124>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d00b      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a3f      	ldr	r2, [pc, #252]	@ (800d5a4 <TIM_Base_SetConfig+0x128>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d007      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a3e      	ldr	r2, [pc, #248]	@ (800d5a8 <TIM_Base_SetConfig+0x12c>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d003      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4a3d      	ldr	r2, [pc, #244]	@ (800d5ac <TIM_Base_SetConfig+0x130>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d108      	bne.n	800d4ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4a32      	ldr	r2, [pc, #200]	@ (800d59c <TIM_Base_SetConfig+0x120>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d02b      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4dc:	d027      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4a2f      	ldr	r2, [pc, #188]	@ (800d5a0 <TIM_Base_SetConfig+0x124>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d023      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4a2e      	ldr	r2, [pc, #184]	@ (800d5a4 <TIM_Base_SetConfig+0x128>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d01f      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4a2d      	ldr	r2, [pc, #180]	@ (800d5a8 <TIM_Base_SetConfig+0x12c>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d01b      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4a2c      	ldr	r2, [pc, #176]	@ (800d5ac <TIM_Base_SetConfig+0x130>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d017      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	4a2b      	ldr	r2, [pc, #172]	@ (800d5b0 <TIM_Base_SetConfig+0x134>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d013      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a2a      	ldr	r2, [pc, #168]	@ (800d5b4 <TIM_Base_SetConfig+0x138>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d00f      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a29      	ldr	r2, [pc, #164]	@ (800d5b8 <TIM_Base_SetConfig+0x13c>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d00b      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	4a28      	ldr	r2, [pc, #160]	@ (800d5bc <TIM_Base_SetConfig+0x140>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d007      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a27      	ldr	r2, [pc, #156]	@ (800d5c0 <TIM_Base_SetConfig+0x144>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d003      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a26      	ldr	r2, [pc, #152]	@ (800d5c4 <TIM_Base_SetConfig+0x148>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d108      	bne.n	800d540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	689a      	ldr	r2, [r3, #8]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a0e      	ldr	r2, [pc, #56]	@ (800d59c <TIM_Base_SetConfig+0x120>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d003      	beq.n	800d56e <TIM_Base_SetConfig+0xf2>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a10      	ldr	r2, [pc, #64]	@ (800d5ac <TIM_Base_SetConfig+0x130>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d103      	bne.n	800d576 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	691a      	ldr	r2, [r3, #16]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f043 0204 	orr.w	r2, r3, #4
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	601a      	str	r2, [r3, #0]
}
 800d58e:	bf00      	nop
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	40010000 	.word	0x40010000
 800d5a0:	40000400 	.word	0x40000400
 800d5a4:	40000800 	.word	0x40000800
 800d5a8:	40000c00 	.word	0x40000c00
 800d5ac:	40010400 	.word	0x40010400
 800d5b0:	40014000 	.word	0x40014000
 800d5b4:	40014400 	.word	0x40014400
 800d5b8:	40014800 	.word	0x40014800
 800d5bc:	40001800 	.word	0x40001800
 800d5c0:	40001c00 	.word	0x40001c00
 800d5c4:	40002000 	.word	0x40002000

0800d5c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b087      	sub	sp, #28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a1b      	ldr	r3, [r3, #32]
 800d5d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6a1b      	ldr	r3, [r3, #32]
 800d5dc:	f023 0201 	bic.w	r2, r3, #1
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d6a0 <TIM_OC1_SetConfig+0xd8>)
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f023 0303 	bic.w	r3, r3, #3
 800d5fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	4313      	orrs	r3, r2
 800d608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	f023 0302 	bic.w	r3, r3, #2
 800d610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	697a      	ldr	r2, [r7, #20]
 800d618:	4313      	orrs	r3, r2
 800d61a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a21      	ldr	r2, [pc, #132]	@ (800d6a4 <TIM_OC1_SetConfig+0xdc>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d003      	beq.n	800d62c <TIM_OC1_SetConfig+0x64>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a20      	ldr	r2, [pc, #128]	@ (800d6a8 <TIM_OC1_SetConfig+0xe0>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d10c      	bne.n	800d646 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	f023 0308 	bic.w	r3, r3, #8
 800d632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	697a      	ldr	r2, [r7, #20]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f023 0304 	bic.w	r3, r3, #4
 800d644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a16      	ldr	r2, [pc, #88]	@ (800d6a4 <TIM_OC1_SetConfig+0xdc>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d003      	beq.n	800d656 <TIM_OC1_SetConfig+0x8e>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a15      	ldr	r2, [pc, #84]	@ (800d6a8 <TIM_OC1_SetConfig+0xe0>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d111      	bne.n	800d67a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d65c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	693a      	ldr	r2, [r7, #16]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	693a      	ldr	r2, [r7, #16]
 800d676:	4313      	orrs	r3, r2
 800d678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	693a      	ldr	r2, [r7, #16]
 800d67e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	685a      	ldr	r2, [r3, #4]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	697a      	ldr	r2, [r7, #20]
 800d692:	621a      	str	r2, [r3, #32]
}
 800d694:	bf00      	nop
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	fffeff8f 	.word	0xfffeff8f
 800d6a4:	40010000 	.word	0x40010000
 800d6a8:	40010400 	.word	0x40010400

0800d6ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a1b      	ldr	r3, [r3, #32]
 800d6ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6a1b      	ldr	r3, [r3, #32]
 800d6c0:	f023 0210 	bic.w	r2, r3, #16
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	4b2e      	ldr	r3, [pc, #184]	@ (800d790 <TIM_OC2_SetConfig+0xe4>)
 800d6d8:	4013      	ands	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d6e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	021b      	lsls	r3, r3, #8
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	f023 0320 	bic.w	r3, r3, #32
 800d6f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	011b      	lsls	r3, r3, #4
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	4313      	orrs	r3, r2
 800d702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a23      	ldr	r2, [pc, #140]	@ (800d794 <TIM_OC2_SetConfig+0xe8>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d003      	beq.n	800d714 <TIM_OC2_SetConfig+0x68>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a22      	ldr	r2, [pc, #136]	@ (800d798 <TIM_OC2_SetConfig+0xec>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d10d      	bne.n	800d730 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d71a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	011b      	lsls	r3, r3, #4
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	4313      	orrs	r3, r2
 800d726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d72e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4a18      	ldr	r2, [pc, #96]	@ (800d794 <TIM_OC2_SetConfig+0xe8>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d003      	beq.n	800d740 <TIM_OC2_SetConfig+0x94>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a17      	ldr	r2, [pc, #92]	@ (800d798 <TIM_OC2_SetConfig+0xec>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d113      	bne.n	800d768 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d74e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	695b      	ldr	r3, [r3, #20]
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	4313      	orrs	r3, r2
 800d75a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	699b      	ldr	r3, [r3, #24]
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	693a      	ldr	r2, [r7, #16]
 800d764:	4313      	orrs	r3, r2
 800d766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	693a      	ldr	r2, [r7, #16]
 800d76c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	685a      	ldr	r2, [r3, #4]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	621a      	str	r2, [r3, #32]
}
 800d782:	bf00      	nop
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	feff8fff 	.word	0xfeff8fff
 800d794:	40010000 	.word	0x40010000
 800d798:	40010400 	.word	0x40010400

0800d79c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b087      	sub	sp, #28
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a1b      	ldr	r3, [r3, #32]
 800d7aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a1b      	ldr	r3, [r3, #32]
 800d7b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	69db      	ldr	r3, [r3, #28]
 800d7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	4b2d      	ldr	r3, [pc, #180]	@ (800d87c <TIM_OC3_SetConfig+0xe0>)
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f023 0303 	bic.w	r3, r3, #3
 800d7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d7e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	021b      	lsls	r3, r3, #8
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a22      	ldr	r2, [pc, #136]	@ (800d880 <TIM_OC3_SetConfig+0xe4>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d003      	beq.n	800d802 <TIM_OC3_SetConfig+0x66>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a21      	ldr	r2, [pc, #132]	@ (800d884 <TIM_OC3_SetConfig+0xe8>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d10d      	bne.n	800d81e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	697a      	ldr	r2, [r7, #20]
 800d812:	4313      	orrs	r3, r2
 800d814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d81c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a17      	ldr	r2, [pc, #92]	@ (800d880 <TIM_OC3_SetConfig+0xe4>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d003      	beq.n	800d82e <TIM_OC3_SetConfig+0x92>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a16      	ldr	r2, [pc, #88]	@ (800d884 <TIM_OC3_SetConfig+0xe8>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d113      	bne.n	800d856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d83c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	011b      	lsls	r3, r3, #4
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	4313      	orrs	r3, r2
 800d848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	011b      	lsls	r3, r3, #4
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	4313      	orrs	r3, r2
 800d854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	693a      	ldr	r2, [r7, #16]
 800d85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	685a      	ldr	r2, [r3, #4]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	621a      	str	r2, [r3, #32]
}
 800d870:	bf00      	nop
 800d872:	371c      	adds	r7, #28
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	fffeff8f 	.word	0xfffeff8f
 800d880:	40010000 	.word	0x40010000
 800d884:	40010400 	.word	0x40010400

0800d888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d888:	b480      	push	{r7}
 800d88a:	b087      	sub	sp, #28
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a1b      	ldr	r3, [r3, #32]
 800d89c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	4b1e      	ldr	r3, [pc, #120]	@ (800d92c <TIM_OC4_SetConfig+0xa4>)
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d8be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	021b      	lsls	r3, r3, #8
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d8d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	031b      	lsls	r3, r3, #12
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a13      	ldr	r2, [pc, #76]	@ (800d930 <TIM_OC4_SetConfig+0xa8>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d003      	beq.n	800d8f0 <TIM_OC4_SetConfig+0x68>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a12      	ldr	r2, [pc, #72]	@ (800d934 <TIM_OC4_SetConfig+0xac>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d109      	bne.n	800d904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d8f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	019b      	lsls	r3, r3, #6
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	4313      	orrs	r3, r2
 800d902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	685a      	ldr	r2, [r3, #4]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	621a      	str	r2, [r3, #32]
}
 800d91e:	bf00      	nop
 800d920:	371c      	adds	r7, #28
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	feff8fff 	.word	0xfeff8fff
 800d930:	40010000 	.word	0x40010000
 800d934:	40010400 	.word	0x40010400

0800d938 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d938:	b480      	push	{r7}
 800d93a:	b087      	sub	sp, #28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a1b      	ldr	r3, [r3, #32]
 800d946:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	4b1b      	ldr	r3, [pc, #108]	@ (800d9d0 <TIM_OC5_SetConfig+0x98>)
 800d964:	4013      	ands	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	4313      	orrs	r3, r2
 800d970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d978:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	041b      	lsls	r3, r3, #16
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	4313      	orrs	r3, r2
 800d984:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4a12      	ldr	r2, [pc, #72]	@ (800d9d4 <TIM_OC5_SetConfig+0x9c>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d003      	beq.n	800d996 <TIM_OC5_SetConfig+0x5e>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4a11      	ldr	r2, [pc, #68]	@ (800d9d8 <TIM_OC5_SetConfig+0xa0>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d109      	bne.n	800d9aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d99c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	695b      	ldr	r3, [r3, #20]
 800d9a2:	021b      	lsls	r3, r3, #8
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	697a      	ldr	r2, [r7, #20]
 800d9ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	693a      	ldr	r2, [r7, #16]
 800d9c2:	621a      	str	r2, [r3, #32]
}
 800d9c4:	bf00      	nop
 800d9c6:	371c      	adds	r7, #28
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	fffeff8f 	.word	0xfffeff8f
 800d9d4:	40010000 	.word	0x40010000
 800d9d8:	40010400 	.word	0x40010400

0800d9dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b087      	sub	sp, #28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6a1b      	ldr	r3, [r3, #32]
 800d9f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	4b1c      	ldr	r3, [pc, #112]	@ (800da78 <TIM_OC6_SetConfig+0x9c>)
 800da08:	4013      	ands	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	021b      	lsls	r3, r3, #8
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	4313      	orrs	r3, r2
 800da16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	051b      	lsls	r3, r3, #20
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	4313      	orrs	r3, r2
 800da2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a13      	ldr	r2, [pc, #76]	@ (800da7c <TIM_OC6_SetConfig+0xa0>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d003      	beq.n	800da3c <TIM_OC6_SetConfig+0x60>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a12      	ldr	r2, [pc, #72]	@ (800da80 <TIM_OC6_SetConfig+0xa4>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d109      	bne.n	800da50 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800da42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	029b      	lsls	r3, r3, #10
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	4313      	orrs	r3, r2
 800da4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	697a      	ldr	r2, [r7, #20]
 800da54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	621a      	str	r2, [r3, #32]
}
 800da6a:	bf00      	nop
 800da6c:	371c      	adds	r7, #28
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	feff8fff 	.word	0xfeff8fff
 800da7c:	40010000 	.word	0x40010000
 800da80:	40010400 	.word	0x40010400

0800da84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da84:	b480      	push	{r7}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6a1b      	ldr	r3, [r3, #32]
 800da94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6a1b      	ldr	r3, [r3, #32]
 800da9a:	f023 0201 	bic.w	r2, r3, #1
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	699b      	ldr	r3, [r3, #24]
 800daa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800daae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	011b      	lsls	r3, r3, #4
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f023 030a 	bic.w	r3, r3, #10
 800dac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	621a      	str	r2, [r3, #32]
}
 800dad6:	bf00      	nop
 800dad8:	371c      	adds	r7, #28
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dae2:	b480      	push	{r7}
 800dae4:	b087      	sub	sp, #28
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	60b9      	str	r1, [r7, #8]
 800daec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6a1b      	ldr	r3, [r3, #32]
 800daf8:	f023 0210 	bic.w	r2, r3, #16
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800db0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	031b      	lsls	r3, r3, #12
 800db12:	693a      	ldr	r2, [r7, #16]
 800db14:	4313      	orrs	r3, r2
 800db16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800db1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	011b      	lsls	r3, r3, #4
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	4313      	orrs	r3, r2
 800db28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	693a      	ldr	r2, [r7, #16]
 800db2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	621a      	str	r2, [r3, #32]
}
 800db36:	bf00      	nop
 800db38:	371c      	adds	r7, #28
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr

0800db42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db42:	b480      	push	{r7}
 800db44:	b085      	sub	sp, #20
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
 800db4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	4313      	orrs	r3, r2
 800db60:	f043 0307 	orr.w	r3, r3, #7
 800db64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	609a      	str	r2, [r3, #8]
}
 800db6c:	bf00      	nop
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800db92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	021a      	lsls	r2, r3, #8
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	431a      	orrs	r2, r3
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	4313      	orrs	r3, r2
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	697a      	ldr	r2, [r7, #20]
 800dbaa:	609a      	str	r2, [r3, #8]
}
 800dbac:	bf00      	nop
 800dbae:	371c      	adds	r7, #28
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d101      	bne.n	800dbd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dbcc:	2302      	movs	r3, #2
 800dbce:	e06d      	b.n	800dcac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a30      	ldr	r2, [pc, #192]	@ (800dcb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d004      	beq.n	800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a2f      	ldr	r2, [pc, #188]	@ (800dcbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d108      	bne.n	800dc16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dc0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	68fa      	ldr	r2, [r7, #12]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	4313      	orrs	r3, r2
 800dc26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a20      	ldr	r2, [pc, #128]	@ (800dcb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d022      	beq.n	800dc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc42:	d01d      	beq.n	800dc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a1d      	ldr	r2, [pc, #116]	@ (800dcc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d018      	beq.n	800dc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a1c      	ldr	r2, [pc, #112]	@ (800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d013      	beq.n	800dc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a1a      	ldr	r2, [pc, #104]	@ (800dcc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d00e      	beq.n	800dc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a15      	ldr	r2, [pc, #84]	@ (800dcbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d009      	beq.n	800dc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a16      	ldr	r2, [pc, #88]	@ (800dccc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d004      	beq.n	800dc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a15      	ldr	r2, [pc, #84]	@ (800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d10c      	bne.n	800dc9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3714      	adds	r7, #20
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	40010000 	.word	0x40010000
 800dcbc:	40010400 	.word	0x40010400
 800dcc0:	40000400 	.word	0x40000400
 800dcc4:	40000800 	.word	0x40000800
 800dcc8:	40000c00 	.word	0x40000c00
 800dccc:	40014000 	.word	0x40014000
 800dcd0:	40001800 	.word	0x40001800

0800dcd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dcde:	2300      	movs	r3, #0
 800dce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d101      	bne.n	800dcf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dcec:	2302      	movs	r3, #2
 800dcee:	e065      	b.n	800ddbc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd56:	4313      	orrs	r3, r2
 800dd58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	699b      	ldr	r3, [r3, #24]
 800dd64:	041b      	lsls	r3, r3, #16
 800dd66:	4313      	orrs	r3, r2
 800dd68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a16      	ldr	r2, [pc, #88]	@ (800ddc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d004      	beq.n	800dd7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a14      	ldr	r2, [pc, #80]	@ (800ddcc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d115      	bne.n	800ddaa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd88:	051b      	lsls	r3, r3, #20
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	69db      	ldr	r3, [r3, #28]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	6a1b      	ldr	r3, [r3, #32]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3714      	adds	r7, #20
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	40010000 	.word	0x40010000
 800ddcc:	40010400 	.word	0x40010400

0800ddd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d101      	bne.n	800de1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e040      	b.n	800dea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800de22:	2b00      	cmp	r3, #0
 800de24:	d106      	bne.n	800de34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7f5 fef2 	bl	8003c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2224      	movs	r2, #36	@ 0x24
 800de38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f022 0201 	bic.w	r2, r2, #1
 800de48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d002      	beq.n	800de58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 ffb6 	bl	800edc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 fd4f 	bl	800e8fc <UART_SetConfig>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b01      	cmp	r3, #1
 800de62:	d101      	bne.n	800de68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800de64:	2301      	movs	r3, #1
 800de66:	e01b      	b.n	800dea0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	685a      	ldr	r2, [r3, #4]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800de76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	689a      	ldr	r2, [r3, #8]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800de86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f042 0201 	orr.w	r2, r2, #1
 800de96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f001 f835 	bl	800ef08 <UART_CheckIdleState>
 800de9e:	4603      	mov	r3, r0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b08a      	sub	sp, #40	@ 0x28
 800deac:	af02      	add	r7, sp, #8
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	603b      	str	r3, [r7, #0]
 800deb4:	4613      	mov	r3, r2
 800deb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800debc:	2b20      	cmp	r3, #32
 800debe:	d177      	bne.n	800dfb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d002      	beq.n	800decc <HAL_UART_Transmit+0x24>
 800dec6:	88fb      	ldrh	r3, [r7, #6]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d101      	bne.n	800ded0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800decc:	2301      	movs	r3, #1
 800dece:	e070      	b.n	800dfb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2200      	movs	r2, #0
 800ded4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2221      	movs	r2, #33	@ 0x21
 800dedc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dede:	f7f6 fe13 	bl	8004b08 <HAL_GetTick>
 800dee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	88fa      	ldrh	r2, [r7, #6]
 800dee8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	88fa      	ldrh	r2, [r7, #6]
 800def0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800defc:	d108      	bne.n	800df10 <HAL_UART_Transmit+0x68>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	691b      	ldr	r3, [r3, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d104      	bne.n	800df10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800df06:	2300      	movs	r3, #0
 800df08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	61bb      	str	r3, [r7, #24]
 800df0e:	e003      	b.n	800df18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df14:	2300      	movs	r3, #0
 800df16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800df18:	e02f      	b.n	800df7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	2200      	movs	r2, #0
 800df22:	2180      	movs	r1, #128	@ 0x80
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f001 f846 	bl	800efb6 <UART_WaitOnFlagUntilTimeout>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2220      	movs	r2, #32
 800df34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800df36:	2303      	movs	r3, #3
 800df38:	e03b      	b.n	800dfb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10b      	bne.n	800df58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	461a      	mov	r2, r3
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	3302      	adds	r3, #2
 800df54:	61bb      	str	r3, [r7, #24]
 800df56:	e007      	b.n	800df68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	781a      	ldrb	r2, [r3, #0]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	3301      	adds	r3, #1
 800df66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800df6e:	b29b      	uxth	r3, r3
 800df70:	3b01      	subs	r3, #1
 800df72:	b29a      	uxth	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800df80:	b29b      	uxth	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1c9      	bne.n	800df1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2200      	movs	r2, #0
 800df8e:	2140      	movs	r1, #64	@ 0x40
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f001 f810 	bl	800efb6 <UART_WaitOnFlagUntilTimeout>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d004      	beq.n	800dfa6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800dfa2:	2303      	movs	r3, #3
 800dfa4:	e005      	b.n	800dfb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2220      	movs	r2, #32
 800dfaa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	e000      	b.n	800dfb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800dfb0:	2302      	movs	r3, #2
  }
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3720      	adds	r7, #32
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b08a      	sub	sp, #40	@ 0x28
 800dfbe:	af02      	add	r7, sp, #8
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	603b      	str	r3, [r7, #0]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfd0:	2b20      	cmp	r3, #32
 800dfd2:	f040 80b5 	bne.w	800e140 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <HAL_UART_Receive+0x28>
 800dfdc:	88fb      	ldrh	r3, [r7, #6]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d101      	bne.n	800dfe6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e0ad      	b.n	800e142 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2222      	movs	r2, #34	@ 0x22
 800dff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dffc:	f7f6 fd84 	bl	8004b08 <HAL_GetTick>
 800e000:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	88fa      	ldrh	r2, [r7, #6]
 800e006:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	88fa      	ldrh	r2, [r7, #6]
 800e00e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e01a:	d10e      	bne.n	800e03a <HAL_UART_Receive+0x80>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d105      	bne.n	800e030 <HAL_UART_Receive+0x76>
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e02a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e02e:	e02d      	b.n	800e08c <HAL_UART_Receive+0xd2>
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	22ff      	movs	r2, #255	@ 0xff
 800e034:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e038:	e028      	b.n	800e08c <HAL_UART_Receive+0xd2>
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10d      	bne.n	800e05e <HAL_UART_Receive+0xa4>
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d104      	bne.n	800e054 <HAL_UART_Receive+0x9a>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	22ff      	movs	r2, #255	@ 0xff
 800e04e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e052:	e01b      	b.n	800e08c <HAL_UART_Receive+0xd2>
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	227f      	movs	r2, #127	@ 0x7f
 800e058:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e05c:	e016      	b.n	800e08c <HAL_UART_Receive+0xd2>
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e066:	d10d      	bne.n	800e084 <HAL_UART_Receive+0xca>
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d104      	bne.n	800e07a <HAL_UART_Receive+0xc0>
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	227f      	movs	r2, #127	@ 0x7f
 800e074:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e078:	e008      	b.n	800e08c <HAL_UART_Receive+0xd2>
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	223f      	movs	r2, #63	@ 0x3f
 800e07e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e082:	e003      	b.n	800e08c <HAL_UART_Receive+0xd2>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e092:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e09c:	d108      	bne.n	800e0b0 <HAL_UART_Receive+0xf6>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d104      	bne.n	800e0b0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	61bb      	str	r3, [r7, #24]
 800e0ae:	e003      	b.n	800e0b8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e0b8:	e036      	b.n	800e128 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	2120      	movs	r1, #32
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f000 ff76 	bl	800efb6 <UART_WaitOnFlagUntilTimeout>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d005      	beq.n	800e0dc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2220      	movs	r2, #32
 800e0d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	e032      	b.n	800e142 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d10c      	bne.n	800e0fc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	8a7b      	ldrh	r3, [r7, #18]
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	3302      	adds	r3, #2
 800e0f8:	61bb      	str	r3, [r7, #24]
 800e0fa:	e00c      	b.n	800e116 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e102:	b2da      	uxtb	r2, r3
 800e104:	8a7b      	ldrh	r3, [r7, #18]
 800e106:	b2db      	uxtb	r3, r3
 800e108:	4013      	ands	r3, r2
 800e10a:	b2da      	uxtb	r2, r3
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	3301      	adds	r3, #1
 800e114:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	3b01      	subs	r3, #1
 800e120:	b29a      	uxth	r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e12e:	b29b      	uxth	r3, r3
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1c2      	bne.n	800e0ba <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2220      	movs	r2, #32
 800e138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	e000      	b.n	800e142 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e140:	2302      	movs	r3, #2
  }
}
 800e142:	4618      	mov	r0, r3
 800e144:	3720      	adds	r7, #32
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b08a      	sub	sp, #40	@ 0x28
 800e14e:	af00      	add	r7, sp, #0
 800e150:	60f8      	str	r0, [r7, #12]
 800e152:	60b9      	str	r1, [r7, #8]
 800e154:	4613      	mov	r3, r2
 800e156:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e15e:	2b20      	cmp	r3, #32
 800e160:	d132      	bne.n	800e1c8 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <HAL_UART_Receive_DMA+0x24>
 800e168:	88fb      	ldrh	r3, [r7, #6]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e16e:	2301      	movs	r3, #1
 800e170:	e02b      	b.n	800e1ca <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e182:	2b00      	cmp	r3, #0
 800e184:	d018      	beq.n	800e1b8 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	e853 3f00 	ldrex	r3, [r3]
 800e192:	613b      	str	r3, [r7, #16]
   return(result);
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e19a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a4:	623b      	str	r3, [r7, #32]
 800e1a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a8:	69f9      	ldr	r1, [r7, #28]
 800e1aa:	6a3a      	ldr	r2, [r7, #32]
 800e1ac:	e841 2300 	strex	r3, r2, [r1]
 800e1b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1e6      	bne.n	800e186 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e1b8:	88fb      	ldrh	r3, [r7, #6]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	68b9      	ldr	r1, [r7, #8]
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f000 ff66 	bl	800f090 <UART_Start_Receive_DMA>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	e000      	b.n	800e1ca <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e1c8:	2302      	movs	r3, #2
  }
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3728      	adds	r7, #40	@ 0x28
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b090      	sub	sp, #64	@ 0x40
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1f2:	2b80      	cmp	r3, #128	@ 0x80
 800e1f4:	d139      	bne.n	800e26a <HAL_UART_DMAStop+0x98>
 800e1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1f8:	2b21      	cmp	r3, #33	@ 0x21
 800e1fa:	d136      	bne.n	800e26a <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	3308      	adds	r3, #8
 800e202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	e853 3f00 	ldrex	r3, [r3]
 800e20a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e212:	637b      	str	r3, [r7, #52]	@ 0x34
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	3308      	adds	r3, #8
 800e21a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e21c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e21e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e224:	e841 2300 	strex	r3, r2, [r1]
 800e228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1e5      	bne.n	800e1fc <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e234:	2b00      	cmp	r3, #0
 800e236:	d015      	beq.n	800e264 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7f7 fae5 	bl	800580c <HAL_DMA_Abort>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00d      	beq.n	800e264 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7f7 fcf9 	bl	8005c44 <HAL_DMA_GetError>
 800e252:	4603      	mov	r3, r0
 800e254:	2b20      	cmp	r3, #32
 800e256:	d105      	bne.n	800e264 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2210      	movs	r2, #16
 800e25c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e260:	2303      	movs	r3, #3
 800e262:	e044      	b.n	800e2ee <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 ffb3 	bl	800f1d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e274:	2b40      	cmp	r3, #64	@ 0x40
 800e276:	d139      	bne.n	800e2ec <HAL_UART_DMAStop+0x11a>
 800e278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27a:	2b22      	cmp	r3, #34	@ 0x22
 800e27c:	d136      	bne.n	800e2ec <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3308      	adds	r3, #8
 800e284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	e853 3f00 	ldrex	r3, [r3]
 800e28c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e294:	633b      	str	r3, [r7, #48]	@ 0x30
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3308      	adds	r3, #8
 800e29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e29e:	61ba      	str	r2, [r7, #24]
 800e2a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a2:	6979      	ldr	r1, [r7, #20]
 800e2a4:	69ba      	ldr	r2, [r7, #24]
 800e2a6:	e841 2300 	strex	r3, r2, [r1]
 800e2aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1e5      	bne.n	800e27e <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d015      	beq.n	800e2e6 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7f7 faa4 	bl	800580c <HAL_DMA_Abort>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00d      	beq.n	800e2e6 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7f7 fcb8 	bl	8005c44 <HAL_DMA_GetError>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b20      	cmp	r3, #32
 800e2d8:	d105      	bne.n	800e2e6 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2210      	movs	r2, #16
 800e2de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e003      	b.n	800e2ee <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 ff98 	bl	800f21c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3740      	adds	r7, #64	@ 0x40
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
	...

0800e2f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b0ba      	sub	sp, #232	@ 0xe8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e31e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e322:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e326:	4013      	ands	r3, r2
 800e328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e32c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e330:	2b00      	cmp	r3, #0
 800e332:	d115      	bne.n	800e360 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e338:	f003 0320 	and.w	r3, r3, #32
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00f      	beq.n	800e360 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e344:	f003 0320 	and.w	r3, r3, #32
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d009      	beq.n	800e360 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e350:	2b00      	cmp	r3, #0
 800e352:	f000 82b1 	beq.w	800e8b8 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	4798      	blx	r3
      }
      return;
 800e35e:	e2ab      	b.n	800e8b8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e364:	2b00      	cmp	r3, #0
 800e366:	f000 8117 	beq.w	800e598 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e36a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	2b00      	cmp	r3, #0
 800e374:	d106      	bne.n	800e384 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e376:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e37a:	4b85      	ldr	r3, [pc, #532]	@ (800e590 <HAL_UART_IRQHandler+0x298>)
 800e37c:	4013      	ands	r3, r2
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 810a 	beq.w	800e598 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d011      	beq.n	800e3b4 <HAL_UART_IRQHandler+0xbc>
 800e390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00b      	beq.n	800e3b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3aa:	f043 0201 	orr.w	r2, r3, #1
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3b8:	f003 0302 	and.w	r3, r3, #2
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d011      	beq.n	800e3e4 <HAL_UART_IRQHandler+0xec>
 800e3c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00b      	beq.n	800e3e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2202      	movs	r2, #2
 800e3d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3da:	f043 0204 	orr.w	r2, r3, #4
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3e8:	f003 0304 	and.w	r3, r3, #4
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d011      	beq.n	800e414 <HAL_UART_IRQHandler+0x11c>
 800e3f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e3f4:	f003 0301 	and.w	r3, r3, #1
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00b      	beq.n	800e414 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2204      	movs	r2, #4
 800e402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e40a:	f043 0202 	orr.w	r2, r3, #2
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e418:	f003 0308 	and.w	r3, r3, #8
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d017      	beq.n	800e450 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e424:	f003 0320 	and.w	r3, r3, #32
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d105      	bne.n	800e438 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e42c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e430:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e434:	2b00      	cmp	r3, #0
 800e436:	d00b      	beq.n	800e450 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2208      	movs	r2, #8
 800e43e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e446:	f043 0208 	orr.w	r2, r3, #8
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d012      	beq.n	800e482 <HAL_UART_IRQHandler+0x18a>
 800e45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e460:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00c      	beq.n	800e482 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e478:	f043 0220 	orr.w	r2, r3, #32
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 8217 	beq.w	800e8bc <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e492:	f003 0320 	and.w	r3, r3, #32
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00d      	beq.n	800e4b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e49e:	f003 0320 	and.w	r3, r3, #32
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d007      	beq.n	800e4b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d003      	beq.n	800e4b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4ca:	2b40      	cmp	r3, #64	@ 0x40
 800e4cc:	d005      	beq.n	800e4da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e4ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e4d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d04f      	beq.n	800e57a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fe9e 	bl	800f21c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4ea:	2b40      	cmp	r3, #64	@ 0x40
 800e4ec:	d141      	bne.n	800e572 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e4fc:	e853 3f00 	ldrex	r3, [r3]
 800e500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e50c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3308      	adds	r3, #8
 800e516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e51a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e51e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e52a:	e841 2300 	strex	r3, r2, [r1]
 800e52e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1d9      	bne.n	800e4ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d013      	beq.n	800e56a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e546:	4a13      	ldr	r2, [pc, #76]	@ (800e594 <HAL_UART_IRQHandler+0x29c>)
 800e548:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e54e:	4618      	mov	r0, r3
 800e550:	f7f7 f9cc 	bl	80058ec <HAL_DMA_Abort_IT>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d017      	beq.n	800e58a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e55e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e564:	4610      	mov	r0, r2
 800e566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e568:	e00f      	b.n	800e58a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7f2 fd74 	bl	8001058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e570:	e00b      	b.n	800e58a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7f2 fd70 	bl	8001058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e578:	e007      	b.n	800e58a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7f2 fd6c 	bl	8001058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e588:	e198      	b.n	800e8bc <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e58a:	bf00      	nop
    return;
 800e58c:	e196      	b.n	800e8bc <HAL_UART_IRQHandler+0x5c4>
 800e58e:	bf00      	nop
 800e590:	04000120 	.word	0x04000120
 800e594:	0800f533 	.word	0x0800f533

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	f040 8166 	bne.w	800e86e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5a6:	f003 0310 	and.w	r3, r3, #16
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f000 815f 	beq.w	800e86e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5b4:	f003 0310 	and.w	r3, r3, #16
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 8158 	beq.w	800e86e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2210      	movs	r2, #16
 800e5c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5d0:	2b40      	cmp	r3, #64	@ 0x40
 800e5d2:	f040 80d0 	bne.w	800e776 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e5e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f000 80ab 	beq.w	800e742 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e5f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	f080 80a3 	bcs.w	800e742 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e602:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e60a:	69db      	ldr	r3, [r3, #28]
 800e60c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e610:	f000 8086 	beq.w	800e720 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e620:	e853 3f00 	ldrex	r3, [r3]
 800e624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e62c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	461a      	mov	r2, r3
 800e63a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e63e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e642:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e646:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e64a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e64e:	e841 2300 	strex	r3, r2, [r1]
 800e652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1da      	bne.n	800e614 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3308      	adds	r3, #8
 800e664:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e668:	e853 3f00 	ldrex	r3, [r3]
 800e66c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e66e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e670:	f023 0301 	bic.w	r3, r3, #1
 800e674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3308      	adds	r3, #8
 800e67e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e682:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e686:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e688:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e68a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e68e:	e841 2300 	strex	r3, r2, [r1]
 800e692:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1e1      	bne.n	800e65e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3308      	adds	r3, #8
 800e6a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6a4:	e853 3f00 	ldrex	r3, [r3]
 800e6a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e6aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3308      	adds	r3, #8
 800e6ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e6be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e6c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e6c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e6c6:	e841 2300 	strex	r3, r2, [r1]
 800e6ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e6cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1e3      	bne.n	800e69a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6e8:	e853 3f00 	ldrex	r3, [r3]
 800e6ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e6ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6f0:	f023 0310 	bic.w	r3, r3, #16
 800e6f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e702:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e704:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e706:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e708:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e70a:	e841 2300 	strex	r3, r2, [r1]
 800e70e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e712:	2b00      	cmp	r3, #0
 800e714:	d1e4      	bne.n	800e6e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7f7 f876 	bl	800580c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2202      	movs	r2, #2
 800e724:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e732:	b29b      	uxth	r3, r3
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	b29b      	uxth	r3, r3
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 f8d2 	bl	800e8e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e740:	e0be      	b.n	800e8c0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e748:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e74c:	429a      	cmp	r2, r3
 800e74e:	f040 80b7 	bne.w	800e8c0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e756:	69db      	ldr	r3, [r3, #28]
 800e758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e75c:	f040 80b0 	bne.w	800e8c0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2202      	movs	r2, #2
 800e764:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e76c:	4619      	mov	r1, r3
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 f8b8 	bl	800e8e4 <HAL_UARTEx_RxEventCallback>
      return;
 800e774:	e0a4      	b.n	800e8c0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e782:	b29b      	uxth	r3, r3
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e790:	b29b      	uxth	r3, r3
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 8096 	beq.w	800e8c4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800e798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 8091 	beq.w	800e8c4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7aa:	e853 3f00 	ldrex	r3, [r3]
 800e7ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e7b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e7c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7cc:	e841 2300 	strex	r3, r2, [r1]
 800e7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d1e4      	bne.n	800e7a2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	3308      	adds	r3, #8
 800e7de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e2:	e853 3f00 	ldrex	r3, [r3]
 800e7e6:	623b      	str	r3, [r7, #32]
   return(result);
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	f023 0301 	bic.w	r3, r3, #1
 800e7ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	3308      	adds	r3, #8
 800e7f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e7fc:	633a      	str	r2, [r7, #48]	@ 0x30
 800e7fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e804:	e841 2300 	strex	r3, r2, [r1]
 800e808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1e3      	bne.n	800e7d8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2220      	movs	r2, #32
 800e814:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	e853 3f00 	ldrex	r3, [r3]
 800e830:	60fb      	str	r3, [r7, #12]
   return(result);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f023 0310 	bic.w	r3, r3, #16
 800e838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	461a      	mov	r2, r3
 800e842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e846:	61fb      	str	r3, [r7, #28]
 800e848:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84a:	69b9      	ldr	r1, [r7, #24]
 800e84c:	69fa      	ldr	r2, [r7, #28]
 800e84e:	e841 2300 	strex	r3, r2, [r1]
 800e852:	617b      	str	r3, [r7, #20]
   return(result);
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1e4      	bne.n	800e824 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2202      	movs	r2, #2
 800e85e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e864:	4619      	mov	r1, r3
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 f83c 	bl	800e8e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e86c:	e02a      	b.n	800e8c4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00e      	beq.n	800e898 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e87e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e882:	2b00      	cmp	r3, #0
 800e884:	d008      	beq.n	800e898 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d01c      	beq.n	800e8c8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	4798      	blx	r3
    }
    return;
 800e896:	e017      	b.n	800e8c8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d012      	beq.n	800e8ca <HAL_UART_IRQHandler+0x5d2>
 800e8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00c      	beq.n	800e8ca <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 fe50 	bl	800f556 <UART_EndTransmit_IT>
    return;
 800e8b6:	e008      	b.n	800e8ca <HAL_UART_IRQHandler+0x5d2>
      return;
 800e8b8:	bf00      	nop
 800e8ba:	e006      	b.n	800e8ca <HAL_UART_IRQHandler+0x5d2>
    return;
 800e8bc:	bf00      	nop
 800e8be:	e004      	b.n	800e8ca <HAL_UART_IRQHandler+0x5d2>
      return;
 800e8c0:	bf00      	nop
 800e8c2:	e002      	b.n	800e8ca <HAL_UART_IRQHandler+0x5d2>
      return;
 800e8c4:	bf00      	nop
 800e8c6:	e000      	b.n	800e8ca <HAL_UART_IRQHandler+0x5d2>
    return;
 800e8c8:	bf00      	nop
  }

}
 800e8ca:	37e8      	adds	r7, #232	@ 0xe8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e8d8:	bf00      	nop
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b088      	sub	sp, #32
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e904:	2300      	movs	r3, #0
 800e906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	689a      	ldr	r2, [r3, #8]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	431a      	orrs	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	431a      	orrs	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	69db      	ldr	r3, [r3, #28]
 800e91c:	4313      	orrs	r3, r2
 800e91e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	4ba6      	ldr	r3, [pc, #664]	@ (800ebc0 <UART_SetConfig+0x2c4>)
 800e928:	4013      	ands	r3, r2
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	6812      	ldr	r2, [r2, #0]
 800e92e:	6979      	ldr	r1, [r7, #20]
 800e930:	430b      	orrs	r3, r1
 800e932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	68da      	ldr	r2, [r3, #12]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	430a      	orrs	r2, r1
 800e948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6a1b      	ldr	r3, [r3, #32]
 800e954:	697a      	ldr	r2, [r7, #20]
 800e956:	4313      	orrs	r3, r2
 800e958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	697a      	ldr	r2, [r7, #20]
 800e96a:	430a      	orrs	r2, r1
 800e96c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a94      	ldr	r2, [pc, #592]	@ (800ebc4 <UART_SetConfig+0x2c8>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d120      	bne.n	800e9ba <UART_SetConfig+0xbe>
 800e978:	4b93      	ldr	r3, [pc, #588]	@ (800ebc8 <UART_SetConfig+0x2cc>)
 800e97a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e97e:	f003 0303 	and.w	r3, r3, #3
 800e982:	2b03      	cmp	r3, #3
 800e984:	d816      	bhi.n	800e9b4 <UART_SetConfig+0xb8>
 800e986:	a201      	add	r2, pc, #4	@ (adr r2, 800e98c <UART_SetConfig+0x90>)
 800e988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e98c:	0800e99d 	.word	0x0800e99d
 800e990:	0800e9a9 	.word	0x0800e9a9
 800e994:	0800e9a3 	.word	0x0800e9a3
 800e998:	0800e9af 	.word	0x0800e9af
 800e99c:	2301      	movs	r3, #1
 800e99e:	77fb      	strb	r3, [r7, #31]
 800e9a0:	e150      	b.n	800ec44 <UART_SetConfig+0x348>
 800e9a2:	2302      	movs	r3, #2
 800e9a4:	77fb      	strb	r3, [r7, #31]
 800e9a6:	e14d      	b.n	800ec44 <UART_SetConfig+0x348>
 800e9a8:	2304      	movs	r3, #4
 800e9aa:	77fb      	strb	r3, [r7, #31]
 800e9ac:	e14a      	b.n	800ec44 <UART_SetConfig+0x348>
 800e9ae:	2308      	movs	r3, #8
 800e9b0:	77fb      	strb	r3, [r7, #31]
 800e9b2:	e147      	b.n	800ec44 <UART_SetConfig+0x348>
 800e9b4:	2310      	movs	r3, #16
 800e9b6:	77fb      	strb	r3, [r7, #31]
 800e9b8:	e144      	b.n	800ec44 <UART_SetConfig+0x348>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a83      	ldr	r2, [pc, #524]	@ (800ebcc <UART_SetConfig+0x2d0>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d132      	bne.n	800ea2a <UART_SetConfig+0x12e>
 800e9c4:	4b80      	ldr	r3, [pc, #512]	@ (800ebc8 <UART_SetConfig+0x2cc>)
 800e9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9ca:	f003 030c 	and.w	r3, r3, #12
 800e9ce:	2b0c      	cmp	r3, #12
 800e9d0:	d828      	bhi.n	800ea24 <UART_SetConfig+0x128>
 800e9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e9d8 <UART_SetConfig+0xdc>)
 800e9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d8:	0800ea0d 	.word	0x0800ea0d
 800e9dc:	0800ea25 	.word	0x0800ea25
 800e9e0:	0800ea25 	.word	0x0800ea25
 800e9e4:	0800ea25 	.word	0x0800ea25
 800e9e8:	0800ea19 	.word	0x0800ea19
 800e9ec:	0800ea25 	.word	0x0800ea25
 800e9f0:	0800ea25 	.word	0x0800ea25
 800e9f4:	0800ea25 	.word	0x0800ea25
 800e9f8:	0800ea13 	.word	0x0800ea13
 800e9fc:	0800ea25 	.word	0x0800ea25
 800ea00:	0800ea25 	.word	0x0800ea25
 800ea04:	0800ea25 	.word	0x0800ea25
 800ea08:	0800ea1f 	.word	0x0800ea1f
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	77fb      	strb	r3, [r7, #31]
 800ea10:	e118      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea12:	2302      	movs	r3, #2
 800ea14:	77fb      	strb	r3, [r7, #31]
 800ea16:	e115      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea18:	2304      	movs	r3, #4
 800ea1a:	77fb      	strb	r3, [r7, #31]
 800ea1c:	e112      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea1e:	2308      	movs	r3, #8
 800ea20:	77fb      	strb	r3, [r7, #31]
 800ea22:	e10f      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea24:	2310      	movs	r3, #16
 800ea26:	77fb      	strb	r3, [r7, #31]
 800ea28:	e10c      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a68      	ldr	r2, [pc, #416]	@ (800ebd0 <UART_SetConfig+0x2d4>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d120      	bne.n	800ea76 <UART_SetConfig+0x17a>
 800ea34:	4b64      	ldr	r3, [pc, #400]	@ (800ebc8 <UART_SetConfig+0x2cc>)
 800ea36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ea3e:	2b30      	cmp	r3, #48	@ 0x30
 800ea40:	d013      	beq.n	800ea6a <UART_SetConfig+0x16e>
 800ea42:	2b30      	cmp	r3, #48	@ 0x30
 800ea44:	d814      	bhi.n	800ea70 <UART_SetConfig+0x174>
 800ea46:	2b20      	cmp	r3, #32
 800ea48:	d009      	beq.n	800ea5e <UART_SetConfig+0x162>
 800ea4a:	2b20      	cmp	r3, #32
 800ea4c:	d810      	bhi.n	800ea70 <UART_SetConfig+0x174>
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d002      	beq.n	800ea58 <UART_SetConfig+0x15c>
 800ea52:	2b10      	cmp	r3, #16
 800ea54:	d006      	beq.n	800ea64 <UART_SetConfig+0x168>
 800ea56:	e00b      	b.n	800ea70 <UART_SetConfig+0x174>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	77fb      	strb	r3, [r7, #31]
 800ea5c:	e0f2      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea5e:	2302      	movs	r3, #2
 800ea60:	77fb      	strb	r3, [r7, #31]
 800ea62:	e0ef      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea64:	2304      	movs	r3, #4
 800ea66:	77fb      	strb	r3, [r7, #31]
 800ea68:	e0ec      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea6a:	2308      	movs	r3, #8
 800ea6c:	77fb      	strb	r3, [r7, #31]
 800ea6e:	e0e9      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea70:	2310      	movs	r3, #16
 800ea72:	77fb      	strb	r3, [r7, #31]
 800ea74:	e0e6      	b.n	800ec44 <UART_SetConfig+0x348>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a56      	ldr	r2, [pc, #344]	@ (800ebd4 <UART_SetConfig+0x2d8>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d120      	bne.n	800eac2 <UART_SetConfig+0x1c6>
 800ea80:	4b51      	ldr	r3, [pc, #324]	@ (800ebc8 <UART_SetConfig+0x2cc>)
 800ea82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ea8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ea8c:	d013      	beq.n	800eab6 <UART_SetConfig+0x1ba>
 800ea8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ea90:	d814      	bhi.n	800eabc <UART_SetConfig+0x1c0>
 800ea92:	2b80      	cmp	r3, #128	@ 0x80
 800ea94:	d009      	beq.n	800eaaa <UART_SetConfig+0x1ae>
 800ea96:	2b80      	cmp	r3, #128	@ 0x80
 800ea98:	d810      	bhi.n	800eabc <UART_SetConfig+0x1c0>
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d002      	beq.n	800eaa4 <UART_SetConfig+0x1a8>
 800ea9e:	2b40      	cmp	r3, #64	@ 0x40
 800eaa0:	d006      	beq.n	800eab0 <UART_SetConfig+0x1b4>
 800eaa2:	e00b      	b.n	800eabc <UART_SetConfig+0x1c0>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	77fb      	strb	r3, [r7, #31]
 800eaa8:	e0cc      	b.n	800ec44 <UART_SetConfig+0x348>
 800eaaa:	2302      	movs	r3, #2
 800eaac:	77fb      	strb	r3, [r7, #31]
 800eaae:	e0c9      	b.n	800ec44 <UART_SetConfig+0x348>
 800eab0:	2304      	movs	r3, #4
 800eab2:	77fb      	strb	r3, [r7, #31]
 800eab4:	e0c6      	b.n	800ec44 <UART_SetConfig+0x348>
 800eab6:	2308      	movs	r3, #8
 800eab8:	77fb      	strb	r3, [r7, #31]
 800eaba:	e0c3      	b.n	800ec44 <UART_SetConfig+0x348>
 800eabc:	2310      	movs	r3, #16
 800eabe:	77fb      	strb	r3, [r7, #31]
 800eac0:	e0c0      	b.n	800ec44 <UART_SetConfig+0x348>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4a44      	ldr	r2, [pc, #272]	@ (800ebd8 <UART_SetConfig+0x2dc>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d125      	bne.n	800eb18 <UART_SetConfig+0x21c>
 800eacc:	4b3e      	ldr	r3, [pc, #248]	@ (800ebc8 <UART_SetConfig+0x2cc>)
 800eace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ead2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ead6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eada:	d017      	beq.n	800eb0c <UART_SetConfig+0x210>
 800eadc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eae0:	d817      	bhi.n	800eb12 <UART_SetConfig+0x216>
 800eae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eae6:	d00b      	beq.n	800eb00 <UART_SetConfig+0x204>
 800eae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eaec:	d811      	bhi.n	800eb12 <UART_SetConfig+0x216>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <UART_SetConfig+0x1fe>
 800eaf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eaf6:	d006      	beq.n	800eb06 <UART_SetConfig+0x20a>
 800eaf8:	e00b      	b.n	800eb12 <UART_SetConfig+0x216>
 800eafa:	2300      	movs	r3, #0
 800eafc:	77fb      	strb	r3, [r7, #31]
 800eafe:	e0a1      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb00:	2302      	movs	r3, #2
 800eb02:	77fb      	strb	r3, [r7, #31]
 800eb04:	e09e      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb06:	2304      	movs	r3, #4
 800eb08:	77fb      	strb	r3, [r7, #31]
 800eb0a:	e09b      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb0c:	2308      	movs	r3, #8
 800eb0e:	77fb      	strb	r3, [r7, #31]
 800eb10:	e098      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb12:	2310      	movs	r3, #16
 800eb14:	77fb      	strb	r3, [r7, #31]
 800eb16:	e095      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4a2f      	ldr	r2, [pc, #188]	@ (800ebdc <UART_SetConfig+0x2e0>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d125      	bne.n	800eb6e <UART_SetConfig+0x272>
 800eb22:	4b29      	ldr	r3, [pc, #164]	@ (800ebc8 <UART_SetConfig+0x2cc>)
 800eb24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800eb2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800eb30:	d017      	beq.n	800eb62 <UART_SetConfig+0x266>
 800eb32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800eb36:	d817      	bhi.n	800eb68 <UART_SetConfig+0x26c>
 800eb38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb3c:	d00b      	beq.n	800eb56 <UART_SetConfig+0x25a>
 800eb3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb42:	d811      	bhi.n	800eb68 <UART_SetConfig+0x26c>
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d003      	beq.n	800eb50 <UART_SetConfig+0x254>
 800eb48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb4c:	d006      	beq.n	800eb5c <UART_SetConfig+0x260>
 800eb4e:	e00b      	b.n	800eb68 <UART_SetConfig+0x26c>
 800eb50:	2301      	movs	r3, #1
 800eb52:	77fb      	strb	r3, [r7, #31]
 800eb54:	e076      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb56:	2302      	movs	r3, #2
 800eb58:	77fb      	strb	r3, [r7, #31]
 800eb5a:	e073      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb5c:	2304      	movs	r3, #4
 800eb5e:	77fb      	strb	r3, [r7, #31]
 800eb60:	e070      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb62:	2308      	movs	r3, #8
 800eb64:	77fb      	strb	r3, [r7, #31]
 800eb66:	e06d      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb68:	2310      	movs	r3, #16
 800eb6a:	77fb      	strb	r3, [r7, #31]
 800eb6c:	e06a      	b.n	800ec44 <UART_SetConfig+0x348>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe0 <UART_SetConfig+0x2e4>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d138      	bne.n	800ebea <UART_SetConfig+0x2ee>
 800eb78:	4b13      	ldr	r3, [pc, #76]	@ (800ebc8 <UART_SetConfig+0x2cc>)
 800eb7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800eb82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eb86:	d017      	beq.n	800ebb8 <UART_SetConfig+0x2bc>
 800eb88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eb8c:	d82a      	bhi.n	800ebe4 <UART_SetConfig+0x2e8>
 800eb8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb92:	d00b      	beq.n	800ebac <UART_SetConfig+0x2b0>
 800eb94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb98:	d824      	bhi.n	800ebe4 <UART_SetConfig+0x2e8>
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d003      	beq.n	800eba6 <UART_SetConfig+0x2aa>
 800eb9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eba2:	d006      	beq.n	800ebb2 <UART_SetConfig+0x2b6>
 800eba4:	e01e      	b.n	800ebe4 <UART_SetConfig+0x2e8>
 800eba6:	2300      	movs	r3, #0
 800eba8:	77fb      	strb	r3, [r7, #31]
 800ebaa:	e04b      	b.n	800ec44 <UART_SetConfig+0x348>
 800ebac:	2302      	movs	r3, #2
 800ebae:	77fb      	strb	r3, [r7, #31]
 800ebb0:	e048      	b.n	800ec44 <UART_SetConfig+0x348>
 800ebb2:	2304      	movs	r3, #4
 800ebb4:	77fb      	strb	r3, [r7, #31]
 800ebb6:	e045      	b.n	800ec44 <UART_SetConfig+0x348>
 800ebb8:	2308      	movs	r3, #8
 800ebba:	77fb      	strb	r3, [r7, #31]
 800ebbc:	e042      	b.n	800ec44 <UART_SetConfig+0x348>
 800ebbe:	bf00      	nop
 800ebc0:	efff69f3 	.word	0xefff69f3
 800ebc4:	40011000 	.word	0x40011000
 800ebc8:	40023800 	.word	0x40023800
 800ebcc:	40004400 	.word	0x40004400
 800ebd0:	40004800 	.word	0x40004800
 800ebd4:	40004c00 	.word	0x40004c00
 800ebd8:	40005000 	.word	0x40005000
 800ebdc:	40011400 	.word	0x40011400
 800ebe0:	40007800 	.word	0x40007800
 800ebe4:	2310      	movs	r3, #16
 800ebe6:	77fb      	strb	r3, [r7, #31]
 800ebe8:	e02c      	b.n	800ec44 <UART_SetConfig+0x348>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a72      	ldr	r2, [pc, #456]	@ (800edb8 <UART_SetConfig+0x4bc>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d125      	bne.n	800ec40 <UART_SetConfig+0x344>
 800ebf4:	4b71      	ldr	r3, [pc, #452]	@ (800edbc <UART_SetConfig+0x4c0>)
 800ebf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebfa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ebfe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ec02:	d017      	beq.n	800ec34 <UART_SetConfig+0x338>
 800ec04:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ec08:	d817      	bhi.n	800ec3a <UART_SetConfig+0x33e>
 800ec0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec0e:	d00b      	beq.n	800ec28 <UART_SetConfig+0x32c>
 800ec10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec14:	d811      	bhi.n	800ec3a <UART_SetConfig+0x33e>
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d003      	beq.n	800ec22 <UART_SetConfig+0x326>
 800ec1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ec1e:	d006      	beq.n	800ec2e <UART_SetConfig+0x332>
 800ec20:	e00b      	b.n	800ec3a <UART_SetConfig+0x33e>
 800ec22:	2300      	movs	r3, #0
 800ec24:	77fb      	strb	r3, [r7, #31]
 800ec26:	e00d      	b.n	800ec44 <UART_SetConfig+0x348>
 800ec28:	2302      	movs	r3, #2
 800ec2a:	77fb      	strb	r3, [r7, #31]
 800ec2c:	e00a      	b.n	800ec44 <UART_SetConfig+0x348>
 800ec2e:	2304      	movs	r3, #4
 800ec30:	77fb      	strb	r3, [r7, #31]
 800ec32:	e007      	b.n	800ec44 <UART_SetConfig+0x348>
 800ec34:	2308      	movs	r3, #8
 800ec36:	77fb      	strb	r3, [r7, #31]
 800ec38:	e004      	b.n	800ec44 <UART_SetConfig+0x348>
 800ec3a:	2310      	movs	r3, #16
 800ec3c:	77fb      	strb	r3, [r7, #31]
 800ec3e:	e001      	b.n	800ec44 <UART_SetConfig+0x348>
 800ec40:	2310      	movs	r3, #16
 800ec42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	69db      	ldr	r3, [r3, #28]
 800ec48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec4c:	d15b      	bne.n	800ed06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ec4e:	7ffb      	ldrb	r3, [r7, #31]
 800ec50:	2b08      	cmp	r3, #8
 800ec52:	d828      	bhi.n	800eca6 <UART_SetConfig+0x3aa>
 800ec54:	a201      	add	r2, pc, #4	@ (adr r2, 800ec5c <UART_SetConfig+0x360>)
 800ec56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5a:	bf00      	nop
 800ec5c:	0800ec81 	.word	0x0800ec81
 800ec60:	0800ec89 	.word	0x0800ec89
 800ec64:	0800ec91 	.word	0x0800ec91
 800ec68:	0800eca7 	.word	0x0800eca7
 800ec6c:	0800ec97 	.word	0x0800ec97
 800ec70:	0800eca7 	.word	0x0800eca7
 800ec74:	0800eca7 	.word	0x0800eca7
 800ec78:	0800eca7 	.word	0x0800eca7
 800ec7c:	0800ec9f 	.word	0x0800ec9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec80:	f7fb fae2 	bl	800a248 <HAL_RCC_GetPCLK1Freq>
 800ec84:	61b8      	str	r0, [r7, #24]
        break;
 800ec86:	e013      	b.n	800ecb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec88:	f7fb faf2 	bl	800a270 <HAL_RCC_GetPCLK2Freq>
 800ec8c:	61b8      	str	r0, [r7, #24]
        break;
 800ec8e:	e00f      	b.n	800ecb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec90:	4b4b      	ldr	r3, [pc, #300]	@ (800edc0 <UART_SetConfig+0x4c4>)
 800ec92:	61bb      	str	r3, [r7, #24]
        break;
 800ec94:	e00c      	b.n	800ecb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec96:	f7fb fa05 	bl	800a0a4 <HAL_RCC_GetSysClockFreq>
 800ec9a:	61b8      	str	r0, [r7, #24]
        break;
 800ec9c:	e008      	b.n	800ecb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eca2:	61bb      	str	r3, [r7, #24]
        break;
 800eca4:	e004      	b.n	800ecb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800eca6:	2300      	movs	r3, #0
 800eca8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	77bb      	strb	r3, [r7, #30]
        break;
 800ecae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d074      	beq.n	800eda0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	005a      	lsls	r2, r3, #1
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	085b      	lsrs	r3, r3, #1
 800ecc0:	441a      	add	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	2b0f      	cmp	r3, #15
 800ecd0:	d916      	bls.n	800ed00 <UART_SetConfig+0x404>
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecd8:	d212      	bcs.n	800ed00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	f023 030f 	bic.w	r3, r3, #15
 800ece2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	085b      	lsrs	r3, r3, #1
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	f003 0307 	and.w	r3, r3, #7
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	89fb      	ldrh	r3, [r7, #14]
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	89fa      	ldrh	r2, [r7, #14]
 800ecfc:	60da      	str	r2, [r3, #12]
 800ecfe:	e04f      	b.n	800eda0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ed00:	2301      	movs	r3, #1
 800ed02:	77bb      	strb	r3, [r7, #30]
 800ed04:	e04c      	b.n	800eda0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed06:	7ffb      	ldrb	r3, [r7, #31]
 800ed08:	2b08      	cmp	r3, #8
 800ed0a:	d828      	bhi.n	800ed5e <UART_SetConfig+0x462>
 800ed0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ed14 <UART_SetConfig+0x418>)
 800ed0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed12:	bf00      	nop
 800ed14:	0800ed39 	.word	0x0800ed39
 800ed18:	0800ed41 	.word	0x0800ed41
 800ed1c:	0800ed49 	.word	0x0800ed49
 800ed20:	0800ed5f 	.word	0x0800ed5f
 800ed24:	0800ed4f 	.word	0x0800ed4f
 800ed28:	0800ed5f 	.word	0x0800ed5f
 800ed2c:	0800ed5f 	.word	0x0800ed5f
 800ed30:	0800ed5f 	.word	0x0800ed5f
 800ed34:	0800ed57 	.word	0x0800ed57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed38:	f7fb fa86 	bl	800a248 <HAL_RCC_GetPCLK1Freq>
 800ed3c:	61b8      	str	r0, [r7, #24]
        break;
 800ed3e:	e013      	b.n	800ed68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed40:	f7fb fa96 	bl	800a270 <HAL_RCC_GetPCLK2Freq>
 800ed44:	61b8      	str	r0, [r7, #24]
        break;
 800ed46:	e00f      	b.n	800ed68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ed48:	4b1d      	ldr	r3, [pc, #116]	@ (800edc0 <UART_SetConfig+0x4c4>)
 800ed4a:	61bb      	str	r3, [r7, #24]
        break;
 800ed4c:	e00c      	b.n	800ed68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ed4e:	f7fb f9a9 	bl	800a0a4 <HAL_RCC_GetSysClockFreq>
 800ed52:	61b8      	str	r0, [r7, #24]
        break;
 800ed54:	e008      	b.n	800ed68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed5a:	61bb      	str	r3, [r7, #24]
        break;
 800ed5c:	e004      	b.n	800ed68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	77bb      	strb	r3, [r7, #30]
        break;
 800ed66:	bf00      	nop
    }

    if (pclk != 0U)
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d018      	beq.n	800eda0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	085a      	lsrs	r2, r3, #1
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	441a      	add	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	2b0f      	cmp	r3, #15
 800ed86:	d909      	bls.n	800ed9c <UART_SetConfig+0x4a0>
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed8e:	d205      	bcs.n	800ed9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	60da      	str	r2, [r3, #12]
 800ed9a:	e001      	b.n	800eda0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2200      	movs	r2, #0
 800eda4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800edac:	7fbb      	ldrb	r3, [r7, #30]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3720      	adds	r7, #32
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	40007c00 	.word	0x40007c00
 800edbc:	40023800 	.word	0x40023800
 800edc0:	00f42400 	.word	0x00f42400

0800edc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edd0:	f003 0308 	and.w	r3, r3, #8
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00a      	beq.n	800edee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	430a      	orrs	r2, r1
 800edec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00a      	beq.n	800ee10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	430a      	orrs	r2, r1
 800ee0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee14:	f003 0302 	and.w	r3, r3, #2
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00a      	beq.n	800ee32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	430a      	orrs	r2, r1
 800ee30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee36:	f003 0304 	and.w	r3, r3, #4
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00a      	beq.n	800ee54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	430a      	orrs	r2, r1
 800ee52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee58:	f003 0310 	and.w	r3, r3, #16
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00a      	beq.n	800ee76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	430a      	orrs	r2, r1
 800ee74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee7a:	f003 0320 	and.w	r3, r3, #32
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00a      	beq.n	800ee98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	430a      	orrs	r2, r1
 800ee96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d01a      	beq.n	800eeda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	430a      	orrs	r2, r1
 800eeb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eec2:	d10a      	bne.n	800eeda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	430a      	orrs	r2, r1
 800eed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00a      	beq.n	800eefc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	430a      	orrs	r2, r1
 800eefa:	605a      	str	r2, [r3, #4]
  }
}
 800eefc:	bf00      	nop
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b08c      	sub	sp, #48	@ 0x30
 800ef0c:	af02      	add	r7, sp, #8
 800ef0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef18:	f7f5 fdf6 	bl	8004b08 <HAL_GetTick>
 800ef1c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f003 0308 	and.w	r3, r3, #8
 800ef28:	2b08      	cmp	r3, #8
 800ef2a:	d12e      	bne.n	800ef8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ef30:	9300      	str	r3, [sp, #0]
 800ef32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef34:	2200      	movs	r2, #0
 800ef36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 f83b 	bl	800efb6 <UART_WaitOnFlagUntilTimeout>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d021      	beq.n	800ef8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	e853 3f00 	ldrex	r3, [r3]
 800ef52:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef5a:	623b      	str	r3, [r7, #32]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	461a      	mov	r2, r3
 800ef62:	6a3b      	ldr	r3, [r7, #32]
 800ef64:	61fb      	str	r3, [r7, #28]
 800ef66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef68:	69b9      	ldr	r1, [r7, #24]
 800ef6a:	69fa      	ldr	r2, [r7, #28]
 800ef6c:	e841 2300 	strex	r3, r2, [r1]
 800ef70:	617b      	str	r3, [r7, #20]
   return(result);
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1e6      	bne.n	800ef46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2220      	movs	r2, #32
 800ef7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2200      	movs	r2, #0
 800ef82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef86:	2303      	movs	r3, #3
 800ef88:	e011      	b.n	800efae <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2220      	movs	r2, #32
 800ef8e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2220      	movs	r2, #32
 800ef94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2200      	movs	r2, #0
 800efa2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3728      	adds	r7, #40	@ 0x28
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b084      	sub	sp, #16
 800efba:	af00      	add	r7, sp, #0
 800efbc:	60f8      	str	r0, [r7, #12]
 800efbe:	60b9      	str	r1, [r7, #8]
 800efc0:	603b      	str	r3, [r7, #0]
 800efc2:	4613      	mov	r3, r2
 800efc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efc6:	e04f      	b.n	800f068 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efce:	d04b      	beq.n	800f068 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efd0:	f7f5 fd9a 	bl	8004b08 <HAL_GetTick>
 800efd4:	4602      	mov	r2, r0
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	69ba      	ldr	r2, [r7, #24]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d302      	bcc.n	800efe6 <UART_WaitOnFlagUntilTimeout+0x30>
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d101      	bne.n	800efea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800efe6:	2303      	movs	r3, #3
 800efe8:	e04e      	b.n	800f088 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f003 0304 	and.w	r3, r3, #4
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d037      	beq.n	800f068 <UART_WaitOnFlagUntilTimeout+0xb2>
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2b80      	cmp	r3, #128	@ 0x80
 800effc:	d034      	beq.n	800f068 <UART_WaitOnFlagUntilTimeout+0xb2>
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	2b40      	cmp	r3, #64	@ 0x40
 800f002:	d031      	beq.n	800f068 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	69db      	ldr	r3, [r3, #28]
 800f00a:	f003 0308 	and.w	r3, r3, #8
 800f00e:	2b08      	cmp	r3, #8
 800f010:	d110      	bne.n	800f034 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2208      	movs	r2, #8
 800f018:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f01a:	68f8      	ldr	r0, [r7, #12]
 800f01c:	f000 f8fe 	bl	800f21c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2208      	movs	r2, #8
 800f024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2200      	movs	r2, #0
 800f02c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f030:	2301      	movs	r3, #1
 800f032:	e029      	b.n	800f088 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	69db      	ldr	r3, [r3, #28]
 800f03a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f03e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f042:	d111      	bne.n	800f068 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f04c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f000 f8e4 	bl	800f21c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2220      	movs	r2, #32
 800f058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f064:	2303      	movs	r3, #3
 800f066:	e00f      	b.n	800f088 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	69da      	ldr	r2, [r3, #28]
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	4013      	ands	r3, r2
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	429a      	cmp	r2, r3
 800f076:	bf0c      	ite	eq
 800f078:	2301      	moveq	r3, #1
 800f07a:	2300      	movne	r3, #0
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	461a      	mov	r2, r3
 800f080:	79fb      	ldrb	r3, [r7, #7]
 800f082:	429a      	cmp	r2, r3
 800f084:	d0a0      	beq.n	800efc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b096      	sub	sp, #88	@ 0x58
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	4613      	mov	r3, r2
 800f09c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	88fa      	ldrh	r2, [r7, #6]
 800f0a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2222      	movs	r2, #34	@ 0x22
 800f0b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d028      	beq.n	800f116 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0c8:	4a3e      	ldr	r2, [pc, #248]	@ (800f1c4 <UART_Start_Receive_DMA+0x134>)
 800f0ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0d0:	4a3d      	ldr	r2, [pc, #244]	@ (800f1c8 <UART_Start_Receive_DMA+0x138>)
 800f0d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0d8:	4a3c      	ldr	r2, [pc, #240]	@ (800f1cc <UART_Start_Receive_DMA+0x13c>)
 800f0da:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	3324      	adds	r3, #36	@ 0x24
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	88fb      	ldrh	r3, [r7, #6]
 800f0f8:	f7f6 fb28 	bl	800574c <HAL_DMA_Start_IT>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d009      	beq.n	800f116 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2210      	movs	r2, #16
 800f106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2220      	movs	r2, #32
 800f10e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f112:	2301      	movs	r3, #1
 800f114:	e051      	b.n	800f1ba <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d018      	beq.n	800f150 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f126:	e853 3f00 	ldrex	r3, [r3]
 800f12a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f132:	657b      	str	r3, [r7, #84]	@ 0x54
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	461a      	mov	r2, r3
 800f13a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f13c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f13e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f140:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f142:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f144:	e841 2300 	strex	r3, r2, [r1]
 800f148:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f14a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d1e6      	bne.n	800f11e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	3308      	adds	r3, #8
 800f156:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15a:	e853 3f00 	ldrex	r3, [r3]
 800f15e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f162:	f043 0301 	orr.w	r3, r3, #1
 800f166:	653b      	str	r3, [r7, #80]	@ 0x50
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	3308      	adds	r3, #8
 800f16e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f170:	637a      	str	r2, [r7, #52]	@ 0x34
 800f172:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f174:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f178:	e841 2300 	strex	r3, r2, [r1]
 800f17c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1e5      	bne.n	800f150 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	3308      	adds	r3, #8
 800f18a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	e853 3f00 	ldrex	r3, [r3]
 800f192:	613b      	str	r3, [r7, #16]
   return(result);
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f19a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	3308      	adds	r3, #8
 800f1a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f1a4:	623a      	str	r2, [r7, #32]
 800f1a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a8:	69f9      	ldr	r1, [r7, #28]
 800f1aa:	6a3a      	ldr	r2, [r7, #32]
 800f1ac:	e841 2300 	strex	r3, r2, [r1]
 800f1b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1e5      	bne.n	800f184 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3758      	adds	r7, #88	@ 0x58
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	0800f2e5 	.word	0x0800f2e5
 800f1c8:	0800f443 	.word	0x0800f443
 800f1cc:	0800f4b5 	.word	0x0800f4b5

0800f1d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b089      	sub	sp, #36	@ 0x24
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	e853 3f00 	ldrex	r3, [r3]
 800f1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f1ec:	61fb      	str	r3, [r7, #28]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	61bb      	str	r3, [r7, #24]
 800f1f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fa:	6979      	ldr	r1, [r7, #20]
 800f1fc:	69ba      	ldr	r2, [r7, #24]
 800f1fe:	e841 2300 	strex	r3, r2, [r1]
 800f202:	613b      	str	r3, [r7, #16]
   return(result);
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1e6      	bne.n	800f1d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2220      	movs	r2, #32
 800f20e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f210:	bf00      	nop
 800f212:	3724      	adds	r7, #36	@ 0x24
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b095      	sub	sp, #84	@ 0x54
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f22c:	e853 3f00 	ldrex	r3, [r3]
 800f230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	461a      	mov	r2, r3
 800f240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f242:	643b      	str	r3, [r7, #64]	@ 0x40
 800f244:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f24a:	e841 2300 	strex	r3, r2, [r1]
 800f24e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1e6      	bne.n	800f224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	3308      	adds	r3, #8
 800f25c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	e853 3f00 	ldrex	r3, [r3]
 800f264:	61fb      	str	r3, [r7, #28]
   return(result);
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	f023 0301 	bic.w	r3, r3, #1
 800f26c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3308      	adds	r3, #8
 800f274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f27a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f27c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f27e:	e841 2300 	strex	r3, r2, [r1]
 800f282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1e5      	bne.n	800f256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d118      	bne.n	800f2c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	e853 3f00 	ldrex	r3, [r3]
 800f29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	f023 0310 	bic.w	r3, r3, #16
 800f2a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2b0:	61bb      	str	r3, [r7, #24]
 800f2b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b4:	6979      	ldr	r1, [r7, #20]
 800f2b6:	69ba      	ldr	r2, [r7, #24]
 800f2b8:	e841 2300 	strex	r3, r2, [r1]
 800f2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1e6      	bne.n	800f292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2220      	movs	r2, #32
 800f2c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f2d8:	bf00      	nop
 800f2da:	3754      	adds	r7, #84	@ 0x54
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b09c      	sub	sp, #112	@ 0x70
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	69db      	ldr	r3, [r3, #28]
 800f2f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2fa:	d071      	beq.n	800f3e0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f2fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2fe:	2200      	movs	r2, #0
 800f300:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f30a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f30c:	e853 3f00 	ldrex	r3, [r3]
 800f310:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f31a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f322:	657b      	str	r3, [r7, #84]	@ 0x54
 800f324:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f326:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f328:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f32a:	e841 2300 	strex	r3, r2, [r1]
 800f32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f332:	2b00      	cmp	r3, #0
 800f334:	d1e6      	bne.n	800f304 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	3308      	adds	r3, #8
 800f33c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f340:	e853 3f00 	ldrex	r3, [r3]
 800f344:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f348:	f023 0301 	bic.w	r3, r3, #1
 800f34c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f34e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	3308      	adds	r3, #8
 800f354:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f356:	643a      	str	r2, [r7, #64]	@ 0x40
 800f358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f35c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f35e:	e841 2300 	strex	r3, r2, [r1]
 800f362:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1e5      	bne.n	800f336 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f36a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	3308      	adds	r3, #8
 800f370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f372:	6a3b      	ldr	r3, [r7, #32]
 800f374:	e853 3f00 	ldrex	r3, [r3]
 800f378:	61fb      	str	r3, [r7, #28]
   return(result);
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f380:	663b      	str	r3, [r7, #96]	@ 0x60
 800f382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	3308      	adds	r3, #8
 800f388:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f38a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f38c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f38e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f392:	e841 2300 	strex	r3, r2, [r1]
 800f396:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1e5      	bne.n	800f36a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f39e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3a0:	2220      	movs	r2, #32
 800f3a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d118      	bne.n	800f3e0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	e853 3f00 	ldrex	r3, [r3]
 800f3ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	f023 0310 	bic.w	r3, r3, #16
 800f3c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f3c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f3cc:	61bb      	str	r3, [r7, #24]
 800f3ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d0:	6979      	ldr	r1, [r7, #20]
 800f3d2:	69ba      	ldr	r2, [r7, #24]
 800f3d4:	e841 2300 	strex	r3, r2, [r1]
 800f3d8:	613b      	str	r3, [r7, #16]
   return(result);
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d1e6      	bne.n	800f3ae <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d122      	bne.n	800f434 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800f3ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800f400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f406:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d204      	bcs.n	800f418 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f40e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f410:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f414:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f41a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f41e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f420:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f424:	b29b      	uxth	r3, r3
 800f426:	1ad3      	subs	r3, r2, r3
 800f428:	b29b      	uxth	r3, r3
 800f42a:	4619      	mov	r1, r3
 800f42c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f42e:	f7ff fa59 	bl	800e8e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f432:	e002      	b.n	800f43a <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800f434:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f436:	f7f1 fdd5 	bl	8000fe4 <HAL_UART_RxCpltCallback>
}
 800f43a:	bf00      	nop
 800f43c:	3770      	adds	r7, #112	@ 0x70
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f44e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2201      	movs	r2, #1
 800f454:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d123      	bne.n	800f4a6 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f464:	085b      	lsrs	r3, r3, #1
 800f466:	b29a      	uxth	r2, r3
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f47c:	897a      	ldrh	r2, [r7, #10]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d803      	bhi.n	800f48a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	897a      	ldrh	r2, [r7, #10]
 800f486:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f496:	b29b      	uxth	r3, r3
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	4619      	mov	r1, r3
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f7ff fa20 	bl	800e8e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f4a4:	e002      	b.n	800f4ac <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800f4a6:	68f8      	ldr	r0, [r7, #12]
 800f4a8:	f7f1 fdc0 	bl	800102c <HAL_UART_RxHalfCpltCallback>
}
 800f4ac:	bf00      	nop
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b086      	sub	sp, #24
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f4c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4da:	2b80      	cmp	r3, #128	@ 0x80
 800f4dc:	d109      	bne.n	800f4f2 <UART_DMAError+0x3e>
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2b21      	cmp	r3, #33	@ 0x21
 800f4e2:	d106      	bne.n	800f4f2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f4ec:	6978      	ldr	r0, [r7, #20]
 800f4ee:	f7ff fe6f 	bl	800f1d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4fc:	2b40      	cmp	r3, #64	@ 0x40
 800f4fe:	d109      	bne.n	800f514 <UART_DMAError+0x60>
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2b22      	cmp	r3, #34	@ 0x22
 800f504:	d106      	bne.n	800f514 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	2200      	movs	r2, #0
 800f50a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f50e:	6978      	ldr	r0, [r7, #20]
 800f510:	f7ff fe84 	bl	800f21c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f51a:	f043 0210 	orr.w	r2, r3, #16
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f524:	6978      	ldr	r0, [r7, #20]
 800f526:	f7f1 fd97 	bl	8001058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f52a:	bf00      	nop
 800f52c:	3718      	adds	r7, #24
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b084      	sub	sp, #16
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f53e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2200      	movs	r2, #0
 800f544:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f548:	68f8      	ldr	r0, [r7, #12]
 800f54a:	f7f1 fd85 	bl	8001058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f54e:	bf00      	nop
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b088      	sub	sp, #32
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	e853 3f00 	ldrex	r3, [r3]
 800f56a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f572:	61fb      	str	r3, [r7, #28]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	461a      	mov	r2, r3
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	61bb      	str	r3, [r7, #24]
 800f57e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f580:	6979      	ldr	r1, [r7, #20]
 800f582:	69ba      	ldr	r2, [r7, #24]
 800f584:	e841 2300 	strex	r3, r2, [r1]
 800f588:	613b      	str	r3, [r7, #16]
   return(result);
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1e6      	bne.n	800f55e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2220      	movs	r2, #32
 800f594:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff f997 	bl	800e8d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5a2:	bf00      	nop
 800f5a4:	3720      	adds	r7, #32
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
	...

0800f5ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d121      	bne.n	800f602 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	4b27      	ldr	r3, [pc, #156]	@ (800f660 <FMC_SDRAM_Init+0xb4>)
 800f5c4:	4013      	ands	r3, r2
 800f5c6:	683a      	ldr	r2, [r7, #0]
 800f5c8:	6851      	ldr	r1, [r2, #4]
 800f5ca:	683a      	ldr	r2, [r7, #0]
 800f5cc:	6892      	ldr	r2, [r2, #8]
 800f5ce:	4311      	orrs	r1, r2
 800f5d0:	683a      	ldr	r2, [r7, #0]
 800f5d2:	68d2      	ldr	r2, [r2, #12]
 800f5d4:	4311      	orrs	r1, r2
 800f5d6:	683a      	ldr	r2, [r7, #0]
 800f5d8:	6912      	ldr	r2, [r2, #16]
 800f5da:	4311      	orrs	r1, r2
 800f5dc:	683a      	ldr	r2, [r7, #0]
 800f5de:	6952      	ldr	r2, [r2, #20]
 800f5e0:	4311      	orrs	r1, r2
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	6992      	ldr	r2, [r2, #24]
 800f5e6:	4311      	orrs	r1, r2
 800f5e8:	683a      	ldr	r2, [r7, #0]
 800f5ea:	69d2      	ldr	r2, [r2, #28]
 800f5ec:	4311      	orrs	r1, r2
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	6a12      	ldr	r2, [r2, #32]
 800f5f2:	4311      	orrs	r1, r2
 800f5f4:	683a      	ldr	r2, [r7, #0]
 800f5f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f5f8:	430a      	orrs	r2, r1
 800f5fa:	431a      	orrs	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	601a      	str	r2, [r3, #0]
 800f600:	e026      	b.n	800f650 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	69d9      	ldr	r1, [r3, #28]
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	6a1b      	ldr	r3, [r3, #32]
 800f612:	4319      	orrs	r1, r3
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f618:	430b      	orrs	r3, r1
 800f61a:	431a      	orrs	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	685a      	ldr	r2, [r3, #4]
 800f624:	4b0e      	ldr	r3, [pc, #56]	@ (800f660 <FMC_SDRAM_Init+0xb4>)
 800f626:	4013      	ands	r3, r2
 800f628:	683a      	ldr	r2, [r7, #0]
 800f62a:	6851      	ldr	r1, [r2, #4]
 800f62c:	683a      	ldr	r2, [r7, #0]
 800f62e:	6892      	ldr	r2, [r2, #8]
 800f630:	4311      	orrs	r1, r2
 800f632:	683a      	ldr	r2, [r7, #0]
 800f634:	68d2      	ldr	r2, [r2, #12]
 800f636:	4311      	orrs	r1, r2
 800f638:	683a      	ldr	r2, [r7, #0]
 800f63a:	6912      	ldr	r2, [r2, #16]
 800f63c:	4311      	orrs	r1, r2
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	6952      	ldr	r2, [r2, #20]
 800f642:	4311      	orrs	r1, r2
 800f644:	683a      	ldr	r2, [r7, #0]
 800f646:	6992      	ldr	r2, [r2, #24]
 800f648:	430a      	orrs	r2, r1
 800f64a:	431a      	orrs	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f650:	2300      	movs	r3, #0
}
 800f652:	4618      	mov	r0, r3
 800f654:	370c      	adds	r7, #12
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	ffff8000 	.word	0xffff8000

0800f664 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d128      	bne.n	800f6c8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	1e59      	subs	r1, r3, #1
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	3b01      	subs	r3, #1
 800f68a:	011b      	lsls	r3, r3, #4
 800f68c:	4319      	orrs	r1, r3
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	689b      	ldr	r3, [r3, #8]
 800f692:	3b01      	subs	r3, #1
 800f694:	021b      	lsls	r3, r3, #8
 800f696:	4319      	orrs	r1, r3
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	031b      	lsls	r3, r3, #12
 800f6a0:	4319      	orrs	r1, r3
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	691b      	ldr	r3, [r3, #16]
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	041b      	lsls	r3, r3, #16
 800f6aa:	4319      	orrs	r1, r3
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	3b01      	subs	r3, #1
 800f6b2:	051b      	lsls	r3, r3, #20
 800f6b4:	4319      	orrs	r1, r3
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	699b      	ldr	r3, [r3, #24]
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	061b      	lsls	r3, r3, #24
 800f6be:	430b      	orrs	r3, r1
 800f6c0:	431a      	orrs	r2, r3
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	609a      	str	r2, [r3, #8]
 800f6c6:	e02d      	b.n	800f724 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	689a      	ldr	r2, [r3, #8]
 800f6cc:	4b19      	ldr	r3, [pc, #100]	@ (800f734 <FMC_SDRAM_Timing_Init+0xd0>)
 800f6ce:	4013      	ands	r3, r2
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	68d2      	ldr	r2, [r2, #12]
 800f6d4:	3a01      	subs	r2, #1
 800f6d6:	0311      	lsls	r1, r2, #12
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	6952      	ldr	r2, [r2, #20]
 800f6dc:	3a01      	subs	r2, #1
 800f6de:	0512      	lsls	r2, r2, #20
 800f6e0:	430a      	orrs	r2, r1
 800f6e2:	431a      	orrs	r2, r3
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	1e59      	subs	r1, r3, #1
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	011b      	lsls	r3, r3, #4
 800f6fe:	4319      	orrs	r1, r3
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	3b01      	subs	r3, #1
 800f706:	021b      	lsls	r3, r3, #8
 800f708:	4319      	orrs	r1, r3
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	691b      	ldr	r3, [r3, #16]
 800f70e:	3b01      	subs	r3, #1
 800f710:	041b      	lsls	r3, r3, #16
 800f712:	4319      	orrs	r1, r3
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	699b      	ldr	r3, [r3, #24]
 800f718:	3b01      	subs	r3, #1
 800f71a:	061b      	lsls	r3, r3, #24
 800f71c:	430b      	orrs	r3, r1
 800f71e:	431a      	orrs	r2, r3
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	ff0f0fff 	.word	0xff0f0fff

0800f738 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f738:	b084      	sub	sp, #16
 800f73a:	b480      	push	{r7}
 800f73c:	b085      	sub	sp, #20
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	f107 001c 	add.w	r0, r7, #28
 800f746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f74e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f750:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f752:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800f756:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800f75a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800f75e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800f762:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	4313      	orrs	r3, r2
 800f768:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	685a      	ldr	r2, [r3, #4]
 800f76e:	4b07      	ldr	r3, [pc, #28]	@ (800f78c <SDMMC_Init+0x54>)
 800f770:	4013      	ands	r3, r2
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	431a      	orrs	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f77a:	2300      	movs	r3, #0
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	b004      	add	sp, #16
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	ffff8100 	.word	0xffff8100

0800f790 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	370c      	adds	r7, #12
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr

0800f7aa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f7aa:	b480      	push	{r7}
 800f7ac:	b083      	sub	sp, #12
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2203      	movs	r2, #3
 800f7b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f7b8:	2300      	movs	r3, #0
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	370c      	adds	r7, #12
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr

0800f7c6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f7c6:	b480      	push	{r7}
 800f7c8:	b083      	sub	sp, #12
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f003 0303 	and.w	r3, r3, #3
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	370c      	adds	r7, #12
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
	...

0800f7e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f802:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f808:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f80e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	4313      	orrs	r3, r2
 800f814:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	68da      	ldr	r2, [r3, #12]
 800f81a:	4b06      	ldr	r3, [pc, #24]	@ (800f834 <SDMMC_SendCommand+0x50>)
 800f81c:	4013      	ands	r3, r2
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	431a      	orrs	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f826:	2300      	movs	r3, #0
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3714      	adds	r7, #20
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	fffff000 	.word	0xfffff000

0800f838 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	691b      	ldr	r3, [r3, #16]
 800f844:	b2db      	uxtb	r3, r3
}
 800f846:	4618      	mov	r0, r3
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f852:	b480      	push	{r7}
 800f854:	b085      	sub	sp, #20
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
 800f85a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	3314      	adds	r3, #20
 800f860:	461a      	mov	r2, r3
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	4413      	add	r3, r2
 800f866:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
}  
 800f86c:	4618      	mov	r0, r3
 800f86e:	3714      	adds	r7, #20
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f882:	2300      	movs	r3, #0
 800f884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	685a      	ldr	r2, [r3, #4]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f89e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f8a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f8aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8b6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	431a      	orrs	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f8c2:	2300      	movs	r3, #0

}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3714      	adds	r7, #20
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b088      	sub	sp, #32
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f8de:	2310      	movs	r3, #16
 800f8e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8e2:	2340      	movs	r3, #64	@ 0x40
 800f8e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8f0:	f107 0308 	add.w	r3, r7, #8
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f7ff ff74 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f8fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f900:	2110      	movs	r1, #16
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 fa1a 	bl	800fd3c <SDMMC_GetCmdResp1>
 800f908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f90a:	69fb      	ldr	r3, [r7, #28]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3720      	adds	r7, #32
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b088      	sub	sp, #32
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f922:	2311      	movs	r3, #17
 800f924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f926:	2340      	movs	r3, #64	@ 0x40
 800f928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f92a:	2300      	movs	r3, #0
 800f92c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f92e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f932:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f934:	f107 0308 	add.w	r3, r7, #8
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7ff ff52 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f940:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f944:	2111      	movs	r1, #17
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 f9f8 	bl	800fd3c <SDMMC_GetCmdResp1>
 800f94c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f94e:	69fb      	ldr	r3, [r7, #28]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3720      	adds	r7, #32
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b088      	sub	sp, #32
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f966:	2312      	movs	r3, #18
 800f968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f96a:	2340      	movs	r3, #64	@ 0x40
 800f96c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f96e:	2300      	movs	r3, #0
 800f970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f978:	f107 0308 	add.w	r3, r7, #8
 800f97c:	4619      	mov	r1, r3
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f7ff ff30 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f984:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f988:	2112      	movs	r1, #18
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 f9d6 	bl	800fd3c <SDMMC_GetCmdResp1>
 800f990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f992:	69fb      	ldr	r3, [r7, #28]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3720      	adds	r7, #32
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b088      	sub	sp, #32
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f9aa:	2318      	movs	r3, #24
 800f9ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9ae:	2340      	movs	r3, #64	@ 0x40
 800f9b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9bc:	f107 0308 	add.w	r3, r7, #8
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff ff0e 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f9c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f9cc:	2118      	movs	r1, #24
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f9b4 	bl	800fd3c <SDMMC_GetCmdResp1>
 800f9d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9d6:	69fb      	ldr	r3, [r7, #28]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3720      	adds	r7, #32
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f9ee:	2319      	movs	r3, #25
 800f9f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9f2:	2340      	movs	r3, #64	@ 0x40
 800f9f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa00:	f107 0308 	add.w	r3, r7, #8
 800fa04:	4619      	mov	r1, r3
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f7ff feec 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fa0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa10:	2119      	movs	r1, #25
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f992 	bl	800fd3c <SDMMC_GetCmdResp1>
 800fa18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa1a:	69fb      	ldr	r3, [r7, #28]
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3720      	adds	r7, #32
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b088      	sub	sp, #32
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fa30:	230c      	movs	r3, #12
 800fa32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa34:	2340      	movs	r3, #64	@ 0x40
 800fa36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa42:	f107 0308 	add.w	r3, r7, #8
 800fa46:	4619      	mov	r1, r3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff fecb 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fa4e:	4a05      	ldr	r2, [pc, #20]	@ (800fa64 <SDMMC_CmdStopTransfer+0x40>)
 800fa50:	210c      	movs	r1, #12
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f972 	bl	800fd3c <SDMMC_GetCmdResp1>
 800fa58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa5a:	69fb      	ldr	r3, [r7, #28]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3720      	adds	r7, #32
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	05f5e100 	.word	0x05f5e100

0800fa68 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b08a      	sub	sp, #40	@ 0x28
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fa78:	2307      	movs	r3, #7
 800fa7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa7c:	2340      	movs	r3, #64	@ 0x40
 800fa7e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa80:	2300      	movs	r3, #0
 800fa82:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa88:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa8a:	f107 0310 	add.w	r3, r7, #16
 800fa8e:	4619      	mov	r1, r3
 800fa90:	68f8      	ldr	r0, [r7, #12]
 800fa92:	f7ff fea7 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fa96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa9a:	2107      	movs	r1, #7
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f000 f94d 	bl	800fd3c <SDMMC_GetCmdResp1>
 800faa2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800faa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3728      	adds	r7, #40	@ 0x28
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b088      	sub	sp, #32
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800fab6:	2300      	movs	r3, #0
 800fab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800faba:	2300      	movs	r3, #0
 800fabc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fabe:	2300      	movs	r3, #0
 800fac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fac2:	2300      	movs	r3, #0
 800fac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800faca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800facc:	f107 0308 	add.w	r3, r7, #8
 800fad0:	4619      	mov	r1, r3
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f7ff fe86 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 fb67 	bl	80101ac <SDMMC_GetCmdError>
 800fade:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fae0:	69fb      	ldr	r3, [r7, #28]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3720      	adds	r7, #32
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b088      	sub	sp, #32
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800faf2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800faf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800faf8:	2308      	movs	r3, #8
 800fafa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fafc:	2340      	movs	r3, #64	@ 0x40
 800fafe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb00:	2300      	movs	r3, #0
 800fb02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb0a:	f107 0308 	add.w	r3, r7, #8
 800fb0e:	4619      	mov	r1, r3
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7ff fe67 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 fafa 	bl	8010110 <SDMMC_GetCmdResp7>
 800fb1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb1e:	69fb      	ldr	r3, [r7, #28]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3720      	adds	r7, #32
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b088      	sub	sp, #32
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fb36:	2337      	movs	r3, #55	@ 0x37
 800fb38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb3a:	2340      	movs	r3, #64	@ 0x40
 800fb3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb48:	f107 0308 	add.w	r3, r7, #8
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7ff fe48 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fb54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb58:	2137      	movs	r1, #55	@ 0x37
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 f8ee 	bl	800fd3c <SDMMC_GetCmdResp1>
 800fb60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb62:	69fb      	ldr	r3, [r7, #28]
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3720      	adds	r7, #32
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b088      	sub	sp, #32
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	4b0d      	ldr	r3, [pc, #52]	@ (800fbb0 <SDMMC_CmdAppOperCommand+0x44>)
 800fb7a:	4313      	orrs	r3, r2
 800fb7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fb7e:	2329      	movs	r3, #41	@ 0x29
 800fb80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb82:	2340      	movs	r3, #64	@ 0x40
 800fb84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb86:	2300      	movs	r3, #0
 800fb88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb90:	f107 0308 	add.w	r3, r7, #8
 800fb94:	4619      	mov	r1, r3
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7ff fe24 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 fa03 	bl	800ffa8 <SDMMC_GetCmdResp3>
 800fba2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fba4:	69fb      	ldr	r3, [r7, #28]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3720      	adds	r7, #32
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	80100000 	.word	0x80100000

0800fbb4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b088      	sub	sp, #32
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fbc2:	2306      	movs	r3, #6
 800fbc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbc6:	2340      	movs	r3, #64	@ 0x40
 800fbc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbd4:	f107 0308 	add.w	r3, r7, #8
 800fbd8:	4619      	mov	r1, r3
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7ff fe02 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800fbe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbe4:	2106      	movs	r1, #6
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 f8a8 	bl	800fd3c <SDMMC_GetCmdResp1>
 800fbec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbee:	69fb      	ldr	r3, [r7, #28]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3720      	adds	r7, #32
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b088      	sub	sp, #32
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fc00:	2300      	movs	r3, #0
 800fc02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fc04:	2333      	movs	r3, #51	@ 0x33
 800fc06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc08:	2340      	movs	r3, #64	@ 0x40
 800fc0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc16:	f107 0308 	add.w	r3, r7, #8
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff fde1 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800fc22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc26:	2133      	movs	r1, #51	@ 0x33
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 f887 	bl	800fd3c <SDMMC_GetCmdResp1>
 800fc2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc30:	69fb      	ldr	r3, [r7, #28]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3720      	adds	r7, #32
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b088      	sub	sp, #32
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fc42:	2300      	movs	r3, #0
 800fc44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fc46:	2302      	movs	r3, #2
 800fc48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fc4a:	23c0      	movs	r3, #192	@ 0xc0
 800fc4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc58:	f107 0308 	add.w	r3, r7, #8
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f7ff fdc0 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 f957 	bl	800ff18 <SDMMC_GetCmdResp2>
 800fc6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc6c:	69fb      	ldr	r3, [r7, #28]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3720      	adds	r7, #32
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b088      	sub	sp, #32
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
 800fc7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fc84:	2309      	movs	r3, #9
 800fc86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fc88:	23c0      	movs	r3, #192	@ 0xc0
 800fc8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc96:	f107 0308 	add.w	r3, r7, #8
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7ff fda1 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 f938 	bl	800ff18 <SDMMC_GetCmdResp2>
 800fca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcaa:	69fb      	ldr	r3, [r7, #28]
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3720      	adds	r7, #32
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b088      	sub	sp, #32
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fcc2:	2303      	movs	r3, #3
 800fcc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcc6:	2340      	movs	r3, #64	@ 0x40
 800fcc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcca:	2300      	movs	r3, #0
 800fccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcd4:	f107 0308 	add.w	r3, r7, #8
 800fcd8:	4619      	mov	r1, r3
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7ff fd82 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fce0:	683a      	ldr	r2, [r7, #0]
 800fce2:	2103      	movs	r1, #3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 f99d 	bl	8010024 <SDMMC_GetCmdResp6>
 800fcea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcec:	69fb      	ldr	r3, [r7, #28]
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3720      	adds	r7, #32
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fcf6:	b580      	push	{r7, lr}
 800fcf8:	b088      	sub	sp, #32
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	6078      	str	r0, [r7, #4]
 800fcfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fd04:	230d      	movs	r3, #13
 800fd06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd08:	2340      	movs	r3, #64	@ 0x40
 800fd0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd16:	f107 0308 	add.w	r3, r7, #8
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7ff fd61 	bl	800f7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fd22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd26:	210d      	movs	r1, #13
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f000 f807 	bl	800fd3c <SDMMC_GetCmdResp1>
 800fd2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd30:	69fb      	ldr	r3, [r7, #28]
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3720      	adds	r7, #32
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
	...

0800fd3c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b088      	sub	sp, #32
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	460b      	mov	r3, r1
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fd4a:	4b70      	ldr	r3, [pc, #448]	@ (800ff0c <SDMMC_GetCmdResp1+0x1d0>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4a70      	ldr	r2, [pc, #448]	@ (800ff10 <SDMMC_GetCmdResp1+0x1d4>)
 800fd50:	fba2 2303 	umull	r2, r3, r2, r3
 800fd54:	0a5a      	lsrs	r2, r3, #9
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	fb02 f303 	mul.w	r3, r2, r3
 800fd5c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	1e5a      	subs	r2, r3, #1
 800fd62:	61fa      	str	r2, [r7, #28]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d102      	bne.n	800fd6e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fd6c:	e0c9      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd72:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d0ef      	beq.n	800fd5e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1ea      	bne.n	800fd5e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd8c:	f003 0304 	and.w	r3, r3, #4
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d004      	beq.n	800fd9e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2204      	movs	r2, #4
 800fd98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd9a:	2304      	movs	r3, #4
 800fd9c:	e0b1      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fda2:	f003 0301 	and.w	r3, r3, #1
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d004      	beq.n	800fdb4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2201      	movs	r2, #1
 800fdae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	e0a6      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	22c5      	movs	r2, #197	@ 0xc5
 800fdb8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fdba:	68f8      	ldr	r0, [r7, #12]
 800fdbc:	f7ff fd3c 	bl	800f838 <SDMMC_GetCommandResponse>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	7afb      	ldrb	r3, [r7, #11]
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d001      	beq.n	800fdce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e099      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fdce:	2100      	movs	r1, #0
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f7ff fd3e 	bl	800f852 <SDMMC_GetResponse>
 800fdd6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	4b4e      	ldr	r3, [pc, #312]	@ (800ff14 <SDMMC_GetCmdResp1+0x1d8>)
 800fddc:	4013      	ands	r3, r2
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d101      	bne.n	800fde6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fde2:	2300      	movs	r3, #0
 800fde4:	e08d      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	da02      	bge.n	800fdf2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fdec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800fdf0:	e087      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fdfc:	2340      	movs	r3, #64	@ 0x40
 800fdfe:	e080      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d001      	beq.n	800fe0e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fe0a:	2380      	movs	r3, #128	@ 0x80
 800fe0c:	e079      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d002      	beq.n	800fe1e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fe18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe1c:	e071      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d002      	beq.n	800fe2e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fe28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe2c:	e069      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d002      	beq.n	800fe3e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fe38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe3c:	e061      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d002      	beq.n	800fe4e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fe48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe4c:	e059      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d002      	beq.n	800fe5e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fe58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe5c:	e051      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d002      	beq.n	800fe6e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fe68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fe6c:	e049      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fe78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fe7c:	e041      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d002      	beq.n	800fe8e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fe88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe8c:	e039      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d002      	beq.n	800fe9e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fe98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800fe9c:	e031      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d002      	beq.n	800feae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fea8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800feac:	e029      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d002      	beq.n	800febe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800feb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800febc:	e021      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d002      	beq.n	800fece <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fec8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fecc:	e019      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d002      	beq.n	800fede <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fed8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800fedc:	e011      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d002      	beq.n	800feee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fee8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800feec:	e009      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	f003 0308 	and.w	r3, r3, #8
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d002      	beq.n	800fefe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fef8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800fefc:	e001      	b.n	800ff02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fefe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3720      	adds	r7, #32
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	20000000 	.word	0x20000000
 800ff10:	10624dd3 	.word	0x10624dd3
 800ff14:	fdffe008 	.word	0xfdffe008

0800ff18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff20:	4b1f      	ldr	r3, [pc, #124]	@ (800ffa0 <SDMMC_GetCmdResp2+0x88>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a1f      	ldr	r2, [pc, #124]	@ (800ffa4 <SDMMC_GetCmdResp2+0x8c>)
 800ff26:	fba2 2303 	umull	r2, r3, r2, r3
 800ff2a:	0a5b      	lsrs	r3, r3, #9
 800ff2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff30:	fb02 f303 	mul.w	r3, r2, r3
 800ff34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	1e5a      	subs	r2, r3, #1
 800ff3a:	60fa      	str	r2, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d102      	bne.n	800ff46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ff44:	e026      	b.n	800ff94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d0ef      	beq.n	800ff36 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1ea      	bne.n	800ff36 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff64:	f003 0304 	and.w	r3, r3, #4
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d004      	beq.n	800ff76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2204      	movs	r2, #4
 800ff70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff72:	2304      	movs	r3, #4
 800ff74:	e00e      	b.n	800ff94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff7a:	f003 0301 	and.w	r3, r3, #1
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d004      	beq.n	800ff8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2201      	movs	r2, #1
 800ff86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e003      	b.n	800ff94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	22c5      	movs	r2, #197	@ 0xc5
 800ff90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ff92:	2300      	movs	r3, #0
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3714      	adds	r7, #20
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	20000000 	.word	0x20000000
 800ffa4:	10624dd3 	.word	0x10624dd3

0800ffa8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ffb0:	4b1a      	ldr	r3, [pc, #104]	@ (801001c <SDMMC_GetCmdResp3+0x74>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4a1a      	ldr	r2, [pc, #104]	@ (8010020 <SDMMC_GetCmdResp3+0x78>)
 800ffb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffba:	0a5b      	lsrs	r3, r3, #9
 800ffbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffc0:	fb02 f303 	mul.w	r3, r2, r3
 800ffc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	1e5a      	subs	r2, r3, #1
 800ffca:	60fa      	str	r2, [r7, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d102      	bne.n	800ffd6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ffd4:	e01b      	b.n	801000e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d0ef      	beq.n	800ffc6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d1ea      	bne.n	800ffc6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fff4:	f003 0304 	and.w	r3, r3, #4
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d004      	beq.n	8010006 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2204      	movs	r2, #4
 8010000:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010002:	2304      	movs	r3, #4
 8010004:	e003      	b.n	801000e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	22c5      	movs	r2, #197	@ 0xc5
 801000a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801000c:	2300      	movs	r3, #0
}
 801000e:	4618      	mov	r0, r3
 8010010:	3714      	adds	r7, #20
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	20000000 	.word	0x20000000
 8010020:	10624dd3 	.word	0x10624dd3

08010024 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b088      	sub	sp, #32
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	460b      	mov	r3, r1
 801002e:	607a      	str	r2, [r7, #4]
 8010030:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010032:	4b35      	ldr	r3, [pc, #212]	@ (8010108 <SDMMC_GetCmdResp6+0xe4>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a35      	ldr	r2, [pc, #212]	@ (801010c <SDMMC_GetCmdResp6+0xe8>)
 8010038:	fba2 2303 	umull	r2, r3, r2, r3
 801003c:	0a5b      	lsrs	r3, r3, #9
 801003e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010042:	fb02 f303 	mul.w	r3, r2, r3
 8010046:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	1e5a      	subs	r2, r3, #1
 801004c:	61fa      	str	r2, [r7, #28]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d102      	bne.n	8010058 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010052:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010056:	e052      	b.n	80100fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801005c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010064:	2b00      	cmp	r3, #0
 8010066:	d0ef      	beq.n	8010048 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1ea      	bne.n	8010048 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010076:	f003 0304 	and.w	r3, r3, #4
 801007a:	2b00      	cmp	r3, #0
 801007c:	d004      	beq.n	8010088 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2204      	movs	r2, #4
 8010082:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010084:	2304      	movs	r3, #4
 8010086:	e03a      	b.n	80100fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801008c:	f003 0301 	and.w	r3, r3, #1
 8010090:	2b00      	cmp	r3, #0
 8010092:	d004      	beq.n	801009e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2201      	movs	r2, #1
 8010098:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801009a:	2301      	movs	r3, #1
 801009c:	e02f      	b.n	80100fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f7ff fbca 	bl	800f838 <SDMMC_GetCommandResponse>
 80100a4:	4603      	mov	r3, r0
 80100a6:	461a      	mov	r2, r3
 80100a8:	7afb      	ldrb	r3, [r7, #11]
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d001      	beq.n	80100b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100ae:	2301      	movs	r3, #1
 80100b0:	e025      	b.n	80100fe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	22c5      	movs	r2, #197	@ 0xc5
 80100b6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80100b8:	2100      	movs	r1, #0
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7ff fbc9 	bl	800f852 <SDMMC_GetResponse>
 80100c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d106      	bne.n	80100da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	0c1b      	lsrs	r3, r3, #16
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80100d6:	2300      	movs	r3, #0
 80100d8:	e011      	b.n	80100fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d002      	beq.n	80100ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80100e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80100e8:	e009      	b.n	80100fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d002      	beq.n	80100fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80100f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100f8:	e001      	b.n	80100fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80100fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3720      	adds	r7, #32
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	20000000 	.word	0x20000000
 801010c:	10624dd3 	.word	0x10624dd3

08010110 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010110:	b480      	push	{r7}
 8010112:	b085      	sub	sp, #20
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010118:	4b22      	ldr	r3, [pc, #136]	@ (80101a4 <SDMMC_GetCmdResp7+0x94>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a22      	ldr	r2, [pc, #136]	@ (80101a8 <SDMMC_GetCmdResp7+0x98>)
 801011e:	fba2 2303 	umull	r2, r3, r2, r3
 8010122:	0a5b      	lsrs	r3, r3, #9
 8010124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010128:	fb02 f303 	mul.w	r3, r2, r3
 801012c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	1e5a      	subs	r2, r3, #1
 8010132:	60fa      	str	r2, [r7, #12]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d102      	bne.n	801013e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010138:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801013c:	e02c      	b.n	8010198 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010142:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801014a:	2b00      	cmp	r3, #0
 801014c:	d0ef      	beq.n	801012e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010154:	2b00      	cmp	r3, #0
 8010156:	d1ea      	bne.n	801012e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801015c:	f003 0304 	and.w	r3, r3, #4
 8010160:	2b00      	cmp	r3, #0
 8010162:	d004      	beq.n	801016e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2204      	movs	r2, #4
 8010168:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801016a:	2304      	movs	r3, #4
 801016c:	e014      	b.n	8010198 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010172:	f003 0301 	and.w	r3, r3, #1
 8010176:	2b00      	cmp	r3, #0
 8010178:	d004      	beq.n	8010184 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2201      	movs	r2, #1
 801017e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010180:	2301      	movs	r3, #1
 8010182:	e009      	b.n	8010198 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2240      	movs	r2, #64	@ 0x40
 8010194:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010196:	2300      	movs	r3, #0
  
}
 8010198:	4618      	mov	r0, r3
 801019a:	3714      	adds	r7, #20
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr
 80101a4:	20000000 	.word	0x20000000
 80101a8:	10624dd3 	.word	0x10624dd3

080101ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80101b4:	4b11      	ldr	r3, [pc, #68]	@ (80101fc <SDMMC_GetCmdError+0x50>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	4a11      	ldr	r2, [pc, #68]	@ (8010200 <SDMMC_GetCmdError+0x54>)
 80101ba:	fba2 2303 	umull	r2, r3, r2, r3
 80101be:	0a5b      	lsrs	r3, r3, #9
 80101c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101c4:	fb02 f303 	mul.w	r3, r2, r3
 80101c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	1e5a      	subs	r2, r3, #1
 80101ce:	60fa      	str	r2, [r7, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101d8:	e009      	b.n	80101ee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d0f1      	beq.n	80101ca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	22c5      	movs	r2, #197	@ 0xc5
 80101ea:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80101ec:	2300      	movs	r3, #0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3714      	adds	r7, #20
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop
 80101fc:	20000000 	.word	0x20000000
 8010200:	10624dd3 	.word	0x10624dd3

08010204 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010204:	b084      	sub	sp, #16
 8010206:	b580      	push	{r7, lr}
 8010208:	b084      	sub	sp, #16
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
 801020e:	f107 001c 	add.w	r0, r7, #28
 8010212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010216:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801021a:	2b01      	cmp	r3, #1
 801021c:	d121      	bne.n	8010262 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010222:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	68da      	ldr	r2, [r3, #12]
 801022e:	4b21      	ldr	r3, [pc, #132]	@ (80102b4 <USB_CoreInit+0xb0>)
 8010230:	4013      	ands	r3, r2
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010242:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010246:	2b01      	cmp	r3, #1
 8010248:	d105      	bne.n	8010256 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 f9d4 	bl	8010604 <USB_CoreReset>
 801025c:	4603      	mov	r3, r0
 801025e:	73fb      	strb	r3, [r7, #15]
 8010260:	e010      	b.n	8010284 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 f9c8 	bl	8010604 <USB_CoreReset>
 8010274:	4603      	mov	r3, r0
 8010276:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801027c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8010284:	7fbb      	ldrb	r3, [r7, #30]
 8010286:	2b01      	cmp	r3, #1
 8010288:	d10b      	bne.n	80102a2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	f043 0206 	orr.w	r2, r3, #6
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	f043 0220 	orr.w	r2, r3, #32
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80102a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3710      	adds	r7, #16
 80102a8:	46bd      	mov	sp, r7
 80102aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80102ae:	b004      	add	sp, #16
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
 80102b4:	ffbdffbf 	.word	0xffbdffbf

080102b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	f043 0201 	orr.w	r2, r3, #1
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	370c      	adds	r7, #12
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80102da:	b480      	push	{r7}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	f023 0201 	bic.w	r2, r3, #1
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80102ee:	2300      	movs	r3, #0
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	460b      	mov	r3, r1
 8010306:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010308:	2300      	movs	r3, #0
 801030a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010318:	78fb      	ldrb	r3, [r7, #3]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d115      	bne.n	801034a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801032a:	200a      	movs	r0, #10
 801032c:	f7f4 fbf8 	bl	8004b20 <HAL_Delay>
      ms += 10U;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	330a      	adds	r3, #10
 8010334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 f956 	bl	80105e8 <USB_GetMode>
 801033c:	4603      	mov	r3, r0
 801033e:	2b01      	cmp	r3, #1
 8010340:	d01e      	beq.n	8010380 <USB_SetCurrentMode+0x84>
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2bc7      	cmp	r3, #199	@ 0xc7
 8010346:	d9f0      	bls.n	801032a <USB_SetCurrentMode+0x2e>
 8010348:	e01a      	b.n	8010380 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801034a:	78fb      	ldrb	r3, [r7, #3]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d115      	bne.n	801037c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801035c:	200a      	movs	r0, #10
 801035e:	f7f4 fbdf 	bl	8004b20 <HAL_Delay>
      ms += 10U;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	330a      	adds	r3, #10
 8010366:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 f93d 	bl	80105e8 <USB_GetMode>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d005      	beq.n	8010380 <USB_SetCurrentMode+0x84>
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2bc7      	cmp	r3, #199	@ 0xc7
 8010378:	d9f0      	bls.n	801035c <USB_SetCurrentMode+0x60>
 801037a:	e001      	b.n	8010380 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801037c:	2301      	movs	r3, #1
 801037e:	e005      	b.n	801038c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2bc8      	cmp	r3, #200	@ 0xc8
 8010384:	d101      	bne.n	801038a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010386:	2301      	movs	r3, #1
 8010388:	e000      	b.n	801038c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801038a:	2300      	movs	r3, #0
}
 801038c:	4618      	mov	r0, r3
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801039e:	2300      	movs	r3, #0
 80103a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	3301      	adds	r3, #1
 80103a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80103ae:	d901      	bls.n	80103b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80103b0:	2303      	movs	r3, #3
 80103b2:	e01b      	b.n	80103ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	691b      	ldr	r3, [r3, #16]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	daf2      	bge.n	80103a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80103bc:	2300      	movs	r3, #0
 80103be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	019b      	lsls	r3, r3, #6
 80103c4:	f043 0220 	orr.w	r2, r3, #32
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	3301      	adds	r3, #1
 80103d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80103d8:	d901      	bls.n	80103de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80103da:	2303      	movs	r3, #3
 80103dc:	e006      	b.n	80103ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	f003 0320 	and.w	r3, r3, #32
 80103e6:	2b20      	cmp	r3, #32
 80103e8:	d0f0      	beq.n	80103cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80103ea:	2300      	movs	r3, #0
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3714      	adds	r7, #20
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010400:	2300      	movs	r3, #0
 8010402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	3301      	adds	r3, #1
 8010408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010410:	d901      	bls.n	8010416 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010412:	2303      	movs	r3, #3
 8010414:	e018      	b.n	8010448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	2b00      	cmp	r3, #0
 801041c:	daf2      	bge.n	8010404 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801041e:	2300      	movs	r3, #0
 8010420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2210      	movs	r2, #16
 8010426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	3301      	adds	r3, #1
 801042c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010434:	d901      	bls.n	801043a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010436:	2303      	movs	r3, #3
 8010438:	e006      	b.n	8010448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	691b      	ldr	r3, [r3, #16]
 801043e:	f003 0310 	and.w	r3, r3, #16
 8010442:	2b10      	cmp	r3, #16
 8010444:	d0f0      	beq.n	8010428 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010446:	2300      	movs	r3, #0
}
 8010448:	4618      	mov	r0, r3
 801044a:	3714      	adds	r7, #20
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010454:	b480      	push	{r7}
 8010456:	b089      	sub	sp, #36	@ 0x24
 8010458:	af00      	add	r7, sp, #0
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	4611      	mov	r1, r2
 8010460:	461a      	mov	r2, r3
 8010462:	460b      	mov	r3, r1
 8010464:	71fb      	strb	r3, [r7, #7]
 8010466:	4613      	mov	r3, r2
 8010468:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010472:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010476:	2b00      	cmp	r3, #0
 8010478:	d123      	bne.n	80104c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801047a:	88bb      	ldrh	r3, [r7, #4]
 801047c:	3303      	adds	r3, #3
 801047e:	089b      	lsrs	r3, r3, #2
 8010480:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010482:	2300      	movs	r3, #0
 8010484:	61bb      	str	r3, [r7, #24]
 8010486:	e018      	b.n	80104ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010488:	79fb      	ldrb	r3, [r7, #7]
 801048a:	031a      	lsls	r2, r3, #12
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	4413      	add	r3, r2
 8010490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010494:	461a      	mov	r2, r3
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	3301      	adds	r3, #1
 80104a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	3301      	adds	r3, #1
 80104a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	3301      	adds	r3, #1
 80104ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	3301      	adds	r3, #1
 80104b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	3301      	adds	r3, #1
 80104b8:	61bb      	str	r3, [r7, #24]
 80104ba:	69ba      	ldr	r2, [r7, #24]
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d3e2      	bcc.n	8010488 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80104c2:	2300      	movs	r3, #0
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3724      	adds	r7, #36	@ 0x24
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b08b      	sub	sp, #44	@ 0x2c
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	4613      	mov	r3, r2
 80104dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80104e6:	88fb      	ldrh	r3, [r7, #6]
 80104e8:	089b      	lsrs	r3, r3, #2
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80104ee:	88fb      	ldrh	r3, [r7, #6]
 80104f0:	f003 0303 	and.w	r3, r3, #3
 80104f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80104f6:	2300      	movs	r3, #0
 80104f8:	623b      	str	r3, [r7, #32]
 80104fa:	e014      	b.n	8010526 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80104fc:	69bb      	ldr	r3, [r7, #24]
 80104fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010506:	601a      	str	r2, [r3, #0]
    pDest++;
 8010508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801050a:	3301      	adds	r3, #1
 801050c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010510:	3301      	adds	r3, #1
 8010512:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010516:	3301      	adds	r3, #1
 8010518:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801051a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801051c:	3301      	adds	r3, #1
 801051e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010520:	6a3b      	ldr	r3, [r7, #32]
 8010522:	3301      	adds	r3, #1
 8010524:	623b      	str	r3, [r7, #32]
 8010526:	6a3a      	ldr	r2, [r7, #32]
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	429a      	cmp	r2, r3
 801052c:	d3e6      	bcc.n	80104fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801052e:	8bfb      	ldrh	r3, [r7, #30]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d01e      	beq.n	8010572 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010534:	2300      	movs	r3, #0
 8010536:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801053e:	461a      	mov	r2, r3
 8010540:	f107 0310 	add.w	r3, r7, #16
 8010544:	6812      	ldr	r2, [r2, #0]
 8010546:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010548:	693a      	ldr	r2, [r7, #16]
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	b2db      	uxtb	r3, r3
 801054e:	00db      	lsls	r3, r3, #3
 8010550:	fa22 f303 	lsr.w	r3, r2, r3
 8010554:	b2da      	uxtb	r2, r3
 8010556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010558:	701a      	strb	r2, [r3, #0]
      i++;
 801055a:	6a3b      	ldr	r3, [r7, #32]
 801055c:	3301      	adds	r3, #1
 801055e:	623b      	str	r3, [r7, #32]
      pDest++;
 8010560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010562:	3301      	adds	r3, #1
 8010564:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010566:	8bfb      	ldrh	r3, [r7, #30]
 8010568:	3b01      	subs	r3, #1
 801056a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801056c:	8bfb      	ldrh	r3, [r7, #30]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1ea      	bne.n	8010548 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010574:	4618      	mov	r0, r3
 8010576:	372c      	adds	r7, #44	@ 0x2c
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	695b      	ldr	r3, [r3, #20]
 801058c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	699b      	ldr	r3, [r3, #24]
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	4013      	ands	r3, r2
 8010596:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010598:	68fb      	ldr	r3, [r7, #12]
}
 801059a:	4618      	mov	r0, r3
 801059c:	3714      	adds	r7, #20
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr

080105a6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80105a6:	b480      	push	{r7}
 80105a8:	b085      	sub	sp, #20
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
 80105ae:	460b      	mov	r3, r1
 80105b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80105b6:	78fb      	ldrb	r3, [r7, #3]
 80105b8:	015a      	lsls	r2, r3, #5
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	4413      	add	r3, r2
 80105be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80105c6:	78fb      	ldrb	r3, [r7, #3]
 80105c8:	015a      	lsls	r2, r3, #5
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	4413      	add	r3, r2
 80105ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	68ba      	ldr	r2, [r7, #8]
 80105d6:	4013      	ands	r3, r2
 80105d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80105da:	68bb      	ldr	r3, [r7, #8]
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3714      	adds	r7, #20
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr

080105e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	f003 0301 	and.w	r3, r3, #1
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr

08010604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010604:	b480      	push	{r7}
 8010606:	b085      	sub	sp, #20
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801060c:	2300      	movs	r3, #0
 801060e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	3301      	adds	r3, #1
 8010614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801061c:	d901      	bls.n	8010622 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801061e:	2303      	movs	r3, #3
 8010620:	e022      	b.n	8010668 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	daf2      	bge.n	8010610 <USB_CoreReset+0xc>

  count = 10U;
 801062a:	230a      	movs	r3, #10
 801062c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 801062e:	e002      	b.n	8010636 <USB_CoreReset+0x32>
  {
    count--;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3b01      	subs	r3, #1
 8010634:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1f9      	bne.n	8010630 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	691b      	ldr	r3, [r3, #16]
 8010640:	f043 0201 	orr.w	r2, r3, #1
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	3301      	adds	r3, #1
 801064c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010654:	d901      	bls.n	801065a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8010656:	2303      	movs	r3, #3
 8010658:	e006      	b.n	8010668 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	691b      	ldr	r3, [r3, #16]
 801065e:	f003 0301 	and.w	r3, r3, #1
 8010662:	2b01      	cmp	r3, #1
 8010664:	d0f0      	beq.n	8010648 <USB_CoreReset+0x44>

  return HAL_OK;
 8010666:	2300      	movs	r3, #0
}
 8010668:	4618      	mov	r0, r3
 801066a:	3714      	adds	r7, #20
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010674:	b084      	sub	sp, #16
 8010676:	b580      	push	{r7, lr}
 8010678:	b086      	sub	sp, #24
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010686:	2300      	movs	r3, #0
 8010688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010694:	461a      	mov	r2, r3
 8010696:	2300      	movs	r3, #0
 8010698:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801069e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d119      	bne.n	80106e6 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80106b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d10a      	bne.n	80106d0 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80106c8:	f043 0304 	orr.w	r3, r3, #4
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	e014      	b.n	80106fa <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80106de:	f023 0304 	bic.w	r3, r3, #4
 80106e2:	6013      	str	r3, [r2, #0]
 80106e4:	e009      	b.n	80106fa <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80106f4:	f023 0304 	bic.w	r3, r3, #4
 80106f8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80106fa:	2110      	movs	r1, #16
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f7ff fe49 	bl	8010394 <USB_FlushTxFifo>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d001      	beq.n	801070c <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8010708:	2301      	movs	r3, #1
 801070a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7ff fe73 	bl	80103f8 <USB_FlushRxFifo>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d001      	beq.n	801071c <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8010718:	2301      	movs	r3, #1
 801071a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801071c:	2300      	movs	r3, #0
 801071e:	613b      	str	r3, [r7, #16]
 8010720:	e015      	b.n	801074e <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	015a      	lsls	r2, r3, #5
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	4413      	add	r3, r2
 801072a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801072e:	461a      	mov	r2, r3
 8010730:	f04f 33ff 	mov.w	r3, #4294967295
 8010734:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	015a      	lsls	r2, r3, #5
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	4413      	add	r3, r2
 801073e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010742:	461a      	mov	r2, r3
 8010744:	2300      	movs	r3, #0
 8010746:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	3301      	adds	r3, #1
 801074c:	613b      	str	r3, [r7, #16]
 801074e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010752:	461a      	mov	r2, r3
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	4293      	cmp	r3, r2
 8010758:	d3e3      	bcc.n	8010722 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f04f 32ff 	mov.w	r2, #4294967295
 8010766:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4a18      	ldr	r2, [pc, #96]	@ (80107cc <USB_HostInit+0x158>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d10b      	bne.n	8010788 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010776:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4a15      	ldr	r2, [pc, #84]	@ (80107d0 <USB_HostInit+0x15c>)
 801077c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4a14      	ldr	r2, [pc, #80]	@ (80107d4 <USB_HostInit+0x160>)
 8010782:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8010786:	e009      	b.n	801079c <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2280      	movs	r2, #128	@ 0x80
 801078c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4a11      	ldr	r2, [pc, #68]	@ (80107d8 <USB_HostInit+0x164>)
 8010792:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a11      	ldr	r2, [pc, #68]	@ (80107dc <USB_HostInit+0x168>)
 8010798:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801079c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d105      	bne.n	80107b0 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	699b      	ldr	r3, [r3, #24]
 80107a8:	f043 0210 	orr.w	r2, r3, #16
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	699a      	ldr	r2, [r3, #24]
 80107b4:	4b0a      	ldr	r3, [pc, #40]	@ (80107e0 <USB_HostInit+0x16c>)
 80107b6:	4313      	orrs	r3, r2
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80107bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3718      	adds	r7, #24
 80107c2:	46bd      	mov	sp, r7
 80107c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80107c8:	b004      	add	sp, #16
 80107ca:	4770      	bx	lr
 80107cc:	40040000 	.word	0x40040000
 80107d0:	01000200 	.word	0x01000200
 80107d4:	00e00300 	.word	0x00e00300
 80107d8:	00600080 	.word	0x00600080
 80107dc:	004000e0 	.word	0x004000e0
 80107e0:	a3200008 	.word	0xa3200008

080107e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b085      	sub	sp, #20
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	460b      	mov	r3, r1
 80107ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010802:	f023 0303 	bic.w	r3, r3, #3
 8010806:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	78fb      	ldrb	r3, [r7, #3]
 8010812:	f003 0303 	and.w	r3, r3, #3
 8010816:	68f9      	ldr	r1, [r7, #12]
 8010818:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801081c:	4313      	orrs	r3, r2
 801081e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010820:	78fb      	ldrb	r3, [r7, #3]
 8010822:	2b01      	cmp	r3, #1
 8010824:	d107      	bne.n	8010836 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801082c:	461a      	mov	r2, r3
 801082e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010832:	6053      	str	r3, [r2, #4]
 8010834:	e00c      	b.n	8010850 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010836:	78fb      	ldrb	r3, [r7, #3]
 8010838:	2b02      	cmp	r3, #2
 801083a:	d107      	bne.n	801084c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010842:	461a      	mov	r2, r3
 8010844:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010848:	6053      	str	r3, [r2, #4]
 801084a:	e001      	b.n	8010850 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 801084c:	2301      	movs	r3, #1
 801084e:	e000      	b.n	8010852 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010850:	2300      	movs	r3, #0
}
 8010852:	4618      	mov	r0, r3
 8010854:	3714      	adds	r7, #20
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr

0801085e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 801085e:	b580      	push	{r7, lr}
 8010860:	b084      	sub	sp, #16
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 801086a:	2300      	movs	r3, #0
 801086c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 801087e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	68fa      	ldr	r2, [r7, #12]
 8010884:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801088c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801088e:	2064      	movs	r0, #100	@ 0x64
 8010890:	f7f4 f946 	bl	8004b20 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	68fa      	ldr	r2, [r7, #12]
 8010898:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 801089c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80108a0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80108a2:	200a      	movs	r0, #10
 80108a4:	f7f4 f93c 	bl	8004b20 <HAL_Delay>

  return HAL_OK;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80108b2:	b480      	push	{r7}
 80108b4:	b085      	sub	sp, #20
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	460b      	mov	r3, r1
 80108bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80108c2:	2300      	movs	r3, #0
 80108c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80108d6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d109      	bne.n	80108f6 <USB_DriveVbus+0x44>
 80108e2:	78fb      	ldrb	r3, [r7, #3]
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d106      	bne.n	80108f6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	68fa      	ldr	r2, [r7, #12]
 80108ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80108f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80108f4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80108fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010900:	d109      	bne.n	8010916 <USB_DriveVbus+0x64>
 8010902:	78fb      	ldrb	r3, [r7, #3]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d106      	bne.n	8010916 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010914:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	3714      	adds	r7, #20
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8010924:	b480      	push	{r7}
 8010926:	b085      	sub	sp, #20
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010930:	2300      	movs	r3, #0
 8010932:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	0c5b      	lsrs	r3, r3, #17
 8010942:	f003 0303 	and.w	r3, r3, #3
}
 8010946:	4618      	mov	r0, r3
 8010948:	3714      	adds	r7, #20
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr

08010952 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8010952:	b480      	push	{r7}
 8010954:	b085      	sub	sp, #20
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010964:	689b      	ldr	r3, [r3, #8]
 8010966:	b29b      	uxth	r3, r3
}
 8010968:	4618      	mov	r0, r3
 801096a:	3714      	adds	r7, #20
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b088      	sub	sp, #32
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	4608      	mov	r0, r1
 801097e:	4611      	mov	r1, r2
 8010980:	461a      	mov	r2, r3
 8010982:	4603      	mov	r3, r0
 8010984:	70fb      	strb	r3, [r7, #3]
 8010986:	460b      	mov	r3, r1
 8010988:	70bb      	strb	r3, [r7, #2]
 801098a:	4613      	mov	r3, r2
 801098c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8010996:	78fb      	ldrb	r3, [r7, #3]
 8010998:	015a      	lsls	r2, r3, #5
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	4413      	add	r3, r2
 801099e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80109a2:	461a      	mov	r2, r3
 80109a4:	f04f 33ff 	mov.w	r3, #4294967295
 80109a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80109aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80109ae:	2b03      	cmp	r3, #3
 80109b0:	d87c      	bhi.n	8010aac <USB_HC_Init+0x138>
 80109b2:	a201      	add	r2, pc, #4	@ (adr r2, 80109b8 <USB_HC_Init+0x44>)
 80109b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b8:	080109c9 	.word	0x080109c9
 80109bc:	08010a6f 	.word	0x08010a6f
 80109c0:	080109c9 	.word	0x080109c9
 80109c4:	08010a31 	.word	0x08010a31
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80109c8:	78fb      	ldrb	r3, [r7, #3]
 80109ca:	015a      	lsls	r2, r3, #5
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	4413      	add	r3, r2
 80109d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80109d4:	461a      	mov	r2, r3
 80109d6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80109da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80109dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	da10      	bge.n	8010a06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80109e4:	78fb      	ldrb	r3, [r7, #3]
 80109e6:	015a      	lsls	r2, r3, #5
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	4413      	add	r3, r2
 80109ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	78fa      	ldrb	r2, [r7, #3]
 80109f4:	0151      	lsls	r1, r2, #5
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	440a      	add	r2, r1
 80109fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80109fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010a02:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8010a04:	e055      	b.n	8010ab2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4a6f      	ldr	r2, [pc, #444]	@ (8010bc8 <USB_HC_Init+0x254>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d151      	bne.n	8010ab2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8010a0e:	78fb      	ldrb	r3, [r7, #3]
 8010a10:	015a      	lsls	r2, r3, #5
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	4413      	add	r3, r2
 8010a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010a1a:	68db      	ldr	r3, [r3, #12]
 8010a1c:	78fa      	ldrb	r2, [r7, #3]
 8010a1e:	0151      	lsls	r1, r2, #5
 8010a20:	693a      	ldr	r2, [r7, #16]
 8010a22:	440a      	add	r2, r1
 8010a24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010a28:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010a2c:	60d3      	str	r3, [r2, #12]
      break;
 8010a2e:	e040      	b.n	8010ab2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010a30:	78fb      	ldrb	r3, [r7, #3]
 8010a32:	015a      	lsls	r2, r3, #5
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	4413      	add	r3, r2
 8010a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8010a42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010a44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	da34      	bge.n	8010ab6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010a4c:	78fb      	ldrb	r3, [r7, #3]
 8010a4e:	015a      	lsls	r2, r3, #5
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	4413      	add	r3, r2
 8010a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	78fa      	ldrb	r2, [r7, #3]
 8010a5c:	0151      	lsls	r1, r2, #5
 8010a5e:	693a      	ldr	r2, [r7, #16]
 8010a60:	440a      	add	r2, r1
 8010a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010a6a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8010a6c:	e023      	b.n	8010ab6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010a6e:	78fb      	ldrb	r3, [r7, #3]
 8010a70:	015a      	lsls	r2, r3, #5
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	4413      	add	r3, r2
 8010a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	f240 2325 	movw	r3, #549	@ 0x225
 8010a80:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010a82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	da17      	bge.n	8010aba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8010a8a:	78fb      	ldrb	r3, [r7, #3]
 8010a8c:	015a      	lsls	r2, r3, #5
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	4413      	add	r3, r2
 8010a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	78fa      	ldrb	r2, [r7, #3]
 8010a9a:	0151      	lsls	r1, r2, #5
 8010a9c:	693a      	ldr	r2, [r7, #16]
 8010a9e:	440a      	add	r2, r1
 8010aa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010aa4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8010aa8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8010aaa:	e006      	b.n	8010aba <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8010aac:	2301      	movs	r3, #1
 8010aae:	77fb      	strb	r3, [r7, #31]
      break;
 8010ab0:	e004      	b.n	8010abc <USB_HC_Init+0x148>
      break;
 8010ab2:	bf00      	nop
 8010ab4:	e002      	b.n	8010abc <USB_HC_Init+0x148>
      break;
 8010ab6:	bf00      	nop
 8010ab8:	e000      	b.n	8010abc <USB_HC_Init+0x148>
      break;
 8010aba:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8010abc:	78fb      	ldrb	r3, [r7, #3]
 8010abe:	015a      	lsls	r2, r3, #5
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	4413      	add	r3, r2
 8010ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ac8:	461a      	mov	r2, r3
 8010aca:	2300      	movs	r3, #0
 8010acc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8010ace:	78fb      	ldrb	r3, [r7, #3]
 8010ad0:	015a      	lsls	r2, r3, #5
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	78fa      	ldrb	r2, [r7, #3]
 8010ade:	0151      	lsls	r1, r2, #5
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	440a      	add	r2, r1
 8010ae4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010ae8:	f043 0302 	orr.w	r3, r3, #2
 8010aec:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010af4:	699a      	ldr	r2, [r3, #24]
 8010af6:	78fb      	ldrb	r3, [r7, #3]
 8010af8:	f003 030f 	and.w	r3, r3, #15
 8010afc:	2101      	movs	r1, #1
 8010afe:	fa01 f303 	lsl.w	r3, r1, r3
 8010b02:	6939      	ldr	r1, [r7, #16]
 8010b04:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	699b      	ldr	r3, [r3, #24]
 8010b10:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8010b18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	da03      	bge.n	8010b28 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8010b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b24:	61bb      	str	r3, [r7, #24]
 8010b26:	e001      	b.n	8010b2c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7ff fef9 	bl	8010924 <USB_GetHostSpeed>
 8010b32:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8010b34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010b38:	2b02      	cmp	r3, #2
 8010b3a:	d106      	bne.n	8010b4a <USB_HC_Init+0x1d6>
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2b02      	cmp	r3, #2
 8010b40:	d003      	beq.n	8010b4a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8010b42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010b46:	617b      	str	r3, [r7, #20]
 8010b48:	e001      	b.n	8010b4e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010b4e:	787b      	ldrb	r3, [r7, #1]
 8010b50:	059b      	lsls	r3, r3, #22
 8010b52:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010b56:	78bb      	ldrb	r3, [r7, #2]
 8010b58:	02db      	lsls	r3, r3, #11
 8010b5a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010b5e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010b60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010b64:	049b      	lsls	r3, r3, #18
 8010b66:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010b6a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8010b6c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010b72:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	431a      	orrs	r2, r3
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010b7c:	78fa      	ldrb	r2, [r7, #3]
 8010b7e:	0151      	lsls	r1, r2, #5
 8010b80:	693a      	ldr	r2, [r7, #16]
 8010b82:	440a      	add	r2, r1
 8010b84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010b88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010b8c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8010b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010b92:	2b03      	cmp	r3, #3
 8010b94:	d003      	beq.n	8010b9e <USB_HC_Init+0x22a>
 8010b96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d10f      	bne.n	8010bbe <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010b9e:	78fb      	ldrb	r3, [r7, #3]
 8010ba0:	015a      	lsls	r2, r3, #5
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	78fa      	ldrb	r2, [r7, #3]
 8010bae:	0151      	lsls	r1, r2, #5
 8010bb0:	693a      	ldr	r2, [r7, #16]
 8010bb2:	440a      	add	r2, r1
 8010bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010bb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010bbc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8010bbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3720      	adds	r7, #32
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	40040000 	.word	0x40040000

08010bcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b08c      	sub	sp, #48	@ 0x30
 8010bd0:	af02      	add	r7, sp, #8
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	785b      	ldrb	r3, [r3, #1]
 8010be2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8010be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010be8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	4a5d      	ldr	r2, [pc, #372]	@ (8010d64 <USB_HC_StartXfer+0x198>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d12f      	bne.n	8010c52 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8010bf2:	79fb      	ldrb	r3, [r7, #7]
 8010bf4:	2b01      	cmp	r3, #1
 8010bf6:	d11c      	bne.n	8010c32 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	7c9b      	ldrb	r3, [r3, #18]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d003      	beq.n	8010c08 <USB_HC_StartXfer+0x3c>
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	7c9b      	ldrb	r3, [r3, #18]
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d124      	bne.n	8010c52 <USB_HC_StartXfer+0x86>
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	799b      	ldrb	r3, [r3, #6]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d120      	bne.n	8010c52 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	015a      	lsls	r2, r3, #5
 8010c14:	6a3b      	ldr	r3, [r7, #32]
 8010c16:	4413      	add	r3, r2
 8010c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	69fa      	ldr	r2, [r7, #28]
 8010c20:	0151      	lsls	r1, r2, #5
 8010c22:	6a3a      	ldr	r2, [r7, #32]
 8010c24:	440a      	add	r2, r1
 8010c26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c2e:	60d3      	str	r3, [r2, #12]
 8010c30:	e00f      	b.n	8010c52 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	791b      	ldrb	r3, [r3, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d10b      	bne.n	8010c52 <USB_HC_StartXfer+0x86>
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	795b      	ldrb	r3, [r3, #5]
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d107      	bne.n	8010c52 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	785b      	ldrb	r3, [r3, #1]
 8010c46:	4619      	mov	r1, r3
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	f000 fb6b 	bl	8011324 <USB_DoPing>
        return HAL_OK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e232      	b.n	80110b8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	799b      	ldrb	r3, [r3, #6]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d158      	bne.n	8010d0c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	78db      	ldrb	r3, [r3, #3]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d007      	beq.n	8010c76 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010c66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010c68:	68ba      	ldr	r2, [r7, #8]
 8010c6a:	8a92      	ldrh	r2, [r2, #20]
 8010c6c:	fb03 f202 	mul.w	r2, r3, r2
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	61da      	str	r2, [r3, #28]
 8010c74:	e07c      	b.n	8010d70 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	7c9b      	ldrb	r3, [r3, #18]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d130      	bne.n	8010ce0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	6a1b      	ldr	r3, [r3, #32]
 8010c82:	2bbc      	cmp	r3, #188	@ 0xbc
 8010c84:	d918      	bls.n	8010cb8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	8a9b      	ldrh	r3, [r3, #20]
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	69da      	ldr	r2, [r3, #28]
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d003      	beq.n	8010ca8 <USB_HC_StartXfer+0xdc>
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	2b02      	cmp	r3, #2
 8010ca6:	d103      	bne.n	8010cb0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	2202      	movs	r2, #2
 8010cac:	60da      	str	r2, [r3, #12]
 8010cae:	e05f      	b.n	8010d70 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	60da      	str	r2, [r3, #12]
 8010cb6:	e05b      	b.n	8010d70 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	6a1a      	ldr	r2, [r3, #32]
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d007      	beq.n	8010cd8 <USB_HC_StartXfer+0x10c>
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	2b02      	cmp	r3, #2
 8010cce:	d003      	beq.n	8010cd8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	2204      	movs	r2, #4
 8010cd4:	60da      	str	r2, [r3, #12]
 8010cd6:	e04b      	b.n	8010d70 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	2203      	movs	r2, #3
 8010cdc:	60da      	str	r2, [r3, #12]
 8010cde:	e047      	b.n	8010d70 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d10d      	bne.n	8010d02 <USB_HC_StartXfer+0x136>
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	6a1b      	ldr	r3, [r3, #32]
 8010cea:	68ba      	ldr	r2, [r7, #8]
 8010cec:	8a92      	ldrh	r2, [r2, #20]
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d907      	bls.n	8010d02 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010cf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010cf4:	68ba      	ldr	r2, [r7, #8]
 8010cf6:	8a92      	ldrh	r2, [r2, #20]
 8010cf8:	fb03 f202 	mul.w	r2, r3, r2
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	61da      	str	r2, [r3, #28]
 8010d00:	e036      	b.n	8010d70 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	6a1a      	ldr	r2, [r3, #32]
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	61da      	str	r2, [r3, #28]
 8010d0a:	e031      	b.n	8010d70 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	6a1b      	ldr	r3, [r3, #32]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d018      	beq.n	8010d46 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	6a1b      	ldr	r3, [r3, #32]
 8010d18:	68ba      	ldr	r2, [r7, #8]
 8010d1a:	8a92      	ldrh	r2, [r2, #20]
 8010d1c:	4413      	add	r3, r2
 8010d1e:	3b01      	subs	r3, #1
 8010d20:	68ba      	ldr	r2, [r7, #8]
 8010d22:	8a92      	ldrh	r2, [r2, #20]
 8010d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d28:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8010d2a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010d2c:	8b7b      	ldrh	r3, [r7, #26]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d90b      	bls.n	8010d4a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8010d32:	8b7b      	ldrh	r3, [r7, #26]
 8010d34:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010d36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d38:	68ba      	ldr	r2, [r7, #8]
 8010d3a:	8a92      	ldrh	r2, [r2, #20]
 8010d3c:	fb03 f202 	mul.w	r2, r3, r2
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	61da      	str	r2, [r3, #28]
 8010d44:	e001      	b.n	8010d4a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8010d46:	2301      	movs	r3, #1
 8010d48:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	78db      	ldrb	r3, [r3, #3]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d00a      	beq.n	8010d68 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010d52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d54:	68ba      	ldr	r2, [r7, #8]
 8010d56:	8a92      	ldrh	r2, [r2, #20]
 8010d58:	fb03 f202 	mul.w	r2, r3, r2
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	61da      	str	r2, [r3, #28]
 8010d60:	e006      	b.n	8010d70 <USB_HC_StartXfer+0x1a4>
 8010d62:	bf00      	nop
 8010d64:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	6a1a      	ldr	r2, [r3, #32]
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	69db      	ldr	r3, [r3, #28]
 8010d74:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010d78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d7a:	04d9      	lsls	r1, r3, #19
 8010d7c:	4ba3      	ldr	r3, [pc, #652]	@ (801100c <USB_HC_StartXfer+0x440>)
 8010d7e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010d80:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	7d9b      	ldrb	r3, [r3, #22]
 8010d86:	075b      	lsls	r3, r3, #29
 8010d88:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010d8c:	69f9      	ldr	r1, [r7, #28]
 8010d8e:	0148      	lsls	r0, r1, #5
 8010d90:	6a39      	ldr	r1, [r7, #32]
 8010d92:	4401      	add	r1, r0
 8010d94:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010d98:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010d9a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8010d9c:	79fb      	ldrb	r3, [r7, #7]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d009      	beq.n	8010db6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	6999      	ldr	r1, [r3, #24]
 8010da6:	69fb      	ldr	r3, [r7, #28]
 8010da8:	015a      	lsls	r2, r3, #5
 8010daa:	6a3b      	ldr	r3, [r7, #32]
 8010dac:	4413      	add	r3, r2
 8010dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010db2:	460a      	mov	r2, r1
 8010db4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8010db6:	6a3b      	ldr	r3, [r7, #32]
 8010db8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	f003 0301 	and.w	r3, r3, #1
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	bf0c      	ite	eq
 8010dc6:	2301      	moveq	r3, #1
 8010dc8:	2300      	movne	r3, #0
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	015a      	lsls	r2, r3, #5
 8010dd2:	6a3b      	ldr	r3, [r7, #32]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	69fa      	ldr	r2, [r7, #28]
 8010dde:	0151      	lsls	r1, r2, #5
 8010de0:	6a3a      	ldr	r2, [r7, #32]
 8010de2:	440a      	add	r2, r1
 8010de4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010de8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010dec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	015a      	lsls	r2, r3, #5
 8010df2:	6a3b      	ldr	r3, [r7, #32]
 8010df4:	4413      	add	r3, r2
 8010df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	7e7b      	ldrb	r3, [r7, #25]
 8010dfe:	075b      	lsls	r3, r3, #29
 8010e00:	69f9      	ldr	r1, [r7, #28]
 8010e02:	0148      	lsls	r0, r1, #5
 8010e04:	6a39      	ldr	r1, [r7, #32]
 8010e06:	4401      	add	r1, r0
 8010e08:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8010e0c:	4313      	orrs	r3, r2
 8010e0e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	799b      	ldrb	r3, [r3, #6]
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	f040 80c3 	bne.w	8010fa0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	7c5b      	ldrb	r3, [r3, #17]
 8010e1e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8010e20:	68ba      	ldr	r2, [r7, #8]
 8010e22:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8010e24:	4313      	orrs	r3, r2
 8010e26:	69fa      	ldr	r2, [r7, #28]
 8010e28:	0151      	lsls	r1, r2, #5
 8010e2a:	6a3a      	ldr	r2, [r7, #32]
 8010e2c:	440a      	add	r2, r1
 8010e2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8010e32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8010e36:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8010e38:	69fb      	ldr	r3, [r7, #28]
 8010e3a:	015a      	lsls	r2, r3, #5
 8010e3c:	6a3b      	ldr	r3, [r7, #32]
 8010e3e:	4413      	add	r3, r2
 8010e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	69fa      	ldr	r2, [r7, #28]
 8010e48:	0151      	lsls	r1, r2, #5
 8010e4a:	6a3a      	ldr	r2, [r7, #32]
 8010e4c:	440a      	add	r2, r1
 8010e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e52:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010e56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	79db      	ldrb	r3, [r3, #7]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d123      	bne.n	8010ea8 <USB_HC_StartXfer+0x2dc>
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	78db      	ldrb	r3, [r3, #3]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d11f      	bne.n	8010ea8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8010e68:	69fb      	ldr	r3, [r7, #28]
 8010e6a:	015a      	lsls	r2, r3, #5
 8010e6c:	6a3b      	ldr	r3, [r7, #32]
 8010e6e:	4413      	add	r3, r2
 8010e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	69fa      	ldr	r2, [r7, #28]
 8010e78:	0151      	lsls	r1, r2, #5
 8010e7a:	6a3a      	ldr	r2, [r7, #32]
 8010e7c:	440a      	add	r2, r1
 8010e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010e86:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	015a      	lsls	r2, r3, #5
 8010e8c:	6a3b      	ldr	r3, [r7, #32]
 8010e8e:	4413      	add	r3, r2
 8010e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	69fa      	ldr	r2, [r7, #28]
 8010e98:	0151      	lsls	r1, r2, #5
 8010e9a:	6a3a      	ldr	r2, [r7, #32]
 8010e9c:	440a      	add	r2, r1
 8010e9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ea6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	7c9b      	ldrb	r3, [r3, #18]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d003      	beq.n	8010eb8 <USB_HC_StartXfer+0x2ec>
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	7c9b      	ldrb	r3, [r3, #18]
 8010eb4:	2b03      	cmp	r3, #3
 8010eb6:	d117      	bne.n	8010ee8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d113      	bne.n	8010ee8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	78db      	ldrb	r3, [r3, #3]
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d10f      	bne.n	8010ee8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	015a      	lsls	r2, r3, #5
 8010ecc:	6a3b      	ldr	r3, [r7, #32]
 8010ece:	4413      	add	r3, r2
 8010ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	69fa      	ldr	r2, [r7, #28]
 8010ed8:	0151      	lsls	r1, r2, #5
 8010eda:	6a3a      	ldr	r2, [r7, #32]
 8010edc:	440a      	add	r2, r1
 8010ede:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ee6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	7c9b      	ldrb	r3, [r3, #18]
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	d162      	bne.n	8010fb6 <USB_HC_StartXfer+0x3ea>
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	78db      	ldrb	r3, [r3, #3]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d15e      	bne.n	8010fb6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	3b01      	subs	r3, #1
 8010efe:	2b03      	cmp	r3, #3
 8010f00:	d858      	bhi.n	8010fb4 <USB_HC_StartXfer+0x3e8>
 8010f02:	a201      	add	r2, pc, #4	@ (adr r2, 8010f08 <USB_HC_StartXfer+0x33c>)
 8010f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f08:	08010f19 	.word	0x08010f19
 8010f0c:	08010f3b 	.word	0x08010f3b
 8010f10:	08010f5d 	.word	0x08010f5d
 8010f14:	08010f7f 	.word	0x08010f7f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	015a      	lsls	r2, r3, #5
 8010f1c:	6a3b      	ldr	r3, [r7, #32]
 8010f1e:	4413      	add	r3, r2
 8010f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	69fa      	ldr	r2, [r7, #28]
 8010f28:	0151      	lsls	r1, r2, #5
 8010f2a:	6a3a      	ldr	r2, [r7, #32]
 8010f2c:	440a      	add	r2, r1
 8010f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f36:	6053      	str	r3, [r2, #4]
          break;
 8010f38:	e03d      	b.n	8010fb6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	015a      	lsls	r2, r3, #5
 8010f3e:	6a3b      	ldr	r3, [r7, #32]
 8010f40:	4413      	add	r3, r2
 8010f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	69fa      	ldr	r2, [r7, #28]
 8010f4a:	0151      	lsls	r1, r2, #5
 8010f4c:	6a3a      	ldr	r2, [r7, #32]
 8010f4e:	440a      	add	r2, r1
 8010f50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010f54:	f043 030e 	orr.w	r3, r3, #14
 8010f58:	6053      	str	r3, [r2, #4]
          break;
 8010f5a:	e02c      	b.n	8010fb6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	015a      	lsls	r2, r3, #5
 8010f60:	6a3b      	ldr	r3, [r7, #32]
 8010f62:	4413      	add	r3, r2
 8010f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	69fa      	ldr	r2, [r7, #28]
 8010f6c:	0151      	lsls	r1, r2, #5
 8010f6e:	6a3a      	ldr	r2, [r7, #32]
 8010f70:	440a      	add	r2, r1
 8010f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010f7a:	6053      	str	r3, [r2, #4]
          break;
 8010f7c:	e01b      	b.n	8010fb6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	015a      	lsls	r2, r3, #5
 8010f82:	6a3b      	ldr	r3, [r7, #32]
 8010f84:	4413      	add	r3, r2
 8010f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	69fa      	ldr	r2, [r7, #28]
 8010f8e:	0151      	lsls	r1, r2, #5
 8010f90:	6a3a      	ldr	r2, [r7, #32]
 8010f92:	440a      	add	r2, r1
 8010f94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010f9c:	6053      	str	r3, [r2, #4]
          break;
 8010f9e:	e00a      	b.n	8010fb6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	015a      	lsls	r2, r3, #5
 8010fa4:	6a3b      	ldr	r3, [r7, #32]
 8010fa6:	4413      	add	r3, r2
 8010fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010fac:	461a      	mov	r2, r3
 8010fae:	2300      	movs	r3, #0
 8010fb0:	6053      	str	r3, [r2, #4]
 8010fb2:	e000      	b.n	8010fb6 <USB_HC_StartXfer+0x3ea>
          break;
 8010fb4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010fb6:	69fb      	ldr	r3, [r7, #28]
 8010fb8:	015a      	lsls	r2, r3, #5
 8010fba:	6a3b      	ldr	r3, [r7, #32]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010fcc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	78db      	ldrb	r3, [r3, #3]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d004      	beq.n	8010fe0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fdc:	613b      	str	r3, [r7, #16]
 8010fde:	e003      	b.n	8010fe8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010fe6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010fee:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	015a      	lsls	r2, r3, #5
 8010ff4:	6a3b      	ldr	r3, [r7, #32]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8011002:	79fb      	ldrb	r3, [r7, #7]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d003      	beq.n	8011010 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8011008:	2300      	movs	r3, #0
 801100a:	e055      	b.n	80110b8 <USB_HC_StartXfer+0x4ec>
 801100c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	78db      	ldrb	r3, [r3, #3]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d14e      	bne.n	80110b6 <USB_HC_StartXfer+0x4ea>
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	6a1b      	ldr	r3, [r3, #32]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d04a      	beq.n	80110b6 <USB_HC_StartXfer+0x4ea>
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	79db      	ldrb	r3, [r3, #7]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d146      	bne.n	80110b6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	7c9b      	ldrb	r3, [r3, #18]
 801102c:	2b03      	cmp	r3, #3
 801102e:	d831      	bhi.n	8011094 <USB_HC_StartXfer+0x4c8>
 8011030:	a201      	add	r2, pc, #4	@ (adr r2, 8011038 <USB_HC_StartXfer+0x46c>)
 8011032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011036:	bf00      	nop
 8011038:	08011049 	.word	0x08011049
 801103c:	0801106d 	.word	0x0801106d
 8011040:	08011049 	.word	0x08011049
 8011044:	0801106d 	.word	0x0801106d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	6a1b      	ldr	r3, [r3, #32]
 801104c:	3303      	adds	r3, #3
 801104e:	089b      	lsrs	r3, r3, #2
 8011050:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8011052:	8afa      	ldrh	r2, [r7, #22]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011058:	b29b      	uxth	r3, r3
 801105a:	429a      	cmp	r2, r3
 801105c:	d91c      	bls.n	8011098 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	699b      	ldr	r3, [r3, #24]
 8011062:	f043 0220 	orr.w	r2, r3, #32
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	619a      	str	r2, [r3, #24]
        }
        break;
 801106a:	e015      	b.n	8011098 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	6a1b      	ldr	r3, [r3, #32]
 8011070:	3303      	adds	r3, #3
 8011072:	089b      	lsrs	r3, r3, #2
 8011074:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8011076:	8afa      	ldrh	r2, [r7, #22]
 8011078:	6a3b      	ldr	r3, [r7, #32]
 801107a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801107e:	691b      	ldr	r3, [r3, #16]
 8011080:	b29b      	uxth	r3, r3
 8011082:	429a      	cmp	r2, r3
 8011084:	d90a      	bls.n	801109c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	699b      	ldr	r3, [r3, #24]
 801108a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	619a      	str	r2, [r3, #24]
        }
        break;
 8011092:	e003      	b.n	801109c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8011094:	bf00      	nop
 8011096:	e002      	b.n	801109e <USB_HC_StartXfer+0x4d2>
        break;
 8011098:	bf00      	nop
 801109a:	e000      	b.n	801109e <USB_HC_StartXfer+0x4d2>
        break;
 801109c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	6999      	ldr	r1, [r3, #24]
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	785a      	ldrb	r2, [r3, #1]
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	2000      	movs	r0, #0
 80110ae:	9000      	str	r0, [sp, #0]
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f7ff f9cf 	bl	8010454 <USB_WritePacket>
  }

  return HAL_OK;
 80110b6:	2300      	movs	r3, #0
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3728      	adds	r7, #40	@ 0x28
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b085      	sub	sp, #20
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80110d2:	695b      	ldr	r3, [r3, #20]
 80110d4:	b29b      	uxth	r3, r3
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3714      	adds	r7, #20
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr

080110e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80110e2:	b480      	push	{r7}
 80110e4:	b089      	sub	sp, #36	@ 0x24
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
 80110ea:	460b      	mov	r3, r1
 80110ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80110f2:	78fb      	ldrb	r3, [r7, #3]
 80110f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80110f6:	2300      	movs	r3, #0
 80110f8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80110fa:	69bb      	ldr	r3, [r7, #24]
 80110fc:	015a      	lsls	r2, r3, #5
 80110fe:	69fb      	ldr	r3, [r7, #28]
 8011100:	4413      	add	r3, r2
 8011102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	0c9b      	lsrs	r3, r3, #18
 801110a:	f003 0303 	and.w	r3, r3, #3
 801110e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	015a      	lsls	r2, r3, #5
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	4413      	add	r3, r2
 8011118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	0fdb      	lsrs	r3, r3, #31
 8011120:	f003 0301 	and.w	r3, r3, #1
 8011124:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	015a      	lsls	r2, r3, #5
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	4413      	add	r3, r2
 801112e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	0fdb      	lsrs	r3, r3, #31
 8011136:	f003 0301 	and.w	r3, r3, #1
 801113a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	689b      	ldr	r3, [r3, #8]
 8011140:	f003 0320 	and.w	r3, r3, #32
 8011144:	2b20      	cmp	r3, #32
 8011146:	d10d      	bne.n	8011164 <USB_HC_Halt+0x82>
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d10a      	bne.n	8011164 <USB_HC_Halt+0x82>
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d005      	beq.n	8011160 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	2b01      	cmp	r3, #1
 8011158:	d002      	beq.n	8011160 <USB_HC_Halt+0x7e>
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	2b03      	cmp	r3, #3
 801115e:	d101      	bne.n	8011164 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8011160:	2300      	movs	r3, #0
 8011162:	e0d8      	b.n	8011316 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d002      	beq.n	8011170 <USB_HC_Halt+0x8e>
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	2b02      	cmp	r3, #2
 801116e:	d173      	bne.n	8011258 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	015a      	lsls	r2, r3, #5
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	4413      	add	r3, r2
 8011178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	69ba      	ldr	r2, [r7, #24]
 8011180:	0151      	lsls	r1, r2, #5
 8011182:	69fa      	ldr	r2, [r7, #28]
 8011184:	440a      	add	r2, r1
 8011186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801118a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801118e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	f003 0320 	and.w	r3, r3, #32
 8011198:	2b00      	cmp	r3, #0
 801119a:	d14a      	bne.n	8011232 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d133      	bne.n	8011210 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80111a8:	69bb      	ldr	r3, [r7, #24]
 80111aa:	015a      	lsls	r2, r3, #5
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	4413      	add	r3, r2
 80111b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	69ba      	ldr	r2, [r7, #24]
 80111b8:	0151      	lsls	r1, r2, #5
 80111ba:	69fa      	ldr	r2, [r7, #28]
 80111bc:	440a      	add	r2, r1
 80111be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80111c6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	015a      	lsls	r2, r3, #5
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	4413      	add	r3, r2
 80111d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	69ba      	ldr	r2, [r7, #24]
 80111d8:	0151      	lsls	r1, r2, #5
 80111da:	69fa      	ldr	r2, [r7, #28]
 80111dc:	440a      	add	r2, r1
 80111de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80111e6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	3301      	adds	r3, #1
 80111ec:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80111f4:	d82e      	bhi.n	8011254 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80111f6:	69bb      	ldr	r3, [r7, #24]
 80111f8:	015a      	lsls	r2, r3, #5
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	4413      	add	r3, r2
 80111fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801120c:	d0ec      	beq.n	80111e8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801120e:	e081      	b.n	8011314 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	015a      	lsls	r2, r3, #5
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	4413      	add	r3, r2
 8011218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	69ba      	ldr	r2, [r7, #24]
 8011220:	0151      	lsls	r1, r2, #5
 8011222:	69fa      	ldr	r2, [r7, #28]
 8011224:	440a      	add	r2, r1
 8011226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801122a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801122e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011230:	e070      	b.n	8011314 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011232:	69bb      	ldr	r3, [r7, #24]
 8011234:	015a      	lsls	r2, r3, #5
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	4413      	add	r3, r2
 801123a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	69ba      	ldr	r2, [r7, #24]
 8011242:	0151      	lsls	r1, r2, #5
 8011244:	69fa      	ldr	r2, [r7, #28]
 8011246:	440a      	add	r2, r1
 8011248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801124c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011250:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011252:	e05f      	b.n	8011314 <USB_HC_Halt+0x232>
            break;
 8011254:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011256:	e05d      	b.n	8011314 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	015a      	lsls	r2, r3, #5
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	4413      	add	r3, r2
 8011260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	69ba      	ldr	r2, [r7, #24]
 8011268:	0151      	lsls	r1, r2, #5
 801126a:	69fa      	ldr	r2, [r7, #28]
 801126c:	440a      	add	r2, r1
 801126e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011276:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011284:	2b00      	cmp	r3, #0
 8011286:	d133      	bne.n	80112f0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	015a      	lsls	r2, r3, #5
 801128c:	69fb      	ldr	r3, [r7, #28]
 801128e:	4413      	add	r3, r2
 8011290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	69ba      	ldr	r2, [r7, #24]
 8011298:	0151      	lsls	r1, r2, #5
 801129a:	69fa      	ldr	r2, [r7, #28]
 801129c:	440a      	add	r2, r1
 801129e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80112a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80112a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	015a      	lsls	r2, r3, #5
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	4413      	add	r3, r2
 80112b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	69ba      	ldr	r2, [r7, #24]
 80112b8:	0151      	lsls	r1, r2, #5
 80112ba:	69fa      	ldr	r2, [r7, #28]
 80112bc:	440a      	add	r2, r1
 80112be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80112c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80112c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	3301      	adds	r3, #1
 80112cc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80112d4:	d81d      	bhi.n	8011312 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80112d6:	69bb      	ldr	r3, [r7, #24]
 80112d8:	015a      	lsls	r2, r3, #5
 80112da:	69fb      	ldr	r3, [r7, #28]
 80112dc:	4413      	add	r3, r2
 80112de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80112e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80112ec:	d0ec      	beq.n	80112c8 <USB_HC_Halt+0x1e6>
 80112ee:	e011      	b.n	8011314 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	015a      	lsls	r2, r3, #5
 80112f4:	69fb      	ldr	r3, [r7, #28]
 80112f6:	4413      	add	r3, r2
 80112f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	69ba      	ldr	r2, [r7, #24]
 8011300:	0151      	lsls	r1, r2, #5
 8011302:	69fa      	ldr	r2, [r7, #28]
 8011304:	440a      	add	r2, r1
 8011306:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801130a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801130e:	6013      	str	r3, [r2, #0]
 8011310:	e000      	b.n	8011314 <USB_HC_Halt+0x232>
          break;
 8011312:	bf00      	nop
    }
  }

  return HAL_OK;
 8011314:	2300      	movs	r3, #0
}
 8011316:	4618      	mov	r0, r3
 8011318:	3724      	adds	r7, #36	@ 0x24
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr
	...

08011324 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8011324:	b480      	push	{r7}
 8011326:	b087      	sub	sp, #28
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	460b      	mov	r3, r1
 801132e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8011334:	78fb      	ldrb	r3, [r7, #3]
 8011336:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8011338:	2301      	movs	r3, #1
 801133a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	04da      	lsls	r2, r3, #19
 8011340:	4b15      	ldr	r3, [pc, #84]	@ (8011398 <USB_DoPing+0x74>)
 8011342:	4013      	ands	r3, r2
 8011344:	693a      	ldr	r2, [r7, #16]
 8011346:	0151      	lsls	r1, r2, #5
 8011348:	697a      	ldr	r2, [r7, #20]
 801134a:	440a      	add	r2, r1
 801134c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011350:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011354:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	015a      	lsls	r2, r3, #5
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	4413      	add	r3, r2
 801135e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801136c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011374:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	015a      	lsls	r2, r3, #5
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	4413      	add	r3, r2
 801137e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011382:	461a      	mov	r2, r3
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8011388:	2300      	movs	r3, #0
}
 801138a:	4618      	mov	r0, r3
 801138c:	371c      	adds	r7, #28
 801138e:	46bd      	mov	sp, r7
 8011390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop
 8011398:	1ff80000 	.word	0x1ff80000

0801139c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b088      	sub	sp, #32
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80113a4:	2300      	movs	r3, #0
 80113a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80113ac:	2300      	movs	r3, #0
 80113ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f7fe ff92 	bl	80102da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80113b6:	2110      	movs	r1, #16
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f7fe ffeb 	bl	8010394 <USB_FlushTxFifo>
 80113be:	4603      	mov	r3, r0
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d001      	beq.n	80113c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7ff f815 	bl	80103f8 <USB_FlushRxFifo>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80113d4:	2301      	movs	r3, #1
 80113d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80113d8:	2300      	movs	r3, #0
 80113da:	61bb      	str	r3, [r7, #24]
 80113dc:	e01f      	b.n	801141e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	015a      	lsls	r2, r3, #5
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	4413      	add	r3, r2
 80113e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80113f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80113fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011404:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	015a      	lsls	r2, r3, #5
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	4413      	add	r3, r2
 801140e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011412:	461a      	mov	r2, r3
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	3301      	adds	r3, #1
 801141c:	61bb      	str	r3, [r7, #24]
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	2b0f      	cmp	r3, #15
 8011422:	d9dc      	bls.n	80113de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011424:	2300      	movs	r3, #0
 8011426:	61bb      	str	r3, [r7, #24]
 8011428:	e034      	b.n	8011494 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	015a      	lsls	r2, r3, #5
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	4413      	add	r3, r2
 8011432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011440:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011448:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011450:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	015a      	lsls	r2, r3, #5
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	4413      	add	r3, r2
 801145a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801145e:	461a      	mov	r2, r3
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	3301      	adds	r3, #1
 8011468:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011470:	d80c      	bhi.n	801148c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	015a      	lsls	r2, r3, #5
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	4413      	add	r3, r2
 801147a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011488:	d0ec      	beq.n	8011464 <USB_StopHost+0xc8>
 801148a:	e000      	b.n	801148e <USB_StopHost+0xf2>
        break;
 801148c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	3301      	adds	r3, #1
 8011492:	61bb      	str	r3, [r7, #24]
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	2b0f      	cmp	r3, #15
 8011498:	d9c7      	bls.n	801142a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80114a0:	461a      	mov	r2, r3
 80114a2:	f04f 33ff 	mov.w	r3, #4294967295
 80114a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f04f 32ff 	mov.w	r2, #4294967295
 80114ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f7fe ff01 	bl	80102b8 <USB_EnableGlobalInt>

  return ret;
 80114b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3720      	adds	r7, #32
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80114c4:	4904      	ldr	r1, [pc, #16]	@ (80114d8 <MX_FATFS_Init+0x18>)
 80114c6:	4805      	ldr	r0, [pc, #20]	@ (80114dc <MX_FATFS_Init+0x1c>)
 80114c8:	f002 fc64 	bl	8013d94 <FATFS_LinkDriver>
 80114cc:	4603      	mov	r3, r0
 80114ce:	461a      	mov	r2, r3
 80114d0:	4b03      	ldr	r3, [pc, #12]	@ (80114e0 <MX_FATFS_Init+0x20>)
 80114d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80114d4:	bf00      	nop
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20001048 	.word	0x20001048
 80114dc:	080190b4 	.word	0x080190b4
 80114e0:	20001044 	.word	0x20001044

080114e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80114ea:	2300      	movs	r3, #0
 80114ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80114ee:	f000 f87b 	bl	80115e8 <BSP_SD_IsDetected>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d001      	beq.n	80114fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80114f8:	2302      	movs	r3, #2
 80114fa:	e012      	b.n	8011522 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80114fc:	480b      	ldr	r0, [pc, #44]	@ (801152c <BSP_SD_Init+0x48>)
 80114fe:	f7fa f9b5 	bl	800b86c <HAL_SD_Init>
 8011502:	4603      	mov	r3, r0
 8011504:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011506:	79fb      	ldrb	r3, [r7, #7]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d109      	bne.n	8011520 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801150c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011510:	4806      	ldr	r0, [pc, #24]	@ (801152c <BSP_SD_Init+0x48>)
 8011512:	f7fa fdfd 	bl	800c110 <HAL_SD_ConfigWideBusOperation>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801151c:	2301      	movs	r3, #1
 801151e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011520:	79fb      	ldrb	r3, [r7, #7]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	20000924 	.word	0x20000924

08011530 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b086      	sub	sp, #24
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801153c:	2300      	movs	r3, #0
 801153e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	68ba      	ldr	r2, [r7, #8]
 8011544:	68f9      	ldr	r1, [r7, #12]
 8011546:	4806      	ldr	r0, [pc, #24]	@ (8011560 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011548:	f7fa fa40 	bl	800b9cc <HAL_SD_ReadBlocks_DMA>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d001      	beq.n	8011556 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011552:	2301      	movs	r3, #1
 8011554:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011556:	7dfb      	ldrb	r3, [r7, #23]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3718      	adds	r7, #24
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}
 8011560:	20000924 	.word	0x20000924

08011564 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b086      	sub	sp, #24
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011570:	2300      	movs	r3, #0
 8011572:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	68ba      	ldr	r2, [r7, #8]
 8011578:	68f9      	ldr	r1, [r7, #12]
 801157a:	4806      	ldr	r0, [pc, #24]	@ (8011594 <BSP_SD_WriteBlocks_DMA+0x30>)
 801157c:	f7fa fb08 	bl	800bb90 <HAL_SD_WriteBlocks_DMA>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d001      	beq.n	801158a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011586:	2301      	movs	r3, #1
 8011588:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801158a:	7dfb      	ldrb	r3, [r7, #23]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3718      	adds	r7, #24
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	20000924 	.word	0x20000924

08011598 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801159c:	4805      	ldr	r0, [pc, #20]	@ (80115b4 <BSP_SD_GetCardState+0x1c>)
 801159e:	f7fa fe51 	bl	800c244 <HAL_SD_GetCardState>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b04      	cmp	r3, #4
 80115a6:	bf14      	ite	ne
 80115a8:	2301      	movne	r3, #1
 80115aa:	2300      	moveq	r3, #0
 80115ac:	b2db      	uxtb	r3, r3
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20000924 	.word	0x20000924

080115b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80115c0:	6879      	ldr	r1, [r7, #4]
 80115c2:	4803      	ldr	r0, [pc, #12]	@ (80115d0 <BSP_SD_GetCardInfo+0x18>)
 80115c4:	f7fa fd78 	bl	800c0b8 <HAL_SD_GetCardInfo>
}
 80115c8:	bf00      	nop
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	20000924 	.word	0x20000924

080115d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80115dc:	f000 f9b2 	bl	8011944 <BSP_SD_ReadCpltCallback>
}
 80115e0:	bf00      	nop
 80115e2:	3708      	adds	r7, #8
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80115ee:	2301      	movs	r3, #1
 80115f0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80115f2:	f000 f80b 	bl	801160c <BSP_PlatformIsDetected>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d101      	bne.n	8011600 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80115fc:	2300      	movs	r3, #0
 80115fe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011600:	79fb      	ldrb	r3, [r7, #7]
 8011602:	b2db      	uxtb	r3, r3
}
 8011604:	4618      	mov	r0, r3
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011612:	2301      	movs	r3, #1
 8011614:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011616:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801161a:	4806      	ldr	r0, [pc, #24]	@ (8011634 <BSP_PlatformIsDetected+0x28>)
 801161c:	f7f5 fae4 	bl	8006be8 <HAL_GPIO_ReadPin>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d001      	beq.n	801162a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011626:	2300      	movs	r3, #0
 8011628:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801162a:	79fb      	ldrb	r3, [r7, #7]
}
 801162c:	4618      	mov	r0, r3
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	40020800 	.word	0x40020800

08011638 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011640:	f002 fbf4 	bl	8013e2c <osKernelSysTick>
 8011644:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011646:	e006      	b.n	8011656 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011648:	f7ff ffa6 	bl	8011598 <BSP_SD_GetCardState>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d101      	bne.n	8011656 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011652:	2300      	movs	r3, #0
 8011654:	e009      	b.n	801166a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011656:	f002 fbe9 	bl	8013e2c <osKernelSysTick>
 801165a:	4602      	mov	r2, r0
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	429a      	cmp	r2, r3
 8011664:	d8f0      	bhi.n	8011648 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011666:	f04f 33ff 	mov.w	r3, #4294967295
}
 801166a:	4618      	mov	r0, r3
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
	...

08011674 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	4603      	mov	r3, r0
 801167c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801167e:	4b0b      	ldr	r3, [pc, #44]	@ (80116ac <SD_CheckStatus+0x38>)
 8011680:	2201      	movs	r2, #1
 8011682:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011684:	f7ff ff88 	bl	8011598 <BSP_SD_GetCardState>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d107      	bne.n	801169e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801168e:	4b07      	ldr	r3, [pc, #28]	@ (80116ac <SD_CheckStatus+0x38>)
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	b2db      	uxtb	r3, r3
 8011694:	f023 0301 	bic.w	r3, r3, #1
 8011698:	b2da      	uxtb	r2, r3
 801169a:	4b04      	ldr	r3, [pc, #16]	@ (80116ac <SD_CheckStatus+0x38>)
 801169c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801169e:	4b03      	ldr	r3, [pc, #12]	@ (80116ac <SD_CheckStatus+0x38>)
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	b2db      	uxtb	r3, r3
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	20000051 	.word	0x20000051

080116b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80116b0:	b590      	push	{r4, r7, lr}
 80116b2:	b087      	sub	sp, #28
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	4603      	mov	r3, r0
 80116b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80116ba:	4b20      	ldr	r3, [pc, #128]	@ (801173c <SD_initialize+0x8c>)
 80116bc:	2201      	movs	r2, #1
 80116be:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80116c0:	f002 fba8 	bl	8013e14 <osKernelRunning>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d030      	beq.n	801172c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80116ca:	f7ff ff0b 	bl	80114e4 <BSP_SD_Init>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d107      	bne.n	80116e4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80116d4:	79fb      	ldrb	r3, [r7, #7]
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7ff ffcc 	bl	8011674 <SD_CheckStatus>
 80116dc:	4603      	mov	r3, r0
 80116de:	461a      	mov	r2, r3
 80116e0:	4b16      	ldr	r3, [pc, #88]	@ (801173c <SD_initialize+0x8c>)
 80116e2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80116e4:	4b15      	ldr	r3, [pc, #84]	@ (801173c <SD_initialize+0x8c>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d01e      	beq.n	801172c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80116ee:	4b14      	ldr	r3, [pc, #80]	@ (8011740 <SD_initialize+0x90>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d10e      	bne.n	8011714 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80116f6:	4b13      	ldr	r3, [pc, #76]	@ (8011744 <SD_initialize+0x94>)
 80116f8:	f107 0408 	add.w	r4, r7, #8
 80116fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80116fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011702:	f107 0308 	add.w	r3, r7, #8
 8011706:	2100      	movs	r1, #0
 8011708:	4618      	mov	r0, r3
 801170a:	f002 fbff 	bl	8013f0c <osMessageCreate>
 801170e:	4603      	mov	r3, r0
 8011710:	4a0b      	ldr	r2, [pc, #44]	@ (8011740 <SD_initialize+0x90>)
 8011712:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8011714:	4b0a      	ldr	r3, [pc, #40]	@ (8011740 <SD_initialize+0x90>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d107      	bne.n	801172c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 801171c:	4b07      	ldr	r3, [pc, #28]	@ (801173c <SD_initialize+0x8c>)
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	b2db      	uxtb	r3, r3
 8011722:	f043 0301 	orr.w	r3, r3, #1
 8011726:	b2da      	uxtb	r2, r3
 8011728:	4b04      	ldr	r3, [pc, #16]	@ (801173c <SD_initialize+0x8c>)
 801172a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801172c:	4b03      	ldr	r3, [pc, #12]	@ (801173c <SD_initialize+0x8c>)
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	b2db      	uxtb	r3, r3
}
 8011732:	4618      	mov	r0, r3
 8011734:	371c      	adds	r7, #28
 8011736:	46bd      	mov	sp, r7
 8011738:	bd90      	pop	{r4, r7, pc}
 801173a:	bf00      	nop
 801173c:	20000051 	.word	0x20000051
 8011740:	2000104c 	.word	0x2000104c
 8011744:	08019040 	.word	0x08019040

08011748 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	4603      	mov	r3, r0
 8011750:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011752:	79fb      	ldrb	r3, [r7, #7]
 8011754:	4618      	mov	r0, r3
 8011756:	f7ff ff8d 	bl	8011674 <SD_CheckStatus>
 801175a:	4603      	mov	r3, r0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b08a      	sub	sp, #40	@ 0x28
 8011768:	af00      	add	r7, sp, #0
 801176a:	60b9      	str	r1, [r7, #8]
 801176c:	607a      	str	r2, [r7, #4]
 801176e:	603b      	str	r3, [r7, #0]
 8011770:	4603      	mov	r3, r0
 8011772:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011774:	2301      	movs	r3, #1
 8011776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801177a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801177e:	f7ff ff5b 	bl	8011638 <SD_CheckStatusWithTimeout>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	da02      	bge.n	801178e <SD_read+0x2a>
  {
    return res;
 8011788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801178c:	e032      	b.n	80117f4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801178e:	683a      	ldr	r2, [r7, #0]
 8011790:	6879      	ldr	r1, [r7, #4]
 8011792:	68b8      	ldr	r0, [r7, #8]
 8011794:	f7ff fecc 	bl	8011530 <BSP_SD_ReadBlocks_DMA>
 8011798:	4603      	mov	r3, r0
 801179a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 801179e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d124      	bne.n	80117f0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80117a6:	4b15      	ldr	r3, [pc, #84]	@ (80117fc <SD_read+0x98>)
 80117a8:	6819      	ldr	r1, [r3, #0]
 80117aa:	f107 0314 	add.w	r3, r7, #20
 80117ae:	f247 5230 	movw	r2, #30000	@ 0x7530
 80117b2:	4618      	mov	r0, r3
 80117b4:	f002 fc12 	bl	8013fdc <osMessageGet>

    if (event.status == osEventMessage)
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	2b10      	cmp	r3, #16
 80117bc:	d118      	bne.n	80117f0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d115      	bne.n	80117f0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80117c4:	f002 fb32 	bl	8013e2c <osKernelSysTick>
 80117c8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80117ca:	e008      	b.n	80117de <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80117cc:	f7ff fee4 	bl	8011598 <BSP_SD_GetCardState>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d103      	bne.n	80117de <SD_read+0x7a>
              {
                res = RES_OK;
 80117d6:	2300      	movs	r3, #0
 80117d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80117dc:	e008      	b.n	80117f0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80117de:	f002 fb25 	bl	8013e2c <osKernelSysTick>
 80117e2:	4602      	mov	r2, r0
 80117e4:	6a3b      	ldr	r3, [r7, #32]
 80117e6:	1ad3      	subs	r3, r2, r3
 80117e8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d9ed      	bls.n	80117cc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80117f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3728      	adds	r7, #40	@ 0x28
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	2000104c 	.word	0x2000104c

08011800 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b08a      	sub	sp, #40	@ 0x28
 8011804:	af00      	add	r7, sp, #0
 8011806:	60b9      	str	r1, [r7, #8]
 8011808:	607a      	str	r2, [r7, #4]
 801180a:	603b      	str	r3, [r7, #0]
 801180c:	4603      	mov	r3, r0
 801180e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011810:	2301      	movs	r3, #1
 8011812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011816:	f247 5030 	movw	r0, #30000	@ 0x7530
 801181a:	f7ff ff0d 	bl	8011638 <SD_CheckStatusWithTimeout>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	da02      	bge.n	801182a <SD_write+0x2a>
  {
    return res;
 8011824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011828:	e02e      	b.n	8011888 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801182a:	683a      	ldr	r2, [r7, #0]
 801182c:	6879      	ldr	r1, [r7, #4]
 801182e:	68b8      	ldr	r0, [r7, #8]
 8011830:	f7ff fe98 	bl	8011564 <BSP_SD_WriteBlocks_DMA>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d124      	bne.n	8011884 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801183a:	4b15      	ldr	r3, [pc, #84]	@ (8011890 <SD_write+0x90>)
 801183c:	6819      	ldr	r1, [r3, #0]
 801183e:	f107 0314 	add.w	r3, r7, #20
 8011842:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011846:	4618      	mov	r0, r3
 8011848:	f002 fbc8 	bl	8013fdc <osMessageGet>

    if (event.status == osEventMessage)
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	2b10      	cmp	r3, #16
 8011850:	d118      	bne.n	8011884 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	2b02      	cmp	r3, #2
 8011856:	d115      	bne.n	8011884 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8011858:	f002 fae8 	bl	8013e2c <osKernelSysTick>
 801185c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801185e:	e008      	b.n	8011872 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011860:	f7ff fe9a 	bl	8011598 <BSP_SD_GetCardState>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d103      	bne.n	8011872 <SD_write+0x72>
          {
            res = RES_OK;
 801186a:	2300      	movs	r3, #0
 801186c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8011870:	e008      	b.n	8011884 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011872:	f002 fadb 	bl	8013e2c <osKernelSysTick>
 8011876:	4602      	mov	r2, r0
 8011878:	6a3b      	ldr	r3, [r7, #32]
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011880:	4293      	cmp	r3, r2
 8011882:	d9ed      	bls.n	8011860 <SD_write+0x60>
    }

  }
#endif

  return res;
 8011884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011888:	4618      	mov	r0, r3
 801188a:	3728      	adds	r7, #40	@ 0x28
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	2000104c 	.word	0x2000104c

08011894 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b08c      	sub	sp, #48	@ 0x30
 8011898:	af00      	add	r7, sp, #0
 801189a:	4603      	mov	r3, r0
 801189c:	603a      	str	r2, [r7, #0]
 801189e:	71fb      	strb	r3, [r7, #7]
 80118a0:	460b      	mov	r3, r1
 80118a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80118a4:	2301      	movs	r3, #1
 80118a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80118aa:	4b25      	ldr	r3, [pc, #148]	@ (8011940 <SD_ioctl+0xac>)
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	f003 0301 	and.w	r3, r3, #1
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d001      	beq.n	80118bc <SD_ioctl+0x28>
 80118b8:	2303      	movs	r3, #3
 80118ba:	e03c      	b.n	8011936 <SD_ioctl+0xa2>

  switch (cmd)
 80118bc:	79bb      	ldrb	r3, [r7, #6]
 80118be:	2b03      	cmp	r3, #3
 80118c0:	d834      	bhi.n	801192c <SD_ioctl+0x98>
 80118c2:	a201      	add	r2, pc, #4	@ (adr r2, 80118c8 <SD_ioctl+0x34>)
 80118c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c8:	080118d9 	.word	0x080118d9
 80118cc:	080118e1 	.word	0x080118e1
 80118d0:	080118f9 	.word	0x080118f9
 80118d4:	08011913 	.word	0x08011913
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80118d8:	2300      	movs	r3, #0
 80118da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80118de:	e028      	b.n	8011932 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80118e0:	f107 030c 	add.w	r3, r7, #12
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7ff fe67 	bl	80115b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80118ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80118f0:	2300      	movs	r3, #0
 80118f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80118f6:	e01c      	b.n	8011932 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80118f8:	f107 030c 	add.w	r3, r7, #12
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7ff fe5b 	bl	80115b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011904:	b29a      	uxth	r2, r3
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801190a:	2300      	movs	r3, #0
 801190c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011910:	e00f      	b.n	8011932 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011912:	f107 030c 	add.w	r3, r7, #12
 8011916:	4618      	mov	r0, r3
 8011918:	f7ff fe4e 	bl	80115b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801191c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801191e:	0a5a      	lsrs	r2, r3, #9
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011924:	2300      	movs	r3, #0
 8011926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801192a:	e002      	b.n	8011932 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801192c:	2304      	movs	r3, #4
 801192e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011936:	4618      	mov	r0, r3
 8011938:	3730      	adds	r7, #48	@ 0x30
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	20000051 	.word	0x20000051

08011944 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8011948:	4b04      	ldr	r3, [pc, #16]	@ (801195c <BSP_SD_ReadCpltCallback+0x18>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	2200      	movs	r2, #0
 801194e:	2101      	movs	r1, #1
 8011950:	4618      	mov	r0, r3
 8011952:	f002 fb03 	bl	8013f5c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8011956:	bf00      	nop
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	2000104c 	.word	0x2000104c

08011960 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8011960:	b590      	push	{r4, r7, lr}
 8011962:	b089      	sub	sp, #36	@ 0x24
 8011964:	af04      	add	r7, sp, #16
 8011966:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8011968:	2301      	movs	r3, #1
 801196a:	2202      	movs	r2, #2
 801196c:	2102      	movs	r1, #2
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f000 fcbd 	bl	80122ee <USBH_FindInterface>
 8011974:	4603      	mov	r3, r0
 8011976:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011978:	7bfb      	ldrb	r3, [r7, #15]
 801197a:	2bff      	cmp	r3, #255	@ 0xff
 801197c:	d002      	beq.n	8011984 <USBH_CDC_InterfaceInit+0x24>
 801197e:	7bfb      	ldrb	r3, [r7, #15]
 8011980:	2b01      	cmp	r3, #1
 8011982:	d901      	bls.n	8011988 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011984:	2302      	movs	r3, #2
 8011986:	e13d      	b.n	8011c04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8011988:	7bfb      	ldrb	r3, [r7, #15]
 801198a:	4619      	mov	r1, r3
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f000 fc92 	bl	80122b6 <USBH_SelectInterface>
 8011992:	4603      	mov	r3, r0
 8011994:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8011996:	7bbb      	ldrb	r3, [r7, #14]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d001      	beq.n	80119a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801199c:	2302      	movs	r3, #2
 801199e:	e131      	b.n	8011c04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80119a6:	2050      	movs	r0, #80	@ 0x50
 80119a8:	f005 f89c 	bl	8016ae4 <malloc>
 80119ac:	4603      	mov	r3, r0
 80119ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80119b6:	69db      	ldr	r3, [r3, #28]
 80119b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d101      	bne.n	80119c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80119c0:	2302      	movs	r3, #2
 80119c2:	e11f      	b.n	8011c04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80119c4:	2250      	movs	r2, #80	@ 0x50
 80119c6:	2100      	movs	r1, #0
 80119c8:	68b8      	ldr	r0, [r7, #8]
 80119ca:	f005 f9dd 	bl	8016d88 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80119ce:	7bfb      	ldrb	r3, [r7, #15]
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	211a      	movs	r1, #26
 80119d4:	fb01 f303 	mul.w	r3, r1, r3
 80119d8:	4413      	add	r3, r2
 80119da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	b25b      	sxtb	r3, r3
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	da15      	bge.n	8011a12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80119e6:	7bfb      	ldrb	r3, [r7, #15]
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	211a      	movs	r1, #26
 80119ec:	fb01 f303 	mul.w	r3, r1, r3
 80119f0:	4413      	add	r3, r2
 80119f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80119f6:	781a      	ldrb	r2, [r3, #0]
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80119fc:	7bfb      	ldrb	r3, [r7, #15]
 80119fe:	687a      	ldr	r2, [r7, #4]
 8011a00:	211a      	movs	r1, #26
 8011a02:	fb01 f303 	mul.w	r3, r1, r3
 8011a06:	4413      	add	r3, r2
 8011a08:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011a0c:	881a      	ldrh	r2, [r3, #0]
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	785b      	ldrb	r3, [r3, #1]
 8011a16:	4619      	mov	r1, r3
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f002 f90c 	bl	8013c36 <USBH_AllocPipe>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	7819      	ldrb	r1, [r3, #0]
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	7858      	ldrb	r0, [r3, #1]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011a3a:	68ba      	ldr	r2, [r7, #8]
 8011a3c:	8952      	ldrh	r2, [r2, #10]
 8011a3e:	9202      	str	r2, [sp, #8]
 8011a40:	2203      	movs	r2, #3
 8011a42:	9201      	str	r2, [sp, #4]
 8011a44:	9300      	str	r3, [sp, #0]
 8011a46:	4623      	mov	r3, r4
 8011a48:	4602      	mov	r2, r0
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f002 f8c4 	bl	8013bd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	2200      	movs	r2, #0
 8011a56:	4619      	mov	r1, r3
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f004 ffbd 	bl	80169d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8011a5e:	2300      	movs	r3, #0
 8011a60:	2200      	movs	r2, #0
 8011a62:	210a      	movs	r1, #10
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 fc42 	bl	80122ee <USBH_FindInterface>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011a6e:	7bfb      	ldrb	r3, [r7, #15]
 8011a70:	2bff      	cmp	r3, #255	@ 0xff
 8011a72:	d002      	beq.n	8011a7a <USBH_CDC_InterfaceInit+0x11a>
 8011a74:	7bfb      	ldrb	r3, [r7, #15]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d901      	bls.n	8011a7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011a7a:	2302      	movs	r3, #2
 8011a7c:	e0c2      	b.n	8011c04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011a7e:	7bfb      	ldrb	r3, [r7, #15]
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	211a      	movs	r1, #26
 8011a84:	fb01 f303 	mul.w	r3, r1, r3
 8011a88:	4413      	add	r3, r2
 8011a8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	b25b      	sxtb	r3, r3
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	da16      	bge.n	8011ac4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011a96:	7bfb      	ldrb	r3, [r7, #15]
 8011a98:	687a      	ldr	r2, [r7, #4]
 8011a9a:	211a      	movs	r1, #26
 8011a9c:	fb01 f303 	mul.w	r3, r1, r3
 8011aa0:	4413      	add	r3, r2
 8011aa2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011aa6:	781a      	ldrb	r2, [r3, #0]
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011aac:	7bfb      	ldrb	r3, [r7, #15]
 8011aae:	687a      	ldr	r2, [r7, #4]
 8011ab0:	211a      	movs	r1, #26
 8011ab2:	fb01 f303 	mul.w	r3, r1, r3
 8011ab6:	4413      	add	r3, r2
 8011ab8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011abc:	881a      	ldrh	r2, [r3, #0]
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	835a      	strh	r2, [r3, #26]
 8011ac2:	e015      	b.n	8011af0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011ac4:	7bfb      	ldrb	r3, [r7, #15]
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	211a      	movs	r1, #26
 8011aca:	fb01 f303 	mul.w	r3, r1, r3
 8011ace:	4413      	add	r3, r2
 8011ad0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011ad4:	781a      	ldrb	r2, [r3, #0]
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011ada:	7bfb      	ldrb	r3, [r7, #15]
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	211a      	movs	r1, #26
 8011ae0:	fb01 f303 	mul.w	r3, r1, r3
 8011ae4:	4413      	add	r3, r2
 8011ae6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011aea:	881a      	ldrh	r2, [r3, #0]
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8011af0:	7bfb      	ldrb	r3, [r7, #15]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	211a      	movs	r1, #26
 8011af6:	fb01 f303 	mul.w	r3, r1, r3
 8011afa:	4413      	add	r3, r2
 8011afc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	b25b      	sxtb	r3, r3
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	da16      	bge.n	8011b36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011b08:	7bfb      	ldrb	r3, [r7, #15]
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	211a      	movs	r1, #26
 8011b0e:	fb01 f303 	mul.w	r3, r1, r3
 8011b12:	4413      	add	r3, r2
 8011b14:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011b18:	781a      	ldrb	r2, [r3, #0]
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011b1e:	7bfb      	ldrb	r3, [r7, #15]
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	211a      	movs	r1, #26
 8011b24:	fb01 f303 	mul.w	r3, r1, r3
 8011b28:	4413      	add	r3, r2
 8011b2a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011b2e:	881a      	ldrh	r2, [r3, #0]
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	835a      	strh	r2, [r3, #26]
 8011b34:	e015      	b.n	8011b62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011b36:	7bfb      	ldrb	r3, [r7, #15]
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	211a      	movs	r1, #26
 8011b3c:	fb01 f303 	mul.w	r3, r1, r3
 8011b40:	4413      	add	r3, r2
 8011b42:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011b46:	781a      	ldrb	r2, [r3, #0]
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011b4c:	7bfb      	ldrb	r3, [r7, #15]
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	211a      	movs	r1, #26
 8011b52:	fb01 f303 	mul.w	r3, r1, r3
 8011b56:	4413      	add	r3, r2
 8011b58:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011b5c:	881a      	ldrh	r2, [r3, #0]
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	7b9b      	ldrb	r3, [r3, #14]
 8011b66:	4619      	mov	r1, r3
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f002 f864 	bl	8013c36 <USBH_AllocPipe>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	461a      	mov	r2, r3
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	7bdb      	ldrb	r3, [r3, #15]
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f002 f85a 	bl	8013c36 <USBH_AllocPipe>
 8011b82:	4603      	mov	r3, r0
 8011b84:	461a      	mov	r2, r3
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	7b59      	ldrb	r1, [r3, #13]
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	7b98      	ldrb	r0, [r3, #14]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011b9e:	68ba      	ldr	r2, [r7, #8]
 8011ba0:	8b12      	ldrh	r2, [r2, #24]
 8011ba2:	9202      	str	r2, [sp, #8]
 8011ba4:	2202      	movs	r2, #2
 8011ba6:	9201      	str	r2, [sp, #4]
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	4623      	mov	r3, r4
 8011bac:	4602      	mov	r2, r0
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f002 f812 	bl	8013bd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	7b19      	ldrb	r1, [r3, #12]
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	7bd8      	ldrb	r0, [r3, #15]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011bc8:	68ba      	ldr	r2, [r7, #8]
 8011bca:	8b52      	ldrh	r2, [r2, #26]
 8011bcc:	9202      	str	r2, [sp, #8]
 8011bce:	2202      	movs	r2, #2
 8011bd0:	9201      	str	r2, [sp, #4]
 8011bd2:	9300      	str	r3, [sp, #0]
 8011bd4:	4623      	mov	r3, r4
 8011bd6:	4602      	mov	r2, r0
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f001 fffd 	bl	8013bd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	2200      	movs	r2, #0
 8011be2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	7b5b      	ldrb	r3, [r3, #13]
 8011bea:	2200      	movs	r2, #0
 8011bec:	4619      	mov	r1, r3
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f004 fef2 	bl	80169d8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	7b1b      	ldrb	r3, [r3, #12]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f004 feeb 	bl	80169d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8011c02:	2300      	movs	r3, #0
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3714      	adds	r7, #20
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd90      	pop	{r4, r7, pc}

08011c0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011c1a:	69db      	ldr	r3, [r3, #28]
 8011c1c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00e      	beq.n	8011c44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f001 fff2 	bl	8013c16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	4619      	mov	r1, r3
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f002 f81d 	bl	8013c78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2200      	movs	r2, #0
 8011c42:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	7b1b      	ldrb	r3, [r3, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00e      	beq.n	8011c6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	7b1b      	ldrb	r3, [r3, #12]
 8011c50:	4619      	mov	r1, r3
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f001 ffdf 	bl	8013c16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	7b1b      	ldrb	r3, [r3, #12]
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f002 f80a 	bl	8013c78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2200      	movs	r2, #0
 8011c68:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	7b5b      	ldrb	r3, [r3, #13]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00e      	beq.n	8011c90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	7b5b      	ldrb	r3, [r3, #13]
 8011c76:	4619      	mov	r1, r3
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f001 ffcc 	bl	8013c16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	7b5b      	ldrb	r3, [r3, #13]
 8011c82:	4619      	mov	r1, r3
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f001 fff7 	bl	8013c78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011c96:	69db      	ldr	r3, [r3, #28]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00b      	beq.n	8011cb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011ca2:	69db      	ldr	r3, [r3, #28]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f004 ff25 	bl	8016af4 <free>
    phost->pActiveClass->pData = 0U;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8011cb4:	2300      	movs	r3, #0
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b084      	sub	sp, #16
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011ccc:	69db      	ldr	r3, [r3, #28]
 8011cce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	3340      	adds	r3, #64	@ 0x40
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f000 f8b1 	bl	8011e3e <GetLineCoding>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8011ce0:	7afb      	ldrb	r3, [r7, #11]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d105      	bne.n	8011cf2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011cec:	2102      	movs	r1, #2
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8011cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3710      	adds	r7, #16
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011d04:	2301      	movs	r3, #1
 8011d06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011d12:	69db      	ldr	r3, [r3, #28]
 8011d14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8011d1c:	2b04      	cmp	r3, #4
 8011d1e:	d877      	bhi.n	8011e10 <USBH_CDC_Process+0x114>
 8011d20:	a201      	add	r2, pc, #4	@ (adr r2, 8011d28 <USBH_CDC_Process+0x2c>)
 8011d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d26:	bf00      	nop
 8011d28:	08011d3d 	.word	0x08011d3d
 8011d2c:	08011d43 	.word	0x08011d43
 8011d30:	08011d73 	.word	0x08011d73
 8011d34:	08011de7 	.word	0x08011de7
 8011d38:	08011df5 	.word	0x08011df5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d40:	e06d      	b.n	8011e1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011d46:	4619      	mov	r1, r3
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f000 f897 	bl	8011e7c <SetLineCoding>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011d52:	7bbb      	ldrb	r3, [r7, #14]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d104      	bne.n	8011d62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	2202      	movs	r2, #2
 8011d5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011d60:	e058      	b.n	8011e14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8011d62:	7bbb      	ldrb	r3, [r7, #14]
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d055      	beq.n	8011e14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	2204      	movs	r2, #4
 8011d6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011d70:	e050      	b.n	8011e14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	3340      	adds	r3, #64	@ 0x40
 8011d76:	4619      	mov	r1, r3
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 f860 	bl	8011e3e <GetLineCoding>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011d82:	7bbb      	ldrb	r3, [r7, #14]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d126      	bne.n	8011dd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011d9a:	791b      	ldrb	r3, [r3, #4]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d13b      	bne.n	8011e18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011daa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d133      	bne.n	8011e18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011dba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d12b      	bne.n	8011e18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011dc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d124      	bne.n	8011e18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 f96a 	bl	80120a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011dd4:	e020      	b.n	8011e18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8011dd6:	7bbb      	ldrb	r3, [r7, #14]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d01d      	beq.n	8011e18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	2204      	movs	r2, #4
 8011de0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011de4:	e018      	b.n	8011e18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f000 f867 	bl	8011eba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f000 f8e6 	bl	8011fbe <CDC_ProcessReception>
      break;
 8011df2:	e014      	b.n	8011e1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8011df4:	2100      	movs	r1, #0
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f001 f8ff 	bl	8012ffa <USBH_ClrFeature>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011e00:	7bbb      	ldrb	r3, [r7, #14]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d10a      	bne.n	8011e1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	2200      	movs	r2, #0
 8011e0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8011e0e:	e005      	b.n	8011e1c <USBH_CDC_Process+0x120>

    default:
      break;
 8011e10:	bf00      	nop
 8011e12:	e004      	b.n	8011e1e <USBH_CDC_Process+0x122>
      break;
 8011e14:	bf00      	nop
 8011e16:	e002      	b.n	8011e1e <USBH_CDC_Process+0x122>
      break;
 8011e18:	bf00      	nop
 8011e1a:	e000      	b.n	8011e1e <USBH_CDC_Process+0x122>
      break;
 8011e1c:	bf00      	nop

  }

  return status;
 8011e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3710      	adds	r7, #16
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	370c      	adds	r7, #12
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr

08011e3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8011e3e:	b580      	push	{r7, lr}
 8011e40:	b082      	sub	sp, #8
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
 8011e46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	22a1      	movs	r2, #161	@ 0xa1
 8011e4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2221      	movs	r2, #33	@ 0x21
 8011e52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2200      	movs	r2, #0
 8011e58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2207      	movs	r2, #7
 8011e64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	2207      	movs	r2, #7
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f001 fbf9 	bl	8013664 <USBH_CtlReq>
 8011e72:	4603      	mov	r3, r0
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3708      	adds	r7, #8
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2221      	movs	r2, #33	@ 0x21
 8011e8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2220      	movs	r2, #32
 8011e90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2200      	movs	r2, #0
 8011e96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2207      	movs	r2, #7
 8011ea2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	2207      	movs	r2, #7
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f001 fbda 	bl	8013664 <USBH_CtlReq>
 8011eb0:	4603      	mov	r3, r0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b086      	sub	sp, #24
 8011ebe:	af02      	add	r7, sp, #8
 8011ec0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011ec8:	69db      	ldr	r3, [r3, #28]
 8011eca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d002      	beq.n	8011ee0 <CDC_ProcessTransmission+0x26>
 8011eda:	2b02      	cmp	r3, #2
 8011edc:	d023      	beq.n	8011f26 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8011ede:	e06a      	b.n	8011fb6 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ee4:	68fa      	ldr	r2, [r7, #12]
 8011ee6:	8b12      	ldrh	r2, [r2, #24]
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d90b      	bls.n	8011f04 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	69d9      	ldr	r1, [r3, #28]
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	8b1a      	ldrh	r2, [r3, #24]
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	7b5b      	ldrb	r3, [r3, #13]
 8011ef8:	2001      	movs	r0, #1
 8011efa:	9000      	str	r0, [sp, #0]
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f001 fe28 	bl	8013b52 <USBH_BulkSendData>
 8011f02:	e00b      	b.n	8011f1c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	7b5b      	ldrb	r3, [r3, #13]
 8011f12:	2001      	movs	r0, #1
 8011f14:	9000      	str	r0, [sp, #0]
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f001 fe1b 	bl	8013b52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2202      	movs	r2, #2
 8011f20:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8011f24:	e047      	b.n	8011fb6 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	7b5b      	ldrb	r3, [r3, #13]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f004 fd29 	bl	8016984 <USBH_LL_GetURBState>
 8011f32:	4603      	mov	r3, r0
 8011f34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8011f36:	7afb      	ldrb	r3, [r7, #11]
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d12e      	bne.n	8011f9a <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	8b12      	ldrh	r2, [r2, #24]
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d90e      	bls.n	8011f66 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	8b12      	ldrh	r2, [r2, #24]
 8011f50:	1a9a      	subs	r2, r3, r2
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	69db      	ldr	r3, [r3, #28]
 8011f5a:	68fa      	ldr	r2, [r7, #12]
 8011f5c:	8b12      	ldrh	r2, [r2, #24]
 8011f5e:	441a      	add	r2, r3
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	61da      	str	r2, [r3, #28]
 8011f64:	e002      	b.n	8011f6c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d004      	beq.n	8011f7e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2201      	movs	r2, #1
 8011f78:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8011f7c:	e006      	b.n	8011f8c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2200      	movs	r2, #0
 8011f82:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 f87a 	bl	8012080 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	2200      	movs	r2, #0
 8011f90:	2104      	movs	r1, #4
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 febc 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8011f98:	e00c      	b.n	8011fb4 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8011f9a:	7afb      	ldrb	r3, [r7, #11]
 8011f9c:	2b02      	cmp	r3, #2
 8011f9e:	d109      	bne.n	8011fb4 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8011fa8:	2300      	movs	r3, #0
 8011faa:	2200      	movs	r2, #0
 8011fac:	2104      	movs	r1, #4
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 feae 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8011fb4:	bf00      	nop
  }
}
 8011fb6:	bf00      	nop
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b086      	sub	sp, #24
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011fcc:	69db      	ldr	r3, [r3, #28]
 8011fce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8011fda:	2b03      	cmp	r3, #3
 8011fdc:	d002      	beq.n	8011fe4 <CDC_ProcessReception+0x26>
 8011fde:	2b04      	cmp	r3, #4
 8011fe0:	d00e      	beq.n	8012000 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8011fe2:	e049      	b.n	8012078 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	6a19      	ldr	r1, [r3, #32]
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	8b5a      	ldrh	r2, [r3, #26]
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	7b1b      	ldrb	r3, [r3, #12]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f001 fdd3 	bl	8013b9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	2204      	movs	r2, #4
 8011ffa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8011ffe:	e03b      	b.n	8012078 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	7b1b      	ldrb	r3, [r3, #12]
 8012004:	4619      	mov	r1, r3
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f004 fcbc 	bl	8016984 <USBH_LL_GetURBState>
 801200c:	4603      	mov	r3, r0
 801200e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012010:	7cfb      	ldrb	r3, [r7, #19]
 8012012:	2b01      	cmp	r3, #1
 8012014:	d12f      	bne.n	8012076 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	7b1b      	ldrb	r3, [r3, #12]
 801201a:	4619      	mov	r1, r3
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f004 fc1f 	bl	8016860 <USBH_LL_GetLastXferSize>
 8012022:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012028:	68fa      	ldr	r2, [r7, #12]
 801202a:	429a      	cmp	r2, r3
 801202c:	d016      	beq.n	801205c <CDC_ProcessReception+0x9e>
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	8b5b      	ldrh	r3, [r3, #26]
 8012032:	461a      	mov	r2, r3
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	4293      	cmp	r3, r2
 8012038:	d110      	bne.n	801205c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	1ad2      	subs	r2, r2, r3
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	6a1a      	ldr	r2, [r3, #32]
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	441a      	add	r2, r3
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	2203      	movs	r2, #3
 8012056:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 801205a:	e006      	b.n	801206a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	2200      	movs	r2, #0
 8012060:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f000 f815 	bl	8012094 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 801206a:	2300      	movs	r3, #0
 801206c:	2200      	movs	r2, #0
 801206e:	2104      	movs	r1, #4
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 fe4d 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8012076:	bf00      	nop
  }
}
 8012078:	bf00      	nop
 801207a:	3718      	adds	r7, #24
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012080:	b480      	push	{r7}
 8012082:	b083      	sub	sp, #12
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012088:	bf00      	nop
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801209c:	bf00      	nop
 801209e:	370c      	adds	r7, #12
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr

080120a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80120b0:	bf00      	nop
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80120bc:	b5b0      	push	{r4, r5, r7, lr}
 80120be:	b090      	sub	sp, #64	@ 0x40
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	60b9      	str	r1, [r7, #8]
 80120c6:	4613      	mov	r3, r2
 80120c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d101      	bne.n	80120d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80120d0:	2302      	movs	r3, #2
 80120d2:	e04d      	b.n	8012170 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	79fa      	ldrb	r2, [r7, #7]
 80120d8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2200      	movs	r2, #0
 80120e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2200      	movs	r2, #0
 80120e8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f000 f847 	bl	8012180 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2200      	movs	r2, #0
 80120f6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2200      	movs	r2, #0
 80120fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2200      	movs	r2, #0
 8012106:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2200      	movs	r2, #0
 801210e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d003      	beq.n	8012120 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	68ba      	ldr	r2, [r7, #8]
 801211c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8012120:	4b15      	ldr	r3, [pc, #84]	@ (8012178 <USBH_Init+0xbc>)
 8012122:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8012126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 801212c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012130:	2100      	movs	r1, #0
 8012132:	4618      	mov	r0, r3
 8012134:	f001 feea 	bl	8013f0c <osMessageCreate>
 8012138:	4602      	mov	r2, r0
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8012140:	4b0e      	ldr	r3, [pc, #56]	@ (801217c <USBH_Init+0xc0>)
 8012142:	f107 0414 	add.w	r4, r7, #20
 8012146:	461d      	mov	r5, r3
 8012148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801214a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801214c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8012154:	f107 0314 	add.w	r3, r7, #20
 8012158:	68f9      	ldr	r1, [r7, #12]
 801215a:	4618      	mov	r0, r3
 801215c:	f001 fe76 	bl	8013e4c <osThreadCreate>
 8012160:	4602      	mov	r2, r0
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8012168:	68f8      	ldr	r0, [r7, #12]
 801216a:	f004 fac5 	bl	80166f8 <USBH_LL_Init>

  return USBH_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3740      	adds	r7, #64	@ 0x40
 8012174:	46bd      	mov	sp, r7
 8012176:	bdb0      	pop	{r4, r5, r7, pc}
 8012178:	08019054 	.word	0x08019054
 801217c:	08019070 	.word	0x08019070

08012180 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012188:	2300      	movs	r3, #0
 801218a:	60fb      	str	r3, [r7, #12]
 801218c:	e009      	b.n	80121a2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	33e0      	adds	r3, #224	@ 0xe0
 8012194:	009b      	lsls	r3, r3, #2
 8012196:	4413      	add	r3, r2
 8012198:	2200      	movs	r2, #0
 801219a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	3301      	adds	r3, #1
 80121a0:	60fb      	str	r3, [r7, #12]
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2b0f      	cmp	r3, #15
 80121a6:	d9f2      	bls.n	801218e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80121a8:	2300      	movs	r3, #0
 80121aa:	60fb      	str	r3, [r7, #12]
 80121ac:	e009      	b.n	80121c2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	4413      	add	r3, r2
 80121b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80121b8:	2200      	movs	r2, #0
 80121ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	3301      	adds	r3, #1
 80121c0:	60fb      	str	r3, [r7, #12]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121c8:	d3f1      	bcc.n	80121ae <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2200      	movs	r2, #0
 80121d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2201      	movs	r2, #1
 80121da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2201      	movs	r2, #1
 80121e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2240      	movs	r2, #64	@ 0x40
 80121ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2201      	movs	r2, #1
 8012202:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2200      	movs	r2, #0
 801220a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2200      	movs	r2, #0
 8012212:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	331c      	adds	r3, #28
 801221a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801221e:	2100      	movs	r1, #0
 8012220:	4618      	mov	r0, r3
 8012222:	f004 fdb1 	bl	8016d88 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801222c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012230:	2100      	movs	r1, #0
 8012232:	4618      	mov	r0, r3
 8012234:	f004 fda8 	bl	8016d88 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 801223e:	2212      	movs	r2, #18
 8012240:	2100      	movs	r1, #0
 8012242:	4618      	mov	r0, r3
 8012244:	f004 fda0 	bl	8016d88 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801224e:	223e      	movs	r2, #62	@ 0x3e
 8012250:	2100      	movs	r1, #0
 8012252:	4618      	mov	r0, r3
 8012254:	f004 fd98 	bl	8016d88 <memset>

  return USBH_OK;
 8012258:	2300      	movs	r3, #0
}
 801225a:	4618      	mov	r0, r3
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8012262:	b480      	push	{r7}
 8012264:	b085      	sub	sp, #20
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
 801226a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801226c:	2300      	movs	r3, #0
 801226e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d016      	beq.n	80122a4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801227c:	2b00      	cmp	r3, #0
 801227e:	d10e      	bne.n	801229e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8012286:	1c59      	adds	r1, r3, #1
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	33de      	adds	r3, #222	@ 0xde
 8012292:	6839      	ldr	r1, [r7, #0]
 8012294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8012298:	2300      	movs	r3, #0
 801229a:	73fb      	strb	r3, [r7, #15]
 801229c:	e004      	b.n	80122a8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801229e:	2302      	movs	r3, #2
 80122a0:	73fb      	strb	r3, [r7, #15]
 80122a2:	e001      	b.n	80122a8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80122a4:	2302      	movs	r3, #2
 80122a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80122a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3714      	adds	r7, #20
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80122b6:	b480      	push	{r7}
 80122b8:	b085      	sub	sp, #20
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
 80122be:	460b      	mov	r3, r1
 80122c0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80122c2:	2300      	movs	r3, #0
 80122c4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80122cc:	78fa      	ldrb	r2, [r7, #3]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d204      	bcs.n	80122dc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	78fa      	ldrb	r2, [r7, #3]
 80122d6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80122da:	e001      	b.n	80122e0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80122dc:	2302      	movs	r3, #2
 80122de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3714      	adds	r7, #20
 80122e6:	46bd      	mov	sp, r7
 80122e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ec:	4770      	bx	lr

080122ee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80122ee:	b480      	push	{r7}
 80122f0:	b087      	sub	sp, #28
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
 80122f6:	4608      	mov	r0, r1
 80122f8:	4611      	mov	r1, r2
 80122fa:	461a      	mov	r2, r3
 80122fc:	4603      	mov	r3, r0
 80122fe:	70fb      	strb	r3, [r7, #3]
 8012300:	460b      	mov	r3, r1
 8012302:	70bb      	strb	r3, [r7, #2]
 8012304:	4613      	mov	r3, r2
 8012306:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8012308:	2300      	movs	r3, #0
 801230a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 801230c:	2300      	movs	r3, #0
 801230e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8012316:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012318:	e025      	b.n	8012366 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801231a:	7dfb      	ldrb	r3, [r7, #23]
 801231c:	221a      	movs	r2, #26
 801231e:	fb02 f303 	mul.w	r3, r2, r3
 8012322:	3308      	adds	r3, #8
 8012324:	68fa      	ldr	r2, [r7, #12]
 8012326:	4413      	add	r3, r2
 8012328:	3302      	adds	r3, #2
 801232a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	795b      	ldrb	r3, [r3, #5]
 8012330:	78fa      	ldrb	r2, [r7, #3]
 8012332:	429a      	cmp	r2, r3
 8012334:	d002      	beq.n	801233c <USBH_FindInterface+0x4e>
 8012336:	78fb      	ldrb	r3, [r7, #3]
 8012338:	2bff      	cmp	r3, #255	@ 0xff
 801233a:	d111      	bne.n	8012360 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012340:	78ba      	ldrb	r2, [r7, #2]
 8012342:	429a      	cmp	r2, r3
 8012344:	d002      	beq.n	801234c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012346:	78bb      	ldrb	r3, [r7, #2]
 8012348:	2bff      	cmp	r3, #255	@ 0xff
 801234a:	d109      	bne.n	8012360 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012350:	787a      	ldrb	r2, [r7, #1]
 8012352:	429a      	cmp	r2, r3
 8012354:	d002      	beq.n	801235c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012356:	787b      	ldrb	r3, [r7, #1]
 8012358:	2bff      	cmp	r3, #255	@ 0xff
 801235a:	d101      	bne.n	8012360 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801235c:	7dfb      	ldrb	r3, [r7, #23]
 801235e:	e006      	b.n	801236e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012360:	7dfb      	ldrb	r3, [r7, #23]
 8012362:	3301      	adds	r3, #1
 8012364:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012366:	7dfb      	ldrb	r3, [r7, #23]
 8012368:	2b01      	cmp	r3, #1
 801236a:	d9d6      	bls.n	801231a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801236c:	23ff      	movs	r3, #255	@ 0xff
}
 801236e:	4618      	mov	r0, r3
 8012370:	371c      	adds	r7, #28
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr

0801237a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b082      	sub	sp, #8
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f004 f9f4 	bl	8016770 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8012388:	2101      	movs	r1, #1
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f004 fb0d 	bl	80169aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012390:	2300      	movs	r3, #0
}
 8012392:	4618      	mov	r0, r3
 8012394:	3708      	adds	r7, #8
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
	...

0801239c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b088      	sub	sp, #32
 80123a0:	af04      	add	r7, sp, #16
 80123a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80123a4:	2302      	movs	r3, #2
 80123a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80123a8:	2300      	movs	r3, #0
 80123aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d102      	bne.n	80123be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2203      	movs	r2, #3
 80123bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	2b0b      	cmp	r3, #11
 80123c6:	f200 81f5 	bhi.w	80127b4 <USBH_Process+0x418>
 80123ca:	a201      	add	r2, pc, #4	@ (adr r2, 80123d0 <USBH_Process+0x34>)
 80123cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123d0:	08012401 	.word	0x08012401
 80123d4:	0801243f 	.word	0x0801243f
 80123d8:	080124b5 	.word	0x080124b5
 80123dc:	08012743 	.word	0x08012743
 80123e0:	080127b5 	.word	0x080127b5
 80123e4:	08012561 	.word	0x08012561
 80123e8:	080126dd 	.word	0x080126dd
 80123ec:	080125a3 	.word	0x080125a3
 80123f0:	080125cf 	.word	0x080125cf
 80123f4:	080125f7 	.word	0x080125f7
 80123f8:	08012645 	.word	0x08012645
 80123fc:	0801272b 	.word	0x0801272b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8012406:	b2db      	uxtb	r3, r3
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 81d5 	beq.w	80127b8 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2201      	movs	r2, #1
 8012412:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8012414:	20c8      	movs	r0, #200	@ 0xc8
 8012416:	f004 fb12 	bl	8016a3e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f004 fa05 	bl	801682a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2200      	movs	r2, #0
 8012424:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2200      	movs	r2, #0
 801242c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012430:	2300      	movs	r3, #0
 8012432:	2200      	movs	r2, #0
 8012434:	2101      	movs	r1, #1
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fc6a 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801243c:	e1bc      	b.n	80127b8 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8012444:	b2db      	uxtb	r3, r3
 8012446:	2b01      	cmp	r3, #1
 8012448:	d107      	bne.n	801245a <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2202      	movs	r2, #2
 8012456:	701a      	strb	r2, [r3, #0]
 8012458:	e025      	b.n	80124a6 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012464:	d914      	bls.n	8012490 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 801246c:	3301      	adds	r3, #1
 801246e:	b2da      	uxtb	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 801247c:	2b03      	cmp	r3, #3
 801247e:	d903      	bls.n	8012488 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	220d      	movs	r2, #13
 8012484:	701a      	strb	r2, [r3, #0]
 8012486:	e00e      	b.n	80124a6 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	701a      	strb	r2, [r3, #0]
 801248e:	e00a      	b.n	80124a6 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012496:	f103 020a 	add.w	r2, r3, #10
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80124a0:	200a      	movs	r0, #10
 80124a2:	f004 facc 	bl	8016a3e <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80124a6:	2300      	movs	r3, #0
 80124a8:	2200      	movs	r2, #0
 80124aa:	2101      	movs	r1, #1
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 fc2f 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80124b2:	e188      	b.n	80127c6 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d005      	beq.n	80124ca <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80124c4:	2104      	movs	r1, #4
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80124ca:	2064      	movs	r0, #100	@ 0x64
 80124cc:	f004 fab7 	bl	8016a3e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f004 f983 	bl	80167dc <USBH_LL_GetSpeed>
 80124d6:	4603      	mov	r3, r0
 80124d8:	461a      	mov	r2, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2205      	movs	r2, #5
 80124e4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80124e6:	2100      	movs	r1, #0
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f001 fba4 	bl	8013c36 <USBH_AllocPipe>
 80124ee:	4603      	mov	r3, r0
 80124f0:	461a      	mov	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80124f6:	2180      	movs	r1, #128	@ 0x80
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f001 fb9c 	bl	8013c36 <USBH_AllocPipe>
 80124fe:	4603      	mov	r3, r0
 8012500:	461a      	mov	r2, r3
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	7919      	ldrb	r1, [r3, #4]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801251a:	9202      	str	r2, [sp, #8]
 801251c:	2200      	movs	r2, #0
 801251e:	9201      	str	r2, [sp, #4]
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	4603      	mov	r3, r0
 8012524:	2280      	movs	r2, #128	@ 0x80
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f001 fb56 	bl	8013bd8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	7959      	ldrb	r1, [r3, #5]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801253c:	687a      	ldr	r2, [r7, #4]
 801253e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012540:	9202      	str	r2, [sp, #8]
 8012542:	2200      	movs	r2, #0
 8012544:	9201      	str	r2, [sp, #4]
 8012546:	9300      	str	r3, [sp, #0]
 8012548:	4603      	mov	r3, r0
 801254a:	2200      	movs	r2, #0
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f001 fb43 	bl	8013bd8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012552:	2300      	movs	r3, #0
 8012554:	2200      	movs	r2, #0
 8012556:	2101      	movs	r1, #1
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f000 fbd9 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801255e:	e132      	b.n	80127c6 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 f935 	bl	80127d0 <USBH_HandleEnum>
 8012566:	4603      	mov	r3, r0
 8012568:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801256a:	7bbb      	ldrb	r3, [r7, #14]
 801256c:	b2db      	uxtb	r3, r3
 801256e:	2b00      	cmp	r3, #0
 8012570:	f040 8124 	bne.w	80127bc <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2200      	movs	r2, #0
 8012578:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8012582:	2b01      	cmp	r3, #1
 8012584:	d103      	bne.n	801258e <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2208      	movs	r2, #8
 801258a:	701a      	strb	r2, [r3, #0]
 801258c:	e002      	b.n	8012594 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2207      	movs	r2, #7
 8012592:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012594:	2300      	movs	r3, #0
 8012596:	2200      	movs	r2, #0
 8012598:	2105      	movs	r1, #5
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 fbb8 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80125a0:	e10c      	b.n	80127bc <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f000 8109 	beq.w	80127c0 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80125b4:	2101      	movs	r1, #1
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2208      	movs	r2, #8
 80125be:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80125c0:	2300      	movs	r3, #0
 80125c2:	2200      	movs	r2, #0
 80125c4:	2105      	movs	r1, #5
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f000 fba2 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80125cc:	e0f8      	b.n	80127c0 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80125d4:	4619      	mov	r1, r3
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 fcc8 	bl	8012f6c <USBH_SetCfg>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d102      	bne.n	80125e8 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2209      	movs	r2, #9
 80125e6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80125e8:	2300      	movs	r3, #0
 80125ea:	2200      	movs	r2, #0
 80125ec:	2101      	movs	r1, #1
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f000 fb8e 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80125f4:	e0e7      	b.n	80127c6 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80125fc:	f003 0320 	and.w	r3, r3, #32
 8012600:	2b00      	cmp	r3, #0
 8012602:	d015      	beq.n	8012630 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8012604:	2101      	movs	r1, #1
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f000 fcd3 	bl	8012fb2 <USBH_SetFeature>
 801260c:	4603      	mov	r3, r0
 801260e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8012610:	7bbb      	ldrb	r3, [r7, #14]
 8012612:	b2db      	uxtb	r3, r3
 8012614:	2b00      	cmp	r3, #0
 8012616:	d103      	bne.n	8012620 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	220a      	movs	r2, #10
 801261c:	701a      	strb	r2, [r3, #0]
 801261e:	e00a      	b.n	8012636 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8012620:	7bbb      	ldrb	r3, [r7, #14]
 8012622:	b2db      	uxtb	r3, r3
 8012624:	2b03      	cmp	r3, #3
 8012626:	d106      	bne.n	8012636 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	220a      	movs	r2, #10
 801262c:	701a      	strb	r2, [r3, #0]
 801262e:	e002      	b.n	8012636 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	220a      	movs	r2, #10
 8012634:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012636:	2300      	movs	r3, #0
 8012638:	2200      	movs	r2, #0
 801263a:	2101      	movs	r1, #1
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 fb67 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012642:	e0c0      	b.n	80127c6 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801264a:	2b00      	cmp	r3, #0
 801264c:	d03f      	beq.n	80126ce <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2200      	movs	r2, #0
 8012652:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012656:	2300      	movs	r3, #0
 8012658:	73fb      	strb	r3, [r7, #15]
 801265a:	e016      	b.n	801268a <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801265c:	7bfa      	ldrb	r2, [r7, #15]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	32de      	adds	r2, #222	@ 0xde
 8012662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012666:	791a      	ldrb	r2, [r3, #4]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 801266e:	429a      	cmp	r2, r3
 8012670:	d108      	bne.n	8012684 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8012672:	7bfa      	ldrb	r2, [r7, #15]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	32de      	adds	r2, #222	@ 0xde
 8012678:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8012682:	e005      	b.n	8012690 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012684:	7bfb      	ldrb	r3, [r7, #15]
 8012686:	3301      	adds	r3, #1
 8012688:	73fb      	strb	r3, [r7, #15]
 801268a:	7bfb      	ldrb	r3, [r7, #15]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d0e5      	beq.n	801265c <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012696:	2b00      	cmp	r3, #0
 8012698:	d016      	beq.n	80126c8 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80126a0:	689b      	ldr	r3, [r3, #8]
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	4798      	blx	r3
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d109      	bne.n	80126c0 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2206      	movs	r2, #6
 80126b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80126b8:	2103      	movs	r1, #3
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	4798      	blx	r3
 80126be:	e006      	b.n	80126ce <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	220d      	movs	r2, #13
 80126c4:	701a      	strb	r2, [r3, #0]
 80126c6:	e002      	b.n	80126ce <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	220d      	movs	r2, #13
 80126cc:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80126ce:	2300      	movs	r3, #0
 80126d0:	2200      	movs	r2, #0
 80126d2:	2105      	movs	r1, #5
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 fb1b 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80126da:	e074      	b.n	80127c6 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d017      	beq.n	8012716 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80126ec:	691b      	ldr	r3, [r3, #16]
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	4798      	blx	r3
 80126f2:	4603      	mov	r3, r0
 80126f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80126f6:	7bbb      	ldrb	r3, [r7, #14]
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d103      	bne.n	8012706 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	220b      	movs	r2, #11
 8012702:	701a      	strb	r2, [r3, #0]
 8012704:	e00a      	b.n	801271c <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 8012706:	7bbb      	ldrb	r3, [r7, #14]
 8012708:	b2db      	uxtb	r3, r3
 801270a:	2b02      	cmp	r3, #2
 801270c:	d106      	bne.n	801271c <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	220d      	movs	r2, #13
 8012712:	701a      	strb	r2, [r3, #0]
 8012714:	e002      	b.n	801271c <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	220d      	movs	r2, #13
 801271a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801271c:	2300      	movs	r3, #0
 801271e:	2200      	movs	r2, #0
 8012720:	2105      	movs	r1, #5
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f000 faf4 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012728:	e04d      	b.n	80127c6 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012730:	2b00      	cmp	r3, #0
 8012732:	d047      	beq.n	80127c4 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801273a:	695b      	ldr	r3, [r3, #20]
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	4798      	blx	r3
      }
      break;
 8012740:	e040      	b.n	80127c4 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2200      	movs	r2, #0
 8012746:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f7ff fd18 	bl	8012180 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012756:	2b00      	cmp	r3, #0
 8012758:	d009      	beq.n	801276e <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2200      	movs	r2, #0
 801276a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012774:	2b00      	cmp	r3, #0
 8012776:	d005      	beq.n	8012784 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801277e:	2105      	movs	r1, #5
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 801278a:	b2db      	uxtb	r3, r3
 801278c:	2b01      	cmp	r3, #1
 801278e:	d107      	bne.n	80127a0 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2200      	movs	r2, #0
 8012794:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7ff fdee 	bl	801237a <USBH_Start>
 801279e:	e002      	b.n	80127a6 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f003 ffe5 	bl	8016770 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80127a6:	2300      	movs	r3, #0
 80127a8:	2200      	movs	r2, #0
 80127aa:	2101      	movs	r1, #1
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f000 faaf 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80127b2:	e008      	b.n	80127c6 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 80127b4:	bf00      	nop
 80127b6:	e006      	b.n	80127c6 <USBH_Process+0x42a>
      break;
 80127b8:	bf00      	nop
 80127ba:	e004      	b.n	80127c6 <USBH_Process+0x42a>
      break;
 80127bc:	bf00      	nop
 80127be:	e002      	b.n	80127c6 <USBH_Process+0x42a>
    break;
 80127c0:	bf00      	nop
 80127c2:	e000      	b.n	80127c6 <USBH_Process+0x42a>
      break;
 80127c4:	bf00      	nop
  }
  return USBH_OK;
 80127c6:	2300      	movs	r3, #0
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3710      	adds	r7, #16
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b088      	sub	sp, #32
 80127d4:	af04      	add	r7, sp, #16
 80127d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80127d8:	2301      	movs	r3, #1
 80127da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80127dc:	2301      	movs	r3, #1
 80127de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	785b      	ldrb	r3, [r3, #1]
 80127e4:	2b07      	cmp	r3, #7
 80127e6:	f200 81db 	bhi.w	8012ba0 <USBH_HandleEnum+0x3d0>
 80127ea:	a201      	add	r2, pc, #4	@ (adr r2, 80127f0 <USBH_HandleEnum+0x20>)
 80127ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127f0:	08012811 	.word	0x08012811
 80127f4:	080128cb 	.word	0x080128cb
 80127f8:	08012935 	.word	0x08012935
 80127fc:	080129bf 	.word	0x080129bf
 8012800:	08012a29 	.word	0x08012a29
 8012804:	08012a99 	.word	0x08012a99
 8012808:	08012b03 	.word	0x08012b03
 801280c:	08012b61 	.word	0x08012b61
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8012810:	2108      	movs	r1, #8
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f000 fac7 	bl	8012da6 <USBH_Get_DevDesc>
 8012818:	4603      	mov	r3, r0
 801281a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801281c:	7bbb      	ldrb	r3, [r7, #14]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d12e      	bne.n	8012880 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2201      	movs	r2, #1
 8012830:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	7919      	ldrb	r1, [r3, #4]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012846:	9202      	str	r2, [sp, #8]
 8012848:	2200      	movs	r2, #0
 801284a:	9201      	str	r2, [sp, #4]
 801284c:	9300      	str	r3, [sp, #0]
 801284e:	4603      	mov	r3, r0
 8012850:	2280      	movs	r2, #128	@ 0x80
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f001 f9c0 	bl	8013bd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	7959      	ldrb	r1, [r3, #5]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012868:	687a      	ldr	r2, [r7, #4]
 801286a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801286c:	9202      	str	r2, [sp, #8]
 801286e:	2200      	movs	r2, #0
 8012870:	9201      	str	r2, [sp, #4]
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	4603      	mov	r3, r0
 8012876:	2200      	movs	r2, #0
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f001 f9ad 	bl	8013bd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801287e:	e191      	b.n	8012ba4 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012880:	7bbb      	ldrb	r3, [r7, #14]
 8012882:	2b03      	cmp	r3, #3
 8012884:	f040 818e 	bne.w	8012ba4 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801288e:	3301      	adds	r3, #1
 8012890:	b2da      	uxtb	r2, r3
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801289e:	2b03      	cmp	r3, #3
 80128a0:	d903      	bls.n	80128aa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	220d      	movs	r2, #13
 80128a6:	701a      	strb	r2, [r3, #0]
      break;
 80128a8:	e17c      	b.n	8012ba4 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	795b      	ldrb	r3, [r3, #5]
 80128ae:	4619      	mov	r1, r3
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f001 f9e1 	bl	8013c78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	791b      	ldrb	r3, [r3, #4]
 80128ba:	4619      	mov	r1, r3
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f001 f9db 	bl	8013c78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2200      	movs	r2, #0
 80128c6:	701a      	strb	r2, [r3, #0]
      break;
 80128c8:	e16c      	b.n	8012ba4 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80128ca:	2112      	movs	r1, #18
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 fa6a 	bl	8012da6 <USBH_Get_DevDesc>
 80128d2:	4603      	mov	r3, r0
 80128d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80128d6:	7bbb      	ldrb	r3, [r7, #14]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d103      	bne.n	80128e4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2202      	movs	r2, #2
 80128e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80128e2:	e161      	b.n	8012ba8 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80128e4:	7bbb      	ldrb	r3, [r7, #14]
 80128e6:	2b03      	cmp	r3, #3
 80128e8:	f040 815e 	bne.w	8012ba8 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80128f2:	3301      	adds	r3, #1
 80128f4:	b2da      	uxtb	r2, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012902:	2b03      	cmp	r3, #3
 8012904:	d903      	bls.n	801290e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	220d      	movs	r2, #13
 801290a:	701a      	strb	r2, [r3, #0]
      break;
 801290c:	e14c      	b.n	8012ba8 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	795b      	ldrb	r3, [r3, #5]
 8012912:	4619      	mov	r1, r3
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f001 f9af 	bl	8013c78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	791b      	ldrb	r3, [r3, #4]
 801291e:	4619      	mov	r1, r3
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f001 f9a9 	bl	8013c78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2200      	movs	r2, #0
 801292a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2200      	movs	r2, #0
 8012930:	701a      	strb	r2, [r3, #0]
      break;
 8012932:	e139      	b.n	8012ba8 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8012934:	2101      	movs	r1, #1
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f000 faf4 	bl	8012f24 <USBH_SetAddress>
 801293c:	4603      	mov	r3, r0
 801293e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012940:	7bbb      	ldrb	r3, [r7, #14]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d130      	bne.n	80129a8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8012946:	2002      	movs	r0, #2
 8012948:	f004 f879 	bl	8016a3e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2201      	movs	r2, #1
 8012950:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2203      	movs	r2, #3
 8012958:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	7919      	ldrb	r1, [r3, #4]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801296e:	9202      	str	r2, [sp, #8]
 8012970:	2200      	movs	r2, #0
 8012972:	9201      	str	r2, [sp, #4]
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	4603      	mov	r3, r0
 8012978:	2280      	movs	r2, #128	@ 0x80
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f001 f92c 	bl	8013bd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	7959      	ldrb	r1, [r3, #5]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012994:	9202      	str	r2, [sp, #8]
 8012996:	2200      	movs	r2, #0
 8012998:	9201      	str	r2, [sp, #4]
 801299a:	9300      	str	r3, [sp, #0]
 801299c:	4603      	mov	r3, r0
 801299e:	2200      	movs	r2, #0
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f001 f919 	bl	8013bd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80129a6:	e101      	b.n	8012bac <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80129a8:	7bbb      	ldrb	r3, [r7, #14]
 80129aa:	2b03      	cmp	r3, #3
 80129ac:	f040 80fe 	bne.w	8012bac <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	220d      	movs	r2, #13
 80129b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2200      	movs	r2, #0
 80129ba:	705a      	strb	r2, [r3, #1]
      break;
 80129bc:	e0f6      	b.n	8012bac <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80129be:	2109      	movs	r1, #9
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f000 fa1c 	bl	8012dfe <USBH_Get_CfgDesc>
 80129c6:	4603      	mov	r3, r0
 80129c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80129ca:	7bbb      	ldrb	r3, [r7, #14]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d103      	bne.n	80129d8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2204      	movs	r2, #4
 80129d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80129d6:	e0eb      	b.n	8012bb0 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80129d8:	7bbb      	ldrb	r3, [r7, #14]
 80129da:	2b03      	cmp	r3, #3
 80129dc:	f040 80e8 	bne.w	8012bb0 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80129e6:	3301      	adds	r3, #1
 80129e8:	b2da      	uxtb	r2, r3
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80129f6:	2b03      	cmp	r3, #3
 80129f8:	d903      	bls.n	8012a02 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	220d      	movs	r2, #13
 80129fe:	701a      	strb	r2, [r3, #0]
      break;
 8012a00:	e0d6      	b.n	8012bb0 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	795b      	ldrb	r3, [r3, #5]
 8012a06:	4619      	mov	r1, r3
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f001 f935 	bl	8013c78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	791b      	ldrb	r3, [r3, #4]
 8012a12:	4619      	mov	r1, r3
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f001 f92f 	bl	8013c78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	701a      	strb	r2, [r3, #0]
      break;
 8012a26:	e0c3      	b.n	8012bb0 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8012a2e:	4619      	mov	r1, r3
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f000 f9e4 	bl	8012dfe <USBH_Get_CfgDesc>
 8012a36:	4603      	mov	r3, r0
 8012a38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012a3a:	7bbb      	ldrb	r3, [r7, #14]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d103      	bne.n	8012a48 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2205      	movs	r2, #5
 8012a44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012a46:	e0b5      	b.n	8012bb4 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012a48:	7bbb      	ldrb	r3, [r7, #14]
 8012a4a:	2b03      	cmp	r3, #3
 8012a4c:	f040 80b2 	bne.w	8012bb4 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a56:	3301      	adds	r3, #1
 8012a58:	b2da      	uxtb	r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a66:	2b03      	cmp	r3, #3
 8012a68:	d903      	bls.n	8012a72 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	220d      	movs	r2, #13
 8012a6e:	701a      	strb	r2, [r3, #0]
      break;
 8012a70:	e0a0      	b.n	8012bb4 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	795b      	ldrb	r3, [r3, #5]
 8012a76:	4619      	mov	r1, r3
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f001 f8fd 	bl	8013c78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	791b      	ldrb	r3, [r3, #4]
 8012a82:	4619      	mov	r1, r3
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f001 f8f7 	bl	8013c78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2200      	movs	r2, #0
 8012a94:	701a      	strb	r2, [r3, #0]
      break;
 8012a96:	e08d      	b.n	8012bb4 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d025      	beq.n	8012aee <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012aae:	23ff      	movs	r3, #255	@ 0xff
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f000 f9ce 	bl	8012e52 <USBH_Get_StringDesc>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012aba:	7bbb      	ldrb	r3, [r7, #14]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d109      	bne.n	8012ad4 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2206      	movs	r2, #6
 8012ac4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	2200      	movs	r2, #0
 8012aca:	2105      	movs	r1, #5
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 f91f 	bl	8012d10 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012ad2:	e071      	b.n	8012bb8 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012ad4:	7bbb      	ldrb	r3, [r7, #14]
 8012ad6:	2b03      	cmp	r3, #3
 8012ad8:	d16e      	bne.n	8012bb8 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2206      	movs	r2, #6
 8012ade:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	2105      	movs	r1, #5
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f000 f912 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8012aec:	e064      	b.n	8012bb8 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2206      	movs	r2, #6
 8012af2:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012af4:	2300      	movs	r3, #0
 8012af6:	2200      	movs	r2, #0
 8012af8:	2105      	movs	r1, #5
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f000 f908 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8012b00:	e05a      	b.n	8012bb8 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d01f      	beq.n	8012b4c <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012b18:	23ff      	movs	r3, #255	@ 0xff
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 f999 	bl	8012e52 <USBH_Get_StringDesc>
 8012b20:	4603      	mov	r3, r0
 8012b22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012b24:	7bbb      	ldrb	r3, [r7, #14]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d103      	bne.n	8012b32 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2207      	movs	r2, #7
 8012b2e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012b30:	e044      	b.n	8012bbc <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012b32:	7bbb      	ldrb	r3, [r7, #14]
 8012b34:	2b03      	cmp	r3, #3
 8012b36:	d141      	bne.n	8012bbc <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2207      	movs	r2, #7
 8012b3c:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012b3e:	2300      	movs	r3, #0
 8012b40:	2200      	movs	r2, #0
 8012b42:	2105      	movs	r1, #5
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f000 f8e3 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8012b4a:	e037      	b.n	8012bbc <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2207      	movs	r2, #7
 8012b50:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012b52:	2300      	movs	r3, #0
 8012b54:	2200      	movs	r2, #0
 8012b56:	2105      	movs	r1, #5
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f000 f8d9 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8012b5e:	e02d      	b.n	8012bbc <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d017      	beq.n	8012b9a <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012b76:	23ff      	movs	r3, #255	@ 0xff
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f000 f96a 	bl	8012e52 <USBH_Get_StringDesc>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012b82:	7bbb      	ldrb	r3, [r7, #14]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d102      	bne.n	8012b8e <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8012b8c:	e018      	b.n	8012bc0 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012b8e:	7bbb      	ldrb	r3, [r7, #14]
 8012b90:	2b03      	cmp	r3, #3
 8012b92:	d115      	bne.n	8012bc0 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8012b94:	2300      	movs	r3, #0
 8012b96:	73fb      	strb	r3, [r7, #15]
      break;
 8012b98:	e012      	b.n	8012bc0 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8012b9e:	e00f      	b.n	8012bc0 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8012ba0:	bf00      	nop
 8012ba2:	e00e      	b.n	8012bc2 <USBH_HandleEnum+0x3f2>
      break;
 8012ba4:	bf00      	nop
 8012ba6:	e00c      	b.n	8012bc2 <USBH_HandleEnum+0x3f2>
      break;
 8012ba8:	bf00      	nop
 8012baa:	e00a      	b.n	8012bc2 <USBH_HandleEnum+0x3f2>
      break;
 8012bac:	bf00      	nop
 8012bae:	e008      	b.n	8012bc2 <USBH_HandleEnum+0x3f2>
      break;
 8012bb0:	bf00      	nop
 8012bb2:	e006      	b.n	8012bc2 <USBH_HandleEnum+0x3f2>
      break;
 8012bb4:	bf00      	nop
 8012bb6:	e004      	b.n	8012bc2 <USBH_HandleEnum+0x3f2>
      break;
 8012bb8:	bf00      	nop
 8012bba:	e002      	b.n	8012bc2 <USBH_HandleEnum+0x3f2>
      break;
 8012bbc:	bf00      	nop
 8012bbe:	e000      	b.n	8012bc2 <USBH_HandleEnum+0x3f2>
      break;
 8012bc0:	bf00      	nop
  }
  return Status;
 8012bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3710      	adds	r7, #16
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b083      	sub	sp, #12
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	683a      	ldr	r2, [r7, #0]
 8012bda:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8012bde:	bf00      	nop
 8012be0:	370c      	adds	r7, #12
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr

08012bea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b082      	sub	sp, #8
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012bf8:	1c5a      	adds	r2, r3, #1
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f000 f804 	bl	8012c0e <USBH_HandleSof>
}
 8012c06:	bf00      	nop
 8012c08:	3708      	adds	r7, #8
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b082      	sub	sp, #8
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	2b0b      	cmp	r3, #11
 8012c1e:	d10a      	bne.n	8012c36 <USBH_HandleSof+0x28>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d005      	beq.n	8012c36 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012c30:	699b      	ldr	r3, [r3, #24]
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	4798      	blx	r3
  }
}
 8012c36:	bf00      	nop
 8012c38:	3708      	adds	r7, #8
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}

08012c3e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012c3e:	b580      	push	{r7, lr}
 8012c40:	b082      	sub	sp, #8
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2201      	movs	r2, #1
 8012c4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012c4e:	2300      	movs	r3, #0
 8012c50:	2200      	movs	r2, #0
 8012c52:	2101      	movs	r1, #1
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 f85b 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012c5a:	bf00      	nop
}
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012c62:	b480      	push	{r7}
 8012c64:	b083      	sub	sp, #12
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2201      	movs	r2, #1
 8012c76:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012c7a:	bf00      	nop
}
 8012c7c:	370c      	adds	r7, #12
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c84:	4770      	bx	lr

08012c86 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012c86:	b580      	push	{r7, lr}
 8012c88:	b082      	sub	sp, #8
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2201      	movs	r2, #1
 8012c92:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	2200      	movs	r2, #0
 8012caa:	2101      	movs	r1, #1
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f000 f82f 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012cb2:	2300      	movs	r3, #0
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3708      	adds	r7, #8
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2200      	movs	r2, #0
 8012cd0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f003 fd62 	bl	80167a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	791b      	ldrb	r3, [r3, #4]
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f000 ffc5 	bl	8013c78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	795b      	ldrb	r3, [r3, #5]
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f000 ffbf 	bl	8013c78 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	2101      	movs	r1, #1
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f000 f805 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012d06:	2300      	movs	r3, #0
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b086      	sub	sp, #24
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	607a      	str	r2, [r7, #4]
 8012d1a:	603b      	str	r3, [r7, #0]
 8012d1c:	460b      	mov	r3, r1
 8012d1e:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8012d20:	7afa      	ldrb	r2, [r7, #11]
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f001 f9c8 	bl	80140c4 <osMessageWaiting>
 8012d34:	4603      	mov	r3, r0
 8012d36:	f1c3 0310 	rsb	r3, r3, #16
 8012d3a:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d009      	beq.n	8012d56 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	4619      	mov	r1, r3
 8012d52:	f001 f903 	bl	8013f5c <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012d56:	bf00      	nop
 8012d58:	3718      	adds	r7, #24
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b086      	sub	sp, #24
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8012d6c:	f107 030c 	add.w	r3, r7, #12
 8012d70:	f04f 32ff 	mov.w	r2, #4294967295
 8012d74:	4618      	mov	r0, r3
 8012d76:	f001 f931 	bl	8013fdc <osMessageGet>
    if (event.status == osEventMessage)
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b10      	cmp	r3, #16
 8012d7e:	d1f2      	bne.n	8012d66 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff fb0b 	bl	801239c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012d86:	e7ee      	b.n	8012d66 <USBH_Process_OS+0x8>

08012d88 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012d90:	2300      	movs	r3, #0
 8012d92:	2200      	movs	r2, #0
 8012d94:	2101      	movs	r1, #1
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f7ff ffba 	bl	8012d10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012d9c:	2300      	movs	r3, #0
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3708      	adds	r7, #8
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}

08012da6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012da6:	b580      	push	{r7, lr}
 8012da8:	b086      	sub	sp, #24
 8012daa:	af02      	add	r7, sp, #8
 8012dac:	6078      	str	r0, [r7, #4]
 8012dae:	460b      	mov	r3, r1
 8012db0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8012db2:	887b      	ldrh	r3, [r7, #2]
 8012db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012db8:	d901      	bls.n	8012dbe <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012dba:	2303      	movs	r3, #3
 8012dbc:	e01b      	b.n	8012df6 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8012dc4:	887b      	ldrh	r3, [r7, #2]
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	4613      	mov	r3, r2
 8012dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012dce:	2100      	movs	r1, #0
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f000 f872 	bl	8012eba <USBH_GetDescriptor>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8012dda:	7bfb      	ldrb	r3, [r7, #15]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d109      	bne.n	8012df4 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012de6:	887a      	ldrh	r2, [r7, #2]
 8012de8:	4619      	mov	r1, r3
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f000 f92a 	bl	8013044 <USBH_ParseDevDesc>
 8012df0:	4603      	mov	r3, r0
 8012df2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3710      	adds	r7, #16
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b086      	sub	sp, #24
 8012e02:	af02      	add	r7, sp, #8
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	460b      	mov	r3, r1
 8012e08:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	331c      	adds	r3, #28
 8012e0e:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8012e10:	887b      	ldrh	r3, [r7, #2]
 8012e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e16:	d901      	bls.n	8012e1c <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012e18:	2303      	movs	r3, #3
 8012e1a:	e016      	b.n	8012e4a <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8012e1c:	887b      	ldrh	r3, [r7, #2]
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e26:	2100      	movs	r1, #0
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 f846 	bl	8012eba <USBH_GetDescriptor>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8012e32:	7bfb      	ldrb	r3, [r7, #15]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d107      	bne.n	8012e48 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8012e38:	887b      	ldrh	r3, [r7, #2]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	68b9      	ldr	r1, [r7, #8]
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f000 f9b0 	bl	80131a4 <USBH_ParseCfgDesc>
 8012e44:	4603      	mov	r3, r0
 8012e46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3710      	adds	r7, #16
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}

08012e52 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b088      	sub	sp, #32
 8012e56:	af02      	add	r7, sp, #8
 8012e58:	60f8      	str	r0, [r7, #12]
 8012e5a:	607a      	str	r2, [r7, #4]
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	460b      	mov	r3, r1
 8012e60:	72fb      	strb	r3, [r7, #11]
 8012e62:	4613      	mov	r3, r2
 8012e64:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8012e66:	893b      	ldrh	r3, [r7, #8]
 8012e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e6c:	d802      	bhi.n	8012e74 <USBH_Get_StringDesc+0x22>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d101      	bne.n	8012e78 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012e74:	2303      	movs	r3, #3
 8012e76:	e01c      	b.n	8012eb2 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8012e78:	7afb      	ldrb	r3, [r7, #11]
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8012e80:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8012e88:	893b      	ldrh	r3, [r7, #8]
 8012e8a:	9300      	str	r3, [sp, #0]
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	2100      	movs	r1, #0
 8012e90:	68f8      	ldr	r0, [r7, #12]
 8012e92:	f000 f812 	bl	8012eba <USBH_GetDescriptor>
 8012e96:	4603      	mov	r3, r0
 8012e98:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8012e9a:	7dfb      	ldrb	r3, [r7, #23]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d107      	bne.n	8012eb0 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012ea6:	893a      	ldrh	r2, [r7, #8]
 8012ea8:	6879      	ldr	r1, [r7, #4]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f000 fb8d 	bl	80135ca <USBH_ParseStringDesc>
  }

  return status;
 8012eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3718      	adds	r7, #24
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}

08012eba <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8012eba:	b580      	push	{r7, lr}
 8012ebc:	b084      	sub	sp, #16
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	60f8      	str	r0, [r7, #12]
 8012ec2:	607b      	str	r3, [r7, #4]
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	72fb      	strb	r3, [r7, #11]
 8012ec8:	4613      	mov	r3, r2
 8012eca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	789b      	ldrb	r3, [r3, #2]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d11c      	bne.n	8012f0e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8012ed4:	7afb      	ldrb	r3, [r7, #11]
 8012ed6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	2206      	movs	r2, #6
 8012ee4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	893a      	ldrh	r2, [r7, #8]
 8012eea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8012eec:	893b      	ldrh	r3, [r7, #8]
 8012eee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012ef6:	d104      	bne.n	8012f02 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	f240 4209 	movw	r2, #1033	@ 0x409
 8012efe:	829a      	strh	r2, [r3, #20]
 8012f00:	e002      	b.n	8012f08 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2200      	movs	r2, #0
 8012f06:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	8b3a      	ldrh	r2, [r7, #24]
 8012f0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8012f0e:	8b3b      	ldrh	r3, [r7, #24]
 8012f10:	461a      	mov	r2, r3
 8012f12:	6879      	ldr	r1, [r7, #4]
 8012f14:	68f8      	ldr	r0, [r7, #12]
 8012f16:	f000 fba5 	bl	8013664 <USBH_CtlReq>
 8012f1a:	4603      	mov	r3, r0
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3710      	adds	r7, #16
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	789b      	ldrb	r3, [r3, #2]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d10f      	bne.n	8012f58 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2205      	movs	r2, #5
 8012f42:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8012f44:	78fb      	ldrb	r3, [r7, #3]
 8012f46:	b29a      	uxth	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2200      	movs	r2, #0
 8012f56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012f58:	2200      	movs	r2, #0
 8012f5a:	2100      	movs	r1, #0
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f000 fb81 	bl	8013664 <USBH_CtlReq>
 8012f62:	4603      	mov	r3, r0
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3708      	adds	r7, #8
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	460b      	mov	r3, r1
 8012f76:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	789b      	ldrb	r3, [r3, #2]
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d10e      	bne.n	8012f9e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2209      	movs	r2, #9
 8012f8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	887a      	ldrh	r2, [r7, #2]
 8012f90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2200      	movs	r2, #0
 8012f96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f000 fb5e 	bl	8013664 <USBH_CtlReq>
 8012fa8:	4603      	mov	r3, r0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3708      	adds	r7, #8
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}

08012fb2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8012fb2:	b580      	push	{r7, lr}
 8012fb4:	b082      	sub	sp, #8
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	6078      	str	r0, [r7, #4]
 8012fba:	460b      	mov	r3, r1
 8012fbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	789b      	ldrb	r3, [r3, #2]
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d10f      	bne.n	8012fe6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2203      	movs	r2, #3
 8012fd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8012fd2:	78fb      	ldrb	r3, [r7, #3]
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	2100      	movs	r1, #0
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f000 fb3a 	bl	8013664 <USBH_CtlReq>
 8012ff0:	4603      	mov	r3, r0
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}

08012ffa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8012ffa:	b580      	push	{r7, lr}
 8012ffc:	b082      	sub	sp, #8
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
 8013002:	460b      	mov	r3, r1
 8013004:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	789b      	ldrb	r3, [r3, #2]
 801300a:	2b01      	cmp	r3, #1
 801300c:	d10f      	bne.n	801302e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2202      	movs	r2, #2
 8013012:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2201      	movs	r2, #1
 8013018:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2200      	movs	r2, #0
 801301e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013020:	78fb      	ldrb	r3, [r7, #3]
 8013022:	b29a      	uxth	r2, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2200      	movs	r2, #0
 801302c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801302e:	2200      	movs	r2, #0
 8013030:	2100      	movs	r1, #0
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 fb16 	bl	8013664 <USBH_CtlReq>
 8013038:	4603      	mov	r3, r0
}
 801303a:	4618      	mov	r0, r3
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
	...

08013044 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8013044:	b480      	push	{r7}
 8013046:	b087      	sub	sp, #28
 8013048:	af00      	add	r7, sp, #0
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	4613      	mov	r3, r2
 8013050:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8013058:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 801305a:	2300      	movs	r3, #0
 801305c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d101      	bne.n	8013068 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8013064:	2302      	movs	r3, #2
 8013066:	e094      	b.n	8013192 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	781a      	ldrb	r2, [r3, #0]
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	785a      	ldrb	r2, [r3, #1]
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	3302      	adds	r3, #2
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	461a      	mov	r2, r3
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	3303      	adds	r3, #3
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	021b      	lsls	r3, r3, #8
 8013088:	b29b      	uxth	r3, r3
 801308a:	4313      	orrs	r3, r2
 801308c:	b29a      	uxth	r2, r3
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	791a      	ldrb	r2, [r3, #4]
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	795a      	ldrb	r2, [r3, #5]
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	799a      	ldrb	r2, [r3, #6]
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	79da      	ldrb	r2, [r3, #7]
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d004      	beq.n	80130c6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d11b      	bne.n	80130fe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	79db      	ldrb	r3, [r3, #7]
 80130ca:	2b20      	cmp	r3, #32
 80130cc:	dc0f      	bgt.n	80130ee <USBH_ParseDevDesc+0xaa>
 80130ce:	2b08      	cmp	r3, #8
 80130d0:	db0f      	blt.n	80130f2 <USBH_ParseDevDesc+0xae>
 80130d2:	3b08      	subs	r3, #8
 80130d4:	4a32      	ldr	r2, [pc, #200]	@ (80131a0 <USBH_ParseDevDesc+0x15c>)
 80130d6:	fa22 f303 	lsr.w	r3, r2, r3
 80130da:	f003 0301 	and.w	r3, r3, #1
 80130de:	2b00      	cmp	r3, #0
 80130e0:	bf14      	ite	ne
 80130e2:	2301      	movne	r3, #1
 80130e4:	2300      	moveq	r3, #0
 80130e6:	b2db      	uxtb	r3, r3
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d106      	bne.n	80130fa <USBH_ParseDevDesc+0xb6>
 80130ec:	e001      	b.n	80130f2 <USBH_ParseDevDesc+0xae>
 80130ee:	2b40      	cmp	r3, #64	@ 0x40
 80130f0:	d003      	beq.n	80130fa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	2208      	movs	r2, #8
 80130f6:	71da      	strb	r2, [r3, #7]
        break;
 80130f8:	e000      	b.n	80130fc <USBH_ParseDevDesc+0xb8>
        break;
 80130fa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80130fc:	e00e      	b.n	801311c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013104:	2b02      	cmp	r3, #2
 8013106:	d107      	bne.n	8013118 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	79db      	ldrb	r3, [r3, #7]
 801310c:	2b08      	cmp	r3, #8
 801310e:	d005      	beq.n	801311c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	2208      	movs	r2, #8
 8013114:	71da      	strb	r2, [r3, #7]
 8013116:	e001      	b.n	801311c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8013118:	2303      	movs	r3, #3
 801311a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 801311c:	88fb      	ldrh	r3, [r7, #6]
 801311e:	2b08      	cmp	r3, #8
 8013120:	d936      	bls.n	8013190 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	3308      	adds	r3, #8
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	461a      	mov	r2, r3
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	3309      	adds	r3, #9
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	021b      	lsls	r3, r3, #8
 8013132:	b29b      	uxth	r3, r3
 8013134:	4313      	orrs	r3, r2
 8013136:	b29a      	uxth	r2, r3
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	330a      	adds	r3, #10
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	461a      	mov	r2, r3
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	330b      	adds	r3, #11
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	021b      	lsls	r3, r3, #8
 801314c:	b29b      	uxth	r3, r3
 801314e:	4313      	orrs	r3, r2
 8013150:	b29a      	uxth	r2, r3
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	330c      	adds	r3, #12
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	461a      	mov	r2, r3
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	330d      	adds	r3, #13
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	021b      	lsls	r3, r3, #8
 8013166:	b29b      	uxth	r3, r3
 8013168:	4313      	orrs	r3, r2
 801316a:	b29a      	uxth	r2, r3
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	7b9a      	ldrb	r2, [r3, #14]
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	7bda      	ldrb	r2, [r3, #15]
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	7c1a      	ldrb	r2, [r3, #16]
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	7c5a      	ldrb	r2, [r3, #17]
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8013190:	7dfb      	ldrb	r3, [r7, #23]
}
 8013192:	4618      	mov	r0, r3
 8013194:	371c      	adds	r7, #28
 8013196:	46bd      	mov	sp, r7
 8013198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319c:	4770      	bx	lr
 801319e:	bf00      	nop
 80131a0:	01000101 	.word	0x01000101

080131a4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b08c      	sub	sp, #48	@ 0x30
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	4613      	mov	r3, r2
 80131b0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80131b8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80131ba:	2300      	movs	r3, #0
 80131bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80131c0:	2300      	movs	r3, #0
 80131c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80131c6:	2300      	movs	r3, #0
 80131c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d101      	bne.n	80131d6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80131d2:	2302      	movs	r3, #2
 80131d4:	e0de      	b.n	8013394 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80131da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	2b09      	cmp	r3, #9
 80131e0:	d002      	beq.n	80131e8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80131e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e4:	2209      	movs	r2, #9
 80131e6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	781a      	ldrb	r2, [r3, #0]
 80131ec:	6a3b      	ldr	r3, [r7, #32]
 80131ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	785a      	ldrb	r2, [r3, #1]
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	3302      	adds	r3, #2
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	461a      	mov	r2, r3
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	3303      	adds	r3, #3
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	021b      	lsls	r3, r3, #8
 8013208:	b29b      	uxth	r3, r3
 801320a:	4313      	orrs	r3, r2
 801320c:	b29b      	uxth	r3, r3
 801320e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013212:	bf28      	it	cs
 8013214:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8013218:	b29a      	uxth	r2, r3
 801321a:	6a3b      	ldr	r3, [r7, #32]
 801321c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	791a      	ldrb	r2, [r3, #4]
 8013222:	6a3b      	ldr	r3, [r7, #32]
 8013224:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	795a      	ldrb	r2, [r3, #5]
 801322a:	6a3b      	ldr	r3, [r7, #32]
 801322c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	799a      	ldrb	r2, [r3, #6]
 8013232:	6a3b      	ldr	r3, [r7, #32]
 8013234:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	79da      	ldrb	r2, [r3, #7]
 801323a:	6a3b      	ldr	r3, [r7, #32]
 801323c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	7a1a      	ldrb	r2, [r3, #8]
 8013242:	6a3b      	ldr	r3, [r7, #32]
 8013244:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8013246:	88fb      	ldrh	r3, [r7, #6]
 8013248:	2b09      	cmp	r3, #9
 801324a:	f240 80a1 	bls.w	8013390 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 801324e:	2309      	movs	r3, #9
 8013250:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013252:	2300      	movs	r3, #0
 8013254:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013256:	e085      	b.n	8013364 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013258:	f107 0316 	add.w	r3, r7, #22
 801325c:	4619      	mov	r1, r3
 801325e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013260:	f000 f9e6 	bl	8013630 <USBH_GetNextDesc>
 8013264:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8013266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013268:	785b      	ldrb	r3, [r3, #1]
 801326a:	2b04      	cmp	r3, #4
 801326c:	d17a      	bne.n	8013364 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801326e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	2b09      	cmp	r3, #9
 8013274:	d002      	beq.n	801327c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8013276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013278:	2209      	movs	r2, #9
 801327a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 801327c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013280:	221a      	movs	r2, #26
 8013282:	fb02 f303 	mul.w	r3, r2, r3
 8013286:	3308      	adds	r3, #8
 8013288:	6a3a      	ldr	r2, [r7, #32]
 801328a:	4413      	add	r3, r2
 801328c:	3302      	adds	r3, #2
 801328e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013292:	69f8      	ldr	r0, [r7, #28]
 8013294:	f000 f882 	bl	801339c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013298:	2300      	movs	r3, #0
 801329a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801329e:	2300      	movs	r3, #0
 80132a0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80132a2:	e043      	b.n	801332c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80132a4:	f107 0316 	add.w	r3, r7, #22
 80132a8:	4619      	mov	r1, r3
 80132aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80132ac:	f000 f9c0 	bl	8013630 <USBH_GetNextDesc>
 80132b0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80132b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132b4:	785b      	ldrb	r3, [r3, #1]
 80132b6:	2b05      	cmp	r3, #5
 80132b8:	d138      	bne.n	801332c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80132ba:	69fb      	ldr	r3, [r7, #28]
 80132bc:	795b      	ldrb	r3, [r3, #5]
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d113      	bne.n	80132ea <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80132c2:	69fb      	ldr	r3, [r7, #28]
 80132c4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80132c6:	2b02      	cmp	r3, #2
 80132c8:	d003      	beq.n	80132d2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80132ca:	69fb      	ldr	r3, [r7, #28]
 80132cc:	799b      	ldrb	r3, [r3, #6]
 80132ce:	2b03      	cmp	r3, #3
 80132d0:	d10b      	bne.n	80132ea <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	79db      	ldrb	r3, [r3, #7]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d10b      	bne.n	80132f2 <USBH_ParseCfgDesc+0x14e>
 80132da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	2b09      	cmp	r3, #9
 80132e0:	d007      	beq.n	80132f2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80132e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132e4:	2209      	movs	r2, #9
 80132e6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80132e8:	e003      	b.n	80132f2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80132ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ec:	2207      	movs	r2, #7
 80132ee:	701a      	strb	r2, [r3, #0]
 80132f0:	e000      	b.n	80132f4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80132f2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80132f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80132fc:	3201      	adds	r2, #1
 80132fe:	00d2      	lsls	r2, r2, #3
 8013300:	211a      	movs	r1, #26
 8013302:	fb01 f303 	mul.w	r3, r1, r3
 8013306:	4413      	add	r3, r2
 8013308:	3308      	adds	r3, #8
 801330a:	6a3a      	ldr	r2, [r7, #32]
 801330c:	4413      	add	r3, r2
 801330e:	3304      	adds	r3, #4
 8013310:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8013312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013314:	69b9      	ldr	r1, [r7, #24]
 8013316:	68f8      	ldr	r0, [r7, #12]
 8013318:	f000 f86f 	bl	80133fa <USBH_ParseEPDesc>
 801331c:	4603      	mov	r3, r0
 801331e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8013322:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013326:	3301      	adds	r3, #1
 8013328:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801332c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013330:	2b01      	cmp	r3, #1
 8013332:	d80a      	bhi.n	801334a <USBH_ParseCfgDesc+0x1a6>
 8013334:	69fb      	ldr	r3, [r7, #28]
 8013336:	791b      	ldrb	r3, [r3, #4]
 8013338:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801333c:	429a      	cmp	r2, r3
 801333e:	d204      	bcs.n	801334a <USBH_ParseCfgDesc+0x1a6>
 8013340:	6a3b      	ldr	r3, [r7, #32]
 8013342:	885a      	ldrh	r2, [r3, #2]
 8013344:	8afb      	ldrh	r3, [r7, #22]
 8013346:	429a      	cmp	r2, r3
 8013348:	d8ac      	bhi.n	80132a4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801334a:	69fb      	ldr	r3, [r7, #28]
 801334c:	791b      	ldrb	r3, [r3, #4]
 801334e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013352:	429a      	cmp	r2, r3
 8013354:	d201      	bcs.n	801335a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8013356:	2303      	movs	r3, #3
 8013358:	e01c      	b.n	8013394 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 801335a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801335e:	3301      	adds	r3, #1
 8013360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013368:	2b01      	cmp	r3, #1
 801336a:	d805      	bhi.n	8013378 <USBH_ParseCfgDesc+0x1d4>
 801336c:	6a3b      	ldr	r3, [r7, #32]
 801336e:	885a      	ldrh	r2, [r3, #2]
 8013370:	8afb      	ldrh	r3, [r7, #22]
 8013372:	429a      	cmp	r2, r3
 8013374:	f63f af70 	bhi.w	8013258 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8013378:	6a3b      	ldr	r3, [r7, #32]
 801337a:	791b      	ldrb	r3, [r3, #4]
 801337c:	2b02      	cmp	r3, #2
 801337e:	bf28      	it	cs
 8013380:	2302      	movcs	r3, #2
 8013382:	b2db      	uxtb	r3, r3
 8013384:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013388:	429a      	cmp	r2, r3
 801338a:	d201      	bcs.n	8013390 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 801338c:	2303      	movs	r3, #3
 801338e:	e001      	b.n	8013394 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8013390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013394:	4618      	mov	r0, r3
 8013396:	3730      	adds	r7, #48	@ 0x30
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	781a      	ldrb	r2, [r3, #0]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	785a      	ldrb	r2, [r3, #1]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	789a      	ldrb	r2, [r3, #2]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	78da      	ldrb	r2, [r3, #3]
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	791a      	ldrb	r2, [r3, #4]
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	795a      	ldrb	r2, [r3, #5]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	799a      	ldrb	r2, [r3, #6]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	79da      	ldrb	r2, [r3, #7]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	7a1a      	ldrb	r2, [r3, #8]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	721a      	strb	r2, [r3, #8]
}
 80133ee:	bf00      	nop
 80133f0:	370c      	adds	r7, #12
 80133f2:	46bd      	mov	sp, r7
 80133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f8:	4770      	bx	lr

080133fa <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80133fa:	b480      	push	{r7}
 80133fc:	b087      	sub	sp, #28
 80133fe:	af00      	add	r7, sp, #0
 8013400:	60f8      	str	r0, [r7, #12]
 8013402:	60b9      	str	r1, [r7, #8]
 8013404:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8013406:	2300      	movs	r3, #0
 8013408:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	781a      	ldrb	r2, [r3, #0]
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	785a      	ldrb	r2, [r3, #1]
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	789a      	ldrb	r2, [r3, #2]
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	78da      	ldrb	r2, [r3, #3]
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	3304      	adds	r3, #4
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	461a      	mov	r2, r3
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	3305      	adds	r3, #5
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	021b      	lsls	r3, r3, #8
 801343a:	b29b      	uxth	r3, r3
 801343c:	4313      	orrs	r3, r2
 801343e:	b29a      	uxth	r2, r3
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	799a      	ldrb	r2, [r3, #6]
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	889b      	ldrh	r3, [r3, #4]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d009      	beq.n	8013468 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8013458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801345c:	d804      	bhi.n	8013468 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013466:	d901      	bls.n	801346c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8013468:	2303      	movs	r3, #3
 801346a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013472:	2b00      	cmp	r3, #0
 8013474:	d136      	bne.n	80134e4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	78db      	ldrb	r3, [r3, #3]
 801347a:	f003 0303 	and.w	r3, r3, #3
 801347e:	2b02      	cmp	r3, #2
 8013480:	d108      	bne.n	8013494 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	889b      	ldrh	r3, [r3, #4]
 8013486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801348a:	f240 8097 	bls.w	80135bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801348e:	2303      	movs	r3, #3
 8013490:	75fb      	strb	r3, [r7, #23]
 8013492:	e093      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	78db      	ldrb	r3, [r3, #3]
 8013498:	f003 0303 	and.w	r3, r3, #3
 801349c:	2b00      	cmp	r3, #0
 801349e:	d107      	bne.n	80134b0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	889b      	ldrh	r3, [r3, #4]
 80134a4:	2b40      	cmp	r3, #64	@ 0x40
 80134a6:	f240 8089 	bls.w	80135bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80134aa:	2303      	movs	r3, #3
 80134ac:	75fb      	strb	r3, [r7, #23]
 80134ae:	e085      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	78db      	ldrb	r3, [r3, #3]
 80134b4:	f003 0303 	and.w	r3, r3, #3
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d005      	beq.n	80134c8 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	78db      	ldrb	r3, [r3, #3]
 80134c0:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80134c4:	2b03      	cmp	r3, #3
 80134c6:	d10a      	bne.n	80134de <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	799b      	ldrb	r3, [r3, #6]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d003      	beq.n	80134d8 <USBH_ParseEPDesc+0xde>
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	799b      	ldrb	r3, [r3, #6]
 80134d4:	2b10      	cmp	r3, #16
 80134d6:	d970      	bls.n	80135ba <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80134d8:	2303      	movs	r3, #3
 80134da:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80134dc:	e06d      	b.n	80135ba <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80134de:	2303      	movs	r3, #3
 80134e0:	75fb      	strb	r3, [r7, #23]
 80134e2:	e06b      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80134ea:	2b01      	cmp	r3, #1
 80134ec:	d13c      	bne.n	8013568 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	78db      	ldrb	r3, [r3, #3]
 80134f2:	f003 0303 	and.w	r3, r3, #3
 80134f6:	2b02      	cmp	r3, #2
 80134f8:	d005      	beq.n	8013506 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	78db      	ldrb	r3, [r3, #3]
 80134fe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8013502:	2b00      	cmp	r3, #0
 8013504:	d106      	bne.n	8013514 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	889b      	ldrh	r3, [r3, #4]
 801350a:	2b40      	cmp	r3, #64	@ 0x40
 801350c:	d956      	bls.n	80135bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801350e:	2303      	movs	r3, #3
 8013510:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013512:	e053      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	78db      	ldrb	r3, [r3, #3]
 8013518:	f003 0303 	and.w	r3, r3, #3
 801351c:	2b01      	cmp	r3, #1
 801351e:	d10e      	bne.n	801353e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	799b      	ldrb	r3, [r3, #6]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d007      	beq.n	8013538 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801352c:	2b10      	cmp	r3, #16
 801352e:	d803      	bhi.n	8013538 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8013534:	2b40      	cmp	r3, #64	@ 0x40
 8013536:	d941      	bls.n	80135bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013538:	2303      	movs	r3, #3
 801353a:	75fb      	strb	r3, [r7, #23]
 801353c:	e03e      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	78db      	ldrb	r3, [r3, #3]
 8013542:	f003 0303 	and.w	r3, r3, #3
 8013546:	2b03      	cmp	r3, #3
 8013548:	d10b      	bne.n	8013562 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	799b      	ldrb	r3, [r3, #6]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d004      	beq.n	801355c <USBH_ParseEPDesc+0x162>
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	889b      	ldrh	r3, [r3, #4]
 8013556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801355a:	d32f      	bcc.n	80135bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801355c:	2303      	movs	r3, #3
 801355e:	75fb      	strb	r3, [r7, #23]
 8013560:	e02c      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013562:	2303      	movs	r3, #3
 8013564:	75fb      	strb	r3, [r7, #23]
 8013566:	e029      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801356e:	2b02      	cmp	r3, #2
 8013570:	d120      	bne.n	80135b4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	78db      	ldrb	r3, [r3, #3]
 8013576:	f003 0303 	and.w	r3, r3, #3
 801357a:	2b00      	cmp	r3, #0
 801357c:	d106      	bne.n	801358c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	889b      	ldrh	r3, [r3, #4]
 8013582:	2b08      	cmp	r3, #8
 8013584:	d01a      	beq.n	80135bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013586:	2303      	movs	r3, #3
 8013588:	75fb      	strb	r3, [r7, #23]
 801358a:	e017      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	78db      	ldrb	r3, [r3, #3]
 8013590:	f003 0303 	and.w	r3, r3, #3
 8013594:	2b03      	cmp	r3, #3
 8013596:	d10a      	bne.n	80135ae <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	799b      	ldrb	r3, [r3, #6]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d003      	beq.n	80135a8 <USBH_ParseEPDesc+0x1ae>
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	889b      	ldrh	r3, [r3, #4]
 80135a4:	2b08      	cmp	r3, #8
 80135a6:	d909      	bls.n	80135bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80135a8:	2303      	movs	r3, #3
 80135aa:	75fb      	strb	r3, [r7, #23]
 80135ac:	e006      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80135ae:	2303      	movs	r3, #3
 80135b0:	75fb      	strb	r3, [r7, #23]
 80135b2:	e003      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80135b4:	2303      	movs	r3, #3
 80135b6:	75fb      	strb	r3, [r7, #23]
 80135b8:	e000      	b.n	80135bc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80135ba:	bf00      	nop
  }

  return status;
 80135bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80135be:	4618      	mov	r0, r3
 80135c0:	371c      	adds	r7, #28
 80135c2:	46bd      	mov	sp, r7
 80135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c8:	4770      	bx	lr

080135ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80135ca:	b480      	push	{r7}
 80135cc:	b087      	sub	sp, #28
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	60f8      	str	r0, [r7, #12]
 80135d2:	60b9      	str	r1, [r7, #8]
 80135d4:	4613      	mov	r3, r2
 80135d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	3301      	adds	r3, #1
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	2b03      	cmp	r3, #3
 80135e0:	d120      	bne.n	8013624 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	1e9a      	subs	r2, r3, #2
 80135e8:	88fb      	ldrh	r3, [r7, #6]
 80135ea:	4293      	cmp	r3, r2
 80135ec:	bf28      	it	cs
 80135ee:	4613      	movcs	r3, r2
 80135f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	3302      	adds	r3, #2
 80135f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80135f8:	2300      	movs	r3, #0
 80135fa:	82fb      	strh	r3, [r7, #22]
 80135fc:	e00b      	b.n	8013616 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80135fe:	8afb      	ldrh	r3, [r7, #22]
 8013600:	68fa      	ldr	r2, [r7, #12]
 8013602:	4413      	add	r3, r2
 8013604:	781a      	ldrb	r2, [r3, #0]
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	701a      	strb	r2, [r3, #0]
      pdest++;
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	3301      	adds	r3, #1
 801360e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013610:	8afb      	ldrh	r3, [r7, #22]
 8013612:	3302      	adds	r3, #2
 8013614:	82fb      	strh	r3, [r7, #22]
 8013616:	8afa      	ldrh	r2, [r7, #22]
 8013618:	8abb      	ldrh	r3, [r7, #20]
 801361a:	429a      	cmp	r2, r3
 801361c:	d3ef      	bcc.n	80135fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	2200      	movs	r2, #0
 8013622:	701a      	strb	r2, [r3, #0]
  }
}
 8013624:	bf00      	nop
 8013626:	371c      	adds	r7, #28
 8013628:	46bd      	mov	sp, r7
 801362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362e:	4770      	bx	lr

08013630 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013630:	b480      	push	{r7}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	881b      	ldrh	r3, [r3, #0]
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	7812      	ldrb	r2, [r2, #0]
 8013642:	4413      	add	r3, r2
 8013644:	b29a      	uxth	r2, r3
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4413      	add	r3, r2
 8013654:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013656:	68fb      	ldr	r3, [r7, #12]
}
 8013658:	4618      	mov	r0, r3
 801365a:	3714      	adds	r7, #20
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b086      	sub	sp, #24
 8013668:	af00      	add	r7, sp, #0
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	4613      	mov	r3, r2
 8013670:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013672:	2301      	movs	r3, #1
 8013674:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	789b      	ldrb	r3, [r3, #2]
 801367a:	2b01      	cmp	r3, #1
 801367c:	d002      	beq.n	8013684 <USBH_CtlReq+0x20>
 801367e:	2b02      	cmp	r3, #2
 8013680:	d015      	beq.n	80136ae <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8013682:	e033      	b.n	80136ec <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	68ba      	ldr	r2, [r7, #8]
 8013688:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	88fa      	ldrh	r2, [r7, #6]
 801368e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2201      	movs	r2, #1
 8013694:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2202      	movs	r2, #2
 801369a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801369c:	2301      	movs	r3, #1
 801369e:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80136a0:	2300      	movs	r3, #0
 80136a2:	2200      	movs	r2, #0
 80136a4:	2103      	movs	r1, #3
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f7ff fb32 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 80136ac:	e01e      	b.n	80136ec <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 80136ae:	68f8      	ldr	r0, [r7, #12]
 80136b0:	f000 f822 	bl	80136f8 <USBH_HandleControl>
 80136b4:	4603      	mov	r3, r0
 80136b6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80136b8:	7dfb      	ldrb	r3, [r7, #23]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d002      	beq.n	80136c4 <USBH_CtlReq+0x60>
 80136be:	7dfb      	ldrb	r3, [r7, #23]
 80136c0:	2b03      	cmp	r3, #3
 80136c2:	d106      	bne.n	80136d2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	2201      	movs	r2, #1
 80136c8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	2200      	movs	r2, #0
 80136ce:	761a      	strb	r2, [r3, #24]
 80136d0:	e005      	b.n	80136de <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 80136d2:	7dfb      	ldrb	r3, [r7, #23]
 80136d4:	2b02      	cmp	r3, #2
 80136d6:	d102      	bne.n	80136de <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	2201      	movs	r2, #1
 80136dc:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80136de:	2300      	movs	r3, #0
 80136e0:	2200      	movs	r2, #0
 80136e2:	2103      	movs	r1, #3
 80136e4:	68f8      	ldr	r0, [r7, #12]
 80136e6:	f7ff fb13 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 80136ea:	bf00      	nop
  }
  return status;
 80136ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3718      	adds	r7, #24
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
	...

080136f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b086      	sub	sp, #24
 80136fc:	af02      	add	r7, sp, #8
 80136fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013700:	2301      	movs	r3, #1
 8013702:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013704:	2300      	movs	r3, #0
 8013706:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	7e1b      	ldrb	r3, [r3, #24]
 801370c:	3b01      	subs	r3, #1
 801370e:	2b0a      	cmp	r3, #10
 8013710:	f200 81b2 	bhi.w	8013a78 <USBH_HandleControl+0x380>
 8013714:	a201      	add	r2, pc, #4	@ (adr r2, 801371c <USBH_HandleControl+0x24>)
 8013716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801371a:	bf00      	nop
 801371c:	08013749 	.word	0x08013749
 8013720:	08013763 	.word	0x08013763
 8013724:	080137e5 	.word	0x080137e5
 8013728:	0801380b 	.word	0x0801380b
 801372c:	08013869 	.word	0x08013869
 8013730:	08013893 	.word	0x08013893
 8013734:	08013915 	.word	0x08013915
 8013738:	08013937 	.word	0x08013937
 801373c:	08013999 	.word	0x08013999
 8013740:	080139bf 	.word	0x080139bf
 8013744:	08013a21 	.word	0x08013a21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f103 0110 	add.w	r1, r3, #16
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	795b      	ldrb	r3, [r3, #5]
 8013752:	461a      	mov	r2, r3
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f000 f99f 	bl	8013a98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2202      	movs	r2, #2
 801375e:	761a      	strb	r2, [r3, #24]
      break;
 8013760:	e195      	b.n	8013a8e <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	795b      	ldrb	r3, [r3, #5]
 8013766:	4619      	mov	r1, r3
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f003 f90b 	bl	8016984 <USBH_LL_GetURBState>
 801376e:	4603      	mov	r3, r0
 8013770:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013772:	7bbb      	ldrb	r3, [r7, #14]
 8013774:	2b01      	cmp	r3, #1
 8013776:	d124      	bne.n	80137c2 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	7c1b      	ldrb	r3, [r3, #16]
 801377c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013780:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	8adb      	ldrh	r3, [r3, #22]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d00a      	beq.n	80137a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801378a:	7b7b      	ldrb	r3, [r7, #13]
 801378c:	2b80      	cmp	r3, #128	@ 0x80
 801378e:	d103      	bne.n	8013798 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2203      	movs	r2, #3
 8013794:	761a      	strb	r2, [r3, #24]
 8013796:	e00d      	b.n	80137b4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2205      	movs	r2, #5
 801379c:	761a      	strb	r2, [r3, #24]
 801379e:	e009      	b.n	80137b4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80137a0:	7b7b      	ldrb	r3, [r7, #13]
 80137a2:	2b80      	cmp	r3, #128	@ 0x80
 80137a4:	d103      	bne.n	80137ae <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2209      	movs	r2, #9
 80137aa:	761a      	strb	r2, [r3, #24]
 80137ac:	e002      	b.n	80137b4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2207      	movs	r2, #7
 80137b2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80137b4:	2300      	movs	r3, #0
 80137b6:	2200      	movs	r2, #0
 80137b8:	2103      	movs	r1, #3
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f7ff faa8 	bl	8012d10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80137c0:	e15c      	b.n	8013a7c <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80137c2:	7bbb      	ldrb	r3, [r7, #14]
 80137c4:	2b04      	cmp	r3, #4
 80137c6:	d003      	beq.n	80137d0 <USBH_HandleControl+0xd8>
 80137c8:	7bbb      	ldrb	r3, [r7, #14]
 80137ca:	2b02      	cmp	r3, #2
 80137cc:	f040 8156 	bne.w	8013a7c <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	220b      	movs	r2, #11
 80137d4:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80137d6:	2300      	movs	r3, #0
 80137d8:	2200      	movs	r2, #0
 80137da:	2103      	movs	r1, #3
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f7ff fa97 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 80137e2:	e14b      	b.n	8013a7c <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6899      	ldr	r1, [r3, #8]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	899a      	ldrh	r2, [r3, #12]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	791b      	ldrb	r3, [r3, #4]
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f000 f98a 	bl	8013b16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2204      	movs	r2, #4
 8013806:	761a      	strb	r2, [r3, #24]
      break;
 8013808:	e141      	b.n	8013a8e <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	791b      	ldrb	r3, [r3, #4]
 801380e:	4619      	mov	r1, r3
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f003 f8b7 	bl	8016984 <USBH_LL_GetURBState>
 8013816:	4603      	mov	r3, r0
 8013818:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801381a:	7bbb      	ldrb	r3, [r7, #14]
 801381c:	2b01      	cmp	r3, #1
 801381e:	d109      	bne.n	8013834 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2209      	movs	r2, #9
 8013824:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013826:	2300      	movs	r3, #0
 8013828:	2200      	movs	r2, #0
 801382a:	2103      	movs	r1, #3
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f7ff fa6f 	bl	8012d10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013832:	e125      	b.n	8013a80 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8013834:	7bbb      	ldrb	r3, [r7, #14]
 8013836:	2b05      	cmp	r3, #5
 8013838:	d108      	bne.n	801384c <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 801383a:	2303      	movs	r3, #3
 801383c:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801383e:	2300      	movs	r3, #0
 8013840:	2200      	movs	r2, #0
 8013842:	2103      	movs	r1, #3
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f7ff fa63 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 801384a:	e119      	b.n	8013a80 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 801384c:	7bbb      	ldrb	r3, [r7, #14]
 801384e:	2b04      	cmp	r3, #4
 8013850:	f040 8116 	bne.w	8013a80 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	220b      	movs	r2, #11
 8013858:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801385a:	2300      	movs	r3, #0
 801385c:	2200      	movs	r2, #0
 801385e:	2103      	movs	r1, #3
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f7ff fa55 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8013866:	e10b      	b.n	8013a80 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6899      	ldr	r1, [r3, #8]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	899a      	ldrh	r2, [r3, #12]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	795b      	ldrb	r3, [r3, #5]
 8013874:	2001      	movs	r0, #1
 8013876:	9000      	str	r0, [sp, #0]
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f000 f927 	bl	8013acc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013884:	b29a      	uxth	r2, r3
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2206      	movs	r2, #6
 801388e:	761a      	strb	r2, [r3, #24]
      break;
 8013890:	e0fd      	b.n	8013a8e <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	795b      	ldrb	r3, [r3, #5]
 8013896:	4619      	mov	r1, r3
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f003 f873 	bl	8016984 <USBH_LL_GetURBState>
 801389e:	4603      	mov	r3, r0
 80138a0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80138a2:	7bbb      	ldrb	r3, [r7, #14]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d109      	bne.n	80138bc <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2207      	movs	r2, #7
 80138ac:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80138ae:	2300      	movs	r3, #0
 80138b0:	2200      	movs	r2, #0
 80138b2:	2103      	movs	r1, #3
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f7ff fa2b 	bl	8012d10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80138ba:	e0e3      	b.n	8013a84 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 80138bc:	7bbb      	ldrb	r3, [r7, #14]
 80138be:	2b05      	cmp	r3, #5
 80138c0:	d10b      	bne.n	80138da <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	220c      	movs	r2, #12
 80138c6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80138c8:	2303      	movs	r3, #3
 80138ca:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80138cc:	2300      	movs	r3, #0
 80138ce:	2200      	movs	r2, #0
 80138d0:	2103      	movs	r1, #3
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f7ff fa1c 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 80138d8:	e0d4      	b.n	8013a84 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 80138da:	7bbb      	ldrb	r3, [r7, #14]
 80138dc:	2b02      	cmp	r3, #2
 80138de:	d109      	bne.n	80138f4 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2205      	movs	r2, #5
 80138e4:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80138e6:	2300      	movs	r3, #0
 80138e8:	2200      	movs	r2, #0
 80138ea:	2103      	movs	r1, #3
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f7ff fa0f 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 80138f2:	e0c7      	b.n	8013a84 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 80138f4:	7bbb      	ldrb	r3, [r7, #14]
 80138f6:	2b04      	cmp	r3, #4
 80138f8:	f040 80c4 	bne.w	8013a84 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	220b      	movs	r2, #11
 8013900:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013902:	2302      	movs	r3, #2
 8013904:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013906:	2300      	movs	r3, #0
 8013908:	2200      	movs	r2, #0
 801390a:	2103      	movs	r1, #3
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f7ff f9ff 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8013912:	e0b7      	b.n	8013a84 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	791b      	ldrb	r3, [r3, #4]
 8013918:	2200      	movs	r2, #0
 801391a:	2100      	movs	r1, #0
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f000 f8fa 	bl	8013b16 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013928:	b29a      	uxth	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2208      	movs	r2, #8
 8013932:	761a      	strb	r2, [r3, #24]

      break;
 8013934:	e0ab      	b.n	8013a8e <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	791b      	ldrb	r3, [r3, #4]
 801393a:	4619      	mov	r1, r3
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f003 f821 	bl	8016984 <USBH_LL_GetURBState>
 8013942:	4603      	mov	r3, r0
 8013944:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013946:	7bbb      	ldrb	r3, [r7, #14]
 8013948:	2b01      	cmp	r3, #1
 801394a:	d10b      	bne.n	8013964 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	220d      	movs	r2, #13
 8013950:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8013952:	2300      	movs	r3, #0
 8013954:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013956:	2300      	movs	r3, #0
 8013958:	2200      	movs	r2, #0
 801395a:	2103      	movs	r1, #3
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7ff f9d7 	bl	8012d10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013962:	e091      	b.n	8013a88 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 8013964:	7bbb      	ldrb	r3, [r7, #14]
 8013966:	2b04      	cmp	r3, #4
 8013968:	d109      	bne.n	801397e <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	220b      	movs	r2, #11
 801396e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013970:	2300      	movs	r3, #0
 8013972:	2200      	movs	r2, #0
 8013974:	2103      	movs	r1, #3
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f7ff f9ca 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 801397c:	e084      	b.n	8013a88 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 801397e:	7bbb      	ldrb	r3, [r7, #14]
 8013980:	2b05      	cmp	r3, #5
 8013982:	f040 8081 	bne.w	8013a88 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 8013986:	2303      	movs	r3, #3
 8013988:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801398a:	2300      	movs	r3, #0
 801398c:	2200      	movs	r2, #0
 801398e:	2103      	movs	r1, #3
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f7ff f9bd 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8013996:	e077      	b.n	8013a88 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	795b      	ldrb	r3, [r3, #5]
 801399c:	2201      	movs	r2, #1
 801399e:	9200      	str	r2, [sp, #0]
 80139a0:	2200      	movs	r2, #0
 80139a2:	2100      	movs	r1, #0
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f000 f891 	bl	8013acc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80139b0:	b29a      	uxth	r2, r3
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	220a      	movs	r2, #10
 80139ba:	761a      	strb	r2, [r3, #24]
      break;
 80139bc:	e067      	b.n	8013a8e <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	795b      	ldrb	r3, [r3, #5]
 80139c2:	4619      	mov	r1, r3
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f002 ffdd 	bl	8016984 <USBH_LL_GetURBState>
 80139ca:	4603      	mov	r3, r0
 80139cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80139ce:	7bbb      	ldrb	r3, [r7, #14]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d10b      	bne.n	80139ec <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 80139d4:	2300      	movs	r3, #0
 80139d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	220d      	movs	r2, #13
 80139dc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139de:	2300      	movs	r3, #0
 80139e0:	2200      	movs	r2, #0
 80139e2:	2103      	movs	r1, #3
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f7ff f993 	bl	8012d10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80139ea:	e04f      	b.n	8013a8c <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 80139ec:	7bbb      	ldrb	r3, [r7, #14]
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	d109      	bne.n	8013a06 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2209      	movs	r2, #9
 80139f6:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139f8:	2300      	movs	r3, #0
 80139fa:	2200      	movs	r2, #0
 80139fc:	2103      	movs	r1, #3
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f7ff f986 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8013a04:	e042      	b.n	8013a8c <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8013a06:	7bbb      	ldrb	r3, [r7, #14]
 8013a08:	2b04      	cmp	r3, #4
 8013a0a:	d13f      	bne.n	8013a8c <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	220b      	movs	r2, #11
 8013a10:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a12:	2300      	movs	r3, #0
 8013a14:	2200      	movs	r2, #0
 8013a16:	2103      	movs	r1, #3
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7ff f979 	bl	8012d10 <USBH_OS_PutMessage>
      break;
 8013a1e:	e035      	b.n	8013a8c <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	7e5b      	ldrb	r3, [r3, #25]
 8013a24:	3301      	adds	r3, #1
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	765a      	strb	r2, [r3, #25]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	7e5b      	ldrb	r3, [r3, #25]
 8013a30:	2b02      	cmp	r3, #2
 8013a32:	d806      	bhi.n	8013a42 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2201      	movs	r2, #1
 8013a38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2201      	movs	r2, #1
 8013a3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8013a40:	e025      	b.n	8013a8e <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013a48:	2106      	movs	r1, #6
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2200      	movs	r2, #0
 8013a52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	795b      	ldrb	r3, [r3, #5]
 8013a58:	4619      	mov	r1, r3
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f000 f90c 	bl	8013c78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	791b      	ldrb	r3, [r3, #4]
 8013a64:	4619      	mov	r1, r3
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 f906 	bl	8013c78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8013a72:	2302      	movs	r3, #2
 8013a74:	73fb      	strb	r3, [r7, #15]
      break;
 8013a76:	e00a      	b.n	8013a8e <USBH_HandleControl+0x396>

    default:
      break;
 8013a78:	bf00      	nop
 8013a7a:	e008      	b.n	8013a8e <USBH_HandleControl+0x396>
      break;
 8013a7c:	bf00      	nop
 8013a7e:	e006      	b.n	8013a8e <USBH_HandleControl+0x396>
      break;
 8013a80:	bf00      	nop
 8013a82:	e004      	b.n	8013a8e <USBH_HandleControl+0x396>
      break;
 8013a84:	bf00      	nop
 8013a86:	e002      	b.n	8013a8e <USBH_HandleControl+0x396>
      break;
 8013a88:	bf00      	nop
 8013a8a:	e000      	b.n	8013a8e <USBH_HandleControl+0x396>
      break;
 8013a8c:	bf00      	nop
  }

  return status;
 8013a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3710      	adds	r7, #16
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b088      	sub	sp, #32
 8013a9c:	af04      	add	r7, sp, #16
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	4613      	mov	r3, r2
 8013aa4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013aa6:	79f9      	ldrb	r1, [r7, #7]
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	9303      	str	r3, [sp, #12]
 8013aac:	2308      	movs	r3, #8
 8013aae:	9302      	str	r3, [sp, #8]
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	9301      	str	r3, [sp, #4]
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	2300      	movs	r3, #0
 8013aba:	2200      	movs	r2, #0
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f002 ff30 	bl	8016922 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8013ac2:	2300      	movs	r3, #0
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3710      	adds	r7, #16
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b088      	sub	sp, #32
 8013ad0:	af04      	add	r7, sp, #16
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	4611      	mov	r1, r2
 8013ad8:	461a      	mov	r2, r3
 8013ada:	460b      	mov	r3, r1
 8013adc:	80fb      	strh	r3, [r7, #6]
 8013ade:	4613      	mov	r3, r2
 8013ae0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d001      	beq.n	8013af0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8013aec:	2300      	movs	r3, #0
 8013aee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013af0:	7979      	ldrb	r1, [r7, #5]
 8013af2:	7e3b      	ldrb	r3, [r7, #24]
 8013af4:	9303      	str	r3, [sp, #12]
 8013af6:	88fb      	ldrh	r3, [r7, #6]
 8013af8:	9302      	str	r3, [sp, #8]
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	9301      	str	r3, [sp, #4]
 8013afe:	2301      	movs	r3, #1
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	2300      	movs	r3, #0
 8013b04:	2200      	movs	r2, #0
 8013b06:	68f8      	ldr	r0, [r7, #12]
 8013b08:	f002 ff0b 	bl	8016922 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013b0c:	2300      	movs	r3, #0
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3710      	adds	r7, #16
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b088      	sub	sp, #32
 8013b1a:	af04      	add	r7, sp, #16
 8013b1c:	60f8      	str	r0, [r7, #12]
 8013b1e:	60b9      	str	r1, [r7, #8]
 8013b20:	4611      	mov	r1, r2
 8013b22:	461a      	mov	r2, r3
 8013b24:	460b      	mov	r3, r1
 8013b26:	80fb      	strh	r3, [r7, #6]
 8013b28:	4613      	mov	r3, r2
 8013b2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013b2c:	7979      	ldrb	r1, [r7, #5]
 8013b2e:	2300      	movs	r3, #0
 8013b30:	9303      	str	r3, [sp, #12]
 8013b32:	88fb      	ldrh	r3, [r7, #6]
 8013b34:	9302      	str	r3, [sp, #8]
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	9301      	str	r3, [sp, #4]
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	9300      	str	r3, [sp, #0]
 8013b3e:	2300      	movs	r3, #0
 8013b40:	2201      	movs	r2, #1
 8013b42:	68f8      	ldr	r0, [r7, #12]
 8013b44:	f002 feed 	bl	8016922 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013b48:	2300      	movs	r3, #0

}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3710      	adds	r7, #16
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b088      	sub	sp, #32
 8013b56:	af04      	add	r7, sp, #16
 8013b58:	60f8      	str	r0, [r7, #12]
 8013b5a:	60b9      	str	r1, [r7, #8]
 8013b5c:	4611      	mov	r1, r2
 8013b5e:	461a      	mov	r2, r3
 8013b60:	460b      	mov	r3, r1
 8013b62:	80fb      	strh	r3, [r7, #6]
 8013b64:	4613      	mov	r3, r2
 8013b66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d001      	beq.n	8013b76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013b72:	2300      	movs	r3, #0
 8013b74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013b76:	7979      	ldrb	r1, [r7, #5]
 8013b78:	7e3b      	ldrb	r3, [r7, #24]
 8013b7a:	9303      	str	r3, [sp, #12]
 8013b7c:	88fb      	ldrh	r3, [r7, #6]
 8013b7e:	9302      	str	r3, [sp, #8]
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	9301      	str	r3, [sp, #4]
 8013b84:	2301      	movs	r3, #1
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	2302      	movs	r3, #2
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f002 fec8 	bl	8016922 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8013b92:	2300      	movs	r3, #0
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3710      	adds	r7, #16
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b088      	sub	sp, #32
 8013ba0:	af04      	add	r7, sp, #16
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	4611      	mov	r1, r2
 8013ba8:	461a      	mov	r2, r3
 8013baa:	460b      	mov	r3, r1
 8013bac:	80fb      	strh	r3, [r7, #6]
 8013bae:	4613      	mov	r3, r2
 8013bb0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013bb2:	7979      	ldrb	r1, [r7, #5]
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	9303      	str	r3, [sp, #12]
 8013bb8:	88fb      	ldrh	r3, [r7, #6]
 8013bba:	9302      	str	r3, [sp, #8]
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	9301      	str	r3, [sp, #4]
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	9300      	str	r3, [sp, #0]
 8013bc4:	2302      	movs	r3, #2
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	f002 feaa 	bl	8016922 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013bce:	2300      	movs	r3, #0
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3710      	adds	r7, #16
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b086      	sub	sp, #24
 8013bdc:	af04      	add	r7, sp, #16
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	4608      	mov	r0, r1
 8013be2:	4611      	mov	r1, r2
 8013be4:	461a      	mov	r2, r3
 8013be6:	4603      	mov	r3, r0
 8013be8:	70fb      	strb	r3, [r7, #3]
 8013bea:	460b      	mov	r3, r1
 8013bec:	70bb      	strb	r3, [r7, #2]
 8013bee:	4613      	mov	r3, r2
 8013bf0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8013bf2:	7878      	ldrb	r0, [r7, #1]
 8013bf4:	78ba      	ldrb	r2, [r7, #2]
 8013bf6:	78f9      	ldrb	r1, [r7, #3]
 8013bf8:	8b3b      	ldrh	r3, [r7, #24]
 8013bfa:	9302      	str	r3, [sp, #8]
 8013bfc:	7d3b      	ldrb	r3, [r7, #20]
 8013bfe:	9301      	str	r3, [sp, #4]
 8013c00:	7c3b      	ldrb	r3, [r7, #16]
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	4603      	mov	r3, r0
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f002 fe3d 	bl	8016886 <USBH_LL_OpenPipe>

  return USBH_OK;
 8013c0c:	2300      	movs	r3, #0
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3708      	adds	r7, #8
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}

08013c16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b082      	sub	sp, #8
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
 8013c1e:	460b      	mov	r3, r1
 8013c20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8013c22:	78fb      	ldrb	r3, [r7, #3]
 8013c24:	4619      	mov	r1, r3
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f002 fe5c 	bl	80168e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8013c2c:	2300      	movs	r3, #0
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3708      	adds	r7, #8
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}

08013c36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8013c36:	b580      	push	{r7, lr}
 8013c38:	b084      	sub	sp, #16
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	460b      	mov	r3, r1
 8013c40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f000 f836 	bl	8013cb4 <USBH_GetFreePipe>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8013c4c:	89fb      	ldrh	r3, [r7, #14]
 8013c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c52:	4293      	cmp	r3, r2
 8013c54:	d00a      	beq.n	8013c6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8013c56:	78fa      	ldrb	r2, [r7, #3]
 8013c58:	89fb      	ldrh	r3, [r7, #14]
 8013c5a:	f003 030f 	and.w	r3, r3, #15
 8013c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013c62:	6879      	ldr	r1, [r7, #4]
 8013c64:	33e0      	adds	r3, #224	@ 0xe0
 8013c66:	009b      	lsls	r3, r3, #2
 8013c68:	440b      	add	r3, r1
 8013c6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013c6c:	89fb      	ldrh	r3, [r7, #14]
 8013c6e:	b2db      	uxtb	r3, r3
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3710      	adds	r7, #16
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	460b      	mov	r3, r1
 8013c82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8013c84:	78fb      	ldrb	r3, [r7, #3]
 8013c86:	2b0f      	cmp	r3, #15
 8013c88:	d80d      	bhi.n	8013ca6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8013c8a:	78fb      	ldrb	r3, [r7, #3]
 8013c8c:	687a      	ldr	r2, [r7, #4]
 8013c8e:	33e0      	adds	r3, #224	@ 0xe0
 8013c90:	009b      	lsls	r3, r3, #2
 8013c92:	4413      	add	r3, r2
 8013c94:	685a      	ldr	r2, [r3, #4]
 8013c96:	78fb      	ldrb	r3, [r7, #3]
 8013c98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013c9c:	6879      	ldr	r1, [r7, #4]
 8013c9e:	33e0      	adds	r3, #224	@ 0xe0
 8013ca0:	009b      	lsls	r3, r3, #2
 8013ca2:	440b      	add	r3, r1
 8013ca4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8013ca6:	2300      	movs	r3, #0
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	370c      	adds	r7, #12
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr

08013cb4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b085      	sub	sp, #20
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	73fb      	strb	r3, [r7, #15]
 8013cc4:	e00f      	b.n	8013ce6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8013cc6:	7bfb      	ldrb	r3, [r7, #15]
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	33e0      	adds	r3, #224	@ 0xe0
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	4413      	add	r3, r2
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d102      	bne.n	8013ce0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8013cda:	7bfb      	ldrb	r3, [r7, #15]
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	e007      	b.n	8013cf0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013ce0:	7bfb      	ldrb	r3, [r7, #15]
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	73fb      	strb	r3, [r7, #15]
 8013ce6:	7bfb      	ldrb	r3, [r7, #15]
 8013ce8:	2b0f      	cmp	r3, #15
 8013cea:	d9ec      	bls.n	8013cc6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8013cec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3714      	adds	r7, #20
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfa:	4770      	bx	lr

08013cfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013cfc:	b480      	push	{r7}
 8013cfe:	b087      	sub	sp, #28
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	4613      	mov	r3, r2
 8013d08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013d12:	4b1f      	ldr	r3, [pc, #124]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d14:	7a5b      	ldrb	r3, [r3, #9]
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d131      	bne.n	8013d80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d1e:	7a5b      	ldrb	r3, [r3, #9]
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	461a      	mov	r2, r3
 8013d24:	4b1a      	ldr	r3, [pc, #104]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d26:	2100      	movs	r1, #0
 8013d28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013d2a:	4b19      	ldr	r3, [pc, #100]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d2c:	7a5b      	ldrb	r3, [r3, #9]
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	4a17      	ldr	r2, [pc, #92]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	4413      	add	r3, r2
 8013d36:	68fa      	ldr	r2, [r7, #12]
 8013d38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013d3a:	4b15      	ldr	r3, [pc, #84]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d3c:	7a5b      	ldrb	r3, [r3, #9]
 8013d3e:	b2db      	uxtb	r3, r3
 8013d40:	461a      	mov	r2, r3
 8013d42:	4b13      	ldr	r3, [pc, #76]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d44:	4413      	add	r3, r2
 8013d46:	79fa      	ldrb	r2, [r7, #7]
 8013d48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013d4a:	4b11      	ldr	r3, [pc, #68]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d4c:	7a5b      	ldrb	r3, [r3, #9]
 8013d4e:	b2db      	uxtb	r3, r3
 8013d50:	1c5a      	adds	r2, r3, #1
 8013d52:	b2d1      	uxtb	r1, r2
 8013d54:	4a0e      	ldr	r2, [pc, #56]	@ (8013d90 <FATFS_LinkDriverEx+0x94>)
 8013d56:	7251      	strb	r1, [r2, #9]
 8013d58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013d5a:	7dbb      	ldrb	r3, [r7, #22]
 8013d5c:	3330      	adds	r3, #48	@ 0x30
 8013d5e:	b2da      	uxtb	r2, r3
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	3301      	adds	r3, #1
 8013d68:	223a      	movs	r2, #58	@ 0x3a
 8013d6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	3302      	adds	r3, #2
 8013d70:	222f      	movs	r2, #47	@ 0x2f
 8013d72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	3303      	adds	r3, #3
 8013d78:	2200      	movs	r2, #0
 8013d7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	371c      	adds	r7, #28
 8013d86:	46bd      	mov	sp, r7
 8013d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8c:	4770      	bx	lr
 8013d8e:	bf00      	nop
 8013d90:	20001050 	.word	0x20001050

08013d94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013d9e:	2200      	movs	r2, #0
 8013da0:	6839      	ldr	r1, [r7, #0]
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f7ff ffaa 	bl	8013cfc <FATFS_LinkDriverEx>
 8013da8:	4603      	mov	r3, r0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3708      	adds	r7, #8
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}

08013db2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013db2:	b480      	push	{r7}
 8013db4:	b085      	sub	sp, #20
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	4603      	mov	r3, r0
 8013dba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013dc4:	2b84      	cmp	r3, #132	@ 0x84
 8013dc6:	d005      	beq.n	8013dd4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013dc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	4413      	add	r3, r2
 8013dd0:	3303      	adds	r3, #3
 8013dd2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3714      	adds	r7, #20
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr

08013de2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013de2:	b480      	push	{r7}
 8013de4:	b083      	sub	sp, #12
 8013de6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013de8:	f3ef 8305 	mrs	r3, IPSR
 8013dec:	607b      	str	r3, [r7, #4]
  return(result);
 8013dee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	bf14      	ite	ne
 8013df4:	2301      	movne	r3, #1
 8013df6:	2300      	moveq	r3, #0
 8013df8:	b2db      	uxtb	r3, r3
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	370c      	adds	r7, #12
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr

08013e06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013e06:	b580      	push	{r7, lr}
 8013e08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013e0a:	f001 f9cd 	bl	80151a8 <vTaskStartScheduler>
  
  return osOK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	bd80      	pop	{r7, pc}

08013e14 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8013e18:	f001 fe2e 	bl	8015a78 <xTaskGetSchedulerState>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d101      	bne.n	8013e26 <osKernelRunning+0x12>
    return 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	e000      	b.n	8013e28 <osKernelRunning+0x14>
  else
    return 1;
 8013e26:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8013e30:	f7ff ffd7 	bl	8013de2 <inHandlerMode>
 8013e34:	4603      	mov	r3, r0
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d003      	beq.n	8013e42 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8013e3a:	f001 fad9 	bl	80153f0 <xTaskGetTickCountFromISR>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	e002      	b.n	8013e48 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8013e42:	f001 fac5 	bl	80153d0 <xTaskGetTickCount>
 8013e46:	4603      	mov	r3, r0
  }
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e4e:	b089      	sub	sp, #36	@ 0x24
 8013e50:	af04      	add	r7, sp, #16
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	695b      	ldr	r3, [r3, #20]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d020      	beq.n	8013ea0 <osThreadCreate+0x54>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	699b      	ldr	r3, [r3, #24]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d01c      	beq.n	8013ea0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	685c      	ldr	r4, [r3, #4]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	691e      	ldr	r6, [r3, #16]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7ff ff9a 	bl	8013db2 <makeFreeRtosPriority>
 8013e7e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	695b      	ldr	r3, [r3, #20]
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013e88:	9202      	str	r2, [sp, #8]
 8013e8a:	9301      	str	r3, [sp, #4]
 8013e8c:	9100      	str	r1, [sp, #0]
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	4632      	mov	r2, r6
 8013e92:	4629      	mov	r1, r5
 8013e94:	4620      	mov	r0, r4
 8013e96:	f000 ffa5 	bl	8014de4 <xTaskCreateStatic>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	60fb      	str	r3, [r7, #12]
 8013e9e:	e01c      	b.n	8013eda <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	685c      	ldr	r4, [r3, #4]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013eac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7ff ff7c 	bl	8013db2 <makeFreeRtosPriority>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	f107 030c 	add.w	r3, r7, #12
 8013ec0:	9301      	str	r3, [sp, #4]
 8013ec2:	9200      	str	r2, [sp, #0]
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	4632      	mov	r2, r6
 8013ec8:	4629      	mov	r1, r5
 8013eca:	4620      	mov	r0, r4
 8013ecc:	f000 fff0 	bl	8014eb0 <xTaskCreate>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b01      	cmp	r3, #1
 8013ed4:	d001      	beq.n	8013eda <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	e000      	b.n	8013edc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013eda:	68fb      	ldr	r3, [r7, #12]
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3714      	adds	r7, #20
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ee4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d001      	beq.n	8013efa <osDelay+0x16>
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	e000      	b.n	8013efc <osDelay+0x18>
 8013efa:	2301      	movs	r3, #1
 8013efc:	4618      	mov	r0, r3
 8013efe:	f001 f91b 	bl	8015138 <vTaskDelay>
  
  return osOK;
 8013f02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3710      	adds	r7, #16
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8013f0c:	b590      	push	{r4, r7, lr}
 8013f0e:	b085      	sub	sp, #20
 8013f10:	af02      	add	r7, sp, #8
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	689b      	ldr	r3, [r3, #8]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d011      	beq.n	8013f42 <osMessageCreate+0x36>
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	68db      	ldr	r3, [r3, #12]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d00d      	beq.n	8013f42 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6818      	ldr	r0, [r3, #0]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6859      	ldr	r1, [r3, #4]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	689a      	ldr	r2, [r3, #8]
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	2400      	movs	r4, #0
 8013f38:	9400      	str	r4, [sp, #0]
 8013f3a:	f000 f9f9 	bl	8014330 <xQueueGenericCreateStatic>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	e008      	b.n	8013f54 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6818      	ldr	r0, [r3, #0]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	685b      	ldr	r3, [r3, #4]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	f000 fa76 	bl	801443e <xQueueGenericCreate>
 8013f52:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	370c      	adds	r7, #12
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd90      	pop	{r4, r7, pc}

08013f5c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b086      	sub	sp, #24
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d101      	bne.n	8013f7a <osMessagePut+0x1e>
    ticks = 1;
 8013f76:	2301      	movs	r3, #1
 8013f78:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8013f7a:	f7ff ff32 	bl	8013de2 <inHandlerMode>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d018      	beq.n	8013fb6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8013f84:	f107 0210 	add.w	r2, r7, #16
 8013f88:	f107 0108 	add.w	r1, r7, #8
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	f000 fbc2 	bl	8014718 <xQueueGenericSendFromISR>
 8013f94:	4603      	mov	r3, r0
 8013f96:	2b01      	cmp	r3, #1
 8013f98:	d001      	beq.n	8013f9e <osMessagePut+0x42>
      return osErrorOS;
 8013f9a:	23ff      	movs	r3, #255	@ 0xff
 8013f9c:	e018      	b.n	8013fd0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d014      	beq.n	8013fce <osMessagePut+0x72>
 8013fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8013fd8 <osMessagePut+0x7c>)
 8013fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013faa:	601a      	str	r2, [r3, #0]
 8013fac:	f3bf 8f4f 	dsb	sy
 8013fb0:	f3bf 8f6f 	isb	sy
 8013fb4:	e00b      	b.n	8013fce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8013fb6:	f107 0108 	add.w	r1, r7, #8
 8013fba:	2300      	movs	r3, #0
 8013fbc:	697a      	ldr	r2, [r7, #20]
 8013fbe:	68f8      	ldr	r0, [r7, #12]
 8013fc0:	f000 faa0 	bl	8014504 <xQueueGenericSend>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d001      	beq.n	8013fce <osMessagePut+0x72>
      return osErrorOS;
 8013fca:	23ff      	movs	r3, #255	@ 0xff
 8013fcc:	e000      	b.n	8013fd0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8013fce:	2300      	movs	r3, #0
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3718      	adds	r7, #24
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	e000ed04 	.word	0xe000ed04

08013fdc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013fdc:	b590      	push	{r4, r7, lr}
 8013fde:	b08b      	sub	sp, #44	@ 0x2c
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013fec:	2300      	movs	r3, #0
 8013fee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10a      	bne.n	801400c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8013ff6:	2380      	movs	r3, #128	@ 0x80
 8013ff8:	617b      	str	r3, [r7, #20]
    return event;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	461c      	mov	r4, r3
 8013ffe:	f107 0314 	add.w	r3, r7, #20
 8014002:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801400a:	e054      	b.n	80140b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801400c:	2300      	movs	r3, #0
 801400e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014010:	2300      	movs	r3, #0
 8014012:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801401a:	d103      	bne.n	8014024 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801401c:	f04f 33ff 	mov.w	r3, #4294967295
 8014020:	627b      	str	r3, [r7, #36]	@ 0x24
 8014022:	e009      	b.n	8014038 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d006      	beq.n	8014038 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014030:	2b00      	cmp	r3, #0
 8014032:	d101      	bne.n	8014038 <osMessageGet+0x5c>
      ticks = 1;
 8014034:	2301      	movs	r3, #1
 8014036:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014038:	f7ff fed3 	bl	8013de2 <inHandlerMode>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d01c      	beq.n	801407c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014042:	f107 0220 	add.w	r2, r7, #32
 8014046:	f107 0314 	add.w	r3, r7, #20
 801404a:	3304      	adds	r3, #4
 801404c:	4619      	mov	r1, r3
 801404e:	68b8      	ldr	r0, [r7, #8]
 8014050:	f000 fcee 	bl	8014a30 <xQueueReceiveFromISR>
 8014054:	4603      	mov	r3, r0
 8014056:	2b01      	cmp	r3, #1
 8014058:	d102      	bne.n	8014060 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801405a:	2310      	movs	r3, #16
 801405c:	617b      	str	r3, [r7, #20]
 801405e:	e001      	b.n	8014064 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014060:	2300      	movs	r3, #0
 8014062:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014064:	6a3b      	ldr	r3, [r7, #32]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d01d      	beq.n	80140a6 <osMessageGet+0xca>
 801406a:	4b15      	ldr	r3, [pc, #84]	@ (80140c0 <osMessageGet+0xe4>)
 801406c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014070:	601a      	str	r2, [r3, #0]
 8014072:	f3bf 8f4f 	dsb	sy
 8014076:	f3bf 8f6f 	isb	sy
 801407a:	e014      	b.n	80140a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801407c:	f107 0314 	add.w	r3, r7, #20
 8014080:	3304      	adds	r3, #4
 8014082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014084:	4619      	mov	r1, r3
 8014086:	68b8      	ldr	r0, [r7, #8]
 8014088:	f000 fbea 	bl	8014860 <xQueueReceive>
 801408c:	4603      	mov	r3, r0
 801408e:	2b01      	cmp	r3, #1
 8014090:	d102      	bne.n	8014098 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014092:	2310      	movs	r3, #16
 8014094:	617b      	str	r3, [r7, #20]
 8014096:	e006      	b.n	80140a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801409a:	2b00      	cmp	r3, #0
 801409c:	d101      	bne.n	80140a2 <osMessageGet+0xc6>
 801409e:	2300      	movs	r3, #0
 80140a0:	e000      	b.n	80140a4 <osMessageGet+0xc8>
 80140a2:	2340      	movs	r3, #64	@ 0x40
 80140a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	461c      	mov	r4, r3
 80140aa:	f107 0314 	add.w	r3, r7, #20
 80140ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80140b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	372c      	adds	r7, #44	@ 0x2c
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd90      	pop	{r4, r7, pc}
 80140be:	bf00      	nop
 80140c0:	e000ed04 	.word	0xe000ed04

080140c4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80140cc:	f7ff fe89 	bl	8013de2 <inHandlerMode>
 80140d0:	4603      	mov	r3, r0
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d004      	beq.n	80140e0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 fd53 	bl	8014b82 <uxQueueMessagesWaitingFromISR>
 80140dc:	4603      	mov	r3, r0
 80140de:	e003      	b.n	80140e8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 fd2d 	bl	8014b40 <uxQueueMessagesWaiting>
 80140e6:	4603      	mov	r3, r0
  }
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80140f0:	b480      	push	{r7}
 80140f2:	b083      	sub	sp, #12
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f103 0208 	add.w	r2, r3, #8
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f04f 32ff 	mov.w	r2, #4294967295
 8014108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f103 0208 	add.w	r2, r3, #8
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f103 0208 	add.w	r2, r3, #8
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2200      	movs	r2, #0
 8014122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014124:	bf00      	nop
 8014126:	370c      	adds	r7, #12
 8014128:	46bd      	mov	sp, r7
 801412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412e:	4770      	bx	lr

08014130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014130:	b480      	push	{r7}
 8014132:	b083      	sub	sp, #12
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2200      	movs	r2, #0
 801413c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801413e:	bf00      	nop
 8014140:	370c      	adds	r7, #12
 8014142:	46bd      	mov	sp, r7
 8014144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014148:	4770      	bx	lr

0801414a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801414a:	b480      	push	{r7}
 801414c:	b085      	sub	sp, #20
 801414e:	af00      	add	r7, sp, #0
 8014150:	6078      	str	r0, [r7, #4]
 8014152:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	68fa      	ldr	r2, [r7, #12]
 801415e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	689a      	ldr	r2, [r3, #8]
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	683a      	ldr	r2, [r7, #0]
 801416e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	683a      	ldr	r2, [r7, #0]
 8014174:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	1c5a      	adds	r2, r3, #1
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	601a      	str	r2, [r3, #0]
}
 8014186:	bf00      	nop
 8014188:	3714      	adds	r7, #20
 801418a:	46bd      	mov	sp, r7
 801418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014190:	4770      	bx	lr

08014192 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014192:	b480      	push	{r7}
 8014194:	b085      	sub	sp, #20
 8014196:	af00      	add	r7, sp, #0
 8014198:	6078      	str	r0, [r7, #4]
 801419a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141a8:	d103      	bne.n	80141b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	691b      	ldr	r3, [r3, #16]
 80141ae:	60fb      	str	r3, [r7, #12]
 80141b0:	e00c      	b.n	80141cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	3308      	adds	r3, #8
 80141b6:	60fb      	str	r3, [r7, #12]
 80141b8:	e002      	b.n	80141c0 <vListInsert+0x2e>
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	60fb      	str	r3, [r7, #12]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	68ba      	ldr	r2, [r7, #8]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d2f6      	bcs.n	80141ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	685a      	ldr	r2, [r3, #4]
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	683a      	ldr	r2, [r7, #0]
 80141da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	1c5a      	adds	r2, r3, #1
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	601a      	str	r2, [r3, #0]
}
 80141f8:	bf00      	nop
 80141fa:	3714      	adds	r7, #20
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr

08014204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014204:	b480      	push	{r7}
 8014206:	b085      	sub	sp, #20
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	691b      	ldr	r3, [r3, #16]
 8014210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	687a      	ldr	r2, [r7, #4]
 8014218:	6892      	ldr	r2, [r2, #8]
 801421a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	689b      	ldr	r3, [r3, #8]
 8014220:	687a      	ldr	r2, [r7, #4]
 8014222:	6852      	ldr	r2, [r2, #4]
 8014224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	429a      	cmp	r2, r3
 801422e:	d103      	bne.n	8014238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	689a      	ldr	r2, [r3, #8]
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2200      	movs	r2, #0
 801423c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	1e5a      	subs	r2, r3, #1
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	681b      	ldr	r3, [r3, #0]
}
 801424c:	4618      	mov	r0, r3
 801424e:	3714      	adds	r7, #20
 8014250:	46bd      	mov	sp, r7
 8014252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014256:	4770      	bx	lr

08014258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d10d      	bne.n	8014288 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801426c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014270:	b672      	cpsid	i
 8014272:	f383 8811 	msr	BASEPRI, r3
 8014276:	f3bf 8f6f 	isb	sy
 801427a:	f3bf 8f4f 	dsb	sy
 801427e:	b662      	cpsie	i
 8014280:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014282:	bf00      	nop
 8014284:	bf00      	nop
 8014286:	e7fd      	b.n	8014284 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8014288:	f001 fe18 	bl	8015ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014294:	68f9      	ldr	r1, [r7, #12]
 8014296:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014298:	fb01 f303 	mul.w	r3, r1, r3
 801429c:	441a      	add	r2, r3
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	2200      	movs	r2, #0
 80142a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	681a      	ldr	r2, [r3, #0]
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80142b8:	3b01      	subs	r3, #1
 80142ba:	68f9      	ldr	r1, [r7, #12]
 80142bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80142be:	fb01 f303 	mul.w	r3, r1, r3
 80142c2:	441a      	add	r2, r3
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	22ff      	movs	r2, #255	@ 0xff
 80142cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	22ff      	movs	r2, #255	@ 0xff
 80142d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d114      	bne.n	8014308 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	691b      	ldr	r3, [r3, #16]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d01a      	beq.n	801431c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	3310      	adds	r3, #16
 80142ea:	4618      	mov	r0, r3
 80142ec:	f001 f9fa 	bl	80156e4 <xTaskRemoveFromEventList>
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d012      	beq.n	801431c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80142f6:	4b0d      	ldr	r3, [pc, #52]	@ (801432c <xQueueGenericReset+0xd4>)
 80142f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142fc:	601a      	str	r2, [r3, #0]
 80142fe:	f3bf 8f4f 	dsb	sy
 8014302:	f3bf 8f6f 	isb	sy
 8014306:	e009      	b.n	801431c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	3310      	adds	r3, #16
 801430c:	4618      	mov	r0, r3
 801430e:	f7ff feef 	bl	80140f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	3324      	adds	r3, #36	@ 0x24
 8014316:	4618      	mov	r0, r3
 8014318:	f7ff feea 	bl	80140f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801431c:	f001 fe04 	bl	8015f28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014320:	2301      	movs	r3, #1
}
 8014322:	4618      	mov	r0, r3
 8014324:	3710      	adds	r7, #16
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	e000ed04 	.word	0xe000ed04

08014330 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014330:	b580      	push	{r7, lr}
 8014332:	b08e      	sub	sp, #56	@ 0x38
 8014334:	af02      	add	r7, sp, #8
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	607a      	str	r2, [r7, #4]
 801433c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d10d      	bne.n	8014360 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8014344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014348:	b672      	cpsid	i
 801434a:	f383 8811 	msr	BASEPRI, r3
 801434e:	f3bf 8f6f 	isb	sy
 8014352:	f3bf 8f4f 	dsb	sy
 8014356:	b662      	cpsie	i
 8014358:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801435a:	bf00      	nop
 801435c:	bf00      	nop
 801435e:	e7fd      	b.n	801435c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d10d      	bne.n	8014382 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8014366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801436a:	b672      	cpsid	i
 801436c:	f383 8811 	msr	BASEPRI, r3
 8014370:	f3bf 8f6f 	isb	sy
 8014374:	f3bf 8f4f 	dsb	sy
 8014378:	b662      	cpsie	i
 801437a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801437c:	bf00      	nop
 801437e:	bf00      	nop
 8014380:	e7fd      	b.n	801437e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d002      	beq.n	801438e <xQueueGenericCreateStatic+0x5e>
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d001      	beq.n	8014392 <xQueueGenericCreateStatic+0x62>
 801438e:	2301      	movs	r3, #1
 8014390:	e000      	b.n	8014394 <xQueueGenericCreateStatic+0x64>
 8014392:	2300      	movs	r3, #0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d10d      	bne.n	80143b4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8014398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801439c:	b672      	cpsid	i
 801439e:	f383 8811 	msr	BASEPRI, r3
 80143a2:	f3bf 8f6f 	isb	sy
 80143a6:	f3bf 8f4f 	dsb	sy
 80143aa:	b662      	cpsie	i
 80143ac:	623b      	str	r3, [r7, #32]
}
 80143ae:	bf00      	nop
 80143b0:	bf00      	nop
 80143b2:	e7fd      	b.n	80143b0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d102      	bne.n	80143c0 <xQueueGenericCreateStatic+0x90>
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d101      	bne.n	80143c4 <xQueueGenericCreateStatic+0x94>
 80143c0:	2301      	movs	r3, #1
 80143c2:	e000      	b.n	80143c6 <xQueueGenericCreateStatic+0x96>
 80143c4:	2300      	movs	r3, #0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d10d      	bne.n	80143e6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80143ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143ce:	b672      	cpsid	i
 80143d0:	f383 8811 	msr	BASEPRI, r3
 80143d4:	f3bf 8f6f 	isb	sy
 80143d8:	f3bf 8f4f 	dsb	sy
 80143dc:	b662      	cpsie	i
 80143de:	61fb      	str	r3, [r7, #28]
}
 80143e0:	bf00      	nop
 80143e2:	bf00      	nop
 80143e4:	e7fd      	b.n	80143e2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80143e6:	2348      	movs	r3, #72	@ 0x48
 80143e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	2b48      	cmp	r3, #72	@ 0x48
 80143ee:	d00d      	beq.n	801440c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80143f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143f4:	b672      	cpsid	i
 80143f6:	f383 8811 	msr	BASEPRI, r3
 80143fa:	f3bf 8f6f 	isb	sy
 80143fe:	f3bf 8f4f 	dsb	sy
 8014402:	b662      	cpsie	i
 8014404:	61bb      	str	r3, [r7, #24]
}
 8014406:	bf00      	nop
 8014408:	bf00      	nop
 801440a:	e7fd      	b.n	8014408 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801440c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801440e:	683b      	ldr	r3, [r7, #0]
 8014410:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8014412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014414:	2b00      	cmp	r3, #0
 8014416:	d00d      	beq.n	8014434 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441a:	2201      	movs	r2, #1
 801441c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014420:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	4613      	mov	r3, r2
 801442a:	687a      	ldr	r2, [r7, #4]
 801442c:	68b9      	ldr	r1, [r7, #8]
 801442e:	68f8      	ldr	r0, [r7, #12]
 8014430:	f000 f848 	bl	80144c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8014436:	4618      	mov	r0, r3
 8014438:	3730      	adds	r7, #48	@ 0x30
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}

0801443e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801443e:	b580      	push	{r7, lr}
 8014440:	b08a      	sub	sp, #40	@ 0x28
 8014442:	af02      	add	r7, sp, #8
 8014444:	60f8      	str	r0, [r7, #12]
 8014446:	60b9      	str	r1, [r7, #8]
 8014448:	4613      	mov	r3, r2
 801444a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d10d      	bne.n	801446e <xQueueGenericCreate+0x30>
	__asm volatile
 8014452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014456:	b672      	cpsid	i
 8014458:	f383 8811 	msr	BASEPRI, r3
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	f3bf 8f4f 	dsb	sy
 8014464:	b662      	cpsie	i
 8014466:	613b      	str	r3, [r7, #16]
}
 8014468:	bf00      	nop
 801446a:	bf00      	nop
 801446c:	e7fd      	b.n	801446a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d102      	bne.n	801447a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014474:	2300      	movs	r3, #0
 8014476:	61fb      	str	r3, [r7, #28]
 8014478:	e004      	b.n	8014484 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	fb02 f303 	mul.w	r3, r2, r3
 8014482:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	3348      	adds	r3, #72	@ 0x48
 8014488:	4618      	mov	r0, r3
 801448a:	f001 fe45 	bl	8016118 <pvPortMalloc>
 801448e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d011      	beq.n	80144ba <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014496:	69bb      	ldr	r3, [r7, #24]
 8014498:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	3348      	adds	r3, #72	@ 0x48
 801449e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	2200      	movs	r2, #0
 80144a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80144a8:	79fa      	ldrb	r2, [r7, #7]
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	9300      	str	r3, [sp, #0]
 80144ae:	4613      	mov	r3, r2
 80144b0:	697a      	ldr	r2, [r7, #20]
 80144b2:	68b9      	ldr	r1, [r7, #8]
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	f000 f805 	bl	80144c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80144ba:	69bb      	ldr	r3, [r7, #24]
	}
 80144bc:	4618      	mov	r0, r3
 80144be:	3720      	adds	r7, #32
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}

080144c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	60f8      	str	r0, [r7, #12]
 80144cc:	60b9      	str	r1, [r7, #8]
 80144ce:	607a      	str	r2, [r7, #4]
 80144d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d103      	bne.n	80144e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80144d8:	69bb      	ldr	r3, [r7, #24]
 80144da:	69ba      	ldr	r2, [r7, #24]
 80144dc:	601a      	str	r2, [r3, #0]
 80144de:	e002      	b.n	80144e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80144e0:	69bb      	ldr	r3, [r7, #24]
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	68fa      	ldr	r2, [r7, #12]
 80144ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	68ba      	ldr	r2, [r7, #8]
 80144f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80144f2:	2101      	movs	r1, #1
 80144f4:	69b8      	ldr	r0, [r7, #24]
 80144f6:	f7ff feaf 	bl	8014258 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80144fa:	bf00      	nop
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
	...

08014504 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b08e      	sub	sp, #56	@ 0x38
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
 8014510:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014512:	2300      	movs	r3, #0
 8014514:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801451c:	2b00      	cmp	r3, #0
 801451e:	d10d      	bne.n	801453c <xQueueGenericSend+0x38>
	__asm volatile
 8014520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014524:	b672      	cpsid	i
 8014526:	f383 8811 	msr	BASEPRI, r3
 801452a:	f3bf 8f6f 	isb	sy
 801452e:	f3bf 8f4f 	dsb	sy
 8014532:	b662      	cpsie	i
 8014534:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014536:	bf00      	nop
 8014538:	bf00      	nop
 801453a:	e7fd      	b.n	8014538 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d103      	bne.n	801454a <xQueueGenericSend+0x46>
 8014542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014546:	2b00      	cmp	r3, #0
 8014548:	d101      	bne.n	801454e <xQueueGenericSend+0x4a>
 801454a:	2301      	movs	r3, #1
 801454c:	e000      	b.n	8014550 <xQueueGenericSend+0x4c>
 801454e:	2300      	movs	r3, #0
 8014550:	2b00      	cmp	r3, #0
 8014552:	d10d      	bne.n	8014570 <xQueueGenericSend+0x6c>
	__asm volatile
 8014554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014558:	b672      	cpsid	i
 801455a:	f383 8811 	msr	BASEPRI, r3
 801455e:	f3bf 8f6f 	isb	sy
 8014562:	f3bf 8f4f 	dsb	sy
 8014566:	b662      	cpsie	i
 8014568:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801456a:	bf00      	nop
 801456c:	bf00      	nop
 801456e:	e7fd      	b.n	801456c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	2b02      	cmp	r3, #2
 8014574:	d103      	bne.n	801457e <xQueueGenericSend+0x7a>
 8014576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801457a:	2b01      	cmp	r3, #1
 801457c:	d101      	bne.n	8014582 <xQueueGenericSend+0x7e>
 801457e:	2301      	movs	r3, #1
 8014580:	e000      	b.n	8014584 <xQueueGenericSend+0x80>
 8014582:	2300      	movs	r3, #0
 8014584:	2b00      	cmp	r3, #0
 8014586:	d10d      	bne.n	80145a4 <xQueueGenericSend+0xa0>
	__asm volatile
 8014588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801458c:	b672      	cpsid	i
 801458e:	f383 8811 	msr	BASEPRI, r3
 8014592:	f3bf 8f6f 	isb	sy
 8014596:	f3bf 8f4f 	dsb	sy
 801459a:	b662      	cpsie	i
 801459c:	623b      	str	r3, [r7, #32]
}
 801459e:	bf00      	nop
 80145a0:	bf00      	nop
 80145a2:	e7fd      	b.n	80145a0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80145a4:	f001 fa68 	bl	8015a78 <xTaskGetSchedulerState>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d102      	bne.n	80145b4 <xQueueGenericSend+0xb0>
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d101      	bne.n	80145b8 <xQueueGenericSend+0xb4>
 80145b4:	2301      	movs	r3, #1
 80145b6:	e000      	b.n	80145ba <xQueueGenericSend+0xb6>
 80145b8:	2300      	movs	r3, #0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d10d      	bne.n	80145da <xQueueGenericSend+0xd6>
	__asm volatile
 80145be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145c2:	b672      	cpsid	i
 80145c4:	f383 8811 	msr	BASEPRI, r3
 80145c8:	f3bf 8f6f 	isb	sy
 80145cc:	f3bf 8f4f 	dsb	sy
 80145d0:	b662      	cpsie	i
 80145d2:	61fb      	str	r3, [r7, #28]
}
 80145d4:	bf00      	nop
 80145d6:	bf00      	nop
 80145d8:	e7fd      	b.n	80145d6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80145da:	f001 fc6f 	bl	8015ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80145de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80145e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d302      	bcc.n	80145f0 <xQueueGenericSend+0xec>
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	2b02      	cmp	r3, #2
 80145ee:	d129      	bne.n	8014644 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80145f0:	683a      	ldr	r2, [r7, #0]
 80145f2:	68b9      	ldr	r1, [r7, #8]
 80145f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145f6:	f000 fae5 	bl	8014bc4 <prvCopyDataToQueue>
 80145fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014600:	2b00      	cmp	r3, #0
 8014602:	d010      	beq.n	8014626 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014606:	3324      	adds	r3, #36	@ 0x24
 8014608:	4618      	mov	r0, r3
 801460a:	f001 f86b 	bl	80156e4 <xTaskRemoveFromEventList>
 801460e:	4603      	mov	r3, r0
 8014610:	2b00      	cmp	r3, #0
 8014612:	d013      	beq.n	801463c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014614:	4b3f      	ldr	r3, [pc, #252]	@ (8014714 <xQueueGenericSend+0x210>)
 8014616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801461a:	601a      	str	r2, [r3, #0]
 801461c:	f3bf 8f4f 	dsb	sy
 8014620:	f3bf 8f6f 	isb	sy
 8014624:	e00a      	b.n	801463c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014628:	2b00      	cmp	r3, #0
 801462a:	d007      	beq.n	801463c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801462c:	4b39      	ldr	r3, [pc, #228]	@ (8014714 <xQueueGenericSend+0x210>)
 801462e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014632:	601a      	str	r2, [r3, #0]
 8014634:	f3bf 8f4f 	dsb	sy
 8014638:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801463c:	f001 fc74 	bl	8015f28 <vPortExitCritical>
				return pdPASS;
 8014640:	2301      	movs	r3, #1
 8014642:	e063      	b.n	801470c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d103      	bne.n	8014652 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801464a:	f001 fc6d 	bl	8015f28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801464e:	2300      	movs	r3, #0
 8014650:	e05c      	b.n	801470c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014654:	2b00      	cmp	r3, #0
 8014656:	d106      	bne.n	8014666 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014658:	f107 0314 	add.w	r3, r7, #20
 801465c:	4618      	mov	r0, r3
 801465e:	f001 f8a7 	bl	80157b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014662:	2301      	movs	r3, #1
 8014664:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014666:	f001 fc5f 	bl	8015f28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801466a:	f000 fe03 	bl	8015274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801466e:	f001 fc25 	bl	8015ebc <vPortEnterCritical>
 8014672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014678:	b25b      	sxtb	r3, r3
 801467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467e:	d103      	bne.n	8014688 <xQueueGenericSend+0x184>
 8014680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014682:	2200      	movs	r2, #0
 8014684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801468a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801468e:	b25b      	sxtb	r3, r3
 8014690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014694:	d103      	bne.n	801469e <xQueueGenericSend+0x19a>
 8014696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014698:	2200      	movs	r2, #0
 801469a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801469e:	f001 fc43 	bl	8015f28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80146a2:	1d3a      	adds	r2, r7, #4
 80146a4:	f107 0314 	add.w	r3, r7, #20
 80146a8:	4611      	mov	r1, r2
 80146aa:	4618      	mov	r0, r3
 80146ac:	f001 f896 	bl	80157dc <xTaskCheckForTimeOut>
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d124      	bne.n	8014700 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80146b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146b8:	f000 fb7c 	bl	8014db4 <prvIsQueueFull>
 80146bc:	4603      	mov	r3, r0
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d018      	beq.n	80146f4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80146c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146c4:	3310      	adds	r3, #16
 80146c6:	687a      	ldr	r2, [r7, #4]
 80146c8:	4611      	mov	r1, r2
 80146ca:	4618      	mov	r0, r3
 80146cc:	f000 ffe2 	bl	8015694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80146d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146d2:	f000 fb07 	bl	8014ce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80146d6:	f000 fddb 	bl	8015290 <xTaskResumeAll>
 80146da:	4603      	mov	r3, r0
 80146dc:	2b00      	cmp	r3, #0
 80146de:	f47f af7c 	bne.w	80145da <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80146e2:	4b0c      	ldr	r3, [pc, #48]	@ (8014714 <xQueueGenericSend+0x210>)
 80146e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146e8:	601a      	str	r2, [r3, #0]
 80146ea:	f3bf 8f4f 	dsb	sy
 80146ee:	f3bf 8f6f 	isb	sy
 80146f2:	e772      	b.n	80145da <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80146f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146f6:	f000 faf5 	bl	8014ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80146fa:	f000 fdc9 	bl	8015290 <xTaskResumeAll>
 80146fe:	e76c      	b.n	80145da <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014702:	f000 faef 	bl	8014ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014706:	f000 fdc3 	bl	8015290 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801470a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801470c:	4618      	mov	r0, r3
 801470e:	3738      	adds	r7, #56	@ 0x38
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}
 8014714:	e000ed04 	.word	0xe000ed04

08014718 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b08e      	sub	sp, #56	@ 0x38
 801471c:	af00      	add	r7, sp, #0
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	60b9      	str	r1, [r7, #8]
 8014722:	607a      	str	r2, [r7, #4]
 8014724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801472c:	2b00      	cmp	r3, #0
 801472e:	d10d      	bne.n	801474c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8014730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014734:	b672      	cpsid	i
 8014736:	f383 8811 	msr	BASEPRI, r3
 801473a:	f3bf 8f6f 	isb	sy
 801473e:	f3bf 8f4f 	dsb	sy
 8014742:	b662      	cpsie	i
 8014744:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014746:	bf00      	nop
 8014748:	bf00      	nop
 801474a:	e7fd      	b.n	8014748 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d103      	bne.n	801475a <xQueueGenericSendFromISR+0x42>
 8014752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014756:	2b00      	cmp	r3, #0
 8014758:	d101      	bne.n	801475e <xQueueGenericSendFromISR+0x46>
 801475a:	2301      	movs	r3, #1
 801475c:	e000      	b.n	8014760 <xQueueGenericSendFromISR+0x48>
 801475e:	2300      	movs	r3, #0
 8014760:	2b00      	cmp	r3, #0
 8014762:	d10d      	bne.n	8014780 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8014764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014768:	b672      	cpsid	i
 801476a:	f383 8811 	msr	BASEPRI, r3
 801476e:	f3bf 8f6f 	isb	sy
 8014772:	f3bf 8f4f 	dsb	sy
 8014776:	b662      	cpsie	i
 8014778:	623b      	str	r3, [r7, #32]
}
 801477a:	bf00      	nop
 801477c:	bf00      	nop
 801477e:	e7fd      	b.n	801477c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	2b02      	cmp	r3, #2
 8014784:	d103      	bne.n	801478e <xQueueGenericSendFromISR+0x76>
 8014786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801478a:	2b01      	cmp	r3, #1
 801478c:	d101      	bne.n	8014792 <xQueueGenericSendFromISR+0x7a>
 801478e:	2301      	movs	r3, #1
 8014790:	e000      	b.n	8014794 <xQueueGenericSendFromISR+0x7c>
 8014792:	2300      	movs	r3, #0
 8014794:	2b00      	cmp	r3, #0
 8014796:	d10d      	bne.n	80147b4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8014798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801479c:	b672      	cpsid	i
 801479e:	f383 8811 	msr	BASEPRI, r3
 80147a2:	f3bf 8f6f 	isb	sy
 80147a6:	f3bf 8f4f 	dsb	sy
 80147aa:	b662      	cpsie	i
 80147ac:	61fb      	str	r3, [r7, #28]
}
 80147ae:	bf00      	nop
 80147b0:	bf00      	nop
 80147b2:	e7fd      	b.n	80147b0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80147b4:	f001 fc6a 	bl	801608c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80147b8:	f3ef 8211 	mrs	r2, BASEPRI
 80147bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147c0:	b672      	cpsid	i
 80147c2:	f383 8811 	msr	BASEPRI, r3
 80147c6:	f3bf 8f6f 	isb	sy
 80147ca:	f3bf 8f4f 	dsb	sy
 80147ce:	b662      	cpsie	i
 80147d0:	61ba      	str	r2, [r7, #24]
 80147d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80147d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80147d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80147d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80147dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d302      	bcc.n	80147ea <xQueueGenericSendFromISR+0xd2>
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	2b02      	cmp	r3, #2
 80147e8:	d12c      	bne.n	8014844 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80147ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80147f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80147f4:	683a      	ldr	r2, [r7, #0]
 80147f6:	68b9      	ldr	r1, [r7, #8]
 80147f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80147fa:	f000 f9e3 	bl	8014bc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80147fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8014802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014806:	d112      	bne.n	801482e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801480c:	2b00      	cmp	r3, #0
 801480e:	d016      	beq.n	801483e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014812:	3324      	adds	r3, #36	@ 0x24
 8014814:	4618      	mov	r0, r3
 8014816:	f000 ff65 	bl	80156e4 <xTaskRemoveFromEventList>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d00e      	beq.n	801483e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d00b      	beq.n	801483e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2201      	movs	r2, #1
 801482a:	601a      	str	r2, [r3, #0]
 801482c:	e007      	b.n	801483e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801482e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014832:	3301      	adds	r3, #1
 8014834:	b2db      	uxtb	r3, r3
 8014836:	b25a      	sxtb	r2, r3
 8014838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801483a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801483e:	2301      	movs	r3, #1
 8014840:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8014842:	e001      	b.n	8014848 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014844:	2300      	movs	r3, #0
 8014846:	637b      	str	r3, [r7, #52]	@ 0x34
 8014848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801484a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014852:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014856:	4618      	mov	r0, r3
 8014858:	3738      	adds	r7, #56	@ 0x38
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
	...

08014860 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b08c      	sub	sp, #48	@ 0x30
 8014864:	af00      	add	r7, sp, #0
 8014866:	60f8      	str	r0, [r7, #12]
 8014868:	60b9      	str	r1, [r7, #8]
 801486a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801486c:	2300      	movs	r3, #0
 801486e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014876:	2b00      	cmp	r3, #0
 8014878:	d10d      	bne.n	8014896 <xQueueReceive+0x36>
	__asm volatile
 801487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801487e:	b672      	cpsid	i
 8014880:	f383 8811 	msr	BASEPRI, r3
 8014884:	f3bf 8f6f 	isb	sy
 8014888:	f3bf 8f4f 	dsb	sy
 801488c:	b662      	cpsie	i
 801488e:	623b      	str	r3, [r7, #32]
}
 8014890:	bf00      	nop
 8014892:	bf00      	nop
 8014894:	e7fd      	b.n	8014892 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d103      	bne.n	80148a4 <xQueueReceive+0x44>
 801489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801489e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d101      	bne.n	80148a8 <xQueueReceive+0x48>
 80148a4:	2301      	movs	r3, #1
 80148a6:	e000      	b.n	80148aa <xQueueReceive+0x4a>
 80148a8:	2300      	movs	r3, #0
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d10d      	bne.n	80148ca <xQueueReceive+0x6a>
	__asm volatile
 80148ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148b2:	b672      	cpsid	i
 80148b4:	f383 8811 	msr	BASEPRI, r3
 80148b8:	f3bf 8f6f 	isb	sy
 80148bc:	f3bf 8f4f 	dsb	sy
 80148c0:	b662      	cpsie	i
 80148c2:	61fb      	str	r3, [r7, #28]
}
 80148c4:	bf00      	nop
 80148c6:	bf00      	nop
 80148c8:	e7fd      	b.n	80148c6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80148ca:	f001 f8d5 	bl	8015a78 <xTaskGetSchedulerState>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d102      	bne.n	80148da <xQueueReceive+0x7a>
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d101      	bne.n	80148de <xQueueReceive+0x7e>
 80148da:	2301      	movs	r3, #1
 80148dc:	e000      	b.n	80148e0 <xQueueReceive+0x80>
 80148de:	2300      	movs	r3, #0
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d10d      	bne.n	8014900 <xQueueReceive+0xa0>
	__asm volatile
 80148e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148e8:	b672      	cpsid	i
 80148ea:	f383 8811 	msr	BASEPRI, r3
 80148ee:	f3bf 8f6f 	isb	sy
 80148f2:	f3bf 8f4f 	dsb	sy
 80148f6:	b662      	cpsie	i
 80148f8:	61bb      	str	r3, [r7, #24]
}
 80148fa:	bf00      	nop
 80148fc:	bf00      	nop
 80148fe:	e7fd      	b.n	80148fc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014900:	f001 fadc 	bl	8015ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014908:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801490c:	2b00      	cmp	r3, #0
 801490e:	d01f      	beq.n	8014950 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014910:	68b9      	ldr	r1, [r7, #8]
 8014912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014914:	f000 f9c0 	bl	8014c98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801491a:	1e5a      	subs	r2, r3, #1
 801491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801491e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014922:	691b      	ldr	r3, [r3, #16]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d00f      	beq.n	8014948 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801492a:	3310      	adds	r3, #16
 801492c:	4618      	mov	r0, r3
 801492e:	f000 fed9 	bl	80156e4 <xTaskRemoveFromEventList>
 8014932:	4603      	mov	r3, r0
 8014934:	2b00      	cmp	r3, #0
 8014936:	d007      	beq.n	8014948 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014938:	4b3c      	ldr	r3, [pc, #240]	@ (8014a2c <xQueueReceive+0x1cc>)
 801493a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801493e:	601a      	str	r2, [r3, #0]
 8014940:	f3bf 8f4f 	dsb	sy
 8014944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014948:	f001 faee 	bl	8015f28 <vPortExitCritical>
				return pdPASS;
 801494c:	2301      	movs	r3, #1
 801494e:	e069      	b.n	8014a24 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d103      	bne.n	801495e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014956:	f001 fae7 	bl	8015f28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801495a:	2300      	movs	r3, #0
 801495c:	e062      	b.n	8014a24 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801495e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014960:	2b00      	cmp	r3, #0
 8014962:	d106      	bne.n	8014972 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014964:	f107 0310 	add.w	r3, r7, #16
 8014968:	4618      	mov	r0, r3
 801496a:	f000 ff21 	bl	80157b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801496e:	2301      	movs	r3, #1
 8014970:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014972:	f001 fad9 	bl	8015f28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014976:	f000 fc7d 	bl	8015274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801497a:	f001 fa9f 	bl	8015ebc <vPortEnterCritical>
 801497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014984:	b25b      	sxtb	r3, r3
 8014986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801498a:	d103      	bne.n	8014994 <xQueueReceive+0x134>
 801498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801498e:	2200      	movs	r2, #0
 8014990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801499a:	b25b      	sxtb	r3, r3
 801499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149a0:	d103      	bne.n	80149aa <xQueueReceive+0x14a>
 80149a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149a4:	2200      	movs	r2, #0
 80149a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80149aa:	f001 fabd 	bl	8015f28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80149ae:	1d3a      	adds	r2, r7, #4
 80149b0:	f107 0310 	add.w	r3, r7, #16
 80149b4:	4611      	mov	r1, r2
 80149b6:	4618      	mov	r0, r3
 80149b8:	f000 ff10 	bl	80157dc <xTaskCheckForTimeOut>
 80149bc:	4603      	mov	r3, r0
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d123      	bne.n	8014a0a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149c4:	f000 f9e0 	bl	8014d88 <prvIsQueueEmpty>
 80149c8:	4603      	mov	r3, r0
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d017      	beq.n	80149fe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80149ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149d0:	3324      	adds	r3, #36	@ 0x24
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	4611      	mov	r1, r2
 80149d6:	4618      	mov	r0, r3
 80149d8:	f000 fe5c 	bl	8015694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80149dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149de:	f000 f981 	bl	8014ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80149e2:	f000 fc55 	bl	8015290 <xTaskResumeAll>
 80149e6:	4603      	mov	r3, r0
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d189      	bne.n	8014900 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80149ec:	4b0f      	ldr	r3, [pc, #60]	@ (8014a2c <xQueueReceive+0x1cc>)
 80149ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80149f2:	601a      	str	r2, [r3, #0]
 80149f4:	f3bf 8f4f 	dsb	sy
 80149f8:	f3bf 8f6f 	isb	sy
 80149fc:	e780      	b.n	8014900 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80149fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014a00:	f000 f970 	bl	8014ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014a04:	f000 fc44 	bl	8015290 <xTaskResumeAll>
 8014a08:	e77a      	b.n	8014900 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014a0c:	f000 f96a 	bl	8014ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014a10:	f000 fc3e 	bl	8015290 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014a14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014a16:	f000 f9b7 	bl	8014d88 <prvIsQueueEmpty>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	f43f af6f 	beq.w	8014900 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014a22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3730      	adds	r7, #48	@ 0x30
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	e000ed04 	.word	0xe000ed04

08014a30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b08e      	sub	sp, #56	@ 0x38
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	60f8      	str	r0, [r7, #12]
 8014a38:	60b9      	str	r1, [r7, #8]
 8014a3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d10d      	bne.n	8014a62 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8014a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a4a:	b672      	cpsid	i
 8014a4c:	f383 8811 	msr	BASEPRI, r3
 8014a50:	f3bf 8f6f 	isb	sy
 8014a54:	f3bf 8f4f 	dsb	sy
 8014a58:	b662      	cpsie	i
 8014a5a:	623b      	str	r3, [r7, #32]
}
 8014a5c:	bf00      	nop
 8014a5e:	bf00      	nop
 8014a60:	e7fd      	b.n	8014a5e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d103      	bne.n	8014a70 <xQueueReceiveFromISR+0x40>
 8014a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d101      	bne.n	8014a74 <xQueueReceiveFromISR+0x44>
 8014a70:	2301      	movs	r3, #1
 8014a72:	e000      	b.n	8014a76 <xQueueReceiveFromISR+0x46>
 8014a74:	2300      	movs	r3, #0
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d10d      	bne.n	8014a96 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8014a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a7e:	b672      	cpsid	i
 8014a80:	f383 8811 	msr	BASEPRI, r3
 8014a84:	f3bf 8f6f 	isb	sy
 8014a88:	f3bf 8f4f 	dsb	sy
 8014a8c:	b662      	cpsie	i
 8014a8e:	61fb      	str	r3, [r7, #28]
}
 8014a90:	bf00      	nop
 8014a92:	bf00      	nop
 8014a94:	e7fd      	b.n	8014a92 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014a96:	f001 faf9 	bl	801608c <vPortValidateInterruptPriority>
	__asm volatile
 8014a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8014a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa2:	b672      	cpsid	i
 8014aa4:	f383 8811 	msr	BASEPRI, r3
 8014aa8:	f3bf 8f6f 	isb	sy
 8014aac:	f3bf 8f4f 	dsb	sy
 8014ab0:	b662      	cpsie	i
 8014ab2:	61ba      	str	r2, [r7, #24]
 8014ab4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014ab6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014abe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d02f      	beq.n	8014b26 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014ad0:	68b9      	ldr	r1, [r7, #8]
 8014ad2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ad4:	f000 f8e0 	bl	8014c98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ada:	1e5a      	subs	r2, r3, #1
 8014adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ade:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014ae0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ae8:	d112      	bne.n	8014b10 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aec:	691b      	ldr	r3, [r3, #16]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d016      	beq.n	8014b20 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014af4:	3310      	adds	r3, #16
 8014af6:	4618      	mov	r0, r3
 8014af8:	f000 fdf4 	bl	80156e4 <xTaskRemoveFromEventList>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d00e      	beq.n	8014b20 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d00b      	beq.n	8014b20 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2201      	movs	r2, #1
 8014b0c:	601a      	str	r2, [r3, #0]
 8014b0e:	e007      	b.n	8014b20 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b14:	3301      	adds	r3, #1
 8014b16:	b2db      	uxtb	r3, r3
 8014b18:	b25a      	sxtb	r2, r3
 8014b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8014b20:	2301      	movs	r3, #1
 8014b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b24:	e001      	b.n	8014b2a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8014b26:	2300      	movs	r3, #0
 8014b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	f383 8811 	msr	BASEPRI, r3
}
 8014b34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3738      	adds	r7, #56	@ 0x38
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d10d      	bne.n	8014b6a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8014b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b52:	b672      	cpsid	i
 8014b54:	f383 8811 	msr	BASEPRI, r3
 8014b58:	f3bf 8f6f 	isb	sy
 8014b5c:	f3bf 8f4f 	dsb	sy
 8014b60:	b662      	cpsie	i
 8014b62:	60bb      	str	r3, [r7, #8]
}
 8014b64:	bf00      	nop
 8014b66:	bf00      	nop
 8014b68:	e7fd      	b.n	8014b66 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8014b6a:	f001 f9a7 	bl	8015ebc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b72:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014b74:	f001 f9d8 	bl	8015f28 <vPortExitCritical>

	return uxReturn;
 8014b78:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3710      	adds	r7, #16
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}

08014b82 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8014b82:	b480      	push	{r7}
 8014b84:	b087      	sub	sp, #28
 8014b86:	af00      	add	r7, sp, #0
 8014b88:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d10d      	bne.n	8014bb0 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8014b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b98:	b672      	cpsid	i
 8014b9a:	f383 8811 	msr	BASEPRI, r3
 8014b9e:	f3bf 8f6f 	isb	sy
 8014ba2:	f3bf 8f4f 	dsb	sy
 8014ba6:	b662      	cpsie	i
 8014ba8:	60fb      	str	r3, [r7, #12]
}
 8014baa:	bf00      	nop
 8014bac:	bf00      	nop
 8014bae:	e7fd      	b.n	8014bac <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bb4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8014bb6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014bb8:	4618      	mov	r0, r3
 8014bba:	371c      	adds	r7, #28
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc2:	4770      	bx	lr

08014bc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b086      	sub	sp, #24
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	60f8      	str	r0, [r7, #12]
 8014bcc:	60b9      	str	r1, [r7, #8]
 8014bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d10d      	bne.n	8014bfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d14d      	bne.n	8014c86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	689b      	ldr	r3, [r3, #8]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f000 ff60 	bl	8015ab4 <xTaskPriorityDisinherit>
 8014bf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	609a      	str	r2, [r3, #8]
 8014bfc:	e043      	b.n	8014c86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d119      	bne.n	8014c38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	6858      	ldr	r0, [r3, #4]
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	68b9      	ldr	r1, [r7, #8]
 8014c10:	f002 f928 	bl	8016e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	685a      	ldr	r2, [r3, #4]
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c1c:	441a      	add	r2, r3
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	685a      	ldr	r2, [r3, #4]
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	689b      	ldr	r3, [r3, #8]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d32b      	bcc.n	8014c86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681a      	ldr	r2, [r3, #0]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	605a      	str	r2, [r3, #4]
 8014c36:	e026      	b.n	8014c86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	68d8      	ldr	r0, [r3, #12]
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c40:	461a      	mov	r2, r3
 8014c42:	68b9      	ldr	r1, [r7, #8]
 8014c44:	f002 f90e 	bl	8016e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	68da      	ldr	r2, [r3, #12]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c50:	425b      	negs	r3, r3
 8014c52:	441a      	add	r2, r3
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	68da      	ldr	r2, [r3, #12]
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d207      	bcs.n	8014c74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	689a      	ldr	r2, [r3, #8]
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c6c:	425b      	negs	r3, r3
 8014c6e:	441a      	add	r2, r3
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2b02      	cmp	r3, #2
 8014c78:	d105      	bne.n	8014c86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d002      	beq.n	8014c86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	3b01      	subs	r3, #1
 8014c84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	1c5a      	adds	r2, r3, #1
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014c8e:	697b      	ldr	r3, [r7, #20]
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3718      	adds	r7, #24
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d018      	beq.n	8014cdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	68da      	ldr	r2, [r3, #12]
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cb2:	441a      	add	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	68da      	ldr	r2, [r3, #12]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	689b      	ldr	r3, [r3, #8]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d303      	bcc.n	8014ccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	68d9      	ldr	r1, [r3, #12]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cd4:	461a      	mov	r2, r3
 8014cd6:	6838      	ldr	r0, [r7, #0]
 8014cd8:	f002 f8c4 	bl	8016e64 <memcpy>
	}
}
 8014cdc:	bf00      	nop
 8014cde:	3708      	adds	r7, #8
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014cec:	f001 f8e6 	bl	8015ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014cf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014cf8:	e011      	b.n	8014d1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d012      	beq.n	8014d28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	3324      	adds	r3, #36	@ 0x24
 8014d06:	4618      	mov	r0, r3
 8014d08:	f000 fcec 	bl	80156e4 <xTaskRemoveFromEventList>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d001      	beq.n	8014d16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014d12:	f000 fdcb 	bl	80158ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014d16:	7bfb      	ldrb	r3, [r7, #15]
 8014d18:	3b01      	subs	r3, #1
 8014d1a:	b2db      	uxtb	r3, r3
 8014d1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	dce9      	bgt.n	8014cfa <prvUnlockQueue+0x16>
 8014d26:	e000      	b.n	8014d2a <prvUnlockQueue+0x46>
					break;
 8014d28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	22ff      	movs	r2, #255	@ 0xff
 8014d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8014d32:	f001 f8f9 	bl	8015f28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014d36:	f001 f8c1 	bl	8015ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014d40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014d42:	e011      	b.n	8014d68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	691b      	ldr	r3, [r3, #16]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d012      	beq.n	8014d72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	3310      	adds	r3, #16
 8014d50:	4618      	mov	r0, r3
 8014d52:	f000 fcc7 	bl	80156e4 <xTaskRemoveFromEventList>
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d001      	beq.n	8014d60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014d5c:	f000 fda6 	bl	80158ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014d60:	7bbb      	ldrb	r3, [r7, #14]
 8014d62:	3b01      	subs	r3, #1
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	dce9      	bgt.n	8014d44 <prvUnlockQueue+0x60>
 8014d70:	e000      	b.n	8014d74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014d72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	22ff      	movs	r2, #255	@ 0xff
 8014d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014d7c:	f001 f8d4 	bl	8015f28 <vPortExitCritical>
}
 8014d80:	bf00      	nop
 8014d82:	3710      	adds	r7, #16
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}

08014d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b084      	sub	sp, #16
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014d90:	f001 f894 	bl	8015ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d102      	bne.n	8014da2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	60fb      	str	r3, [r7, #12]
 8014da0:	e001      	b.n	8014da6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014da2:	2300      	movs	r3, #0
 8014da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014da6:	f001 f8bf 	bl	8015f28 <vPortExitCritical>

	return xReturn;
 8014daa:	68fb      	ldr	r3, [r7, #12]
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3710      	adds	r7, #16
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}

08014db4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014dbc:	f001 f87e 	bl	8015ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d102      	bne.n	8014dd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014dcc:	2301      	movs	r3, #1
 8014dce:	60fb      	str	r3, [r7, #12]
 8014dd0:	e001      	b.n	8014dd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014dd6:	f001 f8a7 	bl	8015f28 <vPortExitCritical>

	return xReturn;
 8014dda:	68fb      	ldr	r3, [r7, #12]
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3710      	adds	r7, #16
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b08e      	sub	sp, #56	@ 0x38
 8014de8:	af04      	add	r7, sp, #16
 8014dea:	60f8      	str	r0, [r7, #12]
 8014dec:	60b9      	str	r1, [r7, #8]
 8014dee:	607a      	str	r2, [r7, #4]
 8014df0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d10d      	bne.n	8014e14 <xTaskCreateStatic+0x30>
	__asm volatile
 8014df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dfc:	b672      	cpsid	i
 8014dfe:	f383 8811 	msr	BASEPRI, r3
 8014e02:	f3bf 8f6f 	isb	sy
 8014e06:	f3bf 8f4f 	dsb	sy
 8014e0a:	b662      	cpsie	i
 8014e0c:	623b      	str	r3, [r7, #32]
}
 8014e0e:	bf00      	nop
 8014e10:	bf00      	nop
 8014e12:	e7fd      	b.n	8014e10 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8014e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d10d      	bne.n	8014e36 <xTaskCreateStatic+0x52>
	__asm volatile
 8014e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e1e:	b672      	cpsid	i
 8014e20:	f383 8811 	msr	BASEPRI, r3
 8014e24:	f3bf 8f6f 	isb	sy
 8014e28:	f3bf 8f4f 	dsb	sy
 8014e2c:	b662      	cpsie	i
 8014e2e:	61fb      	str	r3, [r7, #28]
}
 8014e30:	bf00      	nop
 8014e32:	bf00      	nop
 8014e34:	e7fd      	b.n	8014e32 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014e36:	2358      	movs	r3, #88	@ 0x58
 8014e38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014e3a:	693b      	ldr	r3, [r7, #16]
 8014e3c:	2b58      	cmp	r3, #88	@ 0x58
 8014e3e:	d00d      	beq.n	8014e5c <xTaskCreateStatic+0x78>
	__asm volatile
 8014e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e44:	b672      	cpsid	i
 8014e46:	f383 8811 	msr	BASEPRI, r3
 8014e4a:	f3bf 8f6f 	isb	sy
 8014e4e:	f3bf 8f4f 	dsb	sy
 8014e52:	b662      	cpsie	i
 8014e54:	61bb      	str	r3, [r7, #24]
}
 8014e56:	bf00      	nop
 8014e58:	bf00      	nop
 8014e5a:	e7fd      	b.n	8014e58 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014e5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d01e      	beq.n	8014ea2 <xTaskCreateStatic+0xbe>
 8014e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d01b      	beq.n	8014ea2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014e72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e76:	2202      	movs	r2, #2
 8014e78:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	9303      	str	r3, [sp, #12]
 8014e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e82:	9302      	str	r3, [sp, #8]
 8014e84:	f107 0314 	add.w	r3, r7, #20
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e8c:	9300      	str	r3, [sp, #0]
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	687a      	ldr	r2, [r7, #4]
 8014e92:	68b9      	ldr	r1, [r7, #8]
 8014e94:	68f8      	ldr	r0, [r7, #12]
 8014e96:	f000 f850 	bl	8014f3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014e9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014e9c:	f000 f8e2 	bl	8015064 <prvAddNewTaskToReadyList>
 8014ea0:	e001      	b.n	8014ea6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014ea6:	697b      	ldr	r3, [r7, #20]
	}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3728      	adds	r7, #40	@ 0x28
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b08c      	sub	sp, #48	@ 0x30
 8014eb4:	af04      	add	r7, sp, #16
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	603b      	str	r3, [r7, #0]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014ec0:	88fb      	ldrh	r3, [r7, #6]
 8014ec2:	009b      	lsls	r3, r3, #2
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f001 f927 	bl	8016118 <pvPortMalloc>
 8014eca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d00e      	beq.n	8014ef0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014ed2:	2058      	movs	r0, #88	@ 0x58
 8014ed4:	f001 f920 	bl	8016118 <pvPortMalloc>
 8014ed8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014eda:	69fb      	ldr	r3, [r7, #28]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d003      	beq.n	8014ee8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014ee0:	69fb      	ldr	r3, [r7, #28]
 8014ee2:	697a      	ldr	r2, [r7, #20]
 8014ee4:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ee6:	e005      	b.n	8014ef4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014ee8:	6978      	ldr	r0, [r7, #20]
 8014eea:	f001 f9e7 	bl	80162bc <vPortFree>
 8014eee:	e001      	b.n	8014ef4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d017      	beq.n	8014f2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014efa:	69fb      	ldr	r3, [r7, #28]
 8014efc:	2200      	movs	r2, #0
 8014efe:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014f02:	88fa      	ldrh	r2, [r7, #6]
 8014f04:	2300      	movs	r3, #0
 8014f06:	9303      	str	r3, [sp, #12]
 8014f08:	69fb      	ldr	r3, [r7, #28]
 8014f0a:	9302      	str	r3, [sp, #8]
 8014f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f0e:	9301      	str	r3, [sp, #4]
 8014f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f12:	9300      	str	r3, [sp, #0]
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	68b9      	ldr	r1, [r7, #8]
 8014f18:	68f8      	ldr	r0, [r7, #12]
 8014f1a:	f000 f80e 	bl	8014f3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014f1e:	69f8      	ldr	r0, [r7, #28]
 8014f20:	f000 f8a0 	bl	8015064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014f24:	2301      	movs	r3, #1
 8014f26:	61bb      	str	r3, [r7, #24]
 8014f28:	e002      	b.n	8014f30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014f30:	69bb      	ldr	r3, [r7, #24]
	}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3720      	adds	r7, #32
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}

08014f3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014f3a:	b580      	push	{r7, lr}
 8014f3c:	b088      	sub	sp, #32
 8014f3e:	af00      	add	r7, sp, #0
 8014f40:	60f8      	str	r0, [r7, #12]
 8014f42:	60b9      	str	r1, [r7, #8]
 8014f44:	607a      	str	r2, [r7, #4]
 8014f46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f4a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	009b      	lsls	r3, r3, #2
 8014f50:	461a      	mov	r2, r3
 8014f52:	21a5      	movs	r1, #165	@ 0xa5
 8014f54:	f001 ff18 	bl	8016d88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014f5c:	6879      	ldr	r1, [r7, #4]
 8014f5e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014f62:	440b      	add	r3, r1
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	4413      	add	r3, r2
 8014f68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014f6a:	69bb      	ldr	r3, [r7, #24]
 8014f6c:	f023 0307 	bic.w	r3, r3, #7
 8014f70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014f72:	69bb      	ldr	r3, [r7, #24]
 8014f74:	f003 0307 	and.w	r3, r3, #7
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00d      	beq.n	8014f98 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8014f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f80:	b672      	cpsid	i
 8014f82:	f383 8811 	msr	BASEPRI, r3
 8014f86:	f3bf 8f6f 	isb	sy
 8014f8a:	f3bf 8f4f 	dsb	sy
 8014f8e:	b662      	cpsie	i
 8014f90:	617b      	str	r3, [r7, #20]
}
 8014f92:	bf00      	nop
 8014f94:	bf00      	nop
 8014f96:	e7fd      	b.n	8014f94 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d01f      	beq.n	8014fde <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	61fb      	str	r3, [r7, #28]
 8014fa2:	e012      	b.n	8014fca <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014fa4:	68ba      	ldr	r2, [r7, #8]
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	4413      	add	r3, r2
 8014faa:	7819      	ldrb	r1, [r3, #0]
 8014fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	4413      	add	r3, r2
 8014fb2:	3334      	adds	r3, #52	@ 0x34
 8014fb4:	460a      	mov	r2, r1
 8014fb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014fb8:	68ba      	ldr	r2, [r7, #8]
 8014fba:	69fb      	ldr	r3, [r7, #28]
 8014fbc:	4413      	add	r3, r2
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d006      	beq.n	8014fd2 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	61fb      	str	r3, [r7, #28]
 8014fca:	69fb      	ldr	r3, [r7, #28]
 8014fcc:	2b0f      	cmp	r3, #15
 8014fce:	d9e9      	bls.n	8014fa4 <prvInitialiseNewTask+0x6a>
 8014fd0:	e000      	b.n	8014fd4 <prvInitialiseNewTask+0x9a>
			{
				break;
 8014fd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014fdc:	e003      	b.n	8014fe6 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fe8:	2b06      	cmp	r3, #6
 8014fea:	d901      	bls.n	8014ff0 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014fec:	2306      	movs	r3, #6
 8014fee:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ffa:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ffe:	2200      	movs	r2, #0
 8015000:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015004:	3304      	adds	r3, #4
 8015006:	4618      	mov	r0, r3
 8015008:	f7ff f892 	bl	8014130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801500e:	3318      	adds	r3, #24
 8015010:	4618      	mov	r0, r3
 8015012:	f7ff f88d 	bl	8014130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801501a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801501e:	f1c3 0207 	rsb	r2, r3, #7
 8015022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015024:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801502a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801502e:	2200      	movs	r2, #0
 8015030:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015034:	2200      	movs	r2, #0
 8015036:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801503a:	2200      	movs	r2, #0
 801503c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015040:	683a      	ldr	r2, [r7, #0]
 8015042:	68f9      	ldr	r1, [r7, #12]
 8015044:	69b8      	ldr	r0, [r7, #24]
 8015046:	f000 fe27 	bl	8015c98 <pxPortInitialiseStack>
 801504a:	4602      	mov	r2, r0
 801504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801504e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015052:	2b00      	cmp	r3, #0
 8015054:	d002      	beq.n	801505c <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801505a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801505c:	bf00      	nop
 801505e:	3720      	adds	r7, #32
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}

08015064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801506c:	f000 ff26 	bl	8015ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015070:	4b2a      	ldr	r3, [pc, #168]	@ (801511c <prvAddNewTaskToReadyList+0xb8>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	3301      	adds	r3, #1
 8015076:	4a29      	ldr	r2, [pc, #164]	@ (801511c <prvAddNewTaskToReadyList+0xb8>)
 8015078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801507a:	4b29      	ldr	r3, [pc, #164]	@ (8015120 <prvAddNewTaskToReadyList+0xbc>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d109      	bne.n	8015096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015082:	4a27      	ldr	r2, [pc, #156]	@ (8015120 <prvAddNewTaskToReadyList+0xbc>)
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015088:	4b24      	ldr	r3, [pc, #144]	@ (801511c <prvAddNewTaskToReadyList+0xb8>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b01      	cmp	r3, #1
 801508e:	d110      	bne.n	80150b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015090:	f000 fc32 	bl	80158f8 <prvInitialiseTaskLists>
 8015094:	e00d      	b.n	80150b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015096:	4b23      	ldr	r3, [pc, #140]	@ (8015124 <prvAddNewTaskToReadyList+0xc0>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d109      	bne.n	80150b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801509e:	4b20      	ldr	r3, [pc, #128]	@ (8015120 <prvAddNewTaskToReadyList+0xbc>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d802      	bhi.n	80150b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80150ac:	4a1c      	ldr	r2, [pc, #112]	@ (8015120 <prvAddNewTaskToReadyList+0xbc>)
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80150b2:	4b1d      	ldr	r3, [pc, #116]	@ (8015128 <prvAddNewTaskToReadyList+0xc4>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	3301      	adds	r3, #1
 80150b8:	4a1b      	ldr	r2, [pc, #108]	@ (8015128 <prvAddNewTaskToReadyList+0xc4>)
 80150ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150c0:	2201      	movs	r2, #1
 80150c2:	409a      	lsls	r2, r3
 80150c4:	4b19      	ldr	r3, [pc, #100]	@ (801512c <prvAddNewTaskToReadyList+0xc8>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	4313      	orrs	r3, r2
 80150ca:	4a18      	ldr	r2, [pc, #96]	@ (801512c <prvAddNewTaskToReadyList+0xc8>)
 80150cc:	6013      	str	r3, [r2, #0]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150d2:	4613      	mov	r3, r2
 80150d4:	009b      	lsls	r3, r3, #2
 80150d6:	4413      	add	r3, r2
 80150d8:	009b      	lsls	r3, r3, #2
 80150da:	4a15      	ldr	r2, [pc, #84]	@ (8015130 <prvAddNewTaskToReadyList+0xcc>)
 80150dc:	441a      	add	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	3304      	adds	r3, #4
 80150e2:	4619      	mov	r1, r3
 80150e4:	4610      	mov	r0, r2
 80150e6:	f7ff f830 	bl	801414a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80150ea:	f000 ff1d 	bl	8015f28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80150ee:	4b0d      	ldr	r3, [pc, #52]	@ (8015124 <prvAddNewTaskToReadyList+0xc0>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d00e      	beq.n	8015114 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80150f6:	4b0a      	ldr	r3, [pc, #40]	@ (8015120 <prvAddNewTaskToReadyList+0xbc>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015100:	429a      	cmp	r2, r3
 8015102:	d207      	bcs.n	8015114 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015104:	4b0b      	ldr	r3, [pc, #44]	@ (8015134 <prvAddNewTaskToReadyList+0xd0>)
 8015106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801510a:	601a      	str	r2, [r3, #0]
 801510c:	f3bf 8f4f 	dsb	sy
 8015110:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015114:	bf00      	nop
 8015116:	3708      	adds	r7, #8
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	2000115c 	.word	0x2000115c
 8015120:	2000105c 	.word	0x2000105c
 8015124:	20001168 	.word	0x20001168
 8015128:	20001178 	.word	0x20001178
 801512c:	20001164 	.word	0x20001164
 8015130:	20001060 	.word	0x20001060
 8015134:	e000ed04 	.word	0xe000ed04

08015138 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015140:	2300      	movs	r3, #0
 8015142:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d01a      	beq.n	8015180 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801514a:	4b15      	ldr	r3, [pc, #84]	@ (80151a0 <vTaskDelay+0x68>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d00d      	beq.n	801516e <vTaskDelay+0x36>
	__asm volatile
 8015152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015156:	b672      	cpsid	i
 8015158:	f383 8811 	msr	BASEPRI, r3
 801515c:	f3bf 8f6f 	isb	sy
 8015160:	f3bf 8f4f 	dsb	sy
 8015164:	b662      	cpsie	i
 8015166:	60bb      	str	r3, [r7, #8]
}
 8015168:	bf00      	nop
 801516a:	bf00      	nop
 801516c:	e7fd      	b.n	801516a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801516e:	f000 f881 	bl	8015274 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015172:	2100      	movs	r1, #0
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f000 fd29 	bl	8015bcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801517a:	f000 f889 	bl	8015290 <xTaskResumeAll>
 801517e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d107      	bne.n	8015196 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8015186:	4b07      	ldr	r3, [pc, #28]	@ (80151a4 <vTaskDelay+0x6c>)
 8015188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801518c:	601a      	str	r2, [r3, #0]
 801518e:	f3bf 8f4f 	dsb	sy
 8015192:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015196:	bf00      	nop
 8015198:	3710      	adds	r7, #16
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	20001184 	.word	0x20001184
 80151a4:	e000ed04 	.word	0xe000ed04

080151a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b08a      	sub	sp, #40	@ 0x28
 80151ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80151ae:	2300      	movs	r3, #0
 80151b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80151b2:	2300      	movs	r3, #0
 80151b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80151b6:	463a      	mov	r2, r7
 80151b8:	1d39      	adds	r1, r7, #4
 80151ba:	f107 0308 	add.w	r3, r7, #8
 80151be:	4618      	mov	r0, r3
 80151c0:	f7eb fef6 	bl	8000fb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80151c4:	6839      	ldr	r1, [r7, #0]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	9202      	str	r2, [sp, #8]
 80151cc:	9301      	str	r3, [sp, #4]
 80151ce:	2300      	movs	r3, #0
 80151d0:	9300      	str	r3, [sp, #0]
 80151d2:	2300      	movs	r3, #0
 80151d4:	460a      	mov	r2, r1
 80151d6:	4921      	ldr	r1, [pc, #132]	@ (801525c <vTaskStartScheduler+0xb4>)
 80151d8:	4821      	ldr	r0, [pc, #132]	@ (8015260 <vTaskStartScheduler+0xb8>)
 80151da:	f7ff fe03 	bl	8014de4 <xTaskCreateStatic>
 80151de:	4603      	mov	r3, r0
 80151e0:	4a20      	ldr	r2, [pc, #128]	@ (8015264 <vTaskStartScheduler+0xbc>)
 80151e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80151e4:	4b1f      	ldr	r3, [pc, #124]	@ (8015264 <vTaskStartScheduler+0xbc>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d002      	beq.n	80151f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80151ec:	2301      	movs	r3, #1
 80151ee:	617b      	str	r3, [r7, #20]
 80151f0:	e001      	b.n	80151f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80151f2:	2300      	movs	r3, #0
 80151f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d118      	bne.n	801522e <vTaskStartScheduler+0x86>
	__asm volatile
 80151fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015200:	b672      	cpsid	i
 8015202:	f383 8811 	msr	BASEPRI, r3
 8015206:	f3bf 8f6f 	isb	sy
 801520a:	f3bf 8f4f 	dsb	sy
 801520e:	b662      	cpsie	i
 8015210:	613b      	str	r3, [r7, #16]
}
 8015212:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015214:	4b14      	ldr	r3, [pc, #80]	@ (8015268 <vTaskStartScheduler+0xc0>)
 8015216:	f04f 32ff 	mov.w	r2, #4294967295
 801521a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801521c:	4b13      	ldr	r3, [pc, #76]	@ (801526c <vTaskStartScheduler+0xc4>)
 801521e:	2201      	movs	r2, #1
 8015220:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015222:	4b13      	ldr	r3, [pc, #76]	@ (8015270 <vTaskStartScheduler+0xc8>)
 8015224:	2200      	movs	r2, #0
 8015226:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015228:	f000 fdca 	bl	8015dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801522c:	e011      	b.n	8015252 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801522e:	697b      	ldr	r3, [r7, #20]
 8015230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015234:	d10d      	bne.n	8015252 <vTaskStartScheduler+0xaa>
	__asm volatile
 8015236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801523a:	b672      	cpsid	i
 801523c:	f383 8811 	msr	BASEPRI, r3
 8015240:	f3bf 8f6f 	isb	sy
 8015244:	f3bf 8f4f 	dsb	sy
 8015248:	b662      	cpsie	i
 801524a:	60fb      	str	r3, [r7, #12]
}
 801524c:	bf00      	nop
 801524e:	bf00      	nop
 8015250:	e7fd      	b.n	801524e <vTaskStartScheduler+0xa6>
}
 8015252:	bf00      	nop
 8015254:	3718      	adds	r7, #24
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	0801908c 	.word	0x0801908c
 8015260:	080158c5 	.word	0x080158c5
 8015264:	20001180 	.word	0x20001180
 8015268:	2000117c 	.word	0x2000117c
 801526c:	20001168 	.word	0x20001168
 8015270:	20001160 	.word	0x20001160

08015274 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015274:	b480      	push	{r7}
 8015276:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015278:	4b04      	ldr	r3, [pc, #16]	@ (801528c <vTaskSuspendAll+0x18>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	3301      	adds	r3, #1
 801527e:	4a03      	ldr	r2, [pc, #12]	@ (801528c <vTaskSuspendAll+0x18>)
 8015280:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8015282:	bf00      	nop
 8015284:	46bd      	mov	sp, r7
 8015286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528a:	4770      	bx	lr
 801528c:	20001184 	.word	0x20001184

08015290 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015296:	2300      	movs	r3, #0
 8015298:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801529a:	2300      	movs	r3, #0
 801529c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801529e:	4b43      	ldr	r3, [pc, #268]	@ (80153ac <xTaskResumeAll+0x11c>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d10d      	bne.n	80152c2 <xTaskResumeAll+0x32>
	__asm volatile
 80152a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152aa:	b672      	cpsid	i
 80152ac:	f383 8811 	msr	BASEPRI, r3
 80152b0:	f3bf 8f6f 	isb	sy
 80152b4:	f3bf 8f4f 	dsb	sy
 80152b8:	b662      	cpsie	i
 80152ba:	603b      	str	r3, [r7, #0]
}
 80152bc:	bf00      	nop
 80152be:	bf00      	nop
 80152c0:	e7fd      	b.n	80152be <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80152c2:	f000 fdfb 	bl	8015ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80152c6:	4b39      	ldr	r3, [pc, #228]	@ (80153ac <xTaskResumeAll+0x11c>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	3b01      	subs	r3, #1
 80152cc:	4a37      	ldr	r2, [pc, #220]	@ (80153ac <xTaskResumeAll+0x11c>)
 80152ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152d0:	4b36      	ldr	r3, [pc, #216]	@ (80153ac <xTaskResumeAll+0x11c>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d161      	bne.n	801539c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80152d8:	4b35      	ldr	r3, [pc, #212]	@ (80153b0 <xTaskResumeAll+0x120>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d05d      	beq.n	801539c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80152e0:	e02e      	b.n	8015340 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152e2:	4b34      	ldr	r3, [pc, #208]	@ (80153b4 <xTaskResumeAll+0x124>)
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	68db      	ldr	r3, [r3, #12]
 80152e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	3318      	adds	r3, #24
 80152ee:	4618      	mov	r0, r3
 80152f0:	f7fe ff88 	bl	8014204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	3304      	adds	r3, #4
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7fe ff83 	bl	8014204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015302:	2201      	movs	r2, #1
 8015304:	409a      	lsls	r2, r3
 8015306:	4b2c      	ldr	r3, [pc, #176]	@ (80153b8 <xTaskResumeAll+0x128>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	4313      	orrs	r3, r2
 801530c:	4a2a      	ldr	r2, [pc, #168]	@ (80153b8 <xTaskResumeAll+0x128>)
 801530e:	6013      	str	r3, [r2, #0]
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015314:	4613      	mov	r3, r2
 8015316:	009b      	lsls	r3, r3, #2
 8015318:	4413      	add	r3, r2
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	4a27      	ldr	r2, [pc, #156]	@ (80153bc <xTaskResumeAll+0x12c>)
 801531e:	441a      	add	r2, r3
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	3304      	adds	r3, #4
 8015324:	4619      	mov	r1, r3
 8015326:	4610      	mov	r0, r2
 8015328:	f7fe ff0f 	bl	801414a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015330:	4b23      	ldr	r3, [pc, #140]	@ (80153c0 <xTaskResumeAll+0x130>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015336:	429a      	cmp	r2, r3
 8015338:	d302      	bcc.n	8015340 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801533a:	4b22      	ldr	r3, [pc, #136]	@ (80153c4 <xTaskResumeAll+0x134>)
 801533c:	2201      	movs	r2, #1
 801533e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015340:	4b1c      	ldr	r3, [pc, #112]	@ (80153b4 <xTaskResumeAll+0x124>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d1cc      	bne.n	80152e2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d001      	beq.n	8015352 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801534e:	f000 fb73 	bl	8015a38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015352:	4b1d      	ldr	r3, [pc, #116]	@ (80153c8 <xTaskResumeAll+0x138>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d010      	beq.n	8015380 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801535e:	f000 f859 	bl	8015414 <xTaskIncrementTick>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d002      	beq.n	801536e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8015368:	4b16      	ldr	r3, [pc, #88]	@ (80153c4 <xTaskResumeAll+0x134>)
 801536a:	2201      	movs	r2, #1
 801536c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	3b01      	subs	r3, #1
 8015372:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d1f1      	bne.n	801535e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801537a:	4b13      	ldr	r3, [pc, #76]	@ (80153c8 <xTaskResumeAll+0x138>)
 801537c:	2200      	movs	r2, #0
 801537e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015380:	4b10      	ldr	r3, [pc, #64]	@ (80153c4 <xTaskResumeAll+0x134>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d009      	beq.n	801539c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015388:	2301      	movs	r3, #1
 801538a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801538c:	4b0f      	ldr	r3, [pc, #60]	@ (80153cc <xTaskResumeAll+0x13c>)
 801538e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015392:	601a      	str	r2, [r3, #0]
 8015394:	f3bf 8f4f 	dsb	sy
 8015398:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801539c:	f000 fdc4 	bl	8015f28 <vPortExitCritical>

	return xAlreadyYielded;
 80153a0:	68bb      	ldr	r3, [r7, #8]
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3710      	adds	r7, #16
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
 80153aa:	bf00      	nop
 80153ac:	20001184 	.word	0x20001184
 80153b0:	2000115c 	.word	0x2000115c
 80153b4:	2000111c 	.word	0x2000111c
 80153b8:	20001164 	.word	0x20001164
 80153bc:	20001060 	.word	0x20001060
 80153c0:	2000105c 	.word	0x2000105c
 80153c4:	20001170 	.word	0x20001170
 80153c8:	2000116c 	.word	0x2000116c
 80153cc:	e000ed04 	.word	0xe000ed04

080153d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80153d0:	b480      	push	{r7}
 80153d2:	b083      	sub	sp, #12
 80153d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80153d6:	4b05      	ldr	r3, [pc, #20]	@ (80153ec <xTaskGetTickCount+0x1c>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80153dc:	687b      	ldr	r3, [r7, #4]
}
 80153de:	4618      	mov	r0, r3
 80153e0:	370c      	adds	r7, #12
 80153e2:	46bd      	mov	sp, r7
 80153e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e8:	4770      	bx	lr
 80153ea:	bf00      	nop
 80153ec:	20001160 	.word	0x20001160

080153f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80153f6:	f000 fe49 	bl	801608c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80153fa:	2300      	movs	r3, #0
 80153fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80153fe:	4b04      	ldr	r3, [pc, #16]	@ (8015410 <xTaskGetTickCountFromISR+0x20>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015404:	683b      	ldr	r3, [r7, #0]
}
 8015406:	4618      	mov	r0, r3
 8015408:	3708      	adds	r7, #8
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	20001160 	.word	0x20001160

08015414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b086      	sub	sp, #24
 8015418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801541a:	2300      	movs	r3, #0
 801541c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801541e:	4b50      	ldr	r3, [pc, #320]	@ (8015560 <xTaskIncrementTick+0x14c>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	f040 808b 	bne.w	801553e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015428:	4b4e      	ldr	r3, [pc, #312]	@ (8015564 <xTaskIncrementTick+0x150>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	3301      	adds	r3, #1
 801542e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015430:	4a4c      	ldr	r2, [pc, #304]	@ (8015564 <xTaskIncrementTick+0x150>)
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015436:	693b      	ldr	r3, [r7, #16]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d123      	bne.n	8015484 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 801543c:	4b4a      	ldr	r3, [pc, #296]	@ (8015568 <xTaskIncrementTick+0x154>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d00d      	beq.n	8015462 <xTaskIncrementTick+0x4e>
	__asm volatile
 8015446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801544a:	b672      	cpsid	i
 801544c:	f383 8811 	msr	BASEPRI, r3
 8015450:	f3bf 8f6f 	isb	sy
 8015454:	f3bf 8f4f 	dsb	sy
 8015458:	b662      	cpsie	i
 801545a:	603b      	str	r3, [r7, #0]
}
 801545c:	bf00      	nop
 801545e:	bf00      	nop
 8015460:	e7fd      	b.n	801545e <xTaskIncrementTick+0x4a>
 8015462:	4b41      	ldr	r3, [pc, #260]	@ (8015568 <xTaskIncrementTick+0x154>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	60fb      	str	r3, [r7, #12]
 8015468:	4b40      	ldr	r3, [pc, #256]	@ (801556c <xTaskIncrementTick+0x158>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	4a3e      	ldr	r2, [pc, #248]	@ (8015568 <xTaskIncrementTick+0x154>)
 801546e:	6013      	str	r3, [r2, #0]
 8015470:	4a3e      	ldr	r2, [pc, #248]	@ (801556c <xTaskIncrementTick+0x158>)
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	6013      	str	r3, [r2, #0]
 8015476:	4b3e      	ldr	r3, [pc, #248]	@ (8015570 <xTaskIncrementTick+0x15c>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	3301      	adds	r3, #1
 801547c:	4a3c      	ldr	r2, [pc, #240]	@ (8015570 <xTaskIncrementTick+0x15c>)
 801547e:	6013      	str	r3, [r2, #0]
 8015480:	f000 fada 	bl	8015a38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015484:	4b3b      	ldr	r3, [pc, #236]	@ (8015574 <xTaskIncrementTick+0x160>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	693a      	ldr	r2, [r7, #16]
 801548a:	429a      	cmp	r2, r3
 801548c:	d348      	bcc.n	8015520 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801548e:	4b36      	ldr	r3, [pc, #216]	@ (8015568 <xTaskIncrementTick+0x154>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d104      	bne.n	80154a2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015498:	4b36      	ldr	r3, [pc, #216]	@ (8015574 <xTaskIncrementTick+0x160>)
 801549a:	f04f 32ff 	mov.w	r2, #4294967295
 801549e:	601a      	str	r2, [r3, #0]
					break;
 80154a0:	e03e      	b.n	8015520 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154a2:	4b31      	ldr	r3, [pc, #196]	@ (8015568 <xTaskIncrementTick+0x154>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	68db      	ldr	r3, [r3, #12]
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	685b      	ldr	r3, [r3, #4]
 80154b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80154b2:	693a      	ldr	r2, [r7, #16]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d203      	bcs.n	80154c2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80154ba:	4a2e      	ldr	r2, [pc, #184]	@ (8015574 <xTaskIncrementTick+0x160>)
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80154c0:	e02e      	b.n	8015520 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	3304      	adds	r3, #4
 80154c6:	4618      	mov	r0, r3
 80154c8:	f7fe fe9c 	bl	8014204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80154cc:	68bb      	ldr	r3, [r7, #8]
 80154ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d004      	beq.n	80154de <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	3318      	adds	r3, #24
 80154d8:	4618      	mov	r0, r3
 80154da:	f7fe fe93 	bl	8014204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154e2:	2201      	movs	r2, #1
 80154e4:	409a      	lsls	r2, r3
 80154e6:	4b24      	ldr	r3, [pc, #144]	@ (8015578 <xTaskIncrementTick+0x164>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	4313      	orrs	r3, r2
 80154ec:	4a22      	ldr	r2, [pc, #136]	@ (8015578 <xTaskIncrementTick+0x164>)
 80154ee:	6013      	str	r3, [r2, #0]
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154f4:	4613      	mov	r3, r2
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	4413      	add	r3, r2
 80154fa:	009b      	lsls	r3, r3, #2
 80154fc:	4a1f      	ldr	r2, [pc, #124]	@ (801557c <xTaskIncrementTick+0x168>)
 80154fe:	441a      	add	r2, r3
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	3304      	adds	r3, #4
 8015504:	4619      	mov	r1, r3
 8015506:	4610      	mov	r0, r2
 8015508:	f7fe fe1f 	bl	801414a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015510:	4b1b      	ldr	r3, [pc, #108]	@ (8015580 <xTaskIncrementTick+0x16c>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015516:	429a      	cmp	r2, r3
 8015518:	d3b9      	bcc.n	801548e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801551a:	2301      	movs	r3, #1
 801551c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801551e:	e7b6      	b.n	801548e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015520:	4b17      	ldr	r3, [pc, #92]	@ (8015580 <xTaskIncrementTick+0x16c>)
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015526:	4915      	ldr	r1, [pc, #84]	@ (801557c <xTaskIncrementTick+0x168>)
 8015528:	4613      	mov	r3, r2
 801552a:	009b      	lsls	r3, r3, #2
 801552c:	4413      	add	r3, r2
 801552e:	009b      	lsls	r3, r3, #2
 8015530:	440b      	add	r3, r1
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	2b01      	cmp	r3, #1
 8015536:	d907      	bls.n	8015548 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8015538:	2301      	movs	r3, #1
 801553a:	617b      	str	r3, [r7, #20]
 801553c:	e004      	b.n	8015548 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801553e:	4b11      	ldr	r3, [pc, #68]	@ (8015584 <xTaskIncrementTick+0x170>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	3301      	adds	r3, #1
 8015544:	4a0f      	ldr	r2, [pc, #60]	@ (8015584 <xTaskIncrementTick+0x170>)
 8015546:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015548:	4b0f      	ldr	r3, [pc, #60]	@ (8015588 <xTaskIncrementTick+0x174>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d001      	beq.n	8015554 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8015550:	2301      	movs	r3, #1
 8015552:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015554:	697b      	ldr	r3, [r7, #20]
}
 8015556:	4618      	mov	r0, r3
 8015558:	3718      	adds	r7, #24
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	20001184 	.word	0x20001184
 8015564:	20001160 	.word	0x20001160
 8015568:	20001114 	.word	0x20001114
 801556c:	20001118 	.word	0x20001118
 8015570:	20001174 	.word	0x20001174
 8015574:	2000117c 	.word	0x2000117c
 8015578:	20001164 	.word	0x20001164
 801557c:	20001060 	.word	0x20001060
 8015580:	2000105c 	.word	0x2000105c
 8015584:	2000116c 	.word	0x2000116c
 8015588:	20001170 	.word	0x20001170

0801558c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b088      	sub	sp, #32
 8015590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015592:	4b3b      	ldr	r3, [pc, #236]	@ (8015680 <vTaskSwitchContext+0xf4>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d003      	beq.n	80155a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801559a:	4b3a      	ldr	r3, [pc, #232]	@ (8015684 <vTaskSwitchContext+0xf8>)
 801559c:	2201      	movs	r2, #1
 801559e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80155a0:	e069      	b.n	8015676 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80155a2:	4b38      	ldr	r3, [pc, #224]	@ (8015684 <vTaskSwitchContext+0xf8>)
 80155a4:	2200      	movs	r2, #0
 80155a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80155a8:	4b37      	ldr	r3, [pc, #220]	@ (8015688 <vTaskSwitchContext+0xfc>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155ae:	61fb      	str	r3, [r7, #28]
 80155b0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80155b4:	61bb      	str	r3, [r7, #24]
 80155b6:	69fb      	ldr	r3, [r7, #28]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	69ba      	ldr	r2, [r7, #24]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d111      	bne.n	80155e4 <vTaskSwitchContext+0x58>
 80155c0:	69fb      	ldr	r3, [r7, #28]
 80155c2:	3304      	adds	r3, #4
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	69ba      	ldr	r2, [r7, #24]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d10b      	bne.n	80155e4 <vTaskSwitchContext+0x58>
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	3308      	adds	r3, #8
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	69ba      	ldr	r2, [r7, #24]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d105      	bne.n	80155e4 <vTaskSwitchContext+0x58>
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	330c      	adds	r3, #12
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	69ba      	ldr	r2, [r7, #24]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d008      	beq.n	80155f6 <vTaskSwitchContext+0x6a>
 80155e4:	4b28      	ldr	r3, [pc, #160]	@ (8015688 <vTaskSwitchContext+0xfc>)
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	4b27      	ldr	r3, [pc, #156]	@ (8015688 <vTaskSwitchContext+0xfc>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	3334      	adds	r3, #52	@ 0x34
 80155ee:	4619      	mov	r1, r3
 80155f0:	4610      	mov	r0, r2
 80155f2:	f7eb fcca 	bl	8000f8a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155f6:	4b25      	ldr	r3, [pc, #148]	@ (801568c <vTaskSwitchContext+0x100>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	fab3 f383 	clz	r3, r3
 8015602:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015604:	7afb      	ldrb	r3, [r7, #11]
 8015606:	f1c3 031f 	rsb	r3, r3, #31
 801560a:	617b      	str	r3, [r7, #20]
 801560c:	4920      	ldr	r1, [pc, #128]	@ (8015690 <vTaskSwitchContext+0x104>)
 801560e:	697a      	ldr	r2, [r7, #20]
 8015610:	4613      	mov	r3, r2
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	4413      	add	r3, r2
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	440b      	add	r3, r1
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d10d      	bne.n	801563c <vTaskSwitchContext+0xb0>
	__asm volatile
 8015620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015624:	b672      	cpsid	i
 8015626:	f383 8811 	msr	BASEPRI, r3
 801562a:	f3bf 8f6f 	isb	sy
 801562e:	f3bf 8f4f 	dsb	sy
 8015632:	b662      	cpsie	i
 8015634:	607b      	str	r3, [r7, #4]
}
 8015636:	bf00      	nop
 8015638:	bf00      	nop
 801563a:	e7fd      	b.n	8015638 <vTaskSwitchContext+0xac>
 801563c:	697a      	ldr	r2, [r7, #20]
 801563e:	4613      	mov	r3, r2
 8015640:	009b      	lsls	r3, r3, #2
 8015642:	4413      	add	r3, r2
 8015644:	009b      	lsls	r3, r3, #2
 8015646:	4a12      	ldr	r2, [pc, #72]	@ (8015690 <vTaskSwitchContext+0x104>)
 8015648:	4413      	add	r3, r2
 801564a:	613b      	str	r3, [r7, #16]
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	685b      	ldr	r3, [r3, #4]
 8015650:	685a      	ldr	r2, [r3, #4]
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	605a      	str	r2, [r3, #4]
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	685a      	ldr	r2, [r3, #4]
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	3308      	adds	r3, #8
 801565e:	429a      	cmp	r2, r3
 8015660:	d104      	bne.n	801566c <vTaskSwitchContext+0xe0>
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	685a      	ldr	r2, [r3, #4]
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	605a      	str	r2, [r3, #4]
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	685b      	ldr	r3, [r3, #4]
 8015670:	68db      	ldr	r3, [r3, #12]
 8015672:	4a05      	ldr	r2, [pc, #20]	@ (8015688 <vTaskSwitchContext+0xfc>)
 8015674:	6013      	str	r3, [r2, #0]
}
 8015676:	bf00      	nop
 8015678:	3720      	adds	r7, #32
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}
 801567e:	bf00      	nop
 8015680:	20001184 	.word	0x20001184
 8015684:	20001170 	.word	0x20001170
 8015688:	2000105c 	.word	0x2000105c
 801568c:	20001164 	.word	0x20001164
 8015690:	20001060 	.word	0x20001060

08015694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d10d      	bne.n	80156c0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80156a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156a8:	b672      	cpsid	i
 80156aa:	f383 8811 	msr	BASEPRI, r3
 80156ae:	f3bf 8f6f 	isb	sy
 80156b2:	f3bf 8f4f 	dsb	sy
 80156b6:	b662      	cpsie	i
 80156b8:	60fb      	str	r3, [r7, #12]
}
 80156ba:	bf00      	nop
 80156bc:	bf00      	nop
 80156be:	e7fd      	b.n	80156bc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80156c0:	4b07      	ldr	r3, [pc, #28]	@ (80156e0 <vTaskPlaceOnEventList+0x4c>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	3318      	adds	r3, #24
 80156c6:	4619      	mov	r1, r3
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7fe fd62 	bl	8014192 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80156ce:	2101      	movs	r1, #1
 80156d0:	6838      	ldr	r0, [r7, #0]
 80156d2:	f000 fa7b 	bl	8015bcc <prvAddCurrentTaskToDelayedList>
}
 80156d6:	bf00      	nop
 80156d8:	3710      	adds	r7, #16
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	2000105c 	.word	0x2000105c

080156e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b086      	sub	sp, #24
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	68db      	ldr	r3, [r3, #12]
 80156f0:	68db      	ldr	r3, [r3, #12]
 80156f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d10d      	bne.n	8015716 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80156fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156fe:	b672      	cpsid	i
 8015700:	f383 8811 	msr	BASEPRI, r3
 8015704:	f3bf 8f6f 	isb	sy
 8015708:	f3bf 8f4f 	dsb	sy
 801570c:	b662      	cpsie	i
 801570e:	60fb      	str	r3, [r7, #12]
}
 8015710:	bf00      	nop
 8015712:	bf00      	nop
 8015714:	e7fd      	b.n	8015712 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015716:	693b      	ldr	r3, [r7, #16]
 8015718:	3318      	adds	r3, #24
 801571a:	4618      	mov	r0, r3
 801571c:	f7fe fd72 	bl	8014204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015720:	4b1d      	ldr	r3, [pc, #116]	@ (8015798 <xTaskRemoveFromEventList+0xb4>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d11c      	bne.n	8015762 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015728:	693b      	ldr	r3, [r7, #16]
 801572a:	3304      	adds	r3, #4
 801572c:	4618      	mov	r0, r3
 801572e:	f7fe fd69 	bl	8014204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015732:	693b      	ldr	r3, [r7, #16]
 8015734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015736:	2201      	movs	r2, #1
 8015738:	409a      	lsls	r2, r3
 801573a:	4b18      	ldr	r3, [pc, #96]	@ (801579c <xTaskRemoveFromEventList+0xb8>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	4313      	orrs	r3, r2
 8015740:	4a16      	ldr	r2, [pc, #88]	@ (801579c <xTaskRemoveFromEventList+0xb8>)
 8015742:	6013      	str	r3, [r2, #0]
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015748:	4613      	mov	r3, r2
 801574a:	009b      	lsls	r3, r3, #2
 801574c:	4413      	add	r3, r2
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	4a13      	ldr	r2, [pc, #76]	@ (80157a0 <xTaskRemoveFromEventList+0xbc>)
 8015752:	441a      	add	r2, r3
 8015754:	693b      	ldr	r3, [r7, #16]
 8015756:	3304      	adds	r3, #4
 8015758:	4619      	mov	r1, r3
 801575a:	4610      	mov	r0, r2
 801575c:	f7fe fcf5 	bl	801414a <vListInsertEnd>
 8015760:	e005      	b.n	801576e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	3318      	adds	r3, #24
 8015766:	4619      	mov	r1, r3
 8015768:	480e      	ldr	r0, [pc, #56]	@ (80157a4 <xTaskRemoveFromEventList+0xc0>)
 801576a:	f7fe fcee 	bl	801414a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015772:	4b0d      	ldr	r3, [pc, #52]	@ (80157a8 <xTaskRemoveFromEventList+0xc4>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015778:	429a      	cmp	r2, r3
 801577a:	d905      	bls.n	8015788 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801577c:	2301      	movs	r3, #1
 801577e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015780:	4b0a      	ldr	r3, [pc, #40]	@ (80157ac <xTaskRemoveFromEventList+0xc8>)
 8015782:	2201      	movs	r2, #1
 8015784:	601a      	str	r2, [r3, #0]
 8015786:	e001      	b.n	801578c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8015788:	2300      	movs	r3, #0
 801578a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801578c:	697b      	ldr	r3, [r7, #20]
}
 801578e:	4618      	mov	r0, r3
 8015790:	3718      	adds	r7, #24
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	20001184 	.word	0x20001184
 801579c:	20001164 	.word	0x20001164
 80157a0:	20001060 	.word	0x20001060
 80157a4:	2000111c 	.word	0x2000111c
 80157a8:	2000105c 	.word	0x2000105c
 80157ac:	20001170 	.word	0x20001170

080157b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80157b0:	b480      	push	{r7}
 80157b2:	b083      	sub	sp, #12
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80157b8:	4b06      	ldr	r3, [pc, #24]	@ (80157d4 <vTaskInternalSetTimeOutState+0x24>)
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80157c0:	4b05      	ldr	r3, [pc, #20]	@ (80157d8 <vTaskInternalSetTimeOutState+0x28>)
 80157c2:	681a      	ldr	r2, [r3, #0]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	605a      	str	r2, [r3, #4]
}
 80157c8:	bf00      	nop
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr
 80157d4:	20001174 	.word	0x20001174
 80157d8:	20001160 	.word	0x20001160

080157dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b088      	sub	sp, #32
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d10d      	bne.n	8015808 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80157ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157f0:	b672      	cpsid	i
 80157f2:	f383 8811 	msr	BASEPRI, r3
 80157f6:	f3bf 8f6f 	isb	sy
 80157fa:	f3bf 8f4f 	dsb	sy
 80157fe:	b662      	cpsie	i
 8015800:	613b      	str	r3, [r7, #16]
}
 8015802:	bf00      	nop
 8015804:	bf00      	nop
 8015806:	e7fd      	b.n	8015804 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d10d      	bne.n	801582a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015812:	b672      	cpsid	i
 8015814:	f383 8811 	msr	BASEPRI, r3
 8015818:	f3bf 8f6f 	isb	sy
 801581c:	f3bf 8f4f 	dsb	sy
 8015820:	b662      	cpsie	i
 8015822:	60fb      	str	r3, [r7, #12]
}
 8015824:	bf00      	nop
 8015826:	bf00      	nop
 8015828:	e7fd      	b.n	8015826 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801582a:	f000 fb47 	bl	8015ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801582e:	4b1d      	ldr	r3, [pc, #116]	@ (80158a4 <xTaskCheckForTimeOut+0xc8>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	685b      	ldr	r3, [r3, #4]
 8015838:	69ba      	ldr	r2, [r7, #24]
 801583a:	1ad3      	subs	r3, r2, r3
 801583c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015846:	d102      	bne.n	801584e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015848:	2300      	movs	r3, #0
 801584a:	61fb      	str	r3, [r7, #28]
 801584c:	e023      	b.n	8015896 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	4b15      	ldr	r3, [pc, #84]	@ (80158a8 <xTaskCheckForTimeOut+0xcc>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	429a      	cmp	r2, r3
 8015858:	d007      	beq.n	801586a <xTaskCheckForTimeOut+0x8e>
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	69ba      	ldr	r2, [r7, #24]
 8015860:	429a      	cmp	r2, r3
 8015862:	d302      	bcc.n	801586a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015864:	2301      	movs	r3, #1
 8015866:	61fb      	str	r3, [r7, #28]
 8015868:	e015      	b.n	8015896 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	697a      	ldr	r2, [r7, #20]
 8015870:	429a      	cmp	r2, r3
 8015872:	d20b      	bcs.n	801588c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	1ad2      	subs	r2, r2, r3
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f7ff ff95 	bl	80157b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015886:	2300      	movs	r3, #0
 8015888:	61fb      	str	r3, [r7, #28]
 801588a:	e004      	b.n	8015896 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	2200      	movs	r2, #0
 8015890:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015892:	2301      	movs	r3, #1
 8015894:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015896:	f000 fb47 	bl	8015f28 <vPortExitCritical>

	return xReturn;
 801589a:	69fb      	ldr	r3, [r7, #28]
}
 801589c:	4618      	mov	r0, r3
 801589e:	3720      	adds	r7, #32
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}
 80158a4:	20001160 	.word	0x20001160
 80158a8:	20001174 	.word	0x20001174

080158ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80158ac:	b480      	push	{r7}
 80158ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80158b0:	4b03      	ldr	r3, [pc, #12]	@ (80158c0 <vTaskMissedYield+0x14>)
 80158b2:	2201      	movs	r2, #1
 80158b4:	601a      	str	r2, [r3, #0]
}
 80158b6:	bf00      	nop
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr
 80158c0:	20001170 	.word	0x20001170

080158c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80158cc:	f000 f854 	bl	8015978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80158d0:	4b07      	ldr	r3, [pc, #28]	@ (80158f0 <prvIdleTask+0x2c>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d907      	bls.n	80158e8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80158d8:	4b06      	ldr	r3, [pc, #24]	@ (80158f4 <prvIdleTask+0x30>)
 80158da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80158de:	601a      	str	r2, [r3, #0]
 80158e0:	f3bf 8f4f 	dsb	sy
 80158e4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80158e8:	f7eb fb48 	bl	8000f7c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80158ec:	e7ee      	b.n	80158cc <prvIdleTask+0x8>
 80158ee:	bf00      	nop
 80158f0:	20001060 	.word	0x20001060
 80158f4:	e000ed04 	.word	0xe000ed04

080158f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b082      	sub	sp, #8
 80158fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80158fe:	2300      	movs	r3, #0
 8015900:	607b      	str	r3, [r7, #4]
 8015902:	e00c      	b.n	801591e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	4613      	mov	r3, r2
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	4413      	add	r3, r2
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	4a12      	ldr	r2, [pc, #72]	@ (8015958 <prvInitialiseTaskLists+0x60>)
 8015910:	4413      	add	r3, r2
 8015912:	4618      	mov	r0, r3
 8015914:	f7fe fbec 	bl	80140f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	3301      	adds	r3, #1
 801591c:	607b      	str	r3, [r7, #4]
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2b06      	cmp	r3, #6
 8015922:	d9ef      	bls.n	8015904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015924:	480d      	ldr	r0, [pc, #52]	@ (801595c <prvInitialiseTaskLists+0x64>)
 8015926:	f7fe fbe3 	bl	80140f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801592a:	480d      	ldr	r0, [pc, #52]	@ (8015960 <prvInitialiseTaskLists+0x68>)
 801592c:	f7fe fbe0 	bl	80140f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015930:	480c      	ldr	r0, [pc, #48]	@ (8015964 <prvInitialiseTaskLists+0x6c>)
 8015932:	f7fe fbdd 	bl	80140f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015936:	480c      	ldr	r0, [pc, #48]	@ (8015968 <prvInitialiseTaskLists+0x70>)
 8015938:	f7fe fbda 	bl	80140f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801593c:	480b      	ldr	r0, [pc, #44]	@ (801596c <prvInitialiseTaskLists+0x74>)
 801593e:	f7fe fbd7 	bl	80140f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015942:	4b0b      	ldr	r3, [pc, #44]	@ (8015970 <prvInitialiseTaskLists+0x78>)
 8015944:	4a05      	ldr	r2, [pc, #20]	@ (801595c <prvInitialiseTaskLists+0x64>)
 8015946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015948:	4b0a      	ldr	r3, [pc, #40]	@ (8015974 <prvInitialiseTaskLists+0x7c>)
 801594a:	4a05      	ldr	r2, [pc, #20]	@ (8015960 <prvInitialiseTaskLists+0x68>)
 801594c:	601a      	str	r2, [r3, #0]
}
 801594e:	bf00      	nop
 8015950:	3708      	adds	r7, #8
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}
 8015956:	bf00      	nop
 8015958:	20001060 	.word	0x20001060
 801595c:	200010ec 	.word	0x200010ec
 8015960:	20001100 	.word	0x20001100
 8015964:	2000111c 	.word	0x2000111c
 8015968:	20001130 	.word	0x20001130
 801596c:	20001148 	.word	0x20001148
 8015970:	20001114 	.word	0x20001114
 8015974:	20001118 	.word	0x20001118

08015978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b082      	sub	sp, #8
 801597c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801597e:	e019      	b.n	80159b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015980:	f000 fa9c 	bl	8015ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015984:	4b10      	ldr	r3, [pc, #64]	@ (80159c8 <prvCheckTasksWaitingTermination+0x50>)
 8015986:	68db      	ldr	r3, [r3, #12]
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	3304      	adds	r3, #4
 8015990:	4618      	mov	r0, r3
 8015992:	f7fe fc37 	bl	8014204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015996:	4b0d      	ldr	r3, [pc, #52]	@ (80159cc <prvCheckTasksWaitingTermination+0x54>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	3b01      	subs	r3, #1
 801599c:	4a0b      	ldr	r2, [pc, #44]	@ (80159cc <prvCheckTasksWaitingTermination+0x54>)
 801599e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80159a0:	4b0b      	ldr	r3, [pc, #44]	@ (80159d0 <prvCheckTasksWaitingTermination+0x58>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	3b01      	subs	r3, #1
 80159a6:	4a0a      	ldr	r2, [pc, #40]	@ (80159d0 <prvCheckTasksWaitingTermination+0x58>)
 80159a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80159aa:	f000 fabd 	bl	8015f28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f000 f810 	bl	80159d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80159b4:	4b06      	ldr	r3, [pc, #24]	@ (80159d0 <prvCheckTasksWaitingTermination+0x58>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d1e1      	bne.n	8015980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80159bc:	bf00      	nop
 80159be:	bf00      	nop
 80159c0:	3708      	adds	r7, #8
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	bf00      	nop
 80159c8:	20001130 	.word	0x20001130
 80159cc:	2000115c 	.word	0x2000115c
 80159d0:	20001144 	.word	0x20001144

080159d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b084      	sub	sp, #16
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d108      	bne.n	80159f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159ea:	4618      	mov	r0, r3
 80159ec:	f000 fc66 	bl	80162bc <vPortFree>
				vPortFree( pxTCB );
 80159f0:	6878      	ldr	r0, [r7, #4]
 80159f2:	f000 fc63 	bl	80162bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80159f6:	e01b      	b.n	8015a30 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d103      	bne.n	8015a0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f000 fc5a 	bl	80162bc <vPortFree>
	}
 8015a08:	e012      	b.n	8015a30 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8015a10:	2b02      	cmp	r3, #2
 8015a12:	d00d      	beq.n	8015a30 <prvDeleteTCB+0x5c>
	__asm volatile
 8015a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a18:	b672      	cpsid	i
 8015a1a:	f383 8811 	msr	BASEPRI, r3
 8015a1e:	f3bf 8f6f 	isb	sy
 8015a22:	f3bf 8f4f 	dsb	sy
 8015a26:	b662      	cpsie	i
 8015a28:	60fb      	str	r3, [r7, #12]
}
 8015a2a:	bf00      	nop
 8015a2c:	bf00      	nop
 8015a2e:	e7fd      	b.n	8015a2c <prvDeleteTCB+0x58>
	}
 8015a30:	bf00      	nop
 8015a32:	3710      	adds	r7, #16
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}

08015a38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b083      	sub	sp, #12
 8015a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8015a70 <prvResetNextTaskUnblockTime+0x38>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d104      	bne.n	8015a52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015a48:	4b0a      	ldr	r3, [pc, #40]	@ (8015a74 <prvResetNextTaskUnblockTime+0x3c>)
 8015a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8015a4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015a50:	e008      	b.n	8015a64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a52:	4b07      	ldr	r3, [pc, #28]	@ (8015a70 <prvResetNextTaskUnblockTime+0x38>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	68db      	ldr	r3, [r3, #12]
 8015a58:	68db      	ldr	r3, [r3, #12]
 8015a5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	4a04      	ldr	r2, [pc, #16]	@ (8015a74 <prvResetNextTaskUnblockTime+0x3c>)
 8015a62:	6013      	str	r3, [r2, #0]
}
 8015a64:	bf00      	nop
 8015a66:	370c      	adds	r7, #12
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr
 8015a70:	20001114 	.word	0x20001114
 8015a74:	2000117c 	.word	0x2000117c

08015a78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015a78:	b480      	push	{r7}
 8015a7a:	b083      	sub	sp, #12
 8015a7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8015aac <xTaskGetSchedulerState+0x34>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d102      	bne.n	8015a8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015a86:	2301      	movs	r3, #1
 8015a88:	607b      	str	r3, [r7, #4]
 8015a8a:	e008      	b.n	8015a9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a8c:	4b08      	ldr	r3, [pc, #32]	@ (8015ab0 <xTaskGetSchedulerState+0x38>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d102      	bne.n	8015a9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015a94:	2302      	movs	r3, #2
 8015a96:	607b      	str	r3, [r7, #4]
 8015a98:	e001      	b.n	8015a9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015a9e:	687b      	ldr	r3, [r7, #4]
	}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	370c      	adds	r7, #12
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr
 8015aac:	20001168 	.word	0x20001168
 8015ab0:	20001184 	.word	0x20001184

08015ab4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b086      	sub	sp, #24
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d074      	beq.n	8015bb4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015aca:	4b3d      	ldr	r3, [pc, #244]	@ (8015bc0 <xTaskPriorityDisinherit+0x10c>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	693a      	ldr	r2, [r7, #16]
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d00d      	beq.n	8015af0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ad8:	b672      	cpsid	i
 8015ada:	f383 8811 	msr	BASEPRI, r3
 8015ade:	f3bf 8f6f 	isb	sy
 8015ae2:	f3bf 8f4f 	dsb	sy
 8015ae6:	b662      	cpsie	i
 8015ae8:	60fb      	str	r3, [r7, #12]
}
 8015aea:	bf00      	nop
 8015aec:	bf00      	nop
 8015aee:	e7fd      	b.n	8015aec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8015af0:	693b      	ldr	r3, [r7, #16]
 8015af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d10d      	bne.n	8015b14 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8015af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015afc:	b672      	cpsid	i
 8015afe:	f383 8811 	msr	BASEPRI, r3
 8015b02:	f3bf 8f6f 	isb	sy
 8015b06:	f3bf 8f4f 	dsb	sy
 8015b0a:	b662      	cpsie	i
 8015b0c:	60bb      	str	r3, [r7, #8]
}
 8015b0e:	bf00      	nop
 8015b10:	bf00      	nop
 8015b12:	e7fd      	b.n	8015b10 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015b18:	1e5a      	subs	r2, r3, #1
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015b1e:	693b      	ldr	r3, [r7, #16]
 8015b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d044      	beq.n	8015bb4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015b2a:	693b      	ldr	r3, [r7, #16]
 8015b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d140      	bne.n	8015bb4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	3304      	adds	r3, #4
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7fe fb64 	bl	8014204 <uxListRemove>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d115      	bne.n	8015b6e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b46:	491f      	ldr	r1, [pc, #124]	@ (8015bc4 <xTaskPriorityDisinherit+0x110>)
 8015b48:	4613      	mov	r3, r2
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	4413      	add	r3, r2
 8015b4e:	009b      	lsls	r3, r3, #2
 8015b50:	440b      	add	r3, r1
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d10a      	bne.n	8015b6e <xTaskPriorityDisinherit+0xba>
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b5c:	2201      	movs	r2, #1
 8015b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8015b62:	43da      	mvns	r2, r3
 8015b64:	4b18      	ldr	r3, [pc, #96]	@ (8015bc8 <xTaskPriorityDisinherit+0x114>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	4013      	ands	r3, r2
 8015b6a:	4a17      	ldr	r2, [pc, #92]	@ (8015bc8 <xTaskPriorityDisinherit+0x114>)
 8015b6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b7a:	f1c3 0207 	rsb	r2, r3, #7
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b86:	2201      	movs	r2, #1
 8015b88:	409a      	lsls	r2, r3
 8015b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8015bc8 <xTaskPriorityDisinherit+0x114>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4313      	orrs	r3, r2
 8015b90:	4a0d      	ldr	r2, [pc, #52]	@ (8015bc8 <xTaskPriorityDisinherit+0x114>)
 8015b92:	6013      	str	r3, [r2, #0]
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b98:	4613      	mov	r3, r2
 8015b9a:	009b      	lsls	r3, r3, #2
 8015b9c:	4413      	add	r3, r2
 8015b9e:	009b      	lsls	r3, r3, #2
 8015ba0:	4a08      	ldr	r2, [pc, #32]	@ (8015bc4 <xTaskPriorityDisinherit+0x110>)
 8015ba2:	441a      	add	r2, r3
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	3304      	adds	r3, #4
 8015ba8:	4619      	mov	r1, r3
 8015baa:	4610      	mov	r0, r2
 8015bac:	f7fe facd 	bl	801414a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015bb4:	697b      	ldr	r3, [r7, #20]
	}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3718      	adds	r7, #24
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	2000105c 	.word	0x2000105c
 8015bc4:	20001060 	.word	0x20001060
 8015bc8:	20001164 	.word	0x20001164

08015bcc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b084      	sub	sp, #16
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015bd6:	4b29      	ldr	r3, [pc, #164]	@ (8015c7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015bdc:	4b28      	ldr	r3, [pc, #160]	@ (8015c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	3304      	adds	r3, #4
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7fe fb0e 	bl	8014204 <uxListRemove>
 8015be8:	4603      	mov	r3, r0
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d10b      	bne.n	8015c06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015bee:	4b24      	ldr	r3, [pc, #144]	@ (8015c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bf4:	2201      	movs	r2, #1
 8015bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8015bfa:	43da      	mvns	r2, r3
 8015bfc:	4b21      	ldr	r3, [pc, #132]	@ (8015c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	4013      	ands	r3, r2
 8015c02:	4a20      	ldr	r2, [pc, #128]	@ (8015c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015c04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c0c:	d10a      	bne.n	8015c24 <prvAddCurrentTaskToDelayedList+0x58>
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d007      	beq.n	8015c24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015c14:	4b1a      	ldr	r3, [pc, #104]	@ (8015c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	3304      	adds	r3, #4
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	481a      	ldr	r0, [pc, #104]	@ (8015c88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015c1e:	f7fe fa94 	bl	801414a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015c22:	e026      	b.n	8015c72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015c24:	68fa      	ldr	r2, [r7, #12]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	4413      	add	r3, r2
 8015c2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015c2c:	4b14      	ldr	r3, [pc, #80]	@ (8015c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	68ba      	ldr	r2, [r7, #8]
 8015c32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015c34:	68ba      	ldr	r2, [r7, #8]
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d209      	bcs.n	8015c50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015c3c:	4b13      	ldr	r3, [pc, #76]	@ (8015c8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8015c3e:	681a      	ldr	r2, [r3, #0]
 8015c40:	4b0f      	ldr	r3, [pc, #60]	@ (8015c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	3304      	adds	r3, #4
 8015c46:	4619      	mov	r1, r3
 8015c48:	4610      	mov	r0, r2
 8015c4a:	f7fe faa2 	bl	8014192 <vListInsert>
}
 8015c4e:	e010      	b.n	8015c72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015c50:	4b0f      	ldr	r3, [pc, #60]	@ (8015c90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015c52:	681a      	ldr	r2, [r3, #0]
 8015c54:	4b0a      	ldr	r3, [pc, #40]	@ (8015c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	3304      	adds	r3, #4
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	4610      	mov	r0, r2
 8015c5e:	f7fe fa98 	bl	8014192 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015c62:	4b0c      	ldr	r3, [pc, #48]	@ (8015c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	68ba      	ldr	r2, [r7, #8]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d202      	bcs.n	8015c72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015c6c:	4a09      	ldr	r2, [pc, #36]	@ (8015c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	6013      	str	r3, [r2, #0]
}
 8015c72:	bf00      	nop
 8015c74:	3710      	adds	r7, #16
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
 8015c7a:	bf00      	nop
 8015c7c:	20001160 	.word	0x20001160
 8015c80:	2000105c 	.word	0x2000105c
 8015c84:	20001164 	.word	0x20001164
 8015c88:	20001148 	.word	0x20001148
 8015c8c:	20001118 	.word	0x20001118
 8015c90:	20001114 	.word	0x20001114
 8015c94:	2000117c 	.word	0x2000117c

08015c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b085      	sub	sp, #20
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	60b9      	str	r1, [r7, #8]
 8015ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	3b04      	subs	r3, #4
 8015ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	3b04      	subs	r3, #4
 8015cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	f023 0201 	bic.w	r2, r3, #1
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	3b04      	subs	r3, #4
 8015cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8015cfc <pxPortInitialiseStack+0x64>)
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	3b14      	subs	r3, #20
 8015cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015cd4:	687a      	ldr	r2, [r7, #4]
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	3b04      	subs	r3, #4
 8015cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	f06f 0202 	mvn.w	r2, #2
 8015ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	3b20      	subs	r3, #32
 8015cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015cee:	68fb      	ldr	r3, [r7, #12]
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3714      	adds	r7, #20
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfa:	4770      	bx	lr
 8015cfc:	08015d01 	.word	0x08015d01

08015d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015d00:	b480      	push	{r7}
 8015d02:	b085      	sub	sp, #20
 8015d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015d06:	2300      	movs	r3, #0
 8015d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015d0a:	4b15      	ldr	r3, [pc, #84]	@ (8015d60 <prvTaskExitError+0x60>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d12:	d00d      	beq.n	8015d30 <prvTaskExitError+0x30>
	__asm volatile
 8015d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d18:	b672      	cpsid	i
 8015d1a:	f383 8811 	msr	BASEPRI, r3
 8015d1e:	f3bf 8f6f 	isb	sy
 8015d22:	f3bf 8f4f 	dsb	sy
 8015d26:	b662      	cpsie	i
 8015d28:	60fb      	str	r3, [r7, #12]
}
 8015d2a:	bf00      	nop
 8015d2c:	bf00      	nop
 8015d2e:	e7fd      	b.n	8015d2c <prvTaskExitError+0x2c>
	__asm volatile
 8015d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d34:	b672      	cpsid	i
 8015d36:	f383 8811 	msr	BASEPRI, r3
 8015d3a:	f3bf 8f6f 	isb	sy
 8015d3e:	f3bf 8f4f 	dsb	sy
 8015d42:	b662      	cpsie	i
 8015d44:	60bb      	str	r3, [r7, #8]
}
 8015d46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015d48:	bf00      	nop
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d0fc      	beq.n	8015d4a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015d50:	bf00      	nop
 8015d52:	bf00      	nop
 8015d54:	3714      	adds	r7, #20
 8015d56:	46bd      	mov	sp, r7
 8015d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5c:	4770      	bx	lr
 8015d5e:	bf00      	nop
 8015d60:	20000074 	.word	0x20000074
	...

08015d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015d70:	4b07      	ldr	r3, [pc, #28]	@ (8015d90 <pxCurrentTCBConst2>)
 8015d72:	6819      	ldr	r1, [r3, #0]
 8015d74:	6808      	ldr	r0, [r1, #0]
 8015d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d7a:	f380 8809 	msr	PSP, r0
 8015d7e:	f3bf 8f6f 	isb	sy
 8015d82:	f04f 0000 	mov.w	r0, #0
 8015d86:	f380 8811 	msr	BASEPRI, r0
 8015d8a:	4770      	bx	lr
 8015d8c:	f3af 8000 	nop.w

08015d90 <pxCurrentTCBConst2>:
 8015d90:	2000105c 	.word	0x2000105c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015d94:	bf00      	nop
 8015d96:	bf00      	nop

08015d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015d98:	4808      	ldr	r0, [pc, #32]	@ (8015dbc <prvPortStartFirstTask+0x24>)
 8015d9a:	6800      	ldr	r0, [r0, #0]
 8015d9c:	6800      	ldr	r0, [r0, #0]
 8015d9e:	f380 8808 	msr	MSP, r0
 8015da2:	f04f 0000 	mov.w	r0, #0
 8015da6:	f380 8814 	msr	CONTROL, r0
 8015daa:	b662      	cpsie	i
 8015dac:	b661      	cpsie	f
 8015dae:	f3bf 8f4f 	dsb	sy
 8015db2:	f3bf 8f6f 	isb	sy
 8015db6:	df00      	svc	0
 8015db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015dba:	bf00      	nop
 8015dbc:	e000ed08 	.word	0xe000ed08

08015dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b084      	sub	sp, #16
 8015dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015dc6:	4b37      	ldr	r3, [pc, #220]	@ (8015ea4 <xPortStartScheduler+0xe4>)
 8015dc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	781b      	ldrb	r3, [r3, #0]
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	22ff      	movs	r2, #255	@ 0xff
 8015dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	b2db      	uxtb	r3, r3
 8015dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015de0:	78fb      	ldrb	r3, [r7, #3]
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015de8:	b2da      	uxtb	r2, r3
 8015dea:	4b2f      	ldr	r3, [pc, #188]	@ (8015ea8 <xPortStartScheduler+0xe8>)
 8015dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015dee:	4b2f      	ldr	r3, [pc, #188]	@ (8015eac <xPortStartScheduler+0xec>)
 8015df0:	2207      	movs	r2, #7
 8015df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015df4:	e009      	b.n	8015e0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015df6:	4b2d      	ldr	r3, [pc, #180]	@ (8015eac <xPortStartScheduler+0xec>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	3b01      	subs	r3, #1
 8015dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8015eac <xPortStartScheduler+0xec>)
 8015dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015e00:	78fb      	ldrb	r3, [r7, #3]
 8015e02:	b2db      	uxtb	r3, r3
 8015e04:	005b      	lsls	r3, r3, #1
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015e0a:	78fb      	ldrb	r3, [r7, #3]
 8015e0c:	b2db      	uxtb	r3, r3
 8015e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015e12:	2b80      	cmp	r3, #128	@ 0x80
 8015e14:	d0ef      	beq.n	8015df6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015e16:	4b25      	ldr	r3, [pc, #148]	@ (8015eac <xPortStartScheduler+0xec>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	f1c3 0307 	rsb	r3, r3, #7
 8015e1e:	2b04      	cmp	r3, #4
 8015e20:	d00d      	beq.n	8015e3e <xPortStartScheduler+0x7e>
	__asm volatile
 8015e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e26:	b672      	cpsid	i
 8015e28:	f383 8811 	msr	BASEPRI, r3
 8015e2c:	f3bf 8f6f 	isb	sy
 8015e30:	f3bf 8f4f 	dsb	sy
 8015e34:	b662      	cpsie	i
 8015e36:	60bb      	str	r3, [r7, #8]
}
 8015e38:	bf00      	nop
 8015e3a:	bf00      	nop
 8015e3c:	e7fd      	b.n	8015e3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8015eac <xPortStartScheduler+0xec>)
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	021b      	lsls	r3, r3, #8
 8015e44:	4a19      	ldr	r2, [pc, #100]	@ (8015eac <xPortStartScheduler+0xec>)
 8015e46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015e48:	4b18      	ldr	r3, [pc, #96]	@ (8015eac <xPortStartScheduler+0xec>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015e50:	4a16      	ldr	r2, [pc, #88]	@ (8015eac <xPortStartScheduler+0xec>)
 8015e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	b2da      	uxtb	r2, r3
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015e5c:	4b14      	ldr	r3, [pc, #80]	@ (8015eb0 <xPortStartScheduler+0xf0>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	4a13      	ldr	r2, [pc, #76]	@ (8015eb0 <xPortStartScheduler+0xf0>)
 8015e62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015e68:	4b11      	ldr	r3, [pc, #68]	@ (8015eb0 <xPortStartScheduler+0xf0>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	4a10      	ldr	r2, [pc, #64]	@ (8015eb0 <xPortStartScheduler+0xf0>)
 8015e6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015e72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015e74:	f000 f8dc 	bl	8016030 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015e78:	4b0e      	ldr	r3, [pc, #56]	@ (8015eb4 <xPortStartScheduler+0xf4>)
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015e7e:	f000 f8fb 	bl	8016078 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015e82:	4b0d      	ldr	r3, [pc, #52]	@ (8015eb8 <xPortStartScheduler+0xf8>)
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	4a0c      	ldr	r2, [pc, #48]	@ (8015eb8 <xPortStartScheduler+0xf8>)
 8015e88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015e8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015e8e:	f7ff ff83 	bl	8015d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015e92:	f7ff fb7b 	bl	801558c <vTaskSwitchContext>
	prvTaskExitError();
 8015e96:	f7ff ff33 	bl	8015d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015e9a:	2300      	movs	r3, #0
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3710      	adds	r7, #16
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}
 8015ea4:	e000e400 	.word	0xe000e400
 8015ea8:	20001188 	.word	0x20001188
 8015eac:	2000118c 	.word	0x2000118c
 8015eb0:	e000ed20 	.word	0xe000ed20
 8015eb4:	20000074 	.word	0x20000074
 8015eb8:	e000ef34 	.word	0xe000ef34

08015ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b083      	sub	sp, #12
 8015ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8015ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ec6:	b672      	cpsid	i
 8015ec8:	f383 8811 	msr	BASEPRI, r3
 8015ecc:	f3bf 8f6f 	isb	sy
 8015ed0:	f3bf 8f4f 	dsb	sy
 8015ed4:	b662      	cpsie	i
 8015ed6:	607b      	str	r3, [r7, #4]
}
 8015ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015eda:	4b11      	ldr	r3, [pc, #68]	@ (8015f20 <vPortEnterCritical+0x64>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8015f20 <vPortEnterCritical+0x64>)
 8015ee2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8015f20 <vPortEnterCritical+0x64>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	2b01      	cmp	r3, #1
 8015eea:	d112      	bne.n	8015f12 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015eec:	4b0d      	ldr	r3, [pc, #52]	@ (8015f24 <vPortEnterCritical+0x68>)
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	b2db      	uxtb	r3, r3
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d00d      	beq.n	8015f12 <vPortEnterCritical+0x56>
	__asm volatile
 8015ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015efa:	b672      	cpsid	i
 8015efc:	f383 8811 	msr	BASEPRI, r3
 8015f00:	f3bf 8f6f 	isb	sy
 8015f04:	f3bf 8f4f 	dsb	sy
 8015f08:	b662      	cpsie	i
 8015f0a:	603b      	str	r3, [r7, #0]
}
 8015f0c:	bf00      	nop
 8015f0e:	bf00      	nop
 8015f10:	e7fd      	b.n	8015f0e <vPortEnterCritical+0x52>
	}
}
 8015f12:	bf00      	nop
 8015f14:	370c      	adds	r7, #12
 8015f16:	46bd      	mov	sp, r7
 8015f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1c:	4770      	bx	lr
 8015f1e:	bf00      	nop
 8015f20:	20000074 	.word	0x20000074
 8015f24:	e000ed04 	.word	0xe000ed04

08015f28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015f28:	b480      	push	{r7}
 8015f2a:	b083      	sub	sp, #12
 8015f2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015f2e:	4b13      	ldr	r3, [pc, #76]	@ (8015f7c <vPortExitCritical+0x54>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d10d      	bne.n	8015f52 <vPortExitCritical+0x2a>
	__asm volatile
 8015f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f3a:	b672      	cpsid	i
 8015f3c:	f383 8811 	msr	BASEPRI, r3
 8015f40:	f3bf 8f6f 	isb	sy
 8015f44:	f3bf 8f4f 	dsb	sy
 8015f48:	b662      	cpsie	i
 8015f4a:	607b      	str	r3, [r7, #4]
}
 8015f4c:	bf00      	nop
 8015f4e:	bf00      	nop
 8015f50:	e7fd      	b.n	8015f4e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8015f52:	4b0a      	ldr	r3, [pc, #40]	@ (8015f7c <vPortExitCritical+0x54>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	3b01      	subs	r3, #1
 8015f58:	4a08      	ldr	r2, [pc, #32]	@ (8015f7c <vPortExitCritical+0x54>)
 8015f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015f5c:	4b07      	ldr	r3, [pc, #28]	@ (8015f7c <vPortExitCritical+0x54>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d105      	bne.n	8015f70 <vPortExitCritical+0x48>
 8015f64:	2300      	movs	r3, #0
 8015f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	f383 8811 	msr	BASEPRI, r3
}
 8015f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015f70:	bf00      	nop
 8015f72:	370c      	adds	r7, #12
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr
 8015f7c:	20000074 	.word	0x20000074

08015f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015f80:	f3ef 8009 	mrs	r0, PSP
 8015f84:	f3bf 8f6f 	isb	sy
 8015f88:	4b15      	ldr	r3, [pc, #84]	@ (8015fe0 <pxCurrentTCBConst>)
 8015f8a:	681a      	ldr	r2, [r3, #0]
 8015f8c:	f01e 0f10 	tst.w	lr, #16
 8015f90:	bf08      	it	eq
 8015f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f9a:	6010      	str	r0, [r2, #0]
 8015f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015fa4:	b672      	cpsid	i
 8015fa6:	f380 8811 	msr	BASEPRI, r0
 8015faa:	f3bf 8f4f 	dsb	sy
 8015fae:	f3bf 8f6f 	isb	sy
 8015fb2:	b662      	cpsie	i
 8015fb4:	f7ff faea 	bl	801558c <vTaskSwitchContext>
 8015fb8:	f04f 0000 	mov.w	r0, #0
 8015fbc:	f380 8811 	msr	BASEPRI, r0
 8015fc0:	bc09      	pop	{r0, r3}
 8015fc2:	6819      	ldr	r1, [r3, #0]
 8015fc4:	6808      	ldr	r0, [r1, #0]
 8015fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fca:	f01e 0f10 	tst.w	lr, #16
 8015fce:	bf08      	it	eq
 8015fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015fd4:	f380 8809 	msr	PSP, r0
 8015fd8:	f3bf 8f6f 	isb	sy
 8015fdc:	4770      	bx	lr
 8015fde:	bf00      	nop

08015fe0 <pxCurrentTCBConst>:
 8015fe0:	2000105c 	.word	0x2000105c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015fe4:	bf00      	nop
 8015fe6:	bf00      	nop

08015fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
	__asm volatile
 8015fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ff2:	b672      	cpsid	i
 8015ff4:	f383 8811 	msr	BASEPRI, r3
 8015ff8:	f3bf 8f6f 	isb	sy
 8015ffc:	f3bf 8f4f 	dsb	sy
 8016000:	b662      	cpsie	i
 8016002:	607b      	str	r3, [r7, #4]
}
 8016004:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016006:	f7ff fa05 	bl	8015414 <xTaskIncrementTick>
 801600a:	4603      	mov	r3, r0
 801600c:	2b00      	cmp	r3, #0
 801600e:	d003      	beq.n	8016018 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016010:	4b06      	ldr	r3, [pc, #24]	@ (801602c <SysTick_Handler+0x44>)
 8016012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016016:	601a      	str	r2, [r3, #0]
 8016018:	2300      	movs	r3, #0
 801601a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	f383 8811 	msr	BASEPRI, r3
}
 8016022:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016024:	bf00      	nop
 8016026:	3708      	adds	r7, #8
 8016028:	46bd      	mov	sp, r7
 801602a:	bd80      	pop	{r7, pc}
 801602c:	e000ed04 	.word	0xe000ed04

08016030 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016030:	b480      	push	{r7}
 8016032:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016034:	4b0b      	ldr	r3, [pc, #44]	@ (8016064 <vPortSetupTimerInterrupt+0x34>)
 8016036:	2200      	movs	r2, #0
 8016038:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801603a:	4b0b      	ldr	r3, [pc, #44]	@ (8016068 <vPortSetupTimerInterrupt+0x38>)
 801603c:	2200      	movs	r2, #0
 801603e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016040:	4b0a      	ldr	r3, [pc, #40]	@ (801606c <vPortSetupTimerInterrupt+0x3c>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	4a0a      	ldr	r2, [pc, #40]	@ (8016070 <vPortSetupTimerInterrupt+0x40>)
 8016046:	fba2 2303 	umull	r2, r3, r2, r3
 801604a:	099b      	lsrs	r3, r3, #6
 801604c:	4a09      	ldr	r2, [pc, #36]	@ (8016074 <vPortSetupTimerInterrupt+0x44>)
 801604e:	3b01      	subs	r3, #1
 8016050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016052:	4b04      	ldr	r3, [pc, #16]	@ (8016064 <vPortSetupTimerInterrupt+0x34>)
 8016054:	2207      	movs	r2, #7
 8016056:	601a      	str	r2, [r3, #0]
}
 8016058:	bf00      	nop
 801605a:	46bd      	mov	sp, r7
 801605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016060:	4770      	bx	lr
 8016062:	bf00      	nop
 8016064:	e000e010 	.word	0xe000e010
 8016068:	e000e018 	.word	0xe000e018
 801606c:	20000000 	.word	0x20000000
 8016070:	10624dd3 	.word	0x10624dd3
 8016074:	e000e014 	.word	0xe000e014

08016078 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016078:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016088 <vPortEnableVFP+0x10>
 801607c:	6801      	ldr	r1, [r0, #0]
 801607e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016082:	6001      	str	r1, [r0, #0]
 8016084:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016086:	bf00      	nop
 8016088:	e000ed88 	.word	0xe000ed88

0801608c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801608c:	b480      	push	{r7}
 801608e:	b085      	sub	sp, #20
 8016090:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016092:	f3ef 8305 	mrs	r3, IPSR
 8016096:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2b0f      	cmp	r3, #15
 801609c:	d917      	bls.n	80160ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801609e:	4a1a      	ldr	r2, [pc, #104]	@ (8016108 <vPortValidateInterruptPriority+0x7c>)
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	4413      	add	r3, r2
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80160a8:	4b18      	ldr	r3, [pc, #96]	@ (801610c <vPortValidateInterruptPriority+0x80>)
 80160aa:	781b      	ldrb	r3, [r3, #0]
 80160ac:	7afa      	ldrb	r2, [r7, #11]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d20d      	bcs.n	80160ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80160b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160b6:	b672      	cpsid	i
 80160b8:	f383 8811 	msr	BASEPRI, r3
 80160bc:	f3bf 8f6f 	isb	sy
 80160c0:	f3bf 8f4f 	dsb	sy
 80160c4:	b662      	cpsie	i
 80160c6:	607b      	str	r3, [r7, #4]
}
 80160c8:	bf00      	nop
 80160ca:	bf00      	nop
 80160cc:	e7fd      	b.n	80160ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80160ce:	4b10      	ldr	r3, [pc, #64]	@ (8016110 <vPortValidateInterruptPriority+0x84>)
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80160d6:	4b0f      	ldr	r3, [pc, #60]	@ (8016114 <vPortValidateInterruptPriority+0x88>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	429a      	cmp	r2, r3
 80160dc:	d90d      	bls.n	80160fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80160de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160e2:	b672      	cpsid	i
 80160e4:	f383 8811 	msr	BASEPRI, r3
 80160e8:	f3bf 8f6f 	isb	sy
 80160ec:	f3bf 8f4f 	dsb	sy
 80160f0:	b662      	cpsie	i
 80160f2:	603b      	str	r3, [r7, #0]
}
 80160f4:	bf00      	nop
 80160f6:	bf00      	nop
 80160f8:	e7fd      	b.n	80160f6 <vPortValidateInterruptPriority+0x6a>
	}
 80160fa:	bf00      	nop
 80160fc:	3714      	adds	r7, #20
 80160fe:	46bd      	mov	sp, r7
 8016100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop
 8016108:	e000e3f0 	.word	0xe000e3f0
 801610c:	20001188 	.word	0x20001188
 8016110:	e000ed0c 	.word	0xe000ed0c
 8016114:	2000118c 	.word	0x2000118c

08016118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b08a      	sub	sp, #40	@ 0x28
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016120:	2300      	movs	r3, #0
 8016122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016124:	f7ff f8a6 	bl	8015274 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016128:	4b5f      	ldr	r3, [pc, #380]	@ (80162a8 <pvPortMalloc+0x190>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d101      	bne.n	8016134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016130:	f000 f924 	bl	801637c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016134:	4b5d      	ldr	r3, [pc, #372]	@ (80162ac <pvPortMalloc+0x194>)
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	4013      	ands	r3, r2
 801613c:	2b00      	cmp	r3, #0
 801613e:	f040 8094 	bne.w	801626a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d020      	beq.n	801618a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8016148:	2208      	movs	r2, #8
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	4413      	add	r3, r2
 801614e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f003 0307 	and.w	r3, r3, #7
 8016156:	2b00      	cmp	r3, #0
 8016158:	d017      	beq.n	801618a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f023 0307 	bic.w	r3, r3, #7
 8016160:	3308      	adds	r3, #8
 8016162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f003 0307 	and.w	r3, r3, #7
 801616a:	2b00      	cmp	r3, #0
 801616c:	d00d      	beq.n	801618a <pvPortMalloc+0x72>
	__asm volatile
 801616e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016172:	b672      	cpsid	i
 8016174:	f383 8811 	msr	BASEPRI, r3
 8016178:	f3bf 8f6f 	isb	sy
 801617c:	f3bf 8f4f 	dsb	sy
 8016180:	b662      	cpsie	i
 8016182:	617b      	str	r3, [r7, #20]
}
 8016184:	bf00      	nop
 8016186:	bf00      	nop
 8016188:	e7fd      	b.n	8016186 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d06c      	beq.n	801626a <pvPortMalloc+0x152>
 8016190:	4b47      	ldr	r3, [pc, #284]	@ (80162b0 <pvPortMalloc+0x198>)
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	429a      	cmp	r2, r3
 8016198:	d867      	bhi.n	801626a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801619a:	4b46      	ldr	r3, [pc, #280]	@ (80162b4 <pvPortMalloc+0x19c>)
 801619c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801619e:	4b45      	ldr	r3, [pc, #276]	@ (80162b4 <pvPortMalloc+0x19c>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80161a4:	e004      	b.n	80161b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80161a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80161aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80161b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161b2:	685b      	ldr	r3, [r3, #4]
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d903      	bls.n	80161c2 <pvPortMalloc+0xaa>
 80161ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d1f1      	bne.n	80161a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80161c2:	4b39      	ldr	r3, [pc, #228]	@ (80162a8 <pvPortMalloc+0x190>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d04e      	beq.n	801626a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80161cc:	6a3b      	ldr	r3, [r7, #32]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	2208      	movs	r2, #8
 80161d2:	4413      	add	r3, r2
 80161d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80161d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161d8:	681a      	ldr	r2, [r3, #0]
 80161da:	6a3b      	ldr	r3, [r7, #32]
 80161dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80161de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e0:	685a      	ldr	r2, [r3, #4]
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	1ad2      	subs	r2, r2, r3
 80161e6:	2308      	movs	r3, #8
 80161e8:	005b      	lsls	r3, r3, #1
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d922      	bls.n	8016234 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80161ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	4413      	add	r3, r2
 80161f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	f003 0307 	and.w	r3, r3, #7
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d00d      	beq.n	801621c <pvPortMalloc+0x104>
	__asm volatile
 8016200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016204:	b672      	cpsid	i
 8016206:	f383 8811 	msr	BASEPRI, r3
 801620a:	f3bf 8f6f 	isb	sy
 801620e:	f3bf 8f4f 	dsb	sy
 8016212:	b662      	cpsie	i
 8016214:	613b      	str	r3, [r7, #16]
}
 8016216:	bf00      	nop
 8016218:	bf00      	nop
 801621a:	e7fd      	b.n	8016218 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621e:	685a      	ldr	r2, [r3, #4]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	1ad2      	subs	r2, r2, r3
 8016224:	69bb      	ldr	r3, [r7, #24]
 8016226:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801622e:	69b8      	ldr	r0, [r7, #24]
 8016230:	f000 f906 	bl	8016440 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016234:	4b1e      	ldr	r3, [pc, #120]	@ (80162b0 <pvPortMalloc+0x198>)
 8016236:	681a      	ldr	r2, [r3, #0]
 8016238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	1ad3      	subs	r3, r2, r3
 801623e:	4a1c      	ldr	r2, [pc, #112]	@ (80162b0 <pvPortMalloc+0x198>)
 8016240:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016242:	4b1b      	ldr	r3, [pc, #108]	@ (80162b0 <pvPortMalloc+0x198>)
 8016244:	681a      	ldr	r2, [r3, #0]
 8016246:	4b1c      	ldr	r3, [pc, #112]	@ (80162b8 <pvPortMalloc+0x1a0>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	429a      	cmp	r2, r3
 801624c:	d203      	bcs.n	8016256 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801624e:	4b18      	ldr	r3, [pc, #96]	@ (80162b0 <pvPortMalloc+0x198>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	4a19      	ldr	r2, [pc, #100]	@ (80162b8 <pvPortMalloc+0x1a0>)
 8016254:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016258:	685a      	ldr	r2, [r3, #4]
 801625a:	4b14      	ldr	r3, [pc, #80]	@ (80162ac <pvPortMalloc+0x194>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	431a      	orrs	r2, r3
 8016260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016262:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016266:	2200      	movs	r2, #0
 8016268:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801626a:	f7ff f811 	bl	8015290 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801626e:	69fb      	ldr	r3, [r7, #28]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d101      	bne.n	8016278 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016274:	f7ea fe94 	bl	8000fa0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	f003 0307 	and.w	r3, r3, #7
 801627e:	2b00      	cmp	r3, #0
 8016280:	d00d      	beq.n	801629e <pvPortMalloc+0x186>
	__asm volatile
 8016282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016286:	b672      	cpsid	i
 8016288:	f383 8811 	msr	BASEPRI, r3
 801628c:	f3bf 8f6f 	isb	sy
 8016290:	f3bf 8f4f 	dsb	sy
 8016294:	b662      	cpsie	i
 8016296:	60fb      	str	r3, [r7, #12]
}
 8016298:	bf00      	nop
 801629a:	bf00      	nop
 801629c:	e7fd      	b.n	801629a <pvPortMalloc+0x182>
	return pvReturn;
 801629e:	69fb      	ldr	r3, [r7, #28]
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3728      	adds	r7, #40	@ 0x28
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	20009198 	.word	0x20009198
 80162ac:	200091a4 	.word	0x200091a4
 80162b0:	2000919c 	.word	0x2000919c
 80162b4:	20009190 	.word	0x20009190
 80162b8:	200091a0 	.word	0x200091a0

080162bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b086      	sub	sp, #24
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d04e      	beq.n	801636c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80162ce:	2308      	movs	r3, #8
 80162d0:	425b      	negs	r3, r3
 80162d2:	697a      	ldr	r2, [r7, #20]
 80162d4:	4413      	add	r3, r2
 80162d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80162d8:	697b      	ldr	r3, [r7, #20]
 80162da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80162dc:	693b      	ldr	r3, [r7, #16]
 80162de:	685a      	ldr	r2, [r3, #4]
 80162e0:	4b24      	ldr	r3, [pc, #144]	@ (8016374 <vPortFree+0xb8>)
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	4013      	ands	r3, r2
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d10d      	bne.n	8016306 <vPortFree+0x4a>
	__asm volatile
 80162ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162ee:	b672      	cpsid	i
 80162f0:	f383 8811 	msr	BASEPRI, r3
 80162f4:	f3bf 8f6f 	isb	sy
 80162f8:	f3bf 8f4f 	dsb	sy
 80162fc:	b662      	cpsie	i
 80162fe:	60fb      	str	r3, [r7, #12]
}
 8016300:	bf00      	nop
 8016302:	bf00      	nop
 8016304:	e7fd      	b.n	8016302 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d00d      	beq.n	801632a <vPortFree+0x6e>
	__asm volatile
 801630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016312:	b672      	cpsid	i
 8016314:	f383 8811 	msr	BASEPRI, r3
 8016318:	f3bf 8f6f 	isb	sy
 801631c:	f3bf 8f4f 	dsb	sy
 8016320:	b662      	cpsie	i
 8016322:	60bb      	str	r3, [r7, #8]
}
 8016324:	bf00      	nop
 8016326:	bf00      	nop
 8016328:	e7fd      	b.n	8016326 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	685a      	ldr	r2, [r3, #4]
 801632e:	4b11      	ldr	r3, [pc, #68]	@ (8016374 <vPortFree+0xb8>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	4013      	ands	r3, r2
 8016334:	2b00      	cmp	r3, #0
 8016336:	d019      	beq.n	801636c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d115      	bne.n	801636c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	685a      	ldr	r2, [r3, #4]
 8016344:	4b0b      	ldr	r3, [pc, #44]	@ (8016374 <vPortFree+0xb8>)
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	43db      	mvns	r3, r3
 801634a:	401a      	ands	r2, r3
 801634c:	693b      	ldr	r3, [r7, #16]
 801634e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016350:	f7fe ff90 	bl	8015274 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016354:	693b      	ldr	r3, [r7, #16]
 8016356:	685a      	ldr	r2, [r3, #4]
 8016358:	4b07      	ldr	r3, [pc, #28]	@ (8016378 <vPortFree+0xbc>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	4413      	add	r3, r2
 801635e:	4a06      	ldr	r2, [pc, #24]	@ (8016378 <vPortFree+0xbc>)
 8016360:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016362:	6938      	ldr	r0, [r7, #16]
 8016364:	f000 f86c 	bl	8016440 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016368:	f7fe ff92 	bl	8015290 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801636c:	bf00      	nop
 801636e:	3718      	adds	r7, #24
 8016370:	46bd      	mov	sp, r7
 8016372:	bd80      	pop	{r7, pc}
 8016374:	200091a4 	.word	0x200091a4
 8016378:	2000919c 	.word	0x2000919c

0801637c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801637c:	b480      	push	{r7}
 801637e:	b085      	sub	sp, #20
 8016380:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016386:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016388:	4b27      	ldr	r3, [pc, #156]	@ (8016428 <prvHeapInit+0xac>)
 801638a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	f003 0307 	and.w	r3, r3, #7
 8016392:	2b00      	cmp	r3, #0
 8016394:	d00c      	beq.n	80163b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	3307      	adds	r3, #7
 801639a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	f023 0307 	bic.w	r3, r3, #7
 80163a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80163a4:	68ba      	ldr	r2, [r7, #8]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	1ad3      	subs	r3, r2, r3
 80163aa:	4a1f      	ldr	r2, [pc, #124]	@ (8016428 <prvHeapInit+0xac>)
 80163ac:	4413      	add	r3, r2
 80163ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80163b4:	4a1d      	ldr	r2, [pc, #116]	@ (801642c <prvHeapInit+0xb0>)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80163ba:	4b1c      	ldr	r3, [pc, #112]	@ (801642c <prvHeapInit+0xb0>)
 80163bc:	2200      	movs	r2, #0
 80163be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	68ba      	ldr	r2, [r7, #8]
 80163c4:	4413      	add	r3, r2
 80163c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80163c8:	2208      	movs	r2, #8
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	1a9b      	subs	r3, r3, r2
 80163ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	f023 0307 	bic.w	r3, r3, #7
 80163d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	4a15      	ldr	r2, [pc, #84]	@ (8016430 <prvHeapInit+0xb4>)
 80163dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80163de:	4b14      	ldr	r3, [pc, #80]	@ (8016430 <prvHeapInit+0xb4>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	2200      	movs	r2, #0
 80163e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80163e6:	4b12      	ldr	r3, [pc, #72]	@ (8016430 <prvHeapInit+0xb4>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2200      	movs	r2, #0
 80163ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	68fa      	ldr	r2, [r7, #12]
 80163f6:	1ad2      	subs	r2, r2, r3
 80163f8:	683b      	ldr	r3, [r7, #0]
 80163fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80163fc:	4b0c      	ldr	r3, [pc, #48]	@ (8016430 <prvHeapInit+0xb4>)
 80163fe:	681a      	ldr	r2, [r3, #0]
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	4a0a      	ldr	r2, [pc, #40]	@ (8016434 <prvHeapInit+0xb8>)
 801640a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	4a09      	ldr	r2, [pc, #36]	@ (8016438 <prvHeapInit+0xbc>)
 8016412:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016414:	4b09      	ldr	r3, [pc, #36]	@ (801643c <prvHeapInit+0xc0>)
 8016416:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801641a:	601a      	str	r2, [r3, #0]
}
 801641c:	bf00      	nop
 801641e:	3714      	adds	r7, #20
 8016420:	46bd      	mov	sp, r7
 8016422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016426:	4770      	bx	lr
 8016428:	20001190 	.word	0x20001190
 801642c:	20009190 	.word	0x20009190
 8016430:	20009198 	.word	0x20009198
 8016434:	200091a0 	.word	0x200091a0
 8016438:	2000919c 	.word	0x2000919c
 801643c:	200091a4 	.word	0x200091a4

08016440 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016440:	b480      	push	{r7}
 8016442:	b085      	sub	sp, #20
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016448:	4b28      	ldr	r3, [pc, #160]	@ (80164ec <prvInsertBlockIntoFreeList+0xac>)
 801644a:	60fb      	str	r3, [r7, #12]
 801644c:	e002      	b.n	8016454 <prvInsertBlockIntoFreeList+0x14>
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	60fb      	str	r3, [r7, #12]
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	687a      	ldr	r2, [r7, #4]
 801645a:	429a      	cmp	r2, r3
 801645c:	d8f7      	bhi.n	801644e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	68ba      	ldr	r2, [r7, #8]
 8016468:	4413      	add	r3, r2
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	429a      	cmp	r2, r3
 801646e:	d108      	bne.n	8016482 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	685a      	ldr	r2, [r3, #4]
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	685b      	ldr	r3, [r3, #4]
 8016478:	441a      	add	r2, r3
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	685b      	ldr	r3, [r3, #4]
 801648a:	68ba      	ldr	r2, [r7, #8]
 801648c:	441a      	add	r2, r3
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	429a      	cmp	r2, r3
 8016494:	d118      	bne.n	80164c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	681a      	ldr	r2, [r3, #0]
 801649a:	4b15      	ldr	r3, [pc, #84]	@ (80164f0 <prvInsertBlockIntoFreeList+0xb0>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	429a      	cmp	r2, r3
 80164a0:	d00d      	beq.n	80164be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	685a      	ldr	r2, [r3, #4]
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	441a      	add	r2, r3
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	681a      	ldr	r2, [r3, #0]
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	601a      	str	r2, [r3, #0]
 80164bc:	e008      	b.n	80164d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80164be:	4b0c      	ldr	r3, [pc, #48]	@ (80164f0 <prvInsertBlockIntoFreeList+0xb0>)
 80164c0:	681a      	ldr	r2, [r3, #0]
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	601a      	str	r2, [r3, #0]
 80164c6:	e003      	b.n	80164d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80164d0:	68fa      	ldr	r2, [r7, #12]
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d002      	beq.n	80164de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80164de:	bf00      	nop
 80164e0:	3714      	adds	r7, #20
 80164e2:	46bd      	mov	sp, r7
 80164e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e8:	4770      	bx	lr
 80164ea:	bf00      	nop
 80164ec:	20009190 	.word	0x20009190
 80164f0:	20009198 	.word	0x20009198

080164f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80164f8:	2201      	movs	r2, #1
 80164fa:	490e      	ldr	r1, [pc, #56]	@ (8016534 <MX_USB_HOST_Init+0x40>)
 80164fc:	480e      	ldr	r0, [pc, #56]	@ (8016538 <MX_USB_HOST_Init+0x44>)
 80164fe:	f7fb fddd 	bl	80120bc <USBH_Init>
 8016502:	4603      	mov	r3, r0
 8016504:	2b00      	cmp	r3, #0
 8016506:	d001      	beq.n	801650c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8016508:	f7ec fc50 	bl	8002dac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801650c:	490b      	ldr	r1, [pc, #44]	@ (801653c <MX_USB_HOST_Init+0x48>)
 801650e:	480a      	ldr	r0, [pc, #40]	@ (8016538 <MX_USB_HOST_Init+0x44>)
 8016510:	f7fb fea7 	bl	8012262 <USBH_RegisterClass>
 8016514:	4603      	mov	r3, r0
 8016516:	2b00      	cmp	r3, #0
 8016518:	d001      	beq.n	801651e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801651a:	f7ec fc47 	bl	8002dac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801651e:	4806      	ldr	r0, [pc, #24]	@ (8016538 <MX_USB_HOST_Init+0x44>)
 8016520:	f7fb ff2b 	bl	801237a <USBH_Start>
 8016524:	4603      	mov	r3, r0
 8016526:	2b00      	cmp	r3, #0
 8016528:	d001      	beq.n	801652e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801652a:	f7ec fc3f 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801652e:	bf00      	nop
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	08016541 	.word	0x08016541
 8016538:	200091a8 	.word	0x200091a8
 801653c:	20000054 	.word	0x20000054

08016540 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8016540:	b480      	push	{r7}
 8016542:	b083      	sub	sp, #12
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
 8016548:	460b      	mov	r3, r1
 801654a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801654c:	78fb      	ldrb	r3, [r7, #3]
 801654e:	3b01      	subs	r3, #1
 8016550:	2b04      	cmp	r3, #4
 8016552:	d819      	bhi.n	8016588 <USBH_UserProcess+0x48>
 8016554:	a201      	add	r2, pc, #4	@ (adr r2, 801655c <USBH_UserProcess+0x1c>)
 8016556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801655a:	bf00      	nop
 801655c:	08016589 	.word	0x08016589
 8016560:	08016579 	.word	0x08016579
 8016564:	08016589 	.word	0x08016589
 8016568:	08016581 	.word	0x08016581
 801656c:	08016571 	.word	0x08016571
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8016570:	4b09      	ldr	r3, [pc, #36]	@ (8016598 <USBH_UserProcess+0x58>)
 8016572:	2203      	movs	r2, #3
 8016574:	701a      	strb	r2, [r3, #0]
  break;
 8016576:	e008      	b.n	801658a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8016578:	4b07      	ldr	r3, [pc, #28]	@ (8016598 <USBH_UserProcess+0x58>)
 801657a:	2202      	movs	r2, #2
 801657c:	701a      	strb	r2, [r3, #0]
  break;
 801657e:	e004      	b.n	801658a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8016580:	4b05      	ldr	r3, [pc, #20]	@ (8016598 <USBH_UserProcess+0x58>)
 8016582:	2201      	movs	r2, #1
 8016584:	701a      	strb	r2, [r3, #0]
  break;
 8016586:	e000      	b.n	801658a <USBH_UserProcess+0x4a>

  default:
  break;
 8016588:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801658a:	bf00      	nop
 801658c:	370c      	adds	r7, #12
 801658e:	46bd      	mov	sp, r7
 8016590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016594:	4770      	bx	lr
 8016596:	bf00      	nop
 8016598:	2000958c 	.word	0x2000958c

0801659c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b08a      	sub	sp, #40	@ 0x28
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80165a4:	f107 0314 	add.w	r3, r7, #20
 80165a8:	2200      	movs	r2, #0
 80165aa:	601a      	str	r2, [r3, #0]
 80165ac:	605a      	str	r2, [r3, #4]
 80165ae:	609a      	str	r2, [r3, #8]
 80165b0:	60da      	str	r2, [r3, #12]
 80165b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80165bc:	d13c      	bne.n	8016638 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80165be:	4b20      	ldr	r3, [pc, #128]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 80165c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165c2:	4a1f      	ldr	r2, [pc, #124]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 80165c4:	f043 0301 	orr.w	r3, r3, #1
 80165c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80165ca:	4b1d      	ldr	r3, [pc, #116]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 80165cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165ce:	f003 0301 	and.w	r3, r3, #1
 80165d2:	613b      	str	r3, [r7, #16]
 80165d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80165d6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80165da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165dc:	2302      	movs	r3, #2
 80165de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165e0:	2300      	movs	r3, #0
 80165e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165e4:	2303      	movs	r3, #3
 80165e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80165e8:	230a      	movs	r3, #10
 80165ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80165ec:	f107 0314 	add.w	r3, r7, #20
 80165f0:	4619      	mov	r1, r3
 80165f2:	4814      	ldr	r0, [pc, #80]	@ (8016644 <HAL_HCD_MspInit+0xa8>)
 80165f4:	f7f0 f94c 	bl	8006890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80165f8:	4b11      	ldr	r3, [pc, #68]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 80165fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80165fc:	4a10      	ldr	r2, [pc, #64]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 80165fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016602:	6353      	str	r3, [r2, #52]	@ 0x34
 8016604:	4b0e      	ldr	r3, [pc, #56]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 8016606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801660c:	60fb      	str	r3, [r7, #12]
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	4b0b      	ldr	r3, [pc, #44]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 8016612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016614:	4a0a      	ldr	r2, [pc, #40]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 8016616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801661a:	6453      	str	r3, [r2, #68]	@ 0x44
 801661c:	4b08      	ldr	r3, [pc, #32]	@ (8016640 <HAL_HCD_MspInit+0xa4>)
 801661e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016624:	60bb      	str	r3, [r7, #8]
 8016626:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016628:	2200      	movs	r2, #0
 801662a:	2105      	movs	r1, #5
 801662c:	2043      	movs	r0, #67	@ 0x43
 801662e:	f7ee fdeb 	bl	8005208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016632:	2043      	movs	r0, #67	@ 0x43
 8016634:	f7ee fe04 	bl	8005240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016638:	bf00      	nop
 801663a:	3728      	adds	r7, #40	@ 0x28
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}
 8016640:	40023800 	.word	0x40023800
 8016644:	40020000 	.word	0x40020000

08016648 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016656:	4618      	mov	r0, r3
 8016658:	f7fc fac7 	bl	8012bea <USBH_LL_IncTimer>
}
 801665c:	bf00      	nop
 801665e:	3708      	adds	r7, #8
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b082      	sub	sp, #8
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016672:	4618      	mov	r0, r3
 8016674:	f7fc fb07 	bl	8012c86 <USBH_LL_Connect>
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801668e:	4618      	mov	r0, r3
 8016690:	f7fc fb14 	bl	8012cbc <USBH_LL_Disconnect>
}
 8016694:	bf00      	nop
 8016696:	3708      	adds	r7, #8
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	460b      	mov	r3, r1
 80166a6:	70fb      	strb	r3, [r7, #3]
 80166a8:	4613      	mov	r3, r2
 80166aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7fc fb68 	bl	8012d88 <USBH_LL_NotifyURBChange>
#endif
}
 80166b8:	bf00      	nop
 80166ba:	3708      	adds	r7, #8
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}

080166c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7fc fab5 	bl	8012c3e <USBH_LL_PortEnabled>
}
 80166d4:	bf00      	nop
 80166d6:	3708      	adds	r7, #8
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7fc fab9 	bl	8012c62 <USBH_LL_PortDisabled>
}
 80166f0:	bf00      	nop
 80166f2:	3708      	adds	r7, #8
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}

080166f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8016706:	2b01      	cmp	r3, #1
 8016708:	d12a      	bne.n	8016760 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801670a:	4a18      	ldr	r2, [pc, #96]	@ (801676c <USBH_LL_Init+0x74>)
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	4a15      	ldr	r2, [pc, #84]	@ (801676c <USBH_LL_Init+0x74>)
 8016716:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801671a:	4b14      	ldr	r3, [pc, #80]	@ (801676c <USBH_LL_Init+0x74>)
 801671c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8016720:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8016722:	4b12      	ldr	r3, [pc, #72]	@ (801676c <USBH_LL_Init+0x74>)
 8016724:	2208      	movs	r2, #8
 8016726:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8016728:	4b10      	ldr	r3, [pc, #64]	@ (801676c <USBH_LL_Init+0x74>)
 801672a:	2201      	movs	r2, #1
 801672c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801672e:	4b0f      	ldr	r3, [pc, #60]	@ (801676c <USBH_LL_Init+0x74>)
 8016730:	2200      	movs	r2, #0
 8016732:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8016734:	4b0d      	ldr	r3, [pc, #52]	@ (801676c <USBH_LL_Init+0x74>)
 8016736:	2202      	movs	r2, #2
 8016738:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801673a:	4b0c      	ldr	r3, [pc, #48]	@ (801676c <USBH_LL_Init+0x74>)
 801673c:	2200      	movs	r2, #0
 801673e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8016740:	480a      	ldr	r0, [pc, #40]	@ (801676c <USBH_LL_Init+0x74>)
 8016742:	f7f0 fa82 	bl	8006c4a <HAL_HCD_Init>
 8016746:	4603      	mov	r3, r0
 8016748:	2b00      	cmp	r3, #0
 801674a:	d001      	beq.n	8016750 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801674c:	f7ec fb2e 	bl	8002dac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8016750:	4806      	ldr	r0, [pc, #24]	@ (801676c <USBH_LL_Init+0x74>)
 8016752:	f7f0 fee3 	bl	800751c <HAL_HCD_GetCurrentFrame>
 8016756:	4603      	mov	r3, r0
 8016758:	4619      	mov	r1, r3
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f7fc fa36 	bl	8012bcc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8016760:	2300      	movs	r3, #0
}
 8016762:	4618      	mov	r0, r3
 8016764:	3708      	adds	r7, #8
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	20009590 	.word	0x20009590

08016770 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016778:	2300      	movs	r3, #0
 801677a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801677c:	2300      	movs	r3, #0
 801677e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8016786:	4618      	mov	r0, r3
 8016788:	f7f0 fe50 	bl	800742c <HAL_HCD_Start>
 801678c:	4603      	mov	r3, r0
 801678e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016790:	7bfb      	ldrb	r3, [r7, #15]
 8016792:	4618      	mov	r0, r3
 8016794:	f000 f95e 	bl	8016a54 <USBH_Get_USB_Status>
 8016798:	4603      	mov	r3, r0
 801679a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801679c:	7bbb      	ldrb	r3, [r7, #14]
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3710      	adds	r7, #16
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}

080167a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80167a6:	b580      	push	{r7, lr}
 80167a8:	b084      	sub	sp, #16
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167ae:	2300      	movs	r3, #0
 80167b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80167b2:	2300      	movs	r3, #0
 80167b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80167bc:	4618      	mov	r0, r3
 80167be:	f7f0 fe58 	bl	8007472 <HAL_HCD_Stop>
 80167c2:	4603      	mov	r3, r0
 80167c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80167c6:	7bfb      	ldrb	r3, [r7, #15]
 80167c8:	4618      	mov	r0, r3
 80167ca:	f000 f943 	bl	8016a54 <USBH_Get_USB_Status>
 80167ce:	4603      	mov	r3, r0
 80167d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3710      	adds	r7, #16
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80167e4:	2301      	movs	r3, #1
 80167e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7f0 fea2 	bl	8007538 <HAL_HCD_GetCurrentSpeed>
 80167f4:	4603      	mov	r3, r0
 80167f6:	2b02      	cmp	r3, #2
 80167f8:	d00c      	beq.n	8016814 <USBH_LL_GetSpeed+0x38>
 80167fa:	2b02      	cmp	r3, #2
 80167fc:	d80d      	bhi.n	801681a <USBH_LL_GetSpeed+0x3e>
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d002      	beq.n	8016808 <USBH_LL_GetSpeed+0x2c>
 8016802:	2b01      	cmp	r3, #1
 8016804:	d003      	beq.n	801680e <USBH_LL_GetSpeed+0x32>
 8016806:	e008      	b.n	801681a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8016808:	2300      	movs	r3, #0
 801680a:	73fb      	strb	r3, [r7, #15]
    break;
 801680c:	e008      	b.n	8016820 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801680e:	2301      	movs	r3, #1
 8016810:	73fb      	strb	r3, [r7, #15]
    break;
 8016812:	e005      	b.n	8016820 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8016814:	2302      	movs	r3, #2
 8016816:	73fb      	strb	r3, [r7, #15]
    break;
 8016818:	e002      	b.n	8016820 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801681a:	2301      	movs	r3, #1
 801681c:	73fb      	strb	r3, [r7, #15]
    break;
 801681e:	bf00      	nop
  }
  return  speed;
 8016820:	7bfb      	ldrb	r3, [r7, #15]
}
 8016822:	4618      	mov	r0, r3
 8016824:	3710      	adds	r7, #16
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}

0801682a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801682a:	b580      	push	{r7, lr}
 801682c:	b084      	sub	sp, #16
 801682e:	af00      	add	r7, sp, #0
 8016830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016832:	2300      	movs	r3, #0
 8016834:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016836:	2300      	movs	r3, #0
 8016838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8016840:	4618      	mov	r0, r3
 8016842:	f7f0 fe33 	bl	80074ac <HAL_HCD_ResetPort>
 8016846:	4603      	mov	r3, r0
 8016848:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801684a:	7bfb      	ldrb	r3, [r7, #15]
 801684c:	4618      	mov	r0, r3
 801684e:	f000 f901 	bl	8016a54 <USBH_Get_USB_Status>
 8016852:	4603      	mov	r3, r0
 8016854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016856:	7bbb      	ldrb	r3, [r7, #14]
}
 8016858:	4618      	mov	r0, r3
 801685a:	3710      	adds	r7, #16
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b082      	sub	sp, #8
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	460b      	mov	r3, r1
 801686a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8016872:	78fa      	ldrb	r2, [r7, #3]
 8016874:	4611      	mov	r1, r2
 8016876:	4618      	mov	r0, r3
 8016878:	f7f0 fe3b 	bl	80074f2 <HAL_HCD_HC_GetXferCount>
 801687c:	4603      	mov	r3, r0
}
 801687e:	4618      	mov	r0, r3
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}

08016886 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016886:	b590      	push	{r4, r7, lr}
 8016888:	b089      	sub	sp, #36	@ 0x24
 801688a:	af04      	add	r7, sp, #16
 801688c:	6078      	str	r0, [r7, #4]
 801688e:	4608      	mov	r0, r1
 8016890:	4611      	mov	r1, r2
 8016892:	461a      	mov	r2, r3
 8016894:	4603      	mov	r3, r0
 8016896:	70fb      	strb	r3, [r7, #3]
 8016898:	460b      	mov	r3, r1
 801689a:	70bb      	strb	r3, [r7, #2]
 801689c:	4613      	mov	r3, r2
 801689e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168a0:	2300      	movs	r3, #0
 80168a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80168a4:	2300      	movs	r3, #0
 80168a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80168ae:	787c      	ldrb	r4, [r7, #1]
 80168b0:	78ba      	ldrb	r2, [r7, #2]
 80168b2:	78f9      	ldrb	r1, [r7, #3]
 80168b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80168b6:	9302      	str	r3, [sp, #8]
 80168b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80168bc:	9301      	str	r3, [sp, #4]
 80168be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80168c2:	9300      	str	r3, [sp, #0]
 80168c4:	4623      	mov	r3, r4
 80168c6:	f7f0 fa27 	bl	8006d18 <HAL_HCD_HC_Init>
 80168ca:	4603      	mov	r3, r0
 80168cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80168ce:	7bfb      	ldrb	r3, [r7, #15]
 80168d0:	4618      	mov	r0, r3
 80168d2:	f000 f8bf 	bl	8016a54 <USBH_Get_USB_Status>
 80168d6:	4603      	mov	r3, r0
 80168d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168da:	7bbb      	ldrb	r3, [r7, #14]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3714      	adds	r7, #20
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd90      	pop	{r4, r7, pc}

080168e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b084      	sub	sp, #16
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
 80168ec:	460b      	mov	r3, r1
 80168ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168f0:	2300      	movs	r3, #0
 80168f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80168f4:	2300      	movs	r3, #0
 80168f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80168fe:	78fa      	ldrb	r2, [r7, #3]
 8016900:	4611      	mov	r1, r2
 8016902:	4618      	mov	r0, r3
 8016904:	f7f0 fac0 	bl	8006e88 <HAL_HCD_HC_Halt>
 8016908:	4603      	mov	r3, r0
 801690a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801690c:	7bfb      	ldrb	r3, [r7, #15]
 801690e:	4618      	mov	r0, r3
 8016910:	f000 f8a0 	bl	8016a54 <USBH_Get_USB_Status>
 8016914:	4603      	mov	r3, r0
 8016916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016918:	7bbb      	ldrb	r3, [r7, #14]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3710      	adds	r7, #16
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}

08016922 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8016922:	b590      	push	{r4, r7, lr}
 8016924:	b089      	sub	sp, #36	@ 0x24
 8016926:	af04      	add	r7, sp, #16
 8016928:	6078      	str	r0, [r7, #4]
 801692a:	4608      	mov	r0, r1
 801692c:	4611      	mov	r1, r2
 801692e:	461a      	mov	r2, r3
 8016930:	4603      	mov	r3, r0
 8016932:	70fb      	strb	r3, [r7, #3]
 8016934:	460b      	mov	r3, r1
 8016936:	70bb      	strb	r3, [r7, #2]
 8016938:	4613      	mov	r3, r2
 801693a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801693c:	2300      	movs	r3, #0
 801693e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016940:	2300      	movs	r3, #0
 8016942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801694a:	787c      	ldrb	r4, [r7, #1]
 801694c:	78ba      	ldrb	r2, [r7, #2]
 801694e:	78f9      	ldrb	r1, [r7, #3]
 8016950:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016954:	9303      	str	r3, [sp, #12]
 8016956:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016958:	9302      	str	r3, [sp, #8]
 801695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801695c:	9301      	str	r3, [sp, #4]
 801695e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016962:	9300      	str	r3, [sp, #0]
 8016964:	4623      	mov	r3, r4
 8016966:	f7f0 fab3 	bl	8006ed0 <HAL_HCD_HC_SubmitRequest>
 801696a:	4603      	mov	r3, r0
 801696c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801696e:	7bfb      	ldrb	r3, [r7, #15]
 8016970:	4618      	mov	r0, r3
 8016972:	f000 f86f 	bl	8016a54 <USBH_Get_USB_Status>
 8016976:	4603      	mov	r3, r0
 8016978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801697a:	7bbb      	ldrb	r3, [r7, #14]
}
 801697c:	4618      	mov	r0, r3
 801697e:	3714      	adds	r7, #20
 8016980:	46bd      	mov	sp, r7
 8016982:	bd90      	pop	{r4, r7, pc}

08016984 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b082      	sub	sp, #8
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	460b      	mov	r3, r1
 801698e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8016996:	78fa      	ldrb	r2, [r7, #3]
 8016998:	4611      	mov	r1, r2
 801699a:	4618      	mov	r0, r3
 801699c:	f7f0 fd94 	bl	80074c8 <HAL_HCD_HC_GetURBState>
 80169a0:	4603      	mov	r3, r0
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3708      	adds	r7, #8
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}

080169aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80169aa:	b580      	push	{r7, lr}
 80169ac:	b082      	sub	sp, #8
 80169ae:	af00      	add	r7, sp, #0
 80169b0:	6078      	str	r0, [r7, #4]
 80169b2:	460b      	mov	r3, r1
 80169b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d103      	bne.n	80169c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80169c0:	78fb      	ldrb	r3, [r7, #3]
 80169c2:	4618      	mov	r0, r3
 80169c4:	f000 f872 	bl	8016aac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80169c8:	20c8      	movs	r0, #200	@ 0xc8
 80169ca:	f7ee f8a9 	bl	8004b20 <HAL_Delay>
  return USBH_OK;
 80169ce:	2300      	movs	r3, #0
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	3708      	adds	r7, #8
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80169d8:	b480      	push	{r7}
 80169da:	b085      	sub	sp, #20
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	460b      	mov	r3, r1
 80169e2:	70fb      	strb	r3, [r7, #3]
 80169e4:	4613      	mov	r3, r2
 80169e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80169ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80169f0:	78fa      	ldrb	r2, [r7, #3]
 80169f2:	68f9      	ldr	r1, [r7, #12]
 80169f4:	4613      	mov	r3, r2
 80169f6:	011b      	lsls	r3, r3, #4
 80169f8:	1a9b      	subs	r3, r3, r2
 80169fa:	009b      	lsls	r3, r3, #2
 80169fc:	440b      	add	r3, r1
 80169fe:	3317      	adds	r3, #23
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d00a      	beq.n	8016a1c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8016a06:	78fa      	ldrb	r2, [r7, #3]
 8016a08:	68f9      	ldr	r1, [r7, #12]
 8016a0a:	4613      	mov	r3, r2
 8016a0c:	011b      	lsls	r3, r3, #4
 8016a0e:	1a9b      	subs	r3, r3, r2
 8016a10:	009b      	lsls	r3, r3, #2
 8016a12:	440b      	add	r3, r1
 8016a14:	333c      	adds	r3, #60	@ 0x3c
 8016a16:	78ba      	ldrb	r2, [r7, #2]
 8016a18:	701a      	strb	r2, [r3, #0]
 8016a1a:	e009      	b.n	8016a30 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8016a1c:	78fa      	ldrb	r2, [r7, #3]
 8016a1e:	68f9      	ldr	r1, [r7, #12]
 8016a20:	4613      	mov	r3, r2
 8016a22:	011b      	lsls	r3, r3, #4
 8016a24:	1a9b      	subs	r3, r3, r2
 8016a26:	009b      	lsls	r3, r3, #2
 8016a28:	440b      	add	r3, r1
 8016a2a:	333d      	adds	r3, #61	@ 0x3d
 8016a2c:	78ba      	ldrb	r2, [r7, #2]
 8016a2e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8016a30:	2300      	movs	r3, #0
}
 8016a32:	4618      	mov	r0, r3
 8016a34:	3714      	adds	r7, #20
 8016a36:	46bd      	mov	sp, r7
 8016a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3c:	4770      	bx	lr

08016a3e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8016a3e:	b580      	push	{r7, lr}
 8016a40:	b082      	sub	sp, #8
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f7ee f86a 	bl	8004b20 <HAL_Delay>
}
 8016a4c:	bf00      	nop
 8016a4e:	3708      	adds	r7, #8
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}

08016a54 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016a54:	b480      	push	{r7}
 8016a56:	b085      	sub	sp, #20
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016a62:	79fb      	ldrb	r3, [r7, #7]
 8016a64:	2b03      	cmp	r3, #3
 8016a66:	d817      	bhi.n	8016a98 <USBH_Get_USB_Status+0x44>
 8016a68:	a201      	add	r2, pc, #4	@ (adr r2, 8016a70 <USBH_Get_USB_Status+0x1c>)
 8016a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a6e:	bf00      	nop
 8016a70:	08016a81 	.word	0x08016a81
 8016a74:	08016a87 	.word	0x08016a87
 8016a78:	08016a8d 	.word	0x08016a8d
 8016a7c:	08016a93 	.word	0x08016a93
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8016a80:	2300      	movs	r3, #0
 8016a82:	73fb      	strb	r3, [r7, #15]
    break;
 8016a84:	e00b      	b.n	8016a9e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8016a86:	2302      	movs	r3, #2
 8016a88:	73fb      	strb	r3, [r7, #15]
    break;
 8016a8a:	e008      	b.n	8016a9e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8016a90:	e005      	b.n	8016a9e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8016a92:	2302      	movs	r3, #2
 8016a94:	73fb      	strb	r3, [r7, #15]
    break;
 8016a96:	e002      	b.n	8016a9e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8016a98:	2302      	movs	r3, #2
 8016a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8016a9c:	bf00      	nop
  }
  return usb_status;
 8016a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3714      	adds	r7, #20
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aaa:	4770      	bx	lr

08016aac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8016ab6:	79fb      	ldrb	r3, [r7, #7]
 8016ab8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8016aba:	79fb      	ldrb	r3, [r7, #7]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d102      	bne.n	8016ac6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	73fb      	strb	r3, [r7, #15]
 8016ac4:	e001      	b.n	8016aca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8016aca:	7bfb      	ldrb	r3, [r7, #15]
 8016acc:	461a      	mov	r2, r3
 8016ace:	2120      	movs	r1, #32
 8016ad0:	4803      	ldr	r0, [pc, #12]	@ (8016ae0 <MX_DriverVbusFS+0x34>)
 8016ad2:	f7f0 f8a1 	bl	8006c18 <HAL_GPIO_WritePin>
}
 8016ad6:	bf00      	nop
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	40020c00 	.word	0x40020c00

08016ae4 <malloc>:
 8016ae4:	4b02      	ldr	r3, [pc, #8]	@ (8016af0 <malloc+0xc>)
 8016ae6:	4601      	mov	r1, r0
 8016ae8:	6818      	ldr	r0, [r3, #0]
 8016aea:	f000 b82d 	b.w	8016b48 <_malloc_r>
 8016aee:	bf00      	nop
 8016af0:	20000078 	.word	0x20000078

08016af4 <free>:
 8016af4:	4b02      	ldr	r3, [pc, #8]	@ (8016b00 <free+0xc>)
 8016af6:	4601      	mov	r1, r0
 8016af8:	6818      	ldr	r0, [r3, #0]
 8016afa:	f000 b9c1 	b.w	8016e80 <_free_r>
 8016afe:	bf00      	nop
 8016b00:	20000078 	.word	0x20000078

08016b04 <sbrk_aligned>:
 8016b04:	b570      	push	{r4, r5, r6, lr}
 8016b06:	4e0f      	ldr	r6, [pc, #60]	@ (8016b44 <sbrk_aligned+0x40>)
 8016b08:	460c      	mov	r4, r1
 8016b0a:	6831      	ldr	r1, [r6, #0]
 8016b0c:	4605      	mov	r5, r0
 8016b0e:	b911      	cbnz	r1, 8016b16 <sbrk_aligned+0x12>
 8016b10:	f000 f96c 	bl	8016dec <_sbrk_r>
 8016b14:	6030      	str	r0, [r6, #0]
 8016b16:	4621      	mov	r1, r4
 8016b18:	4628      	mov	r0, r5
 8016b1a:	f000 f967 	bl	8016dec <_sbrk_r>
 8016b1e:	1c43      	adds	r3, r0, #1
 8016b20:	d103      	bne.n	8016b2a <sbrk_aligned+0x26>
 8016b22:	f04f 34ff 	mov.w	r4, #4294967295
 8016b26:	4620      	mov	r0, r4
 8016b28:	bd70      	pop	{r4, r5, r6, pc}
 8016b2a:	1cc4      	adds	r4, r0, #3
 8016b2c:	f024 0403 	bic.w	r4, r4, #3
 8016b30:	42a0      	cmp	r0, r4
 8016b32:	d0f8      	beq.n	8016b26 <sbrk_aligned+0x22>
 8016b34:	1a21      	subs	r1, r4, r0
 8016b36:	4628      	mov	r0, r5
 8016b38:	f000 f958 	bl	8016dec <_sbrk_r>
 8016b3c:	3001      	adds	r0, #1
 8016b3e:	d1f2      	bne.n	8016b26 <sbrk_aligned+0x22>
 8016b40:	e7ef      	b.n	8016b22 <sbrk_aligned+0x1e>
 8016b42:	bf00      	nop
 8016b44:	20009970 	.word	0x20009970

08016b48 <_malloc_r>:
 8016b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b4c:	1ccd      	adds	r5, r1, #3
 8016b4e:	f025 0503 	bic.w	r5, r5, #3
 8016b52:	3508      	adds	r5, #8
 8016b54:	2d0c      	cmp	r5, #12
 8016b56:	bf38      	it	cc
 8016b58:	250c      	movcc	r5, #12
 8016b5a:	2d00      	cmp	r5, #0
 8016b5c:	4606      	mov	r6, r0
 8016b5e:	db01      	blt.n	8016b64 <_malloc_r+0x1c>
 8016b60:	42a9      	cmp	r1, r5
 8016b62:	d904      	bls.n	8016b6e <_malloc_r+0x26>
 8016b64:	230c      	movs	r3, #12
 8016b66:	6033      	str	r3, [r6, #0]
 8016b68:	2000      	movs	r0, #0
 8016b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016c44 <_malloc_r+0xfc>
 8016b72:	f000 f869 	bl	8016c48 <__malloc_lock>
 8016b76:	f8d8 3000 	ldr.w	r3, [r8]
 8016b7a:	461c      	mov	r4, r3
 8016b7c:	bb44      	cbnz	r4, 8016bd0 <_malloc_r+0x88>
 8016b7e:	4629      	mov	r1, r5
 8016b80:	4630      	mov	r0, r6
 8016b82:	f7ff ffbf 	bl	8016b04 <sbrk_aligned>
 8016b86:	1c43      	adds	r3, r0, #1
 8016b88:	4604      	mov	r4, r0
 8016b8a:	d158      	bne.n	8016c3e <_malloc_r+0xf6>
 8016b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8016b90:	4627      	mov	r7, r4
 8016b92:	2f00      	cmp	r7, #0
 8016b94:	d143      	bne.n	8016c1e <_malloc_r+0xd6>
 8016b96:	2c00      	cmp	r4, #0
 8016b98:	d04b      	beq.n	8016c32 <_malloc_r+0xea>
 8016b9a:	6823      	ldr	r3, [r4, #0]
 8016b9c:	4639      	mov	r1, r7
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	eb04 0903 	add.w	r9, r4, r3
 8016ba4:	f000 f922 	bl	8016dec <_sbrk_r>
 8016ba8:	4581      	cmp	r9, r0
 8016baa:	d142      	bne.n	8016c32 <_malloc_r+0xea>
 8016bac:	6821      	ldr	r1, [r4, #0]
 8016bae:	1a6d      	subs	r5, r5, r1
 8016bb0:	4629      	mov	r1, r5
 8016bb2:	4630      	mov	r0, r6
 8016bb4:	f7ff ffa6 	bl	8016b04 <sbrk_aligned>
 8016bb8:	3001      	adds	r0, #1
 8016bba:	d03a      	beq.n	8016c32 <_malloc_r+0xea>
 8016bbc:	6823      	ldr	r3, [r4, #0]
 8016bbe:	442b      	add	r3, r5
 8016bc0:	6023      	str	r3, [r4, #0]
 8016bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8016bc6:	685a      	ldr	r2, [r3, #4]
 8016bc8:	bb62      	cbnz	r2, 8016c24 <_malloc_r+0xdc>
 8016bca:	f8c8 7000 	str.w	r7, [r8]
 8016bce:	e00f      	b.n	8016bf0 <_malloc_r+0xa8>
 8016bd0:	6822      	ldr	r2, [r4, #0]
 8016bd2:	1b52      	subs	r2, r2, r5
 8016bd4:	d420      	bmi.n	8016c18 <_malloc_r+0xd0>
 8016bd6:	2a0b      	cmp	r2, #11
 8016bd8:	d917      	bls.n	8016c0a <_malloc_r+0xc2>
 8016bda:	1961      	adds	r1, r4, r5
 8016bdc:	42a3      	cmp	r3, r4
 8016bde:	6025      	str	r5, [r4, #0]
 8016be0:	bf18      	it	ne
 8016be2:	6059      	strne	r1, [r3, #4]
 8016be4:	6863      	ldr	r3, [r4, #4]
 8016be6:	bf08      	it	eq
 8016be8:	f8c8 1000 	streq.w	r1, [r8]
 8016bec:	5162      	str	r2, [r4, r5]
 8016bee:	604b      	str	r3, [r1, #4]
 8016bf0:	4630      	mov	r0, r6
 8016bf2:	f000 f82f 	bl	8016c54 <__malloc_unlock>
 8016bf6:	f104 000b 	add.w	r0, r4, #11
 8016bfa:	1d23      	adds	r3, r4, #4
 8016bfc:	f020 0007 	bic.w	r0, r0, #7
 8016c00:	1ac2      	subs	r2, r0, r3
 8016c02:	bf1c      	itt	ne
 8016c04:	1a1b      	subne	r3, r3, r0
 8016c06:	50a3      	strne	r3, [r4, r2]
 8016c08:	e7af      	b.n	8016b6a <_malloc_r+0x22>
 8016c0a:	6862      	ldr	r2, [r4, #4]
 8016c0c:	42a3      	cmp	r3, r4
 8016c0e:	bf0c      	ite	eq
 8016c10:	f8c8 2000 	streq.w	r2, [r8]
 8016c14:	605a      	strne	r2, [r3, #4]
 8016c16:	e7eb      	b.n	8016bf0 <_malloc_r+0xa8>
 8016c18:	4623      	mov	r3, r4
 8016c1a:	6864      	ldr	r4, [r4, #4]
 8016c1c:	e7ae      	b.n	8016b7c <_malloc_r+0x34>
 8016c1e:	463c      	mov	r4, r7
 8016c20:	687f      	ldr	r7, [r7, #4]
 8016c22:	e7b6      	b.n	8016b92 <_malloc_r+0x4a>
 8016c24:	461a      	mov	r2, r3
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	42a3      	cmp	r3, r4
 8016c2a:	d1fb      	bne.n	8016c24 <_malloc_r+0xdc>
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	6053      	str	r3, [r2, #4]
 8016c30:	e7de      	b.n	8016bf0 <_malloc_r+0xa8>
 8016c32:	230c      	movs	r3, #12
 8016c34:	6033      	str	r3, [r6, #0]
 8016c36:	4630      	mov	r0, r6
 8016c38:	f000 f80c 	bl	8016c54 <__malloc_unlock>
 8016c3c:	e794      	b.n	8016b68 <_malloc_r+0x20>
 8016c3e:	6005      	str	r5, [r0, #0]
 8016c40:	e7d6      	b.n	8016bf0 <_malloc_r+0xa8>
 8016c42:	bf00      	nop
 8016c44:	20009974 	.word	0x20009974

08016c48 <__malloc_lock>:
 8016c48:	4801      	ldr	r0, [pc, #4]	@ (8016c50 <__malloc_lock+0x8>)
 8016c4a:	f000 b909 	b.w	8016e60 <__retarget_lock_acquire_recursive>
 8016c4e:	bf00      	nop
 8016c50:	20009ab4 	.word	0x20009ab4

08016c54 <__malloc_unlock>:
 8016c54:	4801      	ldr	r0, [pc, #4]	@ (8016c5c <__malloc_unlock+0x8>)
 8016c56:	f000 b904 	b.w	8016e62 <__retarget_lock_release_recursive>
 8016c5a:	bf00      	nop
 8016c5c:	20009ab4 	.word	0x20009ab4

08016c60 <sniprintf>:
 8016c60:	b40c      	push	{r2, r3}
 8016c62:	b530      	push	{r4, r5, lr}
 8016c64:	4b18      	ldr	r3, [pc, #96]	@ (8016cc8 <sniprintf+0x68>)
 8016c66:	1e0c      	subs	r4, r1, #0
 8016c68:	681d      	ldr	r5, [r3, #0]
 8016c6a:	b09d      	sub	sp, #116	@ 0x74
 8016c6c:	da08      	bge.n	8016c80 <sniprintf+0x20>
 8016c6e:	238b      	movs	r3, #139	@ 0x8b
 8016c70:	602b      	str	r3, [r5, #0]
 8016c72:	f04f 30ff 	mov.w	r0, #4294967295
 8016c76:	b01d      	add	sp, #116	@ 0x74
 8016c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c7c:	b002      	add	sp, #8
 8016c7e:	4770      	bx	lr
 8016c80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016c84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c88:	f04f 0300 	mov.w	r3, #0
 8016c8c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016c8e:	bf14      	ite	ne
 8016c90:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016c94:	4623      	moveq	r3, r4
 8016c96:	9304      	str	r3, [sp, #16]
 8016c98:	9307      	str	r3, [sp, #28]
 8016c9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016c9e:	9002      	str	r0, [sp, #8]
 8016ca0:	9006      	str	r0, [sp, #24]
 8016ca2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016ca6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016ca8:	ab21      	add	r3, sp, #132	@ 0x84
 8016caa:	a902      	add	r1, sp, #8
 8016cac:	4628      	mov	r0, r5
 8016cae:	9301      	str	r3, [sp, #4]
 8016cb0:	f000 f98c 	bl	8016fcc <_svfiprintf_r>
 8016cb4:	1c43      	adds	r3, r0, #1
 8016cb6:	bfbc      	itt	lt
 8016cb8:	238b      	movlt	r3, #139	@ 0x8b
 8016cba:	602b      	strlt	r3, [r5, #0]
 8016cbc:	2c00      	cmp	r4, #0
 8016cbe:	d0da      	beq.n	8016c76 <sniprintf+0x16>
 8016cc0:	9b02      	ldr	r3, [sp, #8]
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	701a      	strb	r2, [r3, #0]
 8016cc6:	e7d6      	b.n	8016c76 <sniprintf+0x16>
 8016cc8:	20000078 	.word	0x20000078

08016ccc <siprintf>:
 8016ccc:	b40e      	push	{r1, r2, r3}
 8016cce:	b510      	push	{r4, lr}
 8016cd0:	b09d      	sub	sp, #116	@ 0x74
 8016cd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016cd4:	9002      	str	r0, [sp, #8]
 8016cd6:	9006      	str	r0, [sp, #24]
 8016cd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016cdc:	480a      	ldr	r0, [pc, #40]	@ (8016d08 <siprintf+0x3c>)
 8016cde:	9107      	str	r1, [sp, #28]
 8016ce0:	9104      	str	r1, [sp, #16]
 8016ce2:	490a      	ldr	r1, [pc, #40]	@ (8016d0c <siprintf+0x40>)
 8016ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ce8:	9105      	str	r1, [sp, #20]
 8016cea:	2400      	movs	r4, #0
 8016cec:	a902      	add	r1, sp, #8
 8016cee:	6800      	ldr	r0, [r0, #0]
 8016cf0:	9301      	str	r3, [sp, #4]
 8016cf2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016cf4:	f000 f96a 	bl	8016fcc <_svfiprintf_r>
 8016cf8:	9b02      	ldr	r3, [sp, #8]
 8016cfa:	701c      	strb	r4, [r3, #0]
 8016cfc:	b01d      	add	sp, #116	@ 0x74
 8016cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d02:	b003      	add	sp, #12
 8016d04:	4770      	bx	lr
 8016d06:	bf00      	nop
 8016d08:	20000078 	.word	0x20000078
 8016d0c:	ffff0208 	.word	0xffff0208

08016d10 <_vsniprintf_r>:
 8016d10:	b530      	push	{r4, r5, lr}
 8016d12:	4614      	mov	r4, r2
 8016d14:	2c00      	cmp	r4, #0
 8016d16:	b09b      	sub	sp, #108	@ 0x6c
 8016d18:	4605      	mov	r5, r0
 8016d1a:	461a      	mov	r2, r3
 8016d1c:	da05      	bge.n	8016d2a <_vsniprintf_r+0x1a>
 8016d1e:	238b      	movs	r3, #139	@ 0x8b
 8016d20:	6003      	str	r3, [r0, #0]
 8016d22:	f04f 30ff 	mov.w	r0, #4294967295
 8016d26:	b01b      	add	sp, #108	@ 0x6c
 8016d28:	bd30      	pop	{r4, r5, pc}
 8016d2a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016d2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016d32:	f04f 0300 	mov.w	r3, #0
 8016d36:	9319      	str	r3, [sp, #100]	@ 0x64
 8016d38:	bf14      	ite	ne
 8016d3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016d3e:	4623      	moveq	r3, r4
 8016d40:	9302      	str	r3, [sp, #8]
 8016d42:	9305      	str	r3, [sp, #20]
 8016d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016d48:	9100      	str	r1, [sp, #0]
 8016d4a:	9104      	str	r1, [sp, #16]
 8016d4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016d50:	4669      	mov	r1, sp
 8016d52:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016d54:	f000 f93a 	bl	8016fcc <_svfiprintf_r>
 8016d58:	1c43      	adds	r3, r0, #1
 8016d5a:	bfbc      	itt	lt
 8016d5c:	238b      	movlt	r3, #139	@ 0x8b
 8016d5e:	602b      	strlt	r3, [r5, #0]
 8016d60:	2c00      	cmp	r4, #0
 8016d62:	d0e0      	beq.n	8016d26 <_vsniprintf_r+0x16>
 8016d64:	9b00      	ldr	r3, [sp, #0]
 8016d66:	2200      	movs	r2, #0
 8016d68:	701a      	strb	r2, [r3, #0]
 8016d6a:	e7dc      	b.n	8016d26 <_vsniprintf_r+0x16>

08016d6c <vsniprintf>:
 8016d6c:	b507      	push	{r0, r1, r2, lr}
 8016d6e:	9300      	str	r3, [sp, #0]
 8016d70:	4613      	mov	r3, r2
 8016d72:	460a      	mov	r2, r1
 8016d74:	4601      	mov	r1, r0
 8016d76:	4803      	ldr	r0, [pc, #12]	@ (8016d84 <vsniprintf+0x18>)
 8016d78:	6800      	ldr	r0, [r0, #0]
 8016d7a:	f7ff ffc9 	bl	8016d10 <_vsniprintf_r>
 8016d7e:	b003      	add	sp, #12
 8016d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d84:	20000078 	.word	0x20000078

08016d88 <memset>:
 8016d88:	4402      	add	r2, r0
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	4293      	cmp	r3, r2
 8016d8e:	d100      	bne.n	8016d92 <memset+0xa>
 8016d90:	4770      	bx	lr
 8016d92:	f803 1b01 	strb.w	r1, [r3], #1
 8016d96:	e7f9      	b.n	8016d8c <memset+0x4>

08016d98 <strncpy>:
 8016d98:	b510      	push	{r4, lr}
 8016d9a:	3901      	subs	r1, #1
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	b132      	cbz	r2, 8016dae <strncpy+0x16>
 8016da0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016da4:	f803 4b01 	strb.w	r4, [r3], #1
 8016da8:	3a01      	subs	r2, #1
 8016daa:	2c00      	cmp	r4, #0
 8016dac:	d1f7      	bne.n	8016d9e <strncpy+0x6>
 8016dae:	441a      	add	r2, r3
 8016db0:	2100      	movs	r1, #0
 8016db2:	4293      	cmp	r3, r2
 8016db4:	d100      	bne.n	8016db8 <strncpy+0x20>
 8016db6:	bd10      	pop	{r4, pc}
 8016db8:	f803 1b01 	strb.w	r1, [r3], #1
 8016dbc:	e7f9      	b.n	8016db2 <strncpy+0x1a>

08016dbe <strstr>:
 8016dbe:	780a      	ldrb	r2, [r1, #0]
 8016dc0:	b570      	push	{r4, r5, r6, lr}
 8016dc2:	b96a      	cbnz	r2, 8016de0 <strstr+0x22>
 8016dc4:	bd70      	pop	{r4, r5, r6, pc}
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	d109      	bne.n	8016dde <strstr+0x20>
 8016dca:	460c      	mov	r4, r1
 8016dcc:	4605      	mov	r5, r0
 8016dce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d0f6      	beq.n	8016dc4 <strstr+0x6>
 8016dd6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016dda:	429e      	cmp	r6, r3
 8016ddc:	d0f7      	beq.n	8016dce <strstr+0x10>
 8016dde:	3001      	adds	r0, #1
 8016de0:	7803      	ldrb	r3, [r0, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d1ef      	bne.n	8016dc6 <strstr+0x8>
 8016de6:	4618      	mov	r0, r3
 8016de8:	e7ec      	b.n	8016dc4 <strstr+0x6>
	...

08016dec <_sbrk_r>:
 8016dec:	b538      	push	{r3, r4, r5, lr}
 8016dee:	4d06      	ldr	r5, [pc, #24]	@ (8016e08 <_sbrk_r+0x1c>)
 8016df0:	2300      	movs	r3, #0
 8016df2:	4604      	mov	r4, r0
 8016df4:	4608      	mov	r0, r1
 8016df6:	602b      	str	r3, [r5, #0]
 8016df8:	f7ed f9ba 	bl	8004170 <_sbrk>
 8016dfc:	1c43      	adds	r3, r0, #1
 8016dfe:	d102      	bne.n	8016e06 <_sbrk_r+0x1a>
 8016e00:	682b      	ldr	r3, [r5, #0]
 8016e02:	b103      	cbz	r3, 8016e06 <_sbrk_r+0x1a>
 8016e04:	6023      	str	r3, [r4, #0]
 8016e06:	bd38      	pop	{r3, r4, r5, pc}
 8016e08:	20009ab0 	.word	0x20009ab0

08016e0c <__errno>:
 8016e0c:	4b01      	ldr	r3, [pc, #4]	@ (8016e14 <__errno+0x8>)
 8016e0e:	6818      	ldr	r0, [r3, #0]
 8016e10:	4770      	bx	lr
 8016e12:	bf00      	nop
 8016e14:	20000078 	.word	0x20000078

08016e18 <__libc_init_array>:
 8016e18:	b570      	push	{r4, r5, r6, lr}
 8016e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8016e50 <__libc_init_array+0x38>)
 8016e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8016e54 <__libc_init_array+0x3c>)
 8016e1e:	1b64      	subs	r4, r4, r5
 8016e20:	10a4      	asrs	r4, r4, #2
 8016e22:	2600      	movs	r6, #0
 8016e24:	42a6      	cmp	r6, r4
 8016e26:	d109      	bne.n	8016e3c <__libc_init_array+0x24>
 8016e28:	4d0b      	ldr	r5, [pc, #44]	@ (8016e58 <__libc_init_array+0x40>)
 8016e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8016e5c <__libc_init_array+0x44>)
 8016e2c:	f000 fba6 	bl	801757c <_init>
 8016e30:	1b64      	subs	r4, r4, r5
 8016e32:	10a4      	asrs	r4, r4, #2
 8016e34:	2600      	movs	r6, #0
 8016e36:	42a6      	cmp	r6, r4
 8016e38:	d105      	bne.n	8016e46 <__libc_init_array+0x2e>
 8016e3a:	bd70      	pop	{r4, r5, r6, pc}
 8016e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e40:	4798      	blx	r3
 8016e42:	3601      	adds	r6, #1
 8016e44:	e7ee      	b.n	8016e24 <__libc_init_array+0xc>
 8016e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e4a:	4798      	blx	r3
 8016e4c:	3601      	adds	r6, #1
 8016e4e:	e7f2      	b.n	8016e36 <__libc_init_array+0x1e>
 8016e50:	08019104 	.word	0x08019104
 8016e54:	08019104 	.word	0x08019104
 8016e58:	08019104 	.word	0x08019104
 8016e5c:	08019108 	.word	0x08019108

08016e60 <__retarget_lock_acquire_recursive>:
 8016e60:	4770      	bx	lr

08016e62 <__retarget_lock_release_recursive>:
 8016e62:	4770      	bx	lr

08016e64 <memcpy>:
 8016e64:	440a      	add	r2, r1
 8016e66:	4291      	cmp	r1, r2
 8016e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e6c:	d100      	bne.n	8016e70 <memcpy+0xc>
 8016e6e:	4770      	bx	lr
 8016e70:	b510      	push	{r4, lr}
 8016e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e7a:	4291      	cmp	r1, r2
 8016e7c:	d1f9      	bne.n	8016e72 <memcpy+0xe>
 8016e7e:	bd10      	pop	{r4, pc}

08016e80 <_free_r>:
 8016e80:	b538      	push	{r3, r4, r5, lr}
 8016e82:	4605      	mov	r5, r0
 8016e84:	2900      	cmp	r1, #0
 8016e86:	d041      	beq.n	8016f0c <_free_r+0x8c>
 8016e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e8c:	1f0c      	subs	r4, r1, #4
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	bfb8      	it	lt
 8016e92:	18e4      	addlt	r4, r4, r3
 8016e94:	f7ff fed8 	bl	8016c48 <__malloc_lock>
 8016e98:	4a1d      	ldr	r2, [pc, #116]	@ (8016f10 <_free_r+0x90>)
 8016e9a:	6813      	ldr	r3, [r2, #0]
 8016e9c:	b933      	cbnz	r3, 8016eac <_free_r+0x2c>
 8016e9e:	6063      	str	r3, [r4, #4]
 8016ea0:	6014      	str	r4, [r2, #0]
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ea8:	f7ff bed4 	b.w	8016c54 <__malloc_unlock>
 8016eac:	42a3      	cmp	r3, r4
 8016eae:	d908      	bls.n	8016ec2 <_free_r+0x42>
 8016eb0:	6820      	ldr	r0, [r4, #0]
 8016eb2:	1821      	adds	r1, r4, r0
 8016eb4:	428b      	cmp	r3, r1
 8016eb6:	bf01      	itttt	eq
 8016eb8:	6819      	ldreq	r1, [r3, #0]
 8016eba:	685b      	ldreq	r3, [r3, #4]
 8016ebc:	1809      	addeq	r1, r1, r0
 8016ebe:	6021      	streq	r1, [r4, #0]
 8016ec0:	e7ed      	b.n	8016e9e <_free_r+0x1e>
 8016ec2:	461a      	mov	r2, r3
 8016ec4:	685b      	ldr	r3, [r3, #4]
 8016ec6:	b10b      	cbz	r3, 8016ecc <_free_r+0x4c>
 8016ec8:	42a3      	cmp	r3, r4
 8016eca:	d9fa      	bls.n	8016ec2 <_free_r+0x42>
 8016ecc:	6811      	ldr	r1, [r2, #0]
 8016ece:	1850      	adds	r0, r2, r1
 8016ed0:	42a0      	cmp	r0, r4
 8016ed2:	d10b      	bne.n	8016eec <_free_r+0x6c>
 8016ed4:	6820      	ldr	r0, [r4, #0]
 8016ed6:	4401      	add	r1, r0
 8016ed8:	1850      	adds	r0, r2, r1
 8016eda:	4283      	cmp	r3, r0
 8016edc:	6011      	str	r1, [r2, #0]
 8016ede:	d1e0      	bne.n	8016ea2 <_free_r+0x22>
 8016ee0:	6818      	ldr	r0, [r3, #0]
 8016ee2:	685b      	ldr	r3, [r3, #4]
 8016ee4:	6053      	str	r3, [r2, #4]
 8016ee6:	4408      	add	r0, r1
 8016ee8:	6010      	str	r0, [r2, #0]
 8016eea:	e7da      	b.n	8016ea2 <_free_r+0x22>
 8016eec:	d902      	bls.n	8016ef4 <_free_r+0x74>
 8016eee:	230c      	movs	r3, #12
 8016ef0:	602b      	str	r3, [r5, #0]
 8016ef2:	e7d6      	b.n	8016ea2 <_free_r+0x22>
 8016ef4:	6820      	ldr	r0, [r4, #0]
 8016ef6:	1821      	adds	r1, r4, r0
 8016ef8:	428b      	cmp	r3, r1
 8016efa:	bf04      	itt	eq
 8016efc:	6819      	ldreq	r1, [r3, #0]
 8016efe:	685b      	ldreq	r3, [r3, #4]
 8016f00:	6063      	str	r3, [r4, #4]
 8016f02:	bf04      	itt	eq
 8016f04:	1809      	addeq	r1, r1, r0
 8016f06:	6021      	streq	r1, [r4, #0]
 8016f08:	6054      	str	r4, [r2, #4]
 8016f0a:	e7ca      	b.n	8016ea2 <_free_r+0x22>
 8016f0c:	bd38      	pop	{r3, r4, r5, pc}
 8016f0e:	bf00      	nop
 8016f10:	20009974 	.word	0x20009974

08016f14 <__ssputs_r>:
 8016f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f18:	688e      	ldr	r6, [r1, #8]
 8016f1a:	461f      	mov	r7, r3
 8016f1c:	42be      	cmp	r6, r7
 8016f1e:	680b      	ldr	r3, [r1, #0]
 8016f20:	4682      	mov	sl, r0
 8016f22:	460c      	mov	r4, r1
 8016f24:	4690      	mov	r8, r2
 8016f26:	d82d      	bhi.n	8016f84 <__ssputs_r+0x70>
 8016f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016f2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016f30:	d026      	beq.n	8016f80 <__ssputs_r+0x6c>
 8016f32:	6965      	ldr	r5, [r4, #20]
 8016f34:	6909      	ldr	r1, [r1, #16]
 8016f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f3a:	eba3 0901 	sub.w	r9, r3, r1
 8016f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f42:	1c7b      	adds	r3, r7, #1
 8016f44:	444b      	add	r3, r9
 8016f46:	106d      	asrs	r5, r5, #1
 8016f48:	429d      	cmp	r5, r3
 8016f4a:	bf38      	it	cc
 8016f4c:	461d      	movcc	r5, r3
 8016f4e:	0553      	lsls	r3, r2, #21
 8016f50:	d527      	bpl.n	8016fa2 <__ssputs_r+0x8e>
 8016f52:	4629      	mov	r1, r5
 8016f54:	f7ff fdf8 	bl	8016b48 <_malloc_r>
 8016f58:	4606      	mov	r6, r0
 8016f5a:	b360      	cbz	r0, 8016fb6 <__ssputs_r+0xa2>
 8016f5c:	6921      	ldr	r1, [r4, #16]
 8016f5e:	464a      	mov	r2, r9
 8016f60:	f7ff ff80 	bl	8016e64 <memcpy>
 8016f64:	89a3      	ldrh	r3, [r4, #12]
 8016f66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f6e:	81a3      	strh	r3, [r4, #12]
 8016f70:	6126      	str	r6, [r4, #16]
 8016f72:	6165      	str	r5, [r4, #20]
 8016f74:	444e      	add	r6, r9
 8016f76:	eba5 0509 	sub.w	r5, r5, r9
 8016f7a:	6026      	str	r6, [r4, #0]
 8016f7c:	60a5      	str	r5, [r4, #8]
 8016f7e:	463e      	mov	r6, r7
 8016f80:	42be      	cmp	r6, r7
 8016f82:	d900      	bls.n	8016f86 <__ssputs_r+0x72>
 8016f84:	463e      	mov	r6, r7
 8016f86:	6820      	ldr	r0, [r4, #0]
 8016f88:	4632      	mov	r2, r6
 8016f8a:	4641      	mov	r1, r8
 8016f8c:	f000 faa6 	bl	80174dc <memmove>
 8016f90:	68a3      	ldr	r3, [r4, #8]
 8016f92:	1b9b      	subs	r3, r3, r6
 8016f94:	60a3      	str	r3, [r4, #8]
 8016f96:	6823      	ldr	r3, [r4, #0]
 8016f98:	4433      	add	r3, r6
 8016f9a:	6023      	str	r3, [r4, #0]
 8016f9c:	2000      	movs	r0, #0
 8016f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fa2:	462a      	mov	r2, r5
 8016fa4:	f000 fab4 	bl	8017510 <_realloc_r>
 8016fa8:	4606      	mov	r6, r0
 8016faa:	2800      	cmp	r0, #0
 8016fac:	d1e0      	bne.n	8016f70 <__ssputs_r+0x5c>
 8016fae:	6921      	ldr	r1, [r4, #16]
 8016fb0:	4650      	mov	r0, sl
 8016fb2:	f7ff ff65 	bl	8016e80 <_free_r>
 8016fb6:	230c      	movs	r3, #12
 8016fb8:	f8ca 3000 	str.w	r3, [sl]
 8016fbc:	89a3      	ldrh	r3, [r4, #12]
 8016fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016fc2:	81a3      	strh	r3, [r4, #12]
 8016fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8016fc8:	e7e9      	b.n	8016f9e <__ssputs_r+0x8a>
	...

08016fcc <_svfiprintf_r>:
 8016fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd0:	4698      	mov	r8, r3
 8016fd2:	898b      	ldrh	r3, [r1, #12]
 8016fd4:	061b      	lsls	r3, r3, #24
 8016fd6:	b09d      	sub	sp, #116	@ 0x74
 8016fd8:	4607      	mov	r7, r0
 8016fda:	460d      	mov	r5, r1
 8016fdc:	4614      	mov	r4, r2
 8016fde:	d510      	bpl.n	8017002 <_svfiprintf_r+0x36>
 8016fe0:	690b      	ldr	r3, [r1, #16]
 8016fe2:	b973      	cbnz	r3, 8017002 <_svfiprintf_r+0x36>
 8016fe4:	2140      	movs	r1, #64	@ 0x40
 8016fe6:	f7ff fdaf 	bl	8016b48 <_malloc_r>
 8016fea:	6028      	str	r0, [r5, #0]
 8016fec:	6128      	str	r0, [r5, #16]
 8016fee:	b930      	cbnz	r0, 8016ffe <_svfiprintf_r+0x32>
 8016ff0:	230c      	movs	r3, #12
 8016ff2:	603b      	str	r3, [r7, #0]
 8016ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ff8:	b01d      	add	sp, #116	@ 0x74
 8016ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ffe:	2340      	movs	r3, #64	@ 0x40
 8017000:	616b      	str	r3, [r5, #20]
 8017002:	2300      	movs	r3, #0
 8017004:	9309      	str	r3, [sp, #36]	@ 0x24
 8017006:	2320      	movs	r3, #32
 8017008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801700c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017010:	2330      	movs	r3, #48	@ 0x30
 8017012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80171b0 <_svfiprintf_r+0x1e4>
 8017016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801701a:	f04f 0901 	mov.w	r9, #1
 801701e:	4623      	mov	r3, r4
 8017020:	469a      	mov	sl, r3
 8017022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017026:	b10a      	cbz	r2, 801702c <_svfiprintf_r+0x60>
 8017028:	2a25      	cmp	r2, #37	@ 0x25
 801702a:	d1f9      	bne.n	8017020 <_svfiprintf_r+0x54>
 801702c:	ebba 0b04 	subs.w	fp, sl, r4
 8017030:	d00b      	beq.n	801704a <_svfiprintf_r+0x7e>
 8017032:	465b      	mov	r3, fp
 8017034:	4622      	mov	r2, r4
 8017036:	4629      	mov	r1, r5
 8017038:	4638      	mov	r0, r7
 801703a:	f7ff ff6b 	bl	8016f14 <__ssputs_r>
 801703e:	3001      	adds	r0, #1
 8017040:	f000 80a7 	beq.w	8017192 <_svfiprintf_r+0x1c6>
 8017044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017046:	445a      	add	r2, fp
 8017048:	9209      	str	r2, [sp, #36]	@ 0x24
 801704a:	f89a 3000 	ldrb.w	r3, [sl]
 801704e:	2b00      	cmp	r3, #0
 8017050:	f000 809f 	beq.w	8017192 <_svfiprintf_r+0x1c6>
 8017054:	2300      	movs	r3, #0
 8017056:	f04f 32ff 	mov.w	r2, #4294967295
 801705a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801705e:	f10a 0a01 	add.w	sl, sl, #1
 8017062:	9304      	str	r3, [sp, #16]
 8017064:	9307      	str	r3, [sp, #28]
 8017066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801706a:	931a      	str	r3, [sp, #104]	@ 0x68
 801706c:	4654      	mov	r4, sl
 801706e:	2205      	movs	r2, #5
 8017070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017074:	484e      	ldr	r0, [pc, #312]	@ (80171b0 <_svfiprintf_r+0x1e4>)
 8017076:	f7e9 f8e3 	bl	8000240 <memchr>
 801707a:	9a04      	ldr	r2, [sp, #16]
 801707c:	b9d8      	cbnz	r0, 80170b6 <_svfiprintf_r+0xea>
 801707e:	06d0      	lsls	r0, r2, #27
 8017080:	bf44      	itt	mi
 8017082:	2320      	movmi	r3, #32
 8017084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017088:	0711      	lsls	r1, r2, #28
 801708a:	bf44      	itt	mi
 801708c:	232b      	movmi	r3, #43	@ 0x2b
 801708e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017092:	f89a 3000 	ldrb.w	r3, [sl]
 8017096:	2b2a      	cmp	r3, #42	@ 0x2a
 8017098:	d015      	beq.n	80170c6 <_svfiprintf_r+0xfa>
 801709a:	9a07      	ldr	r2, [sp, #28]
 801709c:	4654      	mov	r4, sl
 801709e:	2000      	movs	r0, #0
 80170a0:	f04f 0c0a 	mov.w	ip, #10
 80170a4:	4621      	mov	r1, r4
 80170a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170aa:	3b30      	subs	r3, #48	@ 0x30
 80170ac:	2b09      	cmp	r3, #9
 80170ae:	d94b      	bls.n	8017148 <_svfiprintf_r+0x17c>
 80170b0:	b1b0      	cbz	r0, 80170e0 <_svfiprintf_r+0x114>
 80170b2:	9207      	str	r2, [sp, #28]
 80170b4:	e014      	b.n	80170e0 <_svfiprintf_r+0x114>
 80170b6:	eba0 0308 	sub.w	r3, r0, r8
 80170ba:	fa09 f303 	lsl.w	r3, r9, r3
 80170be:	4313      	orrs	r3, r2
 80170c0:	9304      	str	r3, [sp, #16]
 80170c2:	46a2      	mov	sl, r4
 80170c4:	e7d2      	b.n	801706c <_svfiprintf_r+0xa0>
 80170c6:	9b03      	ldr	r3, [sp, #12]
 80170c8:	1d19      	adds	r1, r3, #4
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	9103      	str	r1, [sp, #12]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	bfbb      	ittet	lt
 80170d2:	425b      	neglt	r3, r3
 80170d4:	f042 0202 	orrlt.w	r2, r2, #2
 80170d8:	9307      	strge	r3, [sp, #28]
 80170da:	9307      	strlt	r3, [sp, #28]
 80170dc:	bfb8      	it	lt
 80170de:	9204      	strlt	r2, [sp, #16]
 80170e0:	7823      	ldrb	r3, [r4, #0]
 80170e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80170e4:	d10a      	bne.n	80170fc <_svfiprintf_r+0x130>
 80170e6:	7863      	ldrb	r3, [r4, #1]
 80170e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80170ea:	d132      	bne.n	8017152 <_svfiprintf_r+0x186>
 80170ec:	9b03      	ldr	r3, [sp, #12]
 80170ee:	1d1a      	adds	r2, r3, #4
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	9203      	str	r2, [sp, #12]
 80170f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80170f8:	3402      	adds	r4, #2
 80170fa:	9305      	str	r3, [sp, #20]
 80170fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80171c0 <_svfiprintf_r+0x1f4>
 8017100:	7821      	ldrb	r1, [r4, #0]
 8017102:	2203      	movs	r2, #3
 8017104:	4650      	mov	r0, sl
 8017106:	f7e9 f89b 	bl	8000240 <memchr>
 801710a:	b138      	cbz	r0, 801711c <_svfiprintf_r+0x150>
 801710c:	9b04      	ldr	r3, [sp, #16]
 801710e:	eba0 000a 	sub.w	r0, r0, sl
 8017112:	2240      	movs	r2, #64	@ 0x40
 8017114:	4082      	lsls	r2, r0
 8017116:	4313      	orrs	r3, r2
 8017118:	3401      	adds	r4, #1
 801711a:	9304      	str	r3, [sp, #16]
 801711c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017120:	4824      	ldr	r0, [pc, #144]	@ (80171b4 <_svfiprintf_r+0x1e8>)
 8017122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017126:	2206      	movs	r2, #6
 8017128:	f7e9 f88a 	bl	8000240 <memchr>
 801712c:	2800      	cmp	r0, #0
 801712e:	d036      	beq.n	801719e <_svfiprintf_r+0x1d2>
 8017130:	4b21      	ldr	r3, [pc, #132]	@ (80171b8 <_svfiprintf_r+0x1ec>)
 8017132:	bb1b      	cbnz	r3, 801717c <_svfiprintf_r+0x1b0>
 8017134:	9b03      	ldr	r3, [sp, #12]
 8017136:	3307      	adds	r3, #7
 8017138:	f023 0307 	bic.w	r3, r3, #7
 801713c:	3308      	adds	r3, #8
 801713e:	9303      	str	r3, [sp, #12]
 8017140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017142:	4433      	add	r3, r6
 8017144:	9309      	str	r3, [sp, #36]	@ 0x24
 8017146:	e76a      	b.n	801701e <_svfiprintf_r+0x52>
 8017148:	fb0c 3202 	mla	r2, ip, r2, r3
 801714c:	460c      	mov	r4, r1
 801714e:	2001      	movs	r0, #1
 8017150:	e7a8      	b.n	80170a4 <_svfiprintf_r+0xd8>
 8017152:	2300      	movs	r3, #0
 8017154:	3401      	adds	r4, #1
 8017156:	9305      	str	r3, [sp, #20]
 8017158:	4619      	mov	r1, r3
 801715a:	f04f 0c0a 	mov.w	ip, #10
 801715e:	4620      	mov	r0, r4
 8017160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017164:	3a30      	subs	r2, #48	@ 0x30
 8017166:	2a09      	cmp	r2, #9
 8017168:	d903      	bls.n	8017172 <_svfiprintf_r+0x1a6>
 801716a:	2b00      	cmp	r3, #0
 801716c:	d0c6      	beq.n	80170fc <_svfiprintf_r+0x130>
 801716e:	9105      	str	r1, [sp, #20]
 8017170:	e7c4      	b.n	80170fc <_svfiprintf_r+0x130>
 8017172:	fb0c 2101 	mla	r1, ip, r1, r2
 8017176:	4604      	mov	r4, r0
 8017178:	2301      	movs	r3, #1
 801717a:	e7f0      	b.n	801715e <_svfiprintf_r+0x192>
 801717c:	ab03      	add	r3, sp, #12
 801717e:	9300      	str	r3, [sp, #0]
 8017180:	462a      	mov	r2, r5
 8017182:	4b0e      	ldr	r3, [pc, #56]	@ (80171bc <_svfiprintf_r+0x1f0>)
 8017184:	a904      	add	r1, sp, #16
 8017186:	4638      	mov	r0, r7
 8017188:	f3af 8000 	nop.w
 801718c:	1c42      	adds	r2, r0, #1
 801718e:	4606      	mov	r6, r0
 8017190:	d1d6      	bne.n	8017140 <_svfiprintf_r+0x174>
 8017192:	89ab      	ldrh	r3, [r5, #12]
 8017194:	065b      	lsls	r3, r3, #25
 8017196:	f53f af2d 	bmi.w	8016ff4 <_svfiprintf_r+0x28>
 801719a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801719c:	e72c      	b.n	8016ff8 <_svfiprintf_r+0x2c>
 801719e:	ab03      	add	r3, sp, #12
 80171a0:	9300      	str	r3, [sp, #0]
 80171a2:	462a      	mov	r2, r5
 80171a4:	4b05      	ldr	r3, [pc, #20]	@ (80171bc <_svfiprintf_r+0x1f0>)
 80171a6:	a904      	add	r1, sp, #16
 80171a8:	4638      	mov	r0, r7
 80171aa:	f000 f879 	bl	80172a0 <_printf_i>
 80171ae:	e7ed      	b.n	801718c <_svfiprintf_r+0x1c0>
 80171b0:	080190c8 	.word	0x080190c8
 80171b4:	080190d2 	.word	0x080190d2
 80171b8:	00000000 	.word	0x00000000
 80171bc:	08016f15 	.word	0x08016f15
 80171c0:	080190ce 	.word	0x080190ce

080171c4 <_printf_common>:
 80171c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171c8:	4616      	mov	r6, r2
 80171ca:	4698      	mov	r8, r3
 80171cc:	688a      	ldr	r2, [r1, #8]
 80171ce:	690b      	ldr	r3, [r1, #16]
 80171d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80171d4:	4293      	cmp	r3, r2
 80171d6:	bfb8      	it	lt
 80171d8:	4613      	movlt	r3, r2
 80171da:	6033      	str	r3, [r6, #0]
 80171dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80171e0:	4607      	mov	r7, r0
 80171e2:	460c      	mov	r4, r1
 80171e4:	b10a      	cbz	r2, 80171ea <_printf_common+0x26>
 80171e6:	3301      	adds	r3, #1
 80171e8:	6033      	str	r3, [r6, #0]
 80171ea:	6823      	ldr	r3, [r4, #0]
 80171ec:	0699      	lsls	r1, r3, #26
 80171ee:	bf42      	ittt	mi
 80171f0:	6833      	ldrmi	r3, [r6, #0]
 80171f2:	3302      	addmi	r3, #2
 80171f4:	6033      	strmi	r3, [r6, #0]
 80171f6:	6825      	ldr	r5, [r4, #0]
 80171f8:	f015 0506 	ands.w	r5, r5, #6
 80171fc:	d106      	bne.n	801720c <_printf_common+0x48>
 80171fe:	f104 0a19 	add.w	sl, r4, #25
 8017202:	68e3      	ldr	r3, [r4, #12]
 8017204:	6832      	ldr	r2, [r6, #0]
 8017206:	1a9b      	subs	r3, r3, r2
 8017208:	42ab      	cmp	r3, r5
 801720a:	dc26      	bgt.n	801725a <_printf_common+0x96>
 801720c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017210:	6822      	ldr	r2, [r4, #0]
 8017212:	3b00      	subs	r3, #0
 8017214:	bf18      	it	ne
 8017216:	2301      	movne	r3, #1
 8017218:	0692      	lsls	r2, r2, #26
 801721a:	d42b      	bmi.n	8017274 <_printf_common+0xb0>
 801721c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017220:	4641      	mov	r1, r8
 8017222:	4638      	mov	r0, r7
 8017224:	47c8      	blx	r9
 8017226:	3001      	adds	r0, #1
 8017228:	d01e      	beq.n	8017268 <_printf_common+0xa4>
 801722a:	6823      	ldr	r3, [r4, #0]
 801722c:	6922      	ldr	r2, [r4, #16]
 801722e:	f003 0306 	and.w	r3, r3, #6
 8017232:	2b04      	cmp	r3, #4
 8017234:	bf02      	ittt	eq
 8017236:	68e5      	ldreq	r5, [r4, #12]
 8017238:	6833      	ldreq	r3, [r6, #0]
 801723a:	1aed      	subeq	r5, r5, r3
 801723c:	68a3      	ldr	r3, [r4, #8]
 801723e:	bf0c      	ite	eq
 8017240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017244:	2500      	movne	r5, #0
 8017246:	4293      	cmp	r3, r2
 8017248:	bfc4      	itt	gt
 801724a:	1a9b      	subgt	r3, r3, r2
 801724c:	18ed      	addgt	r5, r5, r3
 801724e:	2600      	movs	r6, #0
 8017250:	341a      	adds	r4, #26
 8017252:	42b5      	cmp	r5, r6
 8017254:	d11a      	bne.n	801728c <_printf_common+0xc8>
 8017256:	2000      	movs	r0, #0
 8017258:	e008      	b.n	801726c <_printf_common+0xa8>
 801725a:	2301      	movs	r3, #1
 801725c:	4652      	mov	r2, sl
 801725e:	4641      	mov	r1, r8
 8017260:	4638      	mov	r0, r7
 8017262:	47c8      	blx	r9
 8017264:	3001      	adds	r0, #1
 8017266:	d103      	bne.n	8017270 <_printf_common+0xac>
 8017268:	f04f 30ff 	mov.w	r0, #4294967295
 801726c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017270:	3501      	adds	r5, #1
 8017272:	e7c6      	b.n	8017202 <_printf_common+0x3e>
 8017274:	18e1      	adds	r1, r4, r3
 8017276:	1c5a      	adds	r2, r3, #1
 8017278:	2030      	movs	r0, #48	@ 0x30
 801727a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801727e:	4422      	add	r2, r4
 8017280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017288:	3302      	adds	r3, #2
 801728a:	e7c7      	b.n	801721c <_printf_common+0x58>
 801728c:	2301      	movs	r3, #1
 801728e:	4622      	mov	r2, r4
 8017290:	4641      	mov	r1, r8
 8017292:	4638      	mov	r0, r7
 8017294:	47c8      	blx	r9
 8017296:	3001      	adds	r0, #1
 8017298:	d0e6      	beq.n	8017268 <_printf_common+0xa4>
 801729a:	3601      	adds	r6, #1
 801729c:	e7d9      	b.n	8017252 <_printf_common+0x8e>
	...

080172a0 <_printf_i>:
 80172a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80172a4:	7e0f      	ldrb	r7, [r1, #24]
 80172a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80172a8:	2f78      	cmp	r7, #120	@ 0x78
 80172aa:	4691      	mov	r9, r2
 80172ac:	4680      	mov	r8, r0
 80172ae:	460c      	mov	r4, r1
 80172b0:	469a      	mov	sl, r3
 80172b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80172b6:	d807      	bhi.n	80172c8 <_printf_i+0x28>
 80172b8:	2f62      	cmp	r7, #98	@ 0x62
 80172ba:	d80a      	bhi.n	80172d2 <_printf_i+0x32>
 80172bc:	2f00      	cmp	r7, #0
 80172be:	f000 80d1 	beq.w	8017464 <_printf_i+0x1c4>
 80172c2:	2f58      	cmp	r7, #88	@ 0x58
 80172c4:	f000 80b8 	beq.w	8017438 <_printf_i+0x198>
 80172c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80172cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80172d0:	e03a      	b.n	8017348 <_printf_i+0xa8>
 80172d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80172d6:	2b15      	cmp	r3, #21
 80172d8:	d8f6      	bhi.n	80172c8 <_printf_i+0x28>
 80172da:	a101      	add	r1, pc, #4	@ (adr r1, 80172e0 <_printf_i+0x40>)
 80172dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80172e0:	08017339 	.word	0x08017339
 80172e4:	0801734d 	.word	0x0801734d
 80172e8:	080172c9 	.word	0x080172c9
 80172ec:	080172c9 	.word	0x080172c9
 80172f0:	080172c9 	.word	0x080172c9
 80172f4:	080172c9 	.word	0x080172c9
 80172f8:	0801734d 	.word	0x0801734d
 80172fc:	080172c9 	.word	0x080172c9
 8017300:	080172c9 	.word	0x080172c9
 8017304:	080172c9 	.word	0x080172c9
 8017308:	080172c9 	.word	0x080172c9
 801730c:	0801744b 	.word	0x0801744b
 8017310:	08017377 	.word	0x08017377
 8017314:	08017405 	.word	0x08017405
 8017318:	080172c9 	.word	0x080172c9
 801731c:	080172c9 	.word	0x080172c9
 8017320:	0801746d 	.word	0x0801746d
 8017324:	080172c9 	.word	0x080172c9
 8017328:	08017377 	.word	0x08017377
 801732c:	080172c9 	.word	0x080172c9
 8017330:	080172c9 	.word	0x080172c9
 8017334:	0801740d 	.word	0x0801740d
 8017338:	6833      	ldr	r3, [r6, #0]
 801733a:	1d1a      	adds	r2, r3, #4
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	6032      	str	r2, [r6, #0]
 8017340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017348:	2301      	movs	r3, #1
 801734a:	e09c      	b.n	8017486 <_printf_i+0x1e6>
 801734c:	6833      	ldr	r3, [r6, #0]
 801734e:	6820      	ldr	r0, [r4, #0]
 8017350:	1d19      	adds	r1, r3, #4
 8017352:	6031      	str	r1, [r6, #0]
 8017354:	0606      	lsls	r6, r0, #24
 8017356:	d501      	bpl.n	801735c <_printf_i+0xbc>
 8017358:	681d      	ldr	r5, [r3, #0]
 801735a:	e003      	b.n	8017364 <_printf_i+0xc4>
 801735c:	0645      	lsls	r5, r0, #25
 801735e:	d5fb      	bpl.n	8017358 <_printf_i+0xb8>
 8017360:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017364:	2d00      	cmp	r5, #0
 8017366:	da03      	bge.n	8017370 <_printf_i+0xd0>
 8017368:	232d      	movs	r3, #45	@ 0x2d
 801736a:	426d      	negs	r5, r5
 801736c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017370:	4858      	ldr	r0, [pc, #352]	@ (80174d4 <_printf_i+0x234>)
 8017372:	230a      	movs	r3, #10
 8017374:	e011      	b.n	801739a <_printf_i+0xfa>
 8017376:	6821      	ldr	r1, [r4, #0]
 8017378:	6833      	ldr	r3, [r6, #0]
 801737a:	0608      	lsls	r0, r1, #24
 801737c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017380:	d402      	bmi.n	8017388 <_printf_i+0xe8>
 8017382:	0649      	lsls	r1, r1, #25
 8017384:	bf48      	it	mi
 8017386:	b2ad      	uxthmi	r5, r5
 8017388:	2f6f      	cmp	r7, #111	@ 0x6f
 801738a:	4852      	ldr	r0, [pc, #328]	@ (80174d4 <_printf_i+0x234>)
 801738c:	6033      	str	r3, [r6, #0]
 801738e:	bf14      	ite	ne
 8017390:	230a      	movne	r3, #10
 8017392:	2308      	moveq	r3, #8
 8017394:	2100      	movs	r1, #0
 8017396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801739a:	6866      	ldr	r6, [r4, #4]
 801739c:	60a6      	str	r6, [r4, #8]
 801739e:	2e00      	cmp	r6, #0
 80173a0:	db05      	blt.n	80173ae <_printf_i+0x10e>
 80173a2:	6821      	ldr	r1, [r4, #0]
 80173a4:	432e      	orrs	r6, r5
 80173a6:	f021 0104 	bic.w	r1, r1, #4
 80173aa:	6021      	str	r1, [r4, #0]
 80173ac:	d04b      	beq.n	8017446 <_printf_i+0x1a6>
 80173ae:	4616      	mov	r6, r2
 80173b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80173b4:	fb03 5711 	mls	r7, r3, r1, r5
 80173b8:	5dc7      	ldrb	r7, [r0, r7]
 80173ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80173be:	462f      	mov	r7, r5
 80173c0:	42bb      	cmp	r3, r7
 80173c2:	460d      	mov	r5, r1
 80173c4:	d9f4      	bls.n	80173b0 <_printf_i+0x110>
 80173c6:	2b08      	cmp	r3, #8
 80173c8:	d10b      	bne.n	80173e2 <_printf_i+0x142>
 80173ca:	6823      	ldr	r3, [r4, #0]
 80173cc:	07df      	lsls	r7, r3, #31
 80173ce:	d508      	bpl.n	80173e2 <_printf_i+0x142>
 80173d0:	6923      	ldr	r3, [r4, #16]
 80173d2:	6861      	ldr	r1, [r4, #4]
 80173d4:	4299      	cmp	r1, r3
 80173d6:	bfde      	ittt	le
 80173d8:	2330      	movle	r3, #48	@ 0x30
 80173da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80173de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80173e2:	1b92      	subs	r2, r2, r6
 80173e4:	6122      	str	r2, [r4, #16]
 80173e6:	f8cd a000 	str.w	sl, [sp]
 80173ea:	464b      	mov	r3, r9
 80173ec:	aa03      	add	r2, sp, #12
 80173ee:	4621      	mov	r1, r4
 80173f0:	4640      	mov	r0, r8
 80173f2:	f7ff fee7 	bl	80171c4 <_printf_common>
 80173f6:	3001      	adds	r0, #1
 80173f8:	d14a      	bne.n	8017490 <_printf_i+0x1f0>
 80173fa:	f04f 30ff 	mov.w	r0, #4294967295
 80173fe:	b004      	add	sp, #16
 8017400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017404:	6823      	ldr	r3, [r4, #0]
 8017406:	f043 0320 	orr.w	r3, r3, #32
 801740a:	6023      	str	r3, [r4, #0]
 801740c:	4832      	ldr	r0, [pc, #200]	@ (80174d8 <_printf_i+0x238>)
 801740e:	2778      	movs	r7, #120	@ 0x78
 8017410:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017414:	6823      	ldr	r3, [r4, #0]
 8017416:	6831      	ldr	r1, [r6, #0]
 8017418:	061f      	lsls	r7, r3, #24
 801741a:	f851 5b04 	ldr.w	r5, [r1], #4
 801741e:	d402      	bmi.n	8017426 <_printf_i+0x186>
 8017420:	065f      	lsls	r7, r3, #25
 8017422:	bf48      	it	mi
 8017424:	b2ad      	uxthmi	r5, r5
 8017426:	6031      	str	r1, [r6, #0]
 8017428:	07d9      	lsls	r1, r3, #31
 801742a:	bf44      	itt	mi
 801742c:	f043 0320 	orrmi.w	r3, r3, #32
 8017430:	6023      	strmi	r3, [r4, #0]
 8017432:	b11d      	cbz	r5, 801743c <_printf_i+0x19c>
 8017434:	2310      	movs	r3, #16
 8017436:	e7ad      	b.n	8017394 <_printf_i+0xf4>
 8017438:	4826      	ldr	r0, [pc, #152]	@ (80174d4 <_printf_i+0x234>)
 801743a:	e7e9      	b.n	8017410 <_printf_i+0x170>
 801743c:	6823      	ldr	r3, [r4, #0]
 801743e:	f023 0320 	bic.w	r3, r3, #32
 8017442:	6023      	str	r3, [r4, #0]
 8017444:	e7f6      	b.n	8017434 <_printf_i+0x194>
 8017446:	4616      	mov	r6, r2
 8017448:	e7bd      	b.n	80173c6 <_printf_i+0x126>
 801744a:	6833      	ldr	r3, [r6, #0]
 801744c:	6825      	ldr	r5, [r4, #0]
 801744e:	6961      	ldr	r1, [r4, #20]
 8017450:	1d18      	adds	r0, r3, #4
 8017452:	6030      	str	r0, [r6, #0]
 8017454:	062e      	lsls	r6, r5, #24
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	d501      	bpl.n	801745e <_printf_i+0x1be>
 801745a:	6019      	str	r1, [r3, #0]
 801745c:	e002      	b.n	8017464 <_printf_i+0x1c4>
 801745e:	0668      	lsls	r0, r5, #25
 8017460:	d5fb      	bpl.n	801745a <_printf_i+0x1ba>
 8017462:	8019      	strh	r1, [r3, #0]
 8017464:	2300      	movs	r3, #0
 8017466:	6123      	str	r3, [r4, #16]
 8017468:	4616      	mov	r6, r2
 801746a:	e7bc      	b.n	80173e6 <_printf_i+0x146>
 801746c:	6833      	ldr	r3, [r6, #0]
 801746e:	1d1a      	adds	r2, r3, #4
 8017470:	6032      	str	r2, [r6, #0]
 8017472:	681e      	ldr	r6, [r3, #0]
 8017474:	6862      	ldr	r2, [r4, #4]
 8017476:	2100      	movs	r1, #0
 8017478:	4630      	mov	r0, r6
 801747a:	f7e8 fee1 	bl	8000240 <memchr>
 801747e:	b108      	cbz	r0, 8017484 <_printf_i+0x1e4>
 8017480:	1b80      	subs	r0, r0, r6
 8017482:	6060      	str	r0, [r4, #4]
 8017484:	6863      	ldr	r3, [r4, #4]
 8017486:	6123      	str	r3, [r4, #16]
 8017488:	2300      	movs	r3, #0
 801748a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801748e:	e7aa      	b.n	80173e6 <_printf_i+0x146>
 8017490:	6923      	ldr	r3, [r4, #16]
 8017492:	4632      	mov	r2, r6
 8017494:	4649      	mov	r1, r9
 8017496:	4640      	mov	r0, r8
 8017498:	47d0      	blx	sl
 801749a:	3001      	adds	r0, #1
 801749c:	d0ad      	beq.n	80173fa <_printf_i+0x15a>
 801749e:	6823      	ldr	r3, [r4, #0]
 80174a0:	079b      	lsls	r3, r3, #30
 80174a2:	d413      	bmi.n	80174cc <_printf_i+0x22c>
 80174a4:	68e0      	ldr	r0, [r4, #12]
 80174a6:	9b03      	ldr	r3, [sp, #12]
 80174a8:	4298      	cmp	r0, r3
 80174aa:	bfb8      	it	lt
 80174ac:	4618      	movlt	r0, r3
 80174ae:	e7a6      	b.n	80173fe <_printf_i+0x15e>
 80174b0:	2301      	movs	r3, #1
 80174b2:	4632      	mov	r2, r6
 80174b4:	4649      	mov	r1, r9
 80174b6:	4640      	mov	r0, r8
 80174b8:	47d0      	blx	sl
 80174ba:	3001      	adds	r0, #1
 80174bc:	d09d      	beq.n	80173fa <_printf_i+0x15a>
 80174be:	3501      	adds	r5, #1
 80174c0:	68e3      	ldr	r3, [r4, #12]
 80174c2:	9903      	ldr	r1, [sp, #12]
 80174c4:	1a5b      	subs	r3, r3, r1
 80174c6:	42ab      	cmp	r3, r5
 80174c8:	dcf2      	bgt.n	80174b0 <_printf_i+0x210>
 80174ca:	e7eb      	b.n	80174a4 <_printf_i+0x204>
 80174cc:	2500      	movs	r5, #0
 80174ce:	f104 0619 	add.w	r6, r4, #25
 80174d2:	e7f5      	b.n	80174c0 <_printf_i+0x220>
 80174d4:	080190d9 	.word	0x080190d9
 80174d8:	080190ea 	.word	0x080190ea

080174dc <memmove>:
 80174dc:	4288      	cmp	r0, r1
 80174de:	b510      	push	{r4, lr}
 80174e0:	eb01 0402 	add.w	r4, r1, r2
 80174e4:	d902      	bls.n	80174ec <memmove+0x10>
 80174e6:	4284      	cmp	r4, r0
 80174e8:	4623      	mov	r3, r4
 80174ea:	d807      	bhi.n	80174fc <memmove+0x20>
 80174ec:	1e43      	subs	r3, r0, #1
 80174ee:	42a1      	cmp	r1, r4
 80174f0:	d008      	beq.n	8017504 <memmove+0x28>
 80174f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80174f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80174fa:	e7f8      	b.n	80174ee <memmove+0x12>
 80174fc:	4402      	add	r2, r0
 80174fe:	4601      	mov	r1, r0
 8017500:	428a      	cmp	r2, r1
 8017502:	d100      	bne.n	8017506 <memmove+0x2a>
 8017504:	bd10      	pop	{r4, pc}
 8017506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801750a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801750e:	e7f7      	b.n	8017500 <memmove+0x24>

08017510 <_realloc_r>:
 8017510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017514:	4607      	mov	r7, r0
 8017516:	4614      	mov	r4, r2
 8017518:	460d      	mov	r5, r1
 801751a:	b921      	cbnz	r1, 8017526 <_realloc_r+0x16>
 801751c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017520:	4611      	mov	r1, r2
 8017522:	f7ff bb11 	b.w	8016b48 <_malloc_r>
 8017526:	b92a      	cbnz	r2, 8017534 <_realloc_r+0x24>
 8017528:	f7ff fcaa 	bl	8016e80 <_free_r>
 801752c:	4625      	mov	r5, r4
 801752e:	4628      	mov	r0, r5
 8017530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017534:	f000 f81a 	bl	801756c <_malloc_usable_size_r>
 8017538:	4284      	cmp	r4, r0
 801753a:	4606      	mov	r6, r0
 801753c:	d802      	bhi.n	8017544 <_realloc_r+0x34>
 801753e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017542:	d8f4      	bhi.n	801752e <_realloc_r+0x1e>
 8017544:	4621      	mov	r1, r4
 8017546:	4638      	mov	r0, r7
 8017548:	f7ff fafe 	bl	8016b48 <_malloc_r>
 801754c:	4680      	mov	r8, r0
 801754e:	b908      	cbnz	r0, 8017554 <_realloc_r+0x44>
 8017550:	4645      	mov	r5, r8
 8017552:	e7ec      	b.n	801752e <_realloc_r+0x1e>
 8017554:	42b4      	cmp	r4, r6
 8017556:	4622      	mov	r2, r4
 8017558:	4629      	mov	r1, r5
 801755a:	bf28      	it	cs
 801755c:	4632      	movcs	r2, r6
 801755e:	f7ff fc81 	bl	8016e64 <memcpy>
 8017562:	4629      	mov	r1, r5
 8017564:	4638      	mov	r0, r7
 8017566:	f7ff fc8b 	bl	8016e80 <_free_r>
 801756a:	e7f1      	b.n	8017550 <_realloc_r+0x40>

0801756c <_malloc_usable_size_r>:
 801756c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017570:	1f18      	subs	r0, r3, #4
 8017572:	2b00      	cmp	r3, #0
 8017574:	bfbc      	itt	lt
 8017576:	580b      	ldrlt	r3, [r1, r0]
 8017578:	18c0      	addlt	r0, r0, r3
 801757a:	4770      	bx	lr

0801757c <_init>:
 801757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801757e:	bf00      	nop
 8017580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017582:	bc08      	pop	{r3}
 8017584:	469e      	mov	lr, r3
 8017586:	4770      	bx	lr

08017588 <_fini>:
 8017588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801758a:	bf00      	nop
 801758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801758e:	bc08      	pop	{r3}
 8017590:	469e      	mov	lr, r3
 8017592:	4770      	bx	lr
