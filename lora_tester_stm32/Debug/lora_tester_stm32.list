
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a574  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f5c  0801a744  0801a744  0001b744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c6a0  0801c6a0  0001e21c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c6a0  0801c6a0  0001d6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c6a8  0801c6a8  0001e21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6a8  0801c6a8  0001d6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c6ac  0801c6ac  0001d6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  0801c6b0  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000dc  0801c78c  0001e0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000017c  0801c82c  0001e17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a090  2000021c  0801c8cc  0001e21c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000a2ac  0801c8cc  0001e2ac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e21c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045b66  00000000  00000000  0001e24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009c84  00000000  00000000  00063db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003960  00000000  00000000  0006da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c8b  00000000  00000000  00071398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000394ea  00000000  00000000  00074023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000505f4  00000000  00000000  000ad50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d49b  00000000  00000000  000fdb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022af9c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f7fc  00000000  00000000  0022afe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0023a7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a72c 	.word	0x0801a72c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000220 	.word	0x20000220
 800020c:	0801a72c 	.word	0x0801a72c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f003 ffa6 	bl	800457c <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f019 fc7a 	bl	8019f38 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f019 fbce 	bl	8019e10 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f003 ff76 	bl	800457c <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 f847 	bl	8004724 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f003 ff68 	bl	800457c <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f003 ff60 	bl	800457c <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f003 ff5b 	bl	800457c <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0801a744 	.word	0x0801a744
 80006d4:	0801a760 	.word	0x0801a760
 80006d8:	0801a768 	.word	0x0801a768
 80006dc:	0801a780 	.word	0x0801a780
 80006e0:	0801a7b0 	.word	0x0801a7b0
 80006e4:	0801a7e8 	.word	0x0801a7e8

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0801a854 	.word	0x0801a854
 800076c:	0801a85c 	.word	0x0801a85c
 8000770:	0801a868 	.word	0x0801a868
 8000774:	0801a870 	.word	0x0801a870
 8000778:	0801a87c 	.word	0x0801a87c
 800077c:	0801a88c 	.word	0x0801a88c
 8000780:	0801a89c 	.word	0x0801a89c
 8000784:	0801a8b0 	.word	0x0801a8b0
 8000788:	0801a8c4 	.word	0x0801a8c4
 800078c:	0801a8d0 	.word	0x0801a8d0
 8000790:	0801a8d8 	.word	0x0801a8d8
 8000794:	0801a8e0 	.word	0x0801a8e0

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f003 feb8 	bl	800457c <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	0801a904 	.word	0x0801a904
 8000820:	000493e0 	.word	0x000493e0
 8000824:	0801a90c 	.word	0x0801a90c

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8283 	beq.w	8000d40 <LoraStarter_Process+0x518>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 825b 	bhi.w	8000d02 <LoraStarter_Process+0x4da>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c29 	.word	0x08000c29
 8000874:	08000c8f 	.word	0x08000c8f
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f003 fe5c 	bl	800457c <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e224      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f003 fe42 	bl	800457c <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e1fd      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1f9      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f1 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa91 	bl	8000e4c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f003 fe1e 	bl	800457c <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1d9      	b.n	8000d06 <LoraStarter_Process+0x4de>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f019 fb0a 	bl	8019f6e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f019 fb03 	bl	8019f6e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81cb 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f003 fdfe 	bl	800457c <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f003 fdeb 	bl	800457c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1ab      	b.n	8000d06 <LoraStarter_Process+0x4de>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f003 fddf 	bl	800457c <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e197      	b.n	8000d06 <LoraStarter_Process+0x4de>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2001      	movs	r0, #1
 80009da:	f003 fdcf 	bl	800457c <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e191      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 818b 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa91 	bl	8000f1c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 8184 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2001      	movs	r0, #1
 8000a06:	f003 fdb9 	bl	800457c <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2001      	movs	r0, #1
 8000a34:	f003 fda2 	bl	800457c <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e167      	b.n	8000d0a <LoraStarter_Process+0x4e2>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f019 f9fc 	bl	8019e7c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f019 f9a7 	bl	8019e10 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f003 fd57 	bl	800457c <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f003 fd43 	bl	800457c <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e10b      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8107 	beq.w	8000d0e <LoraStarter_Process+0x4e6>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa8f 	bl	8001024 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8080 	bgt.w	8000c1a <LoraStarter_Process+0x3f2>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e07a      	b.n	8000c1a <LoraStarter_Process+0x3f2>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2001      	movs	r0, #1
 8000b28:	f003 fd28 	bl	800457c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f003 fcb2 	bl	80044a8 <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e06c      	b.n	8000c26 <LoraStarter_Process+0x3fe>
 8000b4c:	0801a94c 	.word	0x0801a94c
 8000b50:	0801a954 	.word	0x0801a954
 8000b54:	0801a98c 	.word	0x0801a98c
 8000b58:	0801a9b0 	.word	0x0801a9b0
 8000b5c:	0801a8d8 	.word	0x0801a8d8
 8000b60:	0801a9d0 	.word	0x0801a9d0
 8000b64:	0801a9e8 	.word	0x0801a9e8
 8000b68:	0801aa08 	.word	0x0801aa08
 8000b6c:	0801aa34 	.word	0x0801aa34
 8000b70:	0801aa70 	.word	0x0801aa70
 8000b74:	0801aa8c 	.word	0x0801aa8c
 8000b78:	0801aa98 	.word	0x0801aa98
 8000b7c:	0801aab0 	.word	0x0801aab0
 8000b80:	0801aae0 	.word	0x0801aae0
 8000b84:	0801aae8 	.word	0x0801aae8
 8000b88:	0801aaf8 	.word	0x0801aaf8
 8000b8c:	0801ab10 	.word	0x0801ab10
 8000b90:	0801ab28 	.word	0x0801ab28
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496c      	ldr	r1, [pc, #432]	@ (8000d48 <LoraStarter_Process+0x520>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f003 fcf0 	bl	800457c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f003 fc7a 	bl	80044a8 <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e034      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a63      	ldr	r2, [pc, #396]	@ (8000d4c <LoraStarter_Process+0x524>)
 8000bbe:	4964      	ldr	r1, [pc, #400]	@ (8000d50 <LoraStarter_Process+0x528>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f003 fcdb 	bl	800457c <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	495f      	ldr	r1, [pc, #380]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f003 fccf 	bl	800457c <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da0b      	bge.n	8000c0a <LoraStarter_Process+0x3e2>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	4957      	ldr	r1, [pc, #348]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f003 fcbd 	bl	800457c <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2208      	movs	r2, #8
 8000c06:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c08:	e00d      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c0a:	4954      	ldr	r1, [pc, #336]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f003 fcb5 	bl	800457c <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	220a      	movs	r2, #10
 8000c16:	701a      	strb	r2, [r3, #0]
                        break;
 8000c18:	e005      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4950      	ldr	r1, [pc, #320]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f003 fcac 	bl	800457c <LOGGER_SendFormatted>
                        break;
 8000c24:	bf00      	nop
                }
            }
            break;
 8000c26:	e072      	b.n	8000d0e <LoraStarter_Process+0x4e6>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c28:	f003 fc3e 	bl	80044a8 <TIME_GetCurrentMs>
 8000c2c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <LoraStarter_Process+0x416>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	e001      	b.n	8000c42 <LoraStarter_Process+0x41a>
 8000c3e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d809      	bhi.n	8000c6c <LoraStarter_Process+0x444>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c5c:	4941      	ldr	r1, [pc, #260]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f003 fc8c 	bl	800457c <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2205      	movs	r2, #5
 8000c68:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c6a:	e051      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c80:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c84:	4938      	ldr	r1, [pc, #224]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f003 fc78 	bl	800457c <LOGGER_SendFormatted>
            break;
 8000c8c:	e040      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c8e:	f003 fc0b 	bl	80044a8 <TIME_GetCurrentMs>
 8000c92:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10b      	bne.n	8000cb6 <LoraStarter_Process+0x48e>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c9e:	4933      	ldr	r1, [pc, #204]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f003 fc6b 	bl	800457c <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cb4:	e02c      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d30e      	bcc.n	8000ce6 <LoraStarter_Process+0x4be>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 fc53 	bl	800457c <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	701a      	strb	r2, [r3, #0]
            break;
 8000ce4:	e014      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	491e      	ldr	r1, [pc, #120]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f003 fc3e 	bl	800457c <LOGGER_SendFormatted>
            break;
 8000d00:	e006      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d02:	bf00      	nop
 8000d04:	e004      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d06:	bf00      	nop
 8000d08:	e002      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0e:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d012      	beq.n	8000d42 <LoraStarter_Process+0x51a>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d1c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fce1 	bl	80006e8 <get_state_name>
 8000d26:	4604      	mov	r4, r0
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4622      	mov	r2, r4
 8000d36:	4910      	ldr	r1, [pc, #64]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f003 fc1f 	bl	800457c <LOGGER_SendFormatted>
 8000d3e:	e000      	b.n	8000d42 <LoraStarter_Process+0x51a>
    if (ctx == NULL) return;
 8000d40:	bf00      	nop
    }
}
 8000d42:	37f4      	adds	r7, #244	@ 0xf4
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	0801ab40 	.word	0x0801ab40
 8000d4c:	0801ab54 	.word	0x0801ab54
 8000d50:	0801ab64 	.word	0x0801ab64
 8000d54:	0801ab7c 	.word	0x0801ab7c
 8000d58:	0801ab94 	.word	0x0801ab94
 8000d5c:	0801abb0 	.word	0x0801abb0
 8000d60:	0801abd4 	.word	0x0801abd4
 8000d64:	0801abf0 	.word	0x0801abf0
 8000d68:	0801ac2c 	.word	0x0801ac2c
 8000d6c:	0801ac60 	.word	0x0801ac60
 8000d70:	0801ac78 	.word	0x0801ac78
 8000d74:	0801aca0 	.word	0x0801aca0
 8000d78:	0801acd4 	.word	0x0801acd4

08000d7c <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <Network_SendBinary+0x8c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000d94:	f06f 0301 	mvn.w	r3, #1
 8000d98:	e032      	b.n	8000e00 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <Network_SendBinary+0x2a>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000da6:	f06f 0303 	mvn.w	r3, #3
 8000daa:	e029      	b.n	8000e00 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <Network_SendBinary+0x90>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <Network_SendBinary+0x3e>
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d002      	beq.n	8000dbe <Network_SendBinary+0x42>
 8000db8:	e020      	b.n	8000dfc <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e020      	b.n	8000e00 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 f9df 	bl	8001184 <SDStorage_WriteLog>
 8000dc6:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <Network_SendBinary+0x6a>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dc10      	bgt.n	8000df6 <Network_SendBinary+0x7a>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f113 0f05 	cmn.w	r3, #5
 8000dda:	d009      	beq.n	8000df0 <Network_SendBinary+0x74>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f113 0f02 	cmn.w	r3, #2
 8000de2:	d002      	beq.n	8000dea <Network_SendBinary+0x6e>
 8000de4:	e007      	b.n	8000df6 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e00a      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000dea:	f06f 0301 	mvn.w	r3, #1
 8000dee:	e007      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000df0:	f06f 0303 	mvn.w	r3, #3
 8000df4:	e004      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e001      	b.n	8000e00 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000238 	.word	0x20000238
 8000e0c:	20000239 	.word	0x20000239

08000e10 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <Network_IsConnected+0x34>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d10f      	bne.n	8000e3c <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <Network_IsConnected+0x38>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <Network_IsConnected+0x22>
 8000e24:	f000 fa1a 	bl	800125c <SDStorage_IsReady>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <Network_IsConnected+0x22>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <Network_IsConnected+0x24>
 8000e32:	2300      	movs	r3, #0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	e001      	b.n	8000e40 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	@ (8000e48 <Network_IsConnected+0x38>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000239 	.word	0x20000239
 8000e48:	20000238 	.word	0x20000238

08000e4c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000e5a:	4925      	ldr	r1, [pc, #148]	@ (8000ef0 <is_response_ok+0xa4>)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f003 fb8d 	bl	800457c <LOGGER_SendFormatted>
        return false;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e03f      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4922      	ldr	r1, [pc, #136]	@ (8000ef4 <is_response_ok+0xa8>)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f003 fb86 	bl	800457c <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000e70:	4921      	ldr	r1, [pc, #132]	@ (8000ef8 <is_response_ok+0xac>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9cc 	bl	8000210 <strcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d105      	bne.n	8000e8a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000e7e:	491f      	ldr	r1, [pc, #124]	@ (8000efc <is_response_ok+0xb0>)
 8000e80:	2000      	movs	r0, #0
 8000e82:	f003 fb7b 	bl	800457c <LOGGER_SendFormatted>
        return true;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e02d      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000e8a:	491d      	ldr	r1, [pc, #116]	@ (8000f00 <is_response_ok+0xb4>)
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff f9bf 	bl	8000210 <strcmp>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d105      	bne.n	8000ea4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000e98:	491a      	ldr	r1, [pc, #104]	@ (8000f04 <is_response_ok+0xb8>)
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f003 fb6e 	bl	800457c <LOGGER_SendFormatted>
        return true;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e020      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000ea4:	4918      	ldr	r1, [pc, #96]	@ (8000f08 <is_response_ok+0xbc>)
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff f9b2 	bl	8000210 <strcmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d105      	bne.n	8000ebe <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000eb2:	4916      	ldr	r1, [pc, #88]	@ (8000f0c <is_response_ok+0xc0>)
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f003 fb61 	bl	800457c <LOGGER_SendFormatted>
        return true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e013      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000ebe:	4914      	ldr	r1, [pc, #80]	@ (8000f10 <is_response_ok+0xc4>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f019 f854 	bl	8019f6e <strstr>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4911      	ldr	r1, [pc, #68]	@ (8000f14 <is_response_ok+0xc8>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f003 fb53 	bl	800457c <LOGGER_SendFormatted>
        return true;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e005      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	490e      	ldr	r1, [pc, #56]	@ (8000f18 <is_response_ok+0xcc>)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f003 fb4c 	bl	800457c <LOGGER_SendFormatted>
    return false;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	0801acf4 	.word	0x0801acf4
 8000ef4:	0801ad24 	.word	0x0801ad24
 8000ef8:	0801ad54 	.word	0x0801ad54
 8000efc:	0801ad58 	.word	0x0801ad58
 8000f00:	0801ad80 	.word	0x0801ad80
 8000f04:	0801ad88 	.word	0x0801ad88
 8000f08:	0801adbc 	.word	0x0801adbc
 8000f0c:	0801adc0 	.word	0x0801adc0
 8000f10:	0801adf4 	.word	0x0801adf4
 8000f14:	0801adfc 	.word	0x0801adfc
 8000f18:	0801ae30 	.word	0x0801ae30

08000f1c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f2c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f32:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f3c:	4934      	ldr	r1, [pc, #208]	@ (8001010 <is_join_response_ok+0xf4>)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f003 fb1c 	bl	800457c <LOGGER_SendFormatted>
        return false;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e05e      	b.n	8001006 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f48:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f4c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4930      	ldr	r1, [pc, #192]	@ (8001014 <is_join_response_ok+0xf8>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f003 fb11 	bl	800457c <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000f5a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f5e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f62:	f107 0008 	add.w	r0, r7, #8
 8000f66:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	f018 ffec 	bl	8019f48 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000f70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f74:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f86:	e013      	b.n	8000fb0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000f88:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b0d      	cmp	r3, #13
 8000f90:	d004      	beq.n	8000f9c <is_join_response_ok+0x80>
 8000f92:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b0a      	cmp	r3, #10
 8000f9a:	d104      	bne.n	8000fa6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000f9c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
            break;
 8000fa4:	e009      	b.n	8000fba <is_join_response_ok+0x9e>
        }
        pos++;
 8000fa6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fb0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1e6      	bne.n	8000f88 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4916      	ldr	r1, [pc, #88]	@ (8001018 <is_join_response_ok+0xfc>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f925 	bl	8000210 <strcmp>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf0c      	ite	eq
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	2300      	movne	r3, #0
 8000fd0:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000fd4:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d009      	beq.n	8000ff0 <is_join_response_ok+0xd4>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 8000fdc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fe0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <is_join_response_ok+0x100>)
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f003 fac7 	bl	800457c <LOGGER_SendFormatted>
 8000fee:	e008      	b.n	8001002 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000ff0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ff4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4909      	ldr	r1, [pc, #36]	@ (8001020 <is_join_response_ok+0x104>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f003 fabd 	bl	800457c <LOGGER_SendFormatted>
    }
    
    return result;
 8001002:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001006:	4618      	mov	r0, r3
 8001008:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801ae5c 	.word	0x0801ae5c
 8001014:	0801ae94 	.word	0x0801ae94
 8001018:	0801aec4 	.word	0x0801aec4
 800101c:	0801aed0 	.word	0x0801aed0
 8001020:	0801af00 	.word	0x0801af00

08001024 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8001032:	491e      	ldr	r1, [pc, #120]	@ (80010ac <ResponseHandler_ParseSendResponse+0x88>)
 8001034:	2000      	movs	r0, #0
 8001036:	f003 faa1 	bl	800457c <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 800103a:	2303      	movs	r3, #3
 800103c:	e031      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	491b      	ldr	r1, [pc, #108]	@ (80010b0 <ResponseHandler_ParseSendResponse+0x8c>)
 8001042:	2000      	movs	r0, #0
 8001044:	f003 fa9a 	bl	800457c <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8001048:	491a      	ldr	r1, [pc, #104]	@ (80010b4 <ResponseHandler_ParseSendResponse+0x90>)
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f018 ff8f 	bl	8019f6e <strstr>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8001056:	4918      	ldr	r1, [pc, #96]	@ (80010b8 <ResponseHandler_ParseSendResponse+0x94>)
 8001058:	2001      	movs	r0, #1
 800105a:	f003 fa8f 	bl	800457c <LOGGER_SendFormatted>
        return RESPONSE_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e01f      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8001062:	4916      	ldr	r1, [pc, #88]	@ (80010bc <ResponseHandler_ParseSendResponse+0x98>)
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f018 ff82 	bl	8019f6e <strstr>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001070:	4913      	ldr	r1, [pc, #76]	@ (80010c0 <ResponseHandler_ParseSendResponse+0x9c>)
 8001072:	2002      	movs	r0, #2
 8001074:	f003 fa82 	bl	800457c <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e012      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 800107c:	4911      	ldr	r1, [pc, #68]	@ (80010c4 <ResponseHandler_ParseSendResponse+0xa0>)
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff f8c6 	bl	8000210 <strcmp>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d105      	bne.n	8001096 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800108a:	490f      	ldr	r1, [pc, #60]	@ (80010c8 <ResponseHandler_ParseSendResponse+0xa4>)
 800108c:	2002      	movs	r0, #2
 800108e:	f003 fa75 	bl	800457c <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001092:	2302      	movs	r3, #2
 8001094:	e005      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <ResponseHandler_ParseSendResponse+0xa8>)
 800109a:	2000      	movs	r0, #0
 800109c:	f003 fa6e 	bl	800457c <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 80010a0:	2303      	movs	r3, #3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0801af2c 	.word	0x0801af2c
 80010b0:	0801af60 	.word	0x0801af60
 80010b4:	0801af90 	.word	0x0801af90
 80010b8:	0801afa8 	.word	0x0801afa8
 80010bc:	0801afd8 	.word	0x0801afd8
 80010c0:	0801aff4 	.word	0x0801aff4
 80010c4:	0801b028 	.word	0x0801b028
 80010c8:	0801b030 	.word	0x0801b030
 80010cc:	0801b05c 	.word	0x0801b05c

080010d0 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
static uint32_t _get_current_timestamp(void);

int SDStorage_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 (즉시 마운트로 변경)
    FRESULT mount_result = f_mount(&SDFatFS, SDPath, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	491f      	ldr	r1, [pc, #124]	@ (8001158 <SDStorage_Init+0x88>)
 80010da:	4820      	ldr	r0, [pc, #128]	@ (800115c <SDStorage_Init+0x8c>)
 80010dc:	f014 fc74 	bl	80159c8 <f_mount>
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
    if (mount_result != FR_OK) {
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <SDStorage_Init+0x2c>
        LOG_ERROR("[SDStorage] f_mount failed: %d", mount_result);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	461a      	mov	r2, r3
 80010ee:	491c      	ldr	r1, [pc, #112]	@ (8001160 <SDStorage_Init+0x90>)
 80010f0:	2003      	movs	r0, #3
 80010f2:	f003 fa43 	bl	800457c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e028      	b.n	800114e <SDStorage_Init+0x7e>
    }
    
    LOG_INFO("[SDStorage] f_mount successful");
 80010fc:	4919      	ldr	r1, [pc, #100]	@ (8001164 <SDStorage_Init+0x94>)
 80010fe:	2001      	movs	r0, #1
 8001100:	f003 fa3c 	bl	800457c <LOGGER_SendFormatted>
    
    // SD 카드 상태 확인 생략 (f_getfree는 FreeRTOS 환경에서 시스템 멈춤 유발)
    // 실제 파일 작업 시에 오류로 SD 상태 확인
    LOG_INFO("[SDStorage] Skipping capacity check - will verify during file operations");
 8001104:	4918      	ldr	r1, [pc, #96]	@ (8001168 <SDStorage_Init+0x98>)
 8001106:	2001      	movs	r0, #1
 8001108:	f003 fa38 	bl	800457c <LOGGER_SendFormatted>
    // PC/테스트 환경: 시뮬레이션
    // 실제로는 파일 시스템이 준비되었다고 가정
#endif

    // 로그 디렉토리 생성
    LOG_INFO("[SDStorage] Creating log directory...");
 800110c:	4917      	ldr	r1, [pc, #92]	@ (800116c <SDStorage_Init+0x9c>)
 800110e:	2001      	movs	r0, #1
 8001110:	f003 fa34 	bl	800457c <LOGGER_SendFormatted>
    if (_create_log_directory() != SDSTORAGE_OK) {
 8001114:	f000 f8f0 	bl	80012f8 <_create_log_directory>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <SDStorage_Init+0x5c>
        LOG_ERROR("[SDStorage] Failed to create log directory");
 800111e:	4914      	ldr	r1, [pc, #80]	@ (8001170 <SDStorage_Init+0xa0>)
 8001120:	2003      	movs	r0, #3
 8001122:	f003 fa2b 	bl	800457c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e010      	b.n	800114e <SDStorage_Init+0x7e>
    }
    
    g_sd_ready = true;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <SDStorage_Init+0xa4>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <SDStorage_Init+0xa8>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001138:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800113c:	2100      	movs	r1, #0
 800113e:	480f      	ldr	r0, [pc, #60]	@ (800117c <SDStorage_Init+0xac>)
 8001140:	f018 fefa 	bl	8019f38 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 8001144:	490e      	ldr	r1, [pc, #56]	@ (8001180 <SDStorage_Init+0xb0>)
 8001146:	2001      	movs	r0, #1
 8001148:	f003 fa18 	bl	800457c <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200015a0 	.word	0x200015a0
 800115c:	200015a4 	.word	0x200015a4
 8001160:	0801b08c 	.word	0x0801b08c
 8001164:	0801b0ac 	.word	0x0801b0ac
 8001168:	0801b0cc 	.word	0x0801b0cc
 800116c:	0801b118 	.word	0x0801b118
 8001170:	0801b140 	.word	0x0801b140
 8001174:	2000023a 	.word	0x2000023a
 8001178:	2000033c 	.word	0x2000033c
 800117c:	2000023c 	.word	0x2000023c
 8001180:	0801b16c 	.word	0x0801b16c

08001184 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800118e:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <SDStorage_WriteLog+0xc4>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 800119c:	f06f 0301 	mvn.w	r3, #1
 80011a0:	e04e      	b.n	8001240 <SDStorage_WriteLog+0xbc>
    }
    
    if (data == NULL || size == 0) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <SDStorage_WriteLog+0x2a>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 80011ae:	f06f 0304 	mvn.w	r3, #4
 80011b2:	e045      	b.n	8001240 <SDStorage_WriteLog+0xbc>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <SDStorage_WriteLog+0xc8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <SDStorage_WriteLog+0xcc>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 80011c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80011c8:	d907      	bls.n	80011da <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80011ca:	f000 f853 	bl	8001274 <SDStorage_CreateNewLogFile>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 80011d4:	f06f 0302 	mvn.w	r3, #2
 80011d8:	e032      	b.n	8001240 <SDStorage_WriteLog+0xbc>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs를 사용한 파일 쓰기
    if (!g_file_open) {
 80011da:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <SDStorage_WriteLog+0xd0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f083 0301 	eor.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <SDStorage_WriteLog+0x80>
        if (f_open(&g_log_file, g_current_log_file, FA_WRITE | FA_OPEN_APPEND) != FR_OK) {
 80011e8:	2232      	movs	r2, #50	@ 0x32
 80011ea:	4918      	ldr	r1, [pc, #96]	@ (800124c <SDStorage_WriteLog+0xc8>)
 80011ec:	481a      	ldr	r0, [pc, #104]	@ (8001258 <SDStorage_WriteLog+0xd4>)
 80011ee:	f014 fc4f 	bl	8015a90 <f_open>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <SDStorage_WriteLog+0x7a>
            return SDSTORAGE_FILE_ERROR;
 80011f8:	f06f 0302 	mvn.w	r3, #2
 80011fc:	e020      	b.n	8001240 <SDStorage_WriteLog+0xbc>
        }
        g_file_open = true;
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <SDStorage_WriteLog+0xd0>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
    }
    
    UINT bytes_written;
    if (f_write(&g_log_file, data, size, &bytes_written) != FR_OK) {
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4812      	ldr	r0, [pc, #72]	@ (8001258 <SDStorage_WriteLog+0xd4>)
 800120e:	f014 fe00 	bl	8015e12 <f_write>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <SDStorage_WriteLog+0x9a>
        return SDSTORAGE_FILE_ERROR;
 8001218:	f06f 0302 	mvn.w	r3, #2
 800121c:	e010      	b.n	8001240 <SDStorage_WriteLog+0xbc>
    }
    
    if (bytes_written != size) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d002      	beq.n	800122c <SDStorage_WriteLog+0xa8>
        return SDSTORAGE_DISK_FULL;
 8001226:	f06f 0303 	mvn.w	r3, #3
 800122a:	e009      	b.n	8001240 <SDStorage_WriteLog+0xbc>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    f_sync(&g_log_file);
 800122c:	480a      	ldr	r0, [pc, #40]	@ (8001258 <SDStorage_WriteLog+0xd4>)
 800122e:	f014 ff94 	bl	801615a <f_sync>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <SDStorage_WriteLog+0xcc>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <SDStorage_WriteLog+0xcc>)
 800123c:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000023a 	.word	0x2000023a
 800124c:	2000023c 	.word	0x2000023c
 8001250:	2000033c 	.word	0x2000033c
 8001254:	20000570 	.word	0x20000570
 8001258:	20000340 	.word	0x20000340

0800125c <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <SDStorage_IsReady+0x14>)
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000023a 	.word	0x2000023a

08001274 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <SDStorage_CreateNewLogFile+0x70>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	f083 0301 	eor.w	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <SDStorage_CreateNewLogFile+0x18>
        return SDSTORAGE_NOT_READY;
 8001286:	f06f 0301 	mvn.w	r3, #1
 800128a:	e029      	b.n	80012e0 <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <SDStorage_CreateNewLogFile+0x74>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d005      	beq.n	80012a0 <SDStorage_CreateNewLogFile+0x2c>
        f_close(&g_log_file);
 8001294:	4815      	ldr	r0, [pc, #84]	@ (80012ec <SDStorage_CreateNewLogFile+0x78>)
 8001296:	f014 ffe9 	bl	801626c <f_close>
        g_file_open = false;
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <SDStorage_CreateNewLogFile+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80012a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012a4:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <SDStorage_CreateNewLogFile+0x7c>)
 80012a6:	f000 f831 	bl	800130c <_generate_log_filename>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <SDStorage_CreateNewLogFile+0x42>
        return SDSTORAGE_ERROR;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	e014      	b.n	80012e0 <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 파일 생성 확인
#ifdef STM32F746xx
    if (f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE) != FR_OK) {
 80012b6:	2206      	movs	r2, #6
 80012b8:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <SDStorage_CreateNewLogFile+0x7c>)
 80012ba:	480c      	ldr	r0, [pc, #48]	@ (80012ec <SDStorage_CreateNewLogFile+0x78>)
 80012bc:	f014 fbe8 	bl	8015a90 <f_open>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <SDStorage_CreateNewLogFile+0x58>
        return SDSTORAGE_FILE_ERROR;
 80012c6:	f06f 0302 	mvn.w	r3, #2
 80012ca:	e009      	b.n	80012e0 <SDStorage_CreateNewLogFile+0x6c>
    }
    f_close(&g_log_file);
 80012cc:	4807      	ldr	r0, [pc, #28]	@ (80012ec <SDStorage_CreateNewLogFile+0x78>)
 80012ce:	f014 ffcd 	bl	801626c <f_close>
    g_file_open = false;
 80012d2:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SDStorage_CreateNewLogFile+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    // 실제 파일 생성 없이 성공으로 처리
#endif
    
    g_current_log_size = 0;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <SDStorage_CreateNewLogFile+0x80>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000023a 	.word	0x2000023a
 80012e8:	20000570 	.word	0x20000570
 80012ec:	20000340 	.word	0x20000340
 80012f0:	2000023c 	.word	0x2000023c
 80012f4:	2000033c 	.word	0x2000033c

080012f8 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // STM32: FatFs 디렉토리 생성
    f_mkdir(SDSTORAGE_LOG_DIR);  // 이미 존재해도 에러 무시
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <_create_log_directory+0x10>)
 80012fe:	f014 ffe4 	bl	80162ca <f_mkdir>
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    // 실제로는 디렉토리 생성 시뮬레이션
#endif
    return SDSTORAGE_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}
 8001308:	0801b1a0 	.word	0x0801b1a0

0800130c <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b095      	sub	sp, #84	@ 0x54
 8001310:	af08      	add	r7, sp, #32
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
    uint32_t timestamp = _get_current_timestamp();
 8001316:	f000 f86f 	bl	80013f8 <_get_current_timestamp>
 800131a:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 800131c:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8001320:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 8001322:	2301      	movs	r3, #1
 8001324:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001328:	2301      	movs	r3, #1
 800132a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800132e:	2300      	movs	r3, #0
 8001330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001334:	2300      	movs	r3, #0
 8001336:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800133a:	2300      	movs	r3, #0
 800133c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	4826      	ldr	r0, [pc, #152]	@ (80013e4 <_generate_log_filename+0xd8>)
 800134a:	f00a f8d5 	bl	800b4f8 <HAL_RTC_GetTime>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d11c      	bne.n	800138e <_generate_log_filename+0x82>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	4821      	ldr	r0, [pc, #132]	@ (80013e4 <_generate_log_filename+0xd8>)
 800135e:	f00a f9ad 	bl	800b6bc <HAL_RTC_GetDate>
 8001362:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8001364:	2b00      	cmp	r3, #0
 8001366:	d112      	bne.n	800138e <_generate_log_filename+0x82>
        year = 2000 + sDate.Year;
 8001368:	7afb      	ldrb	r3, [r7, #11]
 800136a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800136e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 8001370:	7a7b      	ldrb	r3, [r7, #9]
 8001372:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 8001376:	7abb      	ldrb	r3, [r7, #10]
 8001378:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 8001382:	7b7b      	ldrb	r3, [r7, #13]
 8001384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    hour = 10;
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    int result = snprintf(filename, max_len, 
 800138e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001390:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001394:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001398:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800139c:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 80013a0:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 80013a4:	4e10      	ldr	r6, [pc, #64]	@ (80013e8 <_generate_log_filename+0xdc>)
 80013a6:	9607      	str	r6, [sp, #28]
 80013a8:	9506      	str	r5, [sp, #24]
 80013aa:	9405      	str	r4, [sp, #20]
 80013ac:	9004      	str	r0, [sp, #16]
 80013ae:	9103      	str	r1, [sp, #12]
 80013b0:	9202      	str	r2, [sp, #8]
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <_generate_log_filename+0xe0>)
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <_generate_log_filename+0xe4>)
 80013ba:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <_generate_log_filename+0xe8>)
 80013bc:	6839      	ldr	r1, [r7, #0]
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f018 fd26 	bl	8019e10 <sniprintf>
 80013c4:	6238      	str	r0, [r7, #32]
                         SDSTORAGE_LOG_DIR,
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db03      	blt.n	80013d4 <_generate_log_filename+0xc8>
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d802      	bhi.n	80013da <_generate_log_filename+0xce>
        return SDSTORAGE_ERROR;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	e000      	b.n	80013dc <_generate_log_filename+0xd0>
    }
    
    return SDSTORAGE_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3734      	adds	r7, #52	@ 0x34
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e4:	20000b4c 	.word	0x20000b4c
 80013e8:	0801b1d0 	.word	0x0801b1d0
 80013ec:	0801b1d8 	.word	0x0801b1d8
 80013f0:	0801b1a0 	.word	0x0801b1a0
 80013f4:	0801b1ac 	.word	0x0801b1ac

080013f8 <_get_current_timestamp>:

static uint32_t _get_current_timestamp(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    return HAL_GetTick();
 80013fc:	f003 fe4e 	bl	800509c <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
#else
    return (uint32_t)time(NULL);
#endif
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}

08001406 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <vApplicationGetIdleTaskMemory+0x2c>)
 8001448:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	4a06      	ldr	r2, [pc, #24]	@ (8001468 <vApplicationGetIdleTaskMemory+0x30>)
 800144e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000574 	.word	0x20000574
 8001468:	200005cc 	.word	0x200005cc

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b08e      	sub	sp, #56	@ 0x38
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001472:	4b6c      	ldr	r3, [pc, #432]	@ (8001624 <main+0x1b8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a6a      	ldr	r2, [pc, #424]	@ (8001624 <main+0x1b8>)
 800147a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f003 fded 	bl	800505a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f8f4 	bl	800166c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001484:	f000 f964 	bl	8001750 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001488:	f001 f926 	bl	80026d8 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 800148c:	f001 fde8 	bl	8003060 <MX_DMA_Init>
//  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
  MX_ADC3_Init();
 8001490:	f000 f990 	bl	80017b4 <MX_ADC3_Init>
  MX_CRC_Init();
 8001494:	f000 f9e0 	bl	8001858 <MX_CRC_Init>
  MX_DCMI_Init();
 8001498:	f000 fa00 	bl	800189c <MX_DCMI_Init>
  MX_DMA2D_Init();
 800149c:	f000 fa32 	bl	8001904 <MX_DMA2D_Init>
  MX_ETH_Init();
 80014a0:	f000 fa62 	bl	8001968 <MX_ETH_Init>
  MX_FMC_Init();
 80014a4:	f001 f8c8 	bl	8002638 <MX_FMC_Init>
  MX_I2C1_Init();
 80014a8:	f000 faac 	bl	8001a04 <MX_I2C1_Init>
  MX_I2C3_Init();
 80014ac:	f000 faea 	bl	8001a84 <MX_I2C3_Init>
  MX_LTDC_Init();
 80014b0:	f000 fb28 	bl	8001b04 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80014b4:	f000 fba8 	bl	8001c08 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80014b8:	f000 fbd2 	bl	8001c60 <MX_RTC_Init>
  MX_SAI2_Init();
 80014bc:	f000 fc74 	bl	8001da8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80014c0:	f000 fd1a 	bl	8001ef8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80014c4:	f000 fd3e 	bl	8001f44 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80014c8:	f000 fd6c 	bl	8001fa4 <MX_SPI2_Init>
  MX_TIM1_Init();
 80014cc:	f000 fda8 	bl	8002020 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014d0:	f000 fe52 	bl	8002178 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014d4:	f000 fec6 	bl	8002264 <MX_TIM3_Init>
  MX_TIM5_Init();
 80014d8:	f000 ff3c 	bl	8002354 <MX_TIM5_Init>
  MX_TIM8_Init();
 80014dc:	f000 ffb2 	bl	8002444 <MX_TIM8_Init>
  MX_TIM12_Init();
 80014e0:	f001 f804 	bl	80024ec <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80014e4:	f001 f848 	bl	8002578 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80014e8:	f001 f876 	bl	80025d8 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 80014ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001628 <main+0x1bc>)
 80014ee:	4a4f      	ldr	r2, [pc, #316]	@ (800162c <main+0x1c0>)
 80014f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80014f2:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <main+0x1c0>)
 80014f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001628 <main+0x1bc>)
 80014f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80014f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001628 <main+0x1bc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001628 <main+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0210 	orr.w	r2, r2, #16
 8001506:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001508:	f010 f902 	bl	8011710 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 800150c:	2100      	movs	r1, #0
 800150e:	4848      	ldr	r0, [pc, #288]	@ (8001630 <main+0x1c4>)
 8001510:	f002 ffd8 	bl	80044c4 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001514:	4b43      	ldr	r3, [pc, #268]	@ (8001624 <main+0x1b8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4946      	ldr	r1, [pc, #280]	@ (8001634 <main+0x1c8>)
 800151c:	2001      	movs	r0, #1
 800151e:	f003 f82d 	bl	800457c <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001522:	4b45      	ldr	r3, [pc, #276]	@ (8001638 <main+0x1cc>)
 8001524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <main+0xca>
 800152e:	4943      	ldr	r1, [pc, #268]	@ (800163c <main+0x1d0>)
 8001530:	2002      	movs	r0, #2
 8001532:	f003 f823 	bl	800457c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001536:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <main+0x1cc>)
 8001538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800153a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <main+0xde>
 8001542:	493f      	ldr	r1, [pc, #252]	@ (8001640 <main+0x1d4>)
 8001544:	2002      	movs	r0, #2
 8001546:	f003 f819 	bl	800457c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <main+0x1cc>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800154e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <main+0xf2>
 8001556:	493b      	ldr	r1, [pc, #236]	@ (8001644 <main+0x1d8>)
 8001558:	2002      	movs	r0, #2
 800155a:	f003 f80f 	bl	800457c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 800155e:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <main+0x1cc>)
 8001560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <main+0x106>
 800156a:	4937      	ldr	r1, [pc, #220]	@ (8001648 <main+0x1dc>)
 800156c:	2002      	movs	r0, #2
 800156e:	f003 f805 	bl	800457c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001572:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <main+0x1cc>)
 8001574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001576:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <main+0x11a>
 800157e:	4933      	ldr	r1, [pc, #204]	@ (800164c <main+0x1e0>)
 8001580:	2002      	movs	r0, #2
 8001582:	f002 fffb 	bl	800457c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001586:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <main+0x1cc>)
 8001588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800158a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <main+0x12e>
 8001592:	492f      	ldr	r1, [pc, #188]	@ (8001650 <main+0x1e4>)
 8001594:	2002      	movs	r0, #2
 8001596:	f002 fff1 	bl	800457c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 800159a:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <main+0x1cc>)
 800159c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da03      	bge.n	80015aa <main+0x13e>
 80015a2:	492c      	ldr	r1, [pc, #176]	@ (8001654 <main+0x1e8>)
 80015a4:	2002      	movs	r0, #2
 80015a6:	f002 ffe9 	bl	800457c <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80015aa:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <main+0x1cc>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ae:	4a22      	ldr	r2, [pc, #136]	@ (8001638 <main+0x1cc>)
 80015b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015b4:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // SD 카드 하드웨어 초기화 완료 - SDStorage 모듈에서 파일시스템 처리
  LOG_INFO("SD hardware ready - file system initialization delegated to SDStorage module");
 80015b6:	4928      	ldr	r1, [pc, #160]	@ (8001658 <main+0x1ec>)
 80015b8:	2001      	movs	r0, #1
 80015ba:	f002 ffdf 	bl	800457c <LOGGER_SendFormatted>
  
  // UART6 DMA 초기화 (UART 초기화 후)
  MX_USART6_DMA_Init();
 80015be:	f001 fd75 	bl	80030ac <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <main+0x1bc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <main+0x1bc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0210 	orr.w	r2, r2, #16
 80015d0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80015d2:	4b22      	ldr	r3, [pc, #136]	@ (800165c <main+0x1f0>)
 80015d4:	f107 041c 	add.w	r4, r7, #28
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f015 f86f 	bl	80166d0 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001660 <main+0x1f4>)
 80015f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <main+0x1f8>)
 80015fa:	463c      	mov	r4, r7
 80015fc:	461d      	mov	r5, r3
 80015fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800160a:	463b      	mov	r3, r7
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f015 f85e 	bl	80166d0 <osThreadCreate>
 8001614:	4603      	mov	r3, r0
 8001616:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <main+0x1fc>)
 8001618:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800161a:	f015 f836 	bl	801668a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800161e:	bf00      	nop
 8001620:	e7fd      	b.n	800161e <main+0x1b2>
 8001622:	bf00      	nop
 8001624:	20001324 	.word	0x20001324
 8001628:	20000ff8 	.word	0x20000ff8
 800162c:	200012c4 	.word	0x200012c4
 8001630:	0801b1e4 	.word	0x0801b1e4
 8001634:	0801b1ec 	.word	0x0801b1ec
 8001638:	40023800 	.word	0x40023800
 800163c:	0801b210 	.word	0x0801b210
 8001640:	0801b228 	.word	0x0801b228
 8001644:	0801b240 	.word	0x0801b240
 8001648:	0801b258 	.word	0x0801b258
 800164c:	0801b268 	.word	0x0801b268
 8001650:	0801b280 	.word	0x0801b280
 8001654:	0801b2a0 	.word	0x0801b2a0
 8001658:	0801b2b8 	.word	0x0801b2b8
 800165c:	0801b314 	.word	0x0801b314
 8001660:	200010b4 	.word	0x200010b4
 8001664:	0801b33c 	.word	0x0801b33c
 8001668:	200010b8 	.word	0x200010b8

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	@ 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	2230      	movs	r2, #48	@ 0x30
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f018 fc5c 	bl	8019f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001690:	f008 fb08 	bl	8009ca4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <SystemClock_Config+0xdc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	4a2b      	ldr	r2, [pc, #172]	@ (8001748 <SystemClock_Config+0xdc>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169e:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a0:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <SystemClock_Config+0xdc>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <SystemClock_Config+0xe0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a26      	ldr	r2, [pc, #152]	@ (800174c <SystemClock_Config+0xe0>)
 80016b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <SystemClock_Config+0xe0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80016c4:	2309      	movs	r3, #9
 80016c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ce:	2301      	movs	r3, #1
 80016d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016dc:	2319      	movs	r3, #25
 80016de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80016e0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80016e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016ea:	2309      	movs	r3, #9
 80016ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4618      	mov	r0, r3
 80016f4:	f008 fbf8 	bl	8009ee8 <HAL_RCC_OscConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016fe:	f001 fca9 	bl	8003054 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001702:	f008 fadf 	bl	8009cc4 <HAL_PWREx_EnableOverDrive>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800170c:	f001 fca2 	bl	8003054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
 8001712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800171c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2106      	movs	r1, #6
 800172e:	4618      	mov	r0, r3
 8001730:	f008 fe7e 	bl	800a430 <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800173a:	f001 fc8b 	bl	8003054 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	@ 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0a2      	sub	sp, #136	@ 0x88
 8001754:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2284      	movs	r2, #132	@ 0x84
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f018 fbeb 	bl	8019f38 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <PeriphCommonClock_Config+0x60>)
 8001764:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001766:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800176a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800176c:	2305      	movs	r3, #5
 800176e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001770:	2302      	movs	r3, #2
 8001772:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001774:	2303      	movs	r3, #3
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800177c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001782:	2300      	movs	r3, #0
 8001784:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001786:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800178a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f009 f862 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80017a2:	f001 fc57 	bl	8003054 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3788      	adds	r7, #136	@ 0x88
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	00b00008 	.word	0x00b00008

080017b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_ADC3_Init+0x98>)
 80017c8:	4a21      	ldr	r2, [pc, #132]	@ (8001850 <MX_ADC3_Init+0x9c>)
 80017ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_ADC3_Init+0x98>)
 80017ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <MX_ADC3_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <MX_ADC3_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_ADC3_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <MX_ADC3_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <MX_ADC3_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <MX_ADC3_Init+0x98>)
 80017f6:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <MX_ADC3_Init+0xa0>)
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <MX_ADC3_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <MX_ADC3_Init+0x98>)
 8001802:	2201      	movs	r2, #1
 8001804:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_ADC3_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_ADC3_Init+0x98>)
 8001810:	2201      	movs	r2, #1
 8001812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001814:	480d      	ldr	r0, [pc, #52]	@ (800184c <MX_ADC3_Init+0x98>)
 8001816:	f003 fc71 	bl	80050fc <HAL_ADC_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001820:	f001 fc18 	bl	8003054 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001824:	2304      	movs	r3, #4
 8001826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001828:	2301      	movs	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_ADC3_Init+0x98>)
 8001836:	f003 fca5 	bl	8005184 <HAL_ADC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001840:	f001 fc08 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000804 	.word	0x20000804
 8001850:	40012200 	.word	0x40012200
 8001854:	0f000001 	.word	0x0f000001

08001858 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <MX_CRC_Init+0x3c>)
 800185e:	4a0e      	ldr	r2, [pc, #56]	@ (8001898 <MX_CRC_Init+0x40>)
 8001860:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_CRC_Init+0x3c>)
 8001864:	2200      	movs	r2, #0
 8001866:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <MX_CRC_Init+0x3c>)
 800186a:	2200      	movs	r2, #0
 800186c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_CRC_Init+0x3c>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <MX_CRC_Init+0x3c>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_CRC_Init+0x3c>)
 800187c:	2201      	movs	r2, #1
 800187e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_CRC_Init+0x3c>)
 8001882:	f003 ffb5 	bl	80057f0 <HAL_CRC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800188c:	f001 fbe2 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000084c 	.word	0x2000084c
 8001898:	40023000 	.word	0x40023000

0800189c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80018a0:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018a2:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <MX_DCMI_Init+0x64>)
 80018a4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80018b8:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80018c4:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80018dc:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_DCMI_Init+0x60>)
 80018ea:	f004 f873 	bl	80059d4 <HAL_DCMI_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80018f4:	f001 fbae 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000870 	.word	0x20000870
 8001900:	50050000 	.word	0x50050000

08001904 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 800190a:	4a16      	ldr	r2, [pc, #88]	@ (8001964 <MX_DMA2D_Init+0x60>)
 800190c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 800192e:	2200      	movs	r2, #0
 8001930:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 8001934:	2200      	movs	r2, #0
 8001936:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 800193a:	f004 fd39 	bl	80063b0 <HAL_DMA2D_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001944:	f001 fb86 	bl	8003054 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001948:	2101      	movs	r1, #1
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_DMA2D_Init+0x5c>)
 800194c:	f004 fe8a 	bl	8006664 <HAL_DMA2D_ConfigLayer>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001956:	f001 fb7d 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200008c0 	.word	0x200008c0
 8001964:	4002b000 	.word	0x4002b000

08001968 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <MX_ETH_Init+0x84>)
 800196e:	4a20      	ldr	r2, [pc, #128]	@ (80019f0 <MX_ETH_Init+0x88>)
 8001970:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <MX_ETH_Init+0x8c>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001978:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <MX_ETH_Init+0x8c>)
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800197e:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <MX_ETH_Init+0x8c>)
 8001980:	22e1      	movs	r2, #225	@ 0xe1
 8001982:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <MX_ETH_Init+0x8c>)
 8001986:	2200      	movs	r2, #0
 8001988:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800198a:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <MX_ETH_Init+0x8c>)
 800198c:	2200      	movs	r2, #0
 800198e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001990:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <MX_ETH_Init+0x8c>)
 8001992:	2200      	movs	r2, #0
 8001994:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_ETH_Init+0x84>)
 8001998:	4a16      	ldr	r2, [pc, #88]	@ (80019f4 <MX_ETH_Init+0x8c>)
 800199a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <MX_ETH_Init+0x84>)
 800199e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <MX_ETH_Init+0x84>)
 80019a6:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <MX_ETH_Init+0x90>)
 80019a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <MX_ETH_Init+0x84>)
 80019ac:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <MX_ETH_Init+0x94>)
 80019ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_ETH_Init+0x84>)
 80019b2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80019b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <MX_ETH_Init+0x84>)
 80019ba:	f004 fee5 	bl	8006788 <HAL_ETH_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80019c4:	f001 fb46 	bl	8003054 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80019c8:	2238      	movs	r2, #56	@ 0x38
 80019ca:	2100      	movs	r1, #0
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <MX_ETH_Init+0x98>)
 80019ce:	f018 fab3 	bl	8019f38 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <MX_ETH_Init+0x98>)
 80019d4:	2221      	movs	r2, #33	@ 0x21
 80019d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_ETH_Init+0x98>)
 80019da:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80019de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <MX_ETH_Init+0x98>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000900 	.word	0x20000900
 80019f0:	40028000 	.word	0x40028000
 80019f4:	20001328 	.word	0x20001328
 80019f8:	2000017c 	.word	0x2000017c
 80019fc:	200000dc 	.word	0x200000dc
 8001a00:	200007cc 	.word	0x200007cc

08001a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <MX_I2C1_Init+0x78>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a10:	4a1b      	ldr	r2, [pc, #108]	@ (8001a80 <MX_I2C1_Init+0x7c>)
 8001a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a3e:	480e      	ldr	r0, [pc, #56]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a40:	f007 fcea 	bl	8009418 <HAL_I2C_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a4a:	f001 fb03 	bl	8003054 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4809      	ldr	r0, [pc, #36]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a52:	f007 fd7d 	bl	8009550 <HAL_I2CEx_ConfigAnalogFilter>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a5c:	f001 fafa 	bl	8003054 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_I2C1_Init+0x74>)
 8001a64:	f007 fdbf 	bl	80095e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a6e:	f001 faf1 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200009b0 	.word	0x200009b0
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	00c0eaff 	.word	0x00c0eaff

08001a84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <MX_I2C3_Init+0x78>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001a90:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <MX_I2C3_Init+0x7c>)
 8001a92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001abe:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001ac0:	f007 fcaa 	bl	8009418 <HAL_I2C_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001aca:	f001 fac3 	bl	8003054 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001ad2:	f007 fd3d 	bl	8009550 <HAL_I2CEx_ConfigAnalogFilter>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001adc:	f001 faba 	bl	8003054 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001ae4:	f007 fd7f 	bl	80095e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001aee:	f001 fab1 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000a04 	.word	0x20000a04
 8001afc:	40005c00 	.word	0x40005c00
 8001b00:	00c0eaff 	.word	0x00c0eaff

08001b04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	@ 0x38
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2234      	movs	r2, #52	@ 0x34
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f018 fa11 	bl	8019f38 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b16:	4b3a      	ldr	r3, [pc, #232]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b18:	4a3a      	ldr	r2, [pc, #232]	@ (8001c04 <MX_LTDC_Init+0x100>)
 8001b1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b1c:	4b38      	ldr	r3, [pc, #224]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b22:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b28:	4b35      	ldr	r3, [pc, #212]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b2e:	4b34      	ldr	r3, [pc, #208]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b34:	4b32      	ldr	r3, [pc, #200]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b36:	2228      	movs	r2, #40	@ 0x28
 8001b38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001b3a:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b3c:	2209      	movs	r2, #9
 8001b3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001b40:	4b2f      	ldr	r3, [pc, #188]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b42:	2235      	movs	r2, #53	@ 0x35
 8001b44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b48:	220b      	movs	r2, #11
 8001b4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b4e:	f240 2215 	movw	r2, #533	@ 0x215
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b54:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b56:	f240 121b 	movw	r2, #283	@ 0x11b
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001b5c:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b5e:	f240 2235 	movw	r2, #565	@ 0x235
 8001b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001b64:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b66:	f240 121d 	movw	r2, #285	@ 0x11d
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b6c:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b7c:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b84:	481e      	ldr	r0, [pc, #120]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001b86:	f007 fd7a 	bl	800967e <HAL_LTDC_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b90:	f001 fa60 	bl	8003054 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001b98:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b9c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001ba2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001ba6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001bac:	23ff      	movs	r3, #255	@ 0xff
 8001bae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bb4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bb8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bba:	2307      	movs	r3, #7
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001bbe:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001bc4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001bca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001bce:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_LTDC_Init+0xfc>)
 8001bea:	f007 fea7 	bl	800993c <HAL_LTDC_ConfigLayer>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001bf4:	f001 fa2e 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3738      	adds	r7, #56	@ 0x38
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000a58 	.word	0x20000a58
 8001c04:	40016800 	.word	0x40016800

08001c08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c0e:	4a13      	ldr	r2, [pc, #76]	@ (8001c5c <MX_QUADSPI_Init+0x54>)
 8001c10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c20:	2210      	movs	r2, #16
 8001c22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c26:	2218      	movs	r2, #24
 8001c28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c2c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001c30:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c38:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c44:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <MX_QUADSPI_Init+0x50>)
 8001c46:	f008 f88d 	bl	8009d64 <HAL_QSPI_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001c50:	f001 fa00 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000b00 	.word	0x20000b00
 8001c5c:	a0001000 	.word	0xa0001000

08001c60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b090      	sub	sp, #64	@ 0x40
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c76:	2300      	movs	r3, #0
 8001c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2228      	movs	r2, #40	@ 0x28
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f018 f959 	bl	8019f38 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c86:	4b46      	ldr	r3, [pc, #280]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001c88:	4a46      	ldr	r2, [pc, #280]	@ (8001da4 <MX_RTC_Init+0x144>)
 8001c8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c8c:	4b44      	ldr	r3, [pc, #272]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c92:	4b43      	ldr	r3, [pc, #268]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001c94:	227f      	movs	r2, #127	@ 0x7f
 8001c96:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c98:	4b41      	ldr	r3, [pc, #260]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001c9a:	22ff      	movs	r2, #255	@ 0xff
 8001c9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c9e:	4b40      	ldr	r3, [pc, #256]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001caa:	4b3d      	ldr	r3, [pc, #244]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cb0:	483b      	ldr	r0, [pc, #236]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001cb2:	f009 fb05 	bl	800b2c0 <HAL_RTC_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cbc:	f001 f9ca 	bl	8003054 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	482f      	ldr	r0, [pc, #188]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001ce4:	f009 fb6e 	bl	800b3c4 <HAL_RTC_SetTime>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001cee:	f001 f9b1 	bl	8003054 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	4823      	ldr	r0, [pc, #140]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001d14:	f009 fc4e 	bl	800b5b4 <HAL_RTC_SetDate>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d1e:	f001 f999 	bl	8003054 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d52:	463b      	mov	r3, r7
 8001d54:	2201      	movs	r2, #1
 8001d56:	4619      	mov	r1, r3
 8001d58:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001d5a:	f009 fcff 	bl	800b75c <HAL_RTC_SetAlarm>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d64:	f001 f976 	bl	8003054 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	2201      	movs	r2, #1
 8001d72:	4619      	mov	r1, r3
 8001d74:	480a      	ldr	r0, [pc, #40]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001d76:	f009 fcf1 	bl	800b75c <HAL_RTC_SetAlarm>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001d80:	f001 f968 	bl	8003054 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d84:	2202      	movs	r2, #2
 8001d86:	2100      	movs	r1, #0
 8001d88:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_RTC_Init+0x140>)
 8001d8a:	f009 fecf 	bl	800bb2c <HAL_RTCEx_SetTimeStamp>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001d94:	f001 f95e 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	3740      	adds	r7, #64	@ 0x40
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000b4c 	.word	0x20000b4c
 8001da4:	40002800 	.word	0x40002800

08001da8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001dac:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dae:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee8 <MX_SAI2_Init+0x140>)
 8001db0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001db2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001db8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001dbe:	4b49      	ldr	r3, [pc, #292]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dc0:	2240      	movs	r2, #64	@ 0x40
 8001dc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dc4:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dca:	4b46      	ldr	r3, [pc, #280]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001dd0:	4b44      	ldr	r3, [pc, #272]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dd6:	4b43      	ldr	r3, [pc, #268]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ddc:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001de2:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001de8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dea:	4a40      	ldr	r2, [pc, #256]	@ (8001eec <MX_SAI2_Init+0x144>)
 8001dec:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001dee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001df4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e00:	4b38      	ldr	r3, [pc, #224]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001e06:	4b37      	ldr	r3, [pc, #220]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e08:	2208      	movs	r2, #8
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001e0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e12:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e18:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001e30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e3c:	4829      	ldr	r0, [pc, #164]	@ (8001ee4 <MX_SAI2_Init+0x13c>)
 8001e3e:	f009 fedd 	bl	800bbfc <HAL_SAI_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001e48:	f001 f904 	bl	8003054 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e4c:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e4e:	4a29      	ldr	r2, [pc, #164]	@ (8001ef4 <MX_SAI2_Init+0x14c>)
 8001e50:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e52:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001e58:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001e5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e60:	2240      	movs	r2, #64	@ 0x40
 8001e62:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e64:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001ea6:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001eac:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001ed0:	4807      	ldr	r0, [pc, #28]	@ (8001ef0 <MX_SAI2_Init+0x148>)
 8001ed2:	f009 fe93 	bl	800bbfc <HAL_SAI_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001edc:	f001 f8ba 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000b6c 	.word	0x20000b6c
 8001ee8:	40015c04 	.word	0x40015c04
 8001eec:	0002ee00 	.word	0x0002ee00
 8001ef0:	20000bf0 	.word	0x20000bf0
 8001ef4:	40015c24 	.word	0x40015c24

08001ef8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <MX_SDMMC1_SD_Init+0x44>)
 8001efe:	4a10      	ldr	r2, [pc, #64]	@ (8001f40 <MX_SDMMC1_SD_Init+0x48>)
 8001f00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_SDMMC1_SD_Init+0x44>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <MX_SDMMC1_SD_Init+0x44>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <MX_SDMMC1_SD_Init+0x44>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MX_SDMMC1_SD_Init+0x44>)
 8001f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f1a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <MX_SDMMC1_SD_Init+0x44>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <MX_SDMMC1_SD_Init+0x44>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_SDMMC1_SD_Init+0x44>)
 8001f2a:	f00a f81d 	bl	800bf68 <HAL_SD_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8001f34:	f001 f88e 	bl	8003054 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000c74 	.word	0x20000c74
 8001f40:	40012c00 	.word	0x40012c00

08001f44 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f4a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001f4e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001f50:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001f62:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001f68:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001f80:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001f8c:	4804      	ldr	r0, [pc, #16]	@ (8001fa0 <MX_SPDIFRX_Init+0x5c>)
 8001f8e:	f00a feb5 	bl	800ccfc <HAL_SPDIFRX_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001f98:	f001 f85c 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000cf8 	.word	0x20000cf8

08001fa4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001faa:	4a1c      	ldr	r2, [pc, #112]	@ (800201c <MX_SPI2_Init+0x78>)
 8001fac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb6:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fbe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001fc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fca:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <MX_SPI2_Init+0x74>)
 8001ffe:	2208      	movs	r2, #8
 8002000:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	@ (8002018 <MX_SPI2_Init+0x74>)
 8002004:	f00a fed6 	bl	800cdb4 <HAL_SPI_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800200e:	f001 f821 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000d44 	.word	0x20000d44
 800201c:	40003800 	.word	0x40003800

08002020 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09a      	sub	sp, #104	@ 0x68
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002040:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	222c      	movs	r2, #44	@ 0x2c
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f017 ff6c 	bl	8019f38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002060:	4b43      	ldr	r3, [pc, #268]	@ (8002170 <MX_TIM1_Init+0x150>)
 8002062:	4a44      	ldr	r2, [pc, #272]	@ (8002174 <MX_TIM1_Init+0x154>)
 8002064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002066:	4b42      	ldr	r3, [pc, #264]	@ (8002170 <MX_TIM1_Init+0x150>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b40      	ldr	r3, [pc, #256]	@ (8002170 <MX_TIM1_Init+0x150>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002072:	4b3f      	ldr	r3, [pc, #252]	@ (8002170 <MX_TIM1_Init+0x150>)
 8002074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b3d      	ldr	r3, [pc, #244]	@ (8002170 <MX_TIM1_Init+0x150>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002080:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <MX_TIM1_Init+0x150>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <MX_TIM1_Init+0x150>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800208c:	4838      	ldr	r0, [pc, #224]	@ (8002170 <MX_TIM1_Init+0x150>)
 800208e:	f00a ff3c 	bl	800cf0a <HAL_TIM_Base_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002098:	f000 ffdc 	bl	8003054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80020a6:	4619      	mov	r1, r3
 80020a8:	4831      	ldr	r0, [pc, #196]	@ (8002170 <MX_TIM1_Init+0x150>)
 80020aa:	f00b fa6f 	bl	800d58c <HAL_TIM_ConfigClockSource>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020b4:	f000 ffce 	bl	8003054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020b8:	482d      	ldr	r0, [pc, #180]	@ (8002170 <MX_TIM1_Init+0x150>)
 80020ba:	f00a fff5 	bl	800d0a8 <HAL_TIM_PWM_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020c4:	f000 ffc6 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80020d8:	4619      	mov	r1, r3
 80020da:	4825      	ldr	r0, [pc, #148]	@ (8002170 <MX_TIM1_Init+0x150>)
 80020dc:	f00b fee6 	bl	800deac <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020e6:	f000 ffb5 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ea:	2360      	movs	r3, #96	@ 0x60
 80020ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f2:	2300      	movs	r3, #0
 80020f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f6:	2300      	movs	r3, #0
 80020f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002106:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800210a:	2200      	movs	r2, #0
 800210c:	4619      	mov	r1, r3
 800210e:	4818      	ldr	r0, [pc, #96]	@ (8002170 <MX_TIM1_Init+0x150>)
 8002110:	f00b f928 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800211a:	f000 ff9b 	bl	8003054 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002132:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002136:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002140:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4807      	ldr	r0, [pc, #28]	@ (8002170 <MX_TIM1_Init+0x150>)
 8002154:	f00b ff38 	bl	800dfc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800215e:	f000 ff79 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002162:	4803      	ldr	r0, [pc, #12]	@ (8002170 <MX_TIM1_Init+0x150>)
 8002164:	f001 fdde 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8002168:	bf00      	nop
 800216a:	3768      	adds	r7, #104	@ 0x68
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000da8 	.word	0x20000da8
 8002174:	40010000 	.word	0x40010000

08002178 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	@ 0x38
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002198:	463b      	mov	r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]
 80021a6:	615a      	str	r2, [r3, #20]
 80021a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <MX_TIM2_Init+0xe8>)
 80021ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002260 <MX_TIM2_Init+0xe8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <MX_TIM2_Init+0xe8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021be:	4b28      	ldr	r3, [pc, #160]	@ (8002260 <MX_TIM2_Init+0xe8>)
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c6:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <MX_TIM2_Init+0xe8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021cc:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <MX_TIM2_Init+0xe8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d2:	4823      	ldr	r0, [pc, #140]	@ (8002260 <MX_TIM2_Init+0xe8>)
 80021d4:	f00a fe99 	bl	800cf0a <HAL_TIM_Base_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021de:	f000 ff39 	bl	8003054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ec:	4619      	mov	r1, r3
 80021ee:	481c      	ldr	r0, [pc, #112]	@ (8002260 <MX_TIM2_Init+0xe8>)
 80021f0:	f00b f9cc 	bl	800d58c <HAL_TIM_ConfigClockSource>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80021fa:	f000 ff2b 	bl	8003054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021fe:	4818      	ldr	r0, [pc, #96]	@ (8002260 <MX_TIM2_Init+0xe8>)
 8002200:	f00a ff52 	bl	800d0a8 <HAL_TIM_PWM_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800220a:	f000 ff23 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4810      	ldr	r0, [pc, #64]	@ (8002260 <MX_TIM2_Init+0xe8>)
 800221e:	f00b fe45 	bl	800deac <HAL_TIMEx_MasterConfigSynchronization>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002228:	f000 ff14 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222c:	2360      	movs	r3, #96	@ 0x60
 800222e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223c:	463b      	mov	r3, r7
 800223e:	2200      	movs	r2, #0
 8002240:	4619      	mov	r1, r3
 8002242:	4807      	ldr	r0, [pc, #28]	@ (8002260 <MX_TIM2_Init+0xe8>)
 8002244:	f00b f88e 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800224e:	f000 ff01 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002252:	4803      	ldr	r0, [pc, #12]	@ (8002260 <MX_TIM2_Init+0xe8>)
 8002254:	f001 fd66 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8002258:	bf00      	nop
 800225a:	3738      	adds	r7, #56	@ 0x38
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000df4 	.word	0x20000df4

08002264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08e      	sub	sp, #56	@ 0x38
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002284:	463b      	mov	r3, r7
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]
 8002292:	615a      	str	r2, [r3, #20]
 8002294:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002296:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <MX_TIM3_Init+0xe8>)
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <MX_TIM3_Init+0xec>)
 800229a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800229c:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <MX_TIM3_Init+0xe8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <MX_TIM3_Init+0xe8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022a8:	4b28      	ldr	r3, [pc, #160]	@ (800234c <MX_TIM3_Init+0xe8>)
 80022aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b0:	4b26      	ldr	r3, [pc, #152]	@ (800234c <MX_TIM3_Init+0xe8>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b6:	4b25      	ldr	r3, [pc, #148]	@ (800234c <MX_TIM3_Init+0xe8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022bc:	4823      	ldr	r0, [pc, #140]	@ (800234c <MX_TIM3_Init+0xe8>)
 80022be:	f00a fe24 	bl	800cf0a <HAL_TIM_Base_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022c8:	f000 fec4 	bl	8003054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022d6:	4619      	mov	r1, r3
 80022d8:	481c      	ldr	r0, [pc, #112]	@ (800234c <MX_TIM3_Init+0xe8>)
 80022da:	f00b f957 	bl	800d58c <HAL_TIM_ConfigClockSource>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022e4:	f000 feb6 	bl	8003054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022e8:	4818      	ldr	r0, [pc, #96]	@ (800234c <MX_TIM3_Init+0xe8>)
 80022ea:	f00a fedd 	bl	800d0a8 <HAL_TIM_PWM_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80022f4:	f000 feae 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4811      	ldr	r0, [pc, #68]	@ (800234c <MX_TIM3_Init+0xe8>)
 8002308:	f00b fdd0 	bl	800deac <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002312:	f000 fe9f 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002316:	2360      	movs	r3, #96	@ 0x60
 8002318:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002326:	463b      	mov	r3, r7
 8002328:	2200      	movs	r2, #0
 800232a:	4619      	mov	r1, r3
 800232c:	4807      	ldr	r0, [pc, #28]	@ (800234c <MX_TIM3_Init+0xe8>)
 800232e:	f00b f819 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002338:	f000 fe8c 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800233c:	4803      	ldr	r0, [pc, #12]	@ (800234c <MX_TIM3_Init+0xe8>)
 800233e:	f001 fcf1 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8002342:	bf00      	nop
 8002344:	3738      	adds	r7, #56	@ 0x38
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000e40 	.word	0x20000e40
 8002350:	40000400 	.word	0x40000400

08002354 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	@ 0x38
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002374:	463b      	mov	r3, r7
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	615a      	str	r2, [r3, #20]
 8002384:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002386:	4b2d      	ldr	r3, [pc, #180]	@ (800243c <MX_TIM5_Init+0xe8>)
 8002388:	4a2d      	ldr	r2, [pc, #180]	@ (8002440 <MX_TIM5_Init+0xec>)
 800238a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800238c:	4b2b      	ldr	r3, [pc, #172]	@ (800243c <MX_TIM5_Init+0xe8>)
 800238e:	2200      	movs	r2, #0
 8002390:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002392:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <MX_TIM5_Init+0xe8>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002398:	4b28      	ldr	r3, [pc, #160]	@ (800243c <MX_TIM5_Init+0xe8>)
 800239a:	f04f 32ff 	mov.w	r2, #4294967295
 800239e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a0:	4b26      	ldr	r3, [pc, #152]	@ (800243c <MX_TIM5_Init+0xe8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a6:	4b25      	ldr	r3, [pc, #148]	@ (800243c <MX_TIM5_Init+0xe8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023ac:	4823      	ldr	r0, [pc, #140]	@ (800243c <MX_TIM5_Init+0xe8>)
 80023ae:	f00a fdac 	bl	800cf0a <HAL_TIM_Base_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80023b8:	f000 fe4c 	bl	8003054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023c6:	4619      	mov	r1, r3
 80023c8:	481c      	ldr	r0, [pc, #112]	@ (800243c <MX_TIM5_Init+0xe8>)
 80023ca:	f00b f8df 	bl	800d58c <HAL_TIM_ConfigClockSource>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80023d4:	f000 fe3e 	bl	8003054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023d8:	4818      	ldr	r0, [pc, #96]	@ (800243c <MX_TIM5_Init+0xe8>)
 80023da:	f00a fe65 	bl	800d0a8 <HAL_TIM_PWM_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80023e4:	f000 fe36 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4811      	ldr	r0, [pc, #68]	@ (800243c <MX_TIM5_Init+0xe8>)
 80023f8:	f00b fd58 	bl	800deac <HAL_TIMEx_MasterConfigSynchronization>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002402:	f000 fe27 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002406:	2360      	movs	r3, #96	@ 0x60
 8002408:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002416:	463b      	mov	r3, r7
 8002418:	220c      	movs	r2, #12
 800241a:	4619      	mov	r1, r3
 800241c:	4807      	ldr	r0, [pc, #28]	@ (800243c <MX_TIM5_Init+0xe8>)
 800241e:	f00a ffa1 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002428:	f000 fe14 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800242c:	4803      	ldr	r0, [pc, #12]	@ (800243c <MX_TIM5_Init+0xe8>)
 800242e:	f001 fc79 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8002432:	bf00      	nop
 8002434:	3738      	adds	r7, #56	@ 0x38
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000e8c 	.word	0x20000e8c
 8002440:	40000c00 	.word	0x40000c00

08002444 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 8002464:	4a20      	ldr	r2, [pc, #128]	@ (80024e8 <MX_TIM8_Init+0xa4>)
 8002466:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002468:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 800246a:	2200      	movs	r2, #0
 800246c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002474:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 8002476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800247a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002482:	4b18      	ldr	r3, [pc, #96]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002488:	4b16      	ldr	r3, [pc, #88]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800248e:	4815      	ldr	r0, [pc, #84]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 8002490:	f00a fd3b 	bl	800cf0a <HAL_TIM_Base_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800249a:	f000 fddb 	bl	8003054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4619      	mov	r1, r3
 80024aa:	480e      	ldr	r0, [pc, #56]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 80024ac:	f00b f86e 	bl	800d58c <HAL_TIM_ConfigClockSource>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80024b6:	f000 fdcd 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4806      	ldr	r0, [pc, #24]	@ (80024e4 <MX_TIM8_Init+0xa0>)
 80024cc:	f00b fcee 	bl	800deac <HAL_TIMEx_MasterConfigSynchronization>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80024d6:	f000 fdbd 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80024da:	bf00      	nop
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000ed8 	.word	0x20000ed8
 80024e8:	40010400 	.word	0x40010400

080024ec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	615a      	str	r2, [r3, #20]
 8002502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <MX_TIM12_Init+0x84>)
 8002506:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <MX_TIM12_Init+0x88>)
 8002508:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800250a:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <MX_TIM12_Init+0x84>)
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <MX_TIM12_Init+0x84>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <MX_TIM12_Init+0x84>)
 8002518:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800251c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251e:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <MX_TIM12_Init+0x84>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <MX_TIM12_Init+0x84>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800252a:	4811      	ldr	r0, [pc, #68]	@ (8002570 <MX_TIM12_Init+0x84>)
 800252c:	f00a fdbc 	bl	800d0a8 <HAL_TIM_PWM_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002536:	f000 fd8d 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253a:	2360      	movs	r3, #96	@ 0x60
 800253c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2200      	movs	r2, #0
 800254e:	4619      	mov	r1, r3
 8002550:	4807      	ldr	r0, [pc, #28]	@ (8002570 <MX_TIM12_Init+0x84>)
 8002552:	f00a ff07 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800255c:	f000 fd7a 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002560:	4803      	ldr	r0, [pc, #12]	@ (8002570 <MX_TIM12_Init+0x84>)
 8002562:	f001 fbdf 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8002566:	bf00      	nop
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000f24 	.word	0x20000f24
 8002574:	40001800 	.word	0x40001800

08002578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800257c:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 800257e:	4a15      	ldr	r2, [pc, #84]	@ (80025d4 <MX_USART1_UART_Init+0x5c>)
 8002580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002582:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 8002584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002596:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ae:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ba:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <MX_USART1_UART_Init+0x58>)
 80025bc:	f00b fda0 	bl	800e100 <HAL_UART_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025c6:	f000 fd45 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000f70 	.word	0x20000f70
 80025d4:	40011000 	.word	0x40011000

080025d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025dc:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 80025de:	4a15      	ldr	r2, [pc, #84]	@ (8002634 <MX_USART6_UART_Init+0x5c>)
 80025e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 80025e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 80025fe:	220c      	movs	r2, #12
 8002600:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002608:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800260e:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 8002616:	2200      	movs	r2, #0
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800261a:	4805      	ldr	r0, [pc, #20]	@ (8002630 <MX_USART6_UART_Init+0x58>)
 800261c:	f00b fd70 	bl	800e100 <HAL_UART_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002626:	f000 fd15 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000ff8 	.word	0x20000ff8
 8002634:	40011400 	.word	0x40011400

08002638 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	615a      	str	r2, [r3, #20]
 800264e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002650:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <MX_FMC_Init+0x98>)
 8002652:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <MX_FMC_Init+0x9c>)
 8002654:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <MX_FMC_Init+0x98>)
 8002658:	2200      	movs	r2, #0
 800265a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800265c:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <MX_FMC_Init+0x98>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002662:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <MX_FMC_Init+0x98>)
 8002664:	2204      	movs	r2, #4
 8002666:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <MX_FMC_Init+0x98>)
 800266a:	2210      	movs	r2, #16
 800266c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <MX_FMC_Init+0x98>)
 8002670:	2240      	movs	r2, #64	@ 0x40
 8002672:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002674:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <MX_FMC_Init+0x98>)
 8002676:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800267a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <MX_FMC_Init+0x98>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002682:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <MX_FMC_Init+0x98>)
 8002684:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002688:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <MX_FMC_Init+0x98>)
 800268c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002692:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <MX_FMC_Init+0x98>)
 8002694:	2200      	movs	r2, #0
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002698:	2302      	movs	r3, #2
 800269a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800269c:	2307      	movs	r3, #7
 800269e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80026a0:	2304      	movs	r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80026a4:	2307      	movs	r3, #7
 80026a6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80026a8:	2303      	movs	r3, #3
 80026aa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <MX_FMC_Init+0x98>)
 80026ba:	f00a faeb 	bl	800cc94 <HAL_SDRAM_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80026c4:	f000 fcc6 	bl	8003054 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80026c8:	bf00      	nop
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20001080 	.word	0x20001080
 80026d4:	a0000140 	.word	0xa0000140

080026d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b090      	sub	sp, #64	@ 0x40
 80026dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ee:	4bb0      	ldr	r3, [pc, #704]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4aaf      	ldr	r2, [pc, #700]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80026f4:	f043 0310 	orr.w	r3, r3, #16
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4bad      	ldr	r3, [pc, #692]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002706:	4baa      	ldr	r3, [pc, #680]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4aa9      	ldr	r2, [pc, #676]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 800270c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002710:	6313      	str	r3, [r2, #48]	@ 0x30
 8002712:	4ba7      	ldr	r3, [pc, #668]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	4ba4      	ldr	r3, [pc, #656]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4aa3      	ldr	r2, [pc, #652]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4ba1      	ldr	r3, [pc, #644]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002736:	4b9e      	ldr	r3, [pc, #632]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4a9d      	ldr	r2, [pc, #628]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4b9b      	ldr	r3, [pc, #620]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800274e:	4b98      	ldr	r3, [pc, #608]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a97      	ldr	r2, [pc, #604]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b95      	ldr	r3, [pc, #596]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	4b92      	ldr	r3, [pc, #584]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	4a91      	ldr	r2, [pc, #580]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	@ 0x30
 8002772:	4b8f      	ldr	r3, [pc, #572]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800277e:	4b8c      	ldr	r3, [pc, #560]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a8b      	ldr	r2, [pc, #556]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002784:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b89      	ldr	r3, [pc, #548]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002796:	4b86      	ldr	r3, [pc, #536]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a85      	ldr	r2, [pc, #532]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b83      	ldr	r3, [pc, #524]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80027ae:	4b80      	ldr	r3, [pc, #512]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	4a7f      	ldr	r2, [pc, #508]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ba:	4b7d      	ldr	r3, [pc, #500]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027c6:	4b7a      	ldr	r3, [pc, #488]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	4a79      	ldr	r2, [pc, #484]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027cc:	f043 0320 	orr.w	r3, r3, #32
 80027d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d2:	4b77      	ldr	r3, [pc, #476]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027de:	4b74      	ldr	r3, [pc, #464]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a73      	ldr	r2, [pc, #460]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b71      	ldr	r3, [pc, #452]	@ (80029b0 <MX_GPIO_Init+0x2d8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80027f6:	2201      	movs	r2, #1
 80027f8:	2120      	movs	r1, #32
 80027fa:	486e      	ldr	r0, [pc, #440]	@ (80029b4 <MX_GPIO_Init+0x2dc>)
 80027fc:	f004 fcbe 	bl	800717c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	210c      	movs	r1, #12
 8002804:	486c      	ldr	r0, [pc, #432]	@ (80029b8 <MX_GPIO_Init+0x2e0>)
 8002806:	f004 fcb9 	bl	800717c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800280a:	2201      	movs	r2, #1
 800280c:	2108      	movs	r1, #8
 800280e:	486b      	ldr	r0, [pc, #428]	@ (80029bc <MX_GPIO_Init+0x2e4>)
 8002810:	f004 fcb4 	bl	800717c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002814:	2201      	movs	r2, #1
 8002816:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800281a:	4867      	ldr	r0, [pc, #412]	@ (80029b8 <MX_GPIO_Init+0x2e0>)
 800281c:	f004 fcae 	bl	800717c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002826:	4866      	ldr	r0, [pc, #408]	@ (80029c0 <MX_GPIO_Init+0x2e8>)
 8002828:	f004 fca8 	bl	800717c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800282c:	2200      	movs	r2, #0
 800282e:	21c8      	movs	r1, #200	@ 0xc8
 8002830:	4864      	ldr	r0, [pc, #400]	@ (80029c4 <MX_GPIO_Init+0x2ec>)
 8002832:	f004 fca3 	bl	800717c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002836:	2308      	movs	r3, #8
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283a:	2300      	movs	r3, #0
 800283c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002846:	4619      	mov	r1, r3
 8002848:	485f      	ldr	r0, [pc, #380]	@ (80029c8 <MX_GPIO_Init+0x2f0>)
 800284a:	f004 faeb 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800284e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002852:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002860:	230a      	movs	r3, #10
 8002862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002868:	4619      	mov	r1, r3
 800286a:	4858      	ldr	r0, [pc, #352]	@ (80029cc <MX_GPIO_Init+0x2f4>)
 800286c:	f004 fada 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002876:	2300      	movs	r3, #0
 8002878:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002882:	4619      	mov	r1, r3
 8002884:	4852      	ldr	r0, [pc, #328]	@ (80029d0 <MX_GPIO_Init+0x2f8>)
 8002886:	f004 facd 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800288a:	2340      	movs	r3, #64	@ 0x40
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800288e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002898:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800289c:	4619      	mov	r1, r3
 800289e:	4845      	ldr	r0, [pc, #276]	@ (80029b4 <MX_GPIO_Init+0x2dc>)
 80028a0:	f004 fac0 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80028a4:	2320      	movs	r3, #32
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028b8:	4619      	mov	r1, r3
 80028ba:	483e      	ldr	r0, [pc, #248]	@ (80029b4 <MX_GPIO_Init+0x2dc>)
 80028bc:	f004 fab2 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80028c0:	f241 030c 	movw	r3, #4108	@ 0x100c
 80028c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028d6:	4619      	mov	r1, r3
 80028d8:	4837      	ldr	r0, [pc, #220]	@ (80029b8 <MX_GPIO_Init+0x2e0>)
 80028da:	f004 faa3 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80028de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e4:	2300      	movs	r3, #0
 80028e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028f0:	4619      	mov	r1, r3
 80028f2:	4838      	ldr	r0, [pc, #224]	@ (80029d4 <MX_GPIO_Init+0x2fc>)
 80028f4:	f004 fa96 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80028f8:	2308      	movs	r3, #8
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002908:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800290c:	4619      	mov	r1, r3
 800290e:	482b      	ldr	r0, [pc, #172]	@ (80029bc <MX_GPIO_Init+0x2e4>)
 8002910:	f004 fa88 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002914:	2310      	movs	r3, #16
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002918:	2300      	movs	r3, #0
 800291a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002924:	4619      	mov	r1, r3
 8002926:	4823      	ldr	r0, [pc, #140]	@ (80029b4 <MX_GPIO_Init+0x2dc>)
 8002928:	f004 fa7c 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800292c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002932:	2300      	movs	r3, #0
 8002934:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800293a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800293e:	4619      	mov	r1, r3
 8002940:	481f      	ldr	r0, [pc, #124]	@ (80029c0 <MX_GPIO_Init+0x2e8>)
 8002942:	f004 fa6f 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002946:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800294a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800295c:	4619      	mov	r1, r3
 800295e:	4818      	ldr	r0, [pc, #96]	@ (80029c0 <MX_GPIO_Init+0x2e8>)
 8002960:	f004 fa60 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800296a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800296e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002978:	4619      	mov	r1, r3
 800297a:	480f      	ldr	r0, [pc, #60]	@ (80029b8 <MX_GPIO_Init+0x2e0>)
 800297c:	f004 fa52 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002980:	2310      	movs	r3, #16
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002990:	230a      	movs	r3, #10
 8002992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002998:	4619      	mov	r1, r3
 800299a:	4809      	ldr	r0, [pc, #36]	@ (80029c0 <MX_GPIO_Init+0x2e8>)
 800299c:	f004 fa42 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80029a0:	23c8      	movs	r3, #200	@ 0xc8
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a4:	2301      	movs	r3, #1
 80029a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ac:	e014      	b.n	80029d8 <MX_GPIO_Init+0x300>
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40022800 	.word	0x40022800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40021800 	.word	0x40021800
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40022400 	.word	0x40022400
 80029d4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029e0:	4619      	mov	r1, r3
 80029e2:	4819      	ldr	r0, [pc, #100]	@ (8002a48 <MX_GPIO_Init+0x370>)
 80029e4:	f004 fa1e 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80029e8:	2305      	movs	r3, #5
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80029f8:	230a      	movs	r3, #10
 80029fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a00:	4619      	mov	r1, r3
 8002a02:	4812      	ldr	r0, [pc, #72]	@ (8002a4c <MX_GPIO_Init+0x374>)
 8002a04:	f004 fa0e 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480b      	ldr	r0, [pc, #44]	@ (8002a48 <MX_GPIO_Init+0x370>)
 8002a1c:	f004 fa02 	bl	8006e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002a20:	2328      	movs	r3, #40	@ 0x28
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a30:	230a      	movs	r3, #10
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4805      	ldr	r0, [pc, #20]	@ (8002a50 <MX_GPIO_Init+0x378>)
 8002a3c:	f004 f9f2 	bl	8006e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a40:	bf00      	nop
 8002a42:	3740      	adds	r7, #64	@ 0x40
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021800 	.word	0x40021800
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020000 	.word	0x40020000

08002a54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b094      	sub	sp, #80	@ 0x50
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002a5c:	f016 fe22 	bl	80196a4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화 (TDD 검증된 SDStorage 사용)
  LOG_INFO("🔄 Initializing SD card storage...");
 8002a60:	4991      	ldr	r1, [pc, #580]	@ (8002ca8 <StartDefaultTask+0x254>)
 8002a62:	2001      	movs	r0, #1
 8002a64:	f001 fd8a 	bl	800457c <LOGGER_SendFormatted>
  int sd_result = SDStorage_Init();
 8002a68:	f7fe fb32 	bl	80010d0 <SDStorage_Init>
 8002a6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (sd_result == SDSTORAGE_OK) {
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <StartDefaultTask+0x2a>
    LOG_INFO("✅ SD card initialized successfully");
 8002a74:	498d      	ldr	r1, [pc, #564]	@ (8002cac <StartDefaultTask+0x258>)
 8002a76:	2001      	movs	r0, #1
 8002a78:	f001 fd80 	bl	800457c <LOGGER_SendFormatted>
 8002a7c:	e004      	b.n	8002a88 <StartDefaultTask+0x34>
  } else {
    LOG_WARN("⚠️ SD card init failed (code: %d)", sd_result);
 8002a7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a80:	498b      	ldr	r1, [pc, #556]	@ (8002cb0 <StartDefaultTask+0x25c>)
 8002a82:	2002      	movs	r0, #2
 8002a84:	f001 fd7a 	bl	800457c <LOGGER_SendFormatted>
  }
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8002a88:	498a      	ldr	r1, [pc, #552]	@ (8002cb4 <StartDefaultTask+0x260>)
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f001 fd76 	bl	800457c <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8002a90:	4b89      	ldr	r3, [pc, #548]	@ (8002cb8 <StartDefaultTask+0x264>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a89      	ldr	r2, [pc, #548]	@ (8002cbc <StartDefaultTask+0x268>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0c9b      	lsrs	r3, r3, #18
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4988      	ldr	r1, [pc, #544]	@ (8002cc0 <StartDefaultTask+0x26c>)
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f001 fd6b 	bl	800457c <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8002aa6:	4987      	ldr	r1, [pc, #540]	@ (8002cc4 <StartDefaultTask+0x270>)
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f001 fd67 	bl	800457c <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8002aae:	4986      	ldr	r1, [pc, #536]	@ (8002cc8 <StartDefaultTask+0x274>)
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f001 fd63 	bl	800457c <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8002ab6:	4985      	ldr	r1, [pc, #532]	@ (8002ccc <StartDefaultTask+0x278>)
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f001 fd5f 	bl	800457c <LOGGER_SendFormatted>
  
  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 8002abe:	4984      	ldr	r1, [pc, #528]	@ (8002cd0 <StartDefaultTask+0x27c>)
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f001 fd5b 	bl	800457c <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 8002ac6:	4883      	ldr	r0, [pc, #524]	@ (8002cd4 <StartDefaultTask+0x280>)
 8002ac8:	f001 fdf4 	bl	80046b4 <UART_Connect>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (uart_status == UART_STATUS_OK) {
 8002ad2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <StartDefaultTask+0x9a>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 8002ada:	497f      	ldr	r1, [pc, #508]	@ (8002cd8 <StartDefaultTask+0x284>)
 8002adc:	2001      	movs	r0, #1
 8002ade:	f001 fd4d 	bl	800457c <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 8002ae2:	f001 febd 	bl	8004860 <UART_IsConnected>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d036      	beq.n	8002b5a <StartDefaultTask+0x106>
 8002aec:	e00b      	b.n	8002b06 <StartDefaultTask+0xb2>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8002aee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002af2:	461a      	mov	r2, r3
 8002af4:	4979      	ldr	r1, [pc, #484]	@ (8002cdc <StartDefaultTask+0x288>)
 8002af6:	2003      	movs	r0, #3
 8002af8:	f001 fd40 	bl	800457c <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002afc:	4978      	ldr	r1, [pc, #480]	@ (8002ce0 <StartDefaultTask+0x28c>)
 8002afe:	2003      	movs	r0, #3
 8002b00:	f001 fd3c 	bl	800457c <LOGGER_SendFormatted>
    goto idle_loop;
 8002b04:	e0b9      	b.n	8002c7a <StartDefaultTask+0x226>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 8002b06:	4977      	ldr	r1, [pc, #476]	@ (8002ce4 <StartDefaultTask+0x290>)
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f001 fd37 	bl	800457c <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8002b0e:	4976      	ldr	r1, [pc, #472]	@ (8002ce8 <StartDefaultTask+0x294>)
 8002b10:	2001      	movs	r0, #1
 8002b12:	f001 fd33 	bl	800457c <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 8002b16:	4975      	ldr	r1, [pc, #468]	@ (8002cec <StartDefaultTask+0x298>)
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f001 fd2f 	bl	800457c <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8002b1e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002b22:	f013 fe21 	bl	8016768 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 8002b26:	f107 0308 	add.w	r3, r7, #8
 8002b2a:	4971      	ldr	r1, [pc, #452]	@ (8002cf0 <StartDefaultTask+0x29c>)
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fe33 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 8002b32:	4970      	ldr	r1, [pc, #448]	@ (8002cf4 <StartDefaultTask+0x2a0>)
 8002b34:	2001      	movs	r0, #1
 8002b36:	f001 fd21 	bl	800457c <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	460b      	mov	r3, r1
 8002b44:	496c      	ldr	r1, [pc, #432]	@ (8002cf8 <StartDefaultTask+0x2a4>)
 8002b46:	2001      	movs	r0, #1
 8002b48:	f001 fd18 	bl	800457c <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // LoRa 로그를 SD카드에 저장하기 시작
  LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8002b4c:	496b      	ldr	r1, [pc, #428]	@ (8002cfc <StartDefaultTask+0x2a8>)
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f001 fd14 	bl	800457c <LOGGER_SendFormatted>
  
  // SD카드 로그 파일 생성
  SDStorage_CreateNewLogFile();
 8002b54:	f7fe fb8e 	bl	8001274 <SDStorage_CreateNewLogFile>
 8002b58:	e008      	b.n	8002b6c <StartDefaultTask+0x118>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 8002b5a:	4969      	ldr	r1, [pc, #420]	@ (8002d00 <StartDefaultTask+0x2ac>)
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f001 fd0d 	bl	800457c <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002b62:	495f      	ldr	r1, [pc, #380]	@ (8002ce0 <StartDefaultTask+0x28c>)
 8002b64:	2003      	movs	r0, #3
 8002b66:	f001 fd09 	bl	800457c <LOGGER_SendFormatted>
    goto idle_loop;
 8002b6a:	e086      	b.n	8002c7a <StartDefaultTask+0x226>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (lora_new_response) {
 8002b70:	4b64      	ldr	r3, [pc, #400]	@ (8002d04 <StartDefaultTask+0x2b0>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <StartDefaultTask+0x13a>
      rx_data = lora_rx_response;
 8002b7a:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <StartDefaultTask+0x2b4>)
 8002b7c:	647b      	str	r3, [r7, #68]	@ 0x44
      lora_new_response = false; // 플래그 클리어
 8002b7e:	4b61      	ldr	r3, [pc, #388]	@ (8002d04 <StartDefaultTask+0x2b0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8002b84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b86:	4961      	ldr	r1, [pc, #388]	@ (8002d0c <StartDefaultTask+0x2b8>)
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f001 fcf7 	bl	800457c <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fe47 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 8002b9a:	7a3b      	ldrb	r3, [r7, #8]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	460a      	mov	r2, r1
 8002ba8:	4959      	ldr	r1, [pc, #356]	@ (8002d10 <StartDefaultTask+0x2bc>)
 8002baa:	2000      	movs	r0, #0
 8002bac:	f001 fce6 	bl	800457c <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 8002bb0:	7a3b      	ldrb	r3, [r7, #8]
 8002bb2:	2b0a      	cmp	r3, #10
 8002bb4:	d85b      	bhi.n	8002c6e <StartDefaultTask+0x21a>
 8002bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bbc <StartDefaultTask+0x168>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002be9 	.word	0x08002be9
 8002bc0:	08002bf3 	.word	0x08002bf3
 8002bc4:	08002c0b 	.word	0x08002c0b
 8002bc8:	08002c23 	.word	0x08002c23
 8002bcc:	08002c2d 	.word	0x08002c2d
 8002bd0:	08002c23 	.word	0x08002c23
 8002bd4:	08002c2d 	.word	0x08002c2d
 8002bd8:	08002c37 	.word	0x08002c37
 8002bdc:	08002c4d 	.word	0x08002c4d
 8002be0:	08002c57 	.word	0x08002c57
 8002be4:	08002c57 	.word	0x08002c57
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 8002be8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bec:	f013 fdbc 	bl	8016768 <osDelay>
        break;
 8002bf0:	e042      	b.n	8002c78 <StartDefaultTask+0x224>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4946      	ldr	r1, [pc, #280]	@ (8002d14 <StartDefaultTask+0x2c0>)
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f001 fcbe 	bl	800457c <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8002c00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c04:	f013 fdb0 	bl	8016768 <osDelay>
        break;
 8002c08:	e036      	b.n	8002c78 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4941      	ldr	r1, [pc, #260]	@ (8002d18 <StartDefaultTask+0x2c4>)
 8002c12:	2000      	movs	r0, #0
 8002c14:	f001 fcb2 	bl	800457c <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8002c18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c1c:	f013 fda4 	bl	8016768 <osDelay>
        break;
 8002c20:	e02a      	b.n	8002c78 <StartDefaultTask+0x224>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 8002c22:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c26:	f013 fd9f 	bl	8016768 <osDelay>
        break;
 8002c2a:	e025      	b.n	8002c78 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8002c2c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002c30:	f013 fd9a 	bl	8016768 <osDelay>
        break;
 8002c34:	e020      	b.n	8002c78 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4938      	ldr	r1, [pc, #224]	@ (8002d1c <StartDefaultTask+0x2c8>)
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f001 fc9d 	bl	800457c <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8002c42:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002c46:	f013 fd8f 	bl	8016768 <osDelay>
        break;
 8002c4a:	e015      	b.n	8002c78 <StartDefaultTask+0x224>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8002c4c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002c50:	f013 fd8a 	bl	8016768 <osDelay>
        break;
 8002c54:	e010      	b.n	8002c78 <StartDefaultTask+0x224>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8002c56:	7a3b      	ldrb	r3, [r7, #8]
 8002c58:	2b09      	cmp	r3, #9
 8002c5a:	d101      	bne.n	8002c60 <StartDefaultTask+0x20c>
 8002c5c:	4b30      	ldr	r3, [pc, #192]	@ (8002d20 <StartDefaultTask+0x2cc>)
 8002c5e:	e000      	b.n	8002c62 <StartDefaultTask+0x20e>
 8002c60:	4b30      	ldr	r3, [pc, #192]	@ (8002d24 <StartDefaultTask+0x2d0>)
 8002c62:	461a      	mov	r2, r3
 8002c64:	4930      	ldr	r1, [pc, #192]	@ (8002d28 <StartDefaultTask+0x2d4>)
 8002c66:	2001      	movs	r0, #1
 8002c68:	f001 fc88 	bl	800457c <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8002c6c:	e005      	b.n	8002c7a <StartDefaultTask+0x226>
      default:
        osDelay(1000);
 8002c6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c72:	f013 fd79 	bl	8016768 <osDelay>
        break;
 8002c76:	bf00      	nop
  {
 8002c78:	e778      	b.n	8002b6c <StartDefaultTask+0x118>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8002c7a:	492c      	ldr	r1, [pc, #176]	@ (8002d2c <StartDefaultTask+0x2d8>)
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f001 fc7d 	bl	800457c <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	643b      	str	r3, [r7, #64]	@ 0x40
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8002c86:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002c8a:	f013 fd6d 	bl	8016768 <osDelay>
    idle_counter++;
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c90:	3301      	adds	r3, #1
 8002c92:	643b      	str	r3, [r7, #64]	@ 0x40
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8002c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4925      	ldr	r1, [pc, #148]	@ (8002d30 <StartDefaultTask+0x2dc>)
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f001 fc6d 	bl	800457c <LOGGER_SendFormatted>
    osDelay(30000);
 8002ca2:	bf00      	nop
 8002ca4:	e7ef      	b.n	8002c86 <StartDefaultTask+0x232>
 8002ca6:	bf00      	nop
 8002ca8:	0801b358 	.word	0x0801b358
 8002cac:	0801b380 	.word	0x0801b380
 8002cb0:	0801b3a8 	.word	0x0801b3a8
 8002cb4:	0801b3d0 	.word	0x0801b3d0
 8002cb8:	20000014 	.word	0x20000014
 8002cbc:	431bde83 	.word	0x431bde83
 8002cc0:	0801b3fc 	.word	0x0801b3fc
 8002cc4:	0801b414 	.word	0x0801b414
 8002cc8:	0801b43c 	.word	0x0801b43c
 8002ccc:	0801b488 	.word	0x0801b488
 8002cd0:	0801b4c4 	.word	0x0801b4c4
 8002cd4:	0801b4f0 	.word	0x0801b4f0
 8002cd8:	0801b4f8 	.word	0x0801b4f8
 8002cdc:	0801b524 	.word	0x0801b524
 8002ce0:	0801b55c 	.word	0x0801b55c
 8002ce4:	0801b5a0 	.word	0x0801b5a0
 8002ce8:	0801b5fc 	.word	0x0801b5fc
 8002cec:	0801b634 	.word	0x0801b634
 8002cf0:	0801b674 	.word	0x0801b674
 8002cf4:	0801b67c 	.word	0x0801b67c
 8002cf8:	0801b698 	.word	0x0801b698
 8002cfc:	0801b6c8 	.word	0x0801b6c8
 8002d00:	0801b5d0 	.word	0x0801b5d0
 8002d04:	200012c0 	.word	0x200012c0
 8002d08:	200010c0 	.word	0x200010c0
 8002d0c:	0801b700 	.word	0x0801b700
 8002d10:	0801b730 	.word	0x0801b730
 8002d14:	0801b75c 	.word	0x0801b75c
 8002d18:	0801b784 	.word	0x0801b784
 8002d1c:	0801b7b8 	.word	0x0801b7b8
 8002d20:	0801b7e8 	.word	0x0801b7e8
 8002d24:	0801b7f0 	.word	0x0801b7f0
 8002d28:	0801b7f8 	.word	0x0801b7f8
 8002d2c:	0801b830 	.word	0x0801b830
 8002d30:	0801b858 	.word	0x0801b858

08002d34 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002d3a:	af02      	add	r7, sp, #8
 8002d3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002d40:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002d44:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8002d46:	49a4      	ldr	r1, [pc, #656]	@ (8002fd8 <StartReceiveTask+0x2a4>)
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f001 fc17 	bl	800457c <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8002d4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d52:	f013 fd09 	bl	8016768 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8002d56:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002d5a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8002d62:	f107 0208 	add.w	r2, r7, #8
 8002d66:	f107 030c 	add.w	r3, r7, #12
 8002d6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 fd1c 	bl	80047ac <UART_Receive>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8002d7a:	4b98      	ldr	r3, [pc, #608]	@ (8002fdc <StartReceiveTask+0x2a8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a96      	ldr	r2, [pc, #600]	@ (8002fdc <StartReceiveTask+0x2a8>)
 8002d82:	6013      	str	r3, [r2, #0]
    if (debug_counter % 200 == 0 && status != UART_STATUS_TIMEOUT) {  // 10초마다, 타임아웃 제외
 8002d84:	4b95      	ldr	r3, [pc, #596]	@ (8002fdc <StartReceiveTask+0x2a8>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b95      	ldr	r3, [pc, #596]	@ (8002fe0 <StartReceiveTask+0x2ac>)
 8002d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	21c8      	movs	r1, #200	@ 0xc8
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <StartReceiveTask+0x96>
 8002d9c:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d012      	beq.n	8002dca <StartReceiveTask+0x96>
      LOG_INFO("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8002da4:	4b8d      	ldr	r3, [pc, #564]	@ (8002fdc <StartReceiveTask+0x2a8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8d      	ldr	r2, [pc, #564]	@ (8002fe0 <StartReceiveTask+0x2ac>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	099a      	lsrs	r2, r3, #6
 8002db0:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8002db4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002db8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4988      	ldr	r1, [pc, #544]	@ (8002fe4 <StartReceiveTask+0x2b0>)
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f001 fbd9 	bl	800457c <LOGGER_SendFormatted>
               debug_counter / 200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8002dca:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 80fd 	bne.w	8002fce <StartReceiveTask+0x29a>
 8002dd4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002dd8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f340 80f5 	ble.w	8002fce <StartReceiveTask+0x29a>
      // 수신 완료 - TDD ResponseHandler로 분석
      LOG_INFO("📥 RECV: '%s' (%d bytes)", local_buffer, local_bytes_received);
 8002de4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002de8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f107 020c 	add.w	r2, r7, #12
 8002df2:	497d      	ldr	r1, [pc, #500]	@ (8002fe8 <StartReceiveTask+0x2b4>)
 8002df4:	2001      	movs	r0, #1
 8002df6:	f001 fbc1 	bl	800457c <LOGGER_SendFormatted>
      
      // TDD ResponseHandler를 사용하여 응답 분석
      if (is_response_ok(local_buffer)) {
 8002dfa:	f107 030c 	add.w	r3, r7, #12
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f824 	bl	8000e4c <is_response_ok>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <StartReceiveTask+0xe0>
        LOG_INFO("✅ OK response");
 8002e0a:	4978      	ldr	r1, [pc, #480]	@ (8002fec <StartReceiveTask+0x2b8>)
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f001 fbb5 	bl	800457c <LOGGER_SendFormatted>
 8002e12:	e04a      	b.n	8002eaa <StartReceiveTask+0x176>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	4975      	ldr	r1, [pc, #468]	@ (8002ff0 <StartReceiveTask+0x2bc>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f017 f8a7 	bl	8019f6e <strstr>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <StartReceiveTask+0xfc>
        LOG_INFO("✅ JOIN response");
 8002e26:	4973      	ldr	r1, [pc, #460]	@ (8002ff4 <StartReceiveTask+0x2c0>)
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f001 fba7 	bl	800457c <LOGGER_SendFormatted>
 8002e2e:	e03c      	b.n	8002eaa <StartReceiveTask+0x176>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4970      	ldr	r1, [pc, #448]	@ (8002ff8 <StartReceiveTask+0x2c4>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f017 f899 	bl	8019f6e <strstr>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <StartReceiveTask+0x118>
        LOG_INFO("📡 LoRa module boot message (ignored)");
 8002e42:	496e      	ldr	r1, [pc, #440]	@ (8002ffc <StartReceiveTask+0x2c8>)
 8002e44:	2001      	movs	r0, #1
 8002e46:	f001 fb99 	bl	800457c <LOGGER_SendFormatted>
 8002e4a:	e02e      	b.n	8002eaa <StartReceiveTask+0x176>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe f8e7 	bl	8001024 <ResponseHandler_ParseSendResponse>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        switch (response_type) {
 8002e5c:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d822      	bhi.n	8002eaa <StartReceiveTask+0x176>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <StartReceiveTask+0x138>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e87 	.word	0x08002e87
 8002e74:	08002e91 	.word	0x08002e91
 8002e78:	08002e9b 	.word	0x08002e9b
          case RESPONSE_OK:
            LOG_INFO("✅ OK");
 8002e7c:	4960      	ldr	r1, [pc, #384]	@ (8003000 <StartReceiveTask+0x2cc>)
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f001 fb7c 	bl	800457c <LOGGER_SendFormatted>
            break;
 8002e84:	e011      	b.n	8002eaa <StartReceiveTask+0x176>
          case RESPONSE_ERROR:
            LOG_WARN("⚠️ ERROR");
 8002e86:	495f      	ldr	r1, [pc, #380]	@ (8003004 <StartReceiveTask+0x2d0>)
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f001 fb77 	bl	800457c <LOGGER_SendFormatted>
            break;
 8002e8e:	e00c      	b.n	8002eaa <StartReceiveTask+0x176>
          case RESPONSE_TIMEOUT:
            LOG_WARN("⚠️ TIMEOUT");
 8002e90:	495d      	ldr	r1, [pc, #372]	@ (8003008 <StartReceiveTask+0x2d4>)
 8002e92:	2002      	movs	r0, #2
 8002e94:	f001 fb72 	bl	800457c <LOGGER_SendFormatted>
            break;
 8002e98:	e007      	b.n	8002eaa <StartReceiveTask+0x176>
          case RESPONSE_UNKNOWN:
            LOG_INFO("❓ UNKNOWN format: %.20s...", local_buffer);  // 처음 20자만 표시
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	495a      	ldr	r1, [pc, #360]	@ (800300c <StartReceiveTask+0x2d8>)
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f001 fb6a 	bl	800457c <LOGGER_SendFormatted>
            break;
 8002ea8:	bf00      	nop
        }
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8002eaa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002eae:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4854      	ldr	r0, [pc, #336]	@ (8003010 <StartReceiveTask+0x2dc>)
 8002ebe:	f017 f8a9 	bl	801a014 <memcpy>
      rx_bytes_received = local_bytes_received;
 8002ec2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002ec6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a51      	ldr	r2, [pc, #324]	@ (8003014 <StartReceiveTask+0x2e0>)
 8002ece:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd ffb6 	bl	8000e4c <is_response_ok>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <StartReceiveTask+0x1ba>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8002eec:	e03f      	b.n	8002f6e <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	493f      	ldr	r1, [pc, #252]	@ (8002ff0 <StartReceiveTask+0x2bc>)
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f017 f83a 	bl	8019f6e <strstr>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <StartReceiveTask+0x1d4>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8002f06:	e032      	b.n	8002f6e <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	4942      	ldr	r1, [pc, #264]	@ (8003018 <StartReceiveTask+0x2e4>)
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f017 f82d 	bl	8019f6e <strstr>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <StartReceiveTask+0x1ee>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8002f20:	e025      	b.n	8002f6e <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	4934      	ldr	r1, [pc, #208]	@ (8002ff8 <StartReceiveTask+0x2c4>)
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f017 f820 	bl	8019f6e <strstr>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d108      	bne.n	8002f46 <StartReceiveTask+0x212>
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	4938      	ldr	r1, [pc, #224]	@ (800301c <StartReceiveTask+0x2e8>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f017 f817 	bl	8019f6e <strstr>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d004      	beq.n	8002f50 <StartReceiveTask+0x21c>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8002f46:	4936      	ldr	r1, [pc, #216]	@ (8003020 <StartReceiveTask+0x2ec>)
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f001 fb17 	bl	800457c <LOGGER_SendFormatted>
 8002f4e:	e00e      	b.n	8002f6e <StartReceiveTask+0x23a>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe f865 	bl	8001024 <ResponseHandler_ParseSendResponse>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (response_type != RESPONSE_UNKNOWN) {
 8002f60:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d002      	beq.n	8002f6e <StartReceiveTask+0x23a>
          is_lora_command_response = true;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8002f6e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01d      	beq.n	8002fb2 <StartReceiveTask+0x27e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8002f76:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f7a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	4619      	mov	r1, r3
 8002f88:	4826      	ldr	r0, [pc, #152]	@ (8003024 <StartReceiveTask+0x2f0>)
 8002f8a:	f017 f843 	bl	801a014 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8002f8e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f92:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	@ (8003024 <StartReceiveTask+0x2f0>)
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8002f9e:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <StartReceiveTask+0x2f4>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8002fa4:	f107 030c 	add.w	r3, r7, #12
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4920      	ldr	r1, [pc, #128]	@ (800302c <StartReceiveTask+0x2f8>)
 8002fac:	2000      	movs	r0, #0
 8002fae:	f001 fae5 	bl	800457c <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f016 ffbb 	bl	8019f38 <memset>
      local_bytes_received = 0;
 8002fc2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002fc6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8002fce:	2032      	movs	r0, #50	@ 0x32
 8002fd0:	f013 fbca 	bl	8016768 <osDelay>
  {
 8002fd4:	e6c5      	b.n	8002d62 <StartReceiveTask+0x2e>
 8002fd6:	bf00      	nop
 8002fd8:	0801b888 	.word	0x0801b888
 8002fdc:	20001330 	.word	0x20001330
 8002fe0:	51eb851f 	.word	0x51eb851f
 8002fe4:	0801b8b0 	.word	0x0801b8b0
 8002fe8:	0801b8e4 	.word	0x0801b8e4
 8002fec:	0801b900 	.word	0x0801b900
 8002ff0:	0801b910 	.word	0x0801b910
 8002ff4:	0801b91c 	.word	0x0801b91c
 8002ff8:	0801b930 	.word	0x0801b930
 8002ffc:	0801b93c 	.word	0x0801b93c
 8003000:	0801b964 	.word	0x0801b964
 8003004:	0801b96c 	.word	0x0801b96c
 8003008:	0801b97c 	.word	0x0801b97c
 800300c:	0801b98c 	.word	0x0801b98c
 8003010:	20001394 	.word	0x20001394
 8003014:	200010bc 	.word	0x200010bc
 8003018:	0801b9ac 	.word	0x0801b9ac
 800301c:	0801b9b4 	.word	0x0801b9b4
 8003020:	0801b9c4 	.word	0x0801b9c4
 8003024:	200010c0 	.word	0x200010c0
 8003028:	200012c0 	.word	0x200012c0
 800302c:	0801ba00 	.word	0x0801ba00

08003030 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003042:	f002 f817 	bl	8005074 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40001000 	.word	0x40001000

08003054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003058:	b672      	cpsid	i
}
 800305a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <Error_Handler+0x8>

08003060 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <MX_DMA_Init+0x48>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a0f      	ldr	r2, [pc, #60]	@ (80030a8 <MX_DMA_Init+0x48>)
 800306c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b0d      	ldr	r3, [pc, #52]	@ (80030a8 <MX_DMA_Init+0x48>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2105      	movs	r1, #5
 8003082:	2039      	movs	r0, #57	@ 0x39
 8003084:	f002 fb8a 	bl	800579c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003088:	2039      	movs	r0, #57	@ 0x39
 800308a:	f002 fba3 	bl	80057d4 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2105      	movs	r1, #5
 8003092:	2047      	movs	r0, #71	@ 0x47
 8003094:	f002 fb82 	bl	800579c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003098:	2047      	movs	r0, #71	@ 0x47
 800309a:	f002 fb9b 	bl	80057d4 <HAL_NVIC_EnableIRQ>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800

080030ac <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 80030b0:	4b18      	ldr	r3, [pc, #96]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030b2:	4a19      	ldr	r2, [pc, #100]	@ (8003118 <MX_USART6_DMA_Init+0x6c>)
 80030b4:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030b6:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030b8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80030bc:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030be:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c4:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030ca:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030d0:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d2:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030da:	2200      	movs	r2, #0
 80030dc:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030ea:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80030f2:	4808      	ldr	r0, [pc, #32]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 80030f4:	f002 fce8 	bl	8005ac8 <HAL_DMA_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_USART6_DMA_Init+0x56>
  {
    Error_Handler();
 80030fe:	f7ff ffa9 	bl	8003054 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003102:	4b06      	ldr	r3, [pc, #24]	@ (800311c <MX_USART6_DMA_Init+0x70>)
 8003104:	4a03      	ldr	r2, [pc, #12]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 8003106:	675a      	str	r2, [r3, #116]	@ 0x74
 8003108:	4b02      	ldr	r3, [pc, #8]	@ (8003114 <MX_USART6_DMA_Init+0x68>)
 800310a:	4a04      	ldr	r2, [pc, #16]	@ (800311c <MX_USART6_DMA_Init+0x70>)
 800310c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200012c4 	.word	0x200012c4
 8003118:	40026428 	.word	0x40026428
 800311c:	20000ff8 	.word	0x20000ff8

08003120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_MspInit+0x4c>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	4a10      	ldr	r2, [pc, #64]	@ (800316c <HAL_MspInit+0x4c>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	@ 0x40
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_MspInit+0x4c>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_MspInit+0x4c>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <HAL_MspInit+0x4c>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003148:	6453      	str	r3, [r2, #68]	@ 0x44
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_MspInit+0x4c>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	210f      	movs	r1, #15
 800315a:	f06f 0001 	mvn.w	r0, #1
 800315e:	f002 fb1d 	bl	800579c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	@ 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <HAL_ADC_MspInit+0xa4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d13c      	bne.n	800320c <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003192:	4b21      	ldr	r3, [pc, #132]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 8003198:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800319c:	6453      	str	r3, [r2, #68]	@ 0x44
 800319e:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 80031b0:	f043 0320 	orr.w	r3, r3, #32
 80031b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b6:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4a14      	ldr	r2, [pc, #80]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ce:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <HAL_ADC_MspInit+0xa8>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80031da:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80031de:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031e0:	2303      	movs	r3, #3
 80031e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4619      	mov	r1, r3
 80031ee:	480b      	ldr	r0, [pc, #44]	@ (800321c <HAL_ADC_MspInit+0xac>)
 80031f0:	f003 fe18 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80031f4:	2301      	movs	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031f8:	2303      	movs	r3, #3
 80031fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	4619      	mov	r1, r3
 8003206:	4806      	ldr	r0, [pc, #24]	@ (8003220 <HAL_ADC_MspInit+0xb0>)
 8003208:	f003 fe0c 	bl	8006e24 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 800320c:	bf00      	nop
 800320e:	3728      	adds	r7, #40	@ 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40012200 	.word	0x40012200
 8003218:	40023800 	.word	0x40023800
 800321c:	40021400 	.word	0x40021400
 8003220:	40020000 	.word	0x40020000

08003224 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <HAL_CRC_MspInit+0x38>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10b      	bne.n	800324e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <HAL_CRC_MspInit+0x3c>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <HAL_CRC_MspInit+0x3c>)
 800323c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003240:	6313      	str	r3, [r2, #48]	@ 0x30
 8003242:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <HAL_CRC_MspInit+0x3c>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40023000 	.word	0x40023000
 8003260:	40023800 	.word	0x40023800

08003264 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08e      	sub	sp, #56	@ 0x38
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a50      	ldr	r2, [pc, #320]	@ (80033c4 <HAL_DCMI_MspInit+0x160>)
 8003282:	4293      	cmp	r3, r2
 8003284:	f040 809a 	bne.w	80033bc <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003288:	4b4f      	ldr	r3, [pc, #316]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 800328a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328c:	4a4e      	ldr	r2, [pc, #312]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6353      	str	r3, [r2, #52]	@ 0x34
 8003294:	4b4c      	ldr	r3, [pc, #304]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 8003296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	623b      	str	r3, [r7, #32]
 800329e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032a0:	4b49      	ldr	r3, [pc, #292]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	4a48      	ldr	r2, [pc, #288]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032a6:	f043 0310 	orr.w	r3, r3, #16
 80032aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ac:	4b46      	ldr	r3, [pc, #280]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b8:	4b43      	ldr	r3, [pc, #268]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	4a42      	ldr	r2, [pc, #264]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032be:	f043 0308 	orr.w	r3, r3, #8
 80032c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c4:	4b40      	ldr	r3, [pc, #256]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032d0:	4b3d      	ldr	r3, [pc, #244]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	4a3c      	ldr	r2, [pc, #240]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032da:	6313      	str	r3, [r2, #48]	@ 0x30
 80032dc:	4b3a      	ldr	r3, [pc, #232]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e8:	4b37      	ldr	r3, [pc, #220]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	4a36      	ldr	r2, [pc, #216]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f4:	4b34      	ldr	r3, [pc, #208]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003300:	4b31      	ldr	r3, [pc, #196]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	4a30      	ldr	r2, [pc, #192]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6313      	str	r3, [r2, #48]	@ 0x30
 800330c:	4b2e      	ldr	r3, [pc, #184]	@ (80033c8 <HAL_DCMI_MspInit+0x164>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003318:	2360      	movs	r3, #96	@ 0x60
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003324:	2300      	movs	r3, #0
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003328:	230d      	movs	r3, #13
 800332a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800332c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003330:	4619      	mov	r1, r3
 8003332:	4826      	ldr	r0, [pc, #152]	@ (80033cc <HAL_DCMI_MspInit+0x168>)
 8003334:	f003 fd76 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003338:	2308      	movs	r3, #8
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	2300      	movs	r3, #0
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003348:	230d      	movs	r3, #13
 800334a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800334c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003350:	4619      	mov	r1, r3
 8003352:	481f      	ldr	r0, [pc, #124]	@ (80033d0 <HAL_DCMI_MspInit+0x16c>)
 8003354:	f003 fd66 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003358:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335e:	2302      	movs	r3, #2
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800336a:	230d      	movs	r3, #13
 800336c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800336e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003372:	4619      	mov	r1, r3
 8003374:	4817      	ldr	r0, [pc, #92]	@ (80033d4 <HAL_DCMI_MspInit+0x170>)
 8003376:	f003 fd55 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800337a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003388:	2300      	movs	r3, #0
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800338c:	230d      	movs	r3, #13
 800338e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003394:	4619      	mov	r1, r3
 8003396:	4810      	ldr	r0, [pc, #64]	@ (80033d8 <HAL_DCMI_MspInit+0x174>)
 8003398:	f003 fd44 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800339c:	2350      	movs	r3, #80	@ 0x50
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80033ac:	230d      	movs	r3, #13
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033b4:	4619      	mov	r1, r3
 80033b6:	4809      	ldr	r0, [pc, #36]	@ (80033dc <HAL_DCMI_MspInit+0x178>)
 80033b8:	f003 fd34 	bl	8006e24 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80033bc:	bf00      	nop
 80033be:	3738      	adds	r7, #56	@ 0x38
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	50050000 	.word	0x50050000
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021800 	.word	0x40021800
 80033d8:	40021c00 	.word	0x40021c00
 80033dc:	40020000 	.word	0x40020000

080033e0 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <HAL_DMA2D_MspInit+0x44>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d113      	bne.n	800341a <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_DMA2D_MspInit+0x48>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003428 <HAL_DMA2D_MspInit+0x48>)
 80033f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_DMA2D_MspInit+0x48>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800340a:	2200      	movs	r2, #0
 800340c:	2105      	movs	r1, #5
 800340e:	205a      	movs	r0, #90	@ 0x5a
 8003410:	f002 f9c4 	bl	800579c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003414:	205a      	movs	r0, #90	@ 0x5a
 8003416:	f002 f9dd 	bl	80057d4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	4002b000 	.word	0x4002b000
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08e      	sub	sp, #56	@ 0x38
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a3f      	ldr	r2, [pc, #252]	@ (8003548 <HAL_ETH_MspInit+0x11c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d178      	bne.n	8003540 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800344e:	4b3f      	ldr	r3, [pc, #252]	@ (800354c <HAL_ETH_MspInit+0x120>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	4a3e      	ldr	r2, [pc, #248]	@ (800354c <HAL_ETH_MspInit+0x120>)
 8003454:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003458:	6313      	str	r3, [r2, #48]	@ 0x30
 800345a:	4b3c      	ldr	r3, [pc, #240]	@ (800354c <HAL_ETH_MspInit+0x120>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	623b      	str	r3, [r7, #32]
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	4b39      	ldr	r3, [pc, #228]	@ (800354c <HAL_ETH_MspInit+0x120>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4a38      	ldr	r2, [pc, #224]	@ (800354c <HAL_ETH_MspInit+0x120>)
 800346c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003470:	6313      	str	r3, [r2, #48]	@ 0x30
 8003472:	4b36      	ldr	r3, [pc, #216]	@ (800354c <HAL_ETH_MspInit+0x120>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4b33      	ldr	r3, [pc, #204]	@ (800354c <HAL_ETH_MspInit+0x120>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	4a32      	ldr	r2, [pc, #200]	@ (800354c <HAL_ETH_MspInit+0x120>)
 8003484:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003488:	6313      	str	r3, [r2, #48]	@ 0x30
 800348a:	4b30      	ldr	r3, [pc, #192]	@ (800354c <HAL_ETH_MspInit+0x120>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003496:	4b2d      	ldr	r3, [pc, #180]	@ (800354c <HAL_ETH_MspInit+0x120>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	4a2c      	ldr	r2, [pc, #176]	@ (800354c <HAL_ETH_MspInit+0x120>)
 800349c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a2:	4b2a      	ldr	r3, [pc, #168]	@ (800354c <HAL_ETH_MspInit+0x120>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	4b27      	ldr	r3, [pc, #156]	@ (800354c <HAL_ETH_MspInit+0x120>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	4a26      	ldr	r2, [pc, #152]	@ (800354c <HAL_ETH_MspInit+0x120>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ba:	4b24      	ldr	r3, [pc, #144]	@ (800354c <HAL_ETH_MspInit+0x120>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c6:	4b21      	ldr	r3, [pc, #132]	@ (800354c <HAL_ETH_MspInit+0x120>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	4a20      	ldr	r2, [pc, #128]	@ (800354c <HAL_ETH_MspInit+0x120>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d2:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <HAL_ETH_MspInit+0x120>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80034de:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e4:	2302      	movs	r3, #2
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ec:	2303      	movs	r3, #3
 80034ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034f0:	230b      	movs	r3, #11
 80034f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034f8:	4619      	mov	r1, r3
 80034fa:	4815      	ldr	r0, [pc, #84]	@ (8003550 <HAL_ETH_MspInit+0x124>)
 80034fc:	f003 fc92 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003500:	2332      	movs	r3, #50	@ 0x32
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003510:	230b      	movs	r3, #11
 8003512:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003518:	4619      	mov	r1, r3
 800351a:	480e      	ldr	r0, [pc, #56]	@ (8003554 <HAL_ETH_MspInit+0x128>)
 800351c:	f003 fc82 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003520:	2386      	movs	r3, #134	@ 0x86
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003530:	230b      	movs	r3, #11
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	4807      	ldr	r0, [pc, #28]	@ (8003558 <HAL_ETH_MspInit+0x12c>)
 800353c:	f003 fc72 	bl	8006e24 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003540:	bf00      	nop
 8003542:	3738      	adds	r7, #56	@ 0x38
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40028000 	.word	0x40028000
 800354c:	40023800 	.word	0x40023800
 8003550:	40021800 	.word	0x40021800
 8003554:	40020800 	.word	0x40020800
 8003558:	40020000 	.word	0x40020000

0800355c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b0ac      	sub	sp, #176	@ 0xb0
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003574:	f107 0318 	add.w	r3, r7, #24
 8003578:	2284      	movs	r2, #132	@ 0x84
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f016 fcdb 	bl	8019f38 <memset>
  if(hi2c->Instance==I2C1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a44      	ldr	r2, [pc, #272]	@ (8003698 <HAL_I2C_MspInit+0x13c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d13d      	bne.n	8003608 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800358c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003590:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003592:	2300      	movs	r3, #0
 8003594:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003596:	f107 0318 	add.w	r3, r7, #24
 800359a:	4618      	mov	r0, r3
 800359c:	f007 f960 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80035a6:	f7ff fd55 	bl	8003054 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035aa:	4b3c      	ldr	r3, [pc, #240]	@ (800369c <HAL_I2C_MspInit+0x140>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	4a3b      	ldr	r2, [pc, #236]	@ (800369c <HAL_I2C_MspInit+0x140>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035b6:	4b39      	ldr	r3, [pc, #228]	@ (800369c <HAL_I2C_MspInit+0x140>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80035c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ca:	2312      	movs	r3, #18
 80035cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035dc:	2304      	movs	r3, #4
 80035de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035e6:	4619      	mov	r1, r3
 80035e8:	482d      	ldr	r0, [pc, #180]	@ (80036a0 <HAL_I2C_MspInit+0x144>)
 80035ea:	f003 fc1b 	bl	8006e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ee:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <HAL_I2C_MspInit+0x140>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	4a2a      	ldr	r2, [pc, #168]	@ (800369c <HAL_I2C_MspInit+0x140>)
 80035f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fa:	4b28      	ldr	r3, [pc, #160]	@ (800369c <HAL_I2C_MspInit+0x140>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003606:	e042      	b.n	800368e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a25      	ldr	r2, [pc, #148]	@ (80036a4 <HAL_I2C_MspInit+0x148>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d13d      	bne.n	800368e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003612:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003616:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800361e:	f107 0318 	add.w	r3, r7, #24
 8003622:	4618      	mov	r0, r3
 8003624:	f007 f91c 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800362e:	f7ff fd11 	bl	8003054 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003632:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <HAL_I2C_MspInit+0x140>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_I2C_MspInit+0x140>)
 8003638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363c:	6313      	str	r3, [r2, #48]	@ 0x30
 800363e:	4b17      	ldr	r3, [pc, #92]	@ (800369c <HAL_I2C_MspInit+0x140>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800364a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800364e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003652:	2312      	movs	r3, #18
 8003654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003658:	2301      	movs	r3, #1
 800365a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365e:	2303      	movs	r3, #3
 8003660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003664:	2304      	movs	r3, #4
 8003666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800366a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800366e:	4619      	mov	r1, r3
 8003670:	480d      	ldr	r0, [pc, #52]	@ (80036a8 <HAL_I2C_MspInit+0x14c>)
 8003672:	f003 fbd7 	bl	8006e24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <HAL_I2C_MspInit+0x140>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	4a08      	ldr	r2, [pc, #32]	@ (800369c <HAL_I2C_MspInit+0x140>)
 800367c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003680:	6413      	str	r3, [r2, #64]	@ 0x40
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_I2C_MspInit+0x140>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
}
 800368e:	bf00      	nop
 8003690:	37b0      	adds	r7, #176	@ 0xb0
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40005400 	.word	0x40005400
 800369c:	40023800 	.word	0x40023800
 80036a0:	40020400 	.word	0x40020400
 80036a4:	40005c00 	.word	0x40005c00
 80036a8:	40021c00 	.word	0x40021c00

080036ac <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08e      	sub	sp, #56	@ 0x38
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a55      	ldr	r2, [pc, #340]	@ (8003820 <HAL_LTDC_MspInit+0x174>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f040 80a3 	bne.w	8003816 <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80036d0:	4b54      	ldr	r3, [pc, #336]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 80036d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d4:	4a53      	ldr	r2, [pc, #332]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 80036d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036da:	6453      	str	r3, [r2, #68]	@ 0x44
 80036dc:	4b51      	ldr	r3, [pc, #324]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 80036de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 80036ee:	f043 0310 	orr.w	r3, r3, #16
 80036f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003700:	4b48      	ldr	r3, [pc, #288]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	4a47      	ldr	r2, [pc, #284]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 8003706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800370a:	6313      	str	r3, [r2, #48]	@ 0x30
 800370c:	4b45      	ldr	r3, [pc, #276]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003718:	4b42      	ldr	r3, [pc, #264]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371c:	4a41      	ldr	r2, [pc, #260]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 800371e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003722:	6313      	str	r3, [r2, #48]	@ 0x30
 8003724:	4b3f      	ldr	r3, [pc, #252]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003730:	4b3c      	ldr	r3, [pc, #240]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	4a3b      	ldr	r2, [pc, #236]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 8003736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800373a:	6313      	str	r3, [r2, #48]	@ 0x30
 800373c:	4b39      	ldr	r3, [pc, #228]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003748:	4b36      	ldr	r3, [pc, #216]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	4a35      	ldr	r2, [pc, #212]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 800374e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003752:	6313      	str	r3, [r2, #48]	@ 0x30
 8003754:	4b33      	ldr	r3, [pc, #204]	@ (8003824 <HAL_LTDC_MspInit+0x178>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003760:	2310      	movs	r3, #16
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003770:	230e      	movs	r3, #14
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003778:	4619      	mov	r1, r3
 800377a:	482b      	ldr	r0, [pc, #172]	@ (8003828 <HAL_LTDC_MspInit+0x17c>)
 800377c:	f003 fb52 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003780:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378e:	2300      	movs	r3, #0
 8003790:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003792:	230e      	movs	r3, #14
 8003794:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800379a:	4619      	mov	r1, r3
 800379c:	4823      	ldr	r0, [pc, #140]	@ (800382c <HAL_LTDC_MspInit+0x180>)
 800379e:	f003 fb41 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80037a2:	23f7      	movs	r3, #247	@ 0xf7
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ae:	2300      	movs	r3, #0
 80037b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037b2:	230e      	movs	r3, #14
 80037b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80037b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ba:	4619      	mov	r1, r3
 80037bc:	481c      	ldr	r0, [pc, #112]	@ (8003830 <HAL_LTDC_MspInit+0x184>)
 80037be:	f003 fb31 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80037c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	2300      	movs	r3, #0
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80037d4:	2309      	movs	r3, #9
 80037d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80037d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037dc:	4619      	mov	r1, r3
 80037de:	4815      	ldr	r0, [pc, #84]	@ (8003834 <HAL_LTDC_MspInit+0x188>)
 80037e0:	f003 fb20 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80037e4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f2:	2300      	movs	r3, #0
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037f6:	230e      	movs	r3, #14
 80037f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80037fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037fe:	4619      	mov	r1, r3
 8003800:	480d      	ldr	r0, [pc, #52]	@ (8003838 <HAL_LTDC_MspInit+0x18c>)
 8003802:	f003 fb0f 	bl	8006e24 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003806:	2200      	movs	r2, #0
 8003808:	2105      	movs	r1, #5
 800380a:	2058      	movs	r0, #88	@ 0x58
 800380c:	f001 ffc6 	bl	800579c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003810:	2058      	movs	r0, #88	@ 0x58
 8003812:	f001 ffdf 	bl	80057d4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003816:	bf00      	nop
 8003818:	3738      	adds	r7, #56	@ 0x38
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40016800 	.word	0x40016800
 8003824:	40023800 	.word	0x40023800
 8003828:	40021000 	.word	0x40021000
 800382c:	40022400 	.word	0x40022400
 8003830:	40022800 	.word	0x40022800
 8003834:	40021800 	.word	0x40021800
 8003838:	40022000 	.word	0x40022000

0800383c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	@ 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3b      	ldr	r2, [pc, #236]	@ (8003948 <HAL_QSPI_MspInit+0x10c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d170      	bne.n	8003940 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800385e:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	4a3a      	ldr	r2, [pc, #232]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	6393      	str	r3, [r2, #56]	@ 0x38
 800386a:	4b38      	ldr	r3, [pc, #224]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 800386c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003876:	4b35      	ldr	r3, [pc, #212]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	4a34      	ldr	r2, [pc, #208]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 800387c:	f043 0310 	orr.w	r3, r3, #16
 8003880:	6313      	str	r3, [r2, #48]	@ 0x30
 8003882:	4b32      	ldr	r3, [pc, #200]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388e:	4b2f      	ldr	r3, [pc, #188]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	4a2e      	ldr	r2, [pc, #184]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6313      	str	r3, [r2, #48]	@ 0x30
 800389a:	4b2c      	ldr	r3, [pc, #176]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038a6:	4b29      	ldr	r3, [pc, #164]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	4a28      	ldr	r2, [pc, #160]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 80038ac:	f043 0308 	orr.w	r3, r3, #8
 80038b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b2:	4b26      	ldr	r3, [pc, #152]	@ (800394c <HAL_QSPI_MspInit+0x110>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80038be:	2304      	movs	r3, #4
 80038c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ca:	2303      	movs	r3, #3
 80038cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038ce:	2309      	movs	r3, #9
 80038d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80038d2:	f107 031c 	add.w	r3, r7, #28
 80038d6:	4619      	mov	r1, r3
 80038d8:	481d      	ldr	r0, [pc, #116]	@ (8003950 <HAL_QSPI_MspInit+0x114>)
 80038da:	f003 faa3 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80038de:	2340      	movs	r3, #64	@ 0x40
 80038e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ea:	2303      	movs	r3, #3
 80038ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80038ee:	230a      	movs	r3, #10
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80038f2:	f107 031c 	add.w	r3, r7, #28
 80038f6:	4619      	mov	r1, r3
 80038f8:	4816      	ldr	r0, [pc, #88]	@ (8003954 <HAL_QSPI_MspInit+0x118>)
 80038fa:	f003 fa93 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038fe:	2304      	movs	r3, #4
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390a:	2303      	movs	r3, #3
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800390e:	2309      	movs	r3, #9
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	4619      	mov	r1, r3
 8003918:	480e      	ldr	r0, [pc, #56]	@ (8003954 <HAL_QSPI_MspInit+0x118>)
 800391a:	f003 fa83 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800391e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392c:	2303      	movs	r3, #3
 800392e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003930:	2309      	movs	r3, #9
 8003932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003934:	f107 031c 	add.w	r3, r7, #28
 8003938:	4619      	mov	r1, r3
 800393a:	4807      	ldr	r0, [pc, #28]	@ (8003958 <HAL_QSPI_MspInit+0x11c>)
 800393c:	f003 fa72 	bl	8006e24 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003940:	bf00      	nop
 8003942:	3730      	adds	r7, #48	@ 0x30
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	a0001000 	.word	0xa0001000
 800394c:	40023800 	.word	0x40023800
 8003950:	40021000 	.word	0x40021000
 8003954:	40020400 	.word	0x40020400
 8003958:	40020c00 	.word	0x40020c00

0800395c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b0a4      	sub	sp, #144	@ 0x90
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	2284      	movs	r2, #132	@ 0x84
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f016 fae3 	bl	8019f38 <memset>
  if(hrtc->Instance==RTC)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a0e      	ldr	r2, [pc, #56]	@ (80039b0 <HAL_RTC_MspInit+0x54>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d114      	bne.n	80039a6 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800397c:	2320      	movs	r3, #32
 800397e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003984:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003986:	f107 030c 	add.w	r3, r7, #12
 800398a:	4618      	mov	r0, r3
 800398c:	f006 ff68 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003996:	f7ff fb5d 	bl	8003054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_RTC_MspInit+0x58>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399e:	4a05      	ldr	r2, [pc, #20]	@ (80039b4 <HAL_RTC_MspInit+0x58>)
 80039a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a4:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80039a6:	bf00      	nop
 80039a8:	3790      	adds	r7, #144	@ 0x90
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40002800 	.word	0x40002800
 80039b4:	40023800 	.word	0x40023800

080039b8 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	@ 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a25      	ldr	r2, [pc, #148]	@ (8003a6c <HAL_SD_MspInit+0xb4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d144      	bne.n	8003a64 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80039da:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039de:	4a24      	ldr	r2, [pc, #144]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 80039e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039e6:	4b22      	ldr	r3, [pc, #136]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a0a:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	4a18      	ldr	r2, [pc, #96]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 8003a10:	f043 0308 	orr.w	r3, r3, #8
 8003a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a16:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <HAL_SD_MspInit+0xb8>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003a22:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003a26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a30:	2303      	movs	r3, #3
 8003a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a34:	230c      	movs	r3, #12
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	480d      	ldr	r0, [pc, #52]	@ (8003a74 <HAL_SD_MspInit+0xbc>)
 8003a40:	f003 f9f0 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003a44:	2304      	movs	r3, #4
 8003a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a50:	2303      	movs	r3, #3
 8003a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a54:	230c      	movs	r3, #12
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4806      	ldr	r0, [pc, #24]	@ (8003a78 <HAL_SD_MspInit+0xc0>)
 8003a60:	f003 f9e0 	bl	8006e24 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003a64:	bf00      	nop
 8003a66:	3728      	adds	r7, #40	@ 0x28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40020800 	.word	0x40020800
 8003a78:	40020c00 	.word	0x40020c00

08003a7c <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b0aa      	sub	sp, #168	@ 0xa8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a94:	f107 0310 	add.w	r3, r7, #16
 8003a98:	2284      	movs	r2, #132	@ 0x84
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f016 fa4b 	bl	8019f38 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8003aaa:	d143      	bne.n	8003b34 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ab0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003ab2:	2364      	movs	r3, #100	@ 0x64
 8003ab4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003aba:	2302      	movs	r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ac6:	f107 0310 	add.w	r3, r7, #16
 8003aca:	4618      	mov	r0, r3
 8003acc:	f006 fec8 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8003ad6:	f7ff fabd 	bl	8003054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003ada:	4b18      	ldr	r3, [pc, #96]	@ (8003b3c <HAL_SPDIFRX_MspInit+0xc0>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	4a17      	ldr	r2, [pc, #92]	@ (8003b3c <HAL_SPDIFRX_MspInit+0xc0>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae6:	4b15      	ldr	r3, [pc, #84]	@ (8003b3c <HAL_SPDIFRX_MspInit+0xc0>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <HAL_SPDIFRX_MspInit+0xc0>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	4a11      	ldr	r2, [pc, #68]	@ (8003b3c <HAL_SPDIFRX_MspInit+0xc0>)
 8003af8:	f043 0308 	orr.w	r3, r3, #8
 8003afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003afe:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <HAL_SPDIFRX_MspInit+0xc0>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003b0a:	2380      	movs	r3, #128	@ 0x80
 8003b0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003b22:	2308      	movs	r3, #8
 8003b24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003b28:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4804      	ldr	r0, [pc, #16]	@ (8003b40 <HAL_SPDIFRX_MspInit+0xc4>)
 8003b30:	f003 f978 	bl	8006e24 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8003b34:	bf00      	nop
 8003b36:	37a8      	adds	r7, #168	@ 0xa8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40020c00 	.word	0x40020c00

08003b44 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	@ 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	@ (8003bf8 <HAL_SPI_MspInit+0xb4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d144      	bne.n	8003bf0 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b66:	4b25      	ldr	r3, [pc, #148]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	4a24      	ldr	r2, [pc, #144]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b72:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	4a1e      	ldr	r2, [pc, #120]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b96:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba2:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <HAL_SPI_MspInit+0xb8>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bbe:	2305      	movs	r3, #5
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003bc2:	f107 0314 	add.w	r3, r7, #20
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	480d      	ldr	r0, [pc, #52]	@ (8003c00 <HAL_SPI_MspInit+0xbc>)
 8003bca:	f003 f92b 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003bce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003be0:	2305      	movs	r3, #5
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4619      	mov	r1, r3
 8003bea:	4806      	ldr	r0, [pc, #24]	@ (8003c04 <HAL_SPI_MspInit+0xc0>)
 8003bec:	f003 f91a 	bl	8006e24 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003bf0:	bf00      	nop
 8003bf2:	3728      	adds	r7, #40	@ 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40003800 	.word	0x40003800
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40022000 	.word	0x40022000
 8003c04:	40020400 	.word	0x40020400

08003c08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	@ 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd0 <HAL_TIM_Base_MspInit+0xc8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10c      	bne.n	8003c34 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c26:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c32:	e046      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c3e:	4b25      	ldr	r3, [pc, #148]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	4a24      	ldr	r2, [pc, #144]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4a:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	69bb      	ldr	r3, [r7, #24]
}
 8003c56:	e034      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd8 <HAL_TIM_Base_MspInit+0xd0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10c      	bne.n	8003c7c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c62:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c6e:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	697b      	ldr	r3, [r7, #20]
}
 8003c7a:	e022      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a16      	ldr	r2, [pc, #88]	@ (8003cdc <HAL_TIM_Base_MspInit+0xd4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10c      	bne.n	8003ca0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c86:	4b13      	ldr	r3, [pc, #76]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c8c:	f043 0308 	orr.w	r3, r3, #8
 8003c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c92:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
}
 8003c9e:	e010      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce0 <HAL_TIM_Base_MspInit+0xd8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	4a09      	ldr	r2, [pc, #36]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cb6:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <HAL_TIM_Base_MspInit+0xcc>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000c00 	.word	0x40000c00
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8003d1c <HAL_TIM_PWM_MspInit+0x38>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10b      	bne.n	8003d0e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	4a09      	ldr	r2, [pc, #36]	@ (8003d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8003cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40001800 	.word	0x40001800
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	@ 0x30
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a56      	ldr	r2, [pc, #344]	@ (8003e9c <HAL_TIM_MspPostInit+0x178>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d11d      	bne.n	8003d82 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d46:	4b56      	ldr	r3, [pc, #344]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	4a55      	ldr	r2, [pc, #340]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d52:	4b53      	ldr	r3, [pc, #332]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003d5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d64:	2302      	movs	r3, #2
 8003d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d70:	2301      	movs	r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003d74:	f107 031c 	add.w	r3, r7, #28
 8003d78:	4619      	mov	r1, r3
 8003d7a:	484a      	ldr	r0, [pc, #296]	@ (8003ea4 <HAL_TIM_MspPostInit+0x180>)
 8003d7c:	f003 f852 	bl	8006e24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003d80:	e087      	b.n	8003e92 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8a:	d11d      	bne.n	8003dc8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8c:	4b44      	ldr	r3, [pc, #272]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	4a43      	ldr	r2, [pc, #268]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d98:	4b41      	ldr	r3, [pc, #260]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	2300      	movs	r3, #0
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003db6:	2301      	movs	r3, #1
 8003db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003dba:	f107 031c 	add.w	r3, r7, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4838      	ldr	r0, [pc, #224]	@ (8003ea4 <HAL_TIM_MspPostInit+0x180>)
 8003dc2:	f003 f82f 	bl	8006e24 <HAL_GPIO_Init>
}
 8003dc6:	e064      	b.n	8003e92 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a36      	ldr	r2, [pc, #216]	@ (8003ea8 <HAL_TIM_MspPostInit+0x184>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d11c      	bne.n	8003e0c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd2:	4b33      	ldr	r3, [pc, #204]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4a32      	ldr	r2, [pc, #200]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dde:	4b30      	ldr	r3, [pc, #192]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003dea:	2310      	movs	r3, #16
 8003dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df6:	2300      	movs	r3, #0
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	4619      	mov	r1, r3
 8003e04:	4829      	ldr	r0, [pc, #164]	@ (8003eac <HAL_TIM_MspPostInit+0x188>)
 8003e06:	f003 f80d 	bl	8006e24 <HAL_GPIO_Init>
}
 8003e0a:	e042      	b.n	8003e92 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a27      	ldr	r2, [pc, #156]	@ (8003eb0 <HAL_TIM_MspPostInit+0x18c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d11c      	bne.n	8003e50 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e16:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e22:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e32:	2302      	movs	r3, #2
 8003e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003e42:	f107 031c 	add.w	r3, r7, #28
 8003e46:	4619      	mov	r1, r3
 8003e48:	481a      	ldr	r0, [pc, #104]	@ (8003eb4 <HAL_TIM_MspPostInit+0x190>)
 8003e4a:	f002 ffeb 	bl	8006e24 <HAL_GPIO_Init>
}
 8003e4e:	e020      	b.n	8003e92 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a18      	ldr	r2, [pc, #96]	@ (8003eb8 <HAL_TIM_MspPostInit+0x194>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d11b      	bne.n	8003e92 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <HAL_TIM_MspPostInit+0x17c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003e72:	2340      	movs	r3, #64	@ 0x40
 8003e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e82:	2309      	movs	r3, #9
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003e86:	f107 031c 	add.w	r3, r7, #28
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	480b      	ldr	r0, [pc, #44]	@ (8003ebc <HAL_TIM_MspPostInit+0x198>)
 8003e8e:	f002 ffc9 	bl	8006e24 <HAL_GPIO_Init>
}
 8003e92:	bf00      	nop
 8003e94:	3730      	adds	r7, #48	@ 0x30
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40020400 	.word	0x40020400
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	40001800 	.word	0x40001800
 8003ebc:	40021c00 	.word	0x40021c00

08003ec0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b0ae      	sub	sp, #184	@ 0xb8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ed8:	f107 0320 	add.w	r3, r7, #32
 8003edc:	2284      	movs	r2, #132	@ 0x84
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f016 f829 	bl	8019f38 <memset>
  if(huart->Instance==USART1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a53      	ldr	r2, [pc, #332]	@ (8004038 <HAL_UART_MspInit+0x178>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d15d      	bne.n	8003fac <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ef0:	2340      	movs	r3, #64	@ 0x40
 8003ef2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ef8:	f107 0320 	add.w	r3, r7, #32
 8003efc:	4618      	mov	r0, r3
 8003efe:	f006 fcaf 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f08:	f7ff f8a4 	bl	8003054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f10:	4a4a      	ldr	r2, [pc, #296]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f12:	f043 0310 	orr.w	r3, r3, #16
 8003f16:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f18:	4b48      	ldr	r3, [pc, #288]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f24:	4b45      	ldr	r3, [pc, #276]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	4a44      	ldr	r2, [pc, #272]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f2a:	f043 0302 	orr.w	r3, r3, #2
 8003f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f30:	4b42      	ldr	r3, [pc, #264]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	4a3e      	ldr	r2, [pc, #248]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f48:	4b3c      	ldr	r3, [pc, #240]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f6c:	2307      	movs	r3, #7
 8003f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003f72:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4831      	ldr	r0, [pc, #196]	@ (8004040 <HAL_UART_MspInit+0x180>)
 8003f7a:	f002 ff53 	bl	8006e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003f7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f98:	2307      	movs	r3, #7
 8003f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003f9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4827      	ldr	r0, [pc, #156]	@ (8004044 <HAL_UART_MspInit+0x184>)
 8003fa6:	f002 ff3d 	bl	8006e24 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003faa:	e040      	b.n	800402e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a25      	ldr	r2, [pc, #148]	@ (8004048 <HAL_UART_MspInit+0x188>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d13b      	bne.n	800402e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003fb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fc0:	f107 0320 	add.w	r3, r7, #32
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f006 fc4b 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8003fd0:	f7ff f840 	bl	8003054 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003fd4:	4b19      	ldr	r3, [pc, #100]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	4a18      	ldr	r2, [pc, #96]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003fda:	f043 0320 	orr.w	r3, r3, #32
 8003fde:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fe0:	4b16      	ldr	r3, [pc, #88]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fec:	4b13      	ldr	r3, [pc, #76]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	4a12      	ldr	r2, [pc, #72]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff8:	4b10      	ldr	r3, [pc, #64]	@ (800403c <HAL_UART_MspInit+0x17c>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004004:	23c0      	movs	r3, #192	@ 0xc0
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400a:	2302      	movs	r3, #2
 800400c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004016:	2303      	movs	r3, #3
 8004018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800401c:	2308      	movs	r3, #8
 800401e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004022:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004026:	4619      	mov	r1, r3
 8004028:	4808      	ldr	r0, [pc, #32]	@ (800404c <HAL_UART_MspInit+0x18c>)
 800402a:	f002 fefb 	bl	8006e24 <HAL_GPIO_Init>
}
 800402e:	bf00      	nop
 8004030:	37b8      	adds	r7, #184	@ 0xb8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40011000 	.word	0x40011000
 800403c:	40023800 	.word	0x40023800
 8004040:	40020400 	.word	0x40020400
 8004044:	40020000 	.word	0x40020000
 8004048:	40011400 	.word	0x40011400
 800404c:	40020800 	.word	0x40020800

08004050 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004064:	4b3a      	ldr	r3, [pc, #232]	@ (8004150 <HAL_FMC_MspInit+0x100>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d16d      	bne.n	8004148 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800406c:	4b38      	ldr	r3, [pc, #224]	@ (8004150 <HAL_FMC_MspInit+0x100>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004072:	4b38      	ldr	r3, [pc, #224]	@ (8004154 <HAL_FMC_MspInit+0x104>)
 8004074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004076:	4a37      	ldr	r2, [pc, #220]	@ (8004154 <HAL_FMC_MspInit+0x104>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6393      	str	r3, [r2, #56]	@ 0x38
 800407e:	4b35      	ldr	r3, [pc, #212]	@ (8004154 <HAL_FMC_MspInit+0x104>)
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800408a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800408e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004098:	2303      	movs	r3, #3
 800409a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800409c:	230c      	movs	r3, #12
 800409e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	482c      	ldr	r0, [pc, #176]	@ (8004158 <HAL_FMC_MspInit+0x108>)
 80040a6:	f002 febd 	bl	8006e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80040aa:	f248 1333 	movw	r3, #33075	@ 0x8133
 80040ae:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b0:	2302      	movs	r3, #2
 80040b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040bc:	230c      	movs	r3, #12
 80040be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4825      	ldr	r0, [pc, #148]	@ (800415c <HAL_FMC_MspInit+0x10c>)
 80040c6:	f002 fead 	bl	8006e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80040ca:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80040ce:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d0:	2302      	movs	r3, #2
 80040d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d8:	2303      	movs	r3, #3
 80040da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040dc:	230c      	movs	r3, #12
 80040de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	481e      	ldr	r0, [pc, #120]	@ (8004160 <HAL_FMC_MspInit+0x110>)
 80040e6:	f002 fe9d 	bl	8006e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80040ea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80040ee:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f8:	2303      	movs	r3, #3
 80040fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040fc:	230c      	movs	r3, #12
 80040fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4817      	ldr	r0, [pc, #92]	@ (8004164 <HAL_FMC_MspInit+0x114>)
 8004106:	f002 fe8d 	bl	8006e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800410a:	2328      	movs	r3, #40	@ 0x28
 800410c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410e:	2302      	movs	r3, #2
 8004110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004116:	2303      	movs	r3, #3
 8004118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800411a:	230c      	movs	r3, #12
 800411c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4811      	ldr	r0, [pc, #68]	@ (8004168 <HAL_FMC_MspInit+0x118>)
 8004124:	f002 fe7e 	bl	8006e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004128:	2308      	movs	r3, #8
 800412a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004134:	2303      	movs	r3, #3
 8004136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004138:	230c      	movs	r3, #12
 800413a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800413c:	1d3b      	adds	r3, r7, #4
 800413e:	4619      	mov	r1, r3
 8004140:	480a      	ldr	r0, [pc, #40]	@ (800416c <HAL_FMC_MspInit+0x11c>)
 8004142:	f002 fe6f 	bl	8006e24 <HAL_GPIO_Init>
 8004146:	e000      	b.n	800414a <HAL_FMC_MspInit+0xfa>
    return;
 8004148:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20001334 	.word	0x20001334
 8004154:	40023800 	.word	0x40023800
 8004158:	40021000 	.word	0x40021000
 800415c:	40021800 	.word	0x40021800
 8004160:	40020c00 	.word	0x40020c00
 8004164:	40021400 	.word	0x40021400
 8004168:	40021c00 	.word	0x40021c00
 800416c:	40020800 	.word	0x40020800

08004170 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004178:	f7ff ff6a 	bl	8004050 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	@ 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2b      	ldr	r2, [pc, #172]	@ (8004240 <HAL_SAI_MspInit+0xbc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d124      	bne.n	80041e0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004196:	4b2b      	ldr	r3, [pc, #172]	@ (8004244 <HAL_SAI_MspInit+0xc0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800419e:	4b2a      	ldr	r3, [pc, #168]	@ (8004248 <HAL_SAI_MspInit+0xc4>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	4a29      	ldr	r2, [pc, #164]	@ (8004248 <HAL_SAI_MspInit+0xc4>)
 80041a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041aa:	4b27      	ldr	r3, [pc, #156]	@ (8004248 <HAL_SAI_MspInit+0xc4>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80041b6:	4b23      	ldr	r3, [pc, #140]	@ (8004244 <HAL_SAI_MspInit+0xc0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	4a21      	ldr	r2, [pc, #132]	@ (8004244 <HAL_SAI_MspInit+0xc0>)
 80041be:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80041c0:	23f0      	movs	r3, #240	@ 0xf0
 80041c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c4:	2302      	movs	r3, #2
 80041c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041cc:	2300      	movs	r3, #0
 80041ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80041d0:	230a      	movs	r3, #10
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80041d4:	f107 0314 	add.w	r3, r7, #20
 80041d8:	4619      	mov	r1, r3
 80041da:	481c      	ldr	r0, [pc, #112]	@ (800424c <HAL_SAI_MspInit+0xc8>)
 80041dc:	f002 fe22 	bl	8006e24 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004250 <HAL_SAI_MspInit+0xcc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d125      	bne.n	8004236 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80041ea:	4b16      	ldr	r3, [pc, #88]	@ (8004244 <HAL_SAI_MspInit+0xc0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80041f2:	4b15      	ldr	r3, [pc, #84]	@ (8004248 <HAL_SAI_MspInit+0xc4>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <HAL_SAI_MspInit+0xc4>)
 80041f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041fe:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_SAI_MspInit+0xc4>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800420a:	4b0e      	ldr	r3, [pc, #56]	@ (8004244 <HAL_SAI_MspInit+0xc0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	4a0c      	ldr	r2, [pc, #48]	@ (8004244 <HAL_SAI_MspInit+0xc0>)
 8004212:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004222:	2300      	movs	r3, #0
 8004224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004226:	230a      	movs	r3, #10
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	4808      	ldr	r0, [pc, #32]	@ (8004254 <HAL_SAI_MspInit+0xd0>)
 8004232:	f002 fdf7 	bl	8006e24 <HAL_GPIO_Init>

    }
}
 8004236:	bf00      	nop
 8004238:	3728      	adds	r7, #40	@ 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40015c04 	.word	0x40015c04
 8004244:	20001338 	.word	0x20001338
 8004248:	40023800 	.word	0x40023800
 800424c:	40022000 	.word	0x40022000
 8004250:	40015c24 	.word	0x40015c24
 8004254:	40021800 	.word	0x40021800

08004258 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08e      	sub	sp, #56	@ 0x38
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004268:	4b33      	ldr	r3, [pc, #204]	@ (8004338 <HAL_InitTick+0xe0>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	4a32      	ldr	r2, [pc, #200]	@ (8004338 <HAL_InitTick+0xe0>)
 800426e:	f043 0310 	orr.w	r3, r3, #16
 8004272:	6413      	str	r3, [r2, #64]	@ 0x40
 8004274:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <HAL_InitTick+0xe0>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004280:	f107 0210 	add.w	r2, r7, #16
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f006 fab6 	bl	800a7fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800429a:	f006 fa87 	bl	800a7ac <HAL_RCC_GetPCLK1Freq>
 800429e:	6378      	str	r0, [r7, #52]	@ 0x34
 80042a0:	e004      	b.n	80042ac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80042a2:	f006 fa83 	bl	800a7ac <HAL_RCC_GetPCLK1Freq>
 80042a6:	4603      	mov	r3, r0
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ae:	4a23      	ldr	r2, [pc, #140]	@ (800433c <HAL_InitTick+0xe4>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	0c9b      	lsrs	r3, r3, #18
 80042b6:	3b01      	subs	r3, #1
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042ba:	4b21      	ldr	r3, [pc, #132]	@ (8004340 <HAL_InitTick+0xe8>)
 80042bc:	4a21      	ldr	r2, [pc, #132]	@ (8004344 <HAL_InitTick+0xec>)
 80042be:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004340 <HAL_InitTick+0xe8>)
 80042c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80042c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <HAL_InitTick+0xe8>)
 80042ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80042ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004340 <HAL_InitTick+0xe8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004340 <HAL_InitTick+0xe8>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042da:	4b19      	ldr	r3, [pc, #100]	@ (8004340 <HAL_InitTick+0xe8>)
 80042dc:	2200      	movs	r2, #0
 80042de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80042e0:	4817      	ldr	r0, [pc, #92]	@ (8004340 <HAL_InitTick+0xe8>)
 80042e2:	f008 fe12 	bl	800cf0a <HAL_TIM_Base_Init>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80042ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11b      	bne.n	800432c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80042f4:	4812      	ldr	r0, [pc, #72]	@ (8004340 <HAL_InitTick+0xe8>)
 80042f6:	f008 fe5f 	bl	800cfb8 <HAL_TIM_Base_Start_IT>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004304:	2b00      	cmp	r3, #0
 8004306:	d111      	bne.n	800432c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004308:	2036      	movs	r0, #54	@ 0x36
 800430a:	f001 fa63 	bl	80057d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b0f      	cmp	r3, #15
 8004312:	d808      	bhi.n	8004326 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004314:	2200      	movs	r2, #0
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	2036      	movs	r0, #54	@ 0x36
 800431a:	f001 fa3f 	bl	800579c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800431e:	4a0a      	ldr	r2, [pc, #40]	@ (8004348 <HAL_InitTick+0xf0>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e002      	b.n	800432c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800432c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004330:	4618      	mov	r0, r3
 8004332:	3738      	adds	r7, #56	@ 0x38
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40023800 	.word	0x40023800
 800433c:	431bde83 	.word	0x431bde83
 8004340:	2000133c 	.word	0x2000133c
 8004344:	40001000 	.word	0x40001000
 8004348:	20000060 	.word	0x20000060

0800434c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004350:	bf00      	nop
 8004352:	e7fd      	b.n	8004350 <NMI_Handler+0x4>

08004354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <HardFault_Handler+0x4>

0800435c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004360:	bf00      	nop
 8004362:	e7fd      	b.n	8004360 <MemManage_Handler+0x4>

08004364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <BusFault_Handler+0x4>

0800436c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <UsageFault_Handler+0x4>

08004374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004388:	4802      	ldr	r0, [pc, #8]	@ (8004394 <TIM6_DAC_IRQHandler+0x10>)
 800438a:	f008 fee4 	bl	800d156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	2000133c 	.word	0x2000133c

08004398 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800439c:	4802      	ldr	r0, [pc, #8]	@ (80043a8 <OTG_FS_IRQHandler+0x10>)
 800439e:	f003 f9e7 	bl	8007770 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20009d84 	.word	0x20009d84

080043ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043b0:	4802      	ldr	r0, [pc, #8]	@ (80043bc <LTDC_IRQHandler+0x10>)
 80043b2:	f005 fa01 	bl	80097b8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000a58 	.word	0x20000a58

080043c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80043c4:	4802      	ldr	r0, [pc, #8]	@ (80043d0 <DMA2D_IRQHandler+0x10>)
 80043c6:	f002 f83d 	bl	8006444 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	200008c0 	.word	0x200008c0

080043d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80043d8:	4802      	ldr	r0, [pc, #8]	@ (80043e4 <DMA2_Stream1_IRQHandler+0x10>)
 80043da:	f001 fd73 	bl	8005ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200012c4 	.word	0x200012c4

080043e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 80043ec:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <USART6_IRQHandler+0x2c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d106      	bne.n	8004408 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <USART6_IRQHandler+0x2c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004402:	4804      	ldr	r0, [pc, #16]	@ (8004414 <USART6_IRQHandler+0x2c>)
 8004404:	f000 fd6c 	bl	8004ee0 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004408:	4802      	ldr	r0, [pc, #8]	@ (8004414 <USART6_IRQHandler+0x2c>)
 800440a:	f00a f8ef 	bl	800e5ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000ff8 	.word	0x20000ff8

08004418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004420:	4a14      	ldr	r2, [pc, #80]	@ (8004474 <_sbrk+0x5c>)
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <_sbrk+0x60>)
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800442c:	4b13      	ldr	r3, [pc, #76]	@ (800447c <_sbrk+0x64>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004434:	4b11      	ldr	r3, [pc, #68]	@ (800447c <_sbrk+0x64>)
 8004436:	4a12      	ldr	r2, [pc, #72]	@ (8004480 <_sbrk+0x68>)
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800443a:	4b10      	ldr	r3, [pc, #64]	@ (800447c <_sbrk+0x64>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d207      	bcs.n	8004458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004448:	f015 fdb8 	bl	8019fbc <__errno>
 800444c:	4603      	mov	r3, r0
 800444e:	220c      	movs	r2, #12
 8004450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	e009      	b.n	800446c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004458:	4b08      	ldr	r3, [pc, #32]	@ (800447c <_sbrk+0x64>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800445e:	4b07      	ldr	r3, [pc, #28]	@ (800447c <_sbrk+0x64>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	4a05      	ldr	r2, [pc, #20]	@ (800447c <_sbrk+0x64>)
 8004468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20050000 	.word	0x20050000
 8004478:	00000400 	.word	0x00000400
 800447c:	20001388 	.word	0x20001388
 8004480:	2000a2b0 	.word	0x2000a2b0

08004484 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004488:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <SystemInit+0x20>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448e:	4a05      	ldr	r2, [pc, #20]	@ (80044a4 <SystemInit+0x20>)
 8004490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 80044ac:	f000 f803 	bl	80044b6 <TIME_Platform_GetCurrentMs>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 80044ba:	f000 fdef 	bl	800509c <HAL_GetTick>
 80044be:	4603      	mov	r3, r0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <LOGGER_Connect+0x16>
 80044d4:	f04f 33ff 	mov.w	r3, #4294967295
 80044d8:	e016      	b.n	8004508 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 80044da:	223f      	movs	r2, #63	@ 0x3f
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	480c      	ldr	r0, [pc, #48]	@ (8004510 <LOGGER_Connect+0x4c>)
 80044e0:	f015 fd32 	bl	8019f48 <strncpy>
    current_config.server_port = port;
 80044e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004514 <LOGGER_Connect+0x50>)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8a5 	bl	800463c <LOGGER_Platform_Connect>
 80044f2:	4603      	mov	r3, r0
 80044f4:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 80044f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <LOGGER_Connect+0x40>
        logger_connected = true;
 80044fe:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <LOGGER_Connect+0x54>)
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2000001b 	.word	0x2000001b
 8004514:	20000018 	.word	0x20000018
 8004518:	2000138c 	.word	0x2000138c

0800451c <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 8004524:	4b14      	ldr	r3, [pc, #80]	@ (8004578 <LOGGER_Send+0x5c>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f083 0301 	eor.w	r3, r3, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <LOGGER_Send+0x1c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <LOGGER_Send+0x22>
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
 800453c:	e017      	b.n	800456e <LOGGER_Send+0x52>
    
    // Network 모듈을 통해 로그 전송 (SD카드 또는 소켓)
    if (Network_IsConnected()) {
 800453e:	f7fc fc67 	bl	8000e10 <Network_IsConnected>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <LOGGER_Send+0x4a>
        int result = Network_SendBinary(message, strlen(message) + 1); // null terminator 포함
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fb fe6b 	bl	8000224 <strlen>
 800454e:	4603      	mov	r3, r0
 8004550:	3301      	adds	r3, #1
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc fc11 	bl	8000d7c <Network_SendBinary>
 800455a:	60f8      	str	r0, [r7, #12]
        if (result == NETWORK_OK) {
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <LOGGER_Send+0x4a>
            return LOGGER_STATUS_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e003      	b.n	800456e <LOGGER_Send+0x52>
        }
    }
    
    // Network 모듈 사용 실패 시 기존 플랫폼 방식 사용
    return LOGGER_Platform_Send(message);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f874 	bl	8004654 <LOGGER_Platform_Send>
 800456c:	4603      	mov	r3, r0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	2000138c 	.word	0x2000138c

0800457c <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 800457c:	b40e      	push	{r1, r2, r3}
 800457e:	b590      	push	{r4, r7, lr}
 8004580:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004584:	af00      	add	r7, sp, #0
 8004586:	4602      	mov	r2, r0
 8004588:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800458c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004590:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 8004592:	4b27      	ldr	r3, [pc, #156]	@ (8004630 <LOGGER_SendFormatted+0xb4>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800459a:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d33c      	bcc.n	800461e <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 80045a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80045ac:	4a21      	ldr	r2, [pc, #132]	@ (8004634 <LOGGER_SendFormatted+0xb8>)
 80045ae:	461c      	mov	r4, r3
 80045b0:	4613      	mov	r3, r2
 80045b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 80045b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045bc:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045c6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80045ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ce:	f107 001c 	add.w	r0, r7, #28
 80045d2:	4a19      	ldr	r2, [pc, #100]	@ (8004638 <LOGGER_SendFormatted+0xbc>)
 80045d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045d8:	f015 fc1a 	bl	8019e10 <sniprintf>
 80045dc:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 80045e0:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80045e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80045ec:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 80045ee:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80045f2:	f107 021c 	add.w	r2, r7, #28
 80045f6:	18d0      	adds	r0, r2, r3
 80045f8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80045fc:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004600:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004604:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800460e:	f015 fc85 	bl	8019f1c <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 8004612:	f107 031c 	add.w	r3, r7, #28
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff ff80 	bl	800451c <LOGGER_Send>
 800461c:	e000      	b.n	8004620 <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 800461e:	bf00      	nop
}
 8004620:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800462a:	b003      	add	sp, #12
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000018 	.word	0x20000018
 8004634:	0801ba6c 	.word	0x0801ba6c
 8004638:	0801ba7c 	.word	0x0801ba7c

0800463c <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <LOGGER_Platform_Send+0x14>
 8004662:	f04f 33ff 	mov.w	r3, #4294967295
 8004666:	e01c      	b.n	80046a2 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fb fddb 	bl	8000224 <strlen>
 800466e:	4603      	mov	r3, r0
 8004670:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	dd12      	ble.n	800469e <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	b29a      	uxth	r2, r3
 800467c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	480a      	ldr	r0, [pc, #40]	@ (80046ac <LOGGER_Platform_Send+0x58>)
 8004684:	f009 fd8a 	bl	800e19c <HAL_UART_Transmit>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d107      	bne.n	800469e <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 800468e:	2364      	movs	r3, #100	@ 0x64
 8004690:	2202      	movs	r2, #2
 8004692:	4907      	ldr	r1, [pc, #28]	@ (80046b0 <LOGGER_Platform_Send+0x5c>)
 8004694:	4805      	ldr	r0, [pc, #20]	@ (80046ac <LOGGER_Platform_Send+0x58>)
 8004696:	f009 fd81 	bl	800e19c <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e001      	b.n	80046a2 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000f70 	.word	0x20000f70
 80046b0:	0801ba80 	.word	0x0801ba80

080046b4 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 80046c2:	4913      	ldr	r1, [pc, #76]	@ (8004710 <UART_Connect+0x5c>)
 80046c4:	2003      	movs	r0, #3
 80046c6:	f7ff ff59 	bl	800457c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e01c      	b.n	8004708 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4910      	ldr	r1, [pc, #64]	@ (8004714 <UART_Connect+0x60>)
 80046d2:	2001      	movs	r0, #1
 80046d4:	f7ff ff52 	bl	800457c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8fb 	bl	80048d4 <UART_Platform_Connect>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d108      	bne.n	80046fa <UART_Connect+0x46>
        uart_connected = true;
 80046e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <UART_Connect+0x64>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	490a      	ldr	r1, [pc, #40]	@ (800471c <UART_Connect+0x68>)
 80046f2:	2001      	movs	r0, #1
 80046f4:	f7ff ff42 	bl	800457c <LOGGER_SendFormatted>
 80046f8:	e005      	b.n	8004706 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4908      	ldr	r1, [pc, #32]	@ (8004720 <UART_Connect+0x6c>)
 8004700:	2003      	movs	r0, #3
 8004702:	f7ff ff3b 	bl	800457c <LOGGER_SendFormatted>
    }

    return status;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	0801ba84 	.word	0x0801ba84
 8004714:	0801baa8 	.word	0x0801baa8
 8004718:	2000138d 	.word	0x2000138d
 800471c:	0801bac0 	.word	0x0801bac0
 8004720:	0801bae4 	.word	0x0801bae4

08004724 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 800472c:	4b19      	ldr	r3, [pc, #100]	@ (8004794 <UART_Send+0x70>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f083 0301 	eor.w	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 800473a:	4917      	ldr	r1, [pc, #92]	@ (8004798 <UART_Send+0x74>)
 800473c:	2003      	movs	r0, #3
 800473e:	f7ff ff1d 	bl	800457c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e022      	b.n	800478c <UART_Send+0x68>
    }

    if (data == NULL) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 800474c:	4913      	ldr	r1, [pc, #76]	@ (800479c <UART_Send+0x78>)
 800474e:	2003      	movs	r0, #3
 8004750:	f7ff ff14 	bl	800457c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e019      	b.n	800478c <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4911      	ldr	r1, [pc, #68]	@ (80047a0 <UART_Send+0x7c>)
 800475c:	2000      	movs	r0, #0
 800475e:	f7ff ff0d 	bl	800457c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f99e 	bl	8004aa4 <UART_Platform_Send>
 8004768:	4603      	mov	r3, r0
 800476a:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d105      	bne.n	800477e <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	490b      	ldr	r1, [pc, #44]	@ (80047a4 <UART_Send+0x80>)
 8004776:	2000      	movs	r0, #0
 8004778:	f7ff ff00 	bl	800457c <LOGGER_SendFormatted>
 800477c:	e005      	b.n	800478a <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4909      	ldr	r1, [pc, #36]	@ (80047a8 <UART_Send+0x84>)
 8004784:	2003      	movs	r0, #3
 8004786:	f7ff fef9 	bl	800457c <LOGGER_SendFormatted>
    }

    return status;
 800478a:	7bfb      	ldrb	r3, [r7, #15]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	2000138d 	.word	0x2000138d
 8004798:	0801bb10 	.word	0x0801bb10
 800479c:	0801bb34 	.word	0x0801bb34
 80047a0:	0801bb54 	.word	0x0801bb54
 80047a4:	0801bb6c 	.word	0x0801bb6c
 80047a8:	0801bb88 	.word	0x0801bb88

080047ac <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 80047b8:	4b22      	ldr	r3, [pc, #136]	@ (8004844 <UART_Receive+0x98>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f083 0301 	eor.w	r3, r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 80047c6:	4920      	ldr	r1, [pc, #128]	@ (8004848 <UART_Receive+0x9c>)
 80047c8:	2003      	movs	r0, #3
 80047ca:	f7ff fed7 	bl	800457c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e034      	b.n	800483c <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <UART_Receive+0x38>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	dd02      	ble.n	80047e4 <UART_Receive+0x38>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 80047e4:	4919      	ldr	r1, [pc, #100]	@ (800484c <UART_Receive+0xa0>)
 80047e6:	2003      	movs	r0, #3
 80047e8:	f7ff fec8 	bl	800457c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e025      	b.n	800483c <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4917      	ldr	r1, [pc, #92]	@ (8004850 <UART_Receive+0xa4>)
 80047f4:	2000      	movs	r0, #0
 80047f6:	f7ff fec1 	bl	800457c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f98c 	bl	8004b1c <UART_Platform_Receive>
 8004804:	4603      	mov	r3, r0
 8004806:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8004808:	7dfb      	ldrb	r3, [r7, #23]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	490f      	ldr	r1, [pc, #60]	@ (8004854 <UART_Receive+0xa8>)
 8004816:	2000      	movs	r0, #0
 8004818:	f7ff feb0 	bl	800457c <LOGGER_SendFormatted>
 800481c:	e00d      	b.n	800483a <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 800481e:	7dfb      	ldrb	r3, [r7, #23]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d104      	bne.n	800482e <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8004824:	490c      	ldr	r1, [pc, #48]	@ (8004858 <UART_Receive+0xac>)
 8004826:	2000      	movs	r0, #0
 8004828:	f7ff fea8 	bl	800457c <LOGGER_SendFormatted>
 800482c:	e005      	b.n	800483a <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 800482e:	7dfb      	ldrb	r3, [r7, #23]
 8004830:	461a      	mov	r2, r3
 8004832:	490a      	ldr	r1, [pc, #40]	@ (800485c <UART_Receive+0xb0>)
 8004834:	2003      	movs	r0, #3
 8004836:	f7ff fea1 	bl	800457c <LOGGER_SendFormatted>
    }

    return status;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	2000138d 	.word	0x2000138d
 8004848:	0801bbac 	.word	0x0801bbac
 800484c:	0801bbd4 	.word	0x0801bbd4
 8004850:	0801bc00 	.word	0x0801bc00
 8004854:	0801bc28 	.word	0x0801bc28
 8004858:	0801bc48 	.word	0x0801bc48
 800485c:	0801bc60 	.word	0x0801bc60

08004860 <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
    return uart_connected;
 8004864:	4b03      	ldr	r3, [pc, #12]	@ (8004874 <UART_IsConnected+0x14>)
 8004866:	781b      	ldrb	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	2000138d 	.word	0x2000138d

08004878 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004882:	e007      	b.n	8004894 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004884:	4b12      	ldr	r3, [pc, #72]	@ (80048d0 <flush_rx_buffer+0x58>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	b2db      	uxtb	r3, r3
 800488c:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3301      	adds	r3, #1
 8004892:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004894:	4b0e      	ldr	r3, [pc, #56]	@ (80048d0 <flush_rx_buffer+0x58>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d106      	bne.n	80048b0 <flush_rx_buffer+0x38>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b63      	cmp	r3, #99	@ 0x63
 80048a6:	dded      	ble.n	8004884 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80048a8:	e002      	b.n	80048b0 <flush_rx_buffer+0x38>
        flush_count++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3301      	adds	r3, #1
 80048ae:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80048b0:	1cf9      	adds	r1, r7, #3
 80048b2:	2301      	movs	r3, #1
 80048b4:	2201      	movs	r2, #1
 80048b6:	4806      	ldr	r0, [pc, #24]	@ (80048d0 <flush_rx_buffer+0x58>)
 80048b8:	f009 fcf9 	bl	800e2ae <HAL_UART_Receive>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <flush_rx_buffer+0x50>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b63      	cmp	r3, #99	@ 0x63
 80048c6:	ddf0      	ble.n	80048aa <flush_rx_buffer+0x32>
    }
}
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000ff8 	.word	0x20000ff8

080048d4 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 80048dc:	4b5b      	ldr	r3, [pc, #364]	@ (8004a4c <UART_Platform_Connect+0x178>)
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 80048e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 80048e4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80048e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 80048e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ec:	4959      	ldr	r1, [pc, #356]	@ (8004a54 <UART_Platform_Connect+0x180>)
 80048ee:	2001      	movs	r0, #1
 80048f0:	f7ff fe44 	bl	800457c <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 80048f4:	4b56      	ldr	r3, [pc, #344]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 80048f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00e      	beq.n	800491a <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 80048fc:	4956      	ldr	r1, [pc, #344]	@ (8004a58 <UART_Platform_Connect+0x184>)
 80048fe:	2001      	movs	r0, #1
 8004900:	f7ff fe3c 	bl	800457c <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004904:	4b52      	ldr	r3, [pc, #328]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	4952      	ldr	r1, [pc, #328]	@ (8004a5c <UART_Platform_Connect+0x188>)
 8004912:	2001      	movs	r0, #1
 8004914:	f7ff fe32 	bl	800457c <LOGGER_SendFormatted>
 8004918:	e018      	b.n	800494c <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 800491a:	4951      	ldr	r1, [pc, #324]	@ (8004a60 <UART_Platform_Connect+0x18c>)
 800491c:	2003      	movs	r0, #3
 800491e:	f7ff fe2d 	bl	800457c <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004922:	4b4b      	ldr	r3, [pc, #300]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004924:	4a4f      	ldr	r2, [pc, #316]	@ (8004a64 <UART_Platform_Connect+0x190>)
 8004926:	675a      	str	r2, [r3, #116]	@ 0x74
 8004928:	4b4e      	ldr	r3, [pc, #312]	@ (8004a64 <UART_Platform_Connect+0x190>)
 800492a:	4a49      	ldr	r2, [pc, #292]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 800492c:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 800492e:	4b48      	ldr	r3, [pc, #288]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8004936:	494c      	ldr	r1, [pc, #304]	@ (8004a68 <UART_Platform_Connect+0x194>)
 8004938:	2001      	movs	r0, #1
 800493a:	f7ff fe1f 	bl	800457c <LOGGER_SendFormatted>
 800493e:	e005      	b.n	800494c <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8004940:	494a      	ldr	r1, [pc, #296]	@ (8004a6c <UART_Platform_Connect+0x198>)
 8004942:	2003      	movs	r0, #3
 8004944:	f7ff fe1a 	bl	800457c <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e07a      	b.n	8004a42 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 800494c:	4b48      	ldr	r3, [pc, #288]	@ (8004a70 <UART_Platform_Connect+0x19c>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8004954:	483e      	ldr	r0, [pc, #248]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004956:	f009 fdb6 	bl	800e4c6 <HAL_UART_DMAStop>
        dma_receiving = false;
 800495a:	4b45      	ldr	r3, [pc, #276]	@ (8004a70 <UART_Platform_Connect+0x19c>)
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8004960:	4944      	ldr	r1, [pc, #272]	@ (8004a74 <UART_Platform_Connect+0x1a0>)
 8004962:	2001      	movs	r0, #1
 8004964:	f7ff fe0a 	bl	800457c <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8004968:	4b39      	ldr	r3, [pc, #228]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 800496a:	2220      	movs	r2, #32
 800496c:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 800496e:	4b38      	ldr	r3, [pc, #224]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004970:	2220      	movs	r2, #32
 8004972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8004976:	4b36      	ldr	r3, [pc, #216]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497a:	2b00      	cmp	r3, #0
 800497c:	d026      	beq.n	80049cc <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 800497e:	4b34      	ldr	r3, [pc, #208]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004982:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d01a      	beq.n	80049c2 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 800498c:	493a      	ldr	r1, [pc, #232]	@ (8004a78 <UART_Platform_Connect+0x1a4>)
 800498e:	2001      	movs	r0, #1
 8004990:	f7ff fdf4 	bl	800457c <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8004994:	4b2e      	ldr	r3, [pc, #184]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004998:	4618      	mov	r0, r3
 800499a:	f001 f943 	bl	8005c24 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 800499e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 80049a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 f890 	bl	8005ac8 <HAL_DMA_Init>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 80049ae:	4933      	ldr	r1, [pc, #204]	@ (8004a7c <UART_Platform_Connect+0x1a8>)
 80049b0:	2003      	movs	r0, #3
 80049b2:	f7ff fde3 	bl	800457c <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e043      	b.n	8004a42 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 80049ba:	4931      	ldr	r1, [pc, #196]	@ (8004a80 <UART_Platform_Connect+0x1ac>)
 80049bc:	2001      	movs	r0, #1
 80049be:	f7ff fddd 	bl	800457c <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80049c2:	4b23      	ldr	r3, [pc, #140]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 80049cc:	f7ff ff54 	bl	8004878 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 80049d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a84 <UART_Platform_Connect+0x1b0>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 80049d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a88 <UART_Platform_Connect+0x1b4>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 80049dc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a8c <UART_Platform_Connect+0x1b8>)
 80049de:	2200      	movs	r2, #0
 80049e0:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80049e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e6:	2100      	movs	r1, #0
 80049e8:	4829      	ldr	r0, [pc, #164]	@ (8004a90 <UART_Platform_Connect+0x1bc>)
 80049ea:	f015 faa5 	bl	8019f38 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 80049ee:	4929      	ldr	r1, [pc, #164]	@ (8004a94 <UART_Platform_Connect+0x1c0>)
 80049f0:	2001      	movs	r0, #1
 80049f2:	f7ff fdc3 	bl	800457c <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80049f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049fa:	4925      	ldr	r1, [pc, #148]	@ (8004a90 <UART_Platform_Connect+0x1bc>)
 80049fc:	4814      	ldr	r0, [pc, #80]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 80049fe:	f009 fd1e 	bl	800e43e <HAL_UART_Receive_DMA>
 8004a02:	4603      	mov	r3, r0
 8004a04:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8004a0c:	4b18      	ldr	r3, [pc, #96]	@ (8004a70 <UART_Platform_Connect+0x19c>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8004a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a16:	4920      	ldr	r1, [pc, #128]	@ (8004a98 <UART_Platform_Connect+0x1c4>)
 8004a18:	2001      	movs	r0, #1
 8004a1a:	f7ff fdaf 	bl	800457c <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e00f      	b.n	8004a42 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	461a      	mov	r2, r3
 8004a26:	491d      	ldr	r1, [pc, #116]	@ (8004a9c <UART_Platform_Connect+0x1c8>)
 8004a28:	2003      	movs	r0, #3
 8004a2a:	f7ff fda7 	bl	800457c <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004a30:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004a32:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <UART_Platform_Connect+0x17c>)
 8004a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a38:	4919      	ldr	r1, [pc, #100]	@ (8004aa0 <UART_Platform_Connect+0x1cc>)
 8004a3a:	2003      	movs	r0, #3
 8004a3c:	f7ff fd9e 	bl	800457c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004a40:	2301      	movs	r3, #1
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20001594 	.word	0x20001594
 8004a50:	20000ff8 	.word	0x20000ff8
 8004a54:	0801be5c 	.word	0x0801be5c
 8004a58:	0801be88 	.word	0x0801be88
 8004a5c:	0801beb0 	.word	0x0801beb0
 8004a60:	0801becc 	.word	0x0801becc
 8004a64:	200012c4 	.word	0x200012c4
 8004a68:	0801bf08 	.word	0x0801bf08
 8004a6c:	0801bf34 	.word	0x0801bf34
 8004a70:	20001595 	.word	0x20001595
 8004a74:	0801bf60 	.word	0x0801bf60
 8004a78:	0801bf8c 	.word	0x0801bf8c
 8004a7c:	0801bfbc 	.word	0x0801bfbc
 8004a80:	0801bfe8 	.word	0x0801bfe8
 8004a84:	2000138e 	.word	0x2000138e
 8004a88:	2000138f 	.word	0x2000138f
 8004a8c:	20001390 	.word	0x20001390
 8004a90:	20001394 	.word	0x20001394
 8004a94:	0801c014 	.word	0x0801c014
 8004a98:	0801c03c 	.word	0x0801c03c
 8004a9c:	0801c080 	.word	0x0801c080
 8004aa0:	0801c0bc 	.word	0x0801c0bc

08004aa4 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <UART_Platform_Send+0x1c>
 8004ab2:	4b17      	ldr	r3, [pc, #92]	@ (8004b10 <UART_Platform_Send+0x6c>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	f083 0301 	eor.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <UART_Platform_Send+0x20>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e021      	b.n	8004b08 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fb fbad 	bl	8000224 <strlen>
 8004aca:	4603      	mov	r3, r0
 8004acc:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <UART_Platform_Send+0x34>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e017      	b.n	8004b08 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8004ad8:	f7ff fece 	bl	8004878 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	480b      	ldr	r0, [pc, #44]	@ (8004b14 <UART_Platform_Send+0x70>)
 8004ae8:	f009 fb58 	bl	800e19c <HAL_UART_Transmit>
 8004aec:	4603      	mov	r3, r0
 8004aee:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8004af0:	7afb      	ldrb	r3, [r7, #11]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e006      	b.n	8004b08 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8004afa:	7afb      	ldrb	r3, [r7, #11]
 8004afc:	461a      	mov	r2, r3
 8004afe:	4906      	ldr	r1, [pc, #24]	@ (8004b18 <UART_Platform_Send+0x74>)
 8004b00:	2003      	movs	r0, #3
 8004b02:	f7ff fd3b 	bl	800457c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004b06:	2301      	movs	r3, #1
    }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20001594 	.word	0x20001594
 8004b14:	20000ff8 	.word	0x20000ff8
 8004b18:	0801c11c 	.word	0x0801c11c

08004b1c <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	@ 0x28
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <UART_Platform_Receive+0x26>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d006      	beq.n	8004b42 <UART_Platform_Receive+0x26>
 8004b34:	4b74      	ldr	r3, [pc, #464]	@ (8004d08 <UART_Platform_Receive+0x1ec>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	f083 0301 	eor.w	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0dc      	b.n	8004d00 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	dc04      	bgt.n	8004b56 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0d4      	b.n	8004d00 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8004b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8004d0c <UART_Platform_Receive+0x1f0>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f083 0301 	eor.w	r3, r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0c8      	b.n	8004d00 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8004b6e:	4b68      	ldr	r3, [pc, #416]	@ (8004d10 <UART_Platform_Receive+0x1f4>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8004b78:	4b65      	ldr	r3, [pc, #404]	@ (8004d10 <UART_Platform_Receive+0x1f4>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8004b7e:	4965      	ldr	r1, [pc, #404]	@ (8004d14 <UART_Platform_Receive+0x1f8>)
 8004b80:	2002      	movs	r0, #2
 8004b82:	f7ff fcfb 	bl	800457c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0ba      	b.n	8004d00 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8004b8a:	4b63      	ldr	r3, [pc, #396]	@ (8004d18 <UART_Platform_Receive+0x1fc>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80b4 	beq.w	8004cfe <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8004b96:	4b60      	ldr	r3, [pc, #384]	@ (8004d18 <UART_Platform_Receive+0x1fc>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8004b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8004d1c <UART_Platform_Receive+0x200>)
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	837b      	strh	r3, [r7, #26]
        LOG_INFO("[UART_STM32] DMA received %d bytes", received_length);
 8004ba2:	8b7b      	ldrh	r3, [r7, #26]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	495e      	ldr	r1, [pc, #376]	@ (8004d20 <UART_Platform_Receive+0x204>)
 8004ba8:	2001      	movs	r0, #1
 8004baa:	f7ff fce7 	bl	800457c <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8004bae:	8b7b      	ldrh	r3, [r7, #26]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 809e 	beq.w	8004cf2 <UART_Platform_Receive+0x1d6>
 8004bb6:	8b7b      	ldrh	r3, [r7, #26]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	f340 8099 	ble.w	8004cf2 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8004bc0:	8b7b      	ldrh	r3, [r7, #26]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4957      	ldr	r1, [pc, #348]	@ (8004d24 <UART_Platform_Receive+0x208>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f015 fa24 	bl	801a014 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8004bcc:	8b7b      	ldrh	r3, [r7, #26]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8004bd6:	8b7a      	ldrh	r2, [r7, #26]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_INFO("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8004bdc:	8b7a      	ldrh	r2, [r7, #26]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4951      	ldr	r1, [pc, #324]	@ (8004d28 <UART_Platform_Receive+0x20c>)
 8004be2:	2001      	movs	r0, #1
 8004be4:	f7ff fcca 	bl	800457c <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8004be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bec:	2100      	movs	r1, #0
 8004bee:	484d      	ldr	r0, [pc, #308]	@ (8004d24 <UART_Platform_Receive+0x208>)
 8004bf0:	f015 f9a2 	bl	8019f38 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8004bf4:	484d      	ldr	r0, [pc, #308]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004bf6:	f009 fc66 	bl	800e4c6 <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8004bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8004c02:	4b4a      	ldr	r3, [pc, #296]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2202      	movs	r2, #2
 8004c08:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8004c0a:	4b48      	ldr	r3, [pc, #288]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8004c12:	4b46      	ldr	r3, [pc, #280]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2208      	movs	r2, #8
 8004c18:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8004c1a:	4b44      	ldr	r3, [pc, #272]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8004c22:	4b42      	ldr	r3, [pc, #264]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d025      	beq.n	8004c76 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8004c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c2e:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004c30:	e00b      	b.n	8004c4a <UART_Platform_Receive+0x12e>
                    timeout--;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e002      	b.n	8004c44 <UART_Platform_Receive+0x128>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3301      	adds	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b63      	cmp	r3, #99	@ 0x63
 8004c48:	ddf9      	ble.n	8004c3e <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004c4a:	4b38      	ldr	r3, [pc, #224]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d002      	beq.n	8004c5e <UART_Platform_Receive+0x142>
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	dce9      	bgt.n	8004c32 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d108      	bne.n	8004c76 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8004c64:	4932      	ldr	r1, [pc, #200]	@ (8004d30 <UART_Platform_Receive+0x214>)
 8004c66:	2002      	movs	r0, #2
 8004c68:	f7ff fc88 	bl	800457c <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8004c76:	4b2d      	ldr	r3, [pc, #180]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8004c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004c80:	2220      	movs	r2, #32
 8004c82:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	e002      	b.n	8004c90 <UART_Platform_Receive+0x174>
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004c96:	4293      	cmp	r3, r2
 8004c98:	ddf7      	ble.n	8004c8a <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004c9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c9e:	4921      	ldr	r1, [pc, #132]	@ (8004d24 <UART_Platform_Receive+0x208>)
 8004ca0:	4822      	ldr	r0, [pc, #136]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004ca2:	f009 fbcc 	bl	800e43e <HAL_UART_Receive_DMA>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8004caa:	7e7b      	ldrb	r3, [r7, #25]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d104      	bne.n	8004cba <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8004cb0:	4920      	ldr	r1, [pc, #128]	@ (8004d34 <UART_Platform_Receive+0x218>)
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f7ff fc62 	bl	800457c <LOGGER_SendFormatted>
 8004cb8:	e019      	b.n	8004cee <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8004cba:	7e7a      	ldrb	r2, [r7, #25]
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004cbe:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	491b      	ldr	r1, [pc, #108]	@ (8004d38 <UART_Platform_Receive+0x21c>)
 8004ccc:	2002      	movs	r0, #2
 8004cce:	f7ff fc55 	bl	800457c <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8004cd2:	4b16      	ldr	r3, [pc, #88]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8004cda:	4b14      	ldr	r3, [pc, #80]	@ (8004d2c <UART_Platform_Receive+0x210>)
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4915      	ldr	r1, [pc, #84]	@ (8004d3c <UART_Platform_Receive+0x220>)
 8004ce8:	2002      	movs	r0, #2
 8004cea:	f7ff fc47 	bl	800457c <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e006      	b.n	8004d00 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8004cf2:	8b7a      	ldrh	r2, [r7, #26]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4912      	ldr	r1, [pc, #72]	@ (8004d40 <UART_Platform_Receive+0x224>)
 8004cf8:	2002      	movs	r0, #2
 8004cfa:	f7ff fc3f 	bl	800457c <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8004cfe:	2302      	movs	r3, #2
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20001594 	.word	0x20001594
 8004d0c:	20001595 	.word	0x20001595
 8004d10:	2000138f 	.word	0x2000138f
 8004d14:	0801c154 	.word	0x0801c154
 8004d18:	2000138e 	.word	0x2000138e
 8004d1c:	20001390 	.word	0x20001390
 8004d20:	0801c184 	.word	0x0801c184
 8004d24:	20001394 	.word	0x20001394
 8004d28:	0801c1a8 	.word	0x0801c1a8
 8004d2c:	20000ff8 	.word	0x20000ff8
 8004d30:	0801c1d4 	.word	0x0801c1d4
 8004d34:	0801c210 	.word	0x0801c210
 8004d38:	0801c240 	.word	0x0801c240
 8004d3c:	0801c288 	.word	0x0801c288
 8004d40:	0801c2a4 	.word	0x0801c2a4

08004d44 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0a      	ldr	r2, [pc, #40]	@ (8004d7c <HAL_UART_RxCpltCallback+0x38>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10e      	bne.n	8004d74 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8004d56:	4b0a      	ldr	r3, [pc, #40]	@ (8004d80 <HAL_UART_RxCpltCallback+0x3c>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8004d5c:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <HAL_UART_RxCpltCallback+0x40>)
 8004d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d62:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8004d64:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <HAL_UART_RxCpltCallback+0x40>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4906      	ldr	r1, [pc, #24]	@ (8004d88 <HAL_UART_RxCpltCallback+0x44>)
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f7ff fc04 	bl	800457c <LOGGER_SendFormatted>
  }
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40011400 	.word	0x40011400
 8004d80:	2000138e 	.word	0x2000138e
 8004d84:	20001390 	.word	0x20001390
 8004d88:	0801c2e0 	.word	0x0801c2e0

08004d8c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a05      	ldr	r2, [pc, #20]	@ (8004db0 <HAL_UART_RxHalfCpltCallback+0x24>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d103      	bne.n	8004da6 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 8004d9e:	4905      	ldr	r1, [pc, #20]	@ (8004db4 <HAL_UART_RxHalfCpltCallback+0x28>)
 8004da0:	2002      	movs	r0, #2
 8004da2:	f7ff fbeb 	bl	800457c <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40011400 	.word	0x40011400
 8004db4:	0801c318 	.word	0x0801c318

08004db8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8004eb8 <HAL_UART_ErrorCallback+0x100>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d171      	bne.n	8004eae <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8004dca:	4b3c      	ldr	r3, [pc, #240]	@ (8004ebc <HAL_UART_ErrorCallback+0x104>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8004dd0:	493b      	ldr	r1, [pc, #236]	@ (8004ec0 <HAL_UART_ErrorCallback+0x108>)
 8004dd2:	2002      	movs	r0, #2
 8004dd4:	f7ff fbd2 	bl	800457c <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d107      	bne.n	8004df6 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2208      	movs	r2, #8
 8004dec:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8004dee:	4935      	ldr	r1, [pc, #212]	@ (8004ec4 <HAL_UART_ErrorCallback+0x10c>)
 8004df0:	2002      	movs	r0, #2
 8004df2:	f7ff fbc3 	bl	800457c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d107      	bne.n	8004e14 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8004e0c:	492e      	ldr	r1, [pc, #184]	@ (8004ec8 <HAL_UART_ErrorCallback+0x110>)
 8004e0e:	2002      	movs	r0, #2
 8004e10:	f7ff fbb4 	bl	800457c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d107      	bne.n	8004e32 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2202      	movs	r2, #2
 8004e28:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8004e2a:	4928      	ldr	r1, [pc, #160]	@ (8004ecc <HAL_UART_ErrorCallback+0x114>)
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	f7ff fba5 	bl	800457c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8004e48:	4921      	ldr	r1, [pc, #132]	@ (8004ed0 <HAL_UART_ErrorCallback+0x118>)
 8004e4a:	2002      	movs	r0, #2
 8004e4c:	f7ff fb96 	bl	800457c <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f009 fb38 	bl	800e4c6 <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4815      	ldr	r0, [pc, #84]	@ (8004ed4 <HAL_UART_ErrorCallback+0x11c>)
 8004e7e:	f015 f85b 	bl	8019f38 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e86:	4913      	ldr	r1, [pc, #76]	@ (8004ed4 <HAL_UART_ErrorCallback+0x11c>)
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f009 fad8 	bl	800e43e <HAL_UART_Receive_DMA>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8004e98:	490f      	ldr	r1, [pc, #60]	@ (8004ed8 <HAL_UART_ErrorCallback+0x120>)
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7ff fb6e 	bl	800457c <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8004ea0:	e005      	b.n	8004eae <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	490d      	ldr	r1, [pc, #52]	@ (8004edc <HAL_UART_ErrorCallback+0x124>)
 8004ea8:	2003      	movs	r0, #3
 8004eaa:	f7ff fb67 	bl	800457c <LOGGER_SendFormatted>
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40011400 	.word	0x40011400
 8004ebc:	2000138f 	.word	0x2000138f
 8004ec0:	0801c364 	.word	0x0801c364
 8004ec4:	0801c390 	.word	0x0801c390
 8004ec8:	0801c3ac 	.word	0x0801c3ac
 8004ecc:	0801c3c8 	.word	0x0801c3c8
 8004ed0:	0801c3e4 	.word	0x0801c3e4
 8004ed4:	20001394 	.word	0x20001394
 8004ed8:	0801c400 	.word	0x0801c400
 8004edc:	0801c434 	.word	0x0801c434

08004ee0 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a3e      	ldr	r2, [pc, #248]	@ (8004fe8 <USER_UART_IDLECallback+0x108>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d175      	bne.n	8004fde <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d103      	bne.n	8004f0c <USER_UART_IDLECallback+0x2c>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d103      	bne.n	8004f22 <USER_UART_IDLECallback+0x42>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f043 0302 	orr.w	r3, r3, #2
 8004f20:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d103      	bne.n	8004f38 <USER_UART_IDLECallback+0x58>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f043 0304 	orr.w	r3, r3, #4
 8004f36:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d103      	bne.n	8004f4e <USER_UART_IDLECallback+0x6e>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f043 0308 	orr.w	r3, r3, #8
 8004f4c:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8004f58:	897b      	ldrh	r3, [r7, #10]
 8004f5a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	4b22      	ldr	r3, [pc, #136]	@ (8004fec <USER_UART_IDLECallback+0x10c>)
 8004f62:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8004f64:	4b21      	ldr	r3, [pc, #132]	@ (8004fec <USER_UART_IDLECallback+0x10c>)
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d033      	beq.n	8004fd6 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8004f6e:	4b20      	ldr	r3, [pc, #128]	@ (8004ff0 <USER_UART_IDLECallback+0x110>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8004f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fec <USER_UART_IDLECallback+0x10c>)
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	491b      	ldr	r1, [pc, #108]	@ (8004ff4 <USER_UART_IDLECallback+0x114>)
 8004f86:	2002      	movs	r0, #2
 8004f88:	f7ff faf8 	bl	800457c <LOGGER_SendFormatted>
 8004f8c:	e007      	b.n	8004f9e <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8004f8e:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <USER_UART_IDLECallback+0x10c>)
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	4918      	ldr	r1, [pc, #96]	@ (8004ff8 <USER_UART_IDLECallback+0x118>)
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f7ff faef 	bl	800457c <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8004f9e:	4b13      	ldr	r3, [pc, #76]	@ (8004fec <USER_UART_IDLECallback+0x10c>)
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d912      	bls.n	8004fce <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8004fa8:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <USER_UART_IDLECallback+0x11c>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4619      	mov	r1, r3
 8004fae:	4b13      	ldr	r3, [pc, #76]	@ (8004ffc <USER_UART_IDLECallback+0x11c>)
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <USER_UART_IDLECallback+0x11c>)
 8004fb6:	789b      	ldrb	r3, [r3, #2]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <USER_UART_IDLECallback+0x11c>)
 8004fbc:	78db      	ldrb	r3, [r3, #3]
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	9200      	str	r2, [sp, #0]
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	460a      	mov	r2, r1
 8004fc6:	490e      	ldr	r1, [pc, #56]	@ (8005000 <USER_UART_IDLECallback+0x120>)
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f7ff fad7 	bl	800457c <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f009 fa79 	bl	800e4c6 <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8004fd4:	e003      	b.n	8004fde <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8004fd6:	490b      	ldr	r1, [pc, #44]	@ (8005004 <USER_UART_IDLECallback+0x124>)
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f7ff facf 	bl	800457c <LOGGER_SendFormatted>
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40011400 	.word	0x40011400
 8004fec:	20001390 	.word	0x20001390
 8004ff0:	2000138e 	.word	0x2000138e
 8004ff4:	0801c46c 	.word	0x0801c46c
 8004ff8:	0801c4ac 	.word	0x0801c4ac
 8004ffc:	20001394 	.word	0x20001394
 8005000:	0801c4d4 	.word	0x0801c4d4
 8005004:	0801c500 	.word	0x0801c500

08005008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005040 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800500c:	f7ff fa3a 	bl	8004484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005010:	480c      	ldr	r0, [pc, #48]	@ (8005044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005012:	490d      	ldr	r1, [pc, #52]	@ (8005048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005014:	4a0d      	ldr	r2, [pc, #52]	@ (800504c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005018:	e002      	b.n	8005020 <LoopCopyDataInit>

0800501a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800501a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800501c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800501e:	3304      	adds	r3, #4

08005020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005024:	d3f9      	bcc.n	800501a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005028:	4c0a      	ldr	r4, [pc, #40]	@ (8005054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800502a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800502c:	e001      	b.n	8005032 <LoopFillZerobss>

0800502e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800502e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005030:	3204      	adds	r2, #4

08005032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005034:	d3fb      	bcc.n	800502e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005036:	f014 ffc7 	bl	8019fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800503a:	f7fc fa17 	bl	800146c <main>
  bx  lr    
 800503e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005040:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005048:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800504c:	0801c6b0 	.word	0x0801c6b0
  ldr r2, =_sbss
 8005050:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8005054:	2000a2ac 	.word	0x2000a2ac

08005058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005058:	e7fe      	b.n	8005058 <ADC_IRQHandler>

0800505a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800505e:	2003      	movs	r0, #3
 8005060:	f000 fb91 	bl	8005786 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005064:	2000      	movs	r0, #0
 8005066:	f7ff f8f7 	bl	8004258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800506a:	f7fe f859 	bl	8003120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005078:	4b06      	ldr	r3, [pc, #24]	@ (8005094 <HAL_IncTick+0x20>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <HAL_IncTick+0x24>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4413      	add	r3, r2
 8005084:	4a04      	ldr	r2, [pc, #16]	@ (8005098 <HAL_IncTick+0x24>)
 8005086:	6013      	str	r3, [r2, #0]
}
 8005088:	bf00      	nop
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000064 	.word	0x20000064
 8005098:	20001598 	.word	0x20001598

0800509c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return uwTick;
 80050a0:	4b03      	ldr	r3, [pc, #12]	@ (80050b0 <HAL_GetTick+0x14>)
 80050a2:	681b      	ldr	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20001598 	.word	0x20001598

080050b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050bc:	f7ff ffee 	bl	800509c <HAL_GetTick>
 80050c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d005      	beq.n	80050da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <HAL_Delay+0x44>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050da:	bf00      	nop
 80050dc:	f7ff ffde 	bl	800509c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d8f7      	bhi.n	80050dc <HAL_Delay+0x28>
  {
  }
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000064 	.word	0x20000064

080050fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e031      	b.n	8005176 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fe f828 	bl	8003170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800513e:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <HAL_ADC_Init+0x84>)
 8005140:	4013      	ands	r3, r2
 8005142:	f043 0202 	orr.w	r2, r3, #2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f974 	bl	8005438 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	641a      	str	r2, [r3, #64]	@ 0x40
 8005166:	e001      	b.n	800516c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	ffffeefd 	.word	0xffffeefd

08005184 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x1c>
 800519c:	2302      	movs	r3, #2
 800519e:	e13a      	b.n	8005416 <HAL_ADC_ConfigChannel+0x292>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b09      	cmp	r3, #9
 80051ae:	d93a      	bls.n	8005226 <HAL_ADC_ConfigChannel+0xa2>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051b8:	d035      	beq.n	8005226 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68d9      	ldr	r1, [r3, #12]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	3b1e      	subs	r3, #30
 80051d0:	2207      	movs	r2, #7
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43da      	mvns	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	400a      	ands	r2, r1
 80051de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a8f      	ldr	r2, [pc, #572]	@ (8005424 <HAL_ADC_ConfigChannel+0x2a0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10a      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68d9      	ldr	r1, [r3, #12]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	061a      	lsls	r2, r3, #24
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051fe:	e039      	b.n	8005274 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68d9      	ldr	r1, [r3, #12]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	4618      	mov	r0, r3
 8005212:	4603      	mov	r3, r0
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4403      	add	r3, r0
 8005218:	3b1e      	subs	r3, #30
 800521a:	409a      	lsls	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005224:	e026      	b.n	8005274 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6919      	ldr	r1, [r3, #16]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2207      	movs	r2, #7
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43da      	mvns	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	400a      	ands	r2, r1
 800524c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6919      	ldr	r1, [r3, #16]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	4618      	mov	r0, r3
 8005260:	4603      	mov	r3, r0
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4403      	add	r3, r0
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	409a      	lsls	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b06      	cmp	r3, #6
 800527a:	d824      	bhi.n	80052c6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	3b05      	subs	r3, #5
 800528e:	221f      	movs	r2, #31
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43da      	mvns	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	400a      	ands	r2, r1
 800529c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	4618      	mov	r0, r3
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	3b05      	subs	r3, #5
 80052b8:	fa00 f203 	lsl.w	r2, r0, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80052c4:	e04c      	b.n	8005360 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	d824      	bhi.n	8005318 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	3b23      	subs	r3, #35	@ 0x23
 80052e0:	221f      	movs	r2, #31
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43da      	mvns	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	400a      	ands	r2, r1
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	4618      	mov	r0, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	3b23      	subs	r3, #35	@ 0x23
 800530a:	fa00 f203 	lsl.w	r2, r0, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30
 8005316:	e023      	b.n	8005360 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	3b41      	subs	r3, #65	@ 0x41
 800532a:	221f      	movs	r2, #31
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43da      	mvns	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	400a      	ands	r2, r1
 8005338:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	4618      	mov	r0, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	3b41      	subs	r3, #65	@ 0x41
 8005354:	fa00 f203 	lsl.w	r2, r0, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a30      	ldr	r2, [pc, #192]	@ (8005428 <HAL_ADC_ConfigChannel+0x2a4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d10a      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x1fc>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005372:	d105      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005374:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a2c      	ldr	r2, [pc, #176]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 800537a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800537e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a28      	ldr	r2, [pc, #160]	@ (8005428 <HAL_ADC_ConfigChannel+0x2a4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10f      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x226>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b12      	cmp	r3, #18
 8005390:	d10b      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005392:	4b26      	ldr	r3, [pc, #152]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4a25      	ldr	r2, [pc, #148]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 8005398:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800539c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800539e:	4b23      	ldr	r3, [pc, #140]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4a22      	ldr	r2, [pc, #136]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 80053a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005428 <HAL_ADC_ConfigChannel+0x2a4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d12b      	bne.n	800540c <HAL_ADC_ConfigChannel+0x288>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005424 <HAL_ADC_ConfigChannel+0x2a0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <HAL_ADC_ConfigChannel+0x242>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b11      	cmp	r3, #17
 80053c4:	d122      	bne.n	800540c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80053c6:	4b19      	ldr	r3, [pc, #100]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4a18      	ldr	r2, [pc, #96]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 80053cc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80053d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80053d2:	4b16      	ldr	r3, [pc, #88]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4a15      	ldr	r2, [pc, #84]	@ (800542c <HAL_ADC_ConfigChannel+0x2a8>)
 80053d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a10      	ldr	r2, [pc, #64]	@ (8005424 <HAL_ADC_ConfigChannel+0x2a0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d111      	bne.n	800540c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80053e8:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <HAL_ADC_ConfigChannel+0x2ac>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a11      	ldr	r2, [pc, #68]	@ (8005434 <HAL_ADC_ConfigChannel+0x2b0>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0c9a      	lsrs	r2, r3, #18
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80053fe:	e002      	b.n	8005406 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3b01      	subs	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f9      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	10000012 	.word	0x10000012
 8005428:	40012000 	.word	0x40012000
 800542c:	40012300 	.word	0x40012300
 8005430:	20000014 	.word	0x20000014
 8005434:	431bde83 	.word	0x431bde83

08005438 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005440:	4b78      	ldr	r3, [pc, #480]	@ (8005624 <ADC_Init+0x1ec>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4a77      	ldr	r2, [pc, #476]	@ (8005624 <ADC_Init+0x1ec>)
 8005446:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800544a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800544c:	4b75      	ldr	r3, [pc, #468]	@ (8005624 <ADC_Init+0x1ec>)
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4973      	ldr	r1, [pc, #460]	@ (8005624 <ADC_Init+0x1ec>)
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6859      	ldr	r1, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	021a      	lsls	r2, r3, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800548c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c6:	4a58      	ldr	r2, [pc, #352]	@ (8005628 <ADC_Init+0x1f0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	e00f      	b.n	8005532 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005530:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0202 	bic.w	r2, r2, #2
 8005540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6899      	ldr	r1, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	005a      	lsls	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01b      	beq.n	8005598 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800557e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	3b01      	subs	r3, #1
 800558c:	035a      	lsls	r2, r3, #13
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	e007      	b.n	80055a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80055b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	051a      	lsls	r2, r3, #20
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80055dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055ea:	025a      	lsls	r2, r3, #9
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6899      	ldr	r1, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	029a      	lsls	r2, r3, #10
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	40012300 	.word	0x40012300
 8005628:	0f000001 	.word	0x0f000001

0800562c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800563c:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <__NVIC_SetPriorityGrouping+0x40>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005648:	4013      	ands	r3, r2
 800564a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <__NVIC_SetPriorityGrouping+0x44>)
 8005656:	4313      	orrs	r3, r2
 8005658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800565a:	4a04      	ldr	r2, [pc, #16]	@ (800566c <__NVIC_SetPriorityGrouping+0x40>)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60d3      	str	r3, [r2, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000ed00 	.word	0xe000ed00
 8005670:	05fa0000 	.word	0x05fa0000

08005674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005678:	4b04      	ldr	r3, [pc, #16]	@ (800568c <__NVIC_GetPriorityGrouping+0x18>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	f003 0307 	and.w	r3, r3, #7
}
 8005682:	4618      	mov	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	e000ed00 	.word	0xe000ed00

08005690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800569a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	db0b      	blt.n	80056ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	f003 021f 	and.w	r2, r3, #31
 80056a8:	4907      	ldr	r1, [pc, #28]	@ (80056c8 <__NVIC_EnableIRQ+0x38>)
 80056aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	2001      	movs	r0, #1
 80056b2:	fa00 f202 	lsl.w	r2, r0, r2
 80056b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	e000e100 	.word	0xe000e100

080056cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	6039      	str	r1, [r7, #0]
 80056d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	db0a      	blt.n	80056f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	490c      	ldr	r1, [pc, #48]	@ (8005718 <__NVIC_SetPriority+0x4c>)
 80056e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ea:	0112      	lsls	r2, r2, #4
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	440b      	add	r3, r1
 80056f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056f4:	e00a      	b.n	800570c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	4908      	ldr	r1, [pc, #32]	@ (800571c <__NVIC_SetPriority+0x50>)
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	3b04      	subs	r3, #4
 8005704:	0112      	lsls	r2, r2, #4
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	440b      	add	r3, r1
 800570a:	761a      	strb	r2, [r3, #24]
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	e000e100 	.word	0xe000e100
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	@ 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f1c3 0307 	rsb	r3, r3, #7
 800573a:	2b04      	cmp	r3, #4
 800573c:	bf28      	it	cs
 800573e:	2304      	movcs	r3, #4
 8005740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3304      	adds	r3, #4
 8005746:	2b06      	cmp	r3, #6
 8005748:	d902      	bls.n	8005750 <NVIC_EncodePriority+0x30>
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3b03      	subs	r3, #3
 800574e:	e000      	b.n	8005752 <NVIC_EncodePriority+0x32>
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005754:	f04f 32ff 	mov.w	r2, #4294967295
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43da      	mvns	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	401a      	ands	r2, r3
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005768:	f04f 31ff 	mov.w	r1, #4294967295
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	fa01 f303 	lsl.w	r3, r1, r3
 8005772:	43d9      	mvns	r1, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005778:	4313      	orrs	r3, r2
         );
}
 800577a:	4618      	mov	r0, r3
 800577c:	3724      	adds	r7, #36	@ 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ff4c 	bl	800562c <__NVIC_SetPriorityGrouping>
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057ae:	f7ff ff61 	bl	8005674 <__NVIC_GetPriorityGrouping>
 80057b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	6978      	ldr	r0, [r7, #20]
 80057ba:	f7ff ffb1 	bl	8005720 <NVIC_EncodePriority>
 80057be:	4602      	mov	r2, r0
 80057c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff ff80 	bl	80056cc <__NVIC_SetPriority>
}
 80057cc:	bf00      	nop
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff ff54 	bl	8005690 <__NVIC_EnableIRQ>
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e054      	b.n	80058ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7f5b      	ldrb	r3, [r3, #29]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fd fd06 	bl	8003224 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	791b      	ldrb	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a22      	ldr	r2, [pc, #136]	@ (80058b4 <HAL_CRC_Init+0xc4>)
 800582c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0218 	bic.w	r2, r2, #24
 800583c:	609a      	str	r2, [r3, #8]
 800583e:	e00c      	b.n	800585a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6899      	ldr	r1, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	461a      	mov	r2, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f834 	bl	80058b8 <HAL_CRCEx_Polynomial_Set>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e028      	b.n	80058ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	795b      	ldrb	r3, [r3, #5]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d105      	bne.n	800586e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	611a      	str	r2, [r3, #16]
 800586c:	e004      	b.n	8005878 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6912      	ldr	r2, [r2, #16]
 8005876:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695a      	ldr	r2, [r3, #20]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	04c11db7 	.word	0x04c11db7

080058b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80058c8:	231f      	movs	r3, #31
 80058ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
 80058da:	e063      	b.n	80059a4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80058dc:	bf00      	nop
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1e5a      	subs	r2, r3, #1
 80058e2:	613a      	str	r2, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <HAL_CRCEx_Polynomial_Set+0x44>
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f003 031f 	and.w	r3, r3, #31
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f0      	beq.n	80058de <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b18      	cmp	r3, #24
 8005900:	d846      	bhi.n	8005990 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005902:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	08005997 	.word	0x08005997
 800590c:	08005991 	.word	0x08005991
 8005910:	08005991 	.word	0x08005991
 8005914:	08005991 	.word	0x08005991
 8005918:	08005991 	.word	0x08005991
 800591c:	08005991 	.word	0x08005991
 8005920:	08005991 	.word	0x08005991
 8005924:	08005991 	.word	0x08005991
 8005928:	08005985 	.word	0x08005985
 800592c:	08005991 	.word	0x08005991
 8005930:	08005991 	.word	0x08005991
 8005934:	08005991 	.word	0x08005991
 8005938:	08005991 	.word	0x08005991
 800593c:	08005991 	.word	0x08005991
 8005940:	08005991 	.word	0x08005991
 8005944:	08005991 	.word	0x08005991
 8005948:	08005979 	.word	0x08005979
 800594c:	08005991 	.word	0x08005991
 8005950:	08005991 	.word	0x08005991
 8005954:	08005991 	.word	0x08005991
 8005958:	08005991 	.word	0x08005991
 800595c:	08005991 	.word	0x08005991
 8005960:	08005991 	.word	0x08005991
 8005964:	08005991 	.word	0x08005991
 8005968:	0800596d 	.word	0x0800596d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b06      	cmp	r3, #6
 8005970:	d913      	bls.n	800599a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005976:	e010      	b.n	800599a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b07      	cmp	r3, #7
 800597c:	d90f      	bls.n	800599e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005982:	e00c      	b.n	800599e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b0f      	cmp	r3, #15
 8005988:	d90b      	bls.n	80059a2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800598e:	e008      	b.n	80059a2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
        break;
 8005994:	e006      	b.n	80059a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005996:	bf00      	nop
 8005998:	e004      	b.n	80059a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800599a:	bf00      	nop
 800599c:	e002      	b.n	80059a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800599e:	bf00      	nop
 80059a0:	e000      	b.n	80059a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059a2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f023 0118 	bic.w	r1, r3, #24
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e069      	b.n	8005aba <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fd fc36 	bl	8003264 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6819      	ldr	r1, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac4 <HAL_DCMI_Init+0xf0>)
 8005a1a:	400b      	ands	r3, r1
 8005a1c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a32:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a3e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a4a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a56:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a62:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d112      	bne.n	8005a9a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	7f1b      	ldrb	r3, [r3, #28]
 8005a78:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	7f5b      	ldrb	r3, [r3, #29]
 8005a7e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a80:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	7f9b      	ldrb	r3, [r3, #30]
 8005a86:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005a88:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	7fdb      	ldrb	r3, [r3, #31]
 8005a90:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005a96:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a98:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 021e 	orr.w	r2, r2, #30
 8005aa8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	ffe0f007 	.word	0xffe0f007

08005ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ad4:	f7ff fae2 	bl	800509c <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e099      	b.n	8005c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b04:	e00f      	b.n	8005b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b06:	f7ff fac9 	bl	800509c <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	d908      	bls.n	8005b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2203      	movs	r2, #3
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e078      	b.n	8005c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e8      	bne.n	8005b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4b38      	ldr	r3, [pc, #224]	@ (8005c20 <HAL_DMA_Init+0x158>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d107      	bne.n	8005b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0307 	bic.w	r3, r3, #7
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d117      	bne.n	8005bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fb73 	bl	80062b8 <DMA_CheckFifoParam>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2240      	movs	r2, #64	@ 0x40
 8005bdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005be6:	2301      	movs	r3, #1
 8005be8:	e016      	b.n	8005c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fb2a 	bl	800624c <DMA_CalcBaseAndBitshift>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	223f      	movs	r2, #63	@ 0x3f
 8005c02:	409a      	lsls	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	f010803f 	.word	0xf010803f

08005c24 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e050      	b.n	8005cd8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d101      	bne.n	8005c46 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
 8005c44:	e048      	b.n	8005cd8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2221      	movs	r2, #33	@ 0x21
 8005c84:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fae0 	bl	800624c <DMA_CalcBaseAndBitshift>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c94:	223f      	movs	r2, #63	@ 0x3f
 8005c96:	409a      	lsls	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_DMA_Start_IT+0x26>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e048      	b.n	8005d98 <HAL_DMA_Start_IT+0xb8>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d137      	bne.n	8005d8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fa5e 	bl	80061f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d38:	223f      	movs	r2, #63	@ 0x3f
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0216 	orr.w	r2, r2, #22
 8005d4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d5e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d007      	beq.n	8005d78 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0208 	orr.w	r2, r2, #8
 8005d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e005      	b.n	8005d96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
 8005d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dae:	f7ff f975 	bl	800509c <HAL_GetTick>
 8005db2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d008      	beq.n	8005dd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2280      	movs	r2, #128	@ 0x80
 8005dc4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e052      	b.n	8005e78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0216 	bic.w	r2, r2, #22
 8005de0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005df0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <HAL_DMA_Abort+0x62>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0208 	bic.w	r2, r2, #8
 8005e10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e22:	e013      	b.n	8005e4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e24:	f7ff f93a 	bl	800509c <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d90c      	bls.n	8005e4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e015      	b.n	8005e78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e4      	bne.n	8005e24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5e:	223f      	movs	r2, #63	@ 0x3f
 8005e60:	409a      	lsls	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d004      	beq.n	8005e9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2280      	movs	r2, #128	@ 0x80
 8005e98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e00c      	b.n	8005eb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2205      	movs	r2, #5
 8005ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800610c <HAL_DMA_IRQHandler+0x248>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a8e      	ldr	r2, [pc, #568]	@ (8006110 <HAL_DMA_IRQHandler+0x24c>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0a9b      	lsrs	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eee:	2208      	movs	r2, #8
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01a      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d013      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f28:	f043 0201 	orr.w	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f34:	2201      	movs	r2, #1
 8005f36:	409a      	lsls	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f52:	2201      	movs	r2, #1
 8005f54:	409a      	lsls	r2, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5e:	f043 0202 	orr.w	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d012      	beq.n	8005f9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f88:	2204      	movs	r2, #4
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	409a      	lsls	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d043      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d03c      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d018      	beq.n	8006006 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d108      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d024      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
 8005ff2:	e01f      	b.n	8006034 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
 8006004:	e016      	b.n	8006034 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d107      	bne.n	8006024 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0208 	bic.w	r2, r2, #8
 8006022:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006038:	2220      	movs	r2, #32
 800603a:	409a      	lsls	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4013      	ands	r3, r2
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 808f 	beq.w	8006164 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8087 	beq.w	8006164 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605a:	2220      	movs	r2, #32
 800605c:	409a      	lsls	r2, r3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b05      	cmp	r3, #5
 800606c:	d136      	bne.n	80060dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0216 	bic.w	r2, r2, #22
 800607c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800608c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <HAL_DMA_IRQHandler+0x1da>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0208 	bic.w	r2, r2, #8
 80060ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b2:	223f      	movs	r2, #63	@ 0x3f
 80060b4:	409a      	lsls	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d07e      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
        }
        return;
 80060da:	e079      	b.n	80061d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01d      	beq.n	8006126 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10d      	bne.n	8006114 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d031      	beq.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
 8006108:	e02c      	b.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
 800610a:	bf00      	nop
 800610c:	20000014 	.word	0x20000014
 8006110:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d023      	beq.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	e01e      	b.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10f      	bne.n	8006154 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0210 	bic.w	r2, r2, #16
 8006142:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006168:	2b00      	cmp	r3, #0
 800616a:	d032      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d022      	beq.n	80061be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2205      	movs	r2, #5
 800617c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3301      	adds	r3, #1
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	429a      	cmp	r2, r3
 800619a:	d307      	bcc.n	80061ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f2      	bne.n	8006190 <HAL_DMA_IRQHandler+0x2cc>
 80061aa:	e000      	b.n	80061ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	e000      	b.n	80061d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80061d0:	bf00      	nop
    }
  }
}
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800620c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b40      	cmp	r3, #64	@ 0x40
 800621c:	d108      	bne.n	8006230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800622e:	e007      	b.n	8006240 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	60da      	str	r2, [r3, #12]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	3b10      	subs	r3, #16
 800625c:	4a13      	ldr	r2, [pc, #76]	@ (80062ac <DMA_CalcBaseAndBitshift+0x60>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	091b      	lsrs	r3, r3, #4
 8006264:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006266:	4a12      	ldr	r2, [pc, #72]	@ (80062b0 <DMA_CalcBaseAndBitshift+0x64>)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d908      	bls.n	800628c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	4b0c      	ldr	r3, [pc, #48]	@ (80062b4 <DMA_CalcBaseAndBitshift+0x68>)
 8006282:	4013      	ands	r3, r2
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	659a      	str	r2, [r3, #88]	@ 0x58
 800628a:	e006      	b.n	800629a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	4b08      	ldr	r3, [pc, #32]	@ (80062b4 <DMA_CalcBaseAndBitshift+0x68>)
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	aaaaaaab 	.word	0xaaaaaaab
 80062b0:	0801c5d0 	.word	0x0801c5d0
 80062b4:	fffffc00 	.word	0xfffffc00

080062b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d11f      	bne.n	8006312 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d856      	bhi.n	8006386 <DMA_CheckFifoParam+0xce>
 80062d8:	a201      	add	r2, pc, #4	@ (adr r2, 80062e0 <DMA_CheckFifoParam+0x28>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	08006303 	.word	0x08006303
 80062e8:	080062f1 	.word	0x080062f1
 80062ec:	08006387 	.word	0x08006387
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d046      	beq.n	800638a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006300:	e043      	b.n	800638a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800630a:	d140      	bne.n	800638e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006310:	e03d      	b.n	800638e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631a:	d121      	bne.n	8006360 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b03      	cmp	r3, #3
 8006320:	d837      	bhi.n	8006392 <DMA_CheckFifoParam+0xda>
 8006322:	a201      	add	r2, pc, #4	@ (adr r2, 8006328 <DMA_CheckFifoParam+0x70>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	08006339 	.word	0x08006339
 800632c:	0800633f 	.word	0x0800633f
 8006330:	08006339 	.word	0x08006339
 8006334:	08006351 	.word	0x08006351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
      break;
 800633c:	e030      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006342:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d025      	beq.n	8006396 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800634e:	e022      	b.n	8006396 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006358:	d11f      	bne.n	800639a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800635e:	e01c      	b.n	800639a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d903      	bls.n	800636e <DMA_CheckFifoParam+0xb6>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b03      	cmp	r3, #3
 800636a:	d003      	beq.n	8006374 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800636c:	e018      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
      break;
 8006372:	e015      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00e      	beq.n	800639e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
      break;
 8006384:	e00b      	b.n	800639e <DMA_CheckFifoParam+0xe6>
      break;
 8006386:	bf00      	nop
 8006388:	e00a      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
      break;
 800638a:	bf00      	nop
 800638c:	e008      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
      break;
 800638e:	bf00      	nop
 8006390:	e006      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
      break;
 8006392:	bf00      	nop
 8006394:	e004      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
      break;
 8006396:	bf00      	nop
 8006398:	e002      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <DMA_CheckFifoParam+0xe8>
      break;
 800639e:	bf00      	nop
    }
  } 
  
  return status; 
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop

080063b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e039      	b.n	8006436 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fd f802 	bl	80033e0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006400:	f023 0107 	bic.w	r1, r3, #7
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006416:	4b0a      	ldr	r3, [pc, #40]	@ (8006440 <HAL_DMA2D_Init+0x90>)
 8006418:	4013      	ands	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68d1      	ldr	r1, [r2, #12]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	430b      	orrs	r3, r1
 8006424:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	ffffc000 	.word	0xffffc000

08006444 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d026      	beq.n	80064b4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800646c:	2b00      	cmp	r3, #0
 800646e:	d021      	beq.n	80064b4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800647e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006484:	f043 0201 	orr.w	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2201      	movs	r2, #1
 8006492:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2204      	movs	r2, #4
 8006498:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d026      	beq.n	800650c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d021      	beq.n	800650c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064d6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2220      	movs	r2, #32
 80064de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e4:	f043 0202 	orr.w	r2, r3, #2
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2204      	movs	r2, #4
 80064f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d026      	beq.n	8006564 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800651c:	2b00      	cmp	r3, #0
 800651e:	d021      	beq.n	8006564 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800652e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2208      	movs	r2, #8
 8006536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653c:	f043 0204 	orr.w	r2, r3, #4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2204      	movs	r2, #4
 8006548:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d013      	beq.n	8006596 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00e      	beq.n	8006596 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006586:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2204      	movs	r2, #4
 800658e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f853 	bl	800663c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d024      	beq.n	80065ea <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01f      	beq.n	80065ea <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80065b8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2202      	movs	r2, #2
 80065c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01f      	beq.n	8006634 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01a      	beq.n	8006634 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800660c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2210      	movs	r2, #16
 8006614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f80e 	bl	8006650 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_DMA2D_ConfigLayer+0x20>
 8006680:	2302      	movs	r3, #2
 8006682:	e079      	b.n	8006778 <HAL_DMA2D_ConfigLayer+0x114>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	3318      	adds	r3, #24
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	041b      	lsls	r3, r3, #16
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80066ae:	4b35      	ldr	r3, [pc, #212]	@ (8006784 <HAL_DMA2D_ConfigLayer+0x120>)
 80066b0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b0a      	cmp	r3, #10
 80066b8:	d003      	beq.n	80066c2 <HAL_DMA2D_ConfigLayer+0x5e>
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b09      	cmp	r3, #9
 80066c0:	d107      	bne.n	80066d2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e005      	b.n	80066de <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	061b      	lsls	r3, r3, #24
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d120      	bne.n	8006726 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	ea02 0103 	and.w	r1, r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b0a      	cmp	r3, #10
 800670c:	d003      	beq.n	8006716 <HAL_DMA2D_ConfigLayer+0xb2>
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b09      	cmp	r3, #9
 8006714:	d127      	bne.n	8006766 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006722:	629a      	str	r2, [r3, #40]	@ 0x28
 8006724:	e01f      	b.n	8006766 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	43db      	mvns	r3, r3
 8006730:	ea02 0103 	and.w	r1, r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	430a      	orrs	r2, r1
 800673c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b0a      	cmp	r3, #10
 800674e:	d003      	beq.n	8006758 <HAL_DMA2D_ConfigLayer+0xf4>
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b09      	cmp	r3, #9
 8006756:	d106      	bne.n	8006766 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006764:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	ff03000f 	.word	0xff03000f

08006788 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e086      	b.n	80068a8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fc fe3d 	bl	800342c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b2:	4b3f      	ldr	r3, [pc, #252]	@ (80068b0 <HAL_ETH_Init+0x128>)
 80067b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b6:	4a3e      	ldr	r2, [pc, #248]	@ (80068b0 <HAL_ETH_Init+0x128>)
 80067b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80067be:	4b3c      	ldr	r3, [pc, #240]	@ (80068b0 <HAL_ETH_Init+0x128>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80067ca:	4b3a      	ldr	r3, [pc, #232]	@ (80068b4 <HAL_ETH_Init+0x12c>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4a39      	ldr	r2, [pc, #228]	@ (80068b4 <HAL_ETH_Init+0x12c>)
 80067d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80067d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80067d6:	4b37      	ldr	r3, [pc, #220]	@ (80068b4 <HAL_ETH_Init+0x12c>)
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	4935      	ldr	r1, [pc, #212]	@ (80068b4 <HAL_ETH_Init+0x12c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80067e4:	4b33      	ldr	r3, [pc, #204]	@ (80068b4 <HAL_ETH_Init+0x12c>)
 80067e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006800:	f7fe fc4c 	bl	800509c <HAL_GetTick>
 8006804:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006806:	e011      	b.n	800682c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006808:	f7fe fc48 	bl	800509c <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006816:	d909      	bls.n	800682c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2204      	movs	r2, #4
 800681c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	22e0      	movs	r2, #224	@ 0xe0
 8006824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e03d      	b.n	80068a8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e4      	bne.n	8006808 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f97a 	bl	8006b38 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fa25 	bl	8006c94 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa7b 	bl	8006d46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	461a      	mov	r2, r3
 8006856:	2100      	movs	r1, #0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f9e3 	bl	8006c24 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800686c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b0f      	ldr	r3, [pc, #60]	@ (80068b8 <HAL_ETH_Init+0x130>)
 800687c:	430b      	orrs	r3, r1
 800687e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8006892:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2210      	movs	r2, #16
 80068a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40023800 	.word	0x40023800
 80068b4:	40013800 	.word	0x40013800
 80068b8:	00020060 	.word	0x00020060

080068bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4b53      	ldr	r3, [pc, #332]	@ (8006a20 <ETH_SetMACConfig+0x164>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	7b9b      	ldrb	r3, [r3, #14]
 80068da:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	7c12      	ldrb	r2, [r2, #16]
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	d102      	bne.n	80068ea <ETH_SetMACConfig+0x2e>
 80068e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068e8:	e000      	b.n	80068ec <ETH_SetMACConfig+0x30>
 80068ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80068ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	7c52      	ldrb	r2, [r2, #17]
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d102      	bne.n	80068fc <ETH_SetMACConfig+0x40>
 80068f6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80068fa:	e000      	b.n	80068fe <ETH_SetMACConfig+0x42>
 80068fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80068fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	7fdb      	ldrb	r3, [r3, #31]
 800690a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800690c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006912:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	7f92      	ldrb	r2, [r2, #30]
 8006918:	2a00      	cmp	r2, #0
 800691a:	d102      	bne.n	8006922 <ETH_SetMACConfig+0x66>
 800691c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006920:	e000      	b.n	8006924 <ETH_SetMACConfig+0x68>
 8006922:	2200      	movs	r2, #0
                        macconf->Speed |
 8006924:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	7f1b      	ldrb	r3, [r3, #28]
 800692a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800692c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006932:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800693a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006942:	2a00      	cmp	r2, #0
 8006944:	d102      	bne.n	800694c <ETH_SetMACConfig+0x90>
 8006946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800694a:	e000      	b.n	800694e <ETH_SetMACConfig+0x92>
 800694c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800694e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	7bdb      	ldrb	r3, [r3, #15]
 8006954:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006956:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800695c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006964:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006966:	4313      	orrs	r3, r2
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800697e:	2001      	movs	r0, #1
 8006980:	f7fe fb98 	bl	80050b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800699a:	4013      	ands	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	d101      	bne.n	80069b2 <ETH_SetMACConfig+0xf6>
 80069ae:	2280      	movs	r2, #128	@ 0x80
 80069b0:	e000      	b.n	80069b4 <ETH_SetMACConfig+0xf8>
 80069b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80069ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80069c2:	2a01      	cmp	r2, #1
 80069c4:	d101      	bne.n	80069ca <ETH_SetMACConfig+0x10e>
 80069c6:	2208      	movs	r2, #8
 80069c8:	e000      	b.n	80069cc <ETH_SetMACConfig+0x110>
 80069ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80069cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80069d4:	2a01      	cmp	r2, #1
 80069d6:	d101      	bne.n	80069dc <ETH_SetMACConfig+0x120>
 80069d8:	2204      	movs	r2, #4
 80069da:	e000      	b.n	80069de <ETH_SetMACConfig+0x122>
 80069dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80069de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80069e6:	2a01      	cmp	r2, #1
 80069e8:	d101      	bne.n	80069ee <ETH_SetMACConfig+0x132>
 80069ea:	2202      	movs	r2, #2
 80069ec:	e000      	b.n	80069f0 <ETH_SetMACConfig+0x134>
 80069ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069f0:	4313      	orrs	r3, r2
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006a08:	2001      	movs	r0, #1
 8006a0a:	f7fe fb53 	bl	80050b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	619a      	str	r2, [r3, #24]
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	fd20810f 	.word	0xfd20810f

08006a24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b34 <ETH_SetDMAConfig+0x110>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	7b1b      	ldrb	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <ETH_SetDMAConfig+0x2c>
 8006a4a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a4e:	e000      	b.n	8006a52 <ETH_SetDMAConfig+0x2e>
 8006a50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	7b5b      	ldrb	r3, [r3, #13]
 8006a56:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a58:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	7f52      	ldrb	r2, [r2, #29]
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	d102      	bne.n	8006a68 <ETH_SetDMAConfig+0x44>
 8006a62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a66:	e000      	b.n	8006a6a <ETH_SetDMAConfig+0x46>
 8006a68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	7b9b      	ldrb	r3, [r3, #14]
 8006a70:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a72:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	7f1b      	ldrb	r3, [r3, #28]
 8006a7e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006a80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	7f9b      	ldrb	r3, [r3, #30]
 8006a86:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a88:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a96:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006aba:	2001      	movs	r0, #1
 8006abc:	f7fe fafa 	bl	80050b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	791b      	ldrb	r3, [r3, #4]
 8006ad2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006ad8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006ade:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006ae4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006aec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006aee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006af6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006afc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b0a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006b18:	2001      	movs	r0, #1
 8006b1a:	f7fe facb 	bl	80050b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6013      	str	r3, [r2, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	f8de3f23 	.word	0xf8de3f23

08006b38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b0a6      	sub	sp, #152	@ 0x98
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006ba0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006ba6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006bb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff fe7f 	bl	80068bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006be0:	2300      	movs	r3, #0
 8006be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006bee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006bf2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006bf4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006bf8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006bfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bfe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff05 	bl	8006a24 <ETH_SetDMAConfig>
}
 8006c1a:	bf00      	nop
 8006c1c:	3798      	adds	r7, #152	@ 0x98
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3305      	adds	r3, #5
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	3204      	adds	r2, #4
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	4b11      	ldr	r3, [pc, #68]	@ (8006c8c <ETH_MACAddressConfig+0x68>)
 8006c46:	4413      	add	r3, r2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3303      	adds	r3, #3
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	061a      	lsls	r2, r3, #24
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3302      	adds	r3, #2
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3301      	adds	r3, #1
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	7812      	ldrb	r2, [r2, #0]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4b06      	ldr	r3, [pc, #24]	@ (8006c90 <ETH_MACAddressConfig+0x6c>)
 8006c76:	4413      	add	r3, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	6013      	str	r3, [r2, #0]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40028040 	.word	0x40028040
 8006c90:	40028044 	.word	0x40028044

08006c94 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e03e      	b.n	8006d20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68d9      	ldr	r1, [r3, #12]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	440b      	add	r3, r1
 8006cb2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	3206      	adds	r2, #6
 8006cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d80c      	bhi.n	8006d04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68d9      	ldr	r1, [r3, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	e004      	b.n	8006d0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d9bd      	bls.n	8006ca2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d38:	611a      	str	r2, [r3, #16]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	e048      	b.n	8006de6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6919      	ldr	r1, [r3, #16]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	440b      	add	r3, r1
 8006d64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2200      	movs	r2, #0
 8006d88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	3212      	adds	r2, #18
 8006db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d80c      	bhi.n	8006dd6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6919      	ldr	r1, [r3, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	440b      	add	r3, r1
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	60da      	str	r2, [r3, #12]
 8006dd4:	e004      	b.n	8006de0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3301      	adds	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d9b3      	bls.n	8006d54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e16:	60da      	str	r2, [r3, #12]
}
 8006e18:	bf00      	nop
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b089      	sub	sp, #36	@ 0x24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e36:	2300      	movs	r3, #0
 8006e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	e175      	b.n	8007130 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e44:	2201      	movs	r2, #1
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4013      	ands	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	f040 8164 	bne.w	800712a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d005      	beq.n	8006e7a <HAL_GPIO_Init+0x56>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d130      	bne.n	8006edc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	2203      	movs	r2, #3
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	f003 0201 	and.w	r2, r3, #1
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f003 0303 	and.w	r3, r3, #3
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d017      	beq.n	8006f18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	4013      	ands	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d123      	bne.n	8006f6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	08da      	lsrs	r2, r3, #3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3208      	adds	r2, #8
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	220f      	movs	r2, #15
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	43db      	mvns	r3, r3
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	4013      	ands	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	08da      	lsrs	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3208      	adds	r2, #8
 8006f66:	69b9      	ldr	r1, [r7, #24]
 8006f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	2203      	movs	r2, #3
 8006f78:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f003 0203 	and.w	r2, r3, #3
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80be 	beq.w	800712a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fae:	4b66      	ldr	r3, [pc, #408]	@ (8007148 <HAL_GPIO_Init+0x324>)
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb2:	4a65      	ldr	r2, [pc, #404]	@ (8007148 <HAL_GPIO_Init+0x324>)
 8006fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fba:	4b63      	ldr	r3, [pc, #396]	@ (8007148 <HAL_GPIO_Init+0x324>)
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006fc6:	4a61      	ldr	r2, [pc, #388]	@ (800714c <HAL_GPIO_Init+0x328>)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	089b      	lsrs	r3, r3, #2
 8006fcc:	3302      	adds	r3, #2
 8006fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	220f      	movs	r2, #15
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a58      	ldr	r2, [pc, #352]	@ (8007150 <HAL_GPIO_Init+0x32c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d037      	beq.n	8007062 <HAL_GPIO_Init+0x23e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a57      	ldr	r2, [pc, #348]	@ (8007154 <HAL_GPIO_Init+0x330>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d031      	beq.n	800705e <HAL_GPIO_Init+0x23a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a56      	ldr	r2, [pc, #344]	@ (8007158 <HAL_GPIO_Init+0x334>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d02b      	beq.n	800705a <HAL_GPIO_Init+0x236>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a55      	ldr	r2, [pc, #340]	@ (800715c <HAL_GPIO_Init+0x338>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d025      	beq.n	8007056 <HAL_GPIO_Init+0x232>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a54      	ldr	r2, [pc, #336]	@ (8007160 <HAL_GPIO_Init+0x33c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01f      	beq.n	8007052 <HAL_GPIO_Init+0x22e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a53      	ldr	r2, [pc, #332]	@ (8007164 <HAL_GPIO_Init+0x340>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d019      	beq.n	800704e <HAL_GPIO_Init+0x22a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a52      	ldr	r2, [pc, #328]	@ (8007168 <HAL_GPIO_Init+0x344>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <HAL_GPIO_Init+0x226>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a51      	ldr	r2, [pc, #324]	@ (800716c <HAL_GPIO_Init+0x348>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00d      	beq.n	8007046 <HAL_GPIO_Init+0x222>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a50      	ldr	r2, [pc, #320]	@ (8007170 <HAL_GPIO_Init+0x34c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d007      	beq.n	8007042 <HAL_GPIO_Init+0x21e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a4f      	ldr	r2, [pc, #316]	@ (8007174 <HAL_GPIO_Init+0x350>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d101      	bne.n	800703e <HAL_GPIO_Init+0x21a>
 800703a:	2309      	movs	r3, #9
 800703c:	e012      	b.n	8007064 <HAL_GPIO_Init+0x240>
 800703e:	230a      	movs	r3, #10
 8007040:	e010      	b.n	8007064 <HAL_GPIO_Init+0x240>
 8007042:	2308      	movs	r3, #8
 8007044:	e00e      	b.n	8007064 <HAL_GPIO_Init+0x240>
 8007046:	2307      	movs	r3, #7
 8007048:	e00c      	b.n	8007064 <HAL_GPIO_Init+0x240>
 800704a:	2306      	movs	r3, #6
 800704c:	e00a      	b.n	8007064 <HAL_GPIO_Init+0x240>
 800704e:	2305      	movs	r3, #5
 8007050:	e008      	b.n	8007064 <HAL_GPIO_Init+0x240>
 8007052:	2304      	movs	r3, #4
 8007054:	e006      	b.n	8007064 <HAL_GPIO_Init+0x240>
 8007056:	2303      	movs	r3, #3
 8007058:	e004      	b.n	8007064 <HAL_GPIO_Init+0x240>
 800705a:	2302      	movs	r3, #2
 800705c:	e002      	b.n	8007064 <HAL_GPIO_Init+0x240>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <HAL_GPIO_Init+0x240>
 8007062:	2300      	movs	r3, #0
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	f002 0203 	and.w	r2, r2, #3
 800706a:	0092      	lsls	r2, r2, #2
 800706c:	4093      	lsls	r3, r2
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4313      	orrs	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007074:	4935      	ldr	r1, [pc, #212]	@ (800714c <HAL_GPIO_Init+0x328>)
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	089b      	lsrs	r3, r3, #2
 800707a:	3302      	adds	r3, #2
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007082:	4b3d      	ldr	r3, [pc, #244]	@ (8007178 <HAL_GPIO_Init+0x354>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	43db      	mvns	r3, r3
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	4013      	ands	r3, r2
 8007090:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070a6:	4a34      	ldr	r2, [pc, #208]	@ (8007178 <HAL_GPIO_Init+0x354>)
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070ac:	4b32      	ldr	r3, [pc, #200]	@ (8007178 <HAL_GPIO_Init+0x354>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	43db      	mvns	r3, r3
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	4013      	ands	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070d0:	4a29      	ldr	r2, [pc, #164]	@ (8007178 <HAL_GPIO_Init+0x354>)
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80070d6:	4b28      	ldr	r3, [pc, #160]	@ (8007178 <HAL_GPIO_Init+0x354>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	43db      	mvns	r3, r3
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4013      	ands	r3, r2
 80070e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007178 <HAL_GPIO_Init+0x354>)
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007100:	4b1d      	ldr	r3, [pc, #116]	@ (8007178 <HAL_GPIO_Init+0x354>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	43db      	mvns	r3, r3
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	4013      	ands	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007124:	4a14      	ldr	r2, [pc, #80]	@ (8007178 <HAL_GPIO_Init+0x354>)
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3301      	adds	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2b0f      	cmp	r3, #15
 8007134:	f67f ae86 	bls.w	8006e44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	3724      	adds	r7, #36	@ 0x24
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40023800 	.word	0x40023800
 800714c:	40013800 	.word	0x40013800
 8007150:	40020000 	.word	0x40020000
 8007154:	40020400 	.word	0x40020400
 8007158:	40020800 	.word	0x40020800
 800715c:	40020c00 	.word	0x40020c00
 8007160:	40021000 	.word	0x40021000
 8007164:	40021400 	.word	0x40021400
 8007168:	40021800 	.word	0x40021800
 800716c:	40021c00 	.word	0x40021c00
 8007170:	40022000 	.word	0x40022000
 8007174:	40022400 	.word	0x40022400
 8007178:	40013c00 	.word	0x40013c00

0800717c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	807b      	strh	r3, [r7, #2]
 8007188:	4613      	mov	r3, r2
 800718a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800718c:	787b      	ldrb	r3, [r7, #1]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007192:	887a      	ldrh	r2, [r7, #2]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007198:	e003      	b.n	80071a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800719a:	887b      	ldrh	r3, [r7, #2]
 800719c:	041a      	lsls	r2, r3, #16
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	619a      	str	r2, [r3, #24]
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b086      	sub	sp, #24
 80071b2:	af02      	add	r7, sp, #8
 80071b4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e059      	b.n	8007274 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f012 fab6 	bl	801974c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2203      	movs	r2, #3
 80071e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071ee:	d102      	bne.n	80071f6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f009 f995 	bl	801052a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	7c1a      	ldrb	r2, [r3, #16]
 8007208:	f88d 2000 	strb.w	r2, [sp]
 800720c:	3304      	adds	r3, #4
 800720e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007210:	f009 f920 	bl	8010454 <USB_CoreInit>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e026      	b.n	8007274 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f009 f98d 	bl	801054c <USB_SetCurrentMode>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e017      	b.n	8007274 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7c1a      	ldrb	r2, [r3, #16]
 800724c:	f88d 2000 	strb.w	r2, [sp]
 8007250:	3304      	adds	r3, #4
 8007252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007254:	f009 fb36 	bl	80108c4 <USB_HostInit>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e004      	b.n	8007274 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800727c:	b590      	push	{r4, r7, lr}
 800727e:	b08b      	sub	sp, #44	@ 0x2c
 8007280:	af04      	add	r7, sp, #16
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	4608      	mov	r0, r1
 8007286:	4611      	mov	r1, r2
 8007288:	461a      	mov	r2, r3
 800728a:	4603      	mov	r3, r0
 800728c:	70fb      	strb	r3, [r7, #3]
 800728e:	460b      	mov	r3, r1
 8007290:	70bb      	strb	r3, [r7, #2]
 8007292:	4613      	mov	r3, r2
 8007294:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8007296:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007298:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_HCD_HC_Init+0x2c>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e09d      	b.n	80073e4 <HAL_HCD_HC_Init+0x168>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80072b0:	78fa      	ldrb	r2, [r7, #3]
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	4613      	mov	r3, r2
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	1a9b      	subs	r3, r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	440b      	add	r3, r1
 80072be:	3319      	adds	r3, #25
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80072c4:	78fa      	ldrb	r2, [r7, #3]
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	4613      	mov	r3, r2
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	1a9b      	subs	r3, r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	440b      	add	r3, r1
 80072d2:	3314      	adds	r3, #20
 80072d4:	787a      	ldrb	r2, [r7, #1]
 80072d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	3315      	adds	r3, #21
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3326      	adds	r3, #38	@ 0x26
 80072fc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007300:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	78bb      	ldrb	r3, [r7, #2]
 8007306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800730a:	b2d8      	uxtb	r0, r3
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	3316      	adds	r3, #22
 800731a:	4602      	mov	r2, r0
 800731c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fbc8 	bl	8007ab8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8007328:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800732c:	2b00      	cmp	r3, #0
 800732e:	da0a      	bge.n	8007346 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	3317      	adds	r3, #23
 8007340:	2201      	movs	r2, #1
 8007342:	701a      	strb	r2, [r3, #0]
 8007344:	e009      	b.n	800735a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	1a9b      	subs	r3, r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	3317      	adds	r3, #23
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f009 fc08 	bl	8010b74 <USB_GetHostSpeed>
 8007364:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8007366:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d10b      	bne.n	8007386 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800736e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007372:	2b01      	cmp	r3, #1
 8007374:	d107      	bne.n	8007386 <HAL_HCD_HC_Init+0x10a>
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2bbc      	cmp	r3, #188	@ 0xbc
 8007380:	d901      	bls.n	8007386 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8007382:	23bc      	movs	r3, #188	@ 0xbc
 8007384:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8007386:	78fa      	ldrb	r2, [r7, #3]
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	3318      	adds	r3, #24
 8007396:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800739a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	b298      	uxth	r0, r3
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	4613      	mov	r3, r2
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	3328      	adds	r3, #40	@ 0x28
 80073b0:	4602      	mov	r2, r0
 80073b2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	787c      	ldrb	r4, [r7, #1]
 80073be:	78ba      	ldrb	r2, [r7, #2]
 80073c0:	78f9      	ldrb	r1, [r7, #3]
 80073c2:	9302      	str	r3, [sp, #8]
 80073c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4623      	mov	r3, r4
 80073d2:	f009 fbf7 	bl	8010bc4 <USB_HC_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd90      	pop	{r4, r7, pc}

080073ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_HCD_HC_Halt+0x1e>
 8007406:	2302      	movs	r3, #2
 8007408:	e00f      	b.n	800742a <HAL_HCD_HC_Halt+0x3e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	78fa      	ldrb	r2, [r7, #3]
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f009 ff89 	bl	8011332 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	461a      	mov	r2, r3
 8007442:	4603      	mov	r3, r0
 8007444:	70fb      	strb	r3, [r7, #3]
 8007446:	460b      	mov	r3, r1
 8007448:	70bb      	strb	r3, [r7, #2]
 800744a:	4613      	mov	r3, r2
 800744c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	3317      	adds	r3, #23
 800745e:	78ba      	ldrb	r2, [r7, #2]
 8007460:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	1a9b      	subs	r3, r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	3326      	adds	r3, #38	@ 0x26
 8007472:	787a      	ldrb	r2, [r7, #1]
 8007474:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007476:	7c3b      	ldrb	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d114      	bne.n	80074a6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	332a      	adds	r3, #42	@ 0x2a
 800748c:	2203      	movs	r2, #3
 800748e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	1a9b      	subs	r3, r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	3319      	adds	r3, #25
 80074a0:	7f3a      	ldrb	r2, [r7, #28]
 80074a2:	701a      	strb	r2, [r3, #0]
 80074a4:	e009      	b.n	80074ba <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	332a      	adds	r3, #42	@ 0x2a
 80074b6:	2202      	movs	r2, #2
 80074b8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80074ba:	787b      	ldrb	r3, [r7, #1]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	f200 8102 	bhi.w	80076c6 <HAL_HCD_HC_SubmitRequest+0x292>
 80074c2:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074d9 	.word	0x080074d9
 80074cc:	080076b1 	.word	0x080076b1
 80074d0:	0800759d 	.word	0x0800759d
 80074d4:	08007627 	.word	0x08007627
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80074d8:	7c3b      	ldrb	r3, [r7, #16]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	f040 80f5 	bne.w	80076ca <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80074e0:	78bb      	ldrb	r3, [r7, #2]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d12d      	bne.n	8007542 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80074e6:	8b3b      	ldrh	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	333d      	adds	r3, #61	@ 0x3d
 80074fc:	2201      	movs	r2, #1
 80074fe:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8007500:	78fa      	ldrb	r2, [r7, #3]
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	333d      	adds	r3, #61	@ 0x3d
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	440b      	add	r3, r1
 8007524:	332a      	adds	r3, #42	@ 0x2a
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800752a:	e0ce      	b.n	80076ca <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	1a9b      	subs	r3, r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	332a      	adds	r3, #42	@ 0x2a
 800753c:	2202      	movs	r2, #2
 800753e:	701a      	strb	r2, [r3, #0]
      break;
 8007540:	e0c3      	b.n	80076ca <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	331a      	adds	r3, #26
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b01      	cmp	r3, #1
 8007556:	f040 80b8 	bne.w	80076ca <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	333c      	adds	r3, #60	@ 0x3c
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	1a9b      	subs	r3, r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	332a      	adds	r3, #42	@ 0x2a
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
      break;
 8007584:	e0a1      	b.n	80076ca <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007586:	78fa      	ldrb	r2, [r7, #3]
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	4613      	mov	r3, r2
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	440b      	add	r3, r1
 8007594:	332a      	adds	r3, #42	@ 0x2a
 8007596:	2202      	movs	r2, #2
 8007598:	701a      	strb	r2, [r3, #0]
      break;
 800759a:	e096      	b.n	80076ca <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800759c:	78bb      	ldrb	r3, [r7, #2]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d120      	bne.n	80075e4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	333d      	adds	r3, #61	@ 0x3d
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	332a      	adds	r3, #42	@ 0x2a
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80075cc:	e07e      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4613      	mov	r3, r2
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	332a      	adds	r3, #42	@ 0x2a
 80075de:	2202      	movs	r2, #2
 80075e0:	701a      	strb	r2, [r3, #0]
      break;
 80075e2:	e073      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	333c      	adds	r3, #60	@ 0x3c
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075fa:	78fa      	ldrb	r2, [r7, #3]
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	4613      	mov	r3, r2
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	440b      	add	r3, r1
 8007608:	332a      	adds	r3, #42	@ 0x2a
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
      break;
 800760e:	e05d      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	332a      	adds	r3, #42	@ 0x2a
 8007620:	2202      	movs	r2, #2
 8007622:	701a      	strb	r2, [r3, #0]
      break;
 8007624:	e052      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007626:	78bb      	ldrb	r3, [r7, #2]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d120      	bne.n	800766e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4613      	mov	r3, r2
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	333d      	adds	r3, #61	@ 0x3d
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	332a      	adds	r3, #42	@ 0x2a
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007656:	e039      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007658:	78fa      	ldrb	r2, [r7, #3]
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	4613      	mov	r3, r2
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	332a      	adds	r3, #42	@ 0x2a
 8007668:	2202      	movs	r2, #2
 800766a:	701a      	strb	r2, [r3, #0]
      break;
 800766c:	e02e      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800766e:	78fa      	ldrb	r2, [r7, #3]
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	333c      	adds	r3, #60	@ 0x3c
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	4613      	mov	r3, r2
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	1a9b      	subs	r3, r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	332a      	adds	r3, #42	@ 0x2a
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
      break;
 8007698:	e018      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	1a9b      	subs	r3, r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	332a      	adds	r3, #42	@ 0x2a
 80076aa:	2202      	movs	r2, #2
 80076ac:	701a      	strb	r2, [r3, #0]
      break;
 80076ae:	e00d      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4613      	mov	r3, r2
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	1a9b      	subs	r3, r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	332a      	adds	r3, #42	@ 0x2a
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]
      break;
 80076c4:	e002      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80076c6:	bf00      	nop
 80076c8:	e000      	b.n	80076cc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80076ca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	332c      	adds	r3, #44	@ 0x2c
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	8b39      	ldrh	r1, [r7, #24]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4403      	add	r3, r0
 80076f0:	3334      	adds	r3, #52	@ 0x34
 80076f2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	334c      	adds	r3, #76	@ 0x4c
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	4613      	mov	r3, r2
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	3338      	adds	r3, #56	@ 0x38
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	4613      	mov	r3, r2
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	3315      	adds	r3, #21
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	334d      	adds	r3, #77	@ 0x4d
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	78fa      	ldrb	r2, [r7, #3]
 800774a:	4613      	mov	r3, r2
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	3310      	adds	r3, #16
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	1d19      	adds	r1, r3, #4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	799b      	ldrb	r3, [r3, #6]
 800775e:	461a      	mov	r2, r3
 8007760:	f009 fb5c 	bl	8010e1c <USB_HC_StartXfer>
 8007764:	4603      	mov	r3, r0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop

08007770 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f009 f856 	bl	8010838 <USB_GetMode>
 800778c:	4603      	mov	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	f040 80fb 	bne.w	800798a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f009 f819 	bl	80107d0 <USB_ReadInterrupts>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 80f1 	beq.w	8007988 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f009 f810 	bl	80107d0 <USB_ReadInterrupts>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077ba:	d104      	bne.n	80077c6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80077c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f009 f800 	bl	80107d0 <USB_ReadInterrupts>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077da:	d104      	bne.n	80077e6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80077e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f008 fff0 	bl	80107d0 <USB_ReadInterrupts>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077fa:	d104      	bne.n	8007806 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007804:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f008 ffe0 	bl	80107d0 <USB_ReadInterrupts>
 8007810:	4603      	mov	r3, r0
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b02      	cmp	r3, #2
 8007818:	d103      	bne.n	8007822 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2202      	movs	r2, #2
 8007820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f008 ffd2 	bl	80107d0 <USB_ReadInterrupts>
 800782c:	4603      	mov	r3, r0
 800782e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007836:	d120      	bne.n	800787a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007840:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d113      	bne.n	800787a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007852:	2110      	movs	r1, #16
 8007854:	6938      	ldr	r0, [r7, #16]
 8007856:	f008 fec5 	bl	80105e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800785a:	6938      	ldr	r0, [r7, #16]
 800785c:	f008 fef4 	bl	8010648 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7a5b      	ldrb	r3, [r3, #9]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d105      	bne.n	8007874 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2101      	movs	r1, #1
 800786e:	4618      	mov	r0, r3
 8007870:	f009 f8e0 	bl	8010a34 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f011 ffdb 	bl	8019830 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f008 ffa6 	bl	80107d0 <USB_ReadInterrupts>
 8007884:	4603      	mov	r3, r0
 8007886:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800788a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800788e:	d102      	bne.n	8007896 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fd4d 	bl	8009330 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f008 ff98 	bl	80107d0 <USB_ReadInterrupts>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b08      	cmp	r3, #8
 80078a8:	d106      	bne.n	80078b8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f011 ffa4 	bl	80197f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2208      	movs	r2, #8
 80078b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f008 ff87 	bl	80107d0 <USB_ReadInterrupts>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078cc:	d139      	bne.n	8007942 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f009 fd1c 	bl	8011310 <USB_HC_ReadInterrupt>
 80078d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80078da:	2300      	movs	r3, #0
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	e025      	b.n	800792c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	fa22 f303 	lsr.w	r3, r2, r3
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d018      	beq.n	8007926 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800790a:	d106      	bne.n	800791a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f905 	bl	8007b22 <HCD_HC_IN_IRQHandler>
 8007918:	e005      	b.n	8007926 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 ff67 	bl	80087f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	3301      	adds	r3, #1
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	795b      	ldrb	r3, [r3, #5]
 8007930:	461a      	mov	r2, r3
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	4293      	cmp	r3, r2
 8007936:	d3d3      	bcc.n	80078e0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f008 ff42 	bl	80107d0 <USB_ReadInterrupts>
 800794c:	4603      	mov	r3, r0
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b10      	cmp	r3, #16
 8007954:	d101      	bne.n	800795a <HAL_HCD_IRQHandler+0x1ea>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <HAL_HCD_IRQHandler+0x1ec>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d014      	beq.n	800798a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0210 	bic.w	r2, r2, #16
 800796e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fbfe 	bl	8009172 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699a      	ldr	r2, [r3, #24]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0210 	orr.w	r2, r2, #16
 8007984:	619a      	str	r2, [r3, #24]
 8007986:	e000      	b.n	800798a <HAL_HCD_IRQHandler+0x21a>
      return;
 8007988:	bf00      	nop
    }
  }
}
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <HAL_HCD_Start+0x16>
 80079a2:	2302      	movs	r3, #2
 80079a4:	e013      	b.n	80079ce <HAL_HCD_Start+0x3e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2101      	movs	r1, #1
 80079b4:	4618      	mov	r0, r3
 80079b6:	f009 f8a4 	bl	8010b02 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f008 fda2 	bl	8010508 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_HCD_Stop+0x16>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e00d      	b.n	8007a08 <HAL_HCD_Stop+0x32>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f009 fdf7 	bl	80115ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f009 f846 	bl	8010aae <USB_ResetPort>
 8007a22:	4603      	mov	r3, r0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	334c      	adds	r3, #76	@ 0x4c
 8007a48:	781b      	ldrb	r3, [r3, #0]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007a62:	78fa      	ldrb	r2, [r7, #3]
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	1a9b      	subs	r3, r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	440b      	add	r3, r1
 8007a70:	3338      	adds	r3, #56	@ 0x38
 8007a72:	681b      	ldr	r3, [r3, #0]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f009 f888 	bl	8010ba2 <USB_GetCurrentFrame>
 8007a92:	4603      	mov	r3, r0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f009 f863 	bl	8010b74 <USB_GetHostSpeed>
 8007aae:	4603      	mov	r3, r0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	331a      	adds	r3, #26
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4613      	mov	r3, r2
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	1a9b      	subs	r3, r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	331b      	adds	r3, #27
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	3325      	adds	r3, #37	@ 0x25
 8007afc:	2200      	movs	r2, #0
 8007afe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	4613      	mov	r3, r2
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	3324      	adds	r3, #36	@ 0x24
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f008 fe58 	bl	80107f6 <USB_ReadChInterrupts>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d11a      	bne.n	8007b86 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2304      	movs	r3, #4
 8007b60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	4613      	mov	r3, r2
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	334d      	adds	r3, #77	@ 0x4d
 8007b72:	2207      	movs	r2, #7
 8007b74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f009 fbd7 	bl	8011332 <USB_HC_Halt>
 8007b84:	e09e      	b.n	8007cc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	78fa      	ldrb	r2, [r7, #3]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f008 fe31 	bl	80107f6 <USB_ReadChInterrupts>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b9e:	d11b      	bne.n	8007bd8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bac:	461a      	mov	r2, r3
 8007bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007bb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	334d      	adds	r3, #77	@ 0x4d
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f009 fbae 	bl	8011332 <USB_HC_Halt>
 8007bd6:	e075      	b.n	8007cc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	78fa      	ldrb	r2, [r7, #3]
 8007bde:	4611      	mov	r1, r2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f008 fe08 	bl	80107f6 <USB_ReadChInterrupts>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d11a      	bne.n	8007c26 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	2308      	movs	r3, #8
 8007c00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007c02:	78fa      	ldrb	r2, [r7, #3]
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	334d      	adds	r3, #77	@ 0x4d
 8007c12:	2206      	movs	r2, #6
 8007c14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f009 fb87 	bl	8011332 <USB_HC_Halt>
 8007c24:	e04e      	b.n	8007cc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f008 fde1 	bl	80107f6 <USB_ReadChInterrupts>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c3e:	d11b      	bne.n	8007c78 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	334d      	adds	r3, #77	@ 0x4d
 8007c64:	2209      	movs	r2, #9
 8007c66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f009 fb5e 	bl	8011332 <USB_HC_Halt>
 8007c76:	e025      	b.n	8007cc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f008 fdb8 	bl	80107f6 <USB_ReadChInterrupts>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c8c:	2b80      	cmp	r3, #128	@ 0x80
 8007c8e:	d119      	bne.n	8007cc4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	2380      	movs	r3, #128	@ 0x80
 8007ca0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	1a9b      	subs	r3, r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	334d      	adds	r3, #77	@ 0x4d
 8007cb2:	2207      	movs	r2, #7
 8007cb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	78fa      	ldrb	r2, [r7, #3]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f009 fb37 	bl	8011332 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f008 fd92 	bl	80107f6 <USB_ReadChInterrupts>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cdc:	d112      	bne.n	8007d04 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f009 fb23 	bl	8011332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cfe:	6093      	str	r3, [r2, #8]
 8007d00:	f000 bd75 	b.w	80087ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	78fa      	ldrb	r2, [r7, #3]
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f008 fd72 	bl	80107f6 <USB_ReadChInterrupts>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	f040 8128 	bne.w	8007f6e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	2320      	movs	r3, #32
 8007d2e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007d30:	78fa      	ldrb	r2, [r7, #3]
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	4613      	mov	r3, r2
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	1a9b      	subs	r3, r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	331b      	adds	r3, #27
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d119      	bne.n	8007d7a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	331b      	adds	r3, #27
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	0151      	lsls	r1, r2, #5
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	440a      	add	r2, r1
 8007d70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d78:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	799b      	ldrb	r3, [r3, #6]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01b      	beq.n	8007dba <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	1a9b      	subs	r3, r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	3330      	adds	r3, #48	@ 0x30
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	1ac9      	subs	r1, r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4403      	add	r3, r0
 8007db6:	3338      	adds	r3, #56	@ 0x38
 8007db8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8007dba:	78fa      	ldrb	r2, [r7, #3]
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	440b      	add	r3, r1
 8007dc8:	334d      	adds	r3, #77	@ 0x4d
 8007dca:	2201      	movs	r2, #1
 8007dcc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	3344      	adds	r3, #68	@ 0x44
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007de2:	78fb      	ldrb	r3, [r7, #3]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dee:	461a      	mov	r2, r3
 8007df0:	2301      	movs	r3, #1
 8007df2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	3326      	adds	r3, #38	@ 0x26
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	3326      	adds	r3, #38	@ 0x26
 8007e1a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d110      	bne.n	8007e42 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f009 fa82 	bl	8011332 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	6093      	str	r3, [r2, #8]
 8007e40:	e03d      	b.n	8007ebe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	1a9b      	subs	r3, r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	3326      	adds	r3, #38	@ 0x26
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d00a      	beq.n	8007e6e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007e58:	78fa      	ldrb	r2, [r7, #3]
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	1a9b      	subs	r3, r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	3326      	adds	r3, #38	@ 0x26
 8007e68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d127      	bne.n	8007ebe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e8c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	011b      	lsls	r3, r3, #4
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	334c      	adds	r3, #76	@ 0x4c
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	334c      	adds	r3, #76	@ 0x4c
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f011 fcc7 	bl	801984c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	799b      	ldrb	r3, [r3, #6]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d13b      	bne.n	8007f3e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3338      	adds	r3, #56	@ 0x38
 8007ed6:	6819      	ldr	r1, [r3, #0]
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4613      	mov	r3, r2
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4403      	add	r3, r0
 8007ee6:	3328      	adds	r3, #40	@ 0x28
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	440b      	add	r3, r1
 8007eec:	1e59      	subs	r1, r3, #1
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4403      	add	r3, r0
 8007efc:	3328      	adds	r3, #40	@ 0x28
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8470 	beq.w	80087ee <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	1a9b      	subs	r3, r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	333c      	adds	r3, #60	@ 0x3c
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	78fa      	ldrb	r2, [r7, #3]
 8007f22:	f083 0301 	eor.w	r3, r3, #1
 8007f26:	b2d8      	uxtb	r0, r3
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	1a9b      	subs	r3, r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	333c      	adds	r3, #60	@ 0x3c
 8007f36:	4602      	mov	r2, r0
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	f000 bc58 	b.w	80087ee <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	333c      	adds	r3, #60	@ 0x3c
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	f083 0301 	eor.w	r3, r3, #1
 8007f56:	b2d8      	uxtb	r0, r3
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	440b      	add	r3, r1
 8007f64:	333c      	adds	r3, #60	@ 0x3c
 8007f66:	4602      	mov	r2, r0
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	f000 bc40 	b.w	80087ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	78fa      	ldrb	r2, [r7, #3]
 8007f74:	4611      	mov	r1, r2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f008 fc3d 	bl	80107f6 <USB_ReadChInterrupts>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d131      	bne.n	8007fea <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007f86:	78fb      	ldrb	r3, [r7, #3]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f92:	461a      	mov	r2, r3
 8007f94:	2320      	movs	r3, #32
 8007f96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007f98:	78fa      	ldrb	r2, [r7, #3]
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	331a      	adds	r3, #26
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	f040 841f 	bne.w	80087ee <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	331b      	adds	r3, #27
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007fc4:	78fa      	ldrb	r2, [r7, #3]
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	334d      	adds	r3, #77	@ 0x4d
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f009 f9a6 	bl	8011332 <USB_HC_Halt>
 8007fe6:	f000 bc02 	b.w	80087ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f008 fbff 	bl	80107f6 <USB_ReadChInterrupts>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	f040 8305 	bne.w	800860e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4413      	add	r3, r2
 800800c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008010:	461a      	mov	r2, r3
 8008012:	2302      	movs	r3, #2
 8008014:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	011b      	lsls	r3, r3, #4
 800801e:	1a9b      	subs	r3, r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	334d      	adds	r3, #77	@ 0x4d
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d114      	bne.n	8008056 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	334d      	adds	r3, #77	@ 0x4d
 800803c:	2202      	movs	r2, #2
 800803e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	1a9b      	subs	r3, r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	334c      	adds	r3, #76	@ 0x4c
 8008050:	2201      	movs	r2, #1
 8008052:	701a      	strb	r2, [r3, #0]
 8008054:	e2cc      	b.n	80085f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	334d      	adds	r3, #77	@ 0x4d
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b06      	cmp	r3, #6
 800806a:	d114      	bne.n	8008096 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	4613      	mov	r3, r2
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	334d      	adds	r3, #77	@ 0x4d
 800807c:	2202      	movs	r2, #2
 800807e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008080:	78fa      	ldrb	r2, [r7, #3]
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4613      	mov	r3, r2
 8008086:	011b      	lsls	r3, r3, #4
 8008088:	1a9b      	subs	r3, r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	334c      	adds	r3, #76	@ 0x4c
 8008090:	2205      	movs	r2, #5
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	e2ac      	b.n	80085f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	334d      	adds	r3, #77	@ 0x4d
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b07      	cmp	r3, #7
 80080aa:	d00b      	beq.n	80080c4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4613      	mov	r3, r2
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	334d      	adds	r3, #77	@ 0x4d
 80080bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80080be:	2b09      	cmp	r3, #9
 80080c0:	f040 80a6 	bne.w	8008210 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80080c4:	78fa      	ldrb	r2, [r7, #3]
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	4613      	mov	r3, r2
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	440b      	add	r3, r1
 80080d2:	334d      	adds	r3, #77	@ 0x4d
 80080d4:	2202      	movs	r2, #2
 80080d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80080d8:	78fa      	ldrb	r2, [r7, #3]
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	4613      	mov	r3, r2
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	3344      	adds	r3, #68	@ 0x44
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	1c59      	adds	r1, r3, #1
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4403      	add	r3, r0
 80080f8:	3344      	adds	r3, #68	@ 0x44
 80080fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	3344      	adds	r3, #68	@ 0x44
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d943      	bls.n	800819a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	1a9b      	subs	r3, r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	3344      	adds	r3, #68	@ 0x44
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	331a      	adds	r3, #26
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d123      	bne.n	8008184 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4613      	mov	r3, r2
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	331b      	adds	r3, #27
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	1a9b      	subs	r3, r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	331c      	adds	r3, #28
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	4413      	add	r3, r2
 800816c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	78fa      	ldrb	r2, [r7, #3]
 8008174:	0151      	lsls	r1, r2, #5
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	440a      	add	r2, r1
 800817a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800817e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008182:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	4613      	mov	r3, r2
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	334c      	adds	r3, #76	@ 0x4c
 8008194:	2204      	movs	r2, #4
 8008196:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008198:	e229      	b.n	80085ee <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	1a9b      	subs	r3, r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	334c      	adds	r3, #76	@ 0x4c
 80081aa:	2202      	movs	r2, #2
 80081ac:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80081ae:	78fa      	ldrb	r2, [r7, #3]
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	3326      	adds	r3, #38	@ 0x26
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80081c4:	78fa      	ldrb	r2, [r7, #3]
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	4613      	mov	r3, r2
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	3326      	adds	r3, #38	@ 0x26
 80081d4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	f040 8209 	bne.w	80085ee <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081f2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081fa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4413      	add	r3, r2
 8008204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008208:	461a      	mov	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800820e:	e1ee      	b.n	80085ee <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008210:	78fa      	ldrb	r2, [r7, #3]
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	4613      	mov	r3, r2
 8008216:	011b      	lsls	r3, r3, #4
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	334d      	adds	r3, #77	@ 0x4d
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b05      	cmp	r3, #5
 8008224:	f040 80c8 	bne.w	80083b8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008228:	78fa      	ldrb	r2, [r7, #3]
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	4613      	mov	r3, r2
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	334d      	adds	r3, #77	@ 0x4d
 8008238:	2202      	movs	r2, #2
 800823a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	4613      	mov	r3, r2
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	440b      	add	r3, r1
 800824a:	331b      	adds	r3, #27
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b01      	cmp	r3, #1
 8008250:	f040 81ce 	bne.w	80085f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008254:	78fa      	ldrb	r2, [r7, #3]
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	4613      	mov	r3, r2
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	1a9b      	subs	r3, r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	3326      	adds	r3, #38	@ 0x26
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b03      	cmp	r3, #3
 8008268:	d16b      	bne.n	8008342 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800826a:	78fa      	ldrb	r2, [r7, #3]
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	011b      	lsls	r3, r3, #4
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	3348      	adds	r3, #72	@ 0x48
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	1c59      	adds	r1, r3, #1
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4613      	mov	r3, r2
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4403      	add	r3, r0
 800828a:	3348      	adds	r3, #72	@ 0x48
 800828c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	3348      	adds	r3, #72	@ 0x48
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d943      	bls.n	800832c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80082a4:	78fa      	ldrb	r2, [r7, #3]
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	4613      	mov	r3, r2
 80082aa:	011b      	lsls	r3, r3, #4
 80082ac:	1a9b      	subs	r3, r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	440b      	add	r3, r1
 80082b2:	3348      	adds	r3, #72	@ 0x48
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80082b8:	78fa      	ldrb	r2, [r7, #3]
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	4613      	mov	r3, r2
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	1a9b      	subs	r3, r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	331b      	adds	r3, #27
 80082c8:	2200      	movs	r2, #0
 80082ca:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	4613      	mov	r3, r2
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	440b      	add	r3, r1
 80082da:	3344      	adds	r3, #68	@ 0x44
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d809      	bhi.n	80082f6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	440b      	add	r3, r1
 80082f0:	331c      	adds	r3, #28
 80082f2:	2201      	movs	r2, #1
 80082f4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	78fa      	ldrb	r2, [r7, #3]
 8008306:	0151      	lsls	r1, r2, #5
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	440a      	add	r2, r1
 800830c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008314:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008316:	78fa      	ldrb	r2, [r7, #3]
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	4613      	mov	r3, r2
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	440b      	add	r3, r1
 8008324:	334c      	adds	r3, #76	@ 0x4c
 8008326:	2204      	movs	r2, #4
 8008328:	701a      	strb	r2, [r3, #0]
 800832a:	e014      	b.n	8008356 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800832c:	78fa      	ldrb	r2, [r7, #3]
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4613      	mov	r3, r2
 8008332:	011b      	lsls	r3, r3, #4
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	334c      	adds	r3, #76	@ 0x4c
 800833c:	2202      	movs	r2, #2
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	e009      	b.n	8008356 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008342:	78fa      	ldrb	r2, [r7, #3]
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	4613      	mov	r3, r2
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	440b      	add	r3, r1
 8008350:	334c      	adds	r3, #76	@ 0x4c
 8008352:	2202      	movs	r2, #2
 8008354:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	3326      	adds	r3, #38	@ 0x26
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800836c:	78fa      	ldrb	r2, [r7, #3]
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	3326      	adds	r3, #38	@ 0x26
 800837c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800837e:	2b02      	cmp	r3, #2
 8008380:	f040 8136 	bne.w	80085f0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	4413      	add	r3, r2
 800838c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800839a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083b0:	461a      	mov	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	e11b      	b.n	80085f0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80083b8:	78fa      	ldrb	r2, [r7, #3]
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	4613      	mov	r3, r2
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	1a9b      	subs	r3, r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	334d      	adds	r3, #77	@ 0x4d
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	f040 8081 	bne.w	80084d2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	4613      	mov	r3, r2
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	334d      	adds	r3, #77	@ 0x4d
 80083e0:	2202      	movs	r2, #2
 80083e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	1a9b      	subs	r3, r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	331b      	adds	r3, #27
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	f040 80fa 	bne.w	80085f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80083fc:	78fa      	ldrb	r2, [r7, #3]
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	334c      	adds	r3, #76	@ 0x4c
 800840c:	2202      	movs	r2, #2
 800840e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	4413      	add	r3, r2
 8008418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	78fa      	ldrb	r2, [r7, #3]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	440a      	add	r2, r1
 8008426:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800842a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800842e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	4413      	add	r3, r2
 8008438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	78fa      	ldrb	r2, [r7, #3]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	440a      	add	r2, r1
 8008446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800844a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800844e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	4413      	add	r3, r2
 8008458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	440a      	add	r2, r1
 8008466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800846a:	f023 0320 	bic.w	r3, r3, #32
 800846e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	3326      	adds	r3, #38	@ 0x26
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00b      	beq.n	800849e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	3326      	adds	r3, #38	@ 0x26
 8008496:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008498:	2b02      	cmp	r3, #2
 800849a:	f040 80a9 	bne.w	80085f0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ca:	461a      	mov	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	e08e      	b.n	80085f0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	334d      	adds	r3, #77	@ 0x4d
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d143      	bne.n	8008570 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	334d      	adds	r3, #77	@ 0x4d
 80084f8:	2202      	movs	r2, #2
 80084fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	334c      	adds	r3, #76	@ 0x4c
 800850c:	2202      	movs	r2, #2
 800850e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008510:	78fa      	ldrb	r2, [r7, #3]
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	4613      	mov	r3, r2
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	3326      	adds	r3, #38	@ 0x26
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	440b      	add	r3, r1
 8008534:	3326      	adds	r3, #38	@ 0x26
 8008536:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008538:	2b02      	cmp	r3, #2
 800853a:	d159      	bne.n	80085f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	4413      	add	r3, r2
 8008544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008552:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800855a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008568:	461a      	mov	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	e03f      	b.n	80085f0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8008570:	78fa      	ldrb	r2, [r7, #3]
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4613      	mov	r3, r2
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	334d      	adds	r3, #77	@ 0x4d
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b08      	cmp	r3, #8
 8008584:	d126      	bne.n	80085d4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	334d      	adds	r3, #77	@ 0x4d
 8008596:	2202      	movs	r2, #2
 8008598:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	6879      	ldr	r1, [r7, #4]
 800859e:	4613      	mov	r3, r2
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	440b      	add	r3, r1
 80085a8:	3344      	adds	r3, #68	@ 0x44
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	1c59      	adds	r1, r3, #1
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4613      	mov	r3, r2
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	1a9b      	subs	r3, r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4403      	add	r3, r0
 80085ba:	3344      	adds	r3, #68	@ 0x44
 80085bc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	4613      	mov	r3, r2
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	1a9b      	subs	r3, r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	334c      	adds	r3, #76	@ 0x4c
 80085ce:	2204      	movs	r2, #4
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e00d      	b.n	80085f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	1a9b      	subs	r3, r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	334d      	adds	r3, #77	@ 0x4d
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	f000 8100 	beq.w	80087ec <HCD_HC_IN_IRQHandler+0xcca>
 80085ec:	e000      	b.n	80085f0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80085ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4613      	mov	r3, r2
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	1a9b      	subs	r3, r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	334c      	adds	r3, #76	@ 0x4c
 8008600:	781a      	ldrb	r2, [r3, #0]
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f011 f920 	bl	801984c <HAL_HCD_HC_NotifyURBChange_Callback>
 800860c:	e0ef      	b.n	80087ee <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f008 f8ed 	bl	80107f6 <USB_ReadChInterrupts>
 800861c:	4603      	mov	r3, r0
 800861e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008622:	2b40      	cmp	r3, #64	@ 0x40
 8008624:	d12f      	bne.n	8008686 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	4413      	add	r3, r2
 800862e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008632:	461a      	mov	r2, r3
 8008634:	2340      	movs	r3, #64	@ 0x40
 8008636:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008638:	78fa      	ldrb	r2, [r7, #3]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	334d      	adds	r3, #77	@ 0x4d
 8008648:	2205      	movs	r2, #5
 800864a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800864c:	78fa      	ldrb	r2, [r7, #3]
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4613      	mov	r3, r2
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	331a      	adds	r3, #26
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d109      	bne.n	8008676 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	1a9b      	subs	r3, r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	3344      	adds	r3, #68	@ 0x44
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	78fa      	ldrb	r2, [r7, #3]
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f008 fe57 	bl	8011332 <USB_HC_Halt>
 8008684:	e0b3      	b.n	80087ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	78fa      	ldrb	r2, [r7, #3]
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f008 f8b1 	bl	80107f6 <USB_ReadChInterrupts>
 8008694:	4603      	mov	r3, r0
 8008696:	f003 0310 	and.w	r3, r3, #16
 800869a:	2b10      	cmp	r3, #16
 800869c:	f040 80a7 	bne.w	80087ee <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	1a9b      	subs	r3, r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	3326      	adds	r3, #38	@ 0x26
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d11b      	bne.n	80086ee <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	1a9b      	subs	r3, r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	3344      	adds	r3, #68	@ 0x44
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	4613      	mov	r3, r2
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	440b      	add	r3, r1
 80086d8:	334d      	adds	r3, #77	@ 0x4d
 80086da:	2204      	movs	r2, #4
 80086dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	78fa      	ldrb	r2, [r7, #3]
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f008 fe23 	bl	8011332 <USB_HC_Halt>
 80086ec:	e03f      	b.n	800876e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	011b      	lsls	r3, r3, #4
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	3326      	adds	r3, #38	@ 0x26
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00a      	beq.n	800871a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	3326      	adds	r3, #38	@ 0x26
 8008714:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008716:	2b02      	cmp	r3, #2
 8008718:	d129      	bne.n	800876e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800871a:	78fa      	ldrb	r2, [r7, #3]
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	1a9b      	subs	r3, r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	3344      	adds	r3, #68	@ 0x44
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	799b      	ldrb	r3, [r3, #6]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <HCD_HC_IN_IRQHandler+0xc2a>
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	331b      	adds	r3, #27
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d110      	bne.n	800876e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800874c:	78fa      	ldrb	r2, [r7, #3]
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	334d      	adds	r3, #77	@ 0x4d
 800875c:	2204      	movs	r2, #4
 800875e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	78fa      	ldrb	r2, [r7, #3]
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f008 fde2 	bl	8011332 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800876e:	78fa      	ldrb	r2, [r7, #3]
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	1a9b      	subs	r3, r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	331b      	adds	r3, #27
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d129      	bne.n	80087d8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	4613      	mov	r3, r2
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	331b      	adds	r3, #27
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	78fa      	ldrb	r2, [r7, #3]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087b6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	78fa      	ldrb	r2, [r7, #3]
 80087c8:	0151      	lsls	r1, r2, #5
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	440a      	add	r2, r1
 80087ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087d2:	f043 0320 	orr.w	r3, r3, #32
 80087d6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e4:	461a      	mov	r2, r3
 80087e6:	2310      	movs	r3, #16
 80087e8:	6093      	str	r3, [r2, #8]
 80087ea:	e000      	b.n	80087ee <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80087ec:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	4611      	mov	r1, r2
 8008812:	4618      	mov	r0, r3
 8008814:	f007 ffef 	bl	80107f6 <USB_ReadChInterrupts>
 8008818:	4603      	mov	r3, r0
 800881a:	f003 0304 	and.w	r3, r3, #4
 800881e:	2b04      	cmp	r3, #4
 8008820:	d11b      	bne.n	800885a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	4413      	add	r3, r2
 800882a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800882e:	461a      	mov	r2, r3
 8008830:	2304      	movs	r3, #4
 8008832:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	334d      	adds	r3, #77	@ 0x4d
 8008844:	2207      	movs	r2, #7
 8008846:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	78fa      	ldrb	r2, [r7, #3]
 800884e:	4611      	mov	r1, r2
 8008850:	4618      	mov	r0, r3
 8008852:	f008 fd6e 	bl	8011332 <USB_HC_Halt>
 8008856:	f000 bc89 	b.w	800916c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	4611      	mov	r1, r2
 8008862:	4618      	mov	r0, r3
 8008864:	f007 ffc7 	bl	80107f6 <USB_ReadChInterrupts>
 8008868:	4603      	mov	r3, r0
 800886a:	f003 0320 	and.w	r3, r3, #32
 800886e:	2b20      	cmp	r3, #32
 8008870:	f040 8082 	bne.w	8008978 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	4413      	add	r3, r2
 800887c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008880:	461a      	mov	r2, r3
 8008882:	2320      	movs	r3, #32
 8008884:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	4613      	mov	r3, r2
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	3319      	adds	r3, #25
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d124      	bne.n	80088e6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	4613      	mov	r3, r2
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	3319      	adds	r3, #25
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4613      	mov	r3, r2
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	334c      	adds	r3, #76	@ 0x4c
 80088c0:	2202      	movs	r2, #2
 80088c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80088c4:	78fa      	ldrb	r2, [r7, #3]
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	4613      	mov	r3, r2
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	1a9b      	subs	r3, r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	440b      	add	r3, r1
 80088d2:	334d      	adds	r3, #77	@ 0x4d
 80088d4:	2203      	movs	r2, #3
 80088d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	78fa      	ldrb	r2, [r7, #3]
 80088de:	4611      	mov	r1, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f008 fd26 	bl	8011332 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	4613      	mov	r3, r2
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	440b      	add	r3, r1
 80088f4:	331a      	adds	r3, #26
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	f040 8437 	bne.w	800916c <HCD_HC_OUT_IRQHandler+0x978>
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	331b      	adds	r3, #27
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f040 842b 	bne.w	800916c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	1a9b      	subs	r3, r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	3326      	adds	r3, #38	@ 0x26
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d009      	beq.n	8008940 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	4613      	mov	r3, r2
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	331b      	adds	r3, #27
 800893c:	2201      	movs	r2, #1
 800893e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008940:	78fa      	ldrb	r2, [r7, #3]
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	1a9b      	subs	r3, r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	334d      	adds	r3, #77	@ 0x4d
 8008950:	2203      	movs	r2, #3
 8008952:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f008 fce8 	bl	8011332 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	011b      	lsls	r3, r3, #4
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	3344      	adds	r3, #68	@ 0x44
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	e3f9      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f007 ff38 	bl	80107f6 <USB_ReadChInterrupts>
 8008986:	4603      	mov	r3, r0
 8008988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800898c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008990:	d111      	bne.n	80089b6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899e:	461a      	mov	r2, r3
 80089a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	4611      	mov	r1, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f008 fcbf 	bl	8011332 <USB_HC_Halt>
 80089b4:	e3da      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f007 ff19 	bl	80107f6 <USB_ReadChInterrupts>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d168      	bne.n	8008aa0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80089ce:	78fa      	ldrb	r2, [r7, #3]
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	4613      	mov	r3, r2
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	440b      	add	r3, r1
 80089dc:	3344      	adds	r3, #68	@ 0x44
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	78fa      	ldrb	r2, [r7, #3]
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f007 ff03 	bl	80107f6 <USB_ReadChInterrupts>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f6:	2b40      	cmp	r3, #64	@ 0x40
 80089f8:	d112      	bne.n	8008a20 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	4613      	mov	r3, r2
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	440b      	add	r3, r1
 8008a08:	3319      	adds	r3, #25
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008a0e:	78fb      	ldrb	r3, [r7, #3]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	2340      	movs	r3, #64	@ 0x40
 8008a1e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008a20:	78fa      	ldrb	r2, [r7, #3]
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4613      	mov	r3, r2
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	1a9b      	subs	r3, r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	331b      	adds	r3, #27
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d019      	beq.n	8008a6a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	331b      	adds	r3, #27
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	0151      	lsls	r1, r2, #5
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	440a      	add	r2, r1
 8008a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a68:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a76:	461a      	mov	r2, r3
 8008a78:	2301      	movs	r3, #1
 8008a7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008a7c:	78fa      	ldrb	r2, [r7, #3]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	334d      	adds	r3, #77	@ 0x4d
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f008 fc4a 	bl	8011332 <USB_HC_Halt>
 8008a9e:	e365      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f007 fea4 	bl	80107f6 <USB_ReadChInterrupts>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab4:	2b40      	cmp	r3, #64	@ 0x40
 8008ab6:	d139      	bne.n	8008b2c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008ab8:	78fa      	ldrb	r2, [r7, #3]
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	4613      	mov	r3, r2
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	1a9b      	subs	r3, r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	440b      	add	r3, r1
 8008ac6:	334d      	adds	r3, #77	@ 0x4d
 8008ac8:	2205      	movs	r2, #5
 8008aca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	331a      	adds	r3, #26
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	011b      	lsls	r3, r3, #4
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	440b      	add	r3, r1
 8008af0:	3319      	adds	r3, #25
 8008af2:	2201      	movs	r2, #1
 8008af4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	4613      	mov	r3, r2
 8008afc:	011b      	lsls	r3, r3, #4
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	440b      	add	r3, r1
 8008b04:	3344      	adds	r3, #68	@ 0x44
 8008b06:	2200      	movs	r2, #0
 8008b08:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	4611      	mov	r1, r2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f008 fc0d 	bl	8011332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b24:	461a      	mov	r2, r3
 8008b26:	2340      	movs	r3, #64	@ 0x40
 8008b28:	6093      	str	r3, [r2, #8]
 8008b2a:	e31f      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	78fa      	ldrb	r2, [r7, #3]
 8008b32:	4611      	mov	r1, r2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f007 fe5e 	bl	80107f6 <USB_ReadChInterrupts>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d11a      	bne.n	8008b7a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b50:	461a      	mov	r2, r3
 8008b52:	2308      	movs	r3, #8
 8008b54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	440b      	add	r3, r1
 8008b64:	334d      	adds	r3, #77	@ 0x4d
 8008b66:	2206      	movs	r2, #6
 8008b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f008 fbdd 	bl	8011332 <USB_HC_Halt>
 8008b78:	e2f8      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f007 fe37 	bl	80107f6 <USB_ReadChInterrupts>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f003 0310 	and.w	r3, r3, #16
 8008b8e:	2b10      	cmp	r3, #16
 8008b90:	d144      	bne.n	8008c1c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	4613      	mov	r3, r2
 8008b98:	011b      	lsls	r3, r3, #4
 8008b9a:	1a9b      	subs	r3, r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3344      	adds	r3, #68	@ 0x44
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	6879      	ldr	r1, [r7, #4]
 8008baa:	4613      	mov	r3, r2
 8008bac:	011b      	lsls	r3, r3, #4
 8008bae:	1a9b      	subs	r3, r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	440b      	add	r3, r1
 8008bb4:	334d      	adds	r3, #77	@ 0x4d
 8008bb6:	2204      	movs	r2, #4
 8008bb8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008bba:	78fa      	ldrb	r2, [r7, #3]
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	1a9b      	subs	r3, r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	3319      	adds	r3, #25
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d114      	bne.n	8008bfa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008bd0:	78fa      	ldrb	r2, [r7, #3]
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	1a9b      	subs	r3, r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	3318      	adds	r3, #24
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d109      	bne.n	8008bfa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	3319      	adds	r3, #25
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f008 fb95 	bl	8011332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c14:	461a      	mov	r2, r3
 8008c16:	2310      	movs	r3, #16
 8008c18:	6093      	str	r3, [r2, #8]
 8008c1a:	e2a7      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	78fa      	ldrb	r2, [r7, #3]
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f007 fde6 	bl	80107f6 <USB_ReadChInterrupts>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c30:	2b80      	cmp	r3, #128	@ 0x80
 8008c32:	f040 8083 	bne.w	8008d3c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	799b      	ldrb	r3, [r3, #6]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d111      	bne.n	8008c62 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8008c3e:	78fa      	ldrb	r2, [r7, #3]
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	4613      	mov	r3, r2
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	1a9b      	subs	r3, r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	334d      	adds	r3, #77	@ 0x4d
 8008c4e:	2207      	movs	r2, #7
 8008c50:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f008 fb69 	bl	8011332 <USB_HC_Halt>
 8008c60:	e062      	b.n	8008d28 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	4613      	mov	r3, r2
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	1a9b      	subs	r3, r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	440b      	add	r3, r1
 8008c70:	3344      	adds	r3, #68	@ 0x44
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	1c59      	adds	r1, r3, #1
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	1a9b      	subs	r3, r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4403      	add	r3, r0
 8008c82:	3344      	adds	r3, #68	@ 0x44
 8008c84:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008c86:	78fa      	ldrb	r2, [r7, #3]
 8008c88:	6879      	ldr	r1, [r7, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	1a9b      	subs	r3, r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	3344      	adds	r3, #68	@ 0x44
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d922      	bls.n	8008ce2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	3344      	adds	r3, #68	@ 0x44
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	011b      	lsls	r3, r3, #4
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	334c      	adds	r3, #76	@ 0x4c
 8008cc0:	2204      	movs	r2, #4
 8008cc2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	334c      	adds	r3, #76	@ 0x4c
 8008cd4:	781a      	ldrb	r2, [r3, #0]
 8008cd6:	78fb      	ldrb	r3, [r7, #3]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f010 fdb6 	bl	801984c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008ce0:	e022      	b.n	8008d28 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	334c      	adds	r3, #76	@ 0x4c
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d0c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d14:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d22:	461a      	mov	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d34:	461a      	mov	r2, r3
 8008d36:	2380      	movs	r3, #128	@ 0x80
 8008d38:	6093      	str	r3, [r2, #8]
 8008d3a:	e217      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	78fa      	ldrb	r2, [r7, #3]
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f007 fd56 	bl	80107f6 <USB_ReadChInterrupts>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d54:	d11b      	bne.n	8008d8e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008d56:	78fa      	ldrb	r2, [r7, #3]
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	011b      	lsls	r3, r3, #4
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	440b      	add	r3, r1
 8008d64:	334d      	adds	r3, #77	@ 0x4d
 8008d66:	2209      	movs	r2, #9
 8008d68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	4611      	mov	r1, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f008 fadd 	bl	8011332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d84:	461a      	mov	r2, r3
 8008d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d8a:	6093      	str	r3, [r2, #8]
 8008d8c:	e1ee      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	78fa      	ldrb	r2, [r7, #3]
 8008d94:	4611      	mov	r1, r2
 8008d96:	4618      	mov	r0, r3
 8008d98:	f007 fd2d 	bl	80107f6 <USB_ReadChInterrupts>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	f040 81df 	bne.w	8009166 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008db4:	461a      	mov	r2, r3
 8008db6:	2302      	movs	r3, #2
 8008db8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	011b      	lsls	r3, r3, #4
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	440b      	add	r3, r1
 8008dc8:	334d      	adds	r3, #77	@ 0x4d
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	f040 8093 	bne.w	8008ef8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008dd2:	78fa      	ldrb	r2, [r7, #3]
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	334d      	adds	r3, #77	@ 0x4d
 8008de2:	2202      	movs	r2, #2
 8008de4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	334c      	adds	r3, #76	@ 0x4c
 8008df6:	2201      	movs	r2, #1
 8008df8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008dfa:	78fa      	ldrb	r2, [r7, #3]
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	3326      	adds	r3, #38	@ 0x26
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d00b      	beq.n	8008e28 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008e10:	78fa      	ldrb	r2, [r7, #3]
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	3326      	adds	r3, #38	@ 0x26
 8008e20:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	f040 8190 	bne.w	8009148 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	799b      	ldrb	r3, [r3, #6]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d115      	bne.n	8008e5c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	4613      	mov	r3, r2
 8008e36:	011b      	lsls	r3, r3, #4
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	440b      	add	r3, r1
 8008e3e:	333d      	adds	r3, #61	@ 0x3d
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	f083 0301 	eor.w	r3, r3, #1
 8008e48:	b2d8      	uxtb	r0, r3
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	1a9b      	subs	r3, r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	333d      	adds	r3, #61	@ 0x3d
 8008e58:	4602      	mov	r2, r0
 8008e5a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	799b      	ldrb	r3, [r3, #6]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	f040 8171 	bne.w	8009148 <HCD_HC_OUT_IRQHandler+0x954>
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	011b      	lsls	r3, r3, #4
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	3334      	adds	r3, #52	@ 0x34
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 8165 	beq.w	8009148 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	4613      	mov	r3, r2
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	3334      	adds	r3, #52	@ 0x34
 8008e8e:	6819      	ldr	r1, [r3, #0]
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4613      	mov	r3, r2
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4403      	add	r3, r0
 8008e9e:	3328      	adds	r3, #40	@ 0x28
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	440b      	add	r3, r1
 8008ea4:	1e59      	subs	r1, r3, #1
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	1a9b      	subs	r3, r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4403      	add	r3, r0
 8008eb4:	3328      	adds	r3, #40	@ 0x28
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ebc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 813f 	beq.w	8009148 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	011b      	lsls	r3, r3, #4
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	440b      	add	r3, r1
 8008ed8:	333d      	adds	r3, #61	@ 0x3d
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	78fa      	ldrb	r2, [r7, #3]
 8008ede:	f083 0301 	eor.w	r3, r3, #1
 8008ee2:	b2d8      	uxtb	r0, r3
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	011b      	lsls	r3, r3, #4
 8008eea:	1a9b      	subs	r3, r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	333d      	adds	r3, #61	@ 0x3d
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	e127      	b.n	8009148 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4613      	mov	r3, r2
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	1a9b      	subs	r3, r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	334d      	adds	r3, #77	@ 0x4d
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d120      	bne.n	8008f50 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	4613      	mov	r3, r2
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	1a9b      	subs	r3, r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	334d      	adds	r3, #77	@ 0x4d
 8008f1e:	2202      	movs	r2, #2
 8008f20:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	011b      	lsls	r3, r3, #4
 8008f2a:	1a9b      	subs	r3, r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	331b      	adds	r3, #27
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	f040 8107 	bne.w	8009148 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f3a:	78fa      	ldrb	r2, [r7, #3]
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	440b      	add	r3, r1
 8008f48:	334c      	adds	r3, #76	@ 0x4c
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	e0fb      	b.n	8009148 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	4613      	mov	r3, r2
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	1a9b      	subs	r3, r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	440b      	add	r3, r1
 8008f5e:	334d      	adds	r3, #77	@ 0x4d
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d13a      	bne.n	8008fdc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	011b      	lsls	r3, r3, #4
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	440b      	add	r3, r1
 8008f74:	334d      	adds	r3, #77	@ 0x4d
 8008f76:	2202      	movs	r2, #2
 8008f78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	1a9b      	subs	r3, r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	440b      	add	r3, r1
 8008f88:	334c      	adds	r3, #76	@ 0x4c
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	1a9b      	subs	r3, r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	331b      	adds	r3, #27
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	f040 80d1 	bne.w	8009148 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	331b      	adds	r3, #27
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	78fa      	ldrb	r2, [r7, #3]
 8008fca:	0151      	lsls	r1, r2, #5
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	440a      	add	r2, r1
 8008fd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fd8:	6053      	str	r3, [r2, #4]
 8008fda:	e0b5      	b.n	8009148 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	334d      	adds	r3, #77	@ 0x4d
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b05      	cmp	r3, #5
 8008ff0:	d114      	bne.n	800901c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	011b      	lsls	r3, r3, #4
 8008ffa:	1a9b      	subs	r3, r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	334d      	adds	r3, #77	@ 0x4d
 8009002:	2202      	movs	r2, #2
 8009004:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009006:	78fa      	ldrb	r2, [r7, #3]
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	4613      	mov	r3, r2
 800900c:	011b      	lsls	r3, r3, #4
 800900e:	1a9b      	subs	r3, r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	440b      	add	r3, r1
 8009014:	334c      	adds	r3, #76	@ 0x4c
 8009016:	2202      	movs	r2, #2
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	e095      	b.n	8009148 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	4613      	mov	r3, r2
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	1a9b      	subs	r3, r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	440b      	add	r3, r1
 800902a:	334d      	adds	r3, #77	@ 0x4d
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b06      	cmp	r3, #6
 8009030:	d114      	bne.n	800905c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	440b      	add	r3, r1
 8009040:	334d      	adds	r3, #77	@ 0x4d
 8009042:	2202      	movs	r2, #2
 8009044:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	4613      	mov	r3, r2
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	1a9b      	subs	r3, r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	334c      	adds	r3, #76	@ 0x4c
 8009056:	2205      	movs	r2, #5
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	e075      	b.n	8009148 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800905c:	78fa      	ldrb	r2, [r7, #3]
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4613      	mov	r3, r2
 8009062:	011b      	lsls	r3, r3, #4
 8009064:	1a9b      	subs	r3, r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	334d      	adds	r3, #77	@ 0x4d
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b07      	cmp	r3, #7
 8009070:	d00a      	beq.n	8009088 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009072:	78fa      	ldrb	r2, [r7, #3]
 8009074:	6879      	ldr	r1, [r7, #4]
 8009076:	4613      	mov	r3, r2
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	440b      	add	r3, r1
 8009080:	334d      	adds	r3, #77	@ 0x4d
 8009082:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009084:	2b09      	cmp	r3, #9
 8009086:	d170      	bne.n	800916a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	4613      	mov	r3, r2
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	440b      	add	r3, r1
 8009096:	334d      	adds	r3, #77	@ 0x4d
 8009098:	2202      	movs	r2, #2
 800909a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	4613      	mov	r3, r2
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	440b      	add	r3, r1
 80090aa:	3344      	adds	r3, #68	@ 0x44
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	1c59      	adds	r1, r3, #1
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4403      	add	r3, r0
 80090bc:	3344      	adds	r3, #68	@ 0x44
 80090be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	3344      	adds	r3, #68	@ 0x44
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d914      	bls.n	8009100 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	6879      	ldr	r1, [r7, #4]
 80090da:	4613      	mov	r3, r2
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	1a9b      	subs	r3, r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	440b      	add	r3, r1
 80090e4:	3344      	adds	r3, #68	@ 0x44
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80090ea:	78fa      	ldrb	r2, [r7, #3]
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	4613      	mov	r3, r2
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	440b      	add	r3, r1
 80090f8:	334c      	adds	r3, #76	@ 0x4c
 80090fa:	2204      	movs	r2, #4
 80090fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090fe:	e022      	b.n	8009146 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	4613      	mov	r3, r2
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	1a9b      	subs	r3, r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	334c      	adds	r3, #76	@ 0x4c
 8009110:	2202      	movs	r2, #2
 8009112:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800912a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009132:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	4413      	add	r3, r2
 800913c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009140:	461a      	mov	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009146:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	4613      	mov	r3, r2
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	440b      	add	r3, r1
 8009156:	334c      	adds	r3, #76	@ 0x4c
 8009158:	781a      	ldrb	r2, [r3, #0]
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f010 fb74 	bl	801984c <HAL_HCD_HC_NotifyURBChange_Callback>
 8009164:	e002      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009166:	bf00      	nop
 8009168:	e000      	b.n	800916c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800916a:	bf00      	nop
  }
}
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b08a      	sub	sp, #40	@ 0x28
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	0c5b      	lsrs	r3, r3, #17
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	091b      	lsrs	r3, r3, #4
 80091a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d004      	beq.n	80091b8 <HCD_RXQLVL_IRQHandler+0x46>
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b05      	cmp	r3, #5
 80091b2:	f000 80b6 	beq.w	8009322 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80091b6:	e0b7      	b.n	8009328 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 80b3 	beq.w	8009326 <HCD_RXQLVL_IRQHandler+0x1b4>
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	69ba      	ldr	r2, [r7, #24]
 80091c4:	4613      	mov	r3, r2
 80091c6:	011b      	lsls	r3, r3, #4
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	332c      	adds	r3, #44	@ 0x2c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80a7 	beq.w	8009326 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	4613      	mov	r3, r2
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	1a9b      	subs	r3, r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	3338      	adds	r3, #56	@ 0x38
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	18d1      	adds	r1, r2, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	4613      	mov	r3, r2
 80091f4:	011b      	lsls	r3, r3, #4
 80091f6:	1a9b      	subs	r3, r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4403      	add	r3, r0
 80091fc:	3334      	adds	r3, #52	@ 0x34
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4299      	cmp	r1, r3
 8009202:	f200 8083 	bhi.w	800930c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	4613      	mov	r3, r2
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	440b      	add	r3, r1
 8009218:	332c      	adds	r3, #44	@ 0x2c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	b292      	uxth	r2, r2
 8009220:	4619      	mov	r1, r3
 8009222:	f007 fa7d 	bl	8010720 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	4613      	mov	r3, r2
 800922c:	011b      	lsls	r3, r3, #4
 800922e:	1a9b      	subs	r3, r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	440b      	add	r3, r1
 8009234:	332c      	adds	r3, #44	@ 0x2c
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	18d1      	adds	r1, r2, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	4613      	mov	r3, r2
 8009242:	011b      	lsls	r3, r3, #4
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4403      	add	r3, r0
 800924a:	332c      	adds	r3, #44	@ 0x2c
 800924c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	4613      	mov	r3, r2
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	3338      	adds	r3, #56	@ 0x38
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	18d1      	adds	r1, r2, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	4613      	mov	r3, r2
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	1a9b      	subs	r3, r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4403      	add	r3, r0
 8009272:	3338      	adds	r3, #56	@ 0x38
 8009274:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	4413      	add	r3, r2
 800927e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	0cdb      	lsrs	r3, r3, #19
 8009286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800928a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	4613      	mov	r3, r2
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	3328      	adds	r3, #40	@ 0x28
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d13f      	bne.n	8009326 <HCD_RXQLVL_IRQHandler+0x1b4>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d03c      	beq.n	8009326 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80092c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d8:	461a      	mov	r2, r3
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	4613      	mov	r3, r2
 80092e4:	011b      	lsls	r3, r3, #4
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	333c      	adds	r3, #60	@ 0x3c
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f083 0301 	eor.w	r3, r3, #1
 80092f4:	b2d8      	uxtb	r0, r3
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	4613      	mov	r3, r2
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	440b      	add	r3, r1
 8009304:	333c      	adds	r3, #60	@ 0x3c
 8009306:	4602      	mov	r2, r0
 8009308:	701a      	strb	r2, [r3, #0]
      break;
 800930a:	e00c      	b.n	8009326 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	4613      	mov	r3, r2
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	334c      	adds	r3, #76	@ 0x4c
 800931c:	2204      	movs	r2, #4
 800931e:	701a      	strb	r2, [r3, #0]
      break;
 8009320:	e001      	b.n	8009326 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009322:	bf00      	nop
 8009324:	e000      	b.n	8009328 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009326:	bf00      	nop
  }
}
 8009328:	bf00      	nop
 800932a:	3728      	adds	r7, #40	@ 0x28
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800935c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b02      	cmp	r3, #2
 8009366:	d10b      	bne.n	8009380 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b01      	cmp	r3, #1
 8009370:	d102      	bne.n	8009378 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f010 fa4e 	bl	8019814 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f043 0302 	orr.w	r3, r3, #2
 800937e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f003 0308 	and.w	r3, r3, #8
 8009386:	2b08      	cmp	r3, #8
 8009388:	d132      	bne.n	80093f0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f043 0308 	orr.w	r3, r3, #8
 8009390:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b04      	cmp	r3, #4
 800939a:	d126      	bne.n	80093ea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7a5b      	ldrb	r3, [r3, #9]
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d113      	bne.n	80093cc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80093aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093ae:	d106      	bne.n	80093be <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2102      	movs	r1, #2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f007 fb3c 	bl	8010a34 <USB_InitFSLSPClkSel>
 80093bc:	e011      	b.n	80093e2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2101      	movs	r1, #1
 80093c4:	4618      	mov	r0, r3
 80093c6:	f007 fb35 	bl	8010a34 <USB_InitFSLSPClkSel>
 80093ca:	e00a      	b.n	80093e2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	79db      	ldrb	r3, [r3, #7]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d106      	bne.n	80093e2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093da:	461a      	mov	r2, r3
 80093dc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80093e0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f010 fa44 	bl	8019870 <HAL_HCD_PortEnabled_Callback>
 80093e8:	e002      	b.n	80093f0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f010 fa4e 	bl	801988c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d103      	bne.n	8009402 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f043 0320 	orr.w	r3, r3, #32
 8009400:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009408:	461a      	mov	r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6013      	str	r3, [r2, #0]
}
 800940e:	bf00      	nop
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e08b      	b.n	8009542 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d106      	bne.n	8009444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7fa f88c 	bl	800355c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2224      	movs	r2, #36	@ 0x24
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0201 	bic.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009468:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009478:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d107      	bne.n	8009492 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800948e:	609a      	str	r2, [r3, #8]
 8009490:	e006      	b.n	80094a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689a      	ldr	r2, [r3, #8]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800949e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d108      	bne.n	80094ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094b6:	605a      	str	r2, [r3, #4]
 80094b8:	e007      	b.n	80094ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80094c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6859      	ldr	r1, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	4b1d      	ldr	r3, [pc, #116]	@ (800954c <HAL_I2C_Init+0x134>)
 80094d6:	430b      	orrs	r3, r1
 80094d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80094e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691a      	ldr	r2, [r3, #16]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	430a      	orrs	r2, r1
 8009502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	69d9      	ldr	r1, [r3, #28]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a1a      	ldr	r2, [r3, #32]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	02008000 	.word	0x02008000

08009550 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b20      	cmp	r3, #32
 8009564:	d138      	bne.n	80095d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009570:	2302      	movs	r3, #2
 8009572:	e032      	b.n	80095da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2224      	movs	r2, #36	@ 0x24
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0201 	bic.w	r2, r2, #1
 8009592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6819      	ldr	r1, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0201 	orr.w	r2, r2, #1
 80095c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2220      	movs	r2, #32
 80095c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e000      	b.n	80095da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80095d8:	2302      	movs	r3, #2
  }
}
 80095da:	4618      	mov	r0, r3
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b085      	sub	sp, #20
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	d139      	bne.n	8009670 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009602:	2b01      	cmp	r3, #1
 8009604:	d101      	bne.n	800960a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009606:	2302      	movs	r3, #2
 8009608:	e033      	b.n	8009672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2224      	movs	r2, #36	@ 0x24
 8009616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 0201 	bic.w	r2, r2, #1
 8009628:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009638:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	021b      	lsls	r3, r3, #8
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0201 	orr.w	r2, r2, #1
 800965a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	e000      	b.n	8009672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009670:	2302      	movs	r3, #2
  }
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e08f      	b.n	80097b0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d106      	bne.n	80096aa <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7fa f801 	bl	80036ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2202      	movs	r2, #2
 80096ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80096c0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6999      	ldr	r1, [r3, #24]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80096d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	041b      	lsls	r3, r3, #16
 80096ec:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6999      	ldr	r1, [r3, #24]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	041b      	lsls	r3, r3, #16
 8009702:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a19      	ldr	r1, [r3, #32]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	430a      	orrs	r2, r1
 8009710:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009716:	041b      	lsls	r3, r3, #16
 8009718:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	430a      	orrs	r2, r1
 8009726:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972c:	041b      	lsls	r3, r3, #16
 800972e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	430a      	orrs	r2, r1
 800973c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800974e:	041b      	lsls	r3, r3, #16
 8009750:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4313      	orrs	r3, r2
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 0206 	orr.w	r2, r2, #6
 800978c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	699a      	ldr	r2, [r3, #24]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f042 0201 	orr.w	r2, r2, #1
 800979c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d023      	beq.n	8009822 <HAL_LTDC_IRQHandler+0x6a>
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01e      	beq.n	8009822 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f022 0204 	bic.w	r2, r2, #4
 80097f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2204      	movs	r2, #4
 80097fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009802:	f043 0201 	orr.w	r2, r3, #1
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2204      	movs	r2, #4
 8009810:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f86f 	bl	8009900 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d023      	beq.n	8009874 <HAL_LTDC_IRQHandler+0xbc>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d01e      	beq.n	8009874 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 0202 	bic.w	r2, r2, #2
 8009844:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2202      	movs	r2, #2
 800984c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009854:	f043 0202 	orr.w	r2, r3, #2
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2204      	movs	r2, #4
 8009862:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f846 	bl	8009900 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d01b      	beq.n	80098b6 <HAL_LTDC_IRQHandler+0xfe>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d016      	beq.n	80098b6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0201 	bic.w	r2, r2, #1
 8009896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2201      	movs	r2, #1
 800989e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f82f 	bl	8009914 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01b      	beq.n	80098f8 <HAL_LTDC_IRQHandler+0x140>
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f003 0308 	and.w	r3, r3, #8
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d016      	beq.n	80098f8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0208 	bic.w	r2, r2, #8
 80098d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2208      	movs	r2, #8
 80098e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f818 	bl	8009928 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80098f8:	bf00      	nop
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800993c:	b5b0      	push	{r4, r5, r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_LTDC_ConfigLayer+0x1a>
 8009952:	2302      	movs	r3, #2
 8009954:	e02c      	b.n	80099b0 <HAL_LTDC_ConfigLayer+0x74>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2202      	movs	r2, #2
 8009962:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2134      	movs	r1, #52	@ 0x34
 800996c:	fb01 f303 	mul.w	r3, r1, r3
 8009970:	4413      	add	r3, r2
 8009972:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4614      	mov	r4, r2
 800997a:	461d      	mov	r5, r3
 800997c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800997e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	68b9      	ldr	r1, [r7, #8]
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 f811 	bl	80099b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2201      	movs	r2, #1
 800999c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bdb0      	pop	{r4, r5, r7, pc}

080099b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b089      	sub	sp, #36	@ 0x24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	0c1b      	lsrs	r3, r3, #16
 80099d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099d4:	4413      	add	r3, r2
 80099d6:	041b      	lsls	r3, r3, #16
 80099d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	01db      	lsls	r3, r3, #7
 80099e4:	4413      	add	r3, r2
 80099e6:	3384      	adds	r3, #132	@ 0x84
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	6812      	ldr	r2, [r2, #0]
 80099ee:	4611      	mov	r1, r2
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	01d2      	lsls	r2, r2, #7
 80099f4:	440a      	add	r2, r1
 80099f6:	3284      	adds	r2, #132	@ 0x84
 80099f8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80099fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	0c1b      	lsrs	r3, r3, #16
 8009a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a0e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a10:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4619      	mov	r1, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	01db      	lsls	r3, r3, #7
 8009a1c:	440b      	add	r3, r1
 8009a1e:	3384      	adds	r3, #132	@ 0x84
 8009a20:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a36:	4413      	add	r3, r2
 8009a38:	041b      	lsls	r3, r3, #16
 8009a3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	01db      	lsls	r3, r3, #7
 8009a46:	4413      	add	r3, r2
 8009a48:	3384      	adds	r3, #132	@ 0x84
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	6812      	ldr	r2, [r2, #0]
 8009a50:	4611      	mov	r1, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	01d2      	lsls	r2, r2, #7
 8009a56:	440a      	add	r2, r1
 8009a58:	3284      	adds	r2, #132	@ 0x84
 8009a5a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009a5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a6e:	4413      	add	r3, r2
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4619      	mov	r1, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	01db      	lsls	r3, r3, #7
 8009a7c:	440b      	add	r3, r1
 8009a7e:	3384      	adds	r3, #132	@ 0x84
 8009a80:	4619      	mov	r1, r3
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	01db      	lsls	r3, r3, #7
 8009a92:	4413      	add	r3, r2
 8009a94:	3384      	adds	r3, #132	@ 0x84
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	6812      	ldr	r2, [r2, #0]
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	01d2      	lsls	r2, r2, #7
 8009aa2:	440a      	add	r2, r1
 8009aa4:	3284      	adds	r2, #132	@ 0x84
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	01db      	lsls	r3, r3, #7
 8009ab6:	4413      	add	r3, r2
 8009ab8:	3384      	adds	r3, #132	@ 0x84
 8009aba:	461a      	mov	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009ac8:	021b      	lsls	r3, r3, #8
 8009aca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009ad2:	041b      	lsls	r3, r3, #16
 8009ad4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	061b      	lsls	r3, r3, #24
 8009adc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	431a      	orrs	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4619      	mov	r1, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	01db      	lsls	r3, r3, #7
 8009af8:	440b      	add	r3, r1
 8009afa:	3384      	adds	r3, #132	@ 0x84
 8009afc:	4619      	mov	r1, r3
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	01db      	lsls	r3, r3, #7
 8009b0e:	4413      	add	r3, r2
 8009b10:	3384      	adds	r3, #132	@ 0x84
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	6812      	ldr	r2, [r2, #0]
 8009b18:	4611      	mov	r1, r2
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	01d2      	lsls	r2, r2, #7
 8009b1e:	440a      	add	r2, r1
 8009b20:	3284      	adds	r2, #132	@ 0x84
 8009b22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009b26:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	01db      	lsls	r3, r3, #7
 8009b32:	4413      	add	r3, r2
 8009b34:	3384      	adds	r3, #132	@ 0x84
 8009b36:	461a      	mov	r2, r3
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	01db      	lsls	r3, r3, #7
 8009b48:	4413      	add	r3, r2
 8009b4a:	3384      	adds	r3, #132	@ 0x84
 8009b4c:	69da      	ldr	r2, [r3, #28]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4619      	mov	r1, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	01db      	lsls	r3, r3, #7
 8009b58:	440b      	add	r3, r1
 8009b5a:	3384      	adds	r3, #132	@ 0x84
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8009c9c <LTDC_SetConfig+0x2e4>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	69da      	ldr	r2, [r3, #28]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	68f9      	ldr	r1, [r7, #12]
 8009b6e:	6809      	ldr	r1, [r1, #0]
 8009b70:	4608      	mov	r0, r1
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	01c9      	lsls	r1, r1, #7
 8009b76:	4401      	add	r1, r0
 8009b78:	3184      	adds	r1, #132	@ 0x84
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	01db      	lsls	r3, r3, #7
 8009b88:	4413      	add	r3, r2
 8009b8a:	3384      	adds	r3, #132	@ 0x84
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b92:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d102      	bne.n	8009ba2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	61fb      	str	r3, [r7, #28]
 8009ba0:	e01b      	b.n	8009bda <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d102      	bne.n	8009bb0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009baa:	2303      	movs	r3, #3
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	e014      	b.n	8009bda <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d00b      	beq.n	8009bd0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d007      	beq.n	8009bd0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d003      	beq.n	8009bd0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009bcc:	2b07      	cmp	r3, #7
 8009bce:	d102      	bne.n	8009bd6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	e001      	b.n	8009bda <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	01db      	lsls	r3, r3, #7
 8009be4:	4413      	add	r3, r2
 8009be6:	3384      	adds	r3, #132	@ 0x84
 8009be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	6812      	ldr	r2, [r2, #0]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	01d2      	lsls	r2, r2, #7
 8009bf4:	440a      	add	r2, r1
 8009bf6:	3284      	adds	r2, #132	@ 0x84
 8009bf8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	fb02 f303 	mul.w	r3, r2, r3
 8009c08:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	6859      	ldr	r1, [r3, #4]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	1acb      	subs	r3, r1, r3
 8009c14:	69f9      	ldr	r1, [r7, #28]
 8009c16:	fb01 f303 	mul.w	r3, r1, r3
 8009c1a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009c1c:	68f9      	ldr	r1, [r7, #12]
 8009c1e:	6809      	ldr	r1, [r1, #0]
 8009c20:	4608      	mov	r0, r1
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	01c9      	lsls	r1, r1, #7
 8009c26:	4401      	add	r1, r0
 8009c28:	3184      	adds	r1, #132	@ 0x84
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	01db      	lsls	r3, r3, #7
 8009c38:	4413      	add	r3, r2
 8009c3a:	3384      	adds	r3, #132	@ 0x84
 8009c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4619      	mov	r1, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	01db      	lsls	r3, r3, #7
 8009c48:	440b      	add	r3, r1
 8009c4a:	3384      	adds	r3, #132	@ 0x84
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4b14      	ldr	r3, [pc, #80]	@ (8009ca0 <LTDC_SetConfig+0x2e8>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	01db      	lsls	r3, r3, #7
 8009c5e:	4413      	add	r3, r2
 8009c60:	3384      	adds	r3, #132	@ 0x84
 8009c62:	461a      	mov	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c68:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	01db      	lsls	r3, r3, #7
 8009c74:	4413      	add	r3, r2
 8009c76:	3384      	adds	r3, #132	@ 0x84
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	6812      	ldr	r2, [r2, #0]
 8009c7e:	4611      	mov	r1, r2
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	01d2      	lsls	r2, r2, #7
 8009c84:	440a      	add	r2, r1
 8009c86:	3284      	adds	r2, #132	@ 0x84
 8009c88:	f043 0301 	orr.w	r3, r3, #1
 8009c8c:	6013      	str	r3, [r2, #0]
}
 8009c8e:	bf00      	nop
 8009c90:	3724      	adds	r7, #36	@ 0x24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	fffff8f8 	.word	0xfffff8f8
 8009ca0:	fffff800 	.word	0xfffff800

08009ca4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a04      	ldr	r2, [pc, #16]	@ (8009cc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cb2:	6013      	str	r3, [r2, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40007000 	.word	0x40007000

08009cc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009cce:	4b23      	ldr	r3, [pc, #140]	@ (8009d5c <HAL_PWREx_EnableOverDrive+0x98>)
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd2:	4a22      	ldr	r2, [pc, #136]	@ (8009d5c <HAL_PWREx_EnableOverDrive+0x98>)
 8009cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8009cda:	4b20      	ldr	r3, [pc, #128]	@ (8009d5c <HAL_PWREx_EnableOverDrive+0x98>)
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ce2:	603b      	str	r3, [r7, #0]
 8009ce4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8009d60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a1d      	ldr	r2, [pc, #116]	@ (8009d60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cf0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009cf2:	f7fb f9d3 	bl	800509c <HAL_GetTick>
 8009cf6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009cf8:	e009      	b.n	8009d0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009cfa:	f7fb f9cf 	bl	800509c <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d08:	d901      	bls.n	8009d0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e022      	b.n	8009d54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009d0e:	4b14      	ldr	r3, [pc, #80]	@ (8009d60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d1a:	d1ee      	bne.n	8009cfa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009d1c:	4b10      	ldr	r3, [pc, #64]	@ (8009d60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a0f      	ldr	r2, [pc, #60]	@ (8009d60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d28:	f7fb f9b8 	bl	800509c <HAL_GetTick>
 8009d2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009d2e:	e009      	b.n	8009d44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009d30:	f7fb f9b4 	bl	800509c <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d3e:	d901      	bls.n	8009d44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e007      	b.n	8009d54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009d44:	4b06      	ldr	r3, [pc, #24]	@ (8009d60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d50:	d1ee      	bne.n	8009d30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	40023800 	.word	0x40023800
 8009d60:	40007000 	.word	0x40007000

08009d64 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af02      	add	r7, sp, #8
 8009d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009d6c:	f7fb f996 	bl	800509c <HAL_GetTick>
 8009d70:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e067      	b.n	8009e4c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10b      	bne.n	8009da0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7f9 fd53 	bl	800383c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009d96:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f85e 	bl	8009e5c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	021a      	lsls	r2, r3, #8
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2120      	movs	r1, #32
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f856 	bl	8009e78 <QSPI_WaitFlagStateUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009dd0:	7afb      	ldrb	r3, [r7, #11]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d135      	bne.n	8009e42 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8009e54 <HAL_QSPI_Init+0xf0>)
 8009dde:	4013      	ands	r3, r2
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6852      	ldr	r2, [r2, #4]
 8009de4:	0611      	lsls	r1, r2, #24
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	68d2      	ldr	r2, [r2, #12]
 8009dea:	4311      	orrs	r1, r2
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	69d2      	ldr	r2, [r2, #28]
 8009df0:	4311      	orrs	r1, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6a12      	ldr	r2, [r2, #32]
 8009df6:	4311      	orrs	r1, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6812      	ldr	r2, [r2, #0]
 8009dfc:	430b      	orrs	r3, r1
 8009dfe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	4b14      	ldr	r3, [pc, #80]	@ (8009e58 <HAL_QSPI_Init+0xf4>)
 8009e08:	4013      	ands	r3, r2
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	6912      	ldr	r2, [r2, #16]
 8009e0e:	0411      	lsls	r1, r2, #16
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6952      	ldr	r2, [r2, #20]
 8009e14:	4311      	orrs	r1, r2
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	6992      	ldr	r2, [r2, #24]
 8009e1a:	4311      	orrs	r1, r2
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	6812      	ldr	r2, [r2, #0]
 8009e20:	430b      	orrs	r3, r1
 8009e22:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f042 0201 	orr.w	r2, r2, #1
 8009e32:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	00ffff2f 	.word	0x00ffff2f
 8009e58:	ffe0f8fe 	.word	0xffe0f8fe

08009e5c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	683a      	ldr	r2, [r7, #0]
 8009e6a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	4613      	mov	r3, r2
 8009e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009e88:	e01a      	b.n	8009ec0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d016      	beq.n	8009ec0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e92:	f7fb f903 	bl	800509c <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d302      	bcc.n	8009ea8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10b      	bne.n	8009ec0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2204      	movs	r2, #4
 8009eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb4:	f043 0201 	orr.w	r2, r3, #1
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e00e      	b.n	8009ede <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689a      	ldr	r2, [r3, #8]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	4013      	ands	r3, r2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	bf14      	ite	ne
 8009ece:	2301      	movne	r3, #1
 8009ed0:	2300      	moveq	r3, #0
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d1d6      	bne.n	8009e8a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e291      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 8087 	beq.w	800a01a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f0c:	4b96      	ldr	r3, [pc, #600]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f003 030c 	and.w	r3, r3, #12
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d00c      	beq.n	8009f32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f18:	4b93      	ldr	r3, [pc, #588]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	f003 030c 	and.w	r3, r3, #12
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d112      	bne.n	8009f4a <HAL_RCC_OscConfig+0x62>
 8009f24:	4b90      	ldr	r3, [pc, #576]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f30:	d10b      	bne.n	8009f4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f32:	4b8d      	ldr	r3, [pc, #564]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d06c      	beq.n	800a018 <HAL_RCC_OscConfig+0x130>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d168      	bne.n	800a018 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e26b      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f52:	d106      	bne.n	8009f62 <HAL_RCC_OscConfig+0x7a>
 8009f54:	4b84      	ldr	r3, [pc, #528]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a83      	ldr	r2, [pc, #524]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	e02e      	b.n	8009fc0 <HAL_RCC_OscConfig+0xd8>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10c      	bne.n	8009f84 <HAL_RCC_OscConfig+0x9c>
 8009f6a:	4b7f      	ldr	r3, [pc, #508]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a7e      	ldr	r2, [pc, #504]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	4b7c      	ldr	r3, [pc, #496]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a7b      	ldr	r2, [pc, #492]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	e01d      	b.n	8009fc0 <HAL_RCC_OscConfig+0xd8>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f8c:	d10c      	bne.n	8009fa8 <HAL_RCC_OscConfig+0xc0>
 8009f8e:	4b76      	ldr	r3, [pc, #472]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a75      	ldr	r2, [pc, #468]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	4b73      	ldr	r3, [pc, #460]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a72      	ldr	r2, [pc, #456]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	e00b      	b.n	8009fc0 <HAL_RCC_OscConfig+0xd8>
 8009fa8:	4b6f      	ldr	r3, [pc, #444]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a6e      	ldr	r2, [pc, #440]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	4b6c      	ldr	r3, [pc, #432]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a6b      	ldr	r2, [pc, #428]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d013      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc8:	f7fb f868 	bl	800509c <HAL_GetTick>
 8009fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fce:	e008      	b.n	8009fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fd0:	f7fb f864 	bl	800509c <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	2b64      	cmp	r3, #100	@ 0x64
 8009fdc:	d901      	bls.n	8009fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e21f      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fe2:	4b61      	ldr	r3, [pc, #388]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0f0      	beq.n	8009fd0 <HAL_RCC_OscConfig+0xe8>
 8009fee:	e014      	b.n	800a01a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ff0:	f7fb f854 	bl	800509c <HAL_GetTick>
 8009ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ff6:	e008      	b.n	800a00a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ff8:	f7fb f850 	bl	800509c <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	2b64      	cmp	r3, #100	@ 0x64
 800a004:	d901      	bls.n	800a00a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e20b      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a00a:	4b57      	ldr	r3, [pc, #348]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1f0      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x110>
 800a016:	e000      	b.n	800a01a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d069      	beq.n	800a0fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a026:	4b50      	ldr	r3, [pc, #320]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f003 030c 	and.w	r3, r3, #12
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00b      	beq.n	800a04a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a032:	4b4d      	ldr	r3, [pc, #308]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f003 030c 	and.w	r3, r3, #12
 800a03a:	2b08      	cmp	r3, #8
 800a03c:	d11c      	bne.n	800a078 <HAL_RCC_OscConfig+0x190>
 800a03e:	4b4a      	ldr	r3, [pc, #296]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d116      	bne.n	800a078 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a04a:	4b47      	ldr	r3, [pc, #284]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <HAL_RCC_OscConfig+0x17a>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d001      	beq.n	800a062 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e1df      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a062:	4b41      	ldr	r3, [pc, #260]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	00db      	lsls	r3, r3, #3
 800a070:	493d      	ldr	r1, [pc, #244]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a072:	4313      	orrs	r3, r2
 800a074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a076:	e040      	b.n	800a0fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d023      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a080:	4b39      	ldr	r3, [pc, #228]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a38      	ldr	r2, [pc, #224]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a086:	f043 0301 	orr.w	r3, r3, #1
 800a08a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08c:	f7fb f806 	bl	800509c <HAL_GetTick>
 800a090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a094:	f7fb f802 	bl	800509c <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e1bd      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0a6:	4b30      	ldr	r3, [pc, #192]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0f0      	beq.n	800a094 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0b2:	4b2d      	ldr	r3, [pc, #180]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	4929      	ldr	r1, [pc, #164]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	600b      	str	r3, [r1, #0]
 800a0c6:	e018      	b.n	800a0fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0c8:	4b27      	ldr	r3, [pc, #156]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a26      	ldr	r2, [pc, #152]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a0ce:	f023 0301 	bic.w	r3, r3, #1
 800a0d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d4:	f7fa ffe2 	bl	800509c <HAL_GetTick>
 800a0d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0da:	e008      	b.n	800a0ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0dc:	f7fa ffde 	bl	800509c <HAL_GetTick>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d901      	bls.n	800a0ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e199      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 0302 	and.w	r3, r3, #2
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1f0      	bne.n	800a0dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0308 	and.w	r3, r3, #8
 800a102:	2b00      	cmp	r3, #0
 800a104:	d038      	beq.n	800a178 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d019      	beq.n	800a142 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a10e:	4b16      	ldr	r3, [pc, #88]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a112:	4a15      	ldr	r2, [pc, #84]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a114:	f043 0301 	orr.w	r3, r3, #1
 800a118:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a11a:	f7fa ffbf 	bl	800509c <HAL_GetTick>
 800a11e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a120:	e008      	b.n	800a134 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a122:	f7fa ffbb 	bl	800509c <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d901      	bls.n	800a134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e176      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a134:	4b0c      	ldr	r3, [pc, #48]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0f0      	beq.n	800a122 <HAL_RCC_OscConfig+0x23a>
 800a140:	e01a      	b.n	800a178 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a142:	4b09      	ldr	r3, [pc, #36]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a146:	4a08      	ldr	r2, [pc, #32]	@ (800a168 <HAL_RCC_OscConfig+0x280>)
 800a148:	f023 0301 	bic.w	r3, r3, #1
 800a14c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a14e:	f7fa ffa5 	bl	800509c <HAL_GetTick>
 800a152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a154:	e00a      	b.n	800a16c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a156:	f7fa ffa1 	bl	800509c <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d903      	bls.n	800a16c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e15c      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
 800a168:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a16c:	4b91      	ldr	r3, [pc, #580]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a16e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1ee      	bne.n	800a156 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0304 	and.w	r3, r3, #4
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 80a4 	beq.w	800a2ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a186:	4b8b      	ldr	r3, [pc, #556]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10d      	bne.n	800a1ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a192:	4b88      	ldr	r3, [pc, #544]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a196:	4a87      	ldr	r2, [pc, #540]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a19c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a19e:	4b85      	ldr	r3, [pc, #532]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1a6:	60bb      	str	r3, [r7, #8]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1ae:	4b82      	ldr	r3, [pc, #520]	@ (800a3b8 <HAL_RCC_OscConfig+0x4d0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d118      	bne.n	800a1ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a1ba:	4b7f      	ldr	r3, [pc, #508]	@ (800a3b8 <HAL_RCC_OscConfig+0x4d0>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a7e      	ldr	r2, [pc, #504]	@ (800a3b8 <HAL_RCC_OscConfig+0x4d0>)
 800a1c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1c6:	f7fa ff69 	bl	800509c <HAL_GetTick>
 800a1ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1cc:	e008      	b.n	800a1e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1ce:	f7fa ff65 	bl	800509c <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	2b64      	cmp	r3, #100	@ 0x64
 800a1da:	d901      	bls.n	800a1e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e120      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1e0:	4b75      	ldr	r3, [pc, #468]	@ (800a3b8 <HAL_RCC_OscConfig+0x4d0>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0f0      	beq.n	800a1ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d106      	bne.n	800a202 <HAL_RCC_OscConfig+0x31a>
 800a1f4:	4b6f      	ldr	r3, [pc, #444]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a1f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1f8:	4a6e      	ldr	r2, [pc, #440]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a1fa:	f043 0301 	orr.w	r3, r3, #1
 800a1fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800a200:	e02d      	b.n	800a25e <HAL_RCC_OscConfig+0x376>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10c      	bne.n	800a224 <HAL_RCC_OscConfig+0x33c>
 800a20a:	4b6a      	ldr	r3, [pc, #424]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a20c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a20e:	4a69      	ldr	r2, [pc, #420]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a210:	f023 0301 	bic.w	r3, r3, #1
 800a214:	6713      	str	r3, [r2, #112]	@ 0x70
 800a216:	4b67      	ldr	r3, [pc, #412]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a21a:	4a66      	ldr	r2, [pc, #408]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a21c:	f023 0304 	bic.w	r3, r3, #4
 800a220:	6713      	str	r3, [r2, #112]	@ 0x70
 800a222:	e01c      	b.n	800a25e <HAL_RCC_OscConfig+0x376>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	2b05      	cmp	r3, #5
 800a22a:	d10c      	bne.n	800a246 <HAL_RCC_OscConfig+0x35e>
 800a22c:	4b61      	ldr	r3, [pc, #388]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a22e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a230:	4a60      	ldr	r2, [pc, #384]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a232:	f043 0304 	orr.w	r3, r3, #4
 800a236:	6713      	str	r3, [r2, #112]	@ 0x70
 800a238:	4b5e      	ldr	r3, [pc, #376]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a23a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a23c:	4a5d      	ldr	r2, [pc, #372]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a23e:	f043 0301 	orr.w	r3, r3, #1
 800a242:	6713      	str	r3, [r2, #112]	@ 0x70
 800a244:	e00b      	b.n	800a25e <HAL_RCC_OscConfig+0x376>
 800a246:	4b5b      	ldr	r3, [pc, #364]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a24a:	4a5a      	ldr	r2, [pc, #360]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	6713      	str	r3, [r2, #112]	@ 0x70
 800a252:	4b58      	ldr	r3, [pc, #352]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a256:	4a57      	ldr	r2, [pc, #348]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a258:	f023 0304 	bic.w	r3, r3, #4
 800a25c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d015      	beq.n	800a292 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a266:	f7fa ff19 	bl	800509c <HAL_GetTick>
 800a26a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a26c:	e00a      	b.n	800a284 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a26e:	f7fa ff15 	bl	800509c <HAL_GetTick>
 800a272:	4602      	mov	r2, r0
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d901      	bls.n	800a284 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e0ce      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a284:	4b4b      	ldr	r3, [pc, #300]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d0ee      	beq.n	800a26e <HAL_RCC_OscConfig+0x386>
 800a290:	e014      	b.n	800a2bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a292:	f7fa ff03 	bl	800509c <HAL_GetTick>
 800a296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a298:	e00a      	b.n	800a2b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a29a:	f7fa feff 	bl	800509c <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d901      	bls.n	800a2b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e0b8      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2b0:	4b40      	ldr	r3, [pc, #256]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a2b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1ee      	bne.n	800a29a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d105      	bne.n	800a2ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2c2:	4b3c      	ldr	r3, [pc, #240]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c6:	4a3b      	ldr	r2, [pc, #236]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a2c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 80a4 	beq.w	800a420 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2d8:	4b36      	ldr	r3, [pc, #216]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f003 030c 	and.w	r3, r3, #12
 800a2e0:	2b08      	cmp	r3, #8
 800a2e2:	d06b      	beq.n	800a3bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d149      	bne.n	800a380 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2ec:	4b31      	ldr	r3, [pc, #196]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a30      	ldr	r2, [pc, #192]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a2f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f8:	f7fa fed0 	bl	800509c <HAL_GetTick>
 800a2fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2fe:	e008      	b.n	800a312 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a300:	f7fa fecc 	bl	800509c <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e087      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a312:	4b28      	ldr	r3, [pc, #160]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1f0      	bne.n	800a300 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	69da      	ldr	r2, [r3, #28]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a32c:	019b      	lsls	r3, r3, #6
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	3b01      	subs	r3, #1
 800a338:	041b      	lsls	r3, r3, #16
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a340:	061b      	lsls	r3, r3, #24
 800a342:	4313      	orrs	r3, r2
 800a344:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a346:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a34a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a34c:	4b19      	ldr	r3, [pc, #100]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a18      	ldr	r2, [pc, #96]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a358:	f7fa fea0 	bl	800509c <HAL_GetTick>
 800a35c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a35e:	e008      	b.n	800a372 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a360:	f7fa fe9c 	bl	800509c <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d901      	bls.n	800a372 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e057      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a372:	4b10      	ldr	r3, [pc, #64]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d0f0      	beq.n	800a360 <HAL_RCC_OscConfig+0x478>
 800a37e:	e04f      	b.n	800a420 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a380:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a0b      	ldr	r2, [pc, #44]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a38a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a38c:	f7fa fe86 	bl	800509c <HAL_GetTick>
 800a390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a392:	e008      	b.n	800a3a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a394:	f7fa fe82 	bl	800509c <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d901      	bls.n	800a3a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e03d      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3a6:	4b03      	ldr	r3, [pc, #12]	@ (800a3b4 <HAL_RCC_OscConfig+0x4cc>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1f0      	bne.n	800a394 <HAL_RCC_OscConfig+0x4ac>
 800a3b2:	e035      	b.n	800a420 <HAL_RCC_OscConfig+0x538>
 800a3b4:	40023800 	.word	0x40023800
 800a3b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a3bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a42c <HAL_RCC_OscConfig+0x544>)
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d028      	beq.n	800a41c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d121      	bne.n	800a41c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d11a      	bne.n	800a41c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a3f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d111      	bne.n	800a41c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a402:	085b      	lsrs	r3, r3, #1
 800a404:	3b01      	subs	r3, #1
 800a406:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a408:	429a      	cmp	r2, r3
 800a40a:	d107      	bne.n	800a41c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a416:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a418:	429a      	cmp	r2, r3
 800a41a:	d001      	beq.n	800a420 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	40023800 	.word	0x40023800

0800a430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	e0d0      	b.n	800a5ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a448:	4b6a      	ldr	r3, [pc, #424]	@ (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 030f 	and.w	r3, r3, #15
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d910      	bls.n	800a478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a456:	4b67      	ldr	r3, [pc, #412]	@ (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f023 020f 	bic.w	r2, r3, #15
 800a45e:	4965      	ldr	r1, [pc, #404]	@ (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	4313      	orrs	r3, r2
 800a464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a466:	4b63      	ldr	r3, [pc, #396]	@ (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 030f 	and.w	r3, r3, #15
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d001      	beq.n	800a478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e0b8      	b.n	800a5ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0302 	and.w	r3, r3, #2
 800a480:	2b00      	cmp	r3, #0
 800a482:	d020      	beq.n	800a4c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0304 	and.w	r3, r3, #4
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a490:	4b59      	ldr	r3, [pc, #356]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	4a58      	ldr	r2, [pc, #352]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a496:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a49a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d005      	beq.n	800a4b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4a8:	4b53      	ldr	r3, [pc, #332]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	4a52      	ldr	r2, [pc, #328]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a4b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4b4:	4b50      	ldr	r3, [pc, #320]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	494d      	ldr	r1, [pc, #308]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d040      	beq.n	800a554 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d107      	bne.n	800a4ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4da:	4b47      	ldr	r3, [pc, #284]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d115      	bne.n	800a512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e07f      	b.n	800a5ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d107      	bne.n	800a502 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4f2:	4b41      	ldr	r3, [pc, #260]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d109      	bne.n	800a512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e073      	b.n	800a5ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a502:	4b3d      	ldr	r3, [pc, #244]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e06b      	b.n	800a5ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a512:	4b39      	ldr	r3, [pc, #228]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f023 0203 	bic.w	r2, r3, #3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	4936      	ldr	r1, [pc, #216]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a520:	4313      	orrs	r3, r2
 800a522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a524:	f7fa fdba 	bl	800509c <HAL_GetTick>
 800a528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a52a:	e00a      	b.n	800a542 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a52c:	f7fa fdb6 	bl	800509c <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d901      	bls.n	800a542 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e053      	b.n	800a5ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a542:	4b2d      	ldr	r3, [pc, #180]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f003 020c 	and.w	r2, r3, #12
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	429a      	cmp	r2, r3
 800a552:	d1eb      	bne.n	800a52c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a554:	4b27      	ldr	r3, [pc, #156]	@ (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 030f 	and.w	r3, r3, #15
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d210      	bcs.n	800a584 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a562:	4b24      	ldr	r3, [pc, #144]	@ (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f023 020f 	bic.w	r2, r3, #15
 800a56a:	4922      	ldr	r1, [pc, #136]	@ (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	4313      	orrs	r3, r2
 800a570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a572:	4b20      	ldr	r3, [pc, #128]	@ (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 030f 	and.w	r3, r3, #15
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d001      	beq.n	800a584 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	e032      	b.n	800a5ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d008      	beq.n	800a5a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a590:	4b19      	ldr	r3, [pc, #100]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	4916      	ldr	r1, [pc, #88]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 0308 	and.w	r3, r3, #8
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d009      	beq.n	800a5c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a5ae:	4b12      	ldr	r3, [pc, #72]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	490e      	ldr	r1, [pc, #56]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a5c2:	f000 f821 	bl	800a608 <HAL_RCC_GetSysClockFreq>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	091b      	lsrs	r3, r3, #4
 800a5ce:	f003 030f 	and.w	r3, r3, #15
 800a5d2:	490a      	ldr	r1, [pc, #40]	@ (800a5fc <HAL_RCC_ClockConfig+0x1cc>)
 800a5d4:	5ccb      	ldrb	r3, [r1, r3]
 800a5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5da:	4a09      	ldr	r2, [pc, #36]	@ (800a600 <HAL_RCC_ClockConfig+0x1d0>)
 800a5dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a5de:	4b09      	ldr	r3, [pc, #36]	@ (800a604 <HAL_RCC_ClockConfig+0x1d4>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7f9 fe38 	bl	8004258 <HAL_InitTick>

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	40023c00 	.word	0x40023c00
 800a5f8:	40023800 	.word	0x40023800
 800a5fc:	0801c5b8 	.word	0x0801c5b8
 800a600:	20000014 	.word	0x20000014
 800a604:	20000060 	.word	0x20000060

0800a608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a60c:	b090      	sub	sp, #64	@ 0x40
 800a60e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	637b      	str	r3, [r7, #52]	@ 0x34
 800a614:	2300      	movs	r3, #0
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a618:	2300      	movs	r3, #0
 800a61a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a620:	4b59      	ldr	r3, [pc, #356]	@ (800a788 <HAL_RCC_GetSysClockFreq+0x180>)
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f003 030c 	and.w	r3, r3, #12
 800a628:	2b08      	cmp	r3, #8
 800a62a:	d00d      	beq.n	800a648 <HAL_RCC_GetSysClockFreq+0x40>
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	f200 80a1 	bhi.w	800a774 <HAL_RCC_GetSysClockFreq+0x16c>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <HAL_RCC_GetSysClockFreq+0x34>
 800a636:	2b04      	cmp	r3, #4
 800a638:	d003      	beq.n	800a642 <HAL_RCC_GetSysClockFreq+0x3a>
 800a63a:	e09b      	b.n	800a774 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a63c:	4b53      	ldr	r3, [pc, #332]	@ (800a78c <HAL_RCC_GetSysClockFreq+0x184>)
 800a63e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a640:	e09b      	b.n	800a77a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a642:	4b53      	ldr	r3, [pc, #332]	@ (800a790 <HAL_RCC_GetSysClockFreq+0x188>)
 800a644:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a646:	e098      	b.n	800a77a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a648:	4b4f      	ldr	r3, [pc, #316]	@ (800a788 <HAL_RCC_GetSysClockFreq+0x180>)
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a650:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a652:	4b4d      	ldr	r3, [pc, #308]	@ (800a788 <HAL_RCC_GetSysClockFreq+0x180>)
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d028      	beq.n	800a6b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a65e:	4b4a      	ldr	r3, [pc, #296]	@ (800a788 <HAL_RCC_GetSysClockFreq+0x180>)
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	099b      	lsrs	r3, r3, #6
 800a664:	2200      	movs	r2, #0
 800a666:	623b      	str	r3, [r7, #32]
 800a668:	627a      	str	r2, [r7, #36]	@ 0x24
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a670:	2100      	movs	r1, #0
 800a672:	4b47      	ldr	r3, [pc, #284]	@ (800a790 <HAL_RCC_GetSysClockFreq+0x188>)
 800a674:	fb03 f201 	mul.w	r2, r3, r1
 800a678:	2300      	movs	r3, #0
 800a67a:	fb00 f303 	mul.w	r3, r0, r3
 800a67e:	4413      	add	r3, r2
 800a680:	4a43      	ldr	r2, [pc, #268]	@ (800a790 <HAL_RCC_GetSysClockFreq+0x188>)
 800a682:	fba0 1202 	umull	r1, r2, r0, r2
 800a686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a688:	460a      	mov	r2, r1
 800a68a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a68c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a68e:	4413      	add	r3, r2
 800a690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a694:	2200      	movs	r2, #0
 800a696:	61bb      	str	r3, [r7, #24]
 800a698:	61fa      	str	r2, [r7, #28]
 800a69a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a69e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a6a2:	f7f5 fe1d 	bl	80002e0 <__aeabi_uldivmod>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ae:	e053      	b.n	800a758 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6b0:	4b35      	ldr	r3, [pc, #212]	@ (800a788 <HAL_RCC_GetSysClockFreq+0x180>)
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	099b      	lsrs	r3, r3, #6
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	613b      	str	r3, [r7, #16]
 800a6ba:	617a      	str	r2, [r7, #20]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a6c2:	f04f 0b00 	mov.w	fp, #0
 800a6c6:	4652      	mov	r2, sl
 800a6c8:	465b      	mov	r3, fp
 800a6ca:	f04f 0000 	mov.w	r0, #0
 800a6ce:	f04f 0100 	mov.w	r1, #0
 800a6d2:	0159      	lsls	r1, r3, #5
 800a6d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a6d8:	0150      	lsls	r0, r2, #5
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	ebb2 080a 	subs.w	r8, r2, sl
 800a6e2:	eb63 090b 	sbc.w	r9, r3, fp
 800a6e6:	f04f 0200 	mov.w	r2, #0
 800a6ea:	f04f 0300 	mov.w	r3, #0
 800a6ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a6f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a6f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a6fa:	ebb2 0408 	subs.w	r4, r2, r8
 800a6fe:	eb63 0509 	sbc.w	r5, r3, r9
 800a702:	f04f 0200 	mov.w	r2, #0
 800a706:	f04f 0300 	mov.w	r3, #0
 800a70a:	00eb      	lsls	r3, r5, #3
 800a70c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a710:	00e2      	lsls	r2, r4, #3
 800a712:	4614      	mov	r4, r2
 800a714:	461d      	mov	r5, r3
 800a716:	eb14 030a 	adds.w	r3, r4, sl
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	eb45 030b 	adc.w	r3, r5, fp
 800a720:	607b      	str	r3, [r7, #4]
 800a722:	f04f 0200 	mov.w	r2, #0
 800a726:	f04f 0300 	mov.w	r3, #0
 800a72a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a72e:	4629      	mov	r1, r5
 800a730:	028b      	lsls	r3, r1, #10
 800a732:	4621      	mov	r1, r4
 800a734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a738:	4621      	mov	r1, r4
 800a73a:	028a      	lsls	r2, r1, #10
 800a73c:	4610      	mov	r0, r2
 800a73e:	4619      	mov	r1, r3
 800a740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a742:	2200      	movs	r2, #0
 800a744:	60bb      	str	r3, [r7, #8]
 800a746:	60fa      	str	r2, [r7, #12]
 800a748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a74c:	f7f5 fdc8 	bl	80002e0 <__aeabi_uldivmod>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4613      	mov	r3, r2
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a758:	4b0b      	ldr	r3, [pc, #44]	@ (800a788 <HAL_RCC_GetSysClockFreq+0x180>)
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	0c1b      	lsrs	r3, r3, #16
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	3301      	adds	r3, #1
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a768:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a770:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a772:	e002      	b.n	800a77a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a774:	4b05      	ldr	r3, [pc, #20]	@ (800a78c <HAL_RCC_GetSysClockFreq+0x184>)
 800a776:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3740      	adds	r7, #64	@ 0x40
 800a780:	46bd      	mov	sp, r7
 800a782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a786:	bf00      	nop
 800a788:	40023800 	.word	0x40023800
 800a78c:	00f42400 	.word	0x00f42400
 800a790:	017d7840 	.word	0x017d7840

0800a794 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a798:	4b03      	ldr	r3, [pc, #12]	@ (800a7a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a79a:	681b      	ldr	r3, [r3, #0]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20000014 	.word	0x20000014

0800a7ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a7b0:	f7ff fff0 	bl	800a794 <HAL_RCC_GetHCLKFreq>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	4b05      	ldr	r3, [pc, #20]	@ (800a7cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	0a9b      	lsrs	r3, r3, #10
 800a7bc:	f003 0307 	and.w	r3, r3, #7
 800a7c0:	4903      	ldr	r1, [pc, #12]	@ (800a7d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7c2:	5ccb      	ldrb	r3, [r1, r3]
 800a7c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40023800 	.word	0x40023800
 800a7d0:	0801c5c8 	.word	0x0801c5c8

0800a7d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a7d8:	f7ff ffdc 	bl	800a794 <HAL_RCC_GetHCLKFreq>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	4b05      	ldr	r3, [pc, #20]	@ (800a7f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	0b5b      	lsrs	r3, r3, #13
 800a7e4:	f003 0307 	and.w	r3, r3, #7
 800a7e8:	4903      	ldr	r1, [pc, #12]	@ (800a7f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7ea:	5ccb      	ldrb	r3, [r1, r3]
 800a7ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	40023800 	.word	0x40023800
 800a7f8:	0801c5c8 	.word	0x0801c5c8

0800a7fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	220f      	movs	r2, #15
 800a80a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a80c:	4b12      	ldr	r3, [pc, #72]	@ (800a858 <HAL_RCC_GetClockConfig+0x5c>)
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f003 0203 	and.w	r2, r3, #3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a818:	4b0f      	ldr	r3, [pc, #60]	@ (800a858 <HAL_RCC_GetClockConfig+0x5c>)
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a824:	4b0c      	ldr	r3, [pc, #48]	@ (800a858 <HAL_RCC_GetClockConfig+0x5c>)
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a830:	4b09      	ldr	r3, [pc, #36]	@ (800a858 <HAL_RCC_GetClockConfig+0x5c>)
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	08db      	lsrs	r3, r3, #3
 800a836:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a83e:	4b07      	ldr	r3, [pc, #28]	@ (800a85c <HAL_RCC_GetClockConfig+0x60>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 020f 	and.w	r2, r3, #15
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	601a      	str	r2, [r3, #0]
}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	40023800 	.word	0x40023800
 800a85c:	40023c00 	.word	0x40023c00

0800a860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d012      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a888:	4b69      	ldr	r3, [pc, #420]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	4a68      	ldr	r2, [pc, #416]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a88e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a892:	6093      	str	r3, [r2, #8]
 800a894:	4b66      	ldr	r3, [pc, #408]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a896:	689a      	ldr	r2, [r3, #8]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a89c:	4964      	ldr	r1, [pc, #400]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d017      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8ba:	4b5d      	ldr	r3, [pc, #372]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c8:	4959      	ldr	r1, [pc, #356]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8d8:	d101      	bne.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d017      	beq.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a8f6:	4b4e      	ldr	r3, [pc, #312]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a904:	494a      	ldr	r1, [pc, #296]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a906:	4313      	orrs	r3, r2
 800a908:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a914:	d101      	bne.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a916:	2301      	movs	r3, #1
 800a918:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a922:	2301      	movs	r3, #1
 800a924:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a932:	2301      	movs	r3, #1
 800a934:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0320 	and.w	r3, r3, #32
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 808b 	beq.w	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a944:	4b3a      	ldr	r3, [pc, #232]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a948:	4a39      	ldr	r2, [pc, #228]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a94a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a94e:	6413      	str	r3, [r2, #64]	@ 0x40
 800a950:	4b37      	ldr	r3, [pc, #220]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a958:	60bb      	str	r3, [r7, #8]
 800a95a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a95c:	4b35      	ldr	r3, [pc, #212]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a34      	ldr	r2, [pc, #208]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a968:	f7fa fb98 	bl	800509c <HAL_GetTick>
 800a96c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a96e:	e008      	b.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a970:	f7fa fb94 	bl	800509c <HAL_GetTick>
 800a974:	4602      	mov	r2, r0
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	2b64      	cmp	r3, #100	@ 0x64
 800a97c:	d901      	bls.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e357      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a982:	4b2c      	ldr	r3, [pc, #176]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0f0      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a98e:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a996:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d035      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d02e      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9ac:	4b20      	ldr	r3, [pc, #128]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ba:	4a1d      	ldr	r2, [pc, #116]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9c6:	4a1a      	ldr	r2, [pc, #104]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a9ce:	4a18      	ldr	r2, [pc, #96]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a9d4:	4b16      	ldr	r3, [pc, #88]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d114      	bne.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e0:	f7fa fb5c 	bl	800509c <HAL_GetTick>
 800a9e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9e6:	e00a      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9e8:	f7fa fb58 	bl	800509c <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d901      	bls.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e319      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0ee      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa16:	d111      	bne.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800aa18:	4b05      	ldr	r3, [pc, #20]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800aa24:	4b04      	ldr	r3, [pc, #16]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800aa26:	400b      	ands	r3, r1
 800aa28:	4901      	ldr	r1, [pc, #4]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	608b      	str	r3, [r1, #8]
 800aa2e:	e00b      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800aa30:	40023800 	.word	0x40023800
 800aa34:	40007000 	.word	0x40007000
 800aa38:	0ffffcff 	.word	0x0ffffcff
 800aa3c:	4baa      	ldr	r3, [pc, #680]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	4aa9      	ldr	r2, [pc, #676]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa42:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800aa46:	6093      	str	r3, [r2, #8]
 800aa48:	4ba7      	ldr	r3, [pc, #668]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa54:	49a4      	ldr	r1, [pc, #656]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0310 	and.w	r3, r3, #16
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d010      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa66:	4ba0      	ldr	r3, [pc, #640]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa6c:	4a9e      	ldr	r2, [pc, #632]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800aa76:	4b9c      	ldr	r3, [pc, #624]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa78:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa80:	4999      	ldr	r1, [pc, #612]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa82:	4313      	orrs	r3, r2
 800aa84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00a      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aa94:	4b94      	ldr	r3, [pc, #592]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaa2:	4991      	ldr	r1, [pc, #580]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aab6:	4b8c      	ldr	r3, [pc, #560]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aabc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aac4:	4988      	ldr	r1, [pc, #544]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aad8:	4b83      	ldr	r3, [pc, #524]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aade:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aae6:	4980      	ldr	r1, [pc, #512]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aafa:	4b7b      	ldr	r3, [pc, #492]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab08:	4977      	ldr	r1, [pc, #476]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00a      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab1c:	4b72      	ldr	r3, [pc, #456]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab22:	f023 0203 	bic.w	r2, r3, #3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab2a:	496f      	ldr	r1, [pc, #444]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab3e:	4b6a      	ldr	r3, [pc, #424]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab44:	f023 020c 	bic.w	r2, r3, #12
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab4c:	4966      	ldr	r1, [pc, #408]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab60:	4b61      	ldr	r3, [pc, #388]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab66:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab6e:	495e      	ldr	r1, [pc, #376]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab82:	4b59      	ldr	r3, [pc, #356]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab88:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab90:	4955      	ldr	r1, [pc, #340]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab92:	4313      	orrs	r3, r2
 800ab94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aba4:	4b50      	ldr	r3, [pc, #320]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abaa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abb2:	494d      	ldr	r1, [pc, #308]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abb4:	4313      	orrs	r3, r2
 800abb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800abc6:	4b48      	ldr	r3, [pc, #288]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abcc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abd4:	4944      	ldr	r1, [pc, #272]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800abe8:	4b3f      	ldr	r3, [pc, #252]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abf6:	493c      	ldr	r1, [pc, #240]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abf8:	4313      	orrs	r3, r2
 800abfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00a      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ac0a:	4b37      	ldr	r3, [pc, #220]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac18:	4933      	ldr	r1, [pc, #204]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00a      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac2c:	4b2e      	ldr	r3, [pc, #184]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac32:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac3a:	492b      	ldr	r1, [pc, #172]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d011      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ac4e:	4b26      	ldr	r3, [pc, #152]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac54:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac5c:	4922      	ldr	r1, [pc, #136]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac6c:	d101      	bne.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00a      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac8e:	4b16      	ldr	r3, [pc, #88]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac94:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac9c:	4912      	ldr	r1, [pc, #72]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00b      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800acb0:	4b0d      	ldr	r3, [pc, #52]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acb6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acc0:	4909      	ldr	r1, [pc, #36]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acc2:	4313      	orrs	r3, r2
 800acc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d006      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 80d9 	beq.w	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800acdc:	4b02      	ldr	r3, [pc, #8]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a01      	ldr	r2, [pc, #4]	@ (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ace2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ace6:	e001      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800ace8:	40023800 	.word	0x40023800
 800acec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acee:	f7fa f9d5 	bl	800509c <HAL_GetTick>
 800acf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800acf4:	e008      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800acf6:	f7fa f9d1 	bl	800509c <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b64      	cmp	r3, #100	@ 0x64
 800ad02:	d901      	bls.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e194      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad08:	4b6c      	ldr	r3, [pc, #432]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1f0      	bne.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d021      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d11d      	bne.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ad28:	4b64      	ldr	r3, [pc, #400]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad2e:	0c1b      	lsrs	r3, r3, #16
 800ad30:	f003 0303 	and.w	r3, r3, #3
 800ad34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad36:	4b61      	ldr	r3, [pc, #388]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad3c:	0e1b      	lsrs	r3, r3, #24
 800ad3e:	f003 030f 	and.w	r3, r3, #15
 800ad42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	019a      	lsls	r2, r3, #6
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	041b      	lsls	r3, r3, #16
 800ad4e:	431a      	orrs	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	061b      	lsls	r3, r3, #24
 800ad54:	431a      	orrs	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	071b      	lsls	r3, r3, #28
 800ad5c:	4957      	ldr	r1, [pc, #348]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad78:	d00a      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d02e      	beq.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad8e:	d129      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ad90:	4b4a      	ldr	r3, [pc, #296]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	f003 0303 	and.w	r3, r3, #3
 800ad9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ad9e:	4b47      	ldr	r3, [pc, #284]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ada0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ada4:	0f1b      	lsrs	r3, r3, #28
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	019a      	lsls	r2, r3, #6
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	041b      	lsls	r3, r3, #16
 800adb6:	431a      	orrs	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	061b      	lsls	r3, r3, #24
 800adbe:	431a      	orrs	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	071b      	lsls	r3, r3, #28
 800adc4:	493d      	ldr	r1, [pc, #244]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800adcc:	4b3b      	ldr	r3, [pc, #236]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800add2:	f023 021f 	bic.w	r2, r3, #31
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adda:	3b01      	subs	r3, #1
 800addc:	4937      	ldr	r1, [pc, #220]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d01d      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800adf0:	4b32      	ldr	r3, [pc, #200]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adf6:	0e1b      	lsrs	r3, r3, #24
 800adf8:	f003 030f 	and.w	r3, r3, #15
 800adfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800adfe:	4b2f      	ldr	r3, [pc, #188]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae04:	0f1b      	lsrs	r3, r3, #28
 800ae06:	f003 0307 	and.w	r3, r3, #7
 800ae0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	019a      	lsls	r2, r3, #6
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	061b      	lsls	r3, r3, #24
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	071b      	lsls	r3, r3, #28
 800ae24:	4925      	ldr	r1, [pc, #148]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d011      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	019a      	lsls	r2, r3, #6
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	041b      	lsls	r3, r3, #16
 800ae44:	431a      	orrs	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	061b      	lsls	r3, r3, #24
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	071b      	lsls	r3, r3, #28
 800ae54:	4919      	ldr	r1, [pc, #100]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ae5c:	4b17      	ldr	r3, [pc, #92]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a16      	ldr	r2, [pc, #88]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae68:	f7fa f918 	bl	800509c <HAL_GetTick>
 800ae6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ae6e:	e008      	b.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ae70:	f7fa f914 	bl	800509c <HAL_GetTick>
 800ae74:	4602      	mov	r2, r0
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	2b64      	cmp	r3, #100	@ 0x64
 800ae7c:	d901      	bls.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e0d7      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ae82:	4b0e      	ldr	r3, [pc, #56]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0f0      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	f040 80cd 	bne.w	800b030 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ae96:	4b09      	ldr	r3, [pc, #36]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a08      	ldr	r2, [pc, #32]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aea2:	f7fa f8fb 	bl	800509c <HAL_GetTick>
 800aea6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aea8:	e00a      	b.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aeaa:	f7fa f8f7 	bl	800509c <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b64      	cmp	r3, #100	@ 0x64
 800aeb6:	d903      	bls.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e0ba      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800aebc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aec0:	4b5e      	ldr	r3, [pc, #376]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aecc:	d0ed      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d009      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d02e      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d12a      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aef6:	4b51      	ldr	r3, [pc, #324]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aefc:	0c1b      	lsrs	r3, r3, #16
 800aefe:	f003 0303 	and.w	r3, r3, #3
 800af02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af04:	4b4d      	ldr	r3, [pc, #308]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af0a:	0f1b      	lsrs	r3, r3, #28
 800af0c:	f003 0307 	and.w	r3, r3, #7
 800af10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	019a      	lsls	r2, r3, #6
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	041b      	lsls	r3, r3, #16
 800af1c:	431a      	orrs	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	061b      	lsls	r3, r3, #24
 800af24:	431a      	orrs	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	071b      	lsls	r3, r3, #28
 800af2a:	4944      	ldr	r1, [pc, #272]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af2c:	4313      	orrs	r3, r2
 800af2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800af32:	4b42      	ldr	r3, [pc, #264]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af38:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af40:	3b01      	subs	r3, #1
 800af42:	021b      	lsls	r3, r3, #8
 800af44:	493d      	ldr	r1, [pc, #244]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af46:	4313      	orrs	r3, r2
 800af48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d022      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af60:	d11d      	bne.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af62:	4b36      	ldr	r3, [pc, #216]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af68:	0e1b      	lsrs	r3, r3, #24
 800af6a:	f003 030f 	and.w	r3, r3, #15
 800af6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af70:	4b32      	ldr	r3, [pc, #200]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af76:	0f1b      	lsrs	r3, r3, #28
 800af78:	f003 0307 	and.w	r3, r3, #7
 800af7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	019a      	lsls	r2, r3, #6
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	041b      	lsls	r3, r3, #16
 800af8a:	431a      	orrs	r2, r3
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	061b      	lsls	r3, r3, #24
 800af90:	431a      	orrs	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	071b      	lsls	r3, r3, #28
 800af96:	4929      	ldr	r1, [pc, #164]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af98:	4313      	orrs	r3, r2
 800af9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f003 0308 	and.w	r3, r3, #8
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d028      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800afaa:	4b24      	ldr	r3, [pc, #144]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afb0:	0e1b      	lsrs	r3, r3, #24
 800afb2:	f003 030f 	and.w	r3, r3, #15
 800afb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800afb8:	4b20      	ldr	r3, [pc, #128]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afbe:	0c1b      	lsrs	r3, r3, #16
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	019a      	lsls	r2, r3, #6
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	041b      	lsls	r3, r3, #16
 800afd0:	431a      	orrs	r2, r3
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	061b      	lsls	r3, r3, #24
 800afd6:	431a      	orrs	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	071b      	lsls	r3, r3, #28
 800afde:	4917      	ldr	r1, [pc, #92]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800afe6:	4b15      	ldr	r3, [pc, #84]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff4:	4911      	ldr	r1, [pc, #68]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800affc:	4b0f      	ldr	r3, [pc, #60]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a0e      	ldr	r2, [pc, #56]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b008:	f7fa f848 	bl	800509c <HAL_GetTick>
 800b00c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b00e:	e008      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b010:	f7fa f844 	bl	800509c <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	2b64      	cmp	r3, #100	@ 0x64
 800b01c:	d901      	bls.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b01e:	2303      	movs	r3, #3
 800b020:	e007      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b022:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b02a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b02e:	d1ef      	bne.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3720      	adds	r7, #32
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	40023800 	.word	0x40023800

0800b040 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b05e:	f040 808d 	bne.w	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b062:	4b93      	ldr	r3, [pc, #588]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b068:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b070:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b078:	d07c      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b080:	d87b      	bhi.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b08e:	d039      	beq.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b090:	e073      	b.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b092:	4b87      	ldr	r3, [pc, #540]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d108      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b09e:	4b84      	ldr	r3, [pc, #528]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0a6:	4a83      	ldr	r2, [pc, #524]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ac:	613b      	str	r3, [r7, #16]
 800b0ae:	e007      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b0b0:	4b7f      	ldr	r3, [pc, #508]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0b8:	4a7f      	ldr	r2, [pc, #508]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0be:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b0c0:	4b7b      	ldr	r3, [pc, #492]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0c6:	0e1b      	lsrs	r3, r3, #24
 800b0c8:	f003 030f 	and.w	r3, r3, #15
 800b0cc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b0ce:	4b78      	ldr	r3, [pc, #480]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0d4:	099b      	lsrs	r3, r3, #6
 800b0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	fb03 f202 	mul.w	r2, r3, r2
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b0e8:	4b71      	ldr	r3, [pc, #452]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0ee:	0a1b      	lsrs	r3, r3, #8
 800b0f0:	f003 031f 	and.w	r3, r3, #31
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b100:	617b      	str	r3, [r7, #20]
        break;
 800b102:	e03b      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b104:	4b6a      	ldr	r3, [pc, #424]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d108      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b110:	4b67      	ldr	r3, [pc, #412]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b118:	4a66      	ldr	r2, [pc, #408]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11e:	613b      	str	r3, [r7, #16]
 800b120:	e007      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b122:	4b63      	ldr	r3, [pc, #396]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b12a:	4a63      	ldr	r2, [pc, #396]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b130:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b132:	4b5f      	ldr	r3, [pc, #380]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b138:	0e1b      	lsrs	r3, r3, #24
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b140:	4b5b      	ldr	r3, [pc, #364]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b146:	099b      	lsrs	r3, r3, #6
 800b148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	fb03 f202 	mul.w	r2, r3, r2
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	fbb2 f3f3 	udiv	r3, r2, r3
 800b158:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b15a:	4b55      	ldr	r3, [pc, #340]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b15c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b160:	f003 031f 	and.w	r3, r3, #31
 800b164:	3301      	adds	r3, #1
 800b166:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b170:	617b      	str	r3, [r7, #20]
        break;
 800b172:	e003      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b174:	4b51      	ldr	r3, [pc, #324]	@ (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b176:	617b      	str	r3, [r7, #20]
        break;
 800b178:	e000      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b17a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b182:	f040 808d 	bne.w	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b186:	4b4a      	ldr	r3, [pc, #296]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b18c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b194:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b19c:	d07c      	beq.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1a4:	d87b      	bhi.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d004      	beq.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1b2:	d039      	beq.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b1b4:	e073      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b1b6:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d108      	bne.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b1c2:	4b3b      	ldr	r3, [pc, #236]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1ca:	4a3a      	ldr	r2, [pc, #232]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	e007      	b.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b1d4:	4b36      	ldr	r3, [pc, #216]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1dc:	4a36      	ldr	r2, [pc, #216]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b1e4:	4b32      	ldr	r3, [pc, #200]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ea:	0e1b      	lsrs	r3, r3, #24
 800b1ec:	f003 030f 	and.w	r3, r3, #15
 800b1f0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b1f2:	4b2f      	ldr	r3, [pc, #188]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1f8:	099b      	lsrs	r3, r3, #6
 800b1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	fb03 f202 	mul.w	r2, r3, r2
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	fbb2 f3f3 	udiv	r3, r2, r3
 800b20a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b20c:	4b28      	ldr	r3, [pc, #160]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b212:	0a1b      	lsrs	r3, r3, #8
 800b214:	f003 031f 	and.w	r3, r3, #31
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	fbb2 f3f3 	udiv	r3, r2, r3
 800b224:	617b      	str	r3, [r7, #20]
        break;
 800b226:	e03b      	b.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b228:	4b21      	ldr	r3, [pc, #132]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d108      	bne.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b234:	4b1e      	ldr	r3, [pc, #120]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b23c:	4a1d      	ldr	r2, [pc, #116]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	e007      	b.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b246:	4b1a      	ldr	r3, [pc, #104]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b24e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b250:	fbb2 f3f3 	udiv	r3, r2, r3
 800b254:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b256:	4b16      	ldr	r3, [pc, #88]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b25c:	0e1b      	lsrs	r3, r3, #24
 800b25e:	f003 030f 	and.w	r3, r3, #15
 800b262:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b264:	4b12      	ldr	r3, [pc, #72]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b26a:	099b      	lsrs	r3, r3, #6
 800b26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	fb03 f202 	mul.w	r2, r3, r2
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b27e:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b284:	f003 031f 	and.w	r3, r3, #31
 800b288:	3301      	adds	r3, #1
 800b28a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	fbb2 f3f3 	udiv	r3, r2, r3
 800b294:	617b      	str	r3, [r7, #20]
        break;
 800b296:	e003      	b.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b298:	4b08      	ldr	r3, [pc, #32]	@ (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b29a:	617b      	str	r3, [r7, #20]
        break;
 800b29c:	e000      	b.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b29e:	bf00      	nop
      }
    }
  }

  return frequency;
 800b2a0:	697b      	ldr	r3, [r7, #20]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	40023800 	.word	0x40023800
 800b2b4:	00f42400 	.word	0x00f42400
 800b2b8:	017d7840 	.word	0x017d7840
 800b2bc:	00bb8000 	.word	0x00bb8000

0800b2c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e071      	b.n	800b3b6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	7f5b      	ldrb	r3, [r3, #29]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d105      	bne.n	800b2e8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7f8 fb3a 	bl	800395c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	2b10      	cmp	r3, #16
 800b2fa:	d053      	beq.n	800b3a4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	22ca      	movs	r2, #202	@ 0xca
 800b302:	625a      	str	r2, [r3, #36]	@ 0x24
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2253      	movs	r2, #83	@ 0x53
 800b30a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fb75 	bl	800b9fc <RTC_EnterInitMode>
 800b312:	4603      	mov	r3, r0
 800b314:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d12a      	bne.n	800b372 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6899      	ldr	r1, [r3, #8]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	4b26      	ldr	r3, [pc, #152]	@ (800b3c0 <HAL_RTC_Init+0x100>)
 800b328:	400b      	ands	r3, r1
 800b32a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6899      	ldr	r1, [r3, #8]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	431a      	orrs	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	431a      	orrs	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	430a      	orrs	r2, r1
 800b348:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68d2      	ldr	r2, [r2, #12]
 800b352:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6919      	ldr	r1, [r3, #16]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	041a      	lsls	r2, r3, #16
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	430a      	orrs	r2, r1
 800b366:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fb7e 	bl	800ba6a <RTC_ExitInitMode>
 800b36e:	4603      	mov	r3, r0
 800b370:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d110      	bne.n	800b39a <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f022 0208 	bic.w	r2, r2, #8
 800b386:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	699a      	ldr	r2, [r3, #24]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	22ff      	movs	r2, #255	@ 0xff
 800b3a0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b3a2:	e001      	b.n	800b3a8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d102      	bne.n	800b3b4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	ff8fffbf 	.word	0xff8fffbf

0800b3c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b3c4:	b590      	push	{r4, r7, lr}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	7f1b      	ldrb	r3, [r3, #28]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d101      	bne.n	800b3e0 <HAL_RTC_SetTime+0x1c>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	e085      	b.n	800b4ec <HAL_RTC_SetTime+0x128>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d126      	bne.n	800b440 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d102      	bne.n	800b406 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2200      	movs	r2, #0
 800b404:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 fb52 	bl	800bab4 <RTC_ByteToBcd2>
 800b410:	4603      	mov	r3, r0
 800b412:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	785b      	ldrb	r3, [r3, #1]
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 fb4b 	bl	800bab4 <RTC_ByteToBcd2>
 800b41e:	4603      	mov	r3, r0
 800b420:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b422:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	789b      	ldrb	r3, [r3, #2]
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fb43 	bl	800bab4 <RTC_ByteToBcd2>
 800b42e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b430:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	78db      	ldrb	r3, [r3, #3]
 800b438:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b43a:	4313      	orrs	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	e018      	b.n	800b472 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2200      	movs	r2, #0
 800b452:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	785b      	ldrb	r3, [r3, #1]
 800b45e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b460:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b466:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	78db      	ldrb	r3, [r3, #3]
 800b46c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b46e:	4313      	orrs	r3, r2
 800b470:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	22ca      	movs	r2, #202	@ 0xca
 800b478:	625a      	str	r2, [r3, #36]	@ 0x24
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2253      	movs	r2, #83	@ 0x53
 800b480:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f000 faba 	bl	800b9fc <RTC_EnterInitMode>
 800b488:	4603      	mov	r3, r0
 800b48a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b48c:	7cfb      	ldrb	r3, [r7, #19]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d11e      	bne.n	800b4d0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	6979      	ldr	r1, [r7, #20]
 800b498:	4b16      	ldr	r3, [pc, #88]	@ (800b4f4 <HAL_RTC_SetTime+0x130>)
 800b49a:	400b      	ands	r3, r1
 800b49c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b4ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6899      	ldr	r1, [r3, #8]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	431a      	orrs	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 facf 	bl	800ba6a <RTC_ExitInitMode>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b4d0:	7cfb      	ldrb	r3, [r7, #19]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	22ff      	movs	r2, #255	@ 0xff
 800b4e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	771a      	strb	r2, [r3, #28]

  return status;
 800b4ea:	7cfb      	ldrb	r3, [r7, #19]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	371c      	adds	r7, #28
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd90      	pop	{r4, r7, pc}
 800b4f4:	007f7f7f 	.word	0x007f7f7f

0800b4f8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b504:	2300      	movs	r3, #0
 800b506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	4b22      	ldr	r3, [pc, #136]	@ (800b5b0 <HAL_RTC_GetTime+0xb8>)
 800b528:	4013      	ands	r3, r2
 800b52a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	0c1b      	lsrs	r3, r3, #16
 800b530:	b2db      	uxtb	r3, r3
 800b532:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b536:	b2da      	uxtb	r2, r3
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	0a1b      	lsrs	r3, r3, #8
 800b540:	b2db      	uxtb	r3, r3
 800b542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b546:	b2da      	uxtb	r2, r3
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b554:	b2da      	uxtb	r2, r3
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	0d9b      	lsrs	r3, r3, #22
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	b2da      	uxtb	r2, r3
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d11a      	bne.n	800b5a6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f000 fabb 	bl	800baf0 <RTC_Bcd2ToByte>
 800b57a:	4603      	mov	r3, r0
 800b57c:	461a      	mov	r2, r3
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	4618      	mov	r0, r3
 800b588:	f000 fab2 	bl	800baf0 <RTC_Bcd2ToByte>
 800b58c:	4603      	mov	r3, r0
 800b58e:	461a      	mov	r2, r3
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	789b      	ldrb	r3, [r3, #2]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 faa9 	bl	800baf0 <RTC_Bcd2ToByte>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	007f7f7f 	.word	0x007f7f7f

0800b5b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	7f1b      	ldrb	r3, [r3, #28]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <HAL_RTC_SetDate+0x1c>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e06f      	b.n	800b6b0 <HAL_RTC_SetDate+0xfc>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2202      	movs	r2, #2
 800b5da:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10e      	bne.n	800b600 <HAL_RTC_SetDate+0x4c>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	f003 0310 	and.w	r3, r3, #16
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d008      	beq.n	800b600 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	785b      	ldrb	r3, [r3, #1]
 800b5f2:	f023 0310 	bic.w	r3, r3, #16
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	330a      	adds	r3, #10
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d11c      	bne.n	800b640 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	78db      	ldrb	r3, [r3, #3]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 fa52 	bl	800bab4 <RTC_ByteToBcd2>
 800b610:	4603      	mov	r3, r0
 800b612:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	785b      	ldrb	r3, [r3, #1]
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 fa4b 	bl	800bab4 <RTC_ByteToBcd2>
 800b61e:	4603      	mov	r3, r0
 800b620:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b622:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	789b      	ldrb	r3, [r3, #2]
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fa43 	bl	800bab4 <RTC_ByteToBcd2>
 800b62e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b630:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b63a:	4313      	orrs	r3, r2
 800b63c:	617b      	str	r3, [r7, #20]
 800b63e:	e00e      	b.n	800b65e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	78db      	ldrb	r3, [r3, #3]
 800b644:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	785b      	ldrb	r3, [r3, #1]
 800b64a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b64c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b652:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b65a:	4313      	orrs	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	22ca      	movs	r2, #202	@ 0xca
 800b664:	625a      	str	r2, [r3, #36]	@ 0x24
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2253      	movs	r2, #83	@ 0x53
 800b66c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f000 f9c4 	bl	800b9fc <RTC_EnterInitMode>
 800b674:	4603      	mov	r3, r0
 800b676:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b678:	7cfb      	ldrb	r3, [r7, #19]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	6979      	ldr	r1, [r7, #20]
 800b684:	4b0c      	ldr	r3, [pc, #48]	@ (800b6b8 <HAL_RTC_SetDate+0x104>)
 800b686:	400b      	ands	r3, r1
 800b688:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 f9ed 	bl	800ba6a <RTC_ExitInitMode>
 800b690:	4603      	mov	r3, r0
 800b692:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b694:	7cfb      	ldrb	r3, [r7, #19]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d102      	bne.n	800b6a0 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2201      	movs	r2, #1
 800b69e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	22ff      	movs	r2, #255	@ 0xff
 800b6a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	771a      	strb	r2, [r3, #28]

  return status;
 800b6ae:	7cfb      	ldrb	r3, [r7, #19]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	371c      	adds	r7, #28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd90      	pop	{r4, r7, pc}
 800b6b8:	00ffff3f 	.word	0x00ffff3f

0800b6bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	685a      	ldr	r2, [r3, #4]
 800b6d2:	4b21      	ldr	r3, [pc, #132]	@ (800b758 <HAL_RTC_GetDate+0x9c>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	0c1b      	lsrs	r3, r3, #16
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	0a1b      	lsrs	r3, r3, #8
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	f003 031f 	and.w	r3, r3, #31
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	0b5b      	lsrs	r3, r3, #13
 800b704:	b2db      	uxtb	r3, r3
 800b706:	f003 0307 	and.w	r3, r3, #7
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d11a      	bne.n	800b74c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	78db      	ldrb	r3, [r3, #3]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 f9e8 	bl	800baf0 <RTC_Bcd2ToByte>
 800b720:	4603      	mov	r3, r0
 800b722:	461a      	mov	r2, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	785b      	ldrb	r3, [r3, #1]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 f9df 	bl	800baf0 <RTC_Bcd2ToByte>
 800b732:	4603      	mov	r3, r0
 800b734:	461a      	mov	r2, r3
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	789b      	ldrb	r3, [r3, #2]
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 f9d6 	bl	800baf0 <RTC_Bcd2ToByte>
 800b744:	4603      	mov	r3, r0
 800b746:	461a      	mov	r2, r3
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	00ffff3f 	.word	0x00ffff3f

0800b75c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b75c:	b590      	push	{r4, r7, lr}
 800b75e:	b089      	sub	sp, #36	@ 0x24
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b768:	2300      	movs	r3, #0
 800b76a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b76c:	2300      	movs	r3, #0
 800b76e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	7f1b      	ldrb	r3, [r3, #28]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d101      	bne.n	800b780 <HAL_RTC_SetAlarm+0x24>
 800b77c:	2302      	movs	r3, #2
 800b77e:	e113      	b.n	800b9a8 <HAL_RTC_SetAlarm+0x24c>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2201      	movs	r2, #1
 800b784:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2202      	movs	r2, #2
 800b78a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d137      	bne.n	800b802 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d102      	bne.n	800b7a6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 f982 	bl	800bab4 <RTC_ByteToBcd2>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	785b      	ldrb	r3, [r3, #1]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 f97b 	bl	800bab4 <RTC_ByteToBcd2>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b7c2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	789b      	ldrb	r3, [r3, #2]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f000 f973 	bl	800bab4 <RTC_ByteToBcd2>
 800b7ce:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b7d0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	78db      	ldrb	r3, [r3, #3]
 800b7d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b7da:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 f965 	bl	800bab4 <RTC_ByteToBcd2>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b7ee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b7f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	61fb      	str	r3, [r7, #28]
 800b800:	e023      	b.n	800b84a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	2200      	movs	r2, #0
 800b814:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	785b      	ldrb	r3, [r3, #1]
 800b820:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b822:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b828:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	78db      	ldrb	r3, [r3, #3]
 800b82e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b830:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b838:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b83a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b840:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b846:	4313      	orrs	r3, r2
 800b848:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b852:	4313      	orrs	r3, r2
 800b854:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	22ca      	movs	r2, #202	@ 0xca
 800b85c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2253      	movs	r2, #83	@ 0x53
 800b864:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b86e:	d148      	bne.n	800b902 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689a      	ldr	r2, [r3, #8]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b87e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	689a      	ldr	r2, [r3, #8]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b88e:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	b2da      	uxtb	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b8a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b8a2:	f7f9 fbfb 	bl	800509c <HAL_GetTick>
 800b8a6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b8a8:	e013      	b.n	800b8d2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8aa:	f7f9 fbf7 	bl	800509c <HAL_GetTick>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8b8:	d90b      	bls.n	800b8d2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	22ff      	movs	r2, #255	@ 0xff
 800b8c0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2203      	movs	r2, #3
 800b8c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e06a      	b.n	800b9a8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d0e4      	beq.n	800b8aa <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	69fa      	ldr	r2, [r7, #28]
 800b8e6:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689a      	ldr	r2, [r3, #8]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8fe:	609a      	str	r2, [r3, #8]
 800b900:	e047      	b.n	800b992 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	689a      	ldr	r2, [r3, #8]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b910:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	689a      	ldr	r2, [r3, #8]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b920:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b932:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b934:	f7f9 fbb2 	bl	800509c <HAL_GetTick>
 800b938:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b93a:	e013      	b.n	800b964 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b93c:	f7f9 fbae 	bl	800509c <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b94a:	d90b      	bls.n	800b964 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	22ff      	movs	r2, #255	@ 0xff
 800b952:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2203      	movs	r2, #3
 800b958:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e021      	b.n	800b9a8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	f003 0302 	and.w	r3, r3, #2
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d0e4      	beq.n	800b93c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	69fa      	ldr	r2, [r7, #28]
 800b978:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	689a      	ldr	r2, [r3, #8]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b990:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	22ff      	movs	r2, #255	@ 0xff
 800b998:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2201      	movs	r2, #1
 800b99e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3724      	adds	r7, #36	@ 0x24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd90      	pop	{r4, r7, pc}

0800b9b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b9f8 <HAL_RTC_WaitForSynchro+0x48>)
 800b9c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b9c4:	f7f9 fb6a 	bl	800509c <HAL_GetTick>
 800b9c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b9ca:	e009      	b.n	800b9e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b9cc:	f7f9 fb66 	bl	800509c <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9da:	d901      	bls.n	800b9e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	e007      	b.n	800b9f0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	f003 0320 	and.w	r3, r3, #32
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0ee      	beq.n	800b9cc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	0001ff5f 	.word	0x0001ff5f

0800b9fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba04:	2300      	movs	r3, #0
 800ba06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d122      	bne.n	800ba60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ba28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba2a:	f7f9 fb37 	bl	800509c <HAL_GetTick>
 800ba2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ba30:	e00c      	b.n	800ba4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba32:	f7f9 fb33 	bl	800509c <HAL_GetTick>
 800ba36:	4602      	mov	r2, r0
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba40:	d904      	bls.n	800ba4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2204      	movs	r2, #4
 800ba46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <RTC_EnterInitMode+0x64>
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d1e8      	bne.n	800ba32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68da      	ldr	r2, [r3, #12]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f003 0320 	and.w	r3, r3, #32
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10a      	bne.n	800baaa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff ff8b 	bl	800b9b0 <HAL_RTC_WaitForSynchro>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d004      	beq.n	800baaa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2204      	movs	r2, #4
 800baa4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	4603      	mov	r3, r0
 800babc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bac2:	e005      	b.n	800bad0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3301      	adds	r3, #1
 800bac8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800baca:	79fb      	ldrb	r3, [r7, #7]
 800bacc:	3b0a      	subs	r3, #10
 800bace:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	2b09      	cmp	r3, #9
 800bad4:	d8f6      	bhi.n	800bac4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	011b      	lsls	r3, r3, #4
 800badc:	b2da      	uxtb	r2, r3
 800bade:	79fb      	ldrb	r3, [r7, #7]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	b2db      	uxtb	r3, r3
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800bafa:	2300      	movs	r3, #0
 800bafc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	091b      	lsrs	r3, r3, #4
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	461a      	mov	r2, r3
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	f003 030f 	and.w	r3, r3, #15
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	4413      	add	r3, r2
 800bb1e:	b2db      	uxtb	r3, r3
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	7f1b      	ldrb	r3, [r3, #28]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d101      	bne.n	800bb48 <HAL_RTCEx_SetTimeStamp+0x1c>
 800bb44:	2302      	movs	r3, #2
 800bb46:	e050      	b.n	800bbea <HAL_RTCEx_SetTimeStamp+0xbe>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2202      	movs	r2, #2
 800bb52:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f022 0206 	bic.w	r2, r2, #6
 800bb62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689a      	ldr	r2, [r3, #8]
 800bb7a:	4b1f      	ldr	r3, [pc, #124]	@ (800bbf8 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	22ca      	movs	r2, #202	@ 0xca
 800bb8e:	625a      	str	r2, [r3, #36]	@ 0x24
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2253      	movs	r2, #83	@ 0x53
 800bb96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800bbb0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800bbc2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	689a      	ldr	r2, [r3, #8]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbd2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	22ff      	movs	r2, #255	@ 0xff
 800bbda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	371c      	adds	r7, #28
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	fffff7f7 	.word	0xfffff7f7

0800bbfc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e156      	b.n	800bec8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d106      	bne.n	800bc34 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7f8 faa8 	bl	8004184 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2202      	movs	r2, #2
 800bc38:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f95b 	bl	800bef8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	d00c      	beq.n	800bc64 <HAL_SAI_Init+0x68>
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d80d      	bhi.n	800bc6a <HAL_SAI_Init+0x6e>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d002      	beq.n	800bc58 <HAL_SAI_Init+0x5c>
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d003      	beq.n	800bc5e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800bc56:	e008      	b.n	800bc6a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	61fb      	str	r3, [r7, #28]
      break;
 800bc5c:	e006      	b.n	800bc6c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bc5e:	2310      	movs	r3, #16
 800bc60:	61fb      	str	r3, [r7, #28]
      break;
 800bc62:	e003      	b.n	800bc6c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bc64:	2320      	movs	r3, #32
 800bc66:	61fb      	str	r3, [r7, #28]
      break;
 800bc68:	e000      	b.n	800bc6c <HAL_SAI_Init+0x70>
      break;
 800bc6a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d81e      	bhi.n	800bcb2 <HAL_SAI_Init+0xb6>
 800bc74:	a201      	add	r2, pc, #4	@ (adr r2, 800bc7c <HAL_SAI_Init+0x80>)
 800bc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7a:	bf00      	nop
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc93 	.word	0x0800bc93
 800bc84:	0800bc9b 	.word	0x0800bc9b
 800bc88:	0800bca3 	.word	0x0800bca3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	617b      	str	r3, [r7, #20]
    }
    break;
 800bc90:	e010      	b.n	800bcb4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bc92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc96:	617b      	str	r3, [r7, #20]
    }
    break;
 800bc98:	e00c      	b.n	800bcb4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc9e:	617b      	str	r3, [r7, #20]
    }
    break;
 800bca0:	e008      	b.n	800bcb4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bca6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	f043 0301 	orr.w	r3, r3, #1
 800bcae:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bcb0:	e000      	b.n	800bcb4 <HAL_SAI_Init+0xb8>
    default:
      break;
 800bcb2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a85      	ldr	r2, [pc, #532]	@ (800bed0 <HAL_SAI_Init+0x2d4>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d004      	beq.n	800bcc8 <HAL_SAI_Init+0xcc>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a84      	ldr	r2, [pc, #528]	@ (800bed4 <HAL_SAI_Init+0x2d8>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d103      	bne.n	800bcd0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bcc8:	4a83      	ldr	r2, [pc, #524]	@ (800bed8 <HAL_SAI_Init+0x2dc>)
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	e002      	b.n	800bcd6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bcd0:	4a82      	ldr	r2, [pc, #520]	@ (800bedc <HAL_SAI_Init+0x2e0>)
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d04c      	beq.n	800bd78 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a7a      	ldr	r2, [pc, #488]	@ (800bed0 <HAL_SAI_Init+0x2d4>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d004      	beq.n	800bcf6 <HAL_SAI_Init+0xfa>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a78      	ldr	r2, [pc, #480]	@ (800bed4 <HAL_SAI_Init+0x2d8>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d104      	bne.n	800bd00 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bcf6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bcfa:	f7ff f9a1 	bl	800b040 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcfe:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a76      	ldr	r2, [pc, #472]	@ (800bee0 <HAL_SAI_Init+0x2e4>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d004      	beq.n	800bd14 <HAL_SAI_Init+0x118>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a75      	ldr	r2, [pc, #468]	@ (800bee4 <HAL_SAI_Init+0x2e8>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d104      	bne.n	800bd1e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bd14:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bd18:	f7ff f992 	bl	800b040 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd1c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	4613      	mov	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	461a      	mov	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	025b      	lsls	r3, r3, #9
 800bd30:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd34:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	4a6b      	ldr	r2, [pc, #428]	@ (800bee8 <HAL_SAI_Init+0x2ec>)
 800bd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3e:	08da      	lsrs	r2, r3, #3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bd44:	68f9      	ldr	r1, [r7, #12]
 800bd46:	4b68      	ldr	r3, [pc, #416]	@ (800bee8 <HAL_SAI_Init+0x2ec>)
 800bd48:	fba3 2301 	umull	r2, r3, r3, r1
 800bd4c:	08da      	lsrs	r2, r3, #3
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	1aca      	subs	r2, r1, r3
 800bd58:	2a08      	cmp	r2, #8
 800bd5a:	d904      	bls.n	800bd66 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a1b      	ldr	r3, [r3, #32]
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd6a:	2b04      	cmp	r3, #4
 800bd6c:	d104      	bne.n	800bd78 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a1b      	ldr	r3, [r3, #32]
 800bd72:	085a      	lsrs	r2, r3, #1
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d003      	beq.n	800bd88 <HAL_SAI_Init+0x18c>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d109      	bne.n	800bd9c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d101      	bne.n	800bd94 <HAL_SAI_Init+0x198>
 800bd90:	2300      	movs	r3, #0
 800bd92:	e001      	b.n	800bd98 <HAL_SAI_Init+0x19c>
 800bd94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd98:	61bb      	str	r3, [r7, #24]
 800bd9a:	e008      	b.n	800bdae <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d102      	bne.n	800bdaa <HAL_SAI_Init+0x1ae>
 800bda4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bda8:	e000      	b.n	800bdac <HAL_SAI_Init+0x1b0>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6819      	ldr	r1, [r3, #0]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	4b4c      	ldr	r3, [pc, #304]	@ (800beec <HAL_SAI_Init+0x2f0>)
 800bdba:	400b      	ands	r3, r1
 800bdbc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6819      	ldr	r1, [r3, #0]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdcc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdd2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800bde6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bdf2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	051b      	lsls	r3, r3, #20
 800bdfa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6859      	ldr	r1, [r3, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	4b38      	ldr	r3, [pc, #224]	@ (800bef0 <HAL_SAI_Init+0x2f4>)
 800be10:	400b      	ands	r3, r1
 800be12:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6859      	ldr	r1, [r3, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	699a      	ldr	r2, [r3, #24]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be22:	431a      	orrs	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be28:	431a      	orrs	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	6899      	ldr	r1, [r3, #8]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	4b2d      	ldr	r3, [pc, #180]	@ (800bef4 <HAL_SAI_Init+0x2f8>)
 800be3e:	400b      	ands	r3, r1
 800be40:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6899      	ldr	r1, [r3, #8]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be4c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be52:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800be58:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800be5e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be64:	3b01      	subs	r3, #1
 800be66:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800be68:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	430a      	orrs	r2, r1
 800be70:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68d9      	ldr	r1, [r3, #12]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800be80:	400b      	ands	r3, r1
 800be82:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68d9      	ldr	r1, [r3, #12]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be92:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be98:	041b      	lsls	r3, r3, #16
 800be9a:	431a      	orrs	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bea0:	3b01      	subs	r3, #1
 800bea2:	021b      	lsls	r3, r3, #8
 800bea4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	430a      	orrs	r2, r1
 800beac:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	40015804 	.word	0x40015804
 800bed4:	40015824 	.word	0x40015824
 800bed8:	40015800 	.word	0x40015800
 800bedc:	40015c00 	.word	0x40015c00
 800bee0:	40015c04 	.word	0x40015c04
 800bee4:	40015c24 	.word	0x40015c24
 800bee8:	cccccccd 	.word	0xcccccccd
 800beec:	ff05c010 	.word	0xff05c010
 800bef0:	ffff1ff0 	.word	0xffff1ff0
 800bef4:	fff88000 	.word	0xfff88000

0800bef8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800bf00:	4b17      	ldr	r3, [pc, #92]	@ (800bf60 <SAI_Disable+0x68>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a17      	ldr	r2, [pc, #92]	@ (800bf64 <SAI_Disable+0x6c>)
 800bf06:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0a:	0b1b      	lsrs	r3, r3, #12
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bf22:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	1e5a      	subs	r2, r3, #1
 800bf28:	60fa      	str	r2, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	72fb      	strb	r3, [r7, #11]
      break;
 800bf42:	e006      	b.n	800bf52 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e8      	bne.n	800bf24 <SAI_Disable+0x2c>

  return status;
 800bf52:	7afb      	ldrb	r3, [r7, #11]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	20000014 	.word	0x20000014
 800bf64:	95cbec1b 	.word	0x95cbec1b

0800bf68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d101      	bne.n	800bf7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	e022      	b.n	800bfc0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d105      	bne.n	800bf92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7f7 fd13 	bl	80039b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2203      	movs	r2, #3
 800bf96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f814 	bl	800bfc8 <HAL_SD_InitCard>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e00a      	b.n	800bfc0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bfc8:	b5b0      	push	{r4, r5, r7, lr}
 800bfca:	b08e      	sub	sp, #56	@ 0x38
 800bfcc:	af04      	add	r7, sp, #16
 800bfce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800bfe4:	2376      	movs	r3, #118	@ 0x76
 800bfe6:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681d      	ldr	r5, [r3, #0]
 800bfec:	466c      	mov	r4, sp
 800bfee:	f107 0318 	add.w	r3, r7, #24
 800bff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bffa:	f107 030c 	add.w	r3, r7, #12
 800bffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c000:	4628      	mov	r0, r5
 800c002:	f003 fd13 	bl	800fa2c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c014:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f003 fd32 	bl	800fa84 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c02e:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c030:	2002      	movs	r0, #2
 800c032:	f7f9 f83f 	bl	80050b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fd76 	bl	800cb28 <SD_PowerON>
 800c03c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c052:	431a      	orrs	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	e02e      	b.n	800c0ba <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fc95 	bl	800c98c <SD_InitCard>
 800c062:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00b      	beq.n	800c082 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c078:	431a      	orrs	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	e01b      	b.n	800c0ba <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c08a:	4618      	mov	r0, r3
 800c08c:	f003 fd8c 	bl	800fba8 <SDMMC_CmdBlockLength>
 800c090:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00f      	beq.n	800c0b8 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a09      	ldr	r2, [pc, #36]	@ (800c0c4 <HAL_SD_InitCard+0xfc>)
 800c09e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e000      	b.n	800c0ba <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3728      	adds	r7, #40	@ 0x28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	004005ff 	.word	0x004005ff

0800c0c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08c      	sub	sp, #48	@ 0x30
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d107      	bne.n	800c0f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0e4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e0c3      	b.n	800c278 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	f040 80bc 	bne.w	800c276 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	441a      	add	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c10e:	429a      	cmp	r2, r3
 800c110:	d907      	bls.n	800c122 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c116:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e0aa      	b.n	800c278 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2203      	movs	r2, #3
 800c126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2200      	movs	r2, #0
 800c130:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c146:	4a4e      	ldr	r2, [pc, #312]	@ (800c280 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c148:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c14e:	4a4d      	ldr	r2, [pc, #308]	@ (800c284 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c150:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c156:	2200      	movs	r2, #0
 800c158:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c15e:	2200      	movs	r2, #0
 800c160:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	430a      	orrs	r2, r1
 800c17c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3380      	adds	r3, #128	@ 0x80
 800c188:	4619      	mov	r1, r3
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	025b      	lsls	r3, r3, #9
 800c190:	089b      	lsrs	r3, r3, #2
 800c192:	f7f9 fda5 	bl	8005ce0 <HAL_DMA_Start_IT>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d017      	beq.n	800c1cc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800c1aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a35      	ldr	r2, [pc, #212]	@ (800c288 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c1b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e055      	b.n	800c278 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f042 0208 	orr.w	r2, r2, #8
 800c1da:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d002      	beq.n	800c1ea <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800c1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e6:	025b      	lsls	r3, r3, #9
 800c1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	025b      	lsls	r3, r3, #9
 800c1f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c1f6:	2390      	movs	r3, #144	@ 0x90
 800c1f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c202:	2301      	movs	r3, #1
 800c204:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f107 0210 	add.w	r2, r7, #16
 800c20e:	4611      	mov	r1, r2
 800c210:	4618      	mov	r0, r3
 800c212:	f003 fc9d 	bl	800fb50 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d90a      	bls.n	800c232 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2282      	movs	r2, #130	@ 0x82
 800c220:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c228:	4618      	mov	r0, r3
 800c22a:	f003 fd01 	bl	800fc30 <SDMMC_CmdReadMultiBlock>
 800c22e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c230:	e009      	b.n	800c246 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2281      	movs	r2, #129	@ 0x81
 800c236:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c23e:	4618      	mov	r0, r3
 800c240:	f003 fcd4 	bl	800fbec <SDMMC_CmdReadSingleBlock>
 800c244:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d012      	beq.n	800c272 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a0d      	ldr	r2, [pc, #52]	@ (800c288 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c252:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25a:	431a      	orrs	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e002      	b.n	800c278 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	e000      	b.n	800c278 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800c276:	2302      	movs	r3, #2
  }
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3730      	adds	r7, #48	@ 0x30
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	0800c877 	.word	0x0800c877
 800c284:	0800c8e9 	.word	0x0800c8e9
 800c288:	004005ff 	.word	0x004005ff

0800c28c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08c      	sub	sp, #48	@ 0x30
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d107      	bne.n	800c2b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e0c6      	b.n	800c442 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	f040 80bf 	bne.w	800c440 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c2c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	441a      	add	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d907      	bls.n	800c2e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2da:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e0ad      	b.n	800c442 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f042 021a 	orr.w	r2, r2, #26
 800c304:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c30a:	4a50      	ldr	r2, [pc, #320]	@ (800c44c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c30c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c312:	4a4f      	ldr	r2, [pc, #316]	@ (800c450 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c314:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c31a:	2200      	movs	r2, #0
 800c31c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c322:	2b01      	cmp	r3, #1
 800c324:	d002      	beq.n	800c32c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c328:	025b      	lsls	r3, r3, #9
 800c32a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d90a      	bls.n	800c348 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	22a0      	movs	r2, #160	@ 0xa0
 800c336:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c33e:	4618      	mov	r0, r3
 800c340:	f003 fcba 	bl	800fcb8 <SDMMC_CmdWriteMultiBlock>
 800c344:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c346:	e009      	b.n	800c35c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2290      	movs	r2, #144	@ 0x90
 800c34c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c354:	4618      	mov	r0, r3
 800c356:	f003 fc8d 	bl	800fc74 <SDMMC_CmdWriteSingleBlock>
 800c35a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d012      	beq.n	800c388 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a3b      	ldr	r2, [pc, #236]	@ (800c454 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c368:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c370:	431a      	orrs	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	e05c      	b.n	800c442 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f042 0208 	orr.w	r2, r2, #8
 800c396:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c39c:	2240      	movs	r2, #64	@ 0x40
 800c39e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b0:	689a      	ldr	r2, [r3, #8]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	430a      	orrs	r2, r1
 800c3ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c3c0:	68b9      	ldr	r1, [r7, #8]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3380      	adds	r3, #128	@ 0x80
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	025b      	lsls	r3, r3, #9
 800c3ce:	089b      	lsrs	r3, r3, #2
 800c3d0:	f7f9 fc86 	bl	8005ce0 <HAL_DMA_Start_IT>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d01a      	beq.n	800c410 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f022 021a 	bic.w	r2, r2, #26
 800c3e8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a19      	ldr	r2, [pc, #100]	@ (800c454 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c3f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2200      	movs	r2, #0
 800c40a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e018      	b.n	800c442 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c410:	f04f 33ff 	mov.w	r3, #4294967295
 800c414:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	025b      	lsls	r3, r3, #9
 800c41a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c41c:	2390      	movs	r3, #144	@ 0x90
 800c41e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c420:	2300      	movs	r3, #0
 800c422:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c424:	2300      	movs	r3, #0
 800c426:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c428:	2301      	movs	r3, #1
 800c42a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f107 0210 	add.w	r2, r7, #16
 800c434:	4611      	mov	r1, r2
 800c436:	4618      	mov	r0, r3
 800c438:	f003 fb8a 	bl	800fb50 <SDMMC_ConfigData>

      return HAL_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e000      	b.n	800c442 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c440:	2302      	movs	r3, #2
  }
}
 800c442:	4618      	mov	r0, r3
 800c444:	3730      	adds	r7, #48	@ 0x30
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	0800c84d 	.word	0x0800c84d
 800c450:	0800c8e9 	.word	0x0800c8e9
 800c454:	004005ff 	.word	0x004005ff

0800c458 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c47a:	0f9b      	lsrs	r3, r3, #30
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c486:	0e9b      	lsrs	r3, r3, #26
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	f003 030f 	and.w	r3, r3, #15
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c498:	0e1b      	lsrs	r3, r3, #24
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	f003 0303 	and.w	r3, r3, #3
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4aa:	0c1b      	lsrs	r3, r3, #16
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4b6:	0a1b      	lsrs	r3, r3, #8
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4cc:	0d1b      	lsrs	r3, r3, #20
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4d8:	0c1b      	lsrs	r3, r3, #16
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	f003 030f 	and.w	r3, r3, #15
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4ea:	0bdb      	lsrs	r3, r3, #15
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4fc:	0b9b      	lsrs	r3, r3, #14
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	b2da      	uxtb	r2, r3
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c50e:	0b5b      	lsrs	r3, r3, #13
 800c510:	b2db      	uxtb	r3, r3
 800c512:	f003 0301 	and.w	r3, r3, #1
 800c516:	b2da      	uxtb	r2, r3
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c520:	0b1b      	lsrs	r3, r3, #12
 800c522:	b2db      	uxtb	r3, r3
 800c524:	f003 0301 	and.w	r3, r3, #1
 800c528:	b2da      	uxtb	r2, r3
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2200      	movs	r2, #0
 800c532:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d163      	bne.n	800c604 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c540:	009a      	lsls	r2, r3, #2
 800c542:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c546:	4013      	ands	r3, r2
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c54c:	0f92      	lsrs	r2, r2, #30
 800c54e:	431a      	orrs	r2, r3
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c558:	0edb      	lsrs	r3, r3, #27
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	f003 0307 	and.w	r3, r3, #7
 800c560:	b2da      	uxtb	r2, r3
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c56a:	0e1b      	lsrs	r3, r3, #24
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	b2da      	uxtb	r2, r3
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c57c:	0d5b      	lsrs	r3, r3, #21
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	f003 0307 	and.w	r3, r3, #7
 800c584:	b2da      	uxtb	r2, r3
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c58e:	0c9b      	lsrs	r3, r3, #18
 800c590:	b2db      	uxtb	r3, r3
 800c592:	f003 0307 	and.w	r3, r3, #7
 800c596:	b2da      	uxtb	r2, r3
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5a0:	0bdb      	lsrs	r3, r3, #15
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	f003 0307 	and.w	r3, r3, #7
 800c5a8:	b2da      	uxtb	r2, r3
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	1c5a      	adds	r2, r3, #1
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	7e1b      	ldrb	r3, [r3, #24]
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	3302      	adds	r3, #2
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c5ce:	fb03 f202 	mul.w	r2, r3, r2
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	7a1b      	ldrb	r3, [r3, #8]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	f003 030f 	and.w	r3, r3, #15
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	409a      	lsls	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800c5f0:	0a52      	lsrs	r2, r2, #9
 800c5f2:	fb03 f202 	mul.w	r2, r3, r2
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c600:	661a      	str	r2, [r3, #96]	@ 0x60
 800c602:	e031      	b.n	800c668 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d11d      	bne.n	800c648 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c610:	041b      	lsls	r3, r3, #16
 800c612:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c61a:	0c1b      	lsrs	r3, r3, #16
 800c61c:	431a      	orrs	r2, r3
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	3301      	adds	r3, #1
 800c628:	029a      	lsls	r2, r3, #10
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c63c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	661a      	str	r2, [r3, #96]	@ 0x60
 800c646:	e00f      	b.n	800c668 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a58      	ldr	r2, [pc, #352]	@ (800c7b0 <HAL_SD_GetCardCSD+0x344>)
 800c64e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c654:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e09d      	b.n	800c7a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c66c:	0b9b      	lsrs	r3, r3, #14
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	b2da      	uxtb	r2, r3
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c67e:	09db      	lsrs	r3, r3, #7
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c686:	b2da      	uxtb	r2, r3
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c690:	b2db      	uxtb	r3, r3
 800c692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c696:	b2da      	uxtb	r2, r3
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6a0:	0fdb      	lsrs	r3, r3, #31
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6ac:	0f5b      	lsrs	r3, r3, #29
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6be:	0e9b      	lsrs	r3, r3, #26
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6d0:	0d9b      	lsrs	r3, r3, #22
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	f003 030f 	and.w	r3, r3, #15
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6e2:	0d5b      	lsrs	r3, r3, #21
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6fe:	0c1b      	lsrs	r3, r3, #16
 800c700:	b2db      	uxtb	r3, r3
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	b2da      	uxtb	r2, r3
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c712:	0bdb      	lsrs	r3, r3, #15
 800c714:	b2db      	uxtb	r3, r3
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c726:	0b9b      	lsrs	r3, r3, #14
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	f003 0301 	and.w	r3, r3, #1
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c73a:	0b5b      	lsrs	r3, r3, #13
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	b2da      	uxtb	r2, r3
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c74e:	0b1b      	lsrs	r3, r3, #12
 800c750:	b2db      	uxtb	r3, r3
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c762:	0a9b      	lsrs	r3, r3, #10
 800c764:	b2db      	uxtb	r3, r3
 800c766:	f003 0303 	and.w	r3, r3, #3
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c776:	0a1b      	lsrs	r3, r3, #8
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	f003 0303 	and.w	r3, r3, #3
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c78a:	085b      	lsrs	r3, r3, #1
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c792:	b2da      	uxtb	r2, r3
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	004005ff 	.word	0x004005ff

0800c7b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c818:	f107 030c 	add.w	r3, r7, #12
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fa10 	bl	800cc44 <SD_SendStatus>
 800c824:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d005      	beq.n	800c838 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	431a      	orrs	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	0a5b      	lsrs	r3, r3, #9
 800c83c:	f003 030f 	and.w	r3, r3, #15
 800c840:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c842:	693b      	ldr	r3, [r7, #16]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c858:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c868:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c86a:	bf00      	nop
 800c86c:	3714      	adds	r7, #20
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c882:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c888:	2b82      	cmp	r3, #130	@ 0x82
 800c88a:	d111      	bne.n	800c8b0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4618      	mov	r0, r3
 800c892:	f003 fa33 	bl	800fcfc <SDMMC_CmdStopTransfer>
 800c896:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d008      	beq.n	800c8b0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	431a      	orrs	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f7ff fdd4 	bl	800c458 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f022 0208 	bic.w	r2, r2, #8
 800c8be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c8c8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f004 ff85 	bl	80117e8 <HAL_SD_RxCpltCallback>
#endif
}
 800c8de:	bf00      	nop
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
	...

0800c8e8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7f9 fc6e 	bl	80061d8 <HAL_DMA_GetError>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d03e      	beq.n	800c980 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c908:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c90e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c910:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d002      	beq.n	800c91e <SD_DMAError+0x36>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d12d      	bne.n	800c97a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a19      	ldr	r2, [pc, #100]	@ (800c988 <SD_DMAError+0xa0>)
 800c924:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c934:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c93a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c942:	6978      	ldr	r0, [r7, #20]
 800c944:	f7ff ff62 	bl	800c80c <HAL_SD_GetCardState>
 800c948:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2b06      	cmp	r3, #6
 800c94e:	d002      	beq.n	800c956 <SD_DMAError+0x6e>
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	2b05      	cmp	r3, #5
 800c954:	d10a      	bne.n	800c96c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f003 f9ce 	bl	800fcfc <SDMMC_CmdStopTransfer>
 800c960:	4602      	mov	r2, r0
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c966:	431a      	orrs	r2, r3
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	2200      	movs	r2, #0
 800c978:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c97a:	6978      	ldr	r0, [r7, #20]
 800c97c:	f7ff fd6c 	bl	800c458 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c980:	bf00      	nop
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	004005ff 	.word	0x004005ff

0800c98c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c98c:	b5b0      	push	{r4, r5, r7, lr}
 800c98e:	b094      	sub	sp, #80	@ 0x50
 800c990:	af04      	add	r7, sp, #16
 800c992:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c994:	2301      	movs	r3, #1
 800c996:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f003 f87f 	bl	800faa0 <SDMMC_GetPowerState>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d102      	bne.n	800c9ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c9a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c9ac:	e0b8      	b.n	800cb20 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9b2:	2b03      	cmp	r3, #3
 800c9b4:	d02f      	beq.n	800ca16 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f003 fa66 	bl	800fe8c <SDMMC_CmdSendCID>
 800c9c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <SD_InitCard+0x40>
    {
      return errorstate;
 800c9c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ca:	e0a9      	b.n	800cb20 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f003 f8a9 	bl	800fb2a <SDMMC_GetResponse>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2104      	movs	r1, #4
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f003 f8a0 	bl	800fb2a <SDMMC_GetResponse>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2108      	movs	r1, #8
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f003 f897 	bl	800fb2a <SDMMC_GetResponse>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	210c      	movs	r1, #12
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f003 f88e 	bl	800fb2a <SDMMC_GetResponse>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d00d      	beq.n	800ca3a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f107 020e 	add.w	r2, r7, #14
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f003 fa6c 	bl	800ff06 <SDMMC_CmdSetRelAdd>
 800ca2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <SD_InitCard+0xae>
    {
      return errorstate;
 800ca36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca38:	e072      	b.n	800cb20 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	d036      	beq.n	800cab0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ca42:	89fb      	ldrh	r3, [r7, #14]
 800ca44:	461a      	mov	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca52:	041b      	lsls	r3, r3, #16
 800ca54:	4619      	mov	r1, r3
 800ca56:	4610      	mov	r0, r2
 800ca58:	f003 fa36 	bl	800fec8 <SDMMC_CmdSendCSD>
 800ca5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ca64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca66:	e05b      	b.n	800cb20 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f003 f85b 	bl	800fb2a <SDMMC_GetResponse>
 800ca74:	4602      	mov	r2, r0
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2104      	movs	r1, #4
 800ca80:	4618      	mov	r0, r3
 800ca82:	f003 f852 	bl	800fb2a <SDMMC_GetResponse>
 800ca86:	4602      	mov	r2, r0
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2108      	movs	r1, #8
 800ca92:	4618      	mov	r0, r3
 800ca94:	f003 f849 	bl	800fb2a <SDMMC_GetResponse>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	210c      	movs	r1, #12
 800caa4:	4618      	mov	r0, r3
 800caa6:	f003 f840 	bl	800fb2a <SDMMC_GetResponse>
 800caaa:	4602      	mov	r2, r0
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2104      	movs	r1, #4
 800cab6:	4618      	mov	r0, r3
 800cab8:	f003 f837 	bl	800fb2a <SDMMC_GetResponse>
 800cabc:	4603      	mov	r3, r0
 800cabe:	0d1a      	lsrs	r2, r3, #20
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cac4:	f107 0310 	add.w	r3, r7, #16
 800cac8:	4619      	mov	r1, r3
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7ff fcce 	bl	800c46c <HAL_SD_GetCardCSD>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cad6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cada:	e021      	b.n	800cb20 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6819      	ldr	r1, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cae4:	041b      	lsls	r3, r3, #16
 800cae6:	2200      	movs	r2, #0
 800cae8:	461c      	mov	r4, r3
 800caea:	4615      	mov	r5, r2
 800caec:	4622      	mov	r2, r4
 800caee:	462b      	mov	r3, r5
 800caf0:	4608      	mov	r0, r1
 800caf2:	f003 f925 	bl	800fd40 <SDMMC_CmdSelDesel>
 800caf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800caf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <SD_InitCard+0x176>
  {
    return errorstate;
 800cafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb00:	e00e      	b.n	800cb20 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681d      	ldr	r5, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	466c      	mov	r4, sp
 800cb0a:	f103 0210 	add.w	r2, r3, #16
 800cb0e:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb14:	3304      	adds	r3, #4
 800cb16:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f002 ff87 	bl	800fa2c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3740      	adds	r7, #64	@ 0x40
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bdb0      	pop	{r4, r5, r7, pc}

0800cb28 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb30:	2300      	movs	r3, #0
 800cb32:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cb34:	2300      	movs	r3, #0
 800cb36:	617b      	str	r3, [r7, #20]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f003 f920 	bl	800fd86 <SDMMC_CmdGoIdleState>
 800cb46:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	e072      	b.n	800cc38 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f003 f933 	bl	800fdc2 <SDMMC_CmdOperCond>
 800cb5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00d      	beq.n	800cb80 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f003 f909 	bl	800fd86 <SDMMC_CmdGoIdleState>
 800cb74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d004      	beq.n	800cb86 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	e05b      	b.n	800cc38 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d137      	bne.n	800cbfe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2100      	movs	r1, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f003 f933 	bl	800fe00 <SDMMC_CmdAppCommand>
 800cb9a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d02d      	beq.n	800cbfe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cba2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cba6:	e047      	b.n	800cc38 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2100      	movs	r1, #0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f003 f926 	bl	800fe00 <SDMMC_CmdAppCommand>
 800cbb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <SD_PowerON+0x98>
    {
      return errorstate;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	e03b      	b.n	800cc38 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	491e      	ldr	r1, [pc, #120]	@ (800cc40 <SD_PowerON+0x118>)
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f003 f93c 	bl	800fe44 <SDMMC_CmdAppOperCommand>
 800cbcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbd4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cbd8:	e02e      	b.n	800cc38 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2100      	movs	r1, #0
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f002 ffa2 	bl	800fb2a <SDMMC_GetResponse>
 800cbe6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	0fdb      	lsrs	r3, r3, #31
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d101      	bne.n	800cbf4 <SD_PowerON+0xcc>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e000      	b.n	800cbf6 <SD_PowerON+0xce>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	613b      	str	r3, [r7, #16]

    count++;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d802      	bhi.n	800cc0e <SD_PowerON+0xe6>
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0cc      	beq.n	800cba8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d902      	bls.n	800cc1e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cc18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cc1c:	e00c      	b.n	800cc38 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d003      	beq.n	800cc30 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	645a      	str	r2, [r3, #68]	@ 0x44
 800cc2e:	e002      	b.n	800cc36 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3718      	adds	r7, #24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	c1100000 	.word	0xc1100000

0800cc44 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d102      	bne.n	800cc5a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cc54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc58:	e018      	b.n	800cc8c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc62:	041b      	lsls	r3, r3, #16
 800cc64:	4619      	mov	r1, r3
 800cc66:	4610      	mov	r0, r2
 800cc68:	f003 f96e 	bl	800ff48 <SDMMC_CmdSendStatus>
 800cc6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d001      	beq.n	800cc78 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	e009      	b.n	800cc8c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f002 ff53 	bl	800fb2a <SDMMC_GetResponse>
 800cc84:	4602      	mov	r2, r0
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d101      	bne.n	800cca8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e025      	b.n	800ccf4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d106      	bne.n	800ccc2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7f7 fa57 	bl	8004170 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2202      	movs	r2, #2
 800ccc6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	f002 fde3 	bl	800f8a0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6818      	ldr	r0, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	461a      	mov	r2, r3
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	f002 fe37 	bl	800f958 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e04c      	b.n	800cda8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7f6 feaa 	bl	8003a7c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2202      	movs	r2, #2
 800cd2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f022 0203 	bic.w	r2, r2, #3
 800cd3e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	4b19      	ldr	r3, [pc, #100]	@ (800cdb0 <HAL_SPDIFRX_Init+0xb4>)
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800cd58:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800cd5e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800cd64:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800cd6a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800cd70:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800cd76:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800cd7c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800cd82:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800cd88:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	fff88407 	.word	0xfff88407

0800cdb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e09d      	b.n	800cf02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d108      	bne.n	800cde0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cdd6:	d009      	beq.n	800cdec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	61da      	str	r2, [r3, #28]
 800cdde:	e005      	b.n	800cdec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d106      	bne.n	800ce0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7f6 fe9c 	bl	8003b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2202      	movs	r2, #2
 800ce10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce2c:	d902      	bls.n	800ce34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	e002      	b.n	800ce3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ce34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ce42:	d007      	beq.n	800ce54 <HAL_SPI_Init+0xa0>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce4c:	d002      	beq.n	800ce54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	f003 0302 	and.w	r3, r3, #2
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	695b      	ldr	r3, [r3, #20]
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	431a      	orrs	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	699b      	ldr	r3, [r3, #24]
 800ce7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce82:	431a      	orrs	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	69db      	ldr	r3, [r3, #28]
 800ce88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce8c:	431a      	orrs	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce96:	ea42 0103 	orr.w	r1, r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	430a      	orrs	r2, r1
 800cea8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	0c1b      	lsrs	r3, r3, #16
 800ceb0:	f003 0204 	and.w	r2, r3, #4
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb8:	f003 0310 	and.w	r3, r3, #16
 800cebc:	431a      	orrs	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cec2:	f003 0308 	and.w	r3, r3, #8
 800cec6:	431a      	orrs	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ced0:	ea42 0103 	orr.w	r1, r2, r3
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	430a      	orrs	r2, r1
 800cee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	69da      	ldr	r2, [r3, #28]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b082      	sub	sp, #8
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e049      	b.n	800cfb0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d106      	bne.n	800cf36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7f6 fe69 	bl	8003c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2202      	movs	r2, #2
 800cf3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3304      	adds	r3, #4
 800cf46:	4619      	mov	r1, r3
 800cf48:	4610      	mov	r0, r2
 800cf4a:	f000 fc11 	bl	800d770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d001      	beq.n	800cfd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e054      	b.n	800d07a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	68da      	ldr	r2, [r3, #12]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f042 0201 	orr.w	r2, r2, #1
 800cfe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a26      	ldr	r2, [pc, #152]	@ (800d088 <HAL_TIM_Base_Start_IT+0xd0>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d022      	beq.n	800d038 <HAL_TIM_Base_Start_IT+0x80>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cffa:	d01d      	beq.n	800d038 <HAL_TIM_Base_Start_IT+0x80>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a22      	ldr	r2, [pc, #136]	@ (800d08c <HAL_TIM_Base_Start_IT+0xd4>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d018      	beq.n	800d038 <HAL_TIM_Base_Start_IT+0x80>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a21      	ldr	r2, [pc, #132]	@ (800d090 <HAL_TIM_Base_Start_IT+0xd8>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d013      	beq.n	800d038 <HAL_TIM_Base_Start_IT+0x80>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a1f      	ldr	r2, [pc, #124]	@ (800d094 <HAL_TIM_Base_Start_IT+0xdc>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d00e      	beq.n	800d038 <HAL_TIM_Base_Start_IT+0x80>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a1e      	ldr	r2, [pc, #120]	@ (800d098 <HAL_TIM_Base_Start_IT+0xe0>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d009      	beq.n	800d038 <HAL_TIM_Base_Start_IT+0x80>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a1c      	ldr	r2, [pc, #112]	@ (800d09c <HAL_TIM_Base_Start_IT+0xe4>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d004      	beq.n	800d038 <HAL_TIM_Base_Start_IT+0x80>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a1b      	ldr	r2, [pc, #108]	@ (800d0a0 <HAL_TIM_Base_Start_IT+0xe8>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d115      	bne.n	800d064 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689a      	ldr	r2, [r3, #8]
 800d03e:	4b19      	ldr	r3, [pc, #100]	@ (800d0a4 <HAL_TIM_Base_Start_IT+0xec>)
 800d040:	4013      	ands	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b06      	cmp	r3, #6
 800d048:	d015      	beq.n	800d076 <HAL_TIM_Base_Start_IT+0xbe>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d050:	d011      	beq.n	800d076 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f042 0201 	orr.w	r2, r2, #1
 800d060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d062:	e008      	b.n	800d076 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f042 0201 	orr.w	r2, r2, #1
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	e000      	b.n	800d078 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	40010000 	.word	0x40010000
 800d08c:	40000400 	.word	0x40000400
 800d090:	40000800 	.word	0x40000800
 800d094:	40000c00 	.word	0x40000c00
 800d098:	40010400 	.word	0x40010400
 800d09c:	40014000 	.word	0x40014000
 800d0a0:	40001800 	.word	0x40001800
 800d0a4:	00010007 	.word	0x00010007

0800d0a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e049      	b.n	800d14e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7f6 fe08 	bl	8003ce4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	f000 fb42 	bl	800d770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b084      	sub	sp, #16
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	691b      	ldr	r3, [r3, #16]
 800d16c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	f003 0302 	and.w	r3, r3, #2
 800d174:	2b00      	cmp	r3, #0
 800d176:	d020      	beq.n	800d1ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f003 0302 	and.w	r3, r3, #2
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d01b      	beq.n	800d1ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f06f 0202 	mvn.w	r2, #2
 800d18a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	699b      	ldr	r3, [r3, #24]
 800d198:	f003 0303 	and.w	r3, r3, #3
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d003      	beq.n	800d1a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fac7 	bl	800d734 <HAL_TIM_IC_CaptureCallback>
 800d1a6:	e005      	b.n	800d1b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fab9 	bl	800d720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 faca 	bl	800d748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d020      	beq.n	800d206 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f003 0304 	and.w	r3, r3, #4
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d01b      	beq.n	800d206 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f06f 0204 	mvn.w	r2, #4
 800d1d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d003      	beq.n	800d1f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 faa1 	bl	800d734 <HAL_TIM_IC_CaptureCallback>
 800d1f2:	e005      	b.n	800d200 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fa93 	bl	800d720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 faa4 	bl	800d748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	f003 0308 	and.w	r3, r3, #8
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d020      	beq.n	800d252 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f003 0308 	and.w	r3, r3, #8
 800d216:	2b00      	cmp	r3, #0
 800d218:	d01b      	beq.n	800d252 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f06f 0208 	mvn.w	r2, #8
 800d222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2204      	movs	r2, #4
 800d228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	69db      	ldr	r3, [r3, #28]
 800d230:	f003 0303 	and.w	r3, r3, #3
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fa7b 	bl	800d734 <HAL_TIM_IC_CaptureCallback>
 800d23e:	e005      	b.n	800d24c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fa6d 	bl	800d720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fa7e 	bl	800d748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	f003 0310 	and.w	r3, r3, #16
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d020      	beq.n	800d29e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f003 0310 	and.w	r3, r3, #16
 800d262:	2b00      	cmp	r3, #0
 800d264:	d01b      	beq.n	800d29e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f06f 0210 	mvn.w	r2, #16
 800d26e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2208      	movs	r2, #8
 800d274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d280:	2b00      	cmp	r3, #0
 800d282:	d003      	beq.n	800d28c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 fa55 	bl	800d734 <HAL_TIM_IC_CaptureCallback>
 800d28a:	e005      	b.n	800d298 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fa47 	bl	800d720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fa58 	bl	800d748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00c      	beq.n	800d2c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d007      	beq.n	800d2c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f06f 0201 	mvn.w	r2, #1
 800d2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7f5 feb7 	bl	8003030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d104      	bne.n	800d2d6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00c      	beq.n	800d2f0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d007      	beq.n	800d2f0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fef4 	bl	800e0d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00c      	beq.n	800d314 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d300:	2b00      	cmp	r3, #0
 800d302:	d007      	beq.n	800d314 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 feec 	bl	800e0ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00c      	beq.n	800d338 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d324:	2b00      	cmp	r3, #0
 800d326:	d007      	beq.n	800d338 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fa12 	bl	800d75c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	f003 0320 	and.w	r3, r3, #32
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00c      	beq.n	800d35c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f003 0320 	and.w	r3, r3, #32
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d007      	beq.n	800d35c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f06f 0220 	mvn.w	r2, #32
 800d354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 feb4 	bl	800e0c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d35c:	bf00      	nop
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d101      	bne.n	800d382 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d37e:	2302      	movs	r3, #2
 800d380:	e0ff      	b.n	800d582 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b14      	cmp	r3, #20
 800d38e:	f200 80f0 	bhi.w	800d572 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d392:	a201      	add	r2, pc, #4	@ (adr r2, 800d398 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d398:	0800d3ed 	.word	0x0800d3ed
 800d39c:	0800d573 	.word	0x0800d573
 800d3a0:	0800d573 	.word	0x0800d573
 800d3a4:	0800d573 	.word	0x0800d573
 800d3a8:	0800d42d 	.word	0x0800d42d
 800d3ac:	0800d573 	.word	0x0800d573
 800d3b0:	0800d573 	.word	0x0800d573
 800d3b4:	0800d573 	.word	0x0800d573
 800d3b8:	0800d46f 	.word	0x0800d46f
 800d3bc:	0800d573 	.word	0x0800d573
 800d3c0:	0800d573 	.word	0x0800d573
 800d3c4:	0800d573 	.word	0x0800d573
 800d3c8:	0800d4af 	.word	0x0800d4af
 800d3cc:	0800d573 	.word	0x0800d573
 800d3d0:	0800d573 	.word	0x0800d573
 800d3d4:	0800d573 	.word	0x0800d573
 800d3d8:	0800d4f1 	.word	0x0800d4f1
 800d3dc:	0800d573 	.word	0x0800d573
 800d3e0:	0800d573 	.word	0x0800d573
 800d3e4:	0800d573 	.word	0x0800d573
 800d3e8:	0800d531 	.word	0x0800d531
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68b9      	ldr	r1, [r7, #8]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f000 fa62 	bl	800d8bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	699a      	ldr	r2, [r3, #24]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f042 0208 	orr.w	r2, r2, #8
 800d406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	699a      	ldr	r2, [r3, #24]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f022 0204 	bic.w	r2, r2, #4
 800d416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6999      	ldr	r1, [r3, #24]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	691a      	ldr	r2, [r3, #16]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	430a      	orrs	r2, r1
 800d428:	619a      	str	r2, [r3, #24]
      break;
 800d42a:	e0a5      	b.n	800d578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68b9      	ldr	r1, [r7, #8]
 800d432:	4618      	mov	r0, r3
 800d434:	f000 fab4 	bl	800d9a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	699a      	ldr	r2, [r3, #24]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	699a      	ldr	r2, [r3, #24]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6999      	ldr	r1, [r3, #24]
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	021a      	lsls	r2, r3, #8
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	430a      	orrs	r2, r1
 800d46a:	619a      	str	r2, [r3, #24]
      break;
 800d46c:	e084      	b.n	800d578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68b9      	ldr	r1, [r7, #8]
 800d474:	4618      	mov	r0, r3
 800d476:	f000 fb0b 	bl	800da90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	69da      	ldr	r2, [r3, #28]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f042 0208 	orr.w	r2, r2, #8
 800d488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	69da      	ldr	r2, [r3, #28]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f022 0204 	bic.w	r2, r2, #4
 800d498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	69d9      	ldr	r1, [r3, #28]
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	691a      	ldr	r2, [r3, #16]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	430a      	orrs	r2, r1
 800d4aa:	61da      	str	r2, [r3, #28]
      break;
 800d4ac:	e064      	b.n	800d578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68b9      	ldr	r1, [r7, #8]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 fb61 	bl	800db7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	69da      	ldr	r2, [r3, #28]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d4c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	69da      	ldr	r2, [r3, #28]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d4d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	69d9      	ldr	r1, [r3, #28]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	021a      	lsls	r2, r3, #8
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	430a      	orrs	r2, r1
 800d4ec:	61da      	str	r2, [r3, #28]
      break;
 800d4ee:	e043      	b.n	800d578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	68b9      	ldr	r1, [r7, #8]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 fb98 	bl	800dc2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f042 0208 	orr.w	r2, r2, #8
 800d50a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f022 0204 	bic.w	r2, r2, #4
 800d51a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	691a      	ldr	r2, [r3, #16]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	430a      	orrs	r2, r1
 800d52c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d52e:	e023      	b.n	800d578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	68b9      	ldr	r1, [r7, #8]
 800d536:	4618      	mov	r0, r3
 800d538:	f000 fbca 	bl	800dcd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d54a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d55a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	021a      	lsls	r2, r3, #8
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	430a      	orrs	r2, r1
 800d56e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d570:	e002      	b.n	800d578 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	75fb      	strb	r3, [r7, #23]
      break;
 800d576:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d580:	7dfb      	ldrb	r3, [r7, #23]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3718      	adds	r7, #24
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop

0800d58c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d596:	2300      	movs	r3, #0
 800d598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d101      	bne.n	800d5a8 <HAL_TIM_ConfigClockSource+0x1c>
 800d5a4:	2302      	movs	r3, #2
 800d5a6:	e0b4      	b.n	800d712 <HAL_TIM_ConfigClockSource+0x186>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2202      	movs	r2, #2
 800d5b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	4b56      	ldr	r3, [pc, #344]	@ (800d71c <HAL_TIM_ConfigClockSource+0x190>)
 800d5c4:	4013      	ands	r3, r2
 800d5c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d5ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5e0:	d03e      	beq.n	800d660 <HAL_TIM_ConfigClockSource+0xd4>
 800d5e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5e6:	f200 8087 	bhi.w	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5ee:	f000 8086 	beq.w	800d6fe <HAL_TIM_ConfigClockSource+0x172>
 800d5f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5f6:	d87f      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5f8:	2b70      	cmp	r3, #112	@ 0x70
 800d5fa:	d01a      	beq.n	800d632 <HAL_TIM_ConfigClockSource+0xa6>
 800d5fc:	2b70      	cmp	r3, #112	@ 0x70
 800d5fe:	d87b      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800d600:	2b60      	cmp	r3, #96	@ 0x60
 800d602:	d050      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x11a>
 800d604:	2b60      	cmp	r3, #96	@ 0x60
 800d606:	d877      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800d608:	2b50      	cmp	r3, #80	@ 0x50
 800d60a:	d03c      	beq.n	800d686 <HAL_TIM_ConfigClockSource+0xfa>
 800d60c:	2b50      	cmp	r3, #80	@ 0x50
 800d60e:	d873      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800d610:	2b40      	cmp	r3, #64	@ 0x40
 800d612:	d058      	beq.n	800d6c6 <HAL_TIM_ConfigClockSource+0x13a>
 800d614:	2b40      	cmp	r3, #64	@ 0x40
 800d616:	d86f      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800d618:	2b30      	cmp	r3, #48	@ 0x30
 800d61a:	d064      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x15a>
 800d61c:	2b30      	cmp	r3, #48	@ 0x30
 800d61e:	d86b      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800d620:	2b20      	cmp	r3, #32
 800d622:	d060      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x15a>
 800d624:	2b20      	cmp	r3, #32
 800d626:	d867      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d05c      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x15a>
 800d62c:	2b10      	cmp	r3, #16
 800d62e:	d05a      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x15a>
 800d630:	e062      	b.n	800d6f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d642:	f000 fc13 	bl	800de6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	609a      	str	r2, [r3, #8]
      break;
 800d65e:	e04f      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d670:	f000 fbfc 	bl	800de6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	689a      	ldr	r2, [r3, #8]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d682:	609a      	str	r2, [r3, #8]
      break;
 800d684:	e03c      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d692:	461a      	mov	r2, r3
 800d694:	f000 fb70 	bl	800dd78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2150      	movs	r1, #80	@ 0x50
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 fbc9 	bl	800de36 <TIM_ITRx_SetConfig>
      break;
 800d6a4:	e02c      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f000 fb8f 	bl	800ddd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2160      	movs	r1, #96	@ 0x60
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 fbb9 	bl	800de36 <TIM_ITRx_SetConfig>
      break;
 800d6c4:	e01c      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f000 fb50 	bl	800dd78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2140      	movs	r1, #64	@ 0x40
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 fba9 	bl	800de36 <TIM_ITRx_SetConfig>
      break;
 800d6e4:	e00c      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f000 fba0 	bl	800de36 <TIM_ITRx_SetConfig>
      break;
 800d6f6:	e003      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d6fc:	e000      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d6fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	fffeff88 	.word	0xfffeff88

0800d720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d728:	bf00      	nop
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d73c:	bf00      	nop
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d770:	b480      	push	{r7}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a43      	ldr	r2, [pc, #268]	@ (800d890 <TIM_Base_SetConfig+0x120>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d013      	beq.n	800d7b0 <TIM_Base_SetConfig+0x40>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d78e:	d00f      	beq.n	800d7b0 <TIM_Base_SetConfig+0x40>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a40      	ldr	r2, [pc, #256]	@ (800d894 <TIM_Base_SetConfig+0x124>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d00b      	beq.n	800d7b0 <TIM_Base_SetConfig+0x40>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a3f      	ldr	r2, [pc, #252]	@ (800d898 <TIM_Base_SetConfig+0x128>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d007      	beq.n	800d7b0 <TIM_Base_SetConfig+0x40>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a3e      	ldr	r2, [pc, #248]	@ (800d89c <TIM_Base_SetConfig+0x12c>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d003      	beq.n	800d7b0 <TIM_Base_SetConfig+0x40>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4a3d      	ldr	r2, [pc, #244]	@ (800d8a0 <TIM_Base_SetConfig+0x130>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d108      	bne.n	800d7c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	4a32      	ldr	r2, [pc, #200]	@ (800d890 <TIM_Base_SetConfig+0x120>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d02b      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7d0:	d027      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4a2f      	ldr	r2, [pc, #188]	@ (800d894 <TIM_Base_SetConfig+0x124>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d023      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4a2e      	ldr	r2, [pc, #184]	@ (800d898 <TIM_Base_SetConfig+0x128>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d01f      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4a2d      	ldr	r2, [pc, #180]	@ (800d89c <TIM_Base_SetConfig+0x12c>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d01b      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4a2c      	ldr	r2, [pc, #176]	@ (800d8a0 <TIM_Base_SetConfig+0x130>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d017      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a2b      	ldr	r2, [pc, #172]	@ (800d8a4 <TIM_Base_SetConfig+0x134>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d013      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a2a      	ldr	r2, [pc, #168]	@ (800d8a8 <TIM_Base_SetConfig+0x138>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d00f      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a29      	ldr	r2, [pc, #164]	@ (800d8ac <TIM_Base_SetConfig+0x13c>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d00b      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a28      	ldr	r2, [pc, #160]	@ (800d8b0 <TIM_Base_SetConfig+0x140>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d007      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a27      	ldr	r2, [pc, #156]	@ (800d8b4 <TIM_Base_SetConfig+0x144>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d003      	beq.n	800d822 <TIM_Base_SetConfig+0xb2>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a26      	ldr	r2, [pc, #152]	@ (800d8b8 <TIM_Base_SetConfig+0x148>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d108      	bne.n	800d834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	4313      	orrs	r3, r2
 800d832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	695b      	ldr	r3, [r3, #20]
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	689a      	ldr	r2, [r3, #8]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a0e      	ldr	r2, [pc, #56]	@ (800d890 <TIM_Base_SetConfig+0x120>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d003      	beq.n	800d862 <TIM_Base_SetConfig+0xf2>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a10      	ldr	r2, [pc, #64]	@ (800d8a0 <TIM_Base_SetConfig+0x130>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d103      	bne.n	800d86a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	691a      	ldr	r2, [r3, #16]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f043 0204 	orr.w	r2, r3, #4
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2201      	movs	r2, #1
 800d87a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	601a      	str	r2, [r3, #0]
}
 800d882:	bf00      	nop
 800d884:	3714      	adds	r7, #20
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	40010000 	.word	0x40010000
 800d894:	40000400 	.word	0x40000400
 800d898:	40000800 	.word	0x40000800
 800d89c:	40000c00 	.word	0x40000c00
 800d8a0:	40010400 	.word	0x40010400
 800d8a4:	40014000 	.word	0x40014000
 800d8a8:	40014400 	.word	0x40014400
 800d8ac:	40014800 	.word	0x40014800
 800d8b0:	40001800 	.word	0x40001800
 800d8b4:	40001c00 	.word	0x40001c00
 800d8b8:	40002000 	.word	0x40002000

0800d8bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b087      	sub	sp, #28
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a1b      	ldr	r3, [r3, #32]
 800d8d0:	f023 0201 	bic.w	r2, r3, #1
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	4b2b      	ldr	r3, [pc, #172]	@ (800d994 <TIM_OC1_SetConfig+0xd8>)
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f023 0303 	bic.w	r3, r3, #3
 800d8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f023 0302 	bic.w	r3, r3, #2
 800d904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4a21      	ldr	r2, [pc, #132]	@ (800d998 <TIM_OC1_SetConfig+0xdc>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d003      	beq.n	800d920 <TIM_OC1_SetConfig+0x64>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4a20      	ldr	r2, [pc, #128]	@ (800d99c <TIM_OC1_SetConfig+0xe0>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d10c      	bne.n	800d93a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	f023 0308 	bic.w	r3, r3, #8
 800d926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	4313      	orrs	r3, r2
 800d930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f023 0304 	bic.w	r3, r3, #4
 800d938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a16      	ldr	r2, [pc, #88]	@ (800d998 <TIM_OC1_SetConfig+0xdc>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d003      	beq.n	800d94a <TIM_OC1_SetConfig+0x8e>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4a15      	ldr	r2, [pc, #84]	@ (800d99c <TIM_OC1_SetConfig+0xe0>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d111      	bne.n	800d96e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	695b      	ldr	r3, [r3, #20]
 800d95e:	693a      	ldr	r2, [r7, #16]
 800d960:	4313      	orrs	r3, r2
 800d962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	693a      	ldr	r2, [r7, #16]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	621a      	str	r2, [r3, #32]
}
 800d988:	bf00      	nop
 800d98a:	371c      	adds	r7, #28
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr
 800d994:	fffeff8f 	.word	0xfffeff8f
 800d998:	40010000 	.word	0x40010000
 800d99c:	40010400 	.word	0x40010400

0800d9a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b087      	sub	sp, #28
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6a1b      	ldr	r3, [r3, #32]
 800d9b4:	f023 0210 	bic.w	r2, r3, #16
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	699b      	ldr	r3, [r3, #24]
 800d9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	4b2e      	ldr	r3, [pc, #184]	@ (800da84 <TIM_OC2_SetConfig+0xe4>)
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	021b      	lsls	r3, r3, #8
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	f023 0320 	bic.w	r3, r3, #32
 800d9ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	011b      	lsls	r3, r3, #4
 800d9f2:	697a      	ldr	r2, [r7, #20]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a23      	ldr	r2, [pc, #140]	@ (800da88 <TIM_OC2_SetConfig+0xe8>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d003      	beq.n	800da08 <TIM_OC2_SetConfig+0x68>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a22      	ldr	r2, [pc, #136]	@ (800da8c <TIM_OC2_SetConfig+0xec>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d10d      	bne.n	800da24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	011b      	lsls	r3, r3, #4
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	4313      	orrs	r3, r2
 800da1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a18      	ldr	r2, [pc, #96]	@ (800da88 <TIM_OC2_SetConfig+0xe8>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d003      	beq.n	800da34 <TIM_OC2_SetConfig+0x94>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a17      	ldr	r2, [pc, #92]	@ (800da8c <TIM_OC2_SetConfig+0xec>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d113      	bne.n	800da5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800da3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800da42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	693a      	ldr	r2, [r7, #16]
 800da4c:	4313      	orrs	r3, r2
 800da4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	4313      	orrs	r3, r2
 800da5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	693a      	ldr	r2, [r7, #16]
 800da60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	697a      	ldr	r2, [r7, #20]
 800da74:	621a      	str	r2, [r3, #32]
}
 800da76:	bf00      	nop
 800da78:	371c      	adds	r7, #28
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	feff8fff 	.word	0xfeff8fff
 800da88:	40010000 	.word	0x40010000
 800da8c:	40010400 	.word	0x40010400

0800da90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da90:	b480      	push	{r7}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a1b      	ldr	r3, [r3, #32]
 800daa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	69db      	ldr	r3, [r3, #28]
 800dab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	4b2d      	ldr	r3, [pc, #180]	@ (800db70 <TIM_OC3_SetConfig+0xe0>)
 800dabc:	4013      	ands	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f023 0303 	bic.w	r3, r3, #3
 800dac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	4313      	orrs	r3, r2
 800dad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	021b      	lsls	r3, r3, #8
 800dae0:	697a      	ldr	r2, [r7, #20]
 800dae2:	4313      	orrs	r3, r2
 800dae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a22      	ldr	r2, [pc, #136]	@ (800db74 <TIM_OC3_SetConfig+0xe4>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d003      	beq.n	800daf6 <TIM_OC3_SetConfig+0x66>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a21      	ldr	r2, [pc, #132]	@ (800db78 <TIM_OC3_SetConfig+0xe8>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d10d      	bne.n	800db12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dafc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	021b      	lsls	r3, r3, #8
 800db04:	697a      	ldr	r2, [r7, #20]
 800db06:	4313      	orrs	r3, r2
 800db08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800db10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a17      	ldr	r2, [pc, #92]	@ (800db74 <TIM_OC3_SetConfig+0xe4>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d003      	beq.n	800db22 <TIM_OC3_SetConfig+0x92>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a16      	ldr	r2, [pc, #88]	@ (800db78 <TIM_OC3_SetConfig+0xe8>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d113      	bne.n	800db4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800db30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	695b      	ldr	r3, [r3, #20]
 800db36:	011b      	lsls	r3, r3, #4
 800db38:	693a      	ldr	r2, [r7, #16]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	011b      	lsls	r3, r3, #4
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	4313      	orrs	r3, r2
 800db48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	697a      	ldr	r2, [r7, #20]
 800db62:	621a      	str	r2, [r3, #32]
}
 800db64:	bf00      	nop
 800db66:	371c      	adds	r7, #28
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	fffeff8f 	.word	0xfffeff8f
 800db74:	40010000 	.word	0x40010000
 800db78:	40010400 	.word	0x40010400

0800db7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b087      	sub	sp, #28
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a1b      	ldr	r3, [r3, #32]
 800db8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a1b      	ldr	r3, [r3, #32]
 800db90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	69db      	ldr	r3, [r3, #28]
 800dba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	4b1e      	ldr	r3, [pc, #120]	@ (800dc20 <TIM_OC4_SetConfig+0xa4>)
 800dba8:	4013      	ands	r3, r2
 800dbaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dbb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	021b      	lsls	r3, r3, #8
 800dbba:	68fa      	ldr	r2, [r7, #12]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dbc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	031b      	lsls	r3, r3, #12
 800dbce:	693a      	ldr	r2, [r7, #16]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4a13      	ldr	r2, [pc, #76]	@ (800dc24 <TIM_OC4_SetConfig+0xa8>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d003      	beq.n	800dbe4 <TIM_OC4_SetConfig+0x68>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4a12      	ldr	r2, [pc, #72]	@ (800dc28 <TIM_OC4_SetConfig+0xac>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d109      	bne.n	800dbf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dbea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	695b      	ldr	r3, [r3, #20]
 800dbf0:	019b      	lsls	r3, r3, #6
 800dbf2:	697a      	ldr	r2, [r7, #20]
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68fa      	ldr	r2, [r7, #12]
 800dc02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	685a      	ldr	r2, [r3, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	621a      	str	r2, [r3, #32]
}
 800dc12:	bf00      	nop
 800dc14:	371c      	adds	r7, #28
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	feff8fff 	.word	0xfeff8fff
 800dc24:	40010000 	.word	0x40010000
 800dc28:	40010400 	.word	0x40010400

0800dc2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a1b      	ldr	r3, [r3, #32]
 800dc40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc4 <TIM_OC5_SetConfig+0x98>)
 800dc58:	4013      	ands	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dc6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	041b      	lsls	r3, r3, #16
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	4313      	orrs	r3, r2
 800dc78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a12      	ldr	r2, [pc, #72]	@ (800dcc8 <TIM_OC5_SetConfig+0x9c>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d003      	beq.n	800dc8a <TIM_OC5_SetConfig+0x5e>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a11      	ldr	r2, [pc, #68]	@ (800dccc <TIM_OC5_SetConfig+0xa0>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d109      	bne.n	800dc9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	695b      	ldr	r3, [r3, #20]
 800dc96:	021b      	lsls	r3, r3, #8
 800dc98:	697a      	ldr	r2, [r7, #20]
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	685a      	ldr	r2, [r3, #4]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	621a      	str	r2, [r3, #32]
}
 800dcb8:	bf00      	nop
 800dcba:	371c      	adds	r7, #28
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr
 800dcc4:	fffeff8f 	.word	0xfffeff8f
 800dcc8:	40010000 	.word	0x40010000
 800dccc:	40010400 	.word	0x40010400

0800dcd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a1b      	ldr	r3, [r3, #32]
 800dce4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	4b1c      	ldr	r3, [pc, #112]	@ (800dd6c <TIM_OC6_SetConfig+0x9c>)
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	021b      	lsls	r3, r3, #8
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dd12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	051b      	lsls	r3, r3, #20
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4a13      	ldr	r2, [pc, #76]	@ (800dd70 <TIM_OC6_SetConfig+0xa0>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d003      	beq.n	800dd30 <TIM_OC6_SetConfig+0x60>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a12      	ldr	r2, [pc, #72]	@ (800dd74 <TIM_OC6_SetConfig+0xa4>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d109      	bne.n	800dd44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dd36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	695b      	ldr	r3, [r3, #20]
 800dd3c:	029b      	lsls	r3, r3, #10
 800dd3e:	697a      	ldr	r2, [r7, #20]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	685a      	ldr	r2, [r3, #4]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	693a      	ldr	r2, [r7, #16]
 800dd5c:	621a      	str	r2, [r3, #32]
}
 800dd5e:	bf00      	nop
 800dd60:	371c      	adds	r7, #28
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	feff8fff 	.word	0xfeff8fff
 800dd70:	40010000 	.word	0x40010000
 800dd74:	40010400 	.word	0x40010400

0800dd78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b087      	sub	sp, #28
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6a1b      	ldr	r3, [r3, #32]
 800dd88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
 800dd8e:	f023 0201 	bic.w	r2, r3, #1
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dda2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	011b      	lsls	r3, r3, #4
 800dda8:	693a      	ldr	r2, [r7, #16]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f023 030a 	bic.w	r3, r3, #10
 800ddb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	693a      	ldr	r2, [r7, #16]
 800ddc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	621a      	str	r2, [r3, #32]
}
 800ddca:	bf00      	nop
 800ddcc:	371c      	adds	r7, #28
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr

0800ddd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddd6:	b480      	push	{r7}
 800ddd8:	b087      	sub	sp, #28
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	60f8      	str	r0, [r7, #12]
 800ddde:	60b9      	str	r1, [r7, #8]
 800dde0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6a1b      	ldr	r3, [r3, #32]
 800dde6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6a1b      	ldr	r3, [r3, #32]
 800ddec:	f023 0210 	bic.w	r2, r3, #16
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	699b      	ldr	r3, [r3, #24]
 800ddf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800de00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	031b      	lsls	r3, r3, #12
 800de06:	693a      	ldr	r2, [r7, #16]
 800de08:	4313      	orrs	r3, r2
 800de0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800de12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	011b      	lsls	r3, r3, #4
 800de18:	697a      	ldr	r2, [r7, #20]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	693a      	ldr	r2, [r7, #16]
 800de22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	621a      	str	r2, [r3, #32]
}
 800de2a:	bf00      	nop
 800de2c:	371c      	adds	r7, #28
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de36:	b480      	push	{r7}
 800de38:	b085      	sub	sp, #20
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	4313      	orrs	r3, r2
 800de54:	f043 0307 	orr.w	r3, r3, #7
 800de58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	609a      	str	r2, [r3, #8]
}
 800de60:	bf00      	nop
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b087      	sub	sp, #28
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
 800de78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	021a      	lsls	r2, r3, #8
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	431a      	orrs	r2, r3
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	4313      	orrs	r3, r2
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	4313      	orrs	r3, r2
 800de98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	697a      	ldr	r2, [r7, #20]
 800de9e:	609a      	str	r2, [r3, #8]
}
 800dea0:	bf00      	nop
 800dea2:	371c      	adds	r7, #28
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800deac:	b480      	push	{r7}
 800deae:	b085      	sub	sp, #20
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800debc:	2b01      	cmp	r3, #1
 800debe:	d101      	bne.n	800dec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dec0:	2302      	movs	r3, #2
 800dec2:	e06d      	b.n	800dfa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2201      	movs	r2, #1
 800dec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a30      	ldr	r2, [pc, #192]	@ (800dfac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d004      	beq.n	800def8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a2f      	ldr	r2, [pc, #188]	@ (800dfb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d108      	bne.n	800df0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800defe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	4313      	orrs	r3, r2
 800df08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	4313      	orrs	r3, r2
 800df1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a20      	ldr	r2, [pc, #128]	@ (800dfac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d022      	beq.n	800df74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df36:	d01d      	beq.n	800df74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a1d      	ldr	r2, [pc, #116]	@ (800dfb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d018      	beq.n	800df74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a1c      	ldr	r2, [pc, #112]	@ (800dfb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d013      	beq.n	800df74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a1a      	ldr	r2, [pc, #104]	@ (800dfbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d00e      	beq.n	800df74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a15      	ldr	r2, [pc, #84]	@ (800dfb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d009      	beq.n	800df74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a16      	ldr	r2, [pc, #88]	@ (800dfc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d004      	beq.n	800df74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a15      	ldr	r2, [pc, #84]	@ (800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d10c      	bne.n	800df8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	4313      	orrs	r3, r2
 800df84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2201      	movs	r2, #1
 800df92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	40010000 	.word	0x40010000
 800dfb0:	40010400 	.word	0x40010400
 800dfb4:	40000400 	.word	0x40000400
 800dfb8:	40000800 	.word	0x40000800
 800dfbc:	40000c00 	.word	0x40000c00
 800dfc0:	40014000 	.word	0x40014000
 800dfc4:	40001800 	.word	0x40001800

0800dfc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d101      	bne.n	800dfe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	e065      	b.n	800e0b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	4313      	orrs	r3, r2
 800dff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	4313      	orrs	r3, r2
 800e006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	4313      	orrs	r3, r2
 800e014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4313      	orrs	r3, r2
 800e022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	691b      	ldr	r3, [r3, #16]
 800e02e:	4313      	orrs	r3, r2
 800e030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	695b      	ldr	r3, [r3, #20]
 800e03c:	4313      	orrs	r3, r2
 800e03e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e04a:	4313      	orrs	r3, r2
 800e04c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	041b      	lsls	r3, r3, #16
 800e05a:	4313      	orrs	r3, r2
 800e05c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a16      	ldr	r2, [pc, #88]	@ (800e0bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d004      	beq.n	800e072 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a14      	ldr	r2, [pc, #80]	@ (800e0c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d115      	bne.n	800e09e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e07c:	051b      	lsls	r3, r3, #20
 800e07e:	4313      	orrs	r3, r2
 800e080:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	69db      	ldr	r3, [r3, #28]
 800e08c:	4313      	orrs	r3, r2
 800e08e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	6a1b      	ldr	r3, [r3, #32]
 800e09a:	4313      	orrs	r3, r2
 800e09c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	40010000 	.word	0x40010000
 800e0c0:	40010400 	.word	0x40010400

0800e0c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0cc:	bf00      	nop
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0e0:	bf00      	nop
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d101      	bne.n	800e112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e040      	b.n	800e194 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7f5 fecc 	bl	8003ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2224      	movs	r2, #36	@ 0x24
 800e12c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f022 0201 	bic.w	r2, r2, #1
 800e13c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e142:	2b00      	cmp	r3, #0
 800e144:	d002      	beq.n	800e14c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 ffb6 	bl	800f0b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 fd4f 	bl	800ebf0 <UART_SetConfig>
 800e152:	4603      	mov	r3, r0
 800e154:	2b01      	cmp	r3, #1
 800e156:	d101      	bne.n	800e15c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e158:	2301      	movs	r3, #1
 800e15a:	e01b      	b.n	800e194 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e16a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	689a      	ldr	r2, [r3, #8]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e17a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f042 0201 	orr.w	r2, r2, #1
 800e18a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f001 f835 	bl	800f1fc <UART_CheckIdleState>
 800e192:	4603      	mov	r3, r0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08a      	sub	sp, #40	@ 0x28
 800e1a0:	af02      	add	r7, sp, #8
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	603b      	str	r3, [r7, #0]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1b0:	2b20      	cmp	r3, #32
 800e1b2:	d177      	bne.n	800e2a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d002      	beq.n	800e1c0 <HAL_UART_Transmit+0x24>
 800e1ba:	88fb      	ldrh	r3, [r7, #6]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d101      	bne.n	800e1c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e070      	b.n	800e2a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2221      	movs	r2, #33	@ 0x21
 800e1d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e1d2:	f7f6 ff63 	bl	800509c <HAL_GetTick>
 800e1d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	88fa      	ldrh	r2, [r7, #6]
 800e1dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	88fa      	ldrh	r2, [r7, #6]
 800e1e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1f0:	d108      	bne.n	800e204 <HAL_UART_Transmit+0x68>
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d104      	bne.n	800e204 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	61bb      	str	r3, [r7, #24]
 800e202:	e003      	b.n	800e20c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e208:	2300      	movs	r3, #0
 800e20a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e20c:	e02f      	b.n	800e26e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2200      	movs	r2, #0
 800e216:	2180      	movs	r1, #128	@ 0x80
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f001 f846 	bl	800f2aa <UART_WaitOnFlagUntilTimeout>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d004      	beq.n	800e22e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2220      	movs	r2, #32
 800e228:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e03b      	b.n	800e2a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10b      	bne.n	800e24c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	461a      	mov	r2, r3
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e242:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	3302      	adds	r3, #2
 800e248:	61bb      	str	r3, [r7, #24]
 800e24a:	e007      	b.n	800e25c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	781a      	ldrb	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	3301      	adds	r3, #1
 800e25a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e262:	b29b      	uxth	r3, r3
 800e264:	3b01      	subs	r3, #1
 800e266:	b29a      	uxth	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e274:	b29b      	uxth	r3, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1c9      	bne.n	800e20e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2200      	movs	r2, #0
 800e282:	2140      	movs	r1, #64	@ 0x40
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f001 f810 	bl	800f2aa <UART_WaitOnFlagUntilTimeout>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d004      	beq.n	800e29a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2220      	movs	r2, #32
 800e294:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e296:	2303      	movs	r3, #3
 800e298:	e005      	b.n	800e2a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2220      	movs	r2, #32
 800e29e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	e000      	b.n	800e2a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e2a4:	2302      	movs	r3, #2
  }
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3720      	adds	r7, #32
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b08a      	sub	sp, #40	@ 0x28
 800e2b2:	af02      	add	r7, sp, #8
 800e2b4:	60f8      	str	r0, [r7, #12]
 800e2b6:	60b9      	str	r1, [r7, #8]
 800e2b8:	603b      	str	r3, [r7, #0]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2c4:	2b20      	cmp	r3, #32
 800e2c6:	f040 80b5 	bne.w	800e434 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <HAL_UART_Receive+0x28>
 800e2d0:	88fb      	ldrh	r3, [r7, #6]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d101      	bne.n	800e2da <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e0ad      	b.n	800e436 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2222      	movs	r2, #34	@ 0x22
 800e2e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e2f0:	f7f6 fed4 	bl	800509c <HAL_GetTick>
 800e2f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	88fa      	ldrh	r2, [r7, #6]
 800e2fa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	88fa      	ldrh	r2, [r7, #6]
 800e302:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e30e:	d10e      	bne.n	800e32e <HAL_UART_Receive+0x80>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d105      	bne.n	800e324 <HAL_UART_Receive+0x76>
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e31e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e322:	e02d      	b.n	800e380 <HAL_UART_Receive+0xd2>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	22ff      	movs	r2, #255	@ 0xff
 800e328:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e32c:	e028      	b.n	800e380 <HAL_UART_Receive+0xd2>
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10d      	bne.n	800e352 <HAL_UART_Receive+0xa4>
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d104      	bne.n	800e348 <HAL_UART_Receive+0x9a>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	22ff      	movs	r2, #255	@ 0xff
 800e342:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e346:	e01b      	b.n	800e380 <HAL_UART_Receive+0xd2>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	227f      	movs	r2, #127	@ 0x7f
 800e34c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e350:	e016      	b.n	800e380 <HAL_UART_Receive+0xd2>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e35a:	d10d      	bne.n	800e378 <HAL_UART_Receive+0xca>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d104      	bne.n	800e36e <HAL_UART_Receive+0xc0>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	227f      	movs	r2, #127	@ 0x7f
 800e368:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e36c:	e008      	b.n	800e380 <HAL_UART_Receive+0xd2>
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	223f      	movs	r2, #63	@ 0x3f
 800e372:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e376:	e003      	b.n	800e380 <HAL_UART_Receive+0xd2>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e386:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e390:	d108      	bne.n	800e3a4 <HAL_UART_Receive+0xf6>
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	691b      	ldr	r3, [r3, #16]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d104      	bne.n	800e3a4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e39a:	2300      	movs	r3, #0
 800e39c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	61bb      	str	r3, [r7, #24]
 800e3a2:	e003      	b.n	800e3ac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e3ac:	e036      	b.n	800e41c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2120      	movs	r1, #32
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f000 ff76 	bl	800f2aa <UART_WaitOnFlagUntilTimeout>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2220      	movs	r2, #32
 800e3c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800e3cc:	2303      	movs	r3, #3
 800e3ce:	e032      	b.n	800e436 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10c      	bne.n	800e3f0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3dc:	b29a      	uxth	r2, r3
 800e3de:	8a7b      	ldrh	r3, [r7, #18]
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	3302      	adds	r3, #2
 800e3ec:	61bb      	str	r3, [r7, #24]
 800e3ee:	e00c      	b.n	800e40a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	8a7b      	ldrh	r3, [r7, #18]
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	b2da      	uxtb	r2, r3
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	3301      	adds	r3, #1
 800e408:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e410:	b29b      	uxth	r3, r3
 800e412:	3b01      	subs	r3, #1
 800e414:	b29a      	uxth	r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e422:	b29b      	uxth	r3, r3
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1c2      	bne.n	800e3ae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2220      	movs	r2, #32
 800e42c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800e430:	2300      	movs	r3, #0
 800e432:	e000      	b.n	800e436 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e434:	2302      	movs	r3, #2
  }
}
 800e436:	4618      	mov	r0, r3
 800e438:	3720      	adds	r7, #32
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b08a      	sub	sp, #40	@ 0x28
 800e442:	af00      	add	r7, sp, #0
 800e444:	60f8      	str	r0, [r7, #12]
 800e446:	60b9      	str	r1, [r7, #8]
 800e448:	4613      	mov	r3, r2
 800e44a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e452:	2b20      	cmp	r3, #32
 800e454:	d132      	bne.n	800e4bc <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d002      	beq.n	800e462 <HAL_UART_Receive_DMA+0x24>
 800e45c:	88fb      	ldrh	r3, [r7, #6]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d101      	bne.n	800e466 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	e02b      	b.n	800e4be <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2200      	movs	r2, #0
 800e46a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e476:	2b00      	cmp	r3, #0
 800e478:	d018      	beq.n	800e4ac <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	e853 3f00 	ldrex	r3, [r3]
 800e486:	613b      	str	r3, [r7, #16]
   return(result);
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e48e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	461a      	mov	r2, r3
 800e496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e498:	623b      	str	r3, [r7, #32]
 800e49a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49c:	69f9      	ldr	r1, [r7, #28]
 800e49e:	6a3a      	ldr	r2, [r7, #32]
 800e4a0:	e841 2300 	strex	r3, r2, [r1]
 800e4a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1e6      	bne.n	800e47a <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e4ac:	88fb      	ldrh	r3, [r7, #6]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	68b9      	ldr	r1, [r7, #8]
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 ff66 	bl	800f384 <UART_Start_Receive_DMA>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	e000      	b.n	800e4be <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e4bc:	2302      	movs	r3, #2
  }
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3728      	adds	r7, #40	@ 0x28
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b090      	sub	sp, #64	@ 0x40
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4e6:	2b80      	cmp	r3, #128	@ 0x80
 800e4e8:	d139      	bne.n	800e55e <HAL_UART_DMAStop+0x98>
 800e4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4ec:	2b21      	cmp	r3, #33	@ 0x21
 800e4ee:	d136      	bne.n	800e55e <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	3308      	adds	r3, #8
 800e4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f8:	6a3b      	ldr	r3, [r7, #32]
 800e4fa:	e853 3f00 	ldrex	r3, [r3]
 800e4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e506:	637b      	str	r3, [r7, #52]	@ 0x34
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	3308      	adds	r3, #8
 800e50e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e518:	e841 2300 	strex	r3, r2, [r1]
 800e51c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e520:	2b00      	cmp	r3, #0
 800e522:	d1e5      	bne.n	800e4f0 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d015      	beq.n	800e558 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e530:	4618      	mov	r0, r3
 800e532:	f7f7 fc35 	bl	8005da0 <HAL_DMA_Abort>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00d      	beq.n	800e558 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e540:	4618      	mov	r0, r3
 800e542:	f7f7 fe49 	bl	80061d8 <HAL_DMA_GetError>
 800e546:	4603      	mov	r3, r0
 800e548:	2b20      	cmp	r3, #32
 800e54a:	d105      	bne.n	800e558 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2210      	movs	r2, #16
 800e550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e554:	2303      	movs	r3, #3
 800e556:	e044      	b.n	800e5e2 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 ffb3 	bl	800f4c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e568:	2b40      	cmp	r3, #64	@ 0x40
 800e56a:	d139      	bne.n	800e5e0 <HAL_UART_DMAStop+0x11a>
 800e56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56e:	2b22      	cmp	r3, #34	@ 0x22
 800e570:	d136      	bne.n	800e5e0 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	3308      	adds	r3, #8
 800e578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	e853 3f00 	ldrex	r3, [r3]
 800e580:	60bb      	str	r3, [r7, #8]
   return(result);
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e588:	633b      	str	r3, [r7, #48]	@ 0x30
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3308      	adds	r3, #8
 800e590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e592:	61ba      	str	r2, [r7, #24]
 800e594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e596:	6979      	ldr	r1, [r7, #20]
 800e598:	69ba      	ldr	r2, [r7, #24]
 800e59a:	e841 2300 	strex	r3, r2, [r1]
 800e59e:	613b      	str	r3, [r7, #16]
   return(result);
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1e5      	bne.n	800e572 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d015      	beq.n	800e5da <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7f7 fbf4 	bl	8005da0 <HAL_DMA_Abort>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00d      	beq.n	800e5da <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f7 fe08 	bl	80061d8 <HAL_DMA_GetError>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b20      	cmp	r3, #32
 800e5cc:	d105      	bne.n	800e5da <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2210      	movs	r2, #16
 800e5d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	e003      	b.n	800e5e2 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 ff98 	bl	800f510 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3740      	adds	r7, #64	@ 0x40
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
	...

0800e5ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b0ba      	sub	sp, #232	@ 0xe8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	69db      	ldr	r3, [r3, #28]
 800e5fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e612:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e616:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e61a:	4013      	ands	r3, r2
 800e61c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e624:	2b00      	cmp	r3, #0
 800e626:	d115      	bne.n	800e654 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e62c:	f003 0320 	and.w	r3, r3, #32
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00f      	beq.n	800e654 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e638:	f003 0320 	and.w	r3, r3, #32
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d009      	beq.n	800e654 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 82b1 	beq.w	800ebac <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	4798      	blx	r3
      }
      return;
 800e652:	e2ab      	b.n	800ebac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f000 8117 	beq.w	800e88c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e65e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	2b00      	cmp	r3, #0
 800e668:	d106      	bne.n	800e678 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e66a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e66e:	4b85      	ldr	r3, [pc, #532]	@ (800e884 <HAL_UART_IRQHandler+0x298>)
 800e670:	4013      	ands	r3, r2
 800e672:	2b00      	cmp	r3, #0
 800e674:	f000 810a 	beq.w	800e88c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e67c:	f003 0301 	and.w	r3, r3, #1
 800e680:	2b00      	cmp	r3, #0
 800e682:	d011      	beq.n	800e6a8 <HAL_UART_IRQHandler+0xbc>
 800e684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00b      	beq.n	800e6a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2201      	movs	r2, #1
 800e696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e69e:	f043 0201 	orr.w	r2, r3, #1
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6ac:	f003 0302 	and.w	r3, r3, #2
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d011      	beq.n	800e6d8 <HAL_UART_IRQHandler+0xec>
 800e6b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6b8:	f003 0301 	and.w	r3, r3, #1
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00b      	beq.n	800e6d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6ce:	f043 0204 	orr.w	r2, r3, #4
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6dc:	f003 0304 	and.w	r3, r3, #4
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d011      	beq.n	800e708 <HAL_UART_IRQHandler+0x11c>
 800e6e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6e8:	f003 0301 	and.w	r3, r3, #1
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00b      	beq.n	800e708 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2204      	movs	r2, #4
 800e6f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6fe:	f043 0202 	orr.w	r2, r3, #2
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e70c:	f003 0308 	and.w	r3, r3, #8
 800e710:	2b00      	cmp	r3, #0
 800e712:	d017      	beq.n	800e744 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e718:	f003 0320 	and.w	r3, r3, #32
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d105      	bne.n	800e72c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e724:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00b      	beq.n	800e744 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2208      	movs	r2, #8
 800e732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e73a:	f043 0208 	orr.w	r2, r3, #8
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d012      	beq.n	800e776 <HAL_UART_IRQHandler+0x18a>
 800e750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00c      	beq.n	800e776 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e76c:	f043 0220 	orr.w	r2, r3, #32
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f000 8217 	beq.w	800ebb0 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e786:	f003 0320 	and.w	r3, r3, #32
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00d      	beq.n	800e7aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e792:	f003 0320 	and.w	r3, r3, #32
 800e796:	2b00      	cmp	r3, #0
 800e798:	d007      	beq.n	800e7aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d003      	beq.n	800e7aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7be:	2b40      	cmp	r3, #64	@ 0x40
 800e7c0:	d005      	beq.n	800e7ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d04f      	beq.n	800e86e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 fe9e 	bl	800f510 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7de:	2b40      	cmp	r3, #64	@ 0x40
 800e7e0:	d141      	bne.n	800e866 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	3308      	adds	r3, #8
 800e7e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e7f0:	e853 3f00 	ldrex	r3, [r3]
 800e7f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e7f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e7fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	3308      	adds	r3, #8
 800e80a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e80e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e81a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e81e:	e841 2300 	strex	r3, r2, [r1]
 800e822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1d9      	bne.n	800e7e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e832:	2b00      	cmp	r3, #0
 800e834:	d013      	beq.n	800e85e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e83a:	4a13      	ldr	r2, [pc, #76]	@ (800e888 <HAL_UART_IRQHandler+0x29c>)
 800e83c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e842:	4618      	mov	r0, r3
 800e844:	f7f7 fb1c 	bl	8005e80 <HAL_DMA_Abort_IT>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d017      	beq.n	800e87e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e85c:	e00f      	b.n	800e87e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7f6 faaa 	bl	8004db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e864:	e00b      	b.n	800e87e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7f6 faa6 	bl	8004db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e86c:	e007      	b.n	800e87e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7f6 faa2 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e87c:	e198      	b.n	800ebb0 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e87e:	bf00      	nop
    return;
 800e880:	e196      	b.n	800ebb0 <HAL_UART_IRQHandler+0x5c4>
 800e882:	bf00      	nop
 800e884:	04000120 	.word	0x04000120
 800e888:	0800f827 	.word	0x0800f827

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e890:	2b01      	cmp	r3, #1
 800e892:	f040 8166 	bne.w	800eb62 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e89a:	f003 0310 	and.w	r3, r3, #16
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f000 815f 	beq.w	800eb62 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8a8:	f003 0310 	and.w	r3, r3, #16
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 8158 	beq.w	800eb62 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2210      	movs	r2, #16
 800e8b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	689b      	ldr	r3, [r3, #8]
 800e8c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8c4:	2b40      	cmp	r3, #64	@ 0x40
 800e8c6:	f040 80d0 	bne.w	800ea6a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e8d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f000 80ab 	beq.w	800ea36 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e8e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	f080 80a3 	bcs.w	800ea36 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e8f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8fe:	69db      	ldr	r3, [r3, #28]
 800e900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e904:	f000 8086 	beq.w	800ea14 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e910:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e914:	e853 3f00 	ldrex	r3, [r3]
 800e918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e91c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	461a      	mov	r2, r3
 800e92e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e936:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e93e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e942:	e841 2300 	strex	r3, r2, [r1]
 800e946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e94a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1da      	bne.n	800e908 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3308      	adds	r3, #8
 800e958:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e95c:	e853 3f00 	ldrex	r3, [r3]
 800e960:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e964:	f023 0301 	bic.w	r3, r3, #1
 800e968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e976:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e97a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e97e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e982:	e841 2300 	strex	r3, r2, [r1]
 800e986:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e1      	bne.n	800e952 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3308      	adds	r3, #8
 800e994:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e998:	e853 3f00 	ldrex	r3, [r3]
 800e99c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e99e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e9b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e9b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e9b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9ba:	e841 2300 	strex	r3, r2, [r1]
 800e9be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e9c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1e3      	bne.n	800e98e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2220      	movs	r2, #32
 800e9ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9dc:	e853 3f00 	ldrex	r3, [r3]
 800e9e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e9e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9e4:	f023 0310 	bic.w	r3, r3, #16
 800e9e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e9fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e9fe:	e841 2300 	strex	r3, r2, [r1]
 800ea02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d1e4      	bne.n	800e9d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7f7 f9c6 	bl	8005da0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2202      	movs	r2, #2
 800ea18:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f8d2 	bl	800ebd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ea34:	e0be      	b.n	800ebb4 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ea40:	429a      	cmp	r2, r3
 800ea42:	f040 80b7 	bne.w	800ebb4 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea4a:	69db      	ldr	r3, [r3, #28]
 800ea4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea50:	f040 80b0 	bne.w	800ebb4 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2202      	movs	r2, #2
 800ea58:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea60:	4619      	mov	r1, r3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f8b8 	bl	800ebd8 <HAL_UARTEx_RxEventCallback>
      return;
 800ea68:	e0a4      	b.n	800ebb4 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f000 8096 	beq.w	800ebb8 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ea8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f000 8091 	beq.w	800ebb8 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea9e:	e853 3f00 	ldrex	r3, [r3]
 800eaa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eaaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eab8:	647b      	str	r3, [r7, #68]	@ 0x44
 800eaba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eabc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eabe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eac0:	e841 2300 	strex	r3, r2, [r1]
 800eac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1e4      	bne.n	800ea96 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	3308      	adds	r3, #8
 800ead2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead6:	e853 3f00 	ldrex	r3, [r3]
 800eada:	623b      	str	r3, [r7, #32]
   return(result);
 800eadc:	6a3b      	ldr	r3, [r7, #32]
 800eade:	f023 0301 	bic.w	r3, r3, #1
 800eae2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	3308      	adds	r3, #8
 800eaec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800eaf0:	633a      	str	r2, [r7, #48]	@ 0x30
 800eaf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eaf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaf8:	e841 2300 	strex	r3, r2, [r1]
 800eafc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1e3      	bne.n	800eacc <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2220      	movs	r2, #32
 800eb08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	e853 3f00 	ldrex	r3, [r3]
 800eb24:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f023 0310 	bic.w	r3, r3, #16
 800eb2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	461a      	mov	r2, r3
 800eb36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eb3a:	61fb      	str	r3, [r7, #28]
 800eb3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb3e:	69b9      	ldr	r1, [r7, #24]
 800eb40:	69fa      	ldr	r2, [r7, #28]
 800eb42:	e841 2300 	strex	r3, r2, [r1]
 800eb46:	617b      	str	r3, [r7, #20]
   return(result);
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1e4      	bne.n	800eb18 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2202      	movs	r2, #2
 800eb52:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb58:	4619      	mov	r1, r3
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f83c 	bl	800ebd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb60:	e02a      	b.n	800ebb8 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800eb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d00e      	beq.n	800eb8c <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800eb6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d008      	beq.n	800eb8c <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d01c      	beq.n	800ebbc <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	4798      	blx	r3
    }
    return;
 800eb8a:	e017      	b.n	800ebbc <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d012      	beq.n	800ebbe <HAL_UART_IRQHandler+0x5d2>
 800eb98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d00c      	beq.n	800ebbe <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 fe50 	bl	800f84a <UART_EndTransmit_IT>
    return;
 800ebaa:	e008      	b.n	800ebbe <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebac:	bf00      	nop
 800ebae:	e006      	b.n	800ebbe <HAL_UART_IRQHandler+0x5d2>
    return;
 800ebb0:	bf00      	nop
 800ebb2:	e004      	b.n	800ebbe <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebb4:	bf00      	nop
 800ebb6:	e002      	b.n	800ebbe <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebb8:	bf00      	nop
 800ebba:	e000      	b.n	800ebbe <HAL_UART_IRQHandler+0x5d2>
    return;
 800ebbc:	bf00      	nop
  }

}
 800ebbe:	37e8      	adds	r7, #232	@ 0xe8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b088      	sub	sp, #32
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	689a      	ldr	r2, [r3, #8]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	431a      	orrs	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	695b      	ldr	r3, [r3, #20]
 800ec0a:	431a      	orrs	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	69db      	ldr	r3, [r3, #28]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	4ba6      	ldr	r3, [pc, #664]	@ (800eeb4 <UART_SetConfig+0x2c4>)
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	6812      	ldr	r2, [r2, #0]
 800ec22:	6979      	ldr	r1, [r7, #20]
 800ec24:	430b      	orrs	r3, r1
 800ec26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68da      	ldr	r2, [r3, #12]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	430a      	orrs	r2, r1
 800ec3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a1b      	ldr	r3, [r3, #32]
 800ec48:	697a      	ldr	r2, [r7, #20]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	697a      	ldr	r2, [r7, #20]
 800ec5e:	430a      	orrs	r2, r1
 800ec60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a94      	ldr	r2, [pc, #592]	@ (800eeb8 <UART_SetConfig+0x2c8>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d120      	bne.n	800ecae <UART_SetConfig+0xbe>
 800ec6c:	4b93      	ldr	r3, [pc, #588]	@ (800eebc <UART_SetConfig+0x2cc>)
 800ec6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec72:	f003 0303 	and.w	r3, r3, #3
 800ec76:	2b03      	cmp	r3, #3
 800ec78:	d816      	bhi.n	800eca8 <UART_SetConfig+0xb8>
 800ec7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec80 <UART_SetConfig+0x90>)
 800ec7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec80:	0800ec91 	.word	0x0800ec91
 800ec84:	0800ec9d 	.word	0x0800ec9d
 800ec88:	0800ec97 	.word	0x0800ec97
 800ec8c:	0800eca3 	.word	0x0800eca3
 800ec90:	2301      	movs	r3, #1
 800ec92:	77fb      	strb	r3, [r7, #31]
 800ec94:	e150      	b.n	800ef38 <UART_SetConfig+0x348>
 800ec96:	2302      	movs	r3, #2
 800ec98:	77fb      	strb	r3, [r7, #31]
 800ec9a:	e14d      	b.n	800ef38 <UART_SetConfig+0x348>
 800ec9c:	2304      	movs	r3, #4
 800ec9e:	77fb      	strb	r3, [r7, #31]
 800eca0:	e14a      	b.n	800ef38 <UART_SetConfig+0x348>
 800eca2:	2308      	movs	r3, #8
 800eca4:	77fb      	strb	r3, [r7, #31]
 800eca6:	e147      	b.n	800ef38 <UART_SetConfig+0x348>
 800eca8:	2310      	movs	r3, #16
 800ecaa:	77fb      	strb	r3, [r7, #31]
 800ecac:	e144      	b.n	800ef38 <UART_SetConfig+0x348>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a83      	ldr	r2, [pc, #524]	@ (800eec0 <UART_SetConfig+0x2d0>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d132      	bne.n	800ed1e <UART_SetConfig+0x12e>
 800ecb8:	4b80      	ldr	r3, [pc, #512]	@ (800eebc <UART_SetConfig+0x2cc>)
 800ecba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecbe:	f003 030c 	and.w	r3, r3, #12
 800ecc2:	2b0c      	cmp	r3, #12
 800ecc4:	d828      	bhi.n	800ed18 <UART_SetConfig+0x128>
 800ecc6:	a201      	add	r2, pc, #4	@ (adr r2, 800eccc <UART_SetConfig+0xdc>)
 800ecc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eccc:	0800ed01 	.word	0x0800ed01
 800ecd0:	0800ed19 	.word	0x0800ed19
 800ecd4:	0800ed19 	.word	0x0800ed19
 800ecd8:	0800ed19 	.word	0x0800ed19
 800ecdc:	0800ed0d 	.word	0x0800ed0d
 800ece0:	0800ed19 	.word	0x0800ed19
 800ece4:	0800ed19 	.word	0x0800ed19
 800ece8:	0800ed19 	.word	0x0800ed19
 800ecec:	0800ed07 	.word	0x0800ed07
 800ecf0:	0800ed19 	.word	0x0800ed19
 800ecf4:	0800ed19 	.word	0x0800ed19
 800ecf8:	0800ed19 	.word	0x0800ed19
 800ecfc:	0800ed13 	.word	0x0800ed13
 800ed00:	2300      	movs	r3, #0
 800ed02:	77fb      	strb	r3, [r7, #31]
 800ed04:	e118      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed06:	2302      	movs	r3, #2
 800ed08:	77fb      	strb	r3, [r7, #31]
 800ed0a:	e115      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	77fb      	strb	r3, [r7, #31]
 800ed10:	e112      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed12:	2308      	movs	r3, #8
 800ed14:	77fb      	strb	r3, [r7, #31]
 800ed16:	e10f      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed18:	2310      	movs	r3, #16
 800ed1a:	77fb      	strb	r3, [r7, #31]
 800ed1c:	e10c      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4a68      	ldr	r2, [pc, #416]	@ (800eec4 <UART_SetConfig+0x2d4>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d120      	bne.n	800ed6a <UART_SetConfig+0x17a>
 800ed28:	4b64      	ldr	r3, [pc, #400]	@ (800eebc <UART_SetConfig+0x2cc>)
 800ed2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ed32:	2b30      	cmp	r3, #48	@ 0x30
 800ed34:	d013      	beq.n	800ed5e <UART_SetConfig+0x16e>
 800ed36:	2b30      	cmp	r3, #48	@ 0x30
 800ed38:	d814      	bhi.n	800ed64 <UART_SetConfig+0x174>
 800ed3a:	2b20      	cmp	r3, #32
 800ed3c:	d009      	beq.n	800ed52 <UART_SetConfig+0x162>
 800ed3e:	2b20      	cmp	r3, #32
 800ed40:	d810      	bhi.n	800ed64 <UART_SetConfig+0x174>
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d002      	beq.n	800ed4c <UART_SetConfig+0x15c>
 800ed46:	2b10      	cmp	r3, #16
 800ed48:	d006      	beq.n	800ed58 <UART_SetConfig+0x168>
 800ed4a:	e00b      	b.n	800ed64 <UART_SetConfig+0x174>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	77fb      	strb	r3, [r7, #31]
 800ed50:	e0f2      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed52:	2302      	movs	r3, #2
 800ed54:	77fb      	strb	r3, [r7, #31]
 800ed56:	e0ef      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed58:	2304      	movs	r3, #4
 800ed5a:	77fb      	strb	r3, [r7, #31]
 800ed5c:	e0ec      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed5e:	2308      	movs	r3, #8
 800ed60:	77fb      	strb	r3, [r7, #31]
 800ed62:	e0e9      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed64:	2310      	movs	r3, #16
 800ed66:	77fb      	strb	r3, [r7, #31]
 800ed68:	e0e6      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4a56      	ldr	r2, [pc, #344]	@ (800eec8 <UART_SetConfig+0x2d8>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d120      	bne.n	800edb6 <UART_SetConfig+0x1c6>
 800ed74:	4b51      	ldr	r3, [pc, #324]	@ (800eebc <UART_SetConfig+0x2cc>)
 800ed76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ed7e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ed80:	d013      	beq.n	800edaa <UART_SetConfig+0x1ba>
 800ed82:	2bc0      	cmp	r3, #192	@ 0xc0
 800ed84:	d814      	bhi.n	800edb0 <UART_SetConfig+0x1c0>
 800ed86:	2b80      	cmp	r3, #128	@ 0x80
 800ed88:	d009      	beq.n	800ed9e <UART_SetConfig+0x1ae>
 800ed8a:	2b80      	cmp	r3, #128	@ 0x80
 800ed8c:	d810      	bhi.n	800edb0 <UART_SetConfig+0x1c0>
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d002      	beq.n	800ed98 <UART_SetConfig+0x1a8>
 800ed92:	2b40      	cmp	r3, #64	@ 0x40
 800ed94:	d006      	beq.n	800eda4 <UART_SetConfig+0x1b4>
 800ed96:	e00b      	b.n	800edb0 <UART_SetConfig+0x1c0>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	77fb      	strb	r3, [r7, #31]
 800ed9c:	e0cc      	b.n	800ef38 <UART_SetConfig+0x348>
 800ed9e:	2302      	movs	r3, #2
 800eda0:	77fb      	strb	r3, [r7, #31]
 800eda2:	e0c9      	b.n	800ef38 <UART_SetConfig+0x348>
 800eda4:	2304      	movs	r3, #4
 800eda6:	77fb      	strb	r3, [r7, #31]
 800eda8:	e0c6      	b.n	800ef38 <UART_SetConfig+0x348>
 800edaa:	2308      	movs	r3, #8
 800edac:	77fb      	strb	r3, [r7, #31]
 800edae:	e0c3      	b.n	800ef38 <UART_SetConfig+0x348>
 800edb0:	2310      	movs	r3, #16
 800edb2:	77fb      	strb	r3, [r7, #31]
 800edb4:	e0c0      	b.n	800ef38 <UART_SetConfig+0x348>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a44      	ldr	r2, [pc, #272]	@ (800eecc <UART_SetConfig+0x2dc>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d125      	bne.n	800ee0c <UART_SetConfig+0x21c>
 800edc0:	4b3e      	ldr	r3, [pc, #248]	@ (800eebc <UART_SetConfig+0x2cc>)
 800edc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800edca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800edce:	d017      	beq.n	800ee00 <UART_SetConfig+0x210>
 800edd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800edd4:	d817      	bhi.n	800ee06 <UART_SetConfig+0x216>
 800edd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800edda:	d00b      	beq.n	800edf4 <UART_SetConfig+0x204>
 800eddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ede0:	d811      	bhi.n	800ee06 <UART_SetConfig+0x216>
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d003      	beq.n	800edee <UART_SetConfig+0x1fe>
 800ede6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800edea:	d006      	beq.n	800edfa <UART_SetConfig+0x20a>
 800edec:	e00b      	b.n	800ee06 <UART_SetConfig+0x216>
 800edee:	2300      	movs	r3, #0
 800edf0:	77fb      	strb	r3, [r7, #31]
 800edf2:	e0a1      	b.n	800ef38 <UART_SetConfig+0x348>
 800edf4:	2302      	movs	r3, #2
 800edf6:	77fb      	strb	r3, [r7, #31]
 800edf8:	e09e      	b.n	800ef38 <UART_SetConfig+0x348>
 800edfa:	2304      	movs	r3, #4
 800edfc:	77fb      	strb	r3, [r7, #31]
 800edfe:	e09b      	b.n	800ef38 <UART_SetConfig+0x348>
 800ee00:	2308      	movs	r3, #8
 800ee02:	77fb      	strb	r3, [r7, #31]
 800ee04:	e098      	b.n	800ef38 <UART_SetConfig+0x348>
 800ee06:	2310      	movs	r3, #16
 800ee08:	77fb      	strb	r3, [r7, #31]
 800ee0a:	e095      	b.n	800ef38 <UART_SetConfig+0x348>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a2f      	ldr	r2, [pc, #188]	@ (800eed0 <UART_SetConfig+0x2e0>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d125      	bne.n	800ee62 <UART_SetConfig+0x272>
 800ee16:	4b29      	ldr	r3, [pc, #164]	@ (800eebc <UART_SetConfig+0x2cc>)
 800ee18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ee20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee24:	d017      	beq.n	800ee56 <UART_SetConfig+0x266>
 800ee26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee2a:	d817      	bhi.n	800ee5c <UART_SetConfig+0x26c>
 800ee2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee30:	d00b      	beq.n	800ee4a <UART_SetConfig+0x25a>
 800ee32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee36:	d811      	bhi.n	800ee5c <UART_SetConfig+0x26c>
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d003      	beq.n	800ee44 <UART_SetConfig+0x254>
 800ee3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee40:	d006      	beq.n	800ee50 <UART_SetConfig+0x260>
 800ee42:	e00b      	b.n	800ee5c <UART_SetConfig+0x26c>
 800ee44:	2301      	movs	r3, #1
 800ee46:	77fb      	strb	r3, [r7, #31]
 800ee48:	e076      	b.n	800ef38 <UART_SetConfig+0x348>
 800ee4a:	2302      	movs	r3, #2
 800ee4c:	77fb      	strb	r3, [r7, #31]
 800ee4e:	e073      	b.n	800ef38 <UART_SetConfig+0x348>
 800ee50:	2304      	movs	r3, #4
 800ee52:	77fb      	strb	r3, [r7, #31]
 800ee54:	e070      	b.n	800ef38 <UART_SetConfig+0x348>
 800ee56:	2308      	movs	r3, #8
 800ee58:	77fb      	strb	r3, [r7, #31]
 800ee5a:	e06d      	b.n	800ef38 <UART_SetConfig+0x348>
 800ee5c:	2310      	movs	r3, #16
 800ee5e:	77fb      	strb	r3, [r7, #31]
 800ee60:	e06a      	b.n	800ef38 <UART_SetConfig+0x348>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a1b      	ldr	r2, [pc, #108]	@ (800eed4 <UART_SetConfig+0x2e4>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d138      	bne.n	800eede <UART_SetConfig+0x2ee>
 800ee6c:	4b13      	ldr	r3, [pc, #76]	@ (800eebc <UART_SetConfig+0x2cc>)
 800ee6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ee76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ee7a:	d017      	beq.n	800eeac <UART_SetConfig+0x2bc>
 800ee7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ee80:	d82a      	bhi.n	800eed8 <UART_SetConfig+0x2e8>
 800ee82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee86:	d00b      	beq.n	800eea0 <UART_SetConfig+0x2b0>
 800ee88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee8c:	d824      	bhi.n	800eed8 <UART_SetConfig+0x2e8>
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d003      	beq.n	800ee9a <UART_SetConfig+0x2aa>
 800ee92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee96:	d006      	beq.n	800eea6 <UART_SetConfig+0x2b6>
 800ee98:	e01e      	b.n	800eed8 <UART_SetConfig+0x2e8>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	77fb      	strb	r3, [r7, #31]
 800ee9e:	e04b      	b.n	800ef38 <UART_SetConfig+0x348>
 800eea0:	2302      	movs	r3, #2
 800eea2:	77fb      	strb	r3, [r7, #31]
 800eea4:	e048      	b.n	800ef38 <UART_SetConfig+0x348>
 800eea6:	2304      	movs	r3, #4
 800eea8:	77fb      	strb	r3, [r7, #31]
 800eeaa:	e045      	b.n	800ef38 <UART_SetConfig+0x348>
 800eeac:	2308      	movs	r3, #8
 800eeae:	77fb      	strb	r3, [r7, #31]
 800eeb0:	e042      	b.n	800ef38 <UART_SetConfig+0x348>
 800eeb2:	bf00      	nop
 800eeb4:	efff69f3 	.word	0xefff69f3
 800eeb8:	40011000 	.word	0x40011000
 800eebc:	40023800 	.word	0x40023800
 800eec0:	40004400 	.word	0x40004400
 800eec4:	40004800 	.word	0x40004800
 800eec8:	40004c00 	.word	0x40004c00
 800eecc:	40005000 	.word	0x40005000
 800eed0:	40011400 	.word	0x40011400
 800eed4:	40007800 	.word	0x40007800
 800eed8:	2310      	movs	r3, #16
 800eeda:	77fb      	strb	r3, [r7, #31]
 800eedc:	e02c      	b.n	800ef38 <UART_SetConfig+0x348>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a72      	ldr	r2, [pc, #456]	@ (800f0ac <UART_SetConfig+0x4bc>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d125      	bne.n	800ef34 <UART_SetConfig+0x344>
 800eee8:	4b71      	ldr	r3, [pc, #452]	@ (800f0b0 <UART_SetConfig+0x4c0>)
 800eeea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eeee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800eef2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800eef6:	d017      	beq.n	800ef28 <UART_SetConfig+0x338>
 800eef8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800eefc:	d817      	bhi.n	800ef2e <UART_SetConfig+0x33e>
 800eefe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef02:	d00b      	beq.n	800ef1c <UART_SetConfig+0x32c>
 800ef04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef08:	d811      	bhi.n	800ef2e <UART_SetConfig+0x33e>
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d003      	beq.n	800ef16 <UART_SetConfig+0x326>
 800ef0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ef12:	d006      	beq.n	800ef22 <UART_SetConfig+0x332>
 800ef14:	e00b      	b.n	800ef2e <UART_SetConfig+0x33e>
 800ef16:	2300      	movs	r3, #0
 800ef18:	77fb      	strb	r3, [r7, #31]
 800ef1a:	e00d      	b.n	800ef38 <UART_SetConfig+0x348>
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	77fb      	strb	r3, [r7, #31]
 800ef20:	e00a      	b.n	800ef38 <UART_SetConfig+0x348>
 800ef22:	2304      	movs	r3, #4
 800ef24:	77fb      	strb	r3, [r7, #31]
 800ef26:	e007      	b.n	800ef38 <UART_SetConfig+0x348>
 800ef28:	2308      	movs	r3, #8
 800ef2a:	77fb      	strb	r3, [r7, #31]
 800ef2c:	e004      	b.n	800ef38 <UART_SetConfig+0x348>
 800ef2e:	2310      	movs	r3, #16
 800ef30:	77fb      	strb	r3, [r7, #31]
 800ef32:	e001      	b.n	800ef38 <UART_SetConfig+0x348>
 800ef34:	2310      	movs	r3, #16
 800ef36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	69db      	ldr	r3, [r3, #28]
 800ef3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef40:	d15b      	bne.n	800effa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ef42:	7ffb      	ldrb	r3, [r7, #31]
 800ef44:	2b08      	cmp	r3, #8
 800ef46:	d828      	bhi.n	800ef9a <UART_SetConfig+0x3aa>
 800ef48:	a201      	add	r2, pc, #4	@ (adr r2, 800ef50 <UART_SetConfig+0x360>)
 800ef4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4e:	bf00      	nop
 800ef50:	0800ef75 	.word	0x0800ef75
 800ef54:	0800ef7d 	.word	0x0800ef7d
 800ef58:	0800ef85 	.word	0x0800ef85
 800ef5c:	0800ef9b 	.word	0x0800ef9b
 800ef60:	0800ef8b 	.word	0x0800ef8b
 800ef64:	0800ef9b 	.word	0x0800ef9b
 800ef68:	0800ef9b 	.word	0x0800ef9b
 800ef6c:	0800ef9b 	.word	0x0800ef9b
 800ef70:	0800ef93 	.word	0x0800ef93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef74:	f7fb fc1a 	bl	800a7ac <HAL_RCC_GetPCLK1Freq>
 800ef78:	61b8      	str	r0, [r7, #24]
        break;
 800ef7a:	e013      	b.n	800efa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef7c:	f7fb fc2a 	bl	800a7d4 <HAL_RCC_GetPCLK2Freq>
 800ef80:	61b8      	str	r0, [r7, #24]
        break;
 800ef82:	e00f      	b.n	800efa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef84:	4b4b      	ldr	r3, [pc, #300]	@ (800f0b4 <UART_SetConfig+0x4c4>)
 800ef86:	61bb      	str	r3, [r7, #24]
        break;
 800ef88:	e00c      	b.n	800efa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef8a:	f7fb fb3d 	bl	800a608 <HAL_RCC_GetSysClockFreq>
 800ef8e:	61b8      	str	r0, [r7, #24]
        break;
 800ef90:	e008      	b.n	800efa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef96:	61bb      	str	r3, [r7, #24]
        break;
 800ef98:	e004      	b.n	800efa4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	77bb      	strb	r3, [r7, #30]
        break;
 800efa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d074      	beq.n	800f094 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800efaa:	69bb      	ldr	r3, [r7, #24]
 800efac:	005a      	lsls	r2, r3, #1
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	085b      	lsrs	r3, r3, #1
 800efb4:	441a      	add	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	fbb2 f3f3 	udiv	r3, r2, r3
 800efbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	2b0f      	cmp	r3, #15
 800efc4:	d916      	bls.n	800eff4 <UART_SetConfig+0x404>
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efcc:	d212      	bcs.n	800eff4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	f023 030f 	bic.w	r3, r3, #15
 800efd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	085b      	lsrs	r3, r3, #1
 800efdc:	b29b      	uxth	r3, r3
 800efde:	f003 0307 	and.w	r3, r3, #7
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	89fb      	ldrh	r3, [r7, #14]
 800efe6:	4313      	orrs	r3, r2
 800efe8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	89fa      	ldrh	r2, [r7, #14]
 800eff0:	60da      	str	r2, [r3, #12]
 800eff2:	e04f      	b.n	800f094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800eff4:	2301      	movs	r3, #1
 800eff6:	77bb      	strb	r3, [r7, #30]
 800eff8:	e04c      	b.n	800f094 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800effa:	7ffb      	ldrb	r3, [r7, #31]
 800effc:	2b08      	cmp	r3, #8
 800effe:	d828      	bhi.n	800f052 <UART_SetConfig+0x462>
 800f000:	a201      	add	r2, pc, #4	@ (adr r2, 800f008 <UART_SetConfig+0x418>)
 800f002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f006:	bf00      	nop
 800f008:	0800f02d 	.word	0x0800f02d
 800f00c:	0800f035 	.word	0x0800f035
 800f010:	0800f03d 	.word	0x0800f03d
 800f014:	0800f053 	.word	0x0800f053
 800f018:	0800f043 	.word	0x0800f043
 800f01c:	0800f053 	.word	0x0800f053
 800f020:	0800f053 	.word	0x0800f053
 800f024:	0800f053 	.word	0x0800f053
 800f028:	0800f04b 	.word	0x0800f04b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f02c:	f7fb fbbe 	bl	800a7ac <HAL_RCC_GetPCLK1Freq>
 800f030:	61b8      	str	r0, [r7, #24]
        break;
 800f032:	e013      	b.n	800f05c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f034:	f7fb fbce 	bl	800a7d4 <HAL_RCC_GetPCLK2Freq>
 800f038:	61b8      	str	r0, [r7, #24]
        break;
 800f03a:	e00f      	b.n	800f05c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f03c:	4b1d      	ldr	r3, [pc, #116]	@ (800f0b4 <UART_SetConfig+0x4c4>)
 800f03e:	61bb      	str	r3, [r7, #24]
        break;
 800f040:	e00c      	b.n	800f05c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f042:	f7fb fae1 	bl	800a608 <HAL_RCC_GetSysClockFreq>
 800f046:	61b8      	str	r0, [r7, #24]
        break;
 800f048:	e008      	b.n	800f05c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f04a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f04e:	61bb      	str	r3, [r7, #24]
        break;
 800f050:	e004      	b.n	800f05c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f052:	2300      	movs	r3, #0
 800f054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f056:	2301      	movs	r3, #1
 800f058:	77bb      	strb	r3, [r7, #30]
        break;
 800f05a:	bf00      	nop
    }

    if (pclk != 0U)
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d018      	beq.n	800f094 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	085a      	lsrs	r2, r3, #1
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	441a      	add	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	fbb2 f3f3 	udiv	r3, r2, r3
 800f074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	2b0f      	cmp	r3, #15
 800f07a:	d909      	bls.n	800f090 <UART_SetConfig+0x4a0>
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f082:	d205      	bcs.n	800f090 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	b29a      	uxth	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	60da      	str	r2, [r3, #12]
 800f08e:	e001      	b.n	800f094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f090:	2301      	movs	r3, #1
 800f092:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f0a0:	7fbb      	ldrb	r3, [r7, #30]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3720      	adds	r7, #32
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	40007c00 	.word	0x40007c00
 800f0b0:	40023800 	.word	0x40023800
 800f0b4:	00f42400 	.word	0x00f42400

0800f0b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0c4:	f003 0308 	and.w	r3, r3, #8
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00a      	beq.n	800f0e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	430a      	orrs	r2, r1
 800f0e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0e6:	f003 0301 	and.w	r3, r3, #1
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00a      	beq.n	800f104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	430a      	orrs	r2, r1
 800f102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00a      	beq.n	800f126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	430a      	orrs	r2, r1
 800f124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f12a:	f003 0304 	and.w	r3, r3, #4
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00a      	beq.n	800f148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	430a      	orrs	r2, r1
 800f146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14c:	f003 0310 	and.w	r3, r3, #16
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00a      	beq.n	800f16a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	430a      	orrs	r2, r1
 800f168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f16e:	f003 0320 	and.w	r3, r3, #32
 800f172:	2b00      	cmp	r3, #0
 800f174:	d00a      	beq.n	800f18c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	430a      	orrs	r2, r1
 800f18a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f194:	2b00      	cmp	r3, #0
 800f196:	d01a      	beq.n	800f1ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	430a      	orrs	r2, r1
 800f1ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1b6:	d10a      	bne.n	800f1ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	430a      	orrs	r2, r1
 800f1cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d00a      	beq.n	800f1f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	430a      	orrs	r2, r1
 800f1ee:	605a      	str	r2, [r3, #4]
  }
}
 800f1f0:	bf00      	nop
 800f1f2:	370c      	adds	r7, #12
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr

0800f1fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b08c      	sub	sp, #48	@ 0x30
 800f200:	af02      	add	r7, sp, #8
 800f202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f20c:	f7f5 ff46 	bl	800509c <HAL_GetTick>
 800f210:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f003 0308 	and.w	r3, r3, #8
 800f21c:	2b08      	cmp	r3, #8
 800f21e:	d12e      	bne.n	800f27e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f224:	9300      	str	r3, [sp, #0]
 800f226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f228:	2200      	movs	r2, #0
 800f22a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 f83b 	bl	800f2aa <UART_WaitOnFlagUntilTimeout>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d021      	beq.n	800f27e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	e853 3f00 	ldrex	r3, [r3]
 800f246:	60fb      	str	r3, [r7, #12]
   return(result);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f24e:	623b      	str	r3, [r7, #32]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	461a      	mov	r2, r3
 800f256:	6a3b      	ldr	r3, [r7, #32]
 800f258:	61fb      	str	r3, [r7, #28]
 800f25a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f25c:	69b9      	ldr	r1, [r7, #24]
 800f25e:	69fa      	ldr	r2, [r7, #28]
 800f260:	e841 2300 	strex	r3, r2, [r1]
 800f264:	617b      	str	r3, [r7, #20]
   return(result);
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d1e6      	bne.n	800f23a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2220      	movs	r2, #32
 800f270:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f27a:	2303      	movs	r3, #3
 800f27c:	e011      	b.n	800f2a2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2220      	movs	r2, #32
 800f282:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2220      	movs	r2, #32
 800f288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3728      	adds	r7, #40	@ 0x28
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}

0800f2aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b084      	sub	sp, #16
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	60f8      	str	r0, [r7, #12]
 800f2b2:	60b9      	str	r1, [r7, #8]
 800f2b4:	603b      	str	r3, [r7, #0]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2ba:	e04f      	b.n	800f35c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2c2:	d04b      	beq.n	800f35c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2c4:	f7f5 feea 	bl	800509c <HAL_GetTick>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	69ba      	ldr	r2, [r7, #24]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d302      	bcc.n	800f2da <UART_WaitOnFlagUntilTimeout+0x30>
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f2da:	2303      	movs	r3, #3
 800f2dc:	e04e      	b.n	800f37c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f003 0304 	and.w	r3, r3, #4
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d037      	beq.n	800f35c <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	2b80      	cmp	r3, #128	@ 0x80
 800f2f0:	d034      	beq.n	800f35c <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	2b40      	cmp	r3, #64	@ 0x40
 800f2f6:	d031      	beq.n	800f35c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	69db      	ldr	r3, [r3, #28]
 800f2fe:	f003 0308 	and.w	r3, r3, #8
 800f302:	2b08      	cmp	r3, #8
 800f304:	d110      	bne.n	800f328 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2208      	movs	r2, #8
 800f30c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 f8fe 	bl	800f510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2208      	movs	r2, #8
 800f318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f324:	2301      	movs	r3, #1
 800f326:	e029      	b.n	800f37c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	69db      	ldr	r3, [r3, #28]
 800f32e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f336:	d111      	bne.n	800f35c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f340:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f000 f8e4 	bl	800f510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2220      	movs	r2, #32
 800f34c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2200      	movs	r2, #0
 800f354:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f358:	2303      	movs	r3, #3
 800f35a:	e00f      	b.n	800f37c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	69da      	ldr	r2, [r3, #28]
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	4013      	ands	r3, r2
 800f366:	68ba      	ldr	r2, [r7, #8]
 800f368:	429a      	cmp	r2, r3
 800f36a:	bf0c      	ite	eq
 800f36c:	2301      	moveq	r3, #1
 800f36e:	2300      	movne	r3, #0
 800f370:	b2db      	uxtb	r3, r3
 800f372:	461a      	mov	r2, r3
 800f374:	79fb      	ldrb	r3, [r7, #7]
 800f376:	429a      	cmp	r2, r3
 800f378:	d0a0      	beq.n	800f2bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b096      	sub	sp, #88	@ 0x58
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	4613      	mov	r3, r2
 800f390:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	88fa      	ldrh	r2, [r7, #6]
 800f39c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2222      	movs	r2, #34	@ 0x22
 800f3ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d028      	beq.n	800f40a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3bc:	4a3e      	ldr	r2, [pc, #248]	@ (800f4b8 <UART_Start_Receive_DMA+0x134>)
 800f3be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3c4:	4a3d      	ldr	r2, [pc, #244]	@ (800f4bc <UART_Start_Receive_DMA+0x138>)
 800f3c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3cc:	4a3c      	ldr	r2, [pc, #240]	@ (800f4c0 <UART_Start_Receive_DMA+0x13c>)
 800f3ce:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	3324      	adds	r3, #36	@ 0x24
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	88fb      	ldrh	r3, [r7, #6]
 800f3ec:	f7f6 fc78 	bl	8005ce0 <HAL_DMA_Start_IT>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d009      	beq.n	800f40a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2210      	movs	r2, #16
 800f3fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2220      	movs	r2, #32
 800f402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	e051      	b.n	800f4ae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	691b      	ldr	r3, [r3, #16]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d018      	beq.n	800f444 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f41a:	e853 3f00 	ldrex	r3, [r3]
 800f41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f426:	657b      	str	r3, [r7, #84]	@ 0x54
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	461a      	mov	r2, r3
 800f42e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f430:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f432:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f434:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f438:	e841 2300 	strex	r3, r2, [r1]
 800f43c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1e6      	bne.n	800f412 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	3308      	adds	r3, #8
 800f44a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44e:	e853 3f00 	ldrex	r3, [r3]
 800f452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f456:	f043 0301 	orr.w	r3, r3, #1
 800f45a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	3308      	adds	r3, #8
 800f462:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f464:	637a      	str	r2, [r7, #52]	@ 0x34
 800f466:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f468:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f46a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f46c:	e841 2300 	strex	r3, r2, [r1]
 800f470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1e5      	bne.n	800f444 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	3308      	adds	r3, #8
 800f47e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	e853 3f00 	ldrex	r3, [r3]
 800f486:	613b      	str	r3, [r7, #16]
   return(result);
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f48e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	3308      	adds	r3, #8
 800f496:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f498:	623a      	str	r2, [r7, #32]
 800f49a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f49c:	69f9      	ldr	r1, [r7, #28]
 800f49e:	6a3a      	ldr	r2, [r7, #32]
 800f4a0:	e841 2300 	strex	r3, r2, [r1]
 800f4a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1e5      	bne.n	800f478 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3758      	adds	r7, #88	@ 0x58
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	0800f5d9 	.word	0x0800f5d9
 800f4bc:	0800f737 	.word	0x0800f737
 800f4c0:	0800f7a9 	.word	0x0800f7a9

0800f4c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b089      	sub	sp, #36	@ 0x24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	e853 3f00 	ldrex	r3, [r3]
 800f4d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f4e0:	61fb      	str	r3, [r7, #28]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	61bb      	str	r3, [r7, #24]
 800f4ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ee:	6979      	ldr	r1, [r7, #20]
 800f4f0:	69ba      	ldr	r2, [r7, #24]
 800f4f2:	e841 2300 	strex	r3, r2, [r1]
 800f4f6:	613b      	str	r3, [r7, #16]
   return(result);
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1e6      	bne.n	800f4cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2220      	movs	r2, #32
 800f502:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f504:	bf00      	nop
 800f506:	3724      	adds	r7, #36	@ 0x24
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr

0800f510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f510:	b480      	push	{r7}
 800f512:	b095      	sub	sp, #84	@ 0x54
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f520:	e853 3f00 	ldrex	r3, [r3]
 800f524:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f52c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	461a      	mov	r2, r3
 800f534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f536:	643b      	str	r3, [r7, #64]	@ 0x40
 800f538:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f53c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f53e:	e841 2300 	strex	r3, r2, [r1]
 800f542:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1e6      	bne.n	800f518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	3308      	adds	r3, #8
 800f550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f552:	6a3b      	ldr	r3, [r7, #32]
 800f554:	e853 3f00 	ldrex	r3, [r3]
 800f558:	61fb      	str	r3, [r7, #28]
   return(result);
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	f023 0301 	bic.w	r3, r3, #1
 800f560:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	3308      	adds	r3, #8
 800f568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f56a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f56c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f56e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f572:	e841 2300 	strex	r3, r2, [r1]
 800f576:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1e5      	bne.n	800f54a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f582:	2b01      	cmp	r3, #1
 800f584:	d118      	bne.n	800f5b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	e853 3f00 	ldrex	r3, [r3]
 800f592:	60bb      	str	r3, [r7, #8]
   return(result);
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	f023 0310 	bic.w	r3, r3, #16
 800f59a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5a4:	61bb      	str	r3, [r7, #24]
 800f5a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a8:	6979      	ldr	r1, [r7, #20]
 800f5aa:	69ba      	ldr	r2, [r7, #24]
 800f5ac:	e841 2300 	strex	r3, r2, [r1]
 800f5b0:	613b      	str	r3, [r7, #16]
   return(result);
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1e6      	bne.n	800f586 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2220      	movs	r2, #32
 800f5bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f5cc:	bf00      	nop
 800f5ce:	3754      	adds	r7, #84	@ 0x54
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b09c      	sub	sp, #112	@ 0x70
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	69db      	ldr	r3, [r3, #28]
 800f5ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5ee:	d071      	beq.n	800f6d4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f5f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f600:	e853 3f00 	ldrex	r3, [r3]
 800f604:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f60c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	461a      	mov	r2, r3
 800f614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f616:	657b      	str	r3, [r7, #84]	@ 0x54
 800f618:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f61a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f61c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f61e:	e841 2300 	strex	r3, r2, [r1]
 800f622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f626:	2b00      	cmp	r3, #0
 800f628:	d1e6      	bne.n	800f5f8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f62a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	3308      	adds	r3, #8
 800f630:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f634:	e853 3f00 	ldrex	r3, [r3]
 800f638:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f63c:	f023 0301 	bic.w	r3, r3, #1
 800f640:	667b      	str	r3, [r7, #100]	@ 0x64
 800f642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3308      	adds	r3, #8
 800f648:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f64a:	643a      	str	r2, [r7, #64]	@ 0x40
 800f64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f650:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f652:	e841 2300 	strex	r3, r2, [r1]
 800f656:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1e5      	bne.n	800f62a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f65e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3308      	adds	r3, #8
 800f664:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f666:	6a3b      	ldr	r3, [r7, #32]
 800f668:	e853 3f00 	ldrex	r3, [r3]
 800f66c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f674:	663b      	str	r3, [r7, #96]	@ 0x60
 800f676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3308      	adds	r3, #8
 800f67c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f67e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f680:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f682:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f686:	e841 2300 	strex	r3, r2, [r1]
 800f68a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1e5      	bne.n	800f65e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f694:	2220      	movs	r2, #32
 800f696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f69a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f69c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d118      	bne.n	800f6d4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	e853 3f00 	ldrex	r3, [r3]
 800f6ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	f023 0310 	bic.w	r3, r3, #16
 800f6b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f6b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	461a      	mov	r2, r3
 800f6be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6c0:	61bb      	str	r3, [r7, #24]
 800f6c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c4:	6979      	ldr	r1, [r7, #20]
 800f6c6:	69ba      	ldr	r2, [r7, #24]
 800f6c8:	e841 2300 	strex	r3, r2, [r1]
 800f6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e6      	bne.n	800f6a2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d122      	bne.n	800f728 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800f6e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800f6f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f6fa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d204      	bcs.n	800f70c <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f704:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f708:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f70c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f70e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f714:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f718:	b29b      	uxth	r3, r3
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	4619      	mov	r1, r3
 800f720:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f722:	f7ff fa59 	bl	800ebd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f726:	e002      	b.n	800f72e <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800f728:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f72a:	f7f5 fb0b 	bl	8004d44 <HAL_UART_RxCpltCallback>
}
 800f72e:	bf00      	nop
 800f730:	3770      	adds	r7, #112	@ 0x70
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b084      	sub	sp, #16
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f742:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2201      	movs	r2, #1
 800f748:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f74e:	2b01      	cmp	r3, #1
 800f750:	d123      	bne.n	800f79a <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f758:	085b      	lsrs	r3, r3, #1
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f770:	897a      	ldrh	r2, [r7, #10]
 800f772:	429a      	cmp	r2, r3
 800f774:	d803      	bhi.n	800f77e <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	897a      	ldrh	r2, [r7, #10]
 800f77a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	b29b      	uxth	r3, r3
 800f790:	4619      	mov	r1, r3
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f7ff fa20 	bl	800ebd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f798:	e002      	b.n	800f7a0 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f7f5 faf6 	bl	8004d8c <HAL_UART_RxHalfCpltCallback>
}
 800f7a0:	bf00      	nop
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7ce:	2b80      	cmp	r3, #128	@ 0x80
 800f7d0:	d109      	bne.n	800f7e6 <UART_DMAError+0x3e>
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	2b21      	cmp	r3, #33	@ 0x21
 800f7d6:	d106      	bne.n	800f7e6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f7e0:	6978      	ldr	r0, [r7, #20]
 800f7e2:	f7ff fe6f 	bl	800f4c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7f0:	2b40      	cmp	r3, #64	@ 0x40
 800f7f2:	d109      	bne.n	800f808 <UART_DMAError+0x60>
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2b22      	cmp	r3, #34	@ 0x22
 800f7f8:	d106      	bne.n	800f808 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f802:	6978      	ldr	r0, [r7, #20]
 800f804:	f7ff fe84 	bl	800f510 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f80e:	f043 0210 	orr.w	r2, r3, #16
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f818:	6978      	ldr	r0, [r7, #20]
 800f81a:	f7f5 facd 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f81e:	bf00      	nop
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b084      	sub	sp, #16
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2200      	movs	r2, #0
 800f838:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7f5 fabb 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f842:	bf00      	nop
 800f844:	3710      	adds	r7, #16
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f84a:	b580      	push	{r7, lr}
 800f84c:	b088      	sub	sp, #32
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	e853 3f00 	ldrex	r3, [r3]
 800f85e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f866:	61fb      	str	r3, [r7, #28]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	461a      	mov	r2, r3
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	61bb      	str	r3, [r7, #24]
 800f872:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f874:	6979      	ldr	r1, [r7, #20]
 800f876:	69ba      	ldr	r2, [r7, #24]
 800f878:	e841 2300 	strex	r3, r2, [r1]
 800f87c:	613b      	str	r3, [r7, #16]
   return(result);
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d1e6      	bne.n	800f852 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2220      	movs	r2, #32
 800f888:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7ff f997 	bl	800ebc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f896:	bf00      	nop
 800f898:	3720      	adds	r7, #32
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
	...

0800f8a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d121      	bne.n	800f8f6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	4b27      	ldr	r3, [pc, #156]	@ (800f954 <FMC_SDRAM_Init+0xb4>)
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	683a      	ldr	r2, [r7, #0]
 800f8bc:	6851      	ldr	r1, [r2, #4]
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	6892      	ldr	r2, [r2, #8]
 800f8c2:	4311      	orrs	r1, r2
 800f8c4:	683a      	ldr	r2, [r7, #0]
 800f8c6:	68d2      	ldr	r2, [r2, #12]
 800f8c8:	4311      	orrs	r1, r2
 800f8ca:	683a      	ldr	r2, [r7, #0]
 800f8cc:	6912      	ldr	r2, [r2, #16]
 800f8ce:	4311      	orrs	r1, r2
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	6952      	ldr	r2, [r2, #20]
 800f8d4:	4311      	orrs	r1, r2
 800f8d6:	683a      	ldr	r2, [r7, #0]
 800f8d8:	6992      	ldr	r2, [r2, #24]
 800f8da:	4311      	orrs	r1, r2
 800f8dc:	683a      	ldr	r2, [r7, #0]
 800f8de:	69d2      	ldr	r2, [r2, #28]
 800f8e0:	4311      	orrs	r1, r2
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	6a12      	ldr	r2, [r2, #32]
 800f8e6:	4311      	orrs	r1, r2
 800f8e8:	683a      	ldr	r2, [r7, #0]
 800f8ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f8ec:	430a      	orrs	r2, r1
 800f8ee:	431a      	orrs	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	601a      	str	r2, [r3, #0]
 800f8f4:	e026      	b.n	800f944 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	69d9      	ldr	r1, [r3, #28]
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	6a1b      	ldr	r3, [r3, #32]
 800f906:	4319      	orrs	r1, r3
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f90c:	430b      	orrs	r3, r1
 800f90e:	431a      	orrs	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	685a      	ldr	r2, [r3, #4]
 800f918:	4b0e      	ldr	r3, [pc, #56]	@ (800f954 <FMC_SDRAM_Init+0xb4>)
 800f91a:	4013      	ands	r3, r2
 800f91c:	683a      	ldr	r2, [r7, #0]
 800f91e:	6851      	ldr	r1, [r2, #4]
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	6892      	ldr	r2, [r2, #8]
 800f924:	4311      	orrs	r1, r2
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	68d2      	ldr	r2, [r2, #12]
 800f92a:	4311      	orrs	r1, r2
 800f92c:	683a      	ldr	r2, [r7, #0]
 800f92e:	6912      	ldr	r2, [r2, #16]
 800f930:	4311      	orrs	r1, r2
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	6952      	ldr	r2, [r2, #20]
 800f936:	4311      	orrs	r1, r2
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	6992      	ldr	r2, [r2, #24]
 800f93c:	430a      	orrs	r2, r1
 800f93e:	431a      	orrs	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	ffff8000 	.word	0xffff8000

0800f958 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f958:	b480      	push	{r7}
 800f95a:	b085      	sub	sp, #20
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d128      	bne.n	800f9bc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	1e59      	subs	r1, r3, #1
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	3b01      	subs	r3, #1
 800f97e:	011b      	lsls	r3, r3, #4
 800f980:	4319      	orrs	r1, r3
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	689b      	ldr	r3, [r3, #8]
 800f986:	3b01      	subs	r3, #1
 800f988:	021b      	lsls	r3, r3, #8
 800f98a:	4319      	orrs	r1, r3
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	3b01      	subs	r3, #1
 800f992:	031b      	lsls	r3, r3, #12
 800f994:	4319      	orrs	r1, r3
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	3b01      	subs	r3, #1
 800f99c:	041b      	lsls	r3, r3, #16
 800f99e:	4319      	orrs	r1, r3
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	695b      	ldr	r3, [r3, #20]
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	051b      	lsls	r3, r3, #20
 800f9a8:	4319      	orrs	r1, r3
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	699b      	ldr	r3, [r3, #24]
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	061b      	lsls	r3, r3, #24
 800f9b2:	430b      	orrs	r3, r1
 800f9b4:	431a      	orrs	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	609a      	str	r2, [r3, #8]
 800f9ba:	e02d      	b.n	800fa18 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	689a      	ldr	r2, [r3, #8]
 800f9c0:	4b19      	ldr	r3, [pc, #100]	@ (800fa28 <FMC_SDRAM_Timing_Init+0xd0>)
 800f9c2:	4013      	ands	r3, r2
 800f9c4:	68ba      	ldr	r2, [r7, #8]
 800f9c6:	68d2      	ldr	r2, [r2, #12]
 800f9c8:	3a01      	subs	r2, #1
 800f9ca:	0311      	lsls	r1, r2, #12
 800f9cc:	68ba      	ldr	r2, [r7, #8]
 800f9ce:	6952      	ldr	r2, [r2, #20]
 800f9d0:	3a01      	subs	r2, #1
 800f9d2:	0512      	lsls	r2, r2, #20
 800f9d4:	430a      	orrs	r2, r1
 800f9d6:	431a      	orrs	r2, r3
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	1e59      	subs	r1, r3, #1
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	011b      	lsls	r3, r3, #4
 800f9f2:	4319      	orrs	r1, r3
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	021b      	lsls	r3, r3, #8
 800f9fc:	4319      	orrs	r1, r3
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	691b      	ldr	r3, [r3, #16]
 800fa02:	3b01      	subs	r3, #1
 800fa04:	041b      	lsls	r3, r3, #16
 800fa06:	4319      	orrs	r1, r3
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	699b      	ldr	r3, [r3, #24]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	061b      	lsls	r3, r3, #24
 800fa10:	430b      	orrs	r3, r1
 800fa12:	431a      	orrs	r2, r3
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800fa18:	2300      	movs	r3, #0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3714      	adds	r7, #20
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	ff0f0fff 	.word	0xff0f0fff

0800fa2c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fa2c:	b084      	sub	sp, #16
 800fa2e:	b480      	push	{r7}
 800fa30:	b085      	sub	sp, #20
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
 800fa36:	f107 001c 	add.w	r0, r7, #28
 800fa3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fa42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fa44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fa46:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800fa4a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fa4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800fa4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fa50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800fa52:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fa54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800fa56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685a      	ldr	r2, [r3, #4]
 800fa62:	4b07      	ldr	r3, [pc, #28]	@ (800fa80 <SDMMC_Init+0x54>)
 800fa64:	4013      	ands	r3, r2
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	431a      	orrs	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3714      	adds	r7, #20
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	b004      	add	sp, #16
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop
 800fa80:	ffff8100 	.word	0xffff8100

0800fa84 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2203      	movs	r2, #3
 800fa90:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f003 0303 	and.w	r3, r3, #3
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b085      	sub	sp, #20
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fac6:	2300      	movs	r3, #0
 800fac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fada:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fae0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fae6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	4313      	orrs	r3, r2
 800faec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	68da      	ldr	r2, [r3, #12]
 800faf2:	4b06      	ldr	r3, [pc, #24]	@ (800fb0c <SDMMC_SendCommand+0x50>)
 800faf4:	4013      	ands	r3, r2
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	431a      	orrs	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr
 800fb0c:	fffff000 	.word	0xfffff000

0800fb10 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	691b      	ldr	r3, [r3, #16]
 800fb1c:	b2db      	uxtb	r3, r3
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	370c      	adds	r7, #12
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fb2a:	b480      	push	{r7}
 800fb2c:	b085      	sub	sp, #20
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3314      	adds	r3, #20
 800fb38:	461a      	mov	r2, r3
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
}  
 800fb44:	4618      	mov	r0, r3
 800fb46:	3714      	adds	r7, #20
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b085      	sub	sp, #20
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	685a      	ldr	r2, [r3, #4]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fb76:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fb7c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fb82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	4313      	orrs	r3, r2
 800fb88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb8e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	431a      	orrs	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fb9a:	2300      	movs	r3, #0

}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3714      	adds	r7, #20
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b088      	sub	sp, #32
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fbb6:	2310      	movs	r3, #16
 800fbb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbba:	2340      	movs	r3, #64	@ 0x40
 800fbbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbc8:	f107 0308 	add.w	r3, r7, #8
 800fbcc:	4619      	mov	r1, r3
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7ff ff74 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fbd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbd8:	2110      	movs	r1, #16
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 f9d6 	bl	800ff8c <SDMMC_GetCmdResp1>
 800fbe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbe2:	69fb      	ldr	r3, [r7, #28]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3720      	adds	r7, #32
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b088      	sub	sp, #32
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fbfa:	2311      	movs	r3, #17
 800fbfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbfe:	2340      	movs	r3, #64	@ 0x40
 800fc00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc02:	2300      	movs	r3, #0
 800fc04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc0c:	f107 0308 	add.w	r3, r7, #8
 800fc10:	4619      	mov	r1, r3
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f7ff ff52 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fc18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc1c:	2111      	movs	r1, #17
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 f9b4 	bl	800ff8c <SDMMC_GetCmdResp1>
 800fc24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc26:	69fb      	ldr	r3, [r7, #28]
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3720      	adds	r7, #32
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b088      	sub	sp, #32
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fc3e:	2312      	movs	r3, #18
 800fc40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc42:	2340      	movs	r3, #64	@ 0x40
 800fc44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc46:	2300      	movs	r3, #0
 800fc48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc50:	f107 0308 	add.w	r3, r7, #8
 800fc54:	4619      	mov	r1, r3
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f7ff ff30 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fc5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc60:	2112      	movs	r1, #18
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 f992 	bl	800ff8c <SDMMC_GetCmdResp1>
 800fc68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc6a:	69fb      	ldr	r3, [r7, #28]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3720      	adds	r7, #32
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b088      	sub	sp, #32
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fc82:	2318      	movs	r3, #24
 800fc84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc86:	2340      	movs	r3, #64	@ 0x40
 800fc88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc94:	f107 0308 	add.w	r3, r7, #8
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7ff ff0e 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fca4:	2118      	movs	r1, #24
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 f970 	bl	800ff8c <SDMMC_GetCmdResp1>
 800fcac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcae:	69fb      	ldr	r3, [r7, #28]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3720      	adds	r7, #32
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b088      	sub	sp, #32
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fcc6:	2319      	movs	r3, #25
 800fcc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcca:	2340      	movs	r3, #64	@ 0x40
 800fccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcd8:	f107 0308 	add.w	r3, r7, #8
 800fcdc:	4619      	mov	r1, r3
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7ff feec 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fce8:	2119      	movs	r1, #25
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f94e 	bl	800ff8c <SDMMC_GetCmdResp1>
 800fcf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcf2:	69fb      	ldr	r3, [r7, #28]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3720      	adds	r7, #32
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b088      	sub	sp, #32
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fd04:	2300      	movs	r3, #0
 800fd06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fd08:	230c      	movs	r3, #12
 800fd0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd0c:	2340      	movs	r3, #64	@ 0x40
 800fd0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd10:	2300      	movs	r3, #0
 800fd12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd1a:	f107 0308 	add.w	r3, r7, #8
 800fd1e:	4619      	mov	r1, r3
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f7ff fecb 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fd26:	4a05      	ldr	r2, [pc, #20]	@ (800fd3c <SDMMC_CmdStopTransfer+0x40>)
 800fd28:	210c      	movs	r1, #12
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 f92e 	bl	800ff8c <SDMMC_GetCmdResp1>
 800fd30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd32:	69fb      	ldr	r3, [r7, #28]
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3720      	adds	r7, #32
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	05f5e100 	.word	0x05f5e100

0800fd40 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08a      	sub	sp, #40	@ 0x28
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fd50:	2307      	movs	r3, #7
 800fd52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd54:	2340      	movs	r3, #64	@ 0x40
 800fd56:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd60:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd62:	f107 0310 	add.w	r3, r7, #16
 800fd66:	4619      	mov	r1, r3
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f7ff fea7 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fd6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd72:	2107      	movs	r1, #7
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f000 f909 	bl	800ff8c <SDMMC_GetCmdResp1>
 800fd7a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800fd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3728      	adds	r7, #40	@ 0x28
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b088      	sub	sp, #32
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fd92:	2300      	movs	r3, #0
 800fd94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fd96:	2300      	movs	r3, #0
 800fd98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fda2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fda4:	f107 0308 	add.w	r3, r7, #8
 800fda8:	4619      	mov	r1, r3
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7ff fe86 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 fb23 	bl	80103fc <SDMMC_GetCmdError>
 800fdb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdb8:	69fb      	ldr	r3, [r7, #28]
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3720      	adds	r7, #32
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}

0800fdc2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b088      	sub	sp, #32
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fdca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fdce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fdd0:	2308      	movs	r3, #8
 800fdd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdd4:	2340      	movs	r3, #64	@ 0x40
 800fdd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fde0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fde2:	f107 0308 	add.w	r3, r7, #8
 800fde6:	4619      	mov	r1, r3
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7ff fe67 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 fab6 	bl	8010360 <SDMMC_GetCmdResp7>
 800fdf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdf6:	69fb      	ldr	r3, [r7, #28]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3720      	adds	r7, #32
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b088      	sub	sp, #32
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fe0e:	2337      	movs	r3, #55	@ 0x37
 800fe10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe12:	2340      	movs	r3, #64	@ 0x40
 800fe14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe16:	2300      	movs	r3, #0
 800fe18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe20:	f107 0308 	add.w	r3, r7, #8
 800fe24:	4619      	mov	r1, r3
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7ff fe48 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fe2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe30:	2137      	movs	r1, #55	@ 0x37
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 f8aa 	bl	800ff8c <SDMMC_GetCmdResp1>
 800fe38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe3a:	69fb      	ldr	r3, [r7, #28]
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3720      	adds	r7, #32
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b088      	sub	sp, #32
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fe4e:	683a      	ldr	r2, [r7, #0]
 800fe50:	4b0d      	ldr	r3, [pc, #52]	@ (800fe88 <SDMMC_CmdAppOperCommand+0x44>)
 800fe52:	4313      	orrs	r3, r2
 800fe54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fe56:	2329      	movs	r3, #41	@ 0x29
 800fe58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe5a:	2340      	movs	r3, #64	@ 0x40
 800fe5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe68:	f107 0308 	add.w	r3, r7, #8
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7ff fe24 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 f9bf 	bl	80101f8 <SDMMC_GetCmdResp3>
 800fe7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe7c:	69fb      	ldr	r3, [r7, #28]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3720      	adds	r7, #32
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	80100000 	.word	0x80100000

0800fe8c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b088      	sub	sp, #32
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fe94:	2300      	movs	r3, #0
 800fe96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fe98:	2302      	movs	r3, #2
 800fe9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe9c:	23c0      	movs	r3, #192	@ 0xc0
 800fe9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fea0:	2300      	movs	r3, #0
 800fea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fea8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800feaa:	f107 0308 	add.w	r3, r7, #8
 800feae:	4619      	mov	r1, r3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7ff fe03 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 f956 	bl	8010168 <SDMMC_GetCmdResp2>
 800febc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800febe:	69fb      	ldr	r3, [r7, #28]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3720      	adds	r7, #32
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b088      	sub	sp, #32
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fed6:	2309      	movs	r3, #9
 800fed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800feda:	23c0      	movs	r3, #192	@ 0xc0
 800fedc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fede:	2300      	movs	r3, #0
 800fee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fee8:	f107 0308 	add.w	r3, r7, #8
 800feec:	4619      	mov	r1, r3
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7ff fde4 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 f937 	bl	8010168 <SDMMC_GetCmdResp2>
 800fefa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fefc:	69fb      	ldr	r3, [r7, #28]
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3720      	adds	r7, #32
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b088      	sub	sp, #32
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
 800ff0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ff10:	2300      	movs	r3, #0
 800ff12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ff14:	2303      	movs	r3, #3
 800ff16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff18:	2340      	movs	r3, #64	@ 0x40
 800ff1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff26:	f107 0308 	add.w	r3, r7, #8
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7ff fdc5 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ff32:	683a      	ldr	r2, [r7, #0]
 800ff34:	2103      	movs	r1, #3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 f99c 	bl	8010274 <SDMMC_GetCmdResp6>
 800ff3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff3e:	69fb      	ldr	r3, [r7, #28]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3720      	adds	r7, #32
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b088      	sub	sp, #32
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ff56:	230d      	movs	r3, #13
 800ff58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff5a:	2340      	movs	r3, #64	@ 0x40
 800ff5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff68:	f107 0308 	add.w	r3, r7, #8
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7ff fda4 	bl	800fabc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ff74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff78:	210d      	movs	r1, #13
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f806 	bl	800ff8c <SDMMC_GetCmdResp1>
 800ff80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff82:	69fb      	ldr	r3, [r7, #28]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3720      	adds	r7, #32
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b088      	sub	sp, #32
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	460b      	mov	r3, r1
 800ff96:	607a      	str	r2, [r7, #4]
 800ff98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ff9a:	4b70      	ldr	r3, [pc, #448]	@ (801015c <SDMMC_GetCmdResp1+0x1d0>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4a70      	ldr	r2, [pc, #448]	@ (8010160 <SDMMC_GetCmdResp1+0x1d4>)
 800ffa0:	fba2 2303 	umull	r2, r3, r2, r3
 800ffa4:	0a5a      	lsrs	r2, r3, #9
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	fb02 f303 	mul.w	r3, r2, r3
 800ffac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	1e5a      	subs	r2, r3, #1
 800ffb2:	61fa      	str	r2, [r7, #28]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d102      	bne.n	800ffbe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ffbc:	e0c9      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffc2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d0ef      	beq.n	800ffae <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d1ea      	bne.n	800ffae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffdc:	f003 0304 	and.w	r3, r3, #4
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d004      	beq.n	800ffee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2204      	movs	r2, #4
 800ffe8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ffea:	2304      	movs	r3, #4
 800ffec:	e0b1      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fff2:	f003 0301 	and.w	r3, r3, #1
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d004      	beq.n	8010004 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2201      	movs	r2, #1
 800fffe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010000:	2301      	movs	r3, #1
 8010002:	e0a6      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	22c5      	movs	r2, #197	@ 0xc5
 8010008:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801000a:	68f8      	ldr	r0, [r7, #12]
 801000c:	f7ff fd80 	bl	800fb10 <SDMMC_GetCommandResponse>
 8010010:	4603      	mov	r3, r0
 8010012:	461a      	mov	r2, r3
 8010014:	7afb      	ldrb	r3, [r7, #11]
 8010016:	4293      	cmp	r3, r2
 8010018:	d001      	beq.n	801001e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801001a:	2301      	movs	r3, #1
 801001c:	e099      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801001e:	2100      	movs	r1, #0
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f7ff fd82 	bl	800fb2a <SDMMC_GetResponse>
 8010026:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	4b4e      	ldr	r3, [pc, #312]	@ (8010164 <SDMMC_GetCmdResp1+0x1d8>)
 801002c:	4013      	ands	r3, r2
 801002e:	2b00      	cmp	r3, #0
 8010030:	d101      	bne.n	8010036 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010032:	2300      	movs	r3, #0
 8010034:	e08d      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	2b00      	cmp	r3, #0
 801003a:	da02      	bge.n	8010042 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801003c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010040:	e087      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010048:	2b00      	cmp	r3, #0
 801004a:	d001      	beq.n	8010050 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801004c:	2340      	movs	r3, #64	@ 0x40
 801004e:	e080      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010056:	2b00      	cmp	r3, #0
 8010058:	d001      	beq.n	801005e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801005a:	2380      	movs	r3, #128	@ 0x80
 801005c:	e079      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010064:	2b00      	cmp	r3, #0
 8010066:	d002      	beq.n	801006e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801006c:	e071      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801007c:	e069      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010084:	2b00      	cmp	r3, #0
 8010086:	d002      	beq.n	801008e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801008c:	e061      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010098:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801009c:	e059      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d002      	beq.n	80100ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80100a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100ac:	e051      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80100b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80100bc:	e049      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d002      	beq.n	80100ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80100c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80100cc:	e041      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80100d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100dc:	e039      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d002      	beq.n	80100ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80100e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80100ec:	e031      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80100f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80100fc:	e029      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010108:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801010c:	e021      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010114:	2b00      	cmp	r3, #0
 8010116:	d002      	beq.n	801011e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010118:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801011c:	e019      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010128:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801012c:	e011      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010134:	2b00      	cmp	r3, #0
 8010136:	d002      	beq.n	801013e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010138:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801013c:	e009      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	f003 0308 	and.w	r3, r3, #8
 8010144:	2b00      	cmp	r3, #0
 8010146:	d002      	beq.n	801014e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010148:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801014c:	e001      	b.n	8010152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801014e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010152:	4618      	mov	r0, r3
 8010154:	3720      	adds	r7, #32
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	20000014 	.word	0x20000014
 8010160:	10624dd3 	.word	0x10624dd3
 8010164:	fdffe008 	.word	0xfdffe008

08010168 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010168:	b480      	push	{r7}
 801016a:	b085      	sub	sp, #20
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010170:	4b1f      	ldr	r3, [pc, #124]	@ (80101f0 <SDMMC_GetCmdResp2+0x88>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4a1f      	ldr	r2, [pc, #124]	@ (80101f4 <SDMMC_GetCmdResp2+0x8c>)
 8010176:	fba2 2303 	umull	r2, r3, r2, r3
 801017a:	0a5b      	lsrs	r3, r3, #9
 801017c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010180:	fb02 f303 	mul.w	r3, r2, r3
 8010184:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	1e5a      	subs	r2, r3, #1
 801018a:	60fa      	str	r2, [r7, #12]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d102      	bne.n	8010196 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010190:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010194:	e026      	b.n	80101e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801019a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d0ef      	beq.n	8010186 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1ea      	bne.n	8010186 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101b4:	f003 0304 	and.w	r3, r3, #4
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d004      	beq.n	80101c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2204      	movs	r2, #4
 80101c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101c2:	2304      	movs	r3, #4
 80101c4:	e00e      	b.n	80101e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101ca:	f003 0301 	and.w	r3, r3, #1
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d004      	beq.n	80101dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2201      	movs	r2, #1
 80101d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80101d8:	2301      	movs	r3, #1
 80101da:	e003      	b.n	80101e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	22c5      	movs	r2, #197	@ 0xc5
 80101e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3714      	adds	r7, #20
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr
 80101f0:	20000014 	.word	0x20000014
 80101f4:	10624dd3 	.word	0x10624dd3

080101f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010200:	4b1a      	ldr	r3, [pc, #104]	@ (801026c <SDMMC_GetCmdResp3+0x74>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4a1a      	ldr	r2, [pc, #104]	@ (8010270 <SDMMC_GetCmdResp3+0x78>)
 8010206:	fba2 2303 	umull	r2, r3, r2, r3
 801020a:	0a5b      	lsrs	r3, r3, #9
 801020c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010210:	fb02 f303 	mul.w	r3, r2, r3
 8010214:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	1e5a      	subs	r2, r3, #1
 801021a:	60fa      	str	r2, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d102      	bne.n	8010226 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010220:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010224:	e01b      	b.n	801025e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801022a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010232:	2b00      	cmp	r3, #0
 8010234:	d0ef      	beq.n	8010216 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1ea      	bne.n	8010216 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010244:	f003 0304 	and.w	r3, r3, #4
 8010248:	2b00      	cmp	r3, #0
 801024a:	d004      	beq.n	8010256 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2204      	movs	r2, #4
 8010250:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010252:	2304      	movs	r3, #4
 8010254:	e003      	b.n	801025e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	22c5      	movs	r2, #197	@ 0xc5
 801025a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801025c:	2300      	movs	r3, #0
}
 801025e:	4618      	mov	r0, r3
 8010260:	3714      	adds	r7, #20
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	20000014 	.word	0x20000014
 8010270:	10624dd3 	.word	0x10624dd3

08010274 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b088      	sub	sp, #32
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	460b      	mov	r3, r1
 801027e:	607a      	str	r2, [r7, #4]
 8010280:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010282:	4b35      	ldr	r3, [pc, #212]	@ (8010358 <SDMMC_GetCmdResp6+0xe4>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a35      	ldr	r2, [pc, #212]	@ (801035c <SDMMC_GetCmdResp6+0xe8>)
 8010288:	fba2 2303 	umull	r2, r3, r2, r3
 801028c:	0a5b      	lsrs	r3, r3, #9
 801028e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010292:	fb02 f303 	mul.w	r3, r2, r3
 8010296:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	1e5a      	subs	r2, r3, #1
 801029c:	61fa      	str	r2, [r7, #28]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d102      	bne.n	80102a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80102a6:	e052      	b.n	801034e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102ac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d0ef      	beq.n	8010298 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1ea      	bne.n	8010298 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102c6:	f003 0304 	and.w	r3, r3, #4
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d004      	beq.n	80102d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	2204      	movs	r2, #4
 80102d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80102d4:	2304      	movs	r3, #4
 80102d6:	e03a      	b.n	801034e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102dc:	f003 0301 	and.w	r3, r3, #1
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d004      	beq.n	80102ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2201      	movs	r2, #1
 80102e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80102ea:	2301      	movs	r3, #1
 80102ec:	e02f      	b.n	801034e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f7ff fc0e 	bl	800fb10 <SDMMC_GetCommandResponse>
 80102f4:	4603      	mov	r3, r0
 80102f6:	461a      	mov	r2, r3
 80102f8:	7afb      	ldrb	r3, [r7, #11]
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d001      	beq.n	8010302 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80102fe:	2301      	movs	r3, #1
 8010300:	e025      	b.n	801034e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	22c5      	movs	r2, #197	@ 0xc5
 8010306:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010308:	2100      	movs	r1, #0
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f7ff fc0d 	bl	800fb2a <SDMMC_GetResponse>
 8010310:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010318:	2b00      	cmp	r3, #0
 801031a:	d106      	bne.n	801032a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	0c1b      	lsrs	r3, r3, #16
 8010320:	b29a      	uxth	r2, r3
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010326:	2300      	movs	r3, #0
 8010328:	e011      	b.n	801034e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010338:	e009      	b.n	801034e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010348:	e001      	b.n	801034e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801034a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801034e:	4618      	mov	r0, r3
 8010350:	3720      	adds	r7, #32
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	20000014 	.word	0x20000014
 801035c:	10624dd3 	.word	0x10624dd3

08010360 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010360:	b480      	push	{r7}
 8010362:	b085      	sub	sp, #20
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010368:	4b22      	ldr	r3, [pc, #136]	@ (80103f4 <SDMMC_GetCmdResp7+0x94>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a22      	ldr	r2, [pc, #136]	@ (80103f8 <SDMMC_GetCmdResp7+0x98>)
 801036e:	fba2 2303 	umull	r2, r3, r2, r3
 8010372:	0a5b      	lsrs	r3, r3, #9
 8010374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010378:	fb02 f303 	mul.w	r3, r2, r3
 801037c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	1e5a      	subs	r2, r3, #1
 8010382:	60fa      	str	r2, [r7, #12]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d102      	bne.n	801038e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010388:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801038c:	e02c      	b.n	80103e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010392:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801039a:	2b00      	cmp	r3, #0
 801039c:	d0ef      	beq.n	801037e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d1ea      	bne.n	801037e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103ac:	f003 0304 	and.w	r3, r3, #4
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d004      	beq.n	80103be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2204      	movs	r2, #4
 80103b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103ba:	2304      	movs	r3, #4
 80103bc:	e014      	b.n	80103e8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103c2:	f003 0301 	and.w	r3, r3, #1
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d004      	beq.n	80103d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2201      	movs	r2, #1
 80103ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103d0:	2301      	movs	r3, #1
 80103d2:	e009      	b.n	80103e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d002      	beq.n	80103e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2240      	movs	r2, #64	@ 0x40
 80103e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80103e6:	2300      	movs	r3, #0
  
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3714      	adds	r7, #20
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr
 80103f4:	20000014 	.word	0x20000014
 80103f8:	10624dd3 	.word	0x10624dd3

080103fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b085      	sub	sp, #20
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010404:	4b11      	ldr	r3, [pc, #68]	@ (801044c <SDMMC_GetCmdError+0x50>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4a11      	ldr	r2, [pc, #68]	@ (8010450 <SDMMC_GetCmdError+0x54>)
 801040a:	fba2 2303 	umull	r2, r3, r2, r3
 801040e:	0a5b      	lsrs	r3, r3, #9
 8010410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010414:	fb02 f303 	mul.w	r3, r2, r3
 8010418:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	1e5a      	subs	r2, r3, #1
 801041e:	60fa      	str	r2, [r7, #12]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d102      	bne.n	801042a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010424:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010428:	e009      	b.n	801043e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801042e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010432:	2b00      	cmp	r3, #0
 8010434:	d0f1      	beq.n	801041a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	22c5      	movs	r2, #197	@ 0xc5
 801043a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3714      	adds	r7, #20
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	20000014 	.word	0x20000014
 8010450:	10624dd3 	.word	0x10624dd3

08010454 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010454:	b084      	sub	sp, #16
 8010456:	b580      	push	{r7, lr}
 8010458:	b084      	sub	sp, #16
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	f107 001c 	add.w	r0, r7, #28
 8010462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010466:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801046a:	2b01      	cmp	r3, #1
 801046c:	d121      	bne.n	80104b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010472:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	68da      	ldr	r2, [r3, #12]
 801047e:	4b21      	ldr	r3, [pc, #132]	@ (8010504 <USB_CoreInit+0xb0>)
 8010480:	4013      	ands	r3, r2
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010492:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010496:	2b01      	cmp	r3, #1
 8010498:	d105      	bne.n	80104a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 f9d4 	bl	8010854 <USB_CoreReset>
 80104ac:	4603      	mov	r3, r0
 80104ae:	73fb      	strb	r3, [r7, #15]
 80104b0:	e010      	b.n	80104d4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 f9c8 	bl	8010854 <USB_CoreReset>
 80104c4:	4603      	mov	r3, r0
 80104c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80104d4:	7fbb      	ldrb	r3, [r7, #30]
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d10b      	bne.n	80104f2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	689b      	ldr	r3, [r3, #8]
 80104de:	f043 0206 	orr.w	r2, r3, #6
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	f043 0220 	orr.w	r2, r3, #32
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80104f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80104fe:	b004      	add	sp, #16
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop
 8010504:	ffbdffbf 	.word	0xffbdffbf

08010508 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	f043 0201 	orr.w	r2, r3, #1
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	370c      	adds	r7, #12
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801052a:	b480      	push	{r7}
 801052c:	b083      	sub	sp, #12
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	689b      	ldr	r3, [r3, #8]
 8010536:	f023 0201 	bic.w	r2, r3, #1
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801053e:	2300      	movs	r3, #0
}
 8010540:	4618      	mov	r0, r3
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	460b      	mov	r3, r1
 8010556:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010558:	2300      	movs	r3, #0
 801055a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010568:	78fb      	ldrb	r3, [r7, #3]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d115      	bne.n	801059a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801057a:	200a      	movs	r0, #10
 801057c:	f7f4 fd9a 	bl	80050b4 <HAL_Delay>
      ms += 10U;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	330a      	adds	r3, #10
 8010584:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 f956 	bl	8010838 <USB_GetMode>
 801058c:	4603      	mov	r3, r0
 801058e:	2b01      	cmp	r3, #1
 8010590:	d01e      	beq.n	80105d0 <USB_SetCurrentMode+0x84>
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2bc7      	cmp	r3, #199	@ 0xc7
 8010596:	d9f0      	bls.n	801057a <USB_SetCurrentMode+0x2e>
 8010598:	e01a      	b.n	80105d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801059a:	78fb      	ldrb	r3, [r7, #3]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d115      	bne.n	80105cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80105ac:	200a      	movs	r0, #10
 80105ae:	f7f4 fd81 	bl	80050b4 <HAL_Delay>
      ms += 10U;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	330a      	adds	r3, #10
 80105b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 f93d 	bl	8010838 <USB_GetMode>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d005      	beq.n	80105d0 <USB_SetCurrentMode+0x84>
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80105c8:	d9f0      	bls.n	80105ac <USB_SetCurrentMode+0x60>
 80105ca:	e001      	b.n	80105d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80105cc:	2301      	movs	r3, #1
 80105ce:	e005      	b.n	80105dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80105d4:	d101      	bne.n	80105da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80105d6:	2301      	movs	r3, #1
 80105d8:	e000      	b.n	80105dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80105da:	2300      	movs	r3, #0
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3710      	adds	r7, #16
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80105ee:	2300      	movs	r3, #0
 80105f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3301      	adds	r3, #1
 80105f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80105fe:	d901      	bls.n	8010604 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010600:	2303      	movs	r3, #3
 8010602:	e01b      	b.n	801063c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	2b00      	cmp	r3, #0
 801060a:	daf2      	bge.n	80105f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801060c:	2300      	movs	r3, #0
 801060e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	019b      	lsls	r3, r3, #6
 8010614:	f043 0220 	orr.w	r2, r3, #32
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	3301      	adds	r3, #1
 8010620:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010628:	d901      	bls.n	801062e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801062a:	2303      	movs	r3, #3
 801062c:	e006      	b.n	801063c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	f003 0320 	and.w	r3, r3, #32
 8010636:	2b20      	cmp	r3, #32
 8010638:	d0f0      	beq.n	801061c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801063a:	2300      	movs	r3, #0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010648:	b480      	push	{r7}
 801064a:	b085      	sub	sp, #20
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010650:	2300      	movs	r3, #0
 8010652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	3301      	adds	r3, #1
 8010658:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010660:	d901      	bls.n	8010666 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010662:	2303      	movs	r3, #3
 8010664:	e018      	b.n	8010698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	691b      	ldr	r3, [r3, #16]
 801066a:	2b00      	cmp	r3, #0
 801066c:	daf2      	bge.n	8010654 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801066e:	2300      	movs	r3, #0
 8010670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2210      	movs	r2, #16
 8010676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	3301      	adds	r3, #1
 801067c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010684:	d901      	bls.n	801068a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010686:	2303      	movs	r3, #3
 8010688:	e006      	b.n	8010698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	691b      	ldr	r3, [r3, #16]
 801068e:	f003 0310 	and.w	r3, r3, #16
 8010692:	2b10      	cmp	r3, #16
 8010694:	d0f0      	beq.n	8010678 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3714      	adds	r7, #20
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b089      	sub	sp, #36	@ 0x24
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	4611      	mov	r1, r2
 80106b0:	461a      	mov	r2, r3
 80106b2:	460b      	mov	r3, r1
 80106b4:	71fb      	strb	r3, [r7, #7]
 80106b6:	4613      	mov	r3, r2
 80106b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80106c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d123      	bne.n	8010712 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80106ca:	88bb      	ldrh	r3, [r7, #4]
 80106cc:	3303      	adds	r3, #3
 80106ce:	089b      	lsrs	r3, r3, #2
 80106d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80106d2:	2300      	movs	r3, #0
 80106d4:	61bb      	str	r3, [r7, #24]
 80106d6:	e018      	b.n	801070a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80106d8:	79fb      	ldrb	r3, [r7, #7]
 80106da:	031a      	lsls	r2, r3, #12
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	4413      	add	r3, r2
 80106e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80106e4:	461a      	mov	r2, r3
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	3301      	adds	r3, #1
 80106f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	3301      	adds	r3, #1
 80106f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	3301      	adds	r3, #1
 80106fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	3301      	adds	r3, #1
 8010702:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	3301      	adds	r3, #1
 8010708:	61bb      	str	r3, [r7, #24]
 801070a:	69ba      	ldr	r2, [r7, #24]
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	429a      	cmp	r2, r3
 8010710:	d3e2      	bcc.n	80106d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010712:	2300      	movs	r3, #0
}
 8010714:	4618      	mov	r0, r3
 8010716:	3724      	adds	r7, #36	@ 0x24
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010720:	b480      	push	{r7}
 8010722:	b08b      	sub	sp, #44	@ 0x2c
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	4613      	mov	r3, r2
 801072c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010736:	88fb      	ldrh	r3, [r7, #6]
 8010738:	089b      	lsrs	r3, r3, #2
 801073a:	b29b      	uxth	r3, r3
 801073c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801073e:	88fb      	ldrh	r3, [r7, #6]
 8010740:	f003 0303 	and.w	r3, r3, #3
 8010744:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010746:	2300      	movs	r3, #0
 8010748:	623b      	str	r3, [r7, #32]
 801074a:	e014      	b.n	8010776 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010756:	601a      	str	r2, [r3, #0]
    pDest++;
 8010758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801075a:	3301      	adds	r3, #1
 801075c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010760:	3301      	adds	r3, #1
 8010762:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010766:	3301      	adds	r3, #1
 8010768:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076c:	3301      	adds	r3, #1
 801076e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010770:	6a3b      	ldr	r3, [r7, #32]
 8010772:	3301      	adds	r3, #1
 8010774:	623b      	str	r3, [r7, #32]
 8010776:	6a3a      	ldr	r2, [r7, #32]
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	429a      	cmp	r2, r3
 801077c:	d3e6      	bcc.n	801074c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801077e:	8bfb      	ldrh	r3, [r7, #30]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d01e      	beq.n	80107c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010784:	2300      	movs	r3, #0
 8010786:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010788:	69bb      	ldr	r3, [r7, #24]
 801078a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801078e:	461a      	mov	r2, r3
 8010790:	f107 0310 	add.w	r3, r7, #16
 8010794:	6812      	ldr	r2, [r2, #0]
 8010796:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010798:	693a      	ldr	r2, [r7, #16]
 801079a:	6a3b      	ldr	r3, [r7, #32]
 801079c:	b2db      	uxtb	r3, r3
 801079e:	00db      	lsls	r3, r3, #3
 80107a0:	fa22 f303 	lsr.w	r3, r2, r3
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a8:	701a      	strb	r2, [r3, #0]
      i++;
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	3301      	adds	r3, #1
 80107ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80107b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b2:	3301      	adds	r3, #1
 80107b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80107b6:	8bfb      	ldrh	r3, [r7, #30]
 80107b8:	3b01      	subs	r3, #1
 80107ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80107bc:	8bfb      	ldrh	r3, [r7, #30]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1ea      	bne.n	8010798 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80107c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	372c      	adds	r7, #44	@ 0x2c
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	695b      	ldr	r3, [r3, #20]
 80107dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	699b      	ldr	r3, [r3, #24]
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	4013      	ands	r3, r2
 80107e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80107e8:	68fb      	ldr	r3, [r7, #12]
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3714      	adds	r7, #20
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr

080107f6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80107f6:	b480      	push	{r7}
 80107f8:	b085      	sub	sp, #20
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
 80107fe:	460b      	mov	r3, r1
 8010800:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8010806:	78fb      	ldrb	r3, [r7, #3]
 8010808:	015a      	lsls	r2, r3, #5
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	4413      	add	r3, r2
 801080e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8010816:	78fb      	ldrb	r3, [r7, #3]
 8010818:	015a      	lsls	r2, r3, #5
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	4413      	add	r3, r2
 801081e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	68ba      	ldr	r2, [r7, #8]
 8010826:	4013      	ands	r3, r2
 8010828:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801082a:	68bb      	ldr	r3, [r7, #8]
}
 801082c:	4618      	mov	r0, r3
 801082e:	3714      	adds	r7, #20
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	695b      	ldr	r3, [r3, #20]
 8010844:	f003 0301 	and.w	r3, r3, #1
}
 8010848:	4618      	mov	r0, r3
 801084a:	370c      	adds	r7, #12
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr

08010854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801085c:	2300      	movs	r3, #0
 801085e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	3301      	adds	r3, #1
 8010864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801086c:	d901      	bls.n	8010872 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801086e:	2303      	movs	r3, #3
 8010870:	e022      	b.n	80108b8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	691b      	ldr	r3, [r3, #16]
 8010876:	2b00      	cmp	r3, #0
 8010878:	daf2      	bge.n	8010860 <USB_CoreReset+0xc>

  count = 10U;
 801087a:	230a      	movs	r3, #10
 801087c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 801087e:	e002      	b.n	8010886 <USB_CoreReset+0x32>
  {
    count--;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	3b01      	subs	r3, #1
 8010884:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1f9      	bne.n	8010880 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	691b      	ldr	r3, [r3, #16]
 8010890:	f043 0201 	orr.w	r2, r3, #1
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	3301      	adds	r3, #1
 801089c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80108a4:	d901      	bls.n	80108aa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80108a6:	2303      	movs	r3, #3
 80108a8:	e006      	b.n	80108b8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	691b      	ldr	r3, [r3, #16]
 80108ae:	f003 0301 	and.w	r3, r3, #1
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d0f0      	beq.n	8010898 <USB_CoreReset+0x44>

  return HAL_OK;
 80108b6:	2300      	movs	r3, #0
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3714      	adds	r7, #20
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr

080108c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80108c4:	b084      	sub	sp, #16
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b086      	sub	sp, #24
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80108d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80108d6:	2300      	movs	r3, #0
 80108d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80108e4:	461a      	mov	r2, r3
 80108e6:	2300      	movs	r3, #0
 80108e8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d119      	bne.n	8010936 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8010902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010906:	2b01      	cmp	r3, #1
 8010908:	d10a      	bne.n	8010920 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68fa      	ldr	r2, [r7, #12]
 8010914:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010918:	f043 0304 	orr.w	r3, r3, #4
 801091c:	6013      	str	r3, [r2, #0]
 801091e:	e014      	b.n	801094a <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801092e:	f023 0304 	bic.w	r3, r3, #4
 8010932:	6013      	str	r3, [r2, #0]
 8010934:	e009      	b.n	801094a <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	68fa      	ldr	r2, [r7, #12]
 8010940:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010944:	f023 0304 	bic.w	r3, r3, #4
 8010948:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801094a:	2110      	movs	r1, #16
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f7ff fe49 	bl	80105e4 <USB_FlushTxFifo>
 8010952:	4603      	mov	r3, r0
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8010958:	2301      	movs	r3, #1
 801095a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7ff fe73 	bl	8010648 <USB_FlushRxFifo>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d001      	beq.n	801096c <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8010968:	2301      	movs	r3, #1
 801096a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801096c:	2300      	movs	r3, #0
 801096e:	613b      	str	r3, [r7, #16]
 8010970:	e015      	b.n	801099e <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	015a      	lsls	r2, r3, #5
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	4413      	add	r3, r2
 801097a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801097e:	461a      	mov	r2, r3
 8010980:	f04f 33ff 	mov.w	r3, #4294967295
 8010984:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	015a      	lsls	r2, r3, #5
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	4413      	add	r3, r2
 801098e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010992:	461a      	mov	r2, r3
 8010994:	2300      	movs	r3, #0
 8010996:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	3301      	adds	r3, #1
 801099c:	613b      	str	r3, [r7, #16]
 801099e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80109a2:	461a      	mov	r2, r3
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d3e3      	bcc.n	8010972 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f04f 32ff 	mov.w	r2, #4294967295
 80109b6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	4a18      	ldr	r2, [pc, #96]	@ (8010a1c <USB_HostInit+0x158>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d10b      	bne.n	80109d8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109c6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	4a15      	ldr	r2, [pc, #84]	@ (8010a20 <USB_HostInit+0x15c>)
 80109cc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4a14      	ldr	r2, [pc, #80]	@ (8010a24 <USB_HostInit+0x160>)
 80109d2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80109d6:	e009      	b.n	80109ec <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2280      	movs	r2, #128	@ 0x80
 80109dc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4a11      	ldr	r2, [pc, #68]	@ (8010a28 <USB_HostInit+0x164>)
 80109e2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	4a11      	ldr	r2, [pc, #68]	@ (8010a2c <USB_HostInit+0x168>)
 80109e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80109ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d105      	bne.n	8010a00 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	699b      	ldr	r3, [r3, #24]
 80109f8:	f043 0210 	orr.w	r2, r3, #16
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	699a      	ldr	r2, [r3, #24]
 8010a04:	4b0a      	ldr	r3, [pc, #40]	@ (8010a30 <USB_HostInit+0x16c>)
 8010a06:	4313      	orrs	r3, r2
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8010a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3718      	adds	r7, #24
 8010a12:	46bd      	mov	sp, r7
 8010a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a18:	b004      	add	sp, #16
 8010a1a:	4770      	bx	lr
 8010a1c:	40040000 	.word	0x40040000
 8010a20:	01000200 	.word	0x01000200
 8010a24:	00e00300 	.word	0x00e00300
 8010a28:	00600080 	.word	0x00600080
 8010a2c:	004000e0 	.word	0x004000e0
 8010a30:	a3200008 	.word	0xa3200008

08010a34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010a52:	f023 0303 	bic.w	r3, r3, #3
 8010a56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	78fb      	ldrb	r3, [r7, #3]
 8010a62:	f003 0303 	and.w	r3, r3, #3
 8010a66:	68f9      	ldr	r1, [r7, #12]
 8010a68:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010a70:	78fb      	ldrb	r3, [r7, #3]
 8010a72:	2b01      	cmp	r3, #1
 8010a74:	d107      	bne.n	8010a86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010a82:	6053      	str	r3, [r2, #4]
 8010a84:	e00c      	b.n	8010aa0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010a86:	78fb      	ldrb	r3, [r7, #3]
 8010a88:	2b02      	cmp	r3, #2
 8010a8a:	d107      	bne.n	8010a9c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a92:	461a      	mov	r2, r3
 8010a94:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010a98:	6053      	str	r3, [r2, #4]
 8010a9a:	e001      	b.n	8010aa0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e000      	b.n	8010aa2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010aa0:	2300      	movs	r3, #0
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3714      	adds	r7, #20
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr

08010aae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b084      	sub	sp, #16
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8010aba:	2300      	movs	r3, #0
 8010abc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010ace:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010adc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8010ade:	2064      	movs	r0, #100	@ 0x64
 8010ae0:	f7f4 fae8 	bl	80050b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010af0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8010af2:	200a      	movs	r0, #10
 8010af4:	f7f4 fade 	bl	80050b4 <HAL_Delay>

  return HAL_OK;
 8010af8:	2300      	movs	r3, #0
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8010b02:	b480      	push	{r7}
 8010b04:	b085      	sub	sp, #20
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010b12:	2300      	movs	r3, #0
 8010b14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010b26:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d109      	bne.n	8010b46 <USB_DriveVbus+0x44>
 8010b32:	78fb      	ldrb	r3, [r7, #3]
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d106      	bne.n	8010b46 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	68fa      	ldr	r2, [r7, #12]
 8010b3c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010b44:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b50:	d109      	bne.n	8010b66 <USB_DriveVbus+0x64>
 8010b52:	78fb      	ldrb	r3, [r7, #3]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d106      	bne.n	8010b66 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010b64:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3714      	adds	r7, #20
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b085      	sub	sp, #20
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010b80:	2300      	movs	r3, #0
 8010b82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	0c5b      	lsrs	r3, r3, #17
 8010b92:	f003 0303 	and.w	r3, r3, #3
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3714      	adds	r7, #20
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr

08010ba2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8010ba2:	b480      	push	{r7}
 8010ba4:	b085      	sub	sp, #20
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	b29b      	uxth	r3, r3
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3714      	adds	r7, #20
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr

08010bc4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	4608      	mov	r0, r1
 8010bce:	4611      	mov	r1, r2
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	70fb      	strb	r3, [r7, #3]
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	70bb      	strb	r3, [r7, #2]
 8010bda:	4613      	mov	r3, r2
 8010bdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8010bde:	2300      	movs	r3, #0
 8010be0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8010be6:	78fb      	ldrb	r3, [r7, #3]
 8010be8:	015a      	lsls	r2, r3, #5
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	4413      	add	r3, r2
 8010bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bf8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8010bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010bfe:	2b03      	cmp	r3, #3
 8010c00:	d87c      	bhi.n	8010cfc <USB_HC_Init+0x138>
 8010c02:	a201      	add	r2, pc, #4	@ (adr r2, 8010c08 <USB_HC_Init+0x44>)
 8010c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c08:	08010c19 	.word	0x08010c19
 8010c0c:	08010cbf 	.word	0x08010cbf
 8010c10:	08010c19 	.word	0x08010c19
 8010c14:	08010c81 	.word	0x08010c81
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010c18:	78fb      	ldrb	r3, [r7, #3]
 8010c1a:	015a      	lsls	r2, r3, #5
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	4413      	add	r3, r2
 8010c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c24:	461a      	mov	r2, r3
 8010c26:	f240 439d 	movw	r3, #1181	@ 0x49d
 8010c2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8010c2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	da10      	bge.n	8010c56 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010c34:	78fb      	ldrb	r3, [r7, #3]
 8010c36:	015a      	lsls	r2, r3, #5
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c40:	68db      	ldr	r3, [r3, #12]
 8010c42:	78fa      	ldrb	r2, [r7, #3]
 8010c44:	0151      	lsls	r1, r2, #5
 8010c46:	693a      	ldr	r2, [r7, #16]
 8010c48:	440a      	add	r2, r1
 8010c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c52:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8010c54:	e055      	b.n	8010d02 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	4a6f      	ldr	r2, [pc, #444]	@ (8010e18 <USB_HC_Init+0x254>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d151      	bne.n	8010d02 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8010c5e:	78fb      	ldrb	r3, [r7, #3]
 8010c60:	015a      	lsls	r2, r3, #5
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	4413      	add	r3, r2
 8010c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	78fa      	ldrb	r2, [r7, #3]
 8010c6e:	0151      	lsls	r1, r2, #5
 8010c70:	693a      	ldr	r2, [r7, #16]
 8010c72:	440a      	add	r2, r1
 8010c74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010c7c:	60d3      	str	r3, [r2, #12]
      break;
 8010c7e:	e040      	b.n	8010d02 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010c80:	78fb      	ldrb	r3, [r7, #3]
 8010c82:	015a      	lsls	r2, r3, #5
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	4413      	add	r3, r2
 8010c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8010c92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010c94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	da34      	bge.n	8010d06 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010c9c:	78fb      	ldrb	r3, [r7, #3]
 8010c9e:	015a      	lsls	r2, r3, #5
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	78fa      	ldrb	r2, [r7, #3]
 8010cac:	0151      	lsls	r1, r2, #5
 8010cae:	693a      	ldr	r2, [r7, #16]
 8010cb0:	440a      	add	r2, r1
 8010cb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010cba:	60d3      	str	r3, [r2, #12]
      }

      break;
 8010cbc:	e023      	b.n	8010d06 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010cbe:	78fb      	ldrb	r3, [r7, #3]
 8010cc0:	015a      	lsls	r2, r3, #5
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cca:	461a      	mov	r2, r3
 8010ccc:	f240 2325 	movw	r3, #549	@ 0x225
 8010cd0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010cd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	da17      	bge.n	8010d0a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8010cda:	78fb      	ldrb	r3, [r7, #3]
 8010cdc:	015a      	lsls	r2, r3, #5
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	78fa      	ldrb	r2, [r7, #3]
 8010cea:	0151      	lsls	r1, r2, #5
 8010cec:	693a      	ldr	r2, [r7, #16]
 8010cee:	440a      	add	r2, r1
 8010cf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010cf4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8010cf8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8010cfa:	e006      	b.n	8010d0a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	77fb      	strb	r3, [r7, #31]
      break;
 8010d00:	e004      	b.n	8010d0c <USB_HC_Init+0x148>
      break;
 8010d02:	bf00      	nop
 8010d04:	e002      	b.n	8010d0c <USB_HC_Init+0x148>
      break;
 8010d06:	bf00      	nop
 8010d08:	e000      	b.n	8010d0c <USB_HC_Init+0x148>
      break;
 8010d0a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8010d0c:	78fb      	ldrb	r3, [r7, #3]
 8010d0e:	015a      	lsls	r2, r3, #5
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	4413      	add	r3, r2
 8010d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d18:	461a      	mov	r2, r3
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8010d1e:	78fb      	ldrb	r3, [r7, #3]
 8010d20:	015a      	lsls	r2, r3, #5
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	4413      	add	r3, r2
 8010d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	78fa      	ldrb	r2, [r7, #3]
 8010d2e:	0151      	lsls	r1, r2, #5
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	440a      	add	r2, r1
 8010d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d38:	f043 0302 	orr.w	r3, r3, #2
 8010d3c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010d44:	699a      	ldr	r2, [r3, #24]
 8010d46:	78fb      	ldrb	r3, [r7, #3]
 8010d48:	f003 030f 	and.w	r3, r3, #15
 8010d4c:	2101      	movs	r1, #1
 8010d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d52:	6939      	ldr	r1, [r7, #16]
 8010d54:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	699b      	ldr	r3, [r3, #24]
 8010d60:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8010d68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	da03      	bge.n	8010d78 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8010d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d74:	61bb      	str	r3, [r7, #24]
 8010d76:	e001      	b.n	8010d7c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7ff fef9 	bl	8010b74 <USB_GetHostSpeed>
 8010d82:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8010d84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010d88:	2b02      	cmp	r3, #2
 8010d8a:	d106      	bne.n	8010d9a <USB_HC_Init+0x1d6>
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	d003      	beq.n	8010d9a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8010d92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010d96:	617b      	str	r3, [r7, #20]
 8010d98:	e001      	b.n	8010d9e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010d9e:	787b      	ldrb	r3, [r7, #1]
 8010da0:	059b      	lsls	r3, r3, #22
 8010da2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010da6:	78bb      	ldrb	r3, [r7, #2]
 8010da8:	02db      	lsls	r3, r3, #11
 8010daa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010db0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010db4:	049b      	lsls	r3, r3, #18
 8010db6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010dba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8010dbc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010dc2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	431a      	orrs	r2, r3
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dcc:	78fa      	ldrb	r2, [r7, #3]
 8010dce:	0151      	lsls	r1, r2, #5
 8010dd0:	693a      	ldr	r2, [r7, #16]
 8010dd2:	440a      	add	r2, r1
 8010dd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010dd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010ddc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8010dde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010de2:	2b03      	cmp	r3, #3
 8010de4:	d003      	beq.n	8010dee <USB_HC_Init+0x22a>
 8010de6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d10f      	bne.n	8010e0e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010dee:	78fb      	ldrb	r3, [r7, #3]
 8010df0:	015a      	lsls	r2, r3, #5
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	4413      	add	r3, r2
 8010df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	78fa      	ldrb	r2, [r7, #3]
 8010dfe:	0151      	lsls	r1, r2, #5
 8010e00:	693a      	ldr	r2, [r7, #16]
 8010e02:	440a      	add	r2, r1
 8010e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010e0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8010e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3720      	adds	r7, #32
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	40040000 	.word	0x40040000

08010e1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b08c      	sub	sp, #48	@ 0x30
 8010e20:	af02      	add	r7, sp, #8
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	4613      	mov	r3, r2
 8010e28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	785b      	ldrb	r3, [r3, #1]
 8010e32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8010e34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e38:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8010fb4 <USB_HC_StartXfer+0x198>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d12f      	bne.n	8010ea2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8010e42:	79fb      	ldrb	r3, [r7, #7]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d11c      	bne.n	8010e82 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	7c9b      	ldrb	r3, [r3, #18]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d003      	beq.n	8010e58 <USB_HC_StartXfer+0x3c>
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	7c9b      	ldrb	r3, [r3, #18]
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d124      	bne.n	8010ea2 <USB_HC_StartXfer+0x86>
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	799b      	ldrb	r3, [r3, #6]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d120      	bne.n	8010ea2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	015a      	lsls	r2, r3, #5
 8010e64:	6a3b      	ldr	r3, [r7, #32]
 8010e66:	4413      	add	r3, r2
 8010e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	69fa      	ldr	r2, [r7, #28]
 8010e70:	0151      	lsls	r1, r2, #5
 8010e72:	6a3a      	ldr	r2, [r7, #32]
 8010e74:	440a      	add	r2, r1
 8010e76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e7e:	60d3      	str	r3, [r2, #12]
 8010e80:	e00f      	b.n	8010ea2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	791b      	ldrb	r3, [r3, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d10b      	bne.n	8010ea2 <USB_HC_StartXfer+0x86>
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	795b      	ldrb	r3, [r3, #5]
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d107      	bne.n	8010ea2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	785b      	ldrb	r3, [r3, #1]
 8010e96:	4619      	mov	r1, r3
 8010e98:	68f8      	ldr	r0, [r7, #12]
 8010e9a:	f000 fb6b 	bl	8011574 <USB_DoPing>
        return HAL_OK;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	e232      	b.n	8011308 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	799b      	ldrb	r3, [r3, #6]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d158      	bne.n	8010f5c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	78db      	ldrb	r3, [r3, #3]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d007      	beq.n	8010ec6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010eb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	8a92      	ldrh	r2, [r2, #20]
 8010ebc:	fb03 f202 	mul.w	r2, r3, r2
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	61da      	str	r2, [r3, #28]
 8010ec4:	e07c      	b.n	8010fc0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	7c9b      	ldrb	r3, [r3, #18]
 8010eca:	2b01      	cmp	r3, #1
 8010ecc:	d130      	bne.n	8010f30 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	6a1b      	ldr	r3, [r3, #32]
 8010ed2:	2bbc      	cmp	r3, #188	@ 0xbc
 8010ed4:	d918      	bls.n	8010f08 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	8a9b      	ldrh	r3, [r3, #20]
 8010eda:	461a      	mov	r2, r3
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	69da      	ldr	r2, [r3, #28]
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	d003      	beq.n	8010ef8 <USB_HC_StartXfer+0xdc>
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d103      	bne.n	8010f00 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	2202      	movs	r2, #2
 8010efc:	60da      	str	r2, [r3, #12]
 8010efe:	e05f      	b.n	8010fc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	2201      	movs	r2, #1
 8010f04:	60da      	str	r2, [r3, #12]
 8010f06:	e05b      	b.n	8010fc0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	6a1a      	ldr	r2, [r3, #32]
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d007      	beq.n	8010f28 <USB_HC_StartXfer+0x10c>
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	d003      	beq.n	8010f28 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	2204      	movs	r2, #4
 8010f24:	60da      	str	r2, [r3, #12]
 8010f26:	e04b      	b.n	8010fc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	2203      	movs	r2, #3
 8010f2c:	60da      	str	r2, [r3, #12]
 8010f2e:	e047      	b.n	8010fc0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8010f30:	79fb      	ldrb	r3, [r7, #7]
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d10d      	bne.n	8010f52 <USB_HC_StartXfer+0x136>
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	6a1b      	ldr	r3, [r3, #32]
 8010f3a:	68ba      	ldr	r2, [r7, #8]
 8010f3c:	8a92      	ldrh	r2, [r2, #20]
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d907      	bls.n	8010f52 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010f42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f44:	68ba      	ldr	r2, [r7, #8]
 8010f46:	8a92      	ldrh	r2, [r2, #20]
 8010f48:	fb03 f202 	mul.w	r2, r3, r2
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	61da      	str	r2, [r3, #28]
 8010f50:	e036      	b.n	8010fc0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	6a1a      	ldr	r2, [r3, #32]
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	61da      	str	r2, [r3, #28]
 8010f5a:	e031      	b.n	8010fc0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	6a1b      	ldr	r3, [r3, #32]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d018      	beq.n	8010f96 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	6a1b      	ldr	r3, [r3, #32]
 8010f68:	68ba      	ldr	r2, [r7, #8]
 8010f6a:	8a92      	ldrh	r2, [r2, #20]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	8a92      	ldrh	r2, [r2, #20]
 8010f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f78:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8010f7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010f7c:	8b7b      	ldrh	r3, [r7, #26]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d90b      	bls.n	8010f9a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8010f82:	8b7b      	ldrh	r3, [r7, #26]
 8010f84:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010f86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	8a92      	ldrh	r2, [r2, #20]
 8010f8c:	fb03 f202 	mul.w	r2, r3, r2
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	61da      	str	r2, [r3, #28]
 8010f94:	e001      	b.n	8010f9a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8010f96:	2301      	movs	r3, #1
 8010f98:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	78db      	ldrb	r3, [r3, #3]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00a      	beq.n	8010fb8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010fa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	8a92      	ldrh	r2, [r2, #20]
 8010fa8:	fb03 f202 	mul.w	r2, r3, r2
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	61da      	str	r2, [r3, #28]
 8010fb0:	e006      	b.n	8010fc0 <USB_HC_StartXfer+0x1a4>
 8010fb2:	bf00      	nop
 8010fb4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	6a1a      	ldr	r2, [r3, #32]
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	69db      	ldr	r3, [r3, #28]
 8010fc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010fc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fca:	04d9      	lsls	r1, r3, #19
 8010fcc:	4ba3      	ldr	r3, [pc, #652]	@ (801125c <USB_HC_StartXfer+0x440>)
 8010fce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010fd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	7d9b      	ldrb	r3, [r3, #22]
 8010fd6:	075b      	lsls	r3, r3, #29
 8010fd8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010fdc:	69f9      	ldr	r1, [r7, #28]
 8010fde:	0148      	lsls	r0, r1, #5
 8010fe0:	6a39      	ldr	r1, [r7, #32]
 8010fe2:	4401      	add	r1, r0
 8010fe4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010fe8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010fea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8010fec:	79fb      	ldrb	r3, [r7, #7]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d009      	beq.n	8011006 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	6999      	ldr	r1, [r3, #24]
 8010ff6:	69fb      	ldr	r3, [r7, #28]
 8010ff8:	015a      	lsls	r2, r3, #5
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011002:	460a      	mov	r2, r1
 8011004:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8011006:	6a3b      	ldr	r3, [r7, #32]
 8011008:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	f003 0301 	and.w	r3, r3, #1
 8011012:	2b00      	cmp	r3, #0
 8011014:	bf0c      	ite	eq
 8011016:	2301      	moveq	r3, #1
 8011018:	2300      	movne	r3, #0
 801101a:	b2db      	uxtb	r3, r3
 801101c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	015a      	lsls	r2, r3, #5
 8011022:	6a3b      	ldr	r3, [r7, #32]
 8011024:	4413      	add	r3, r2
 8011026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	69fa      	ldr	r2, [r7, #28]
 801102e:	0151      	lsls	r1, r2, #5
 8011030:	6a3a      	ldr	r2, [r7, #32]
 8011032:	440a      	add	r2, r1
 8011034:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011038:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801103c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	015a      	lsls	r2, r3, #5
 8011042:	6a3b      	ldr	r3, [r7, #32]
 8011044:	4413      	add	r3, r2
 8011046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	7e7b      	ldrb	r3, [r7, #25]
 801104e:	075b      	lsls	r3, r3, #29
 8011050:	69f9      	ldr	r1, [r7, #28]
 8011052:	0148      	lsls	r0, r1, #5
 8011054:	6a39      	ldr	r1, [r7, #32]
 8011056:	4401      	add	r1, r0
 8011058:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 801105c:	4313      	orrs	r3, r2
 801105e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	799b      	ldrb	r3, [r3, #6]
 8011064:	2b01      	cmp	r3, #1
 8011066:	f040 80c3 	bne.w	80111f0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	7c5b      	ldrb	r3, [r3, #17]
 801106e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011074:	4313      	orrs	r3, r2
 8011076:	69fa      	ldr	r2, [r7, #28]
 8011078:	0151      	lsls	r1, r2, #5
 801107a:	6a3a      	ldr	r2, [r7, #32]
 801107c:	440a      	add	r2, r1
 801107e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8011082:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011086:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	015a      	lsls	r2, r3, #5
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	4413      	add	r3, r2
 8011090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	69fa      	ldr	r2, [r7, #28]
 8011098:	0151      	lsls	r1, r2, #5
 801109a:	6a3a      	ldr	r2, [r7, #32]
 801109c:	440a      	add	r2, r1
 801109e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80110a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	79db      	ldrb	r3, [r3, #7]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d123      	bne.n	80110f8 <USB_HC_StartXfer+0x2dc>
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	78db      	ldrb	r3, [r3, #3]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d11f      	bne.n	80110f8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	015a      	lsls	r2, r3, #5
 80110bc:	6a3b      	ldr	r3, [r7, #32]
 80110be:	4413      	add	r3, r2
 80110c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	69fa      	ldr	r2, [r7, #28]
 80110c8:	0151      	lsls	r1, r2, #5
 80110ca:	6a3a      	ldr	r2, [r7, #32]
 80110cc:	440a      	add	r2, r1
 80110ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80110d6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	015a      	lsls	r2, r3, #5
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	4413      	add	r3, r2
 80110e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	69fa      	ldr	r2, [r7, #28]
 80110e8:	0151      	lsls	r1, r2, #5
 80110ea:	6a3a      	ldr	r2, [r7, #32]
 80110ec:	440a      	add	r2, r1
 80110ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110f6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	7c9b      	ldrb	r3, [r3, #18]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d003      	beq.n	8011108 <USB_HC_StartXfer+0x2ec>
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	7c9b      	ldrb	r3, [r3, #18]
 8011104:	2b03      	cmp	r3, #3
 8011106:	d117      	bne.n	8011138 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 801110c:	2b01      	cmp	r3, #1
 801110e:	d113      	bne.n	8011138 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	78db      	ldrb	r3, [r3, #3]
 8011114:	2b01      	cmp	r3, #1
 8011116:	d10f      	bne.n	8011138 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	015a      	lsls	r2, r3, #5
 801111c:	6a3b      	ldr	r3, [r7, #32]
 801111e:	4413      	add	r3, r2
 8011120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	69fa      	ldr	r2, [r7, #28]
 8011128:	0151      	lsls	r1, r2, #5
 801112a:	6a3a      	ldr	r2, [r7, #32]
 801112c:	440a      	add	r2, r1
 801112e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011136:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	7c9b      	ldrb	r3, [r3, #18]
 801113c:	2b01      	cmp	r3, #1
 801113e:	d162      	bne.n	8011206 <USB_HC_StartXfer+0x3ea>
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	78db      	ldrb	r3, [r3, #3]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d15e      	bne.n	8011206 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	3b01      	subs	r3, #1
 801114e:	2b03      	cmp	r3, #3
 8011150:	d858      	bhi.n	8011204 <USB_HC_StartXfer+0x3e8>
 8011152:	a201      	add	r2, pc, #4	@ (adr r2, 8011158 <USB_HC_StartXfer+0x33c>)
 8011154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011158:	08011169 	.word	0x08011169
 801115c:	0801118b 	.word	0x0801118b
 8011160:	080111ad 	.word	0x080111ad
 8011164:	080111cf 	.word	0x080111cf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	015a      	lsls	r2, r3, #5
 801116c:	6a3b      	ldr	r3, [r7, #32]
 801116e:	4413      	add	r3, r2
 8011170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	69fa      	ldr	r2, [r7, #28]
 8011178:	0151      	lsls	r1, r2, #5
 801117a:	6a3a      	ldr	r2, [r7, #32]
 801117c:	440a      	add	r2, r1
 801117e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011186:	6053      	str	r3, [r2, #4]
          break;
 8011188:	e03d      	b.n	8011206 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	015a      	lsls	r2, r3, #5
 801118e:	6a3b      	ldr	r3, [r7, #32]
 8011190:	4413      	add	r3, r2
 8011192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	69fa      	ldr	r2, [r7, #28]
 801119a:	0151      	lsls	r1, r2, #5
 801119c:	6a3a      	ldr	r2, [r7, #32]
 801119e:	440a      	add	r2, r1
 80111a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111a4:	f043 030e 	orr.w	r3, r3, #14
 80111a8:	6053      	str	r3, [r2, #4]
          break;
 80111aa:	e02c      	b.n	8011206 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	015a      	lsls	r2, r3, #5
 80111b0:	6a3b      	ldr	r3, [r7, #32]
 80111b2:	4413      	add	r3, r2
 80111b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	69fa      	ldr	r2, [r7, #28]
 80111bc:	0151      	lsls	r1, r2, #5
 80111be:	6a3a      	ldr	r2, [r7, #32]
 80111c0:	440a      	add	r2, r1
 80111c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80111ca:	6053      	str	r3, [r2, #4]
          break;
 80111cc:	e01b      	b.n	8011206 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	015a      	lsls	r2, r3, #5
 80111d2:	6a3b      	ldr	r3, [r7, #32]
 80111d4:	4413      	add	r3, r2
 80111d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	69fa      	ldr	r2, [r7, #28]
 80111de:	0151      	lsls	r1, r2, #5
 80111e0:	6a3a      	ldr	r2, [r7, #32]
 80111e2:	440a      	add	r2, r1
 80111e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80111ec:	6053      	str	r3, [r2, #4]
          break;
 80111ee:	e00a      	b.n	8011206 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	015a      	lsls	r2, r3, #5
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	4413      	add	r3, r2
 80111f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111fc:	461a      	mov	r2, r3
 80111fe:	2300      	movs	r3, #0
 8011200:	6053      	str	r3, [r2, #4]
 8011202:	e000      	b.n	8011206 <USB_HC_StartXfer+0x3ea>
          break;
 8011204:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	015a      	lsls	r2, r3, #5
 801120a:	6a3b      	ldr	r3, [r7, #32]
 801120c:	4413      	add	r3, r2
 801120e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801121c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	78db      	ldrb	r3, [r3, #3]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d004      	beq.n	8011230 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801122c:	613b      	str	r3, [r7, #16]
 801122e:	e003      	b.n	8011238 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011236:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801123e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	015a      	lsls	r2, r3, #5
 8011244:	6a3b      	ldr	r3, [r7, #32]
 8011246:	4413      	add	r3, r2
 8011248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801124c:	461a      	mov	r2, r3
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8011252:	79fb      	ldrb	r3, [r7, #7]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d003      	beq.n	8011260 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	e055      	b.n	8011308 <USB_HC_StartXfer+0x4ec>
 801125c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	78db      	ldrb	r3, [r3, #3]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d14e      	bne.n	8011306 <USB_HC_StartXfer+0x4ea>
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	6a1b      	ldr	r3, [r3, #32]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d04a      	beq.n	8011306 <USB_HC_StartXfer+0x4ea>
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	79db      	ldrb	r3, [r3, #7]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d146      	bne.n	8011306 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	7c9b      	ldrb	r3, [r3, #18]
 801127c:	2b03      	cmp	r3, #3
 801127e:	d831      	bhi.n	80112e4 <USB_HC_StartXfer+0x4c8>
 8011280:	a201      	add	r2, pc, #4	@ (adr r2, 8011288 <USB_HC_StartXfer+0x46c>)
 8011282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011286:	bf00      	nop
 8011288:	08011299 	.word	0x08011299
 801128c:	080112bd 	.word	0x080112bd
 8011290:	08011299 	.word	0x08011299
 8011294:	080112bd 	.word	0x080112bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	6a1b      	ldr	r3, [r3, #32]
 801129c:	3303      	adds	r3, #3
 801129e:	089b      	lsrs	r3, r3, #2
 80112a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80112a2:	8afa      	ldrh	r2, [r7, #22]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d91c      	bls.n	80112e8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	699b      	ldr	r3, [r3, #24]
 80112b2:	f043 0220 	orr.w	r2, r3, #32
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80112ba:	e015      	b.n	80112e8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	6a1b      	ldr	r3, [r3, #32]
 80112c0:	3303      	adds	r3, #3
 80112c2:	089b      	lsrs	r3, r3, #2
 80112c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80112c6:	8afa      	ldrh	r2, [r7, #22]
 80112c8:	6a3b      	ldr	r3, [r7, #32]
 80112ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d90a      	bls.n	80112ec <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	699b      	ldr	r3, [r3, #24]
 80112da:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80112e2:	e003      	b.n	80112ec <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80112e4:	bf00      	nop
 80112e6:	e002      	b.n	80112ee <USB_HC_StartXfer+0x4d2>
        break;
 80112e8:	bf00      	nop
 80112ea:	e000      	b.n	80112ee <USB_HC_StartXfer+0x4d2>
        break;
 80112ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	6999      	ldr	r1, [r3, #24]
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	785a      	ldrb	r2, [r3, #1]
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	6a1b      	ldr	r3, [r3, #32]
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	2000      	movs	r0, #0
 80112fe:	9000      	str	r0, [sp, #0]
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f7ff f9cf 	bl	80106a4 <USB_WritePacket>
  }

  return HAL_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3728      	adds	r7, #40	@ 0x28
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011310:	b480      	push	{r7}
 8011312:	b085      	sub	sp, #20
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011322:	695b      	ldr	r3, [r3, #20]
 8011324:	b29b      	uxth	r3, r3
}
 8011326:	4618      	mov	r0, r3
 8011328:	3714      	adds	r7, #20
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr

08011332 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011332:	b480      	push	{r7}
 8011334:	b089      	sub	sp, #36	@ 0x24
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	460b      	mov	r3, r1
 801133c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011342:	78fb      	ldrb	r3, [r7, #3]
 8011344:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8011346:	2300      	movs	r3, #0
 8011348:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801134a:	69bb      	ldr	r3, [r7, #24]
 801134c:	015a      	lsls	r2, r3, #5
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	4413      	add	r3, r2
 8011352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	0c9b      	lsrs	r3, r3, #18
 801135a:	f003 0303 	and.w	r3, r3, #3
 801135e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	015a      	lsls	r2, r3, #5
 8011364:	69fb      	ldr	r3, [r7, #28]
 8011366:	4413      	add	r3, r2
 8011368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	0fdb      	lsrs	r3, r3, #31
 8011370:	f003 0301 	and.w	r3, r3, #1
 8011374:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	015a      	lsls	r2, r3, #5
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	4413      	add	r3, r2
 801137e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	0fdb      	lsrs	r3, r3, #31
 8011386:	f003 0301 	and.w	r3, r3, #1
 801138a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	f003 0320 	and.w	r3, r3, #32
 8011394:	2b20      	cmp	r3, #32
 8011396:	d10d      	bne.n	80113b4 <USB_HC_Halt+0x82>
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d10a      	bne.n	80113b4 <USB_HC_Halt+0x82>
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d005      	beq.n	80113b0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d002      	beq.n	80113b0 <USB_HC_Halt+0x7e>
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	2b03      	cmp	r3, #3
 80113ae:	d101      	bne.n	80113b4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80113b0:	2300      	movs	r3, #0
 80113b2:	e0d8      	b.n	8011566 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d002      	beq.n	80113c0 <USB_HC_Halt+0x8e>
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	2b02      	cmp	r3, #2
 80113be:	d173      	bne.n	80114a8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	015a      	lsls	r2, r3, #5
 80113c4:	69fb      	ldr	r3, [r7, #28]
 80113c6:	4413      	add	r3, r2
 80113c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	69ba      	ldr	r2, [r7, #24]
 80113d0:	0151      	lsls	r1, r2, #5
 80113d2:	69fa      	ldr	r2, [r7, #28]
 80113d4:	440a      	add	r2, r1
 80113d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80113da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80113de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	f003 0320 	and.w	r3, r3, #32
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d14a      	bne.n	8011482 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d133      	bne.n	8011460 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	015a      	lsls	r2, r3, #5
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	4413      	add	r3, r2
 8011400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	69ba      	ldr	r2, [r7, #24]
 8011408:	0151      	lsls	r1, r2, #5
 801140a:	69fa      	ldr	r2, [r7, #28]
 801140c:	440a      	add	r2, r1
 801140e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011412:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011416:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	015a      	lsls	r2, r3, #5
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	4413      	add	r3, r2
 8011420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	69ba      	ldr	r2, [r7, #24]
 8011428:	0151      	lsls	r1, r2, #5
 801142a:	69fa      	ldr	r2, [r7, #28]
 801142c:	440a      	add	r2, r1
 801142e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011436:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	3301      	adds	r3, #1
 801143c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011444:	d82e      	bhi.n	80114a4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	015a      	lsls	r2, r3, #5
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	4413      	add	r3, r2
 801144e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801145c:	d0ec      	beq.n	8011438 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801145e:	e081      	b.n	8011564 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	015a      	lsls	r2, r3, #5
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	4413      	add	r3, r2
 8011468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	69ba      	ldr	r2, [r7, #24]
 8011470:	0151      	lsls	r1, r2, #5
 8011472:	69fa      	ldr	r2, [r7, #28]
 8011474:	440a      	add	r2, r1
 8011476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801147a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801147e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011480:	e070      	b.n	8011564 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	015a      	lsls	r2, r3, #5
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	4413      	add	r3, r2
 801148a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	69ba      	ldr	r2, [r7, #24]
 8011492:	0151      	lsls	r1, r2, #5
 8011494:	69fa      	ldr	r2, [r7, #28]
 8011496:	440a      	add	r2, r1
 8011498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801149c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80114a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114a2:	e05f      	b.n	8011564 <USB_HC_Halt+0x232>
            break;
 80114a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114a6:	e05d      	b.n	8011564 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	015a      	lsls	r2, r3, #5
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	4413      	add	r3, r2
 80114b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	69ba      	ldr	r2, [r7, #24]
 80114b8:	0151      	lsls	r1, r2, #5
 80114ba:	69fa      	ldr	r2, [r7, #28]
 80114bc:	440a      	add	r2, r1
 80114be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80114c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80114ce:	691b      	ldr	r3, [r3, #16]
 80114d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d133      	bne.n	8011540 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80114d8:	69bb      	ldr	r3, [r7, #24]
 80114da:	015a      	lsls	r2, r3, #5
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	4413      	add	r3, r2
 80114e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	69ba      	ldr	r2, [r7, #24]
 80114e8:	0151      	lsls	r1, r2, #5
 80114ea:	69fa      	ldr	r2, [r7, #28]
 80114ec:	440a      	add	r2, r1
 80114ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80114f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	015a      	lsls	r2, r3, #5
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	4413      	add	r3, r2
 8011500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	69ba      	ldr	r2, [r7, #24]
 8011508:	0151      	lsls	r1, r2, #5
 801150a:	69fa      	ldr	r2, [r7, #28]
 801150c:	440a      	add	r2, r1
 801150e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011516:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	3301      	adds	r3, #1
 801151c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011524:	d81d      	bhi.n	8011562 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	015a      	lsls	r2, r3, #5
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	4413      	add	r3, r2
 801152e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801153c:	d0ec      	beq.n	8011518 <USB_HC_Halt+0x1e6>
 801153e:	e011      	b.n	8011564 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	015a      	lsls	r2, r3, #5
 8011544:	69fb      	ldr	r3, [r7, #28]
 8011546:	4413      	add	r3, r2
 8011548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	69ba      	ldr	r2, [r7, #24]
 8011550:	0151      	lsls	r1, r2, #5
 8011552:	69fa      	ldr	r2, [r7, #28]
 8011554:	440a      	add	r2, r1
 8011556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801155a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801155e:	6013      	str	r3, [r2, #0]
 8011560:	e000      	b.n	8011564 <USB_HC_Halt+0x232>
          break;
 8011562:	bf00      	nop
    }
  }

  return HAL_OK;
 8011564:	2300      	movs	r3, #0
}
 8011566:	4618      	mov	r0, r3
 8011568:	3724      	adds	r7, #36	@ 0x24
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr
	...

08011574 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8011574:	b480      	push	{r7}
 8011576:	b087      	sub	sp, #28
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	460b      	mov	r3, r1
 801157e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8011584:	78fb      	ldrb	r3, [r7, #3]
 8011586:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8011588:	2301      	movs	r3, #1
 801158a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	04da      	lsls	r2, r3, #19
 8011590:	4b15      	ldr	r3, [pc, #84]	@ (80115e8 <USB_DoPing+0x74>)
 8011592:	4013      	ands	r3, r2
 8011594:	693a      	ldr	r2, [r7, #16]
 8011596:	0151      	lsls	r1, r2, #5
 8011598:	697a      	ldr	r2, [r7, #20]
 801159a:	440a      	add	r2, r1
 801159c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80115a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	015a      	lsls	r2, r3, #5
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	4413      	add	r3, r2
 80115ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80115bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	015a      	lsls	r2, r3, #5
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	4413      	add	r3, r2
 80115ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115d2:	461a      	mov	r2, r3
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80115d8:	2300      	movs	r3, #0
}
 80115da:	4618      	mov	r0, r3
 80115dc:	371c      	adds	r7, #28
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	1ff80000 	.word	0x1ff80000

080115ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b088      	sub	sp, #32
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80115f4:	2300      	movs	r3, #0
 80115f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80115fc:	2300      	movs	r3, #0
 80115fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7fe ff92 	bl	801052a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011606:	2110      	movs	r1, #16
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f7fe ffeb 	bl	80105e4 <USB_FlushTxFifo>
 801160e:	4603      	mov	r3, r0
 8011610:	2b00      	cmp	r3, #0
 8011612:	d001      	beq.n	8011618 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011614:	2301      	movs	r3, #1
 8011616:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7ff f815 	bl	8010648 <USB_FlushRxFifo>
 801161e:	4603      	mov	r3, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	d001      	beq.n	8011628 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011624:	2301      	movs	r3, #1
 8011626:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011628:	2300      	movs	r3, #0
 801162a:	61bb      	str	r3, [r7, #24]
 801162c:	e01f      	b.n	801166e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 801162e:	69bb      	ldr	r3, [r7, #24]
 8011630:	015a      	lsls	r2, r3, #5
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	4413      	add	r3, r2
 8011636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011644:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801164c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011654:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	015a      	lsls	r2, r3, #5
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	4413      	add	r3, r2
 801165e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011662:	461a      	mov	r2, r3
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	3301      	adds	r3, #1
 801166c:	61bb      	str	r3, [r7, #24]
 801166e:	69bb      	ldr	r3, [r7, #24]
 8011670:	2b0f      	cmp	r3, #15
 8011672:	d9dc      	bls.n	801162e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011674:	2300      	movs	r3, #0
 8011676:	61bb      	str	r3, [r7, #24]
 8011678:	e034      	b.n	80116e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	015a      	lsls	r2, r3, #5
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	4413      	add	r3, r2
 8011682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011690:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011698:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80116a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	015a      	lsls	r2, r3, #5
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	4413      	add	r3, r2
 80116aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116ae:	461a      	mov	r2, r3
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	3301      	adds	r3, #1
 80116b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116c0:	d80c      	bhi.n	80116dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	015a      	lsls	r2, r3, #5
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	4413      	add	r3, r2
 80116ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80116d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80116d8:	d0ec      	beq.n	80116b4 <USB_StopHost+0xc8>
 80116da:	e000      	b.n	80116de <USB_StopHost+0xf2>
        break;
 80116dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	3301      	adds	r3, #1
 80116e2:	61bb      	str	r3, [r7, #24]
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	2b0f      	cmp	r3, #15
 80116e8:	d9c7      	bls.n	801167a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80116f0:	461a      	mov	r2, r3
 80116f2:	f04f 33ff 	mov.w	r3, #4294967295
 80116f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f04f 32ff 	mov.w	r2, #4294967295
 80116fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7fe ff01 	bl	8010508 <USB_EnableGlobalInt>

  return ret;
 8011706:	7ffb      	ldrb	r3, [r7, #31]
}
 8011708:	4618      	mov	r0, r3
 801170a:	3720      	adds	r7, #32
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011714:	4904      	ldr	r1, [pc, #16]	@ (8011728 <MX_FATFS_Init+0x18>)
 8011716:	4805      	ldr	r0, [pc, #20]	@ (801172c <MX_FATFS_Init+0x1c>)
 8011718:	f004 ff32 	bl	8016580 <FATFS_LinkDriver>
 801171c:	4603      	mov	r3, r0
 801171e:	461a      	mov	r2, r3
 8011720:	4b03      	ldr	r3, [pc, #12]	@ (8011730 <MX_FATFS_Init+0x20>)
 8011722:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011724:	bf00      	nop
 8011726:	bd80      	pop	{r7, pc}
 8011728:	200015a0 	.word	0x200015a0
 801172c:	0801c5d8 	.word	0x0801c5d8
 8011730:	2000159c 	.word	0x2000159c

08011734 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011734:	b480      	push	{r7}
 8011736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011738:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801173a:	4618      	mov	r0, r3
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011750:	2300      	movs	r3, #0
 8011752:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	68ba      	ldr	r2, [r7, #8]
 8011758:	68f9      	ldr	r1, [r7, #12]
 801175a:	4806      	ldr	r0, [pc, #24]	@ (8011774 <BSP_SD_ReadBlocks_DMA+0x30>)
 801175c:	f7fa fcb4 	bl	800c0c8 <HAL_SD_ReadBlocks_DMA>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d001      	beq.n	801176a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011766:	2301      	movs	r3, #1
 8011768:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801176a:	7dfb      	ldrb	r3, [r7, #23]
}
 801176c:	4618      	mov	r0, r3
 801176e:	3718      	adds	r7, #24
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	20000c74 	.word	0x20000c74

08011778 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b086      	sub	sp, #24
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	68f9      	ldr	r1, [r7, #12]
 801178e:	4806      	ldr	r0, [pc, #24]	@ (80117a8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011790:	f7fa fd7c 	bl	800c28c <HAL_SD_WriteBlocks_DMA>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d001      	beq.n	801179e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801179a:	2301      	movs	r3, #1
 801179c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3718      	adds	r7, #24
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	20000c74 	.word	0x20000c74

080117ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80117b0:	4805      	ldr	r0, [pc, #20]	@ (80117c8 <BSP_SD_GetCardState+0x1c>)
 80117b2:	f7fb f82b 	bl	800c80c <HAL_SD_GetCardState>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b04      	cmp	r3, #4
 80117ba:	bf14      	ite	ne
 80117bc:	2301      	movne	r3, #1
 80117be:	2300      	moveq	r3, #0
 80117c0:	b2db      	uxtb	r3, r3
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	20000c74 	.word	0x20000c74

080117cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80117d4:	6879      	ldr	r1, [r7, #4]
 80117d6:	4803      	ldr	r0, [pc, #12]	@ (80117e4 <BSP_SD_GetCardInfo+0x18>)
 80117d8:	f7fa ffec 	bl	800c7b4 <HAL_SD_GetCardInfo>
}
 80117dc:	bf00      	nop
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	20000c74 	.word	0x20000c74

080117e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80117f0:	f000 f988 	bl	8011b04 <BSP_SD_ReadCpltCallback>
}
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011804:	f004 ff54 	bl	80166b0 <osKernelSysTick>
 8011808:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 801180a:	e006      	b.n	801181a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801180c:	f7ff ffce 	bl	80117ac <BSP_SD_GetCardState>
 8011810:	4603      	mov	r3, r0
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011816:	2300      	movs	r3, #0
 8011818:	e009      	b.n	801182e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801181a:	f004 ff49 	bl	80166b0 <osKernelSysTick>
 801181e:	4602      	mov	r2, r0
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	1ad3      	subs	r3, r2, r3
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	429a      	cmp	r2, r3
 8011828:	d8f0      	bhi.n	801180c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801182a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801182e:	4618      	mov	r0, r3
 8011830:	3710      	adds	r7, #16
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
	...

08011838 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	4603      	mov	r3, r0
 8011840:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011842:	4b0c      	ldr	r3, [pc, #48]	@ (8011874 <SD_CheckStatus+0x3c>)
 8011844:	2201      	movs	r2, #1
 8011846:	701a      	strb	r2, [r3, #0]

  // Use HAL function directly instead of BSP
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 8011848:	480b      	ldr	r0, [pc, #44]	@ (8011878 <SD_CheckStatus+0x40>)
 801184a:	f7fa ffdf 	bl	800c80c <HAL_SD_GetCardState>
 801184e:	60f8      	str	r0, [r7, #12]
  if(cardState == HAL_SD_CARD_TRANSFER)
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2b04      	cmp	r3, #4
 8011854:	d107      	bne.n	8011866 <SD_CheckStatus+0x2e>
  {
    Stat &= ~STA_NOINIT;
 8011856:	4b07      	ldr	r3, [pc, #28]	@ (8011874 <SD_CheckStatus+0x3c>)
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	b2db      	uxtb	r3, r3
 801185c:	f023 0301 	bic.w	r3, r3, #1
 8011860:	b2da      	uxtb	r2, r3
 8011862:	4b04      	ldr	r3, [pc, #16]	@ (8011874 <SD_CheckStatus+0x3c>)
 8011864:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011866:	4b03      	ldr	r3, [pc, #12]	@ (8011874 <SD_CheckStatus+0x3c>)
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	b2db      	uxtb	r3, r3
}
 801186c:	4618      	mov	r0, r3
 801186e:	3710      	adds	r7, #16
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}
 8011874:	20000065 	.word	0x20000065
 8011878:	20000c74 	.word	0x20000c74

0801187c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801187c:	b590      	push	{r4, r7, lr}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	4603      	mov	r3, r0
 8011884:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011886:	4b1d      	ldr	r3, [pc, #116]	@ (80118fc <SD_initialize+0x80>)
 8011888:	2201      	movs	r2, #1
 801188a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 801188c:	f004 ff04 	bl	8016698 <osKernelRunning>
 8011890:	4603      	mov	r3, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	d02b      	beq.n	80118ee <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 8011896:	79fb      	ldrb	r3, [r7, #7]
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff ffcd 	bl	8011838 <SD_CheckStatus>
 801189e:	4603      	mov	r3, r0
 80118a0:	461a      	mov	r2, r3
 80118a2:	4b16      	ldr	r3, [pc, #88]	@ (80118fc <SD_initialize+0x80>)
 80118a4:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80118a6:	4b15      	ldr	r3, [pc, #84]	@ (80118fc <SD_initialize+0x80>)
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d01e      	beq.n	80118ee <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 80118b0:	4b13      	ldr	r3, [pc, #76]	@ (8011900 <SD_initialize+0x84>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d10e      	bne.n	80118d6 <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80118b8:	4b12      	ldr	r3, [pc, #72]	@ (8011904 <SD_initialize+0x88>)
 80118ba:	f107 0408 	add.w	r4, r7, #8
 80118be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80118c4:	f107 0308 	add.w	r3, r7, #8
 80118c8:	2100      	movs	r1, #0
 80118ca:	4618      	mov	r0, r3
 80118cc:	f005 f837 	bl	801693e <osMessageCreate>
 80118d0:	4603      	mov	r3, r0
 80118d2:	4a0b      	ldr	r2, [pc, #44]	@ (8011900 <SD_initialize+0x84>)
 80118d4:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80118d6:	4b0a      	ldr	r3, [pc, #40]	@ (8011900 <SD_initialize+0x84>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d107      	bne.n	80118ee <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 80118de:	4b07      	ldr	r3, [pc, #28]	@ (80118fc <SD_initialize+0x80>)
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	b2db      	uxtb	r3, r3
 80118e4:	f043 0301 	orr.w	r3, r3, #1
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	4b04      	ldr	r3, [pc, #16]	@ (80118fc <SD_initialize+0x80>)
 80118ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80118ee:	4b03      	ldr	r3, [pc, #12]	@ (80118fc <SD_initialize+0x80>)
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	b2db      	uxtb	r3, r3

}
 80118f4:	4618      	mov	r0, r3
 80118f6:	371c      	adds	r7, #28
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd90      	pop	{r4, r7, pc}
 80118fc:	20000065 	.word	0x20000065
 8011900:	200017d8 	.word	0x200017d8
 8011904:	0801c520 	.word	0x0801c520

08011908 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	4603      	mov	r3, r0
 8011910:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011912:	79fb      	ldrb	r3, [r7, #7]
 8011914:	4618      	mov	r0, r3
 8011916:	f7ff ff8f 	bl	8011838 <SD_CheckStatus>
 801191a:	4603      	mov	r3, r0
}
 801191c:	4618      	mov	r0, r3
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08a      	sub	sp, #40	@ 0x28
 8011928:	af00      	add	r7, sp, #0
 801192a:	60b9      	str	r1, [r7, #8]
 801192c:	607a      	str	r2, [r7, #4]
 801192e:	603b      	str	r3, [r7, #0]
 8011930:	4603      	mov	r3, r0
 8011932:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011934:	2301      	movs	r3, #1
 8011936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801193a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801193e:	f7ff ff5d 	bl	80117fc <SD_CheckStatusWithTimeout>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	da02      	bge.n	801194e <SD_read+0x2a>
  {
    return res;
 8011948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801194c:	e032      	b.n	80119b4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801194e:	683a      	ldr	r2, [r7, #0]
 8011950:	6879      	ldr	r1, [r7, #4]
 8011952:	68b8      	ldr	r0, [r7, #8]
 8011954:	f7ff fef6 	bl	8011744 <BSP_SD_ReadBlocks_DMA>
 8011958:	4603      	mov	r3, r0
 801195a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 801195e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011962:	2b00      	cmp	r3, #0
 8011964:	d124      	bne.n	80119b0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011966:	4b15      	ldr	r3, [pc, #84]	@ (80119bc <SD_read+0x98>)
 8011968:	6819      	ldr	r1, [r3, #0]
 801196a:	f107 0314 	add.w	r3, r7, #20
 801196e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011972:	4618      	mov	r0, r3
 8011974:	f005 f84c 	bl	8016a10 <osMessageGet>

    if (event.status == osEventMessage)
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2b10      	cmp	r3, #16
 801197c:	d118      	bne.n	80119b0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 801197e:	69bb      	ldr	r3, [r7, #24]
 8011980:	2b01      	cmp	r3, #1
 8011982:	d115      	bne.n	80119b0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8011984:	f004 fe94 	bl	80166b0 <osKernelSysTick>
 8011988:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801198a:	e008      	b.n	801199e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801198c:	f7ff ff0e 	bl	80117ac <BSP_SD_GetCardState>
 8011990:	4603      	mov	r3, r0
 8011992:	2b00      	cmp	r3, #0
 8011994:	d103      	bne.n	801199e <SD_read+0x7a>
              {
                res = RES_OK;
 8011996:	2300      	movs	r3, #0
 8011998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801199c:	e008      	b.n	80119b0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801199e:	f004 fe87 	bl	80166b0 <osKernelSysTick>
 80119a2:	4602      	mov	r2, r0
 80119a4:	6a3b      	ldr	r3, [r7, #32]
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d9ed      	bls.n	801198c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80119b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3728      	adds	r7, #40	@ 0x28
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	200017d8 	.word	0x200017d8

080119c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b08a      	sub	sp, #40	@ 0x28
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	60b9      	str	r1, [r7, #8]
 80119c8:	607a      	str	r2, [r7, #4]
 80119ca:	603b      	str	r3, [r7, #0]
 80119cc:	4603      	mov	r3, r0
 80119ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80119d0:	2301      	movs	r3, #1
 80119d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80119d6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80119da:	f7ff ff0f 	bl	80117fc <SD_CheckStatusWithTimeout>
 80119de:	4603      	mov	r3, r0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	da02      	bge.n	80119ea <SD_write+0x2a>
  {
    return res;
 80119e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119e8:	e02e      	b.n	8011a48 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	6879      	ldr	r1, [r7, #4]
 80119ee:	68b8      	ldr	r0, [r7, #8]
 80119f0:	f7ff fec2 	bl	8011778 <BSP_SD_WriteBlocks_DMA>
 80119f4:	4603      	mov	r3, r0
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d124      	bne.n	8011a44 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80119fa:	4b15      	ldr	r3, [pc, #84]	@ (8011a50 <SD_write+0x90>)
 80119fc:	6819      	ldr	r1, [r3, #0]
 80119fe:	f107 0314 	add.w	r3, r7, #20
 8011a02:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011a06:	4618      	mov	r0, r3
 8011a08:	f005 f802 	bl	8016a10 <osMessageGet>

    if (event.status == osEventMessage)
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	2b10      	cmp	r3, #16
 8011a10:	d118      	bne.n	8011a44 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d115      	bne.n	8011a44 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8011a18:	f004 fe4a 	bl	80166b0 <osKernelSysTick>
 8011a1c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011a1e:	e008      	b.n	8011a32 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011a20:	f7ff fec4 	bl	80117ac <BSP_SD_GetCardState>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d103      	bne.n	8011a32 <SD_write+0x72>
          {
            res = RES_OK;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8011a30:	e008      	b.n	8011a44 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011a32:	f004 fe3d 	bl	80166b0 <osKernelSysTick>
 8011a36:	4602      	mov	r2, r0
 8011a38:	6a3b      	ldr	r3, [r7, #32]
 8011a3a:	1ad3      	subs	r3, r2, r3
 8011a3c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011a40:	4293      	cmp	r3, r2
 8011a42:	d9ed      	bls.n	8011a20 <SD_write+0x60>
    }

  }
#endif

  return res;
 8011a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3728      	adds	r7, #40	@ 0x28
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	200017d8 	.word	0x200017d8

08011a54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b08c      	sub	sp, #48	@ 0x30
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	603a      	str	r2, [r7, #0]
 8011a5e:	71fb      	strb	r3, [r7, #7]
 8011a60:	460b      	mov	r3, r1
 8011a62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011a64:	2301      	movs	r3, #1
 8011a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011a6a:	4b25      	ldr	r3, [pc, #148]	@ (8011b00 <SD_ioctl+0xac>)
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	f003 0301 	and.w	r3, r3, #1
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d001      	beq.n	8011a7c <SD_ioctl+0x28>
 8011a78:	2303      	movs	r3, #3
 8011a7a:	e03c      	b.n	8011af6 <SD_ioctl+0xa2>

  switch (cmd)
 8011a7c:	79bb      	ldrb	r3, [r7, #6]
 8011a7e:	2b03      	cmp	r3, #3
 8011a80:	d834      	bhi.n	8011aec <SD_ioctl+0x98>
 8011a82:	a201      	add	r2, pc, #4	@ (adr r2, 8011a88 <SD_ioctl+0x34>)
 8011a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a88:	08011a99 	.word	0x08011a99
 8011a8c:	08011aa1 	.word	0x08011aa1
 8011a90:	08011ab9 	.word	0x08011ab9
 8011a94:	08011ad3 	.word	0x08011ad3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011a9e:	e028      	b.n	8011af2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011aa0:	f107 030c 	add.w	r3, r7, #12
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7ff fe91 	bl	80117cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ab6:	e01c      	b.n	8011af2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ab8:	f107 030c 	add.w	r3, r7, #12
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7ff fe85 	bl	80117cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011aca:	2300      	movs	r3, #0
 8011acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ad0:	e00f      	b.n	8011af2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ad2:	f107 030c 	add.w	r3, r7, #12
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7ff fe78 	bl	80117cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ade:	0a5a      	lsrs	r2, r3, #9
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011aea:	e002      	b.n	8011af2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011aec:	2304      	movs	r3, #4
 8011aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011af2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3730      	adds	r7, #48	@ 0x30
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	20000065 	.word	0x20000065

08011b04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8011b08:	4b04      	ldr	r3, [pc, #16]	@ (8011b1c <BSP_SD_ReadCpltCallback+0x18>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	2101      	movs	r1, #1
 8011b10:	4618      	mov	r0, r3
 8011b12:	f004 ff3d 	bl	8016990 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8011b16:	bf00      	nop
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	200017d8 	.word	0x200017d8

08011b20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8011b20:	b590      	push	{r4, r7, lr}
 8011b22:	b089      	sub	sp, #36	@ 0x24
 8011b24:	af04      	add	r7, sp, #16
 8011b26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8011b28:	2301      	movs	r3, #1
 8011b2a:	2202      	movs	r2, #2
 8011b2c:	2102      	movs	r1, #2
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f000 fcbd 	bl	80124ae <USBH_FindInterface>
 8011b34:	4603      	mov	r3, r0
 8011b36:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011b38:	7bfb      	ldrb	r3, [r7, #15]
 8011b3a:	2bff      	cmp	r3, #255	@ 0xff
 8011b3c:	d002      	beq.n	8011b44 <USBH_CDC_InterfaceInit+0x24>
 8011b3e:	7bfb      	ldrb	r3, [r7, #15]
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d901      	bls.n	8011b48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011b44:	2302      	movs	r3, #2
 8011b46:	e13d      	b.n	8011dc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f000 fc92 	bl	8012476 <USBH_SelectInterface>
 8011b52:	4603      	mov	r3, r0
 8011b54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8011b56:	7bbb      	ldrb	r3, [r7, #14]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d001      	beq.n	8011b60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8011b5c:	2302      	movs	r3, #2
 8011b5e:	e131      	b.n	8011dc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8011b66:	2050      	movs	r0, #80	@ 0x50
 8011b68:	f008 f894 	bl	8019c94 <malloc>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011b76:	69db      	ldr	r3, [r3, #28]
 8011b78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d101      	bne.n	8011b84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8011b80:	2302      	movs	r3, #2
 8011b82:	e11f      	b.n	8011dc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8011b84:	2250      	movs	r2, #80	@ 0x50
 8011b86:	2100      	movs	r1, #0
 8011b88:	68b8      	ldr	r0, [r7, #8]
 8011b8a:	f008 f9d5 	bl	8019f38 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	211a      	movs	r1, #26
 8011b94:	fb01 f303 	mul.w	r3, r1, r3
 8011b98:	4413      	add	r3, r2
 8011b9a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	b25b      	sxtb	r3, r3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	da15      	bge.n	8011bd2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011ba6:	7bfb      	ldrb	r3, [r7, #15]
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	211a      	movs	r1, #26
 8011bac:	fb01 f303 	mul.w	r3, r1, r3
 8011bb0:	4413      	add	r3, r2
 8011bb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011bb6:	781a      	ldrb	r2, [r3, #0]
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011bbc:	7bfb      	ldrb	r3, [r7, #15]
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	211a      	movs	r1, #26
 8011bc2:	fb01 f303 	mul.w	r3, r1, r3
 8011bc6:	4413      	add	r3, r2
 8011bc8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011bcc:	881a      	ldrh	r2, [r3, #0]
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	785b      	ldrb	r3, [r3, #1]
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f002 f90c 	bl	8013df6 <USBH_AllocPipe>
 8011bde:	4603      	mov	r3, r0
 8011be0:	461a      	mov	r2, r3
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	7819      	ldrb	r1, [r3, #0]
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	7858      	ldrb	r0, [r3, #1]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011bfa:	68ba      	ldr	r2, [r7, #8]
 8011bfc:	8952      	ldrh	r2, [r2, #10]
 8011bfe:	9202      	str	r2, [sp, #8]
 8011c00:	2203      	movs	r2, #3
 8011c02:	9201      	str	r2, [sp, #4]
 8011c04:	9300      	str	r3, [sp, #0]
 8011c06:	4623      	mov	r3, r4
 8011c08:	4602      	mov	r2, r0
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f002 f8c4 	bl	8013d98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	2200      	movs	r2, #0
 8011c16:	4619      	mov	r1, r3
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f007 ffb5 	bl	8019b88 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8011c1e:	2300      	movs	r3, #0
 8011c20:	2200      	movs	r2, #0
 8011c22:	210a      	movs	r1, #10
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f000 fc42 	bl	80124ae <USBH_FindInterface>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011c2e:	7bfb      	ldrb	r3, [r7, #15]
 8011c30:	2bff      	cmp	r3, #255	@ 0xff
 8011c32:	d002      	beq.n	8011c3a <USBH_CDC_InterfaceInit+0x11a>
 8011c34:	7bfb      	ldrb	r3, [r7, #15]
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d901      	bls.n	8011c3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	e0c2      	b.n	8011dc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011c3e:	7bfb      	ldrb	r3, [r7, #15]
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	211a      	movs	r1, #26
 8011c44:	fb01 f303 	mul.w	r3, r1, r3
 8011c48:	4413      	add	r3, r2
 8011c4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	b25b      	sxtb	r3, r3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	da16      	bge.n	8011c84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011c56:	7bfb      	ldrb	r3, [r7, #15]
 8011c58:	687a      	ldr	r2, [r7, #4]
 8011c5a:	211a      	movs	r1, #26
 8011c5c:	fb01 f303 	mul.w	r3, r1, r3
 8011c60:	4413      	add	r3, r2
 8011c62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c66:	781a      	ldrb	r2, [r3, #0]
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011c6c:	7bfb      	ldrb	r3, [r7, #15]
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	211a      	movs	r1, #26
 8011c72:	fb01 f303 	mul.w	r3, r1, r3
 8011c76:	4413      	add	r3, r2
 8011c78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011c7c:	881a      	ldrh	r2, [r3, #0]
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	835a      	strh	r2, [r3, #26]
 8011c82:	e015      	b.n	8011cb0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011c84:	7bfb      	ldrb	r3, [r7, #15]
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	211a      	movs	r1, #26
 8011c8a:	fb01 f303 	mul.w	r3, r1, r3
 8011c8e:	4413      	add	r3, r2
 8011c90:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c94:	781a      	ldrb	r2, [r3, #0]
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011c9a:	7bfb      	ldrb	r3, [r7, #15]
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	211a      	movs	r1, #26
 8011ca0:	fb01 f303 	mul.w	r3, r1, r3
 8011ca4:	4413      	add	r3, r2
 8011ca6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011caa:	881a      	ldrh	r2, [r3, #0]
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8011cb0:	7bfb      	ldrb	r3, [r7, #15]
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	211a      	movs	r1, #26
 8011cb6:	fb01 f303 	mul.w	r3, r1, r3
 8011cba:	4413      	add	r3, r2
 8011cbc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	b25b      	sxtb	r3, r3
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	da16      	bge.n	8011cf6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011cc8:	7bfb      	ldrb	r3, [r7, #15]
 8011cca:	687a      	ldr	r2, [r7, #4]
 8011ccc:	211a      	movs	r1, #26
 8011cce:	fb01 f303 	mul.w	r3, r1, r3
 8011cd2:	4413      	add	r3, r2
 8011cd4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011cd8:	781a      	ldrb	r2, [r3, #0]
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011cde:	7bfb      	ldrb	r3, [r7, #15]
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	211a      	movs	r1, #26
 8011ce4:	fb01 f303 	mul.w	r3, r1, r3
 8011ce8:	4413      	add	r3, r2
 8011cea:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011cee:	881a      	ldrh	r2, [r3, #0]
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	835a      	strh	r2, [r3, #26]
 8011cf4:	e015      	b.n	8011d22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011cf6:	7bfb      	ldrb	r3, [r7, #15]
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	211a      	movs	r1, #26
 8011cfc:	fb01 f303 	mul.w	r3, r1, r3
 8011d00:	4413      	add	r3, r2
 8011d02:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011d06:	781a      	ldrb	r2, [r3, #0]
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011d0c:	7bfb      	ldrb	r3, [r7, #15]
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	211a      	movs	r1, #26
 8011d12:	fb01 f303 	mul.w	r3, r1, r3
 8011d16:	4413      	add	r3, r2
 8011d18:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011d1c:	881a      	ldrh	r2, [r3, #0]
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	7b9b      	ldrb	r3, [r3, #14]
 8011d26:	4619      	mov	r1, r3
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f002 f864 	bl	8013df6 <USBH_AllocPipe>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	461a      	mov	r2, r3
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	7bdb      	ldrb	r3, [r3, #15]
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f002 f85a 	bl	8013df6 <USBH_AllocPipe>
 8011d42:	4603      	mov	r3, r0
 8011d44:	461a      	mov	r2, r3
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	7b59      	ldrb	r1, [r3, #13]
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	7b98      	ldrb	r0, [r3, #14]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	8b12      	ldrh	r2, [r2, #24]
 8011d62:	9202      	str	r2, [sp, #8]
 8011d64:	2202      	movs	r2, #2
 8011d66:	9201      	str	r2, [sp, #4]
 8011d68:	9300      	str	r3, [sp, #0]
 8011d6a:	4623      	mov	r3, r4
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f002 f812 	bl	8013d98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	7b19      	ldrb	r1, [r3, #12]
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	7bd8      	ldrb	r0, [r3, #15]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d88:	68ba      	ldr	r2, [r7, #8]
 8011d8a:	8b52      	ldrh	r2, [r2, #26]
 8011d8c:	9202      	str	r2, [sp, #8]
 8011d8e:	2202      	movs	r2, #2
 8011d90:	9201      	str	r2, [sp, #4]
 8011d92:	9300      	str	r3, [sp, #0]
 8011d94:	4623      	mov	r3, r4
 8011d96:	4602      	mov	r2, r0
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f001 fffd 	bl	8013d98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	2200      	movs	r2, #0
 8011da2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	7b5b      	ldrb	r3, [r3, #13]
 8011daa:	2200      	movs	r2, #0
 8011dac:	4619      	mov	r1, r3
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f007 feea 	bl	8019b88 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	7b1b      	ldrb	r3, [r3, #12]
 8011db8:	2200      	movs	r2, #0
 8011dba:	4619      	mov	r1, r3
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f007 fee3 	bl	8019b88 <USBH_LL_SetToggle>

  return USBH_OK;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3714      	adds	r7, #20
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd90      	pop	{r4, r7, pc}

08011dcc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011dda:	69db      	ldr	r3, [r3, #28]
 8011ddc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d00e      	beq.n	8011e04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	4619      	mov	r1, r3
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f001 fff2 	bl	8013dd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	4619      	mov	r1, r3
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f002 f81d 	bl	8013e38 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	2200      	movs	r2, #0
 8011e02:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	7b1b      	ldrb	r3, [r3, #12]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00e      	beq.n	8011e2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	7b1b      	ldrb	r3, [r3, #12]
 8011e10:	4619      	mov	r1, r3
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f001 ffdf 	bl	8013dd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	7b1b      	ldrb	r3, [r3, #12]
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f002 f80a 	bl	8013e38 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2200      	movs	r2, #0
 8011e28:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	7b5b      	ldrb	r3, [r3, #13]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00e      	beq.n	8011e50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	7b5b      	ldrb	r3, [r3, #13]
 8011e36:	4619      	mov	r1, r3
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f001 ffcc 	bl	8013dd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	7b5b      	ldrb	r3, [r3, #13]
 8011e42:	4619      	mov	r1, r3
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f001 fff7 	bl	8013e38 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e56:	69db      	ldr	r3, [r3, #28]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d00b      	beq.n	8011e74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e62:	69db      	ldr	r3, [r3, #28]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f007 ff1d 	bl	8019ca4 <free>
    phost->pActiveClass->pData = 0U;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e70:	2200      	movs	r2, #0
 8011e72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8011e74:	2300      	movs	r3, #0
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b084      	sub	sp, #16
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e8c:	69db      	ldr	r3, [r3, #28]
 8011e8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	3340      	adds	r3, #64	@ 0x40
 8011e94:	4619      	mov	r1, r3
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 f8b1 	bl	8011ffe <GetLineCoding>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8011ea0:	7afb      	ldrb	r3, [r7, #11]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d105      	bne.n	8011eb2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011eac:	2102      	movs	r1, #2
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8011eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3710      	adds	r7, #16
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011ed2:	69db      	ldr	r3, [r3, #28]
 8011ed4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8011edc:	2b04      	cmp	r3, #4
 8011ede:	d877      	bhi.n	8011fd0 <USBH_CDC_Process+0x114>
 8011ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8011ee8 <USBH_CDC_Process+0x2c>)
 8011ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ee6:	bf00      	nop
 8011ee8:	08011efd 	.word	0x08011efd
 8011eec:	08011f03 	.word	0x08011f03
 8011ef0:	08011f33 	.word	0x08011f33
 8011ef4:	08011fa7 	.word	0x08011fa7
 8011ef8:	08011fb5 	.word	0x08011fb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8011efc:	2300      	movs	r3, #0
 8011efe:	73fb      	strb	r3, [r7, #15]
      break;
 8011f00:	e06d      	b.n	8011fde <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f06:	4619      	mov	r1, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f000 f897 	bl	801203c <SetLineCoding>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011f12:	7bbb      	ldrb	r3, [r7, #14]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d104      	bne.n	8011f22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	2202      	movs	r2, #2
 8011f1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011f20:	e058      	b.n	8011fd4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8011f22:	7bbb      	ldrb	r3, [r7, #14]
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d055      	beq.n	8011fd4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	2204      	movs	r2, #4
 8011f2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011f30:	e050      	b.n	8011fd4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	3340      	adds	r3, #64	@ 0x40
 8011f36:	4619      	mov	r1, r3
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f000 f860 	bl	8011ffe <GetLineCoding>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011f42:	7bbb      	ldrb	r3, [r7, #14]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d126      	bne.n	8011f96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f5a:	791b      	ldrb	r3, [r3, #4]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d13b      	bne.n	8011fd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d133      	bne.n	8011fd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d12b      	bne.n	8011fd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d124      	bne.n	8011fd8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f000 f96a 	bl	8012268 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011f94:	e020      	b.n	8011fd8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8011f96:	7bbb      	ldrb	r3, [r7, #14]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d01d      	beq.n	8011fd8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	2204      	movs	r2, #4
 8011fa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011fa4:	e018      	b.n	8011fd8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 f867 	bl	801207a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f000 f8e6 	bl	801217e <CDC_ProcessReception>
      break;
 8011fb2:	e014      	b.n	8011fde <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8011fb4:	2100      	movs	r1, #0
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f001 f8ff 	bl	80131ba <USBH_ClrFeature>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011fc0:	7bbb      	ldrb	r3, [r7, #14]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d10a      	bne.n	8011fdc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8011fce:	e005      	b.n	8011fdc <USBH_CDC_Process+0x120>

    default:
      break;
 8011fd0:	bf00      	nop
 8011fd2:	e004      	b.n	8011fde <USBH_CDC_Process+0x122>
      break;
 8011fd4:	bf00      	nop
 8011fd6:	e002      	b.n	8011fde <USBH_CDC_Process+0x122>
      break;
 8011fd8:	bf00      	nop
 8011fda:	e000      	b.n	8011fde <USBH_CDC_Process+0x122>
      break;
 8011fdc:	bf00      	nop

  }

  return status;
 8011fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3710      	adds	r7, #16
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8011ff0:	2300      	movs	r3, #0
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr

08011ffe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8011ffe:	b580      	push	{r7, lr}
 8012000:	b082      	sub	sp, #8
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]
 8012006:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	22a1      	movs	r2, #161	@ 0xa1
 801200c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2221      	movs	r2, #33	@ 0x21
 8012012:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2200      	movs	r2, #0
 801201e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2207      	movs	r2, #7
 8012024:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	2207      	movs	r2, #7
 801202a:	4619      	mov	r1, r3
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f001 fbf9 	bl	8013824 <USBH_CtlReq>
 8012032:	4603      	mov	r3, r0
}
 8012034:	4618      	mov	r0, r3
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2221      	movs	r2, #33	@ 0x21
 801204a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2220      	movs	r2, #32
 8012050:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2200      	movs	r2, #0
 8012056:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2200      	movs	r2, #0
 801205c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2207      	movs	r2, #7
 8012062:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	2207      	movs	r2, #7
 8012068:	4619      	mov	r1, r3
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f001 fbda 	bl	8013824 <USBH_CtlReq>
 8012070:	4603      	mov	r3, r0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3708      	adds	r7, #8
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801207a:	b580      	push	{r7, lr}
 801207c:	b086      	sub	sp, #24
 801207e:	af02      	add	r7, sp, #8
 8012080:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012088:	69db      	ldr	r3, [r3, #28]
 801208a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801208c:	2300      	movs	r3, #0
 801208e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8012096:	2b01      	cmp	r3, #1
 8012098:	d002      	beq.n	80120a0 <CDC_ProcessTransmission+0x26>
 801209a:	2b02      	cmp	r3, #2
 801209c:	d023      	beq.n	80120e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 801209e:	e06a      	b.n	8012176 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	8b12      	ldrh	r2, [r2, #24]
 80120a8:	4293      	cmp	r3, r2
 80120aa:	d90b      	bls.n	80120c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	69d9      	ldr	r1, [r3, #28]
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	8b1a      	ldrh	r2, [r3, #24]
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	7b5b      	ldrb	r3, [r3, #13]
 80120b8:	2001      	movs	r0, #1
 80120ba:	9000      	str	r0, [sp, #0]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f001 fe28 	bl	8013d12 <USBH_BulkSendData>
 80120c2:	e00b      	b.n	80120dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	7b5b      	ldrb	r3, [r3, #13]
 80120d2:	2001      	movs	r0, #1
 80120d4:	9000      	str	r0, [sp, #0]
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f001 fe1b 	bl	8013d12 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2202      	movs	r2, #2
 80120e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80120e4:	e047      	b.n	8012176 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	7b5b      	ldrb	r3, [r3, #13]
 80120ea:	4619      	mov	r1, r3
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f007 fd21 	bl	8019b34 <USBH_LL_GetURBState>
 80120f2:	4603      	mov	r3, r0
 80120f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80120f6:	7afb      	ldrb	r3, [r7, #11]
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d12e      	bne.n	801215a <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012100:	68fa      	ldr	r2, [r7, #12]
 8012102:	8b12      	ldrh	r2, [r2, #24]
 8012104:	4293      	cmp	r3, r2
 8012106:	d90e      	bls.n	8012126 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	8b12      	ldrh	r2, [r2, #24]
 8012110:	1a9a      	subs	r2, r3, r2
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	69db      	ldr	r3, [r3, #28]
 801211a:	68fa      	ldr	r2, [r7, #12]
 801211c:	8b12      	ldrh	r2, [r2, #24]
 801211e:	441a      	add	r2, r3
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	61da      	str	r2, [r3, #28]
 8012124:	e002      	b.n	801212c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2200      	movs	r2, #0
 801212a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012130:	2b00      	cmp	r3, #0
 8012132:	d004      	beq.n	801213e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2201      	movs	r2, #1
 8012138:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 801213c:	e006      	b.n	801214c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2200      	movs	r2, #0
 8012142:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 f87a 	bl	8012240 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 801214c:	2300      	movs	r3, #0
 801214e:	2200      	movs	r2, #0
 8012150:	2104      	movs	r1, #4
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 febc 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8012158:	e00c      	b.n	8012174 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 801215a:	7afb      	ldrb	r3, [r7, #11]
 801215c:	2b02      	cmp	r3, #2
 801215e:	d109      	bne.n	8012174 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2201      	movs	r2, #1
 8012164:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012168:	2300      	movs	r3, #0
 801216a:	2200      	movs	r2, #0
 801216c:	2104      	movs	r1, #4
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f000 feae 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8012174:	bf00      	nop
  }
}
 8012176:	bf00      	nop
 8012178:	3710      	adds	r7, #16
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b086      	sub	sp, #24
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801218c:	69db      	ldr	r3, [r3, #28]
 801218e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012190:	2300      	movs	r3, #0
 8012192:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 801219a:	2b03      	cmp	r3, #3
 801219c:	d002      	beq.n	80121a4 <CDC_ProcessReception+0x26>
 801219e:	2b04      	cmp	r3, #4
 80121a0:	d00e      	beq.n	80121c0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80121a2:	e049      	b.n	8012238 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	6a19      	ldr	r1, [r3, #32]
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	8b5a      	ldrh	r2, [r3, #26]
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	7b1b      	ldrb	r3, [r3, #12]
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f001 fdd3 	bl	8013d5c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	2204      	movs	r2, #4
 80121ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80121be:	e03b      	b.n	8012238 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	7b1b      	ldrb	r3, [r3, #12]
 80121c4:	4619      	mov	r1, r3
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f007 fcb4 	bl	8019b34 <USBH_LL_GetURBState>
 80121cc:	4603      	mov	r3, r0
 80121ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80121d0:	7cfb      	ldrb	r3, [r7, #19]
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d12f      	bne.n	8012236 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	7b1b      	ldrb	r3, [r3, #12]
 80121da:	4619      	mov	r1, r3
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f007 fc17 	bl	8019a10 <USBH_LL_GetLastXferSize>
 80121e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d016      	beq.n	801221c <CDC_ProcessReception+0x9e>
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	8b5b      	ldrh	r3, [r3, #26]
 80121f2:	461a      	mov	r2, r3
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d110      	bne.n	801221c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	1ad2      	subs	r2, r2, r3
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	6a1a      	ldr	r2, [r3, #32]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	441a      	add	r2, r3
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	2203      	movs	r2, #3
 8012216:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 801221a:	e006      	b.n	801222a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	2200      	movs	r2, #0
 8012220:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f000 f815 	bl	8012254 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 801222a:	2300      	movs	r3, #0
 801222c:	2200      	movs	r2, #0
 801222e:	2104      	movs	r1, #4
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 fe4d 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8012236:	bf00      	nop
  }
}
 8012238:	bf00      	nop
 801223a:	3718      	adds	r7, #24
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012248:	bf00      	nop
 801224a:	370c      	adds	r7, #12
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801225c:	bf00      	nop
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012270:	bf00      	nop
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr

0801227c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 801227c:	b5b0      	push	{r4, r5, r7, lr}
 801227e:	b090      	sub	sp, #64	@ 0x40
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	4613      	mov	r3, r2
 8012288:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d101      	bne.n	8012294 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8012290:	2302      	movs	r3, #2
 8012292:	e04d      	b.n	8012330 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	79fa      	ldrb	r2, [r7, #7]
 8012298:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2200      	movs	r2, #0
 80122a0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2200      	movs	r2, #0
 80122a8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	f000 f847 	bl	8012340 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2200      	movs	r2, #0
 80122b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2200      	movs	r2, #0
 80122be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2200      	movs	r2, #0
 80122c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2200      	movs	r2, #0
 80122ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d003      	beq.n	80122e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	68ba      	ldr	r2, [r7, #8]
 80122dc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80122e0:	4b15      	ldr	r3, [pc, #84]	@ (8012338 <USBH_Init+0xbc>)
 80122e2:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80122e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80122e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80122ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80122f0:	2100      	movs	r1, #0
 80122f2:	4618      	mov	r0, r3
 80122f4:	f004 fb23 	bl	801693e <osMessageCreate>
 80122f8:	4602      	mov	r2, r0
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8012300:	4b0e      	ldr	r3, [pc, #56]	@ (801233c <USBH_Init+0xc0>)
 8012302:	f107 0414 	add.w	r4, r7, #20
 8012306:	461d      	mov	r5, r3
 8012308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801230a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801230c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8012314:	f107 0314 	add.w	r3, r7, #20
 8012318:	68f9      	ldr	r1, [r7, #12]
 801231a:	4618      	mov	r0, r3
 801231c:	f004 f9d8 	bl	80166d0 <osThreadCreate>
 8012320:	4602      	mov	r2, r0
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	f007 fabd 	bl	80198a8 <USBH_LL_Init>

  return USBH_OK;
 801232e:	2300      	movs	r3, #0
}
 8012330:	4618      	mov	r0, r3
 8012332:	3740      	adds	r7, #64	@ 0x40
 8012334:	46bd      	mov	sp, r7
 8012336:	bdb0      	pop	{r4, r5, r7, pc}
 8012338:	0801c534 	.word	0x0801c534
 801233c:	0801c550 	.word	0x0801c550

08012340 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012348:	2300      	movs	r3, #0
 801234a:	60fb      	str	r3, [r7, #12]
 801234c:	e009      	b.n	8012362 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	33e0      	adds	r3, #224	@ 0xe0
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	4413      	add	r3, r2
 8012358:	2200      	movs	r2, #0
 801235a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	3301      	adds	r3, #1
 8012360:	60fb      	str	r3, [r7, #12]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2b0f      	cmp	r3, #15
 8012366:	d9f2      	bls.n	801234e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012368:	2300      	movs	r3, #0
 801236a:	60fb      	str	r3, [r7, #12]
 801236c:	e009      	b.n	8012382 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	4413      	add	r3, r2
 8012374:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012378:	2200      	movs	r2, #0
 801237a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3301      	adds	r3, #1
 8012380:	60fb      	str	r3, [r7, #12]
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012388:	d3f1      	bcc.n	801236e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2200      	movs	r2, #0
 801238e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2201      	movs	r2, #1
 801239a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2201      	movs	r2, #1
 80123a8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2240      	movs	r2, #64	@ 0x40
 80123ae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2200      	movs	r2, #0
 80123b4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2200      	movs	r2, #0
 80123ba:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2201      	movs	r2, #1
 80123c2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2200      	movs	r2, #0
 80123ca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	331c      	adds	r3, #28
 80123da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80123de:	2100      	movs	r1, #0
 80123e0:	4618      	mov	r0, r3
 80123e2:	f007 fda9 	bl	8019f38 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80123ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123f0:	2100      	movs	r1, #0
 80123f2:	4618      	mov	r0, r3
 80123f4:	f007 fda0 	bl	8019f38 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80123fe:	2212      	movs	r2, #18
 8012400:	2100      	movs	r1, #0
 8012402:	4618      	mov	r0, r3
 8012404:	f007 fd98 	bl	8019f38 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801240e:	223e      	movs	r2, #62	@ 0x3e
 8012410:	2100      	movs	r1, #0
 8012412:	4618      	mov	r0, r3
 8012414:	f007 fd90 	bl	8019f38 <memset>

  return USBH_OK;
 8012418:	2300      	movs	r3, #0
}
 801241a:	4618      	mov	r0, r3
 801241c:	3710      	adds	r7, #16
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}

08012422 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8012422:	b480      	push	{r7}
 8012424:	b085      	sub	sp, #20
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801242c:	2300      	movs	r3, #0
 801242e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d016      	beq.n	8012464 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801243c:	2b00      	cmp	r3, #0
 801243e:	d10e      	bne.n	801245e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8012446:	1c59      	adds	r1, r3, #1
 8012448:	687a      	ldr	r2, [r7, #4]
 801244a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	33de      	adds	r3, #222	@ 0xde
 8012452:	6839      	ldr	r1, [r7, #0]
 8012454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8012458:	2300      	movs	r3, #0
 801245a:	73fb      	strb	r3, [r7, #15]
 801245c:	e004      	b.n	8012468 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801245e:	2302      	movs	r3, #2
 8012460:	73fb      	strb	r3, [r7, #15]
 8012462:	e001      	b.n	8012468 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8012464:	2302      	movs	r3, #2
 8012466:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012468:	7bfb      	ldrb	r3, [r7, #15]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3714      	adds	r7, #20
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr

08012476 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8012476:	b480      	push	{r7}
 8012478:	b085      	sub	sp, #20
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
 801247e:	460b      	mov	r3, r1
 8012480:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8012482:	2300      	movs	r3, #0
 8012484:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 801248c:	78fa      	ldrb	r2, [r7, #3]
 801248e:	429a      	cmp	r2, r3
 8012490:	d204      	bcs.n	801249c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	78fa      	ldrb	r2, [r7, #3]
 8012496:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 801249a:	e001      	b.n	80124a0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801249c:	2302      	movs	r3, #2
 801249e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80124a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3714      	adds	r7, #20
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr

080124ae <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80124ae:	b480      	push	{r7}
 80124b0:	b087      	sub	sp, #28
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
 80124b6:	4608      	mov	r0, r1
 80124b8:	4611      	mov	r1, r2
 80124ba:	461a      	mov	r2, r3
 80124bc:	4603      	mov	r3, r0
 80124be:	70fb      	strb	r3, [r7, #3]
 80124c0:	460b      	mov	r3, r1
 80124c2:	70bb      	strb	r3, [r7, #2]
 80124c4:	4613      	mov	r3, r2
 80124c6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80124c8:	2300      	movs	r3, #0
 80124ca:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80124cc:	2300      	movs	r3, #0
 80124ce:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80124d6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80124d8:	e025      	b.n	8012526 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80124da:	7dfb      	ldrb	r3, [r7, #23]
 80124dc:	221a      	movs	r2, #26
 80124de:	fb02 f303 	mul.w	r3, r2, r3
 80124e2:	3308      	adds	r3, #8
 80124e4:	68fa      	ldr	r2, [r7, #12]
 80124e6:	4413      	add	r3, r2
 80124e8:	3302      	adds	r3, #2
 80124ea:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	795b      	ldrb	r3, [r3, #5]
 80124f0:	78fa      	ldrb	r2, [r7, #3]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d002      	beq.n	80124fc <USBH_FindInterface+0x4e>
 80124f6:	78fb      	ldrb	r3, [r7, #3]
 80124f8:	2bff      	cmp	r3, #255	@ 0xff
 80124fa:	d111      	bne.n	8012520 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012500:	78ba      	ldrb	r2, [r7, #2]
 8012502:	429a      	cmp	r2, r3
 8012504:	d002      	beq.n	801250c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012506:	78bb      	ldrb	r3, [r7, #2]
 8012508:	2bff      	cmp	r3, #255	@ 0xff
 801250a:	d109      	bne.n	8012520 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012510:	787a      	ldrb	r2, [r7, #1]
 8012512:	429a      	cmp	r2, r3
 8012514:	d002      	beq.n	801251c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012516:	787b      	ldrb	r3, [r7, #1]
 8012518:	2bff      	cmp	r3, #255	@ 0xff
 801251a:	d101      	bne.n	8012520 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801251c:	7dfb      	ldrb	r3, [r7, #23]
 801251e:	e006      	b.n	801252e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012520:	7dfb      	ldrb	r3, [r7, #23]
 8012522:	3301      	adds	r3, #1
 8012524:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012526:	7dfb      	ldrb	r3, [r7, #23]
 8012528:	2b01      	cmp	r3, #1
 801252a:	d9d6      	bls.n	80124da <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801252c:	23ff      	movs	r3, #255	@ 0xff
}
 801252e:	4618      	mov	r0, r3
 8012530:	371c      	adds	r7, #28
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr

0801253a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 801253a:	b580      	push	{r7, lr}
 801253c:	b082      	sub	sp, #8
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f007 f9ec 	bl	8019920 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8012548:	2101      	movs	r1, #1
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f007 fb05 	bl	8019b5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012550:	2300      	movs	r3, #0
}
 8012552:	4618      	mov	r0, r3
 8012554:	3708      	adds	r7, #8
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
	...

0801255c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b088      	sub	sp, #32
 8012560:	af04      	add	r7, sp, #16
 8012562:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8012564:	2302      	movs	r3, #2
 8012566:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8012568:	2300      	movs	r3, #0
 801256a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8012572:	b2db      	uxtb	r3, r3
 8012574:	2b01      	cmp	r3, #1
 8012576:	d102      	bne.n	801257e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2203      	movs	r2, #3
 801257c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	b2db      	uxtb	r3, r3
 8012584:	2b0b      	cmp	r3, #11
 8012586:	f200 81f5 	bhi.w	8012974 <USBH_Process+0x418>
 801258a:	a201      	add	r2, pc, #4	@ (adr r2, 8012590 <USBH_Process+0x34>)
 801258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012590:	080125c1 	.word	0x080125c1
 8012594:	080125ff 	.word	0x080125ff
 8012598:	08012675 	.word	0x08012675
 801259c:	08012903 	.word	0x08012903
 80125a0:	08012975 	.word	0x08012975
 80125a4:	08012721 	.word	0x08012721
 80125a8:	0801289d 	.word	0x0801289d
 80125ac:	08012763 	.word	0x08012763
 80125b0:	0801278f 	.word	0x0801278f
 80125b4:	080127b7 	.word	0x080127b7
 80125b8:	08012805 	.word	0x08012805
 80125bc:	080128eb 	.word	0x080128eb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f000 81d5 	beq.w	8012978 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2201      	movs	r2, #1
 80125d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80125d4:	20c8      	movs	r0, #200	@ 0xc8
 80125d6:	f007 fb0a 	bl	8019bee <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f007 f9fd 	bl	80199da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2200      	movs	r2, #0
 80125ec:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80125f0:	2300      	movs	r3, #0
 80125f2:	2200      	movs	r2, #0
 80125f4:	2101      	movs	r1, #1
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 fc6a 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80125fc:	e1bc      	b.n	8012978 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8012604:	b2db      	uxtb	r3, r3
 8012606:	2b01      	cmp	r3, #1
 8012608:	d107      	bne.n	801261a <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2200      	movs	r2, #0
 801260e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2202      	movs	r2, #2
 8012616:	701a      	strb	r2, [r3, #0]
 8012618:	e025      	b.n	8012666 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012624:	d914      	bls.n	8012650 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 801262c:	3301      	adds	r3, #1
 801262e:	b2da      	uxtb	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 801263c:	2b03      	cmp	r3, #3
 801263e:	d903      	bls.n	8012648 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	220d      	movs	r2, #13
 8012644:	701a      	strb	r2, [r3, #0]
 8012646:	e00e      	b.n	8012666 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2200      	movs	r2, #0
 801264c:	701a      	strb	r2, [r3, #0]
 801264e:	e00a      	b.n	8012666 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012656:	f103 020a 	add.w	r2, r3, #10
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8012660:	200a      	movs	r0, #10
 8012662:	f007 fac4 	bl	8019bee <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012666:	2300      	movs	r3, #0
 8012668:	2200      	movs	r2, #0
 801266a:	2101      	movs	r1, #1
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f000 fc2f 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012672:	e188      	b.n	8012986 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801267a:	2b00      	cmp	r3, #0
 801267c:	d005      	beq.n	801268a <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012684:	2104      	movs	r1, #4
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 801268a:	2064      	movs	r0, #100	@ 0x64
 801268c:	f007 faaf 	bl	8019bee <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f007 f97b 	bl	801998c <USBH_LL_GetSpeed>
 8012696:	4603      	mov	r3, r0
 8012698:	461a      	mov	r2, r3
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2205      	movs	r2, #5
 80126a4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80126a6:	2100      	movs	r1, #0
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f001 fba4 	bl	8013df6 <USBH_AllocPipe>
 80126ae:	4603      	mov	r3, r0
 80126b0:	461a      	mov	r2, r3
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80126b6:	2180      	movs	r1, #128	@ 0x80
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f001 fb9c 	bl	8013df6 <USBH_AllocPipe>
 80126be:	4603      	mov	r3, r0
 80126c0:	461a      	mov	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	7919      	ldrb	r1, [r3, #4]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80126da:	9202      	str	r2, [sp, #8]
 80126dc:	2200      	movs	r2, #0
 80126de:	9201      	str	r2, [sp, #4]
 80126e0:	9300      	str	r3, [sp, #0]
 80126e2:	4603      	mov	r3, r0
 80126e4:	2280      	movs	r2, #128	@ 0x80
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f001 fb56 	bl	8013d98 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	7959      	ldrb	r1, [r3, #5]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012700:	9202      	str	r2, [sp, #8]
 8012702:	2200      	movs	r2, #0
 8012704:	9201      	str	r2, [sp, #4]
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	4603      	mov	r3, r0
 801270a:	2200      	movs	r2, #0
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f001 fb43 	bl	8013d98 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012712:	2300      	movs	r3, #0
 8012714:	2200      	movs	r2, #0
 8012716:	2101      	movs	r1, #1
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fbd9 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801271e:	e132      	b.n	8012986 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 f935 	bl	8012990 <USBH_HandleEnum>
 8012726:	4603      	mov	r3, r0
 8012728:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801272a:	7bbb      	ldrb	r3, [r7, #14]
 801272c:	b2db      	uxtb	r3, r3
 801272e:	2b00      	cmp	r3, #0
 8012730:	f040 8124 	bne.w	801297c <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2200      	movs	r2, #0
 8012738:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8012742:	2b01      	cmp	r3, #1
 8012744:	d103      	bne.n	801274e <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2208      	movs	r2, #8
 801274a:	701a      	strb	r2, [r3, #0]
 801274c:	e002      	b.n	8012754 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2207      	movs	r2, #7
 8012752:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012754:	2300      	movs	r3, #0
 8012756:	2200      	movs	r2, #0
 8012758:	2105      	movs	r1, #5
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 fbb8 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012760:	e10c      	b.n	801297c <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012768:	2b00      	cmp	r3, #0
 801276a:	f000 8109 	beq.w	8012980 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012774:	2101      	movs	r1, #1
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2208      	movs	r2, #8
 801277e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012780:	2300      	movs	r3, #0
 8012782:	2200      	movs	r2, #0
 8012784:	2105      	movs	r1, #5
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f000 fba2 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 801278c:	e0f8      	b.n	8012980 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8012794:	4619      	mov	r1, r3
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 fcc8 	bl	801312c <USBH_SetCfg>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d102      	bne.n	80127a8 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2209      	movs	r2, #9
 80127a6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80127a8:	2300      	movs	r3, #0
 80127aa:	2200      	movs	r2, #0
 80127ac:	2101      	movs	r1, #1
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f000 fb8e 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80127b4:	e0e7      	b.n	8012986 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80127bc:	f003 0320 	and.w	r3, r3, #32
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d015      	beq.n	80127f0 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80127c4:	2101      	movs	r1, #1
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f000 fcd3 	bl	8013172 <USBH_SetFeature>
 80127cc:	4603      	mov	r3, r0
 80127ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80127d0:	7bbb      	ldrb	r3, [r7, #14]
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d103      	bne.n	80127e0 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	220a      	movs	r2, #10
 80127dc:	701a      	strb	r2, [r3, #0]
 80127de:	e00a      	b.n	80127f6 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80127e0:	7bbb      	ldrb	r3, [r7, #14]
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	2b03      	cmp	r3, #3
 80127e6:	d106      	bne.n	80127f6 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	220a      	movs	r2, #10
 80127ec:	701a      	strb	r2, [r3, #0]
 80127ee:	e002      	b.n	80127f6 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	220a      	movs	r2, #10
 80127f4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80127f6:	2300      	movs	r3, #0
 80127f8:	2200      	movs	r2, #0
 80127fa:	2101      	movs	r1, #1
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 fb67 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012802:	e0c0      	b.n	8012986 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801280a:	2b00      	cmp	r3, #0
 801280c:	d03f      	beq.n	801288e <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2200      	movs	r2, #0
 8012812:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012816:	2300      	movs	r3, #0
 8012818:	73fb      	strb	r3, [r7, #15]
 801281a:	e016      	b.n	801284a <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801281c:	7bfa      	ldrb	r2, [r7, #15]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	32de      	adds	r2, #222	@ 0xde
 8012822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012826:	791a      	ldrb	r2, [r3, #4]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 801282e:	429a      	cmp	r2, r3
 8012830:	d108      	bne.n	8012844 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8012832:	7bfa      	ldrb	r2, [r7, #15]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	32de      	adds	r2, #222	@ 0xde
 8012838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8012842:	e005      	b.n	8012850 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012844:	7bfb      	ldrb	r3, [r7, #15]
 8012846:	3301      	adds	r3, #1
 8012848:	73fb      	strb	r3, [r7, #15]
 801284a:	7bfb      	ldrb	r3, [r7, #15]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d0e5      	beq.n	801281c <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012856:	2b00      	cmp	r3, #0
 8012858:	d016      	beq.n	8012888 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012860:	689b      	ldr	r3, [r3, #8]
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	4798      	blx	r3
 8012866:	4603      	mov	r3, r0
 8012868:	2b00      	cmp	r3, #0
 801286a:	d109      	bne.n	8012880 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2206      	movs	r2, #6
 8012870:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012878:	2103      	movs	r1, #3
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	4798      	blx	r3
 801287e:	e006      	b.n	801288e <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	220d      	movs	r2, #13
 8012884:	701a      	strb	r2, [r3, #0]
 8012886:	e002      	b.n	801288e <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	220d      	movs	r2, #13
 801288c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801288e:	2300      	movs	r3, #0
 8012890:	2200      	movs	r2, #0
 8012892:	2105      	movs	r1, #5
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f000 fb1b 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801289a:	e074      	b.n	8012986 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d017      	beq.n	80128d6 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128ac:	691b      	ldr	r3, [r3, #16]
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	4798      	blx	r3
 80128b2:	4603      	mov	r3, r0
 80128b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80128b6:	7bbb      	ldrb	r3, [r7, #14]
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d103      	bne.n	80128c6 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	220b      	movs	r2, #11
 80128c2:	701a      	strb	r2, [r3, #0]
 80128c4:	e00a      	b.n	80128dc <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 80128c6:	7bbb      	ldrb	r3, [r7, #14]
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	2b02      	cmp	r3, #2
 80128cc:	d106      	bne.n	80128dc <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	220d      	movs	r2, #13
 80128d2:	701a      	strb	r2, [r3, #0]
 80128d4:	e002      	b.n	80128dc <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	220d      	movs	r2, #13
 80128da:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80128dc:	2300      	movs	r3, #0
 80128de:	2200      	movs	r2, #0
 80128e0:	2105      	movs	r1, #5
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f000 faf4 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80128e8:	e04d      	b.n	8012986 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d047      	beq.n	8012984 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128fa:	695b      	ldr	r3, [r3, #20]
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	4798      	blx	r3
      }
      break;
 8012900:	e040      	b.n	8012984 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2200      	movs	r2, #0
 8012906:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7ff fd18 	bl	8012340 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012916:	2b00      	cmp	r3, #0
 8012918:	d009      	beq.n	801292e <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012920:	68db      	ldr	r3, [r3, #12]
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2200      	movs	r2, #0
 801292a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012934:	2b00      	cmp	r3, #0
 8012936:	d005      	beq.n	8012944 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801293e:	2105      	movs	r1, #5
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 801294a:	b2db      	uxtb	r3, r3
 801294c:	2b01      	cmp	r3, #1
 801294e:	d107      	bne.n	8012960 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2200      	movs	r2, #0
 8012954:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f7ff fdee 	bl	801253a <USBH_Start>
 801295e:	e002      	b.n	8012966 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f006 ffdd 	bl	8019920 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012966:	2300      	movs	r3, #0
 8012968:	2200      	movs	r2, #0
 801296a:	2101      	movs	r1, #1
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f000 faaf 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012972:	e008      	b.n	8012986 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 8012974:	bf00      	nop
 8012976:	e006      	b.n	8012986 <USBH_Process+0x42a>
      break;
 8012978:	bf00      	nop
 801297a:	e004      	b.n	8012986 <USBH_Process+0x42a>
      break;
 801297c:	bf00      	nop
 801297e:	e002      	b.n	8012986 <USBH_Process+0x42a>
    break;
 8012980:	bf00      	nop
 8012982:	e000      	b.n	8012986 <USBH_Process+0x42a>
      break;
 8012984:	bf00      	nop
  }
  return USBH_OK;
 8012986:	2300      	movs	r3, #0
}
 8012988:	4618      	mov	r0, r3
 801298a:	3710      	adds	r7, #16
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b088      	sub	sp, #32
 8012994:	af04      	add	r7, sp, #16
 8012996:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8012998:	2301      	movs	r3, #1
 801299a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 801299c:	2301      	movs	r3, #1
 801299e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	785b      	ldrb	r3, [r3, #1]
 80129a4:	2b07      	cmp	r3, #7
 80129a6:	f200 81db 	bhi.w	8012d60 <USBH_HandleEnum+0x3d0>
 80129aa:	a201      	add	r2, pc, #4	@ (adr r2, 80129b0 <USBH_HandleEnum+0x20>)
 80129ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129b0:	080129d1 	.word	0x080129d1
 80129b4:	08012a8b 	.word	0x08012a8b
 80129b8:	08012af5 	.word	0x08012af5
 80129bc:	08012b7f 	.word	0x08012b7f
 80129c0:	08012be9 	.word	0x08012be9
 80129c4:	08012c59 	.word	0x08012c59
 80129c8:	08012cc3 	.word	0x08012cc3
 80129cc:	08012d21 	.word	0x08012d21
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80129d0:	2108      	movs	r1, #8
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f000 fac7 	bl	8012f66 <USBH_Get_DevDesc>
 80129d8:	4603      	mov	r3, r0
 80129da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80129dc:	7bbb      	ldrb	r3, [r7, #14]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d12e      	bne.n	8012a40 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2201      	movs	r2, #1
 80129f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	7919      	ldrb	r1, [r3, #4]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012a06:	9202      	str	r2, [sp, #8]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	9201      	str	r2, [sp, #4]
 8012a0c:	9300      	str	r3, [sp, #0]
 8012a0e:	4603      	mov	r3, r0
 8012a10:	2280      	movs	r2, #128	@ 0x80
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f001 f9c0 	bl	8013d98 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	7959      	ldrb	r1, [r3, #5]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012a28:	687a      	ldr	r2, [r7, #4]
 8012a2a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012a2c:	9202      	str	r2, [sp, #8]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	9201      	str	r2, [sp, #4]
 8012a32:	9300      	str	r3, [sp, #0]
 8012a34:	4603      	mov	r3, r0
 8012a36:	2200      	movs	r2, #0
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f001 f9ad 	bl	8013d98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012a3e:	e191      	b.n	8012d64 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012a40:	7bbb      	ldrb	r3, [r7, #14]
 8012a42:	2b03      	cmp	r3, #3
 8012a44:	f040 818e 	bne.w	8012d64 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a4e:	3301      	adds	r3, #1
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a5e:	2b03      	cmp	r3, #3
 8012a60:	d903      	bls.n	8012a6a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	220d      	movs	r2, #13
 8012a66:	701a      	strb	r2, [r3, #0]
      break;
 8012a68:	e17c      	b.n	8012d64 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	795b      	ldrb	r3, [r3, #5]
 8012a6e:	4619      	mov	r1, r3
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f001 f9e1 	bl	8013e38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	791b      	ldrb	r3, [r3, #4]
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f001 f9db 	bl	8013e38 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2200      	movs	r2, #0
 8012a86:	701a      	strb	r2, [r3, #0]
      break;
 8012a88:	e16c      	b.n	8012d64 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8012a8a:	2112      	movs	r1, #18
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f000 fa6a 	bl	8012f66 <USBH_Get_DevDesc>
 8012a92:	4603      	mov	r3, r0
 8012a94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012a96:	7bbb      	ldrb	r3, [r7, #14]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d103      	bne.n	8012aa4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2202      	movs	r2, #2
 8012aa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012aa2:	e161      	b.n	8012d68 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012aa4:	7bbb      	ldrb	r3, [r7, #14]
 8012aa6:	2b03      	cmp	r3, #3
 8012aa8:	f040 815e 	bne.w	8012d68 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	b2da      	uxtb	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012ac2:	2b03      	cmp	r3, #3
 8012ac4:	d903      	bls.n	8012ace <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	220d      	movs	r2, #13
 8012aca:	701a      	strb	r2, [r3, #0]
      break;
 8012acc:	e14c      	b.n	8012d68 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	795b      	ldrb	r3, [r3, #5]
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f001 f9af 	bl	8013e38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	791b      	ldrb	r3, [r3, #4]
 8012ade:	4619      	mov	r1, r3
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f001 f9a9 	bl	8013e38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2200      	movs	r2, #0
 8012af0:	701a      	strb	r2, [r3, #0]
      break;
 8012af2:	e139      	b.n	8012d68 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8012af4:	2101      	movs	r1, #1
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 faf4 	bl	80130e4 <USBH_SetAddress>
 8012afc:	4603      	mov	r3, r0
 8012afe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012b00:	7bbb      	ldrb	r3, [r7, #14]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d130      	bne.n	8012b68 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8012b06:	2002      	movs	r0, #2
 8012b08:	f007 f871 	bl	8019bee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2201      	movs	r2, #1
 8012b10:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2203      	movs	r2, #3
 8012b18:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	7919      	ldrb	r1, [r3, #4]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012b2e:	9202      	str	r2, [sp, #8]
 8012b30:	2200      	movs	r2, #0
 8012b32:	9201      	str	r2, [sp, #4]
 8012b34:	9300      	str	r3, [sp, #0]
 8012b36:	4603      	mov	r3, r0
 8012b38:	2280      	movs	r2, #128	@ 0x80
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f001 f92c 	bl	8013d98 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	7959      	ldrb	r1, [r3, #5]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012b50:	687a      	ldr	r2, [r7, #4]
 8012b52:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012b54:	9202      	str	r2, [sp, #8]
 8012b56:	2200      	movs	r2, #0
 8012b58:	9201      	str	r2, [sp, #4]
 8012b5a:	9300      	str	r3, [sp, #0]
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	2200      	movs	r2, #0
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f001 f919 	bl	8013d98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012b66:	e101      	b.n	8012d6c <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012b68:	7bbb      	ldrb	r3, [r7, #14]
 8012b6a:	2b03      	cmp	r3, #3
 8012b6c:	f040 80fe 	bne.w	8012d6c <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	220d      	movs	r2, #13
 8012b74:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	705a      	strb	r2, [r3, #1]
      break;
 8012b7c:	e0f6      	b.n	8012d6c <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8012b7e:	2109      	movs	r1, #9
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f000 fa1c 	bl	8012fbe <USBH_Get_CfgDesc>
 8012b86:	4603      	mov	r3, r0
 8012b88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012b8a:	7bbb      	ldrb	r3, [r7, #14]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d103      	bne.n	8012b98 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2204      	movs	r2, #4
 8012b94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012b96:	e0eb      	b.n	8012d70 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012b98:	7bbb      	ldrb	r3, [r7, #14]
 8012b9a:	2b03      	cmp	r3, #3
 8012b9c:	f040 80e8 	bne.w	8012d70 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	b2da      	uxtb	r2, r3
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012bb6:	2b03      	cmp	r3, #3
 8012bb8:	d903      	bls.n	8012bc2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	220d      	movs	r2, #13
 8012bbe:	701a      	strb	r2, [r3, #0]
      break;
 8012bc0:	e0d6      	b.n	8012d70 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	795b      	ldrb	r3, [r3, #5]
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f001 f935 	bl	8013e38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	791b      	ldrb	r3, [r3, #4]
 8012bd2:	4619      	mov	r1, r3
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f001 f92f 	bl	8013e38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	701a      	strb	r2, [r3, #0]
      break;
 8012be6:	e0c3      	b.n	8012d70 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8012bee:	4619      	mov	r1, r3
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f000 f9e4 	bl	8012fbe <USBH_Get_CfgDesc>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012bfa:	7bbb      	ldrb	r3, [r7, #14]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d103      	bne.n	8012c08 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2205      	movs	r2, #5
 8012c04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012c06:	e0b5      	b.n	8012d74 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012c08:	7bbb      	ldrb	r3, [r7, #14]
 8012c0a:	2b03      	cmp	r3, #3
 8012c0c:	f040 80b2 	bne.w	8012d74 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012c16:	3301      	adds	r3, #1
 8012c18:	b2da      	uxtb	r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012c26:	2b03      	cmp	r3, #3
 8012c28:	d903      	bls.n	8012c32 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	220d      	movs	r2, #13
 8012c2e:	701a      	strb	r2, [r3, #0]
      break;
 8012c30:	e0a0      	b.n	8012d74 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	795b      	ldrb	r3, [r3, #5]
 8012c36:	4619      	mov	r1, r3
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f001 f8fd 	bl	8013e38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	791b      	ldrb	r3, [r3, #4]
 8012c42:	4619      	mov	r1, r3
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f001 f8f7 	bl	8013e38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2200      	movs	r2, #0
 8012c54:	701a      	strb	r2, [r3, #0]
      break;
 8012c56:	e08d      	b.n	8012d74 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d025      	beq.n	8012cae <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012c6e:	23ff      	movs	r3, #255	@ 0xff
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f000 f9ce 	bl	8013012 <USBH_Get_StringDesc>
 8012c76:	4603      	mov	r3, r0
 8012c78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012c7a:	7bbb      	ldrb	r3, [r7, #14]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d109      	bne.n	8012c94 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2206      	movs	r2, #6
 8012c84:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012c86:	2300      	movs	r3, #0
 8012c88:	2200      	movs	r2, #0
 8012c8a:	2105      	movs	r1, #5
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f000 f91f 	bl	8012ed0 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012c92:	e071      	b.n	8012d78 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012c94:	7bbb      	ldrb	r3, [r7, #14]
 8012c96:	2b03      	cmp	r3, #3
 8012c98:	d16e      	bne.n	8012d78 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2206      	movs	r2, #6
 8012c9e:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	2105      	movs	r1, #5
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f000 f912 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8012cac:	e064      	b.n	8012d78 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2206      	movs	r2, #6
 8012cb2:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	2105      	movs	r1, #5
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f000 f908 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8012cc0:	e05a      	b.n	8012d78 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d01f      	beq.n	8012d0c <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012cd8:	23ff      	movs	r3, #255	@ 0xff
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 f999 	bl	8013012 <USBH_Get_StringDesc>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012ce4:	7bbb      	ldrb	r3, [r7, #14]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d103      	bne.n	8012cf2 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2207      	movs	r2, #7
 8012cee:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012cf0:	e044      	b.n	8012d7c <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012cf2:	7bbb      	ldrb	r3, [r7, #14]
 8012cf4:	2b03      	cmp	r3, #3
 8012cf6:	d141      	bne.n	8012d7c <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2207      	movs	r2, #7
 8012cfc:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cfe:	2300      	movs	r3, #0
 8012d00:	2200      	movs	r2, #0
 8012d02:	2105      	movs	r1, #5
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 f8e3 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8012d0a:	e037      	b.n	8012d7c <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2207      	movs	r2, #7
 8012d10:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012d12:	2300      	movs	r3, #0
 8012d14:	2200      	movs	r2, #0
 8012d16:	2105      	movs	r1, #5
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f000 f8d9 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8012d1e:	e02d      	b.n	8012d7c <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d017      	beq.n	8012d5a <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012d36:	23ff      	movs	r3, #255	@ 0xff
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 f96a 	bl	8013012 <USBH_Get_StringDesc>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012d42:	7bbb      	ldrb	r3, [r7, #14]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d102      	bne.n	8012d4e <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8012d4c:	e018      	b.n	8012d80 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012d4e:	7bbb      	ldrb	r3, [r7, #14]
 8012d50:	2b03      	cmp	r3, #3
 8012d52:	d115      	bne.n	8012d80 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8012d54:	2300      	movs	r3, #0
 8012d56:	73fb      	strb	r3, [r7, #15]
      break;
 8012d58:	e012      	b.n	8012d80 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d5e:	e00f      	b.n	8012d80 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8012d60:	bf00      	nop
 8012d62:	e00e      	b.n	8012d82 <USBH_HandleEnum+0x3f2>
      break;
 8012d64:	bf00      	nop
 8012d66:	e00c      	b.n	8012d82 <USBH_HandleEnum+0x3f2>
      break;
 8012d68:	bf00      	nop
 8012d6a:	e00a      	b.n	8012d82 <USBH_HandleEnum+0x3f2>
      break;
 8012d6c:	bf00      	nop
 8012d6e:	e008      	b.n	8012d82 <USBH_HandleEnum+0x3f2>
      break;
 8012d70:	bf00      	nop
 8012d72:	e006      	b.n	8012d82 <USBH_HandleEnum+0x3f2>
      break;
 8012d74:	bf00      	nop
 8012d76:	e004      	b.n	8012d82 <USBH_HandleEnum+0x3f2>
      break;
 8012d78:	bf00      	nop
 8012d7a:	e002      	b.n	8012d82 <USBH_HandleEnum+0x3f2>
      break;
 8012d7c:	bf00      	nop
 8012d7e:	e000      	b.n	8012d82 <USBH_HandleEnum+0x3f2>
      break;
 8012d80:	bf00      	nop
  }
  return Status;
 8012d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3710      	adds	r7, #16
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	683a      	ldr	r2, [r7, #0]
 8012d9a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8012d9e:	bf00      	nop
 8012da0:	370c      	adds	r7, #12
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr

08012daa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012daa:	b580      	push	{r7, lr}
 8012dac:	b082      	sub	sp, #8
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012db8:	1c5a      	adds	r2, r3, #1
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f000 f804 	bl	8012dce <USBH_HandleSof>
}
 8012dc6:	bf00      	nop
 8012dc8:	3708      	adds	r7, #8
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}

08012dce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012dce:	b580      	push	{r7, lr}
 8012dd0:	b082      	sub	sp, #8
 8012dd2:	af00      	add	r7, sp, #0
 8012dd4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	2b0b      	cmp	r3, #11
 8012dde:	d10a      	bne.n	8012df6 <USBH_HandleSof+0x28>
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d005      	beq.n	8012df6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012df0:	699b      	ldr	r3, [r3, #24]
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	4798      	blx	r3
  }
}
 8012df6:	bf00      	nop
 8012df8:	3708      	adds	r7, #8
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b082      	sub	sp, #8
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2201      	movs	r2, #1
 8012e0a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012e0e:	2300      	movs	r3, #0
 8012e10:	2200      	movs	r2, #0
 8012e12:	2101      	movs	r1, #1
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f000 f85b 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012e1a:	bf00      	nop
}
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012e22:	b480      	push	{r7}
 8012e24:	b083      	sub	sp, #12
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2201      	movs	r2, #1
 8012e36:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012e3a:	bf00      	nop
}
 8012e3c:	370c      	adds	r7, #12
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr

08012e46 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b082      	sub	sp, #8
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2201      	movs	r2, #1
 8012e52:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2200      	movs	r2, #0
 8012e62:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012e66:	2300      	movs	r3, #0
 8012e68:	2200      	movs	r2, #0
 8012e6a:	2101      	movs	r1, #1
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f000 f82f 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012e72:	2300      	movs	r3, #0
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2201      	movs	r2, #1
 8012e88:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2200      	movs	r2, #0
 8012e98:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f006 fd5a 	bl	8019956 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	791b      	ldrb	r3, [r3, #4]
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f000 ffc5 	bl	8013e38 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	795b      	ldrb	r3, [r3, #5]
 8012eb2:	4619      	mov	r1, r3
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 ffbf 	bl	8013e38 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012eba:	2300      	movs	r3, #0
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	2101      	movs	r1, #1
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f000 f805 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012ec6:	2300      	movs	r3, #0
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b086      	sub	sp, #24
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	607a      	str	r2, [r7, #4]
 8012eda:	603b      	str	r3, [r7, #0]
 8012edc:	460b      	mov	r3, r1
 8012ede:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8012ee0:	7afa      	ldrb	r2, [r7, #11]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f003 fe02 	bl	8016af8 <osMessageWaiting>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	f1c3 0310 	rsb	r3, r3, #16
 8012efa:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d009      	beq.n	8012f16 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	4619      	mov	r1, r3
 8012f12:	f003 fd3d 	bl	8016990 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012f16:	bf00      	nop
 8012f18:	3718      	adds	r7, #24
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b086      	sub	sp, #24
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8012f2c:	f107 030c 	add.w	r3, r7, #12
 8012f30:	f04f 32ff 	mov.w	r2, #4294967295
 8012f34:	4618      	mov	r0, r3
 8012f36:	f003 fd6b 	bl	8016a10 <osMessageGet>
    if (event.status == osEventMessage)
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	2b10      	cmp	r3, #16
 8012f3e:	d1f2      	bne.n	8012f26 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f7ff fb0b 	bl	801255c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012f46:	e7ee      	b.n	8012f26 <USBH_Process_OS+0x8>

08012f48 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012f50:	2300      	movs	r3, #0
 8012f52:	2200      	movs	r2, #0
 8012f54:	2101      	movs	r1, #1
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f7ff ffba 	bl	8012ed0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012f5c:	2300      	movs	r3, #0
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3708      	adds	r7, #8
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b086      	sub	sp, #24
 8012f6a:	af02      	add	r7, sp, #8
 8012f6c:	6078      	str	r0, [r7, #4]
 8012f6e:	460b      	mov	r3, r1
 8012f70:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8012f72:	887b      	ldrh	r3, [r7, #2]
 8012f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f78:	d901      	bls.n	8012f7e <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012f7a:	2303      	movs	r3, #3
 8012f7c:	e01b      	b.n	8012fb6 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8012f84:	887b      	ldrh	r3, [r7, #2]
 8012f86:	9300      	str	r3, [sp, #0]
 8012f88:	4613      	mov	r3, r2
 8012f8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012f8e:	2100      	movs	r1, #0
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f000 f872 	bl	801307a <USBH_GetDescriptor>
 8012f96:	4603      	mov	r3, r0
 8012f98:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8012f9a:	7bfb      	ldrb	r3, [r7, #15]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d109      	bne.n	8012fb4 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012fa6:	887a      	ldrh	r2, [r7, #2]
 8012fa8:	4619      	mov	r1, r3
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f000 f92a 	bl	8013204 <USBH_ParseDevDesc>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3710      	adds	r7, #16
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}

08012fbe <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b086      	sub	sp, #24
 8012fc2:	af02      	add	r7, sp, #8
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	331c      	adds	r3, #28
 8012fce:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8012fd0:	887b      	ldrh	r3, [r7, #2]
 8012fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012fd6:	d901      	bls.n	8012fdc <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012fd8:	2303      	movs	r3, #3
 8012fda:	e016      	b.n	801300a <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8012fdc:	887b      	ldrh	r3, [r7, #2]
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fe6:	2100      	movs	r1, #0
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f000 f846 	bl	801307a <USBH_GetDescriptor>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8012ff2:	7bfb      	ldrb	r3, [r7, #15]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d107      	bne.n	8013008 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8012ff8:	887b      	ldrh	r3, [r7, #2]
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	68b9      	ldr	r1, [r7, #8]
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 f9b0 	bl	8013364 <USBH_ParseCfgDesc>
 8013004:	4603      	mov	r3, r0
 8013006:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013008:	7bfb      	ldrb	r3, [r7, #15]
}
 801300a:	4618      	mov	r0, r3
 801300c:	3710      	adds	r7, #16
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8013012:	b580      	push	{r7, lr}
 8013014:	b088      	sub	sp, #32
 8013016:	af02      	add	r7, sp, #8
 8013018:	60f8      	str	r0, [r7, #12]
 801301a:	607a      	str	r2, [r7, #4]
 801301c:	461a      	mov	r2, r3
 801301e:	460b      	mov	r3, r1
 8013020:	72fb      	strb	r3, [r7, #11]
 8013022:	4613      	mov	r3, r2
 8013024:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8013026:	893b      	ldrh	r3, [r7, #8]
 8013028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801302c:	d802      	bhi.n	8013034 <USBH_Get_StringDesc+0x22>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d101      	bne.n	8013038 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013034:	2303      	movs	r3, #3
 8013036:	e01c      	b.n	8013072 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8013038:	7afb      	ldrb	r3, [r7, #11]
 801303a:	b29b      	uxth	r3, r3
 801303c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013040:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013048:	893b      	ldrh	r3, [r7, #8]
 801304a:	9300      	str	r3, [sp, #0]
 801304c:	460b      	mov	r3, r1
 801304e:	2100      	movs	r1, #0
 8013050:	68f8      	ldr	r0, [r7, #12]
 8013052:	f000 f812 	bl	801307a <USBH_GetDescriptor>
 8013056:	4603      	mov	r3, r0
 8013058:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801305a:	7dfb      	ldrb	r3, [r7, #23]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d107      	bne.n	8013070 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013066:	893a      	ldrh	r2, [r7, #8]
 8013068:	6879      	ldr	r1, [r7, #4]
 801306a:	4618      	mov	r0, r3
 801306c:	f000 fb8d 	bl	801378a <USBH_ParseStringDesc>
  }

  return status;
 8013070:	7dfb      	ldrb	r3, [r7, #23]
}
 8013072:	4618      	mov	r0, r3
 8013074:	3718      	adds	r7, #24
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}

0801307a <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 801307a:	b580      	push	{r7, lr}
 801307c:	b084      	sub	sp, #16
 801307e:	af00      	add	r7, sp, #0
 8013080:	60f8      	str	r0, [r7, #12]
 8013082:	607b      	str	r3, [r7, #4]
 8013084:	460b      	mov	r3, r1
 8013086:	72fb      	strb	r3, [r7, #11]
 8013088:	4613      	mov	r3, r2
 801308a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	789b      	ldrb	r3, [r3, #2]
 8013090:	2b01      	cmp	r3, #1
 8013092:	d11c      	bne.n	80130ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8013094:	7afb      	ldrb	r3, [r7, #11]
 8013096:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801309a:	b2da      	uxtb	r2, r3
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2206      	movs	r2, #6
 80130a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	893a      	ldrh	r2, [r7, #8]
 80130aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80130ac:	893b      	ldrh	r3, [r7, #8]
 80130ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80130b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130b6:	d104      	bne.n	80130c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f240 4209 	movw	r2, #1033	@ 0x409
 80130be:	829a      	strh	r2, [r3, #20]
 80130c0:	e002      	b.n	80130c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2200      	movs	r2, #0
 80130c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	8b3a      	ldrh	r2, [r7, #24]
 80130cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80130ce:	8b3b      	ldrh	r3, [r7, #24]
 80130d0:	461a      	mov	r2, r3
 80130d2:	6879      	ldr	r1, [r7, #4]
 80130d4:	68f8      	ldr	r0, [r7, #12]
 80130d6:	f000 fba5 	bl	8013824 <USBH_CtlReq>
 80130da:	4603      	mov	r3, r0
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3710      	adds	r7, #16
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	460b      	mov	r3, r1
 80130ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	789b      	ldrb	r3, [r3, #2]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d10f      	bne.n	8013118 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2200      	movs	r2, #0
 80130fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2205      	movs	r2, #5
 8013102:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8013104:	78fb      	ldrb	r3, [r7, #3]
 8013106:	b29a      	uxth	r2, r3
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2200      	movs	r2, #0
 8013116:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013118:	2200      	movs	r2, #0
 801311a:	2100      	movs	r1, #0
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f000 fb81 	bl	8013824 <USBH_CtlReq>
 8013122:	4603      	mov	r3, r0
}
 8013124:	4618      	mov	r0, r3
 8013126:	3708      	adds	r7, #8
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	460b      	mov	r3, r1
 8013136:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	789b      	ldrb	r3, [r3, #2]
 801313c:	2b01      	cmp	r3, #1
 801313e:	d10e      	bne.n	801315e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2209      	movs	r2, #9
 801314a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	887a      	ldrh	r2, [r7, #2]
 8013150:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2200      	movs	r2, #0
 8013156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2200      	movs	r2, #0
 801315c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801315e:	2200      	movs	r2, #0
 8013160:	2100      	movs	r1, #0
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f000 fb5e 	bl	8013824 <USBH_CtlReq>
 8013168:	4603      	mov	r3, r0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b082      	sub	sp, #8
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	460b      	mov	r3, r1
 801317c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	789b      	ldrb	r3, [r3, #2]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d10f      	bne.n	80131a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2200      	movs	r2, #0
 801318a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2203      	movs	r2, #3
 8013190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8013192:	78fb      	ldrb	r3, [r7, #3]
 8013194:	b29a      	uxth	r2, r3
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2200      	movs	r2, #0
 801319e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2200      	movs	r2, #0
 80131a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80131a6:	2200      	movs	r2, #0
 80131a8:	2100      	movs	r1, #0
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f000 fb3a 	bl	8013824 <USBH_CtlReq>
 80131b0:	4603      	mov	r3, r0
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3708      	adds	r7, #8
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}

080131ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b082      	sub	sp, #8
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
 80131c2:	460b      	mov	r3, r1
 80131c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	789b      	ldrb	r3, [r3, #2]
 80131ca:	2b01      	cmp	r3, #1
 80131cc:	d10f      	bne.n	80131ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2202      	movs	r2, #2
 80131d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2201      	movs	r2, #1
 80131d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2200      	movs	r2, #0
 80131de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80131e0:	78fb      	ldrb	r3, [r7, #3]
 80131e2:	b29a      	uxth	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2200      	movs	r2, #0
 80131ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80131ee:	2200      	movs	r2, #0
 80131f0:	2100      	movs	r1, #0
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f000 fb16 	bl	8013824 <USBH_CtlReq>
 80131f8:	4603      	mov	r3, r0
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	3708      	adds	r7, #8
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
	...

08013204 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8013204:	b480      	push	{r7}
 8013206:	b087      	sub	sp, #28
 8013208:	af00      	add	r7, sp, #0
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	60b9      	str	r1, [r7, #8]
 801320e:	4613      	mov	r3, r2
 8013210:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8013218:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 801321a:	2300      	movs	r3, #0
 801321c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d101      	bne.n	8013228 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8013224:	2302      	movs	r3, #2
 8013226:	e094      	b.n	8013352 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	781a      	ldrb	r2, [r3, #0]
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	785a      	ldrb	r2, [r3, #1]
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	3302      	adds	r3, #2
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	461a      	mov	r2, r3
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	3303      	adds	r3, #3
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	021b      	lsls	r3, r3, #8
 8013248:	b29b      	uxth	r3, r3
 801324a:	4313      	orrs	r3, r2
 801324c:	b29a      	uxth	r2, r3
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	791a      	ldrb	r2, [r3, #4]
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	795a      	ldrb	r2, [r3, #5]
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	799a      	ldrb	r2, [r3, #6]
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	79da      	ldrb	r2, [r3, #7]
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013278:	2b00      	cmp	r3, #0
 801327a:	d004      	beq.n	8013286 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8013282:	2b01      	cmp	r3, #1
 8013284:	d11b      	bne.n	80132be <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	79db      	ldrb	r3, [r3, #7]
 801328a:	2b20      	cmp	r3, #32
 801328c:	dc0f      	bgt.n	80132ae <USBH_ParseDevDesc+0xaa>
 801328e:	2b08      	cmp	r3, #8
 8013290:	db0f      	blt.n	80132b2 <USBH_ParseDevDesc+0xae>
 8013292:	3b08      	subs	r3, #8
 8013294:	4a32      	ldr	r2, [pc, #200]	@ (8013360 <USBH_ParseDevDesc+0x15c>)
 8013296:	fa22 f303 	lsr.w	r3, r2, r3
 801329a:	f003 0301 	and.w	r3, r3, #1
 801329e:	2b00      	cmp	r3, #0
 80132a0:	bf14      	ite	ne
 80132a2:	2301      	movne	r3, #1
 80132a4:	2300      	moveq	r3, #0
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d106      	bne.n	80132ba <USBH_ParseDevDesc+0xb6>
 80132ac:	e001      	b.n	80132b2 <USBH_ParseDevDesc+0xae>
 80132ae:	2b40      	cmp	r3, #64	@ 0x40
 80132b0:	d003      	beq.n	80132ba <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	2208      	movs	r2, #8
 80132b6:	71da      	strb	r2, [r3, #7]
        break;
 80132b8:	e000      	b.n	80132bc <USBH_ParseDevDesc+0xb8>
        break;
 80132ba:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80132bc:	e00e      	b.n	80132dc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80132c4:	2b02      	cmp	r3, #2
 80132c6:	d107      	bne.n	80132d8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	79db      	ldrb	r3, [r3, #7]
 80132cc:	2b08      	cmp	r3, #8
 80132ce:	d005      	beq.n	80132dc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	2208      	movs	r2, #8
 80132d4:	71da      	strb	r2, [r3, #7]
 80132d6:	e001      	b.n	80132dc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80132d8:	2303      	movs	r3, #3
 80132da:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80132dc:	88fb      	ldrh	r3, [r7, #6]
 80132de:	2b08      	cmp	r3, #8
 80132e0:	d936      	bls.n	8013350 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	3308      	adds	r3, #8
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	461a      	mov	r2, r3
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	3309      	adds	r3, #9
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	021b      	lsls	r3, r3, #8
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	4313      	orrs	r3, r2
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	330a      	adds	r3, #10
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	461a      	mov	r2, r3
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	330b      	adds	r3, #11
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	021b      	lsls	r3, r3, #8
 801330c:	b29b      	uxth	r3, r3
 801330e:	4313      	orrs	r3, r2
 8013310:	b29a      	uxth	r2, r3
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	330c      	adds	r3, #12
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	461a      	mov	r2, r3
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	330d      	adds	r3, #13
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	021b      	lsls	r3, r3, #8
 8013326:	b29b      	uxth	r3, r3
 8013328:	4313      	orrs	r3, r2
 801332a:	b29a      	uxth	r2, r3
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	7b9a      	ldrb	r2, [r3, #14]
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	7bda      	ldrb	r2, [r3, #15]
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	7c1a      	ldrb	r2, [r3, #16]
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	7c5a      	ldrb	r2, [r3, #17]
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8013350:	7dfb      	ldrb	r3, [r7, #23]
}
 8013352:	4618      	mov	r0, r3
 8013354:	371c      	adds	r7, #28
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop
 8013360:	01000101 	.word	0x01000101

08013364 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b08c      	sub	sp, #48	@ 0x30
 8013368:	af00      	add	r7, sp, #0
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	4613      	mov	r3, r2
 8013370:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8013378:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801337a:	2300      	movs	r3, #0
 801337c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8013380:	2300      	movs	r3, #0
 8013382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8013386:	2300      	movs	r3, #0
 8013388:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d101      	bne.n	8013396 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8013392:	2302      	movs	r3, #2
 8013394:	e0de      	b.n	8013554 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 801339a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	2b09      	cmp	r3, #9
 80133a0:	d002      	beq.n	80133a8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80133a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a4:	2209      	movs	r2, #9
 80133a6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	781a      	ldrb	r2, [r3, #0]
 80133ac:	6a3b      	ldr	r3, [r7, #32]
 80133ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	785a      	ldrb	r2, [r3, #1]
 80133b4:	6a3b      	ldr	r3, [r7, #32]
 80133b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	3302      	adds	r3, #2
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	461a      	mov	r2, r3
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	3303      	adds	r3, #3
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	021b      	lsls	r3, r3, #8
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	4313      	orrs	r3, r2
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80133d2:	bf28      	it	cs
 80133d4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80133d8:	b29a      	uxth	r2, r3
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	791a      	ldrb	r2, [r3, #4]
 80133e2:	6a3b      	ldr	r3, [r7, #32]
 80133e4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	795a      	ldrb	r2, [r3, #5]
 80133ea:	6a3b      	ldr	r3, [r7, #32]
 80133ec:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	799a      	ldrb	r2, [r3, #6]
 80133f2:	6a3b      	ldr	r3, [r7, #32]
 80133f4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	79da      	ldrb	r2, [r3, #7]
 80133fa:	6a3b      	ldr	r3, [r7, #32]
 80133fc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	7a1a      	ldrb	r2, [r3, #8]
 8013402:	6a3b      	ldr	r3, [r7, #32]
 8013404:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8013406:	88fb      	ldrh	r3, [r7, #6]
 8013408:	2b09      	cmp	r3, #9
 801340a:	f240 80a1 	bls.w	8013550 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 801340e:	2309      	movs	r3, #9
 8013410:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013412:	2300      	movs	r3, #0
 8013414:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013416:	e085      	b.n	8013524 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013418:	f107 0316 	add.w	r3, r7, #22
 801341c:	4619      	mov	r1, r3
 801341e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013420:	f000 f9e6 	bl	80137f0 <USBH_GetNextDesc>
 8013424:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8013426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013428:	785b      	ldrb	r3, [r3, #1]
 801342a:	2b04      	cmp	r3, #4
 801342c:	d17a      	bne.n	8013524 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	2b09      	cmp	r3, #9
 8013434:	d002      	beq.n	801343c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8013436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013438:	2209      	movs	r2, #9
 801343a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 801343c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013440:	221a      	movs	r2, #26
 8013442:	fb02 f303 	mul.w	r3, r2, r3
 8013446:	3308      	adds	r3, #8
 8013448:	6a3a      	ldr	r2, [r7, #32]
 801344a:	4413      	add	r3, r2
 801344c:	3302      	adds	r3, #2
 801344e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013452:	69f8      	ldr	r0, [r7, #28]
 8013454:	f000 f882 	bl	801355c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013458:	2300      	movs	r3, #0
 801345a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801345e:	2300      	movs	r3, #0
 8013460:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013462:	e043      	b.n	80134ec <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013464:	f107 0316 	add.w	r3, r7, #22
 8013468:	4619      	mov	r1, r3
 801346a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801346c:	f000 f9c0 	bl	80137f0 <USBH_GetNextDesc>
 8013470:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013474:	785b      	ldrb	r3, [r3, #1]
 8013476:	2b05      	cmp	r3, #5
 8013478:	d138      	bne.n	80134ec <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 801347a:	69fb      	ldr	r3, [r7, #28]
 801347c:	795b      	ldrb	r3, [r3, #5]
 801347e:	2b01      	cmp	r3, #1
 8013480:	d113      	bne.n	80134aa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8013482:	69fb      	ldr	r3, [r7, #28]
 8013484:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8013486:	2b02      	cmp	r3, #2
 8013488:	d003      	beq.n	8013492 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	799b      	ldrb	r3, [r3, #6]
 801348e:	2b03      	cmp	r3, #3
 8013490:	d10b      	bne.n	80134aa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8013492:	69fb      	ldr	r3, [r7, #28]
 8013494:	79db      	ldrb	r3, [r3, #7]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d10b      	bne.n	80134b2 <USBH_ParseCfgDesc+0x14e>
 801349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801349c:	781b      	ldrb	r3, [r3, #0]
 801349e:	2b09      	cmp	r3, #9
 80134a0:	d007      	beq.n	80134b2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80134a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134a4:	2209      	movs	r2, #9
 80134a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80134a8:	e003      	b.n	80134b2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80134aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134ac:	2207      	movs	r2, #7
 80134ae:	701a      	strb	r2, [r3, #0]
 80134b0:	e000      	b.n	80134b4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80134b2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80134b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80134bc:	3201      	adds	r2, #1
 80134be:	00d2      	lsls	r2, r2, #3
 80134c0:	211a      	movs	r1, #26
 80134c2:	fb01 f303 	mul.w	r3, r1, r3
 80134c6:	4413      	add	r3, r2
 80134c8:	3308      	adds	r3, #8
 80134ca:	6a3a      	ldr	r2, [r7, #32]
 80134cc:	4413      	add	r3, r2
 80134ce:	3304      	adds	r3, #4
 80134d0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80134d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134d4:	69b9      	ldr	r1, [r7, #24]
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	f000 f86f 	bl	80135ba <USBH_ParseEPDesc>
 80134dc:	4603      	mov	r3, r0
 80134de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80134e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134e6:	3301      	adds	r3, #1
 80134e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80134ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134f0:	2b01      	cmp	r3, #1
 80134f2:	d80a      	bhi.n	801350a <USBH_ParseCfgDesc+0x1a6>
 80134f4:	69fb      	ldr	r3, [r7, #28]
 80134f6:	791b      	ldrb	r3, [r3, #4]
 80134f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d204      	bcs.n	801350a <USBH_ParseCfgDesc+0x1a6>
 8013500:	6a3b      	ldr	r3, [r7, #32]
 8013502:	885a      	ldrh	r2, [r3, #2]
 8013504:	8afb      	ldrh	r3, [r7, #22]
 8013506:	429a      	cmp	r2, r3
 8013508:	d8ac      	bhi.n	8013464 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	791b      	ldrb	r3, [r3, #4]
 801350e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013512:	429a      	cmp	r2, r3
 8013514:	d201      	bcs.n	801351a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8013516:	2303      	movs	r3, #3
 8013518:	e01c      	b.n	8013554 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 801351a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801351e:	3301      	adds	r3, #1
 8013520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013528:	2b01      	cmp	r3, #1
 801352a:	d805      	bhi.n	8013538 <USBH_ParseCfgDesc+0x1d4>
 801352c:	6a3b      	ldr	r3, [r7, #32]
 801352e:	885a      	ldrh	r2, [r3, #2]
 8013530:	8afb      	ldrh	r3, [r7, #22]
 8013532:	429a      	cmp	r2, r3
 8013534:	f63f af70 	bhi.w	8013418 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8013538:	6a3b      	ldr	r3, [r7, #32]
 801353a:	791b      	ldrb	r3, [r3, #4]
 801353c:	2b02      	cmp	r3, #2
 801353e:	bf28      	it	cs
 8013540:	2302      	movcs	r3, #2
 8013542:	b2db      	uxtb	r3, r3
 8013544:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013548:	429a      	cmp	r2, r3
 801354a:	d201      	bcs.n	8013550 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 801354c:	2303      	movs	r3, #3
 801354e:	e001      	b.n	8013554 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8013550:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013554:	4618      	mov	r0, r3
 8013556:	3730      	adds	r7, #48	@ 0x30
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}

0801355c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801355c:	b480      	push	{r7}
 801355e:	b083      	sub	sp, #12
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	781a      	ldrb	r2, [r3, #0]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	785a      	ldrb	r2, [r3, #1]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	789a      	ldrb	r2, [r3, #2]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	78da      	ldrb	r2, [r3, #3]
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	791a      	ldrb	r2, [r3, #4]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	795a      	ldrb	r2, [r3, #5]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	799a      	ldrb	r2, [r3, #6]
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	79da      	ldrb	r2, [r3, #7]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	7a1a      	ldrb	r2, [r3, #8]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	721a      	strb	r2, [r3, #8]
}
 80135ae:	bf00      	nop
 80135b0:	370c      	adds	r7, #12
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr

080135ba <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80135ba:	b480      	push	{r7}
 80135bc:	b087      	sub	sp, #28
 80135be:	af00      	add	r7, sp, #0
 80135c0:	60f8      	str	r0, [r7, #12]
 80135c2:	60b9      	str	r1, [r7, #8]
 80135c4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80135c6:	2300      	movs	r3, #0
 80135c8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	781a      	ldrb	r2, [r3, #0]
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	785a      	ldrb	r2, [r3, #1]
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	789a      	ldrb	r2, [r3, #2]
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	78da      	ldrb	r2, [r3, #3]
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	3304      	adds	r3, #4
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	461a      	mov	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	3305      	adds	r3, #5
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	021b      	lsls	r3, r3, #8
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	4313      	orrs	r3, r2
 80135fe:	b29a      	uxth	r2, r3
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	799a      	ldrb	r2, [r3, #6]
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	889b      	ldrh	r3, [r3, #4]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d009      	beq.n	8013628 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8013618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801361c:	d804      	bhi.n	8013628 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013626:	d901      	bls.n	801362c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8013628:	2303      	movs	r3, #3
 801362a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013632:	2b00      	cmp	r3, #0
 8013634:	d136      	bne.n	80136a4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	78db      	ldrb	r3, [r3, #3]
 801363a:	f003 0303 	and.w	r3, r3, #3
 801363e:	2b02      	cmp	r3, #2
 8013640:	d108      	bne.n	8013654 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	889b      	ldrh	r3, [r3, #4]
 8013646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801364a:	f240 8097 	bls.w	801377c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801364e:	2303      	movs	r3, #3
 8013650:	75fb      	strb	r3, [r7, #23]
 8013652:	e093      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	78db      	ldrb	r3, [r3, #3]
 8013658:	f003 0303 	and.w	r3, r3, #3
 801365c:	2b00      	cmp	r3, #0
 801365e:	d107      	bne.n	8013670 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	889b      	ldrh	r3, [r3, #4]
 8013664:	2b40      	cmp	r3, #64	@ 0x40
 8013666:	f240 8089 	bls.w	801377c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801366a:	2303      	movs	r3, #3
 801366c:	75fb      	strb	r3, [r7, #23]
 801366e:	e085      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	78db      	ldrb	r3, [r3, #3]
 8013674:	f003 0303 	and.w	r3, r3, #3
 8013678:	2b01      	cmp	r3, #1
 801367a:	d005      	beq.n	8013688 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	78db      	ldrb	r3, [r3, #3]
 8013680:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8013684:	2b03      	cmp	r3, #3
 8013686:	d10a      	bne.n	801369e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	799b      	ldrb	r3, [r3, #6]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d003      	beq.n	8013698 <USBH_ParseEPDesc+0xde>
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	799b      	ldrb	r3, [r3, #6]
 8013694:	2b10      	cmp	r3, #16
 8013696:	d970      	bls.n	801377a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8013698:	2303      	movs	r3, #3
 801369a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801369c:	e06d      	b.n	801377a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801369e:	2303      	movs	r3, #3
 80136a0:	75fb      	strb	r3, [r7, #23]
 80136a2:	e06b      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d13c      	bne.n	8013728 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	78db      	ldrb	r3, [r3, #3]
 80136b2:	f003 0303 	and.w	r3, r3, #3
 80136b6:	2b02      	cmp	r3, #2
 80136b8:	d005      	beq.n	80136c6 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	78db      	ldrb	r3, [r3, #3]
 80136be:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d106      	bne.n	80136d4 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	889b      	ldrh	r3, [r3, #4]
 80136ca:	2b40      	cmp	r3, #64	@ 0x40
 80136cc:	d956      	bls.n	801377c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80136ce:	2303      	movs	r3, #3
 80136d0:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80136d2:	e053      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	78db      	ldrb	r3, [r3, #3]
 80136d8:	f003 0303 	and.w	r3, r3, #3
 80136dc:	2b01      	cmp	r3, #1
 80136de:	d10e      	bne.n	80136fe <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	799b      	ldrb	r3, [r3, #6]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d007      	beq.n	80136f8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80136ec:	2b10      	cmp	r3, #16
 80136ee:	d803      	bhi.n	80136f8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80136f4:	2b40      	cmp	r3, #64	@ 0x40
 80136f6:	d941      	bls.n	801377c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80136f8:	2303      	movs	r3, #3
 80136fa:	75fb      	strb	r3, [r7, #23]
 80136fc:	e03e      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	78db      	ldrb	r3, [r3, #3]
 8013702:	f003 0303 	and.w	r3, r3, #3
 8013706:	2b03      	cmp	r3, #3
 8013708:	d10b      	bne.n	8013722 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	799b      	ldrb	r3, [r3, #6]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d004      	beq.n	801371c <USBH_ParseEPDesc+0x162>
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	889b      	ldrh	r3, [r3, #4]
 8013716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801371a:	d32f      	bcc.n	801377c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801371c:	2303      	movs	r3, #3
 801371e:	75fb      	strb	r3, [r7, #23]
 8013720:	e02c      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013722:	2303      	movs	r3, #3
 8013724:	75fb      	strb	r3, [r7, #23]
 8013726:	e029      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801372e:	2b02      	cmp	r3, #2
 8013730:	d120      	bne.n	8013774 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	78db      	ldrb	r3, [r3, #3]
 8013736:	f003 0303 	and.w	r3, r3, #3
 801373a:	2b00      	cmp	r3, #0
 801373c:	d106      	bne.n	801374c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	889b      	ldrh	r3, [r3, #4]
 8013742:	2b08      	cmp	r3, #8
 8013744:	d01a      	beq.n	801377c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013746:	2303      	movs	r3, #3
 8013748:	75fb      	strb	r3, [r7, #23]
 801374a:	e017      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	78db      	ldrb	r3, [r3, #3]
 8013750:	f003 0303 	and.w	r3, r3, #3
 8013754:	2b03      	cmp	r3, #3
 8013756:	d10a      	bne.n	801376e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	799b      	ldrb	r3, [r3, #6]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d003      	beq.n	8013768 <USBH_ParseEPDesc+0x1ae>
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	889b      	ldrh	r3, [r3, #4]
 8013764:	2b08      	cmp	r3, #8
 8013766:	d909      	bls.n	801377c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013768:	2303      	movs	r3, #3
 801376a:	75fb      	strb	r3, [r7, #23]
 801376c:	e006      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801376e:	2303      	movs	r3, #3
 8013770:	75fb      	strb	r3, [r7, #23]
 8013772:	e003      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8013774:	2303      	movs	r3, #3
 8013776:	75fb      	strb	r3, [r7, #23]
 8013778:	e000      	b.n	801377c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801377a:	bf00      	nop
  }

  return status;
 801377c:	7dfb      	ldrb	r3, [r7, #23]
}
 801377e:	4618      	mov	r0, r3
 8013780:	371c      	adds	r7, #28
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr

0801378a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801378a:	b480      	push	{r7}
 801378c:	b087      	sub	sp, #28
 801378e:	af00      	add	r7, sp, #0
 8013790:	60f8      	str	r0, [r7, #12]
 8013792:	60b9      	str	r1, [r7, #8]
 8013794:	4613      	mov	r3, r2
 8013796:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	3301      	adds	r3, #1
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	2b03      	cmp	r3, #3
 80137a0:	d120      	bne.n	80137e4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	1e9a      	subs	r2, r3, #2
 80137a8:	88fb      	ldrh	r3, [r7, #6]
 80137aa:	4293      	cmp	r3, r2
 80137ac:	bf28      	it	cs
 80137ae:	4613      	movcs	r3, r2
 80137b0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	3302      	adds	r3, #2
 80137b6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80137b8:	2300      	movs	r3, #0
 80137ba:	82fb      	strh	r3, [r7, #22]
 80137bc:	e00b      	b.n	80137d6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80137be:	8afb      	ldrh	r3, [r7, #22]
 80137c0:	68fa      	ldr	r2, [r7, #12]
 80137c2:	4413      	add	r3, r2
 80137c4:	781a      	ldrb	r2, [r3, #0]
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	3301      	adds	r3, #1
 80137ce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80137d0:	8afb      	ldrh	r3, [r7, #22]
 80137d2:	3302      	adds	r3, #2
 80137d4:	82fb      	strh	r3, [r7, #22]
 80137d6:	8afa      	ldrh	r2, [r7, #22]
 80137d8:	8abb      	ldrh	r3, [r7, #20]
 80137da:	429a      	cmp	r2, r3
 80137dc:	d3ef      	bcc.n	80137be <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	2200      	movs	r2, #0
 80137e2:	701a      	strb	r2, [r3, #0]
  }
}
 80137e4:	bf00      	nop
 80137e6:	371c      	adds	r7, #28
 80137e8:	46bd      	mov	sp, r7
 80137ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ee:	4770      	bx	lr

080137f0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	881b      	ldrh	r3, [r3, #0]
 80137fe:	687a      	ldr	r2, [r7, #4]
 8013800:	7812      	ldrb	r2, [r2, #0]
 8013802:	4413      	add	r3, r2
 8013804:	b29a      	uxth	r2, r3
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	4413      	add	r3, r2
 8013814:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013816:	68fb      	ldr	r3, [r7, #12]
}
 8013818:	4618      	mov	r0, r3
 801381a:	3714      	adds	r7, #20
 801381c:	46bd      	mov	sp, r7
 801381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013822:	4770      	bx	lr

08013824 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b086      	sub	sp, #24
 8013828:	af00      	add	r7, sp, #0
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	60b9      	str	r1, [r7, #8]
 801382e:	4613      	mov	r3, r2
 8013830:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013832:	2301      	movs	r3, #1
 8013834:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	789b      	ldrb	r3, [r3, #2]
 801383a:	2b01      	cmp	r3, #1
 801383c:	d002      	beq.n	8013844 <USBH_CtlReq+0x20>
 801383e:	2b02      	cmp	r3, #2
 8013840:	d015      	beq.n	801386e <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8013842:	e033      	b.n	80138ac <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	68ba      	ldr	r2, [r7, #8]
 8013848:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	88fa      	ldrh	r2, [r7, #6]
 801384e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	2201      	movs	r2, #1
 8013854:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	2202      	movs	r2, #2
 801385a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801385c:	2301      	movs	r3, #1
 801385e:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013860:	2300      	movs	r3, #0
 8013862:	2200      	movs	r2, #0
 8013864:	2103      	movs	r1, #3
 8013866:	68f8      	ldr	r0, [r7, #12]
 8013868:	f7ff fb32 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 801386c:	e01e      	b.n	80138ac <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f000 f822 	bl	80138b8 <USBH_HandleControl>
 8013874:	4603      	mov	r3, r0
 8013876:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8013878:	7dfb      	ldrb	r3, [r7, #23]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d002      	beq.n	8013884 <USBH_CtlReq+0x60>
 801387e:	7dfb      	ldrb	r3, [r7, #23]
 8013880:	2b03      	cmp	r3, #3
 8013882:	d106      	bne.n	8013892 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	2201      	movs	r2, #1
 8013888:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2200      	movs	r2, #0
 801388e:	761a      	strb	r2, [r3, #24]
 8013890:	e005      	b.n	801389e <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 8013892:	7dfb      	ldrb	r3, [r7, #23]
 8013894:	2b02      	cmp	r3, #2
 8013896:	d102      	bne.n	801389e <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2201      	movs	r2, #1
 801389c:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801389e:	2300      	movs	r3, #0
 80138a0:	2200      	movs	r2, #0
 80138a2:	2103      	movs	r1, #3
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	f7ff fb13 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 80138aa:	bf00      	nop
  }
  return status;
 80138ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3718      	adds	r7, #24
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
	...

080138b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b086      	sub	sp, #24
 80138bc:	af02      	add	r7, sp, #8
 80138be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80138c0:	2301      	movs	r3, #1
 80138c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80138c4:	2300      	movs	r3, #0
 80138c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	7e1b      	ldrb	r3, [r3, #24]
 80138cc:	3b01      	subs	r3, #1
 80138ce:	2b0a      	cmp	r3, #10
 80138d0:	f200 81b2 	bhi.w	8013c38 <USBH_HandleControl+0x380>
 80138d4:	a201      	add	r2, pc, #4	@ (adr r2, 80138dc <USBH_HandleControl+0x24>)
 80138d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138da:	bf00      	nop
 80138dc:	08013909 	.word	0x08013909
 80138e0:	08013923 	.word	0x08013923
 80138e4:	080139a5 	.word	0x080139a5
 80138e8:	080139cb 	.word	0x080139cb
 80138ec:	08013a29 	.word	0x08013a29
 80138f0:	08013a53 	.word	0x08013a53
 80138f4:	08013ad5 	.word	0x08013ad5
 80138f8:	08013af7 	.word	0x08013af7
 80138fc:	08013b59 	.word	0x08013b59
 8013900:	08013b7f 	.word	0x08013b7f
 8013904:	08013be1 	.word	0x08013be1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f103 0110 	add.w	r1, r3, #16
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	795b      	ldrb	r3, [r3, #5]
 8013912:	461a      	mov	r2, r3
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f000 f99f 	bl	8013c58 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	2202      	movs	r2, #2
 801391e:	761a      	strb	r2, [r3, #24]
      break;
 8013920:	e195      	b.n	8013c4e <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	795b      	ldrb	r3, [r3, #5]
 8013926:	4619      	mov	r1, r3
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f006 f903 	bl	8019b34 <USBH_LL_GetURBState>
 801392e:	4603      	mov	r3, r0
 8013930:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013932:	7bbb      	ldrb	r3, [r7, #14]
 8013934:	2b01      	cmp	r3, #1
 8013936:	d124      	bne.n	8013982 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	7c1b      	ldrb	r3, [r3, #16]
 801393c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013940:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	8adb      	ldrh	r3, [r3, #22]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d00a      	beq.n	8013960 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801394a:	7b7b      	ldrb	r3, [r7, #13]
 801394c:	2b80      	cmp	r3, #128	@ 0x80
 801394e:	d103      	bne.n	8013958 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2203      	movs	r2, #3
 8013954:	761a      	strb	r2, [r3, #24]
 8013956:	e00d      	b.n	8013974 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2205      	movs	r2, #5
 801395c:	761a      	strb	r2, [r3, #24]
 801395e:	e009      	b.n	8013974 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8013960:	7b7b      	ldrb	r3, [r7, #13]
 8013962:	2b80      	cmp	r3, #128	@ 0x80
 8013964:	d103      	bne.n	801396e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2209      	movs	r2, #9
 801396a:	761a      	strb	r2, [r3, #24]
 801396c:	e002      	b.n	8013974 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2207      	movs	r2, #7
 8013972:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013974:	2300      	movs	r3, #0
 8013976:	2200      	movs	r2, #0
 8013978:	2103      	movs	r1, #3
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f7ff faa8 	bl	8012ed0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013980:	e15c      	b.n	8013c3c <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013982:	7bbb      	ldrb	r3, [r7, #14]
 8013984:	2b04      	cmp	r3, #4
 8013986:	d003      	beq.n	8013990 <USBH_HandleControl+0xd8>
 8013988:	7bbb      	ldrb	r3, [r7, #14]
 801398a:	2b02      	cmp	r3, #2
 801398c:	f040 8156 	bne.w	8013c3c <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	220b      	movs	r2, #11
 8013994:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013996:	2300      	movs	r3, #0
 8013998:	2200      	movs	r2, #0
 801399a:	2103      	movs	r1, #3
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7ff fa97 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 80139a2:	e14b      	b.n	8013c3c <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6899      	ldr	r1, [r3, #8]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	899a      	ldrh	r2, [r3, #12]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	791b      	ldrb	r3, [r3, #4]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f000 f98a 	bl	8013cd6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2204      	movs	r2, #4
 80139c6:	761a      	strb	r2, [r3, #24]
      break;
 80139c8:	e141      	b.n	8013c4e <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	791b      	ldrb	r3, [r3, #4]
 80139ce:	4619      	mov	r1, r3
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f006 f8af 	bl	8019b34 <USBH_LL_GetURBState>
 80139d6:	4603      	mov	r3, r0
 80139d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80139da:	7bbb      	ldrb	r3, [r7, #14]
 80139dc:	2b01      	cmp	r3, #1
 80139de:	d109      	bne.n	80139f4 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2209      	movs	r2, #9
 80139e4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139e6:	2300      	movs	r3, #0
 80139e8:	2200      	movs	r2, #0
 80139ea:	2103      	movs	r1, #3
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f7ff fa6f 	bl	8012ed0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80139f2:	e125      	b.n	8013c40 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 80139f4:	7bbb      	ldrb	r3, [r7, #14]
 80139f6:	2b05      	cmp	r3, #5
 80139f8:	d108      	bne.n	8013a0c <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 80139fa:	2303      	movs	r3, #3
 80139fc:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139fe:	2300      	movs	r3, #0
 8013a00:	2200      	movs	r2, #0
 8013a02:	2103      	movs	r1, #3
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f7ff fa63 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013a0a:	e119      	b.n	8013c40 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 8013a0c:	7bbb      	ldrb	r3, [r7, #14]
 8013a0e:	2b04      	cmp	r3, #4
 8013a10:	f040 8116 	bne.w	8013c40 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	220b      	movs	r2, #11
 8013a18:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	2103      	movs	r1, #3
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f7ff fa55 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013a26:	e10b      	b.n	8013c40 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6899      	ldr	r1, [r3, #8]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	899a      	ldrh	r2, [r3, #12]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	795b      	ldrb	r3, [r3, #5]
 8013a34:	2001      	movs	r0, #1
 8013a36:	9000      	str	r0, [sp, #0]
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f000 f927 	bl	8013c8c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2206      	movs	r2, #6
 8013a4e:	761a      	strb	r2, [r3, #24]
      break;
 8013a50:	e0fd      	b.n	8013c4e <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	795b      	ldrb	r3, [r3, #5]
 8013a56:	4619      	mov	r1, r3
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f006 f86b 	bl	8019b34 <USBH_LL_GetURBState>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013a62:	7bbb      	ldrb	r3, [r7, #14]
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d109      	bne.n	8013a7c <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2207      	movs	r2, #7
 8013a6c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a6e:	2300      	movs	r3, #0
 8013a70:	2200      	movs	r2, #0
 8013a72:	2103      	movs	r1, #3
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f7ff fa2b 	bl	8012ed0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013a7a:	e0e3      	b.n	8013c44 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 8013a7c:	7bbb      	ldrb	r3, [r7, #14]
 8013a7e:	2b05      	cmp	r3, #5
 8013a80:	d10b      	bne.n	8013a9a <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	220c      	movs	r2, #12
 8013a86:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8013a88:	2303      	movs	r3, #3
 8013a8a:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	2200      	movs	r2, #0
 8013a90:	2103      	movs	r1, #3
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f7ff fa1c 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013a98:	e0d4      	b.n	8013c44 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013a9a:	7bbb      	ldrb	r3, [r7, #14]
 8013a9c:	2b02      	cmp	r3, #2
 8013a9e:	d109      	bne.n	8013ab4 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2205      	movs	r2, #5
 8013aa4:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	2103      	movs	r1, #3
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f7ff fa0f 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013ab2:	e0c7      	b.n	8013c44 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8013ab4:	7bbb      	ldrb	r3, [r7, #14]
 8013ab6:	2b04      	cmp	r3, #4
 8013ab8:	f040 80c4 	bne.w	8013c44 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	220b      	movs	r2, #11
 8013ac0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013ac2:	2302      	movs	r3, #2
 8013ac4:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	2200      	movs	r2, #0
 8013aca:	2103      	movs	r1, #3
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f7ff f9ff 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013ad2:	e0b7      	b.n	8013c44 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	791b      	ldrb	r3, [r3, #4]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	2100      	movs	r1, #0
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f000 f8fa 	bl	8013cd6 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013ae8:	b29a      	uxth	r2, r3
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2208      	movs	r2, #8
 8013af2:	761a      	strb	r2, [r3, #24]

      break;
 8013af4:	e0ab      	b.n	8013c4e <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	791b      	ldrb	r3, [r3, #4]
 8013afa:	4619      	mov	r1, r3
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f006 f819 	bl	8019b34 <USBH_LL_GetURBState>
 8013b02:	4603      	mov	r3, r0
 8013b04:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013b06:	7bbb      	ldrb	r3, [r7, #14]
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	d10b      	bne.n	8013b24 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	220d      	movs	r2, #13
 8013b10:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8013b12:	2300      	movs	r3, #0
 8013b14:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b16:	2300      	movs	r3, #0
 8013b18:	2200      	movs	r2, #0
 8013b1a:	2103      	movs	r1, #3
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f7ff f9d7 	bl	8012ed0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013b22:	e091      	b.n	8013c48 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 8013b24:	7bbb      	ldrb	r3, [r7, #14]
 8013b26:	2b04      	cmp	r3, #4
 8013b28:	d109      	bne.n	8013b3e <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	220b      	movs	r2, #11
 8013b2e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b30:	2300      	movs	r3, #0
 8013b32:	2200      	movs	r2, #0
 8013b34:	2103      	movs	r1, #3
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7ff f9ca 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013b3c:	e084      	b.n	8013c48 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 8013b3e:	7bbb      	ldrb	r3, [r7, #14]
 8013b40:	2b05      	cmp	r3, #5
 8013b42:	f040 8081 	bne.w	8013c48 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 8013b46:	2303      	movs	r3, #3
 8013b48:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	2103      	movs	r1, #3
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f7ff f9bd 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013b56:	e077      	b.n	8013c48 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	795b      	ldrb	r3, [r3, #5]
 8013b5c:	2201      	movs	r2, #1
 8013b5e:	9200      	str	r2, [sp, #0]
 8013b60:	2200      	movs	r2, #0
 8013b62:	2100      	movs	r1, #0
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f000 f891 	bl	8013c8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	220a      	movs	r2, #10
 8013b7a:	761a      	strb	r2, [r3, #24]
      break;
 8013b7c:	e067      	b.n	8013c4e <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	795b      	ldrb	r3, [r3, #5]
 8013b82:	4619      	mov	r1, r3
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f005 ffd5 	bl	8019b34 <USBH_LL_GetURBState>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8013b8e:	7bbb      	ldrb	r3, [r7, #14]
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d10b      	bne.n	8013bac <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8013b94:	2300      	movs	r3, #0
 8013b96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	220d      	movs	r2, #13
 8013b9c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	2103      	movs	r1, #3
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f7ff f993 	bl	8012ed0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013baa:	e04f      	b.n	8013c4c <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013bac:	7bbb      	ldrb	r3, [r7, #14]
 8013bae:	2b02      	cmp	r3, #2
 8013bb0:	d109      	bne.n	8013bc6 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2209      	movs	r2, #9
 8013bb6:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013bb8:	2300      	movs	r3, #0
 8013bba:	2200      	movs	r2, #0
 8013bbc:	2103      	movs	r1, #3
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f7ff f986 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013bc4:	e042      	b.n	8013c4c <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8013bc6:	7bbb      	ldrb	r3, [r7, #14]
 8013bc8:	2b04      	cmp	r3, #4
 8013bca:	d13f      	bne.n	8013c4c <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	220b      	movs	r2, #11
 8013bd0:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	2103      	movs	r1, #3
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f7ff f979 	bl	8012ed0 <USBH_OS_PutMessage>
      break;
 8013bde:	e035      	b.n	8013c4c <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	7e5b      	ldrb	r3, [r3, #25]
 8013be4:	3301      	adds	r3, #1
 8013be6:	b2da      	uxtb	r2, r3
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	765a      	strb	r2, [r3, #25]
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	7e5b      	ldrb	r3, [r3, #25]
 8013bf0:	2b02      	cmp	r3, #2
 8013bf2:	d806      	bhi.n	8013c02 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8013c00:	e025      	b.n	8013c4e <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013c08:	2106      	movs	r1, #6
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2200      	movs	r2, #0
 8013c12:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	795b      	ldrb	r3, [r3, #5]
 8013c18:	4619      	mov	r1, r3
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f000 f90c 	bl	8013e38 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	791b      	ldrb	r3, [r3, #4]
 8013c24:	4619      	mov	r1, r3
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f000 f906 	bl	8013e38 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8013c32:	2302      	movs	r3, #2
 8013c34:	73fb      	strb	r3, [r7, #15]
      break;
 8013c36:	e00a      	b.n	8013c4e <USBH_HandleControl+0x396>

    default:
      break;
 8013c38:	bf00      	nop
 8013c3a:	e008      	b.n	8013c4e <USBH_HandleControl+0x396>
      break;
 8013c3c:	bf00      	nop
 8013c3e:	e006      	b.n	8013c4e <USBH_HandleControl+0x396>
      break;
 8013c40:	bf00      	nop
 8013c42:	e004      	b.n	8013c4e <USBH_HandleControl+0x396>
      break;
 8013c44:	bf00      	nop
 8013c46:	e002      	b.n	8013c4e <USBH_HandleControl+0x396>
      break;
 8013c48:	bf00      	nop
 8013c4a:	e000      	b.n	8013c4e <USBH_HandleControl+0x396>
      break;
 8013c4c:	bf00      	nop
  }

  return status;
 8013c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3710      	adds	r7, #16
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b088      	sub	sp, #32
 8013c5c:	af04      	add	r7, sp, #16
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	60b9      	str	r1, [r7, #8]
 8013c62:	4613      	mov	r3, r2
 8013c64:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013c66:	79f9      	ldrb	r1, [r7, #7]
 8013c68:	2300      	movs	r3, #0
 8013c6a:	9303      	str	r3, [sp, #12]
 8013c6c:	2308      	movs	r3, #8
 8013c6e:	9302      	str	r3, [sp, #8]
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	9301      	str	r3, [sp, #4]
 8013c74:	2300      	movs	r3, #0
 8013c76:	9300      	str	r3, [sp, #0]
 8013c78:	2300      	movs	r3, #0
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f005 ff28 	bl	8019ad2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8013c82:	2300      	movs	r3, #0
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3710      	adds	r7, #16
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b088      	sub	sp, #32
 8013c90:	af04      	add	r7, sp, #16
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	4611      	mov	r1, r2
 8013c98:	461a      	mov	r2, r3
 8013c9a:	460b      	mov	r3, r1
 8013c9c:	80fb      	strh	r3, [r7, #6]
 8013c9e:	4613      	mov	r3, r2
 8013ca0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d001      	beq.n	8013cb0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8013cac:	2300      	movs	r3, #0
 8013cae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013cb0:	7979      	ldrb	r1, [r7, #5]
 8013cb2:	7e3b      	ldrb	r3, [r7, #24]
 8013cb4:	9303      	str	r3, [sp, #12]
 8013cb6:	88fb      	ldrh	r3, [r7, #6]
 8013cb8:	9302      	str	r3, [sp, #8]
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	9301      	str	r3, [sp, #4]
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	f005 ff03 	bl	8019ad2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013ccc:	2300      	movs	r3, #0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3710      	adds	r7, #16
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}

08013cd6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8013cd6:	b580      	push	{r7, lr}
 8013cd8:	b088      	sub	sp, #32
 8013cda:	af04      	add	r7, sp, #16
 8013cdc:	60f8      	str	r0, [r7, #12]
 8013cde:	60b9      	str	r1, [r7, #8]
 8013ce0:	4611      	mov	r1, r2
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	460b      	mov	r3, r1
 8013ce6:	80fb      	strh	r3, [r7, #6]
 8013ce8:	4613      	mov	r3, r2
 8013cea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013cec:	7979      	ldrb	r1, [r7, #5]
 8013cee:	2300      	movs	r3, #0
 8013cf0:	9303      	str	r3, [sp, #12]
 8013cf2:	88fb      	ldrh	r3, [r7, #6]
 8013cf4:	9302      	str	r3, [sp, #8]
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	9301      	str	r3, [sp, #4]
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	2300      	movs	r3, #0
 8013d00:	2201      	movs	r2, #1
 8013d02:	68f8      	ldr	r0, [r7, #12]
 8013d04:	f005 fee5 	bl	8019ad2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013d08:	2300      	movs	r3, #0

}
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	3710      	adds	r7, #16
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}

08013d12 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8013d12:	b580      	push	{r7, lr}
 8013d14:	b088      	sub	sp, #32
 8013d16:	af04      	add	r7, sp, #16
 8013d18:	60f8      	str	r0, [r7, #12]
 8013d1a:	60b9      	str	r1, [r7, #8]
 8013d1c:	4611      	mov	r1, r2
 8013d1e:	461a      	mov	r2, r3
 8013d20:	460b      	mov	r3, r1
 8013d22:	80fb      	strh	r3, [r7, #6]
 8013d24:	4613      	mov	r3, r2
 8013d26:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d001      	beq.n	8013d36 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013d32:	2300      	movs	r3, #0
 8013d34:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013d36:	7979      	ldrb	r1, [r7, #5]
 8013d38:	7e3b      	ldrb	r3, [r7, #24]
 8013d3a:	9303      	str	r3, [sp, #12]
 8013d3c:	88fb      	ldrh	r3, [r7, #6]
 8013d3e:	9302      	str	r3, [sp, #8]
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	9301      	str	r3, [sp, #4]
 8013d44:	2301      	movs	r3, #1
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	2302      	movs	r3, #2
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	68f8      	ldr	r0, [r7, #12]
 8013d4e:	f005 fec0 	bl	8019ad2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8013d52:	2300      	movs	r3, #0
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3710      	adds	r7, #16
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}

08013d5c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b088      	sub	sp, #32
 8013d60:	af04      	add	r7, sp, #16
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	4611      	mov	r1, r2
 8013d68:	461a      	mov	r2, r3
 8013d6a:	460b      	mov	r3, r1
 8013d6c:	80fb      	strh	r3, [r7, #6]
 8013d6e:	4613      	mov	r3, r2
 8013d70:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013d72:	7979      	ldrb	r1, [r7, #5]
 8013d74:	2300      	movs	r3, #0
 8013d76:	9303      	str	r3, [sp, #12]
 8013d78:	88fb      	ldrh	r3, [r7, #6]
 8013d7a:	9302      	str	r3, [sp, #8]
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	9301      	str	r3, [sp, #4]
 8013d80:	2301      	movs	r3, #1
 8013d82:	9300      	str	r3, [sp, #0]
 8013d84:	2302      	movs	r3, #2
 8013d86:	2201      	movs	r2, #1
 8013d88:	68f8      	ldr	r0, [r7, #12]
 8013d8a:	f005 fea2 	bl	8019ad2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013d8e:	2300      	movs	r3, #0
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3710      	adds	r7, #16
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b086      	sub	sp, #24
 8013d9c:	af04      	add	r7, sp, #16
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	4608      	mov	r0, r1
 8013da2:	4611      	mov	r1, r2
 8013da4:	461a      	mov	r2, r3
 8013da6:	4603      	mov	r3, r0
 8013da8:	70fb      	strb	r3, [r7, #3]
 8013daa:	460b      	mov	r3, r1
 8013dac:	70bb      	strb	r3, [r7, #2]
 8013dae:	4613      	mov	r3, r2
 8013db0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8013db2:	7878      	ldrb	r0, [r7, #1]
 8013db4:	78ba      	ldrb	r2, [r7, #2]
 8013db6:	78f9      	ldrb	r1, [r7, #3]
 8013db8:	8b3b      	ldrh	r3, [r7, #24]
 8013dba:	9302      	str	r3, [sp, #8]
 8013dbc:	7d3b      	ldrb	r3, [r7, #20]
 8013dbe:	9301      	str	r3, [sp, #4]
 8013dc0:	7c3b      	ldrb	r3, [r7, #16]
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f005 fe35 	bl	8019a36 <USBH_LL_OpenPipe>

  return USBH_OK;
 8013dcc:	2300      	movs	r3, #0
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3708      	adds	r7, #8
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b082      	sub	sp, #8
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	460b      	mov	r3, r1
 8013de0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8013de2:	78fb      	ldrb	r3, [r7, #3]
 8013de4:	4619      	mov	r1, r3
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f005 fe54 	bl	8019a94 <USBH_LL_ClosePipe>

  return USBH_OK;
 8013dec:	2300      	movs	r3, #0
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	3708      	adds	r7, #8
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}

08013df6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8013df6:	b580      	push	{r7, lr}
 8013df8:	b084      	sub	sp, #16
 8013dfa:	af00      	add	r7, sp, #0
 8013dfc:	6078      	str	r0, [r7, #4]
 8013dfe:	460b      	mov	r3, r1
 8013e00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 f836 	bl	8013e74 <USBH_GetFreePipe>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8013e0c:	89fb      	ldrh	r3, [r7, #14]
 8013e0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e12:	4293      	cmp	r3, r2
 8013e14:	d00a      	beq.n	8013e2c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8013e16:	78fa      	ldrb	r2, [r7, #3]
 8013e18:	89fb      	ldrh	r3, [r7, #14]
 8013e1a:	f003 030f 	and.w	r3, r3, #15
 8013e1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013e22:	6879      	ldr	r1, [r7, #4]
 8013e24:	33e0      	adds	r3, #224	@ 0xe0
 8013e26:	009b      	lsls	r3, r3, #2
 8013e28:	440b      	add	r3, r1
 8013e2a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013e2c:	89fb      	ldrh	r3, [r7, #14]
 8013e2e:	b2db      	uxtb	r3, r3
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3710      	adds	r7, #16
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b083      	sub	sp, #12
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	460b      	mov	r3, r1
 8013e42:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8013e44:	78fb      	ldrb	r3, [r7, #3]
 8013e46:	2b0f      	cmp	r3, #15
 8013e48:	d80d      	bhi.n	8013e66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8013e4a:	78fb      	ldrb	r3, [r7, #3]
 8013e4c:	687a      	ldr	r2, [r7, #4]
 8013e4e:	33e0      	adds	r3, #224	@ 0xe0
 8013e50:	009b      	lsls	r3, r3, #2
 8013e52:	4413      	add	r3, r2
 8013e54:	685a      	ldr	r2, [r3, #4]
 8013e56:	78fb      	ldrb	r3, [r7, #3]
 8013e58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013e5c:	6879      	ldr	r1, [r7, #4]
 8013e5e:	33e0      	adds	r3, #224	@ 0xe0
 8013e60:	009b      	lsls	r3, r3, #2
 8013e62:	440b      	add	r3, r1
 8013e64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8013e66:	2300      	movs	r3, #0
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	370c      	adds	r7, #12
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e72:	4770      	bx	lr

08013e74 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8013e74:	b480      	push	{r7}
 8013e76:	b085      	sub	sp, #20
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013e80:	2300      	movs	r3, #0
 8013e82:	73fb      	strb	r3, [r7, #15]
 8013e84:	e00f      	b.n	8013ea6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8013e86:	7bfb      	ldrb	r3, [r7, #15]
 8013e88:	687a      	ldr	r2, [r7, #4]
 8013e8a:	33e0      	adds	r3, #224	@ 0xe0
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	4413      	add	r3, r2
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d102      	bne.n	8013ea0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8013e9a:	7bfb      	ldrb	r3, [r7, #15]
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	e007      	b.n	8013eb0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013ea0:	7bfb      	ldrb	r3, [r7, #15]
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	73fb      	strb	r3, [r7, #15]
 8013ea6:	7bfb      	ldrb	r3, [r7, #15]
 8013ea8:	2b0f      	cmp	r3, #15
 8013eaa:	d9ec      	bls.n	8013e86 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8013eac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3714      	adds	r7, #20
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013ec6:	79fb      	ldrb	r3, [r7, #7]
 8013ec8:	4a08      	ldr	r2, [pc, #32]	@ (8013eec <disk_status+0x30>)
 8013eca:	009b      	lsls	r3, r3, #2
 8013ecc:	4413      	add	r3, r2
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	79fa      	ldrb	r2, [r7, #7]
 8013ed4:	4905      	ldr	r1, [pc, #20]	@ (8013eec <disk_status+0x30>)
 8013ed6:	440a      	add	r2, r1
 8013ed8:	7a12      	ldrb	r2, [r2, #8]
 8013eda:	4610      	mov	r0, r2
 8013edc:	4798      	blx	r3
 8013ede:	4603      	mov	r3, r0
 8013ee0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3710      	adds	r7, #16
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}
 8013eec:	20001804 	.word	0x20001804

08013ef0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b084      	sub	sp, #16
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8013efa:	2300      	movs	r3, #0
 8013efc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8013efe:	79fb      	ldrb	r3, [r7, #7]
 8013f00:	4a0d      	ldr	r2, [pc, #52]	@ (8013f38 <disk_initialize+0x48>)
 8013f02:	5cd3      	ldrb	r3, [r2, r3]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d111      	bne.n	8013f2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013f08:	79fb      	ldrb	r3, [r7, #7]
 8013f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8013f38 <disk_initialize+0x48>)
 8013f0c:	2101      	movs	r1, #1
 8013f0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013f10:	79fb      	ldrb	r3, [r7, #7]
 8013f12:	4a09      	ldr	r2, [pc, #36]	@ (8013f38 <disk_initialize+0x48>)
 8013f14:	009b      	lsls	r3, r3, #2
 8013f16:	4413      	add	r3, r2
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	79fa      	ldrb	r2, [r7, #7]
 8013f1e:	4906      	ldr	r1, [pc, #24]	@ (8013f38 <disk_initialize+0x48>)
 8013f20:	440a      	add	r2, r1
 8013f22:	7a12      	ldrb	r2, [r2, #8]
 8013f24:	4610      	mov	r0, r2
 8013f26:	4798      	blx	r3
 8013f28:	4603      	mov	r3, r0
 8013f2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3710      	adds	r7, #16
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	20001804 	.word	0x20001804

08013f3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013f3c:	b590      	push	{r4, r7, lr}
 8013f3e:	b087      	sub	sp, #28
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	60b9      	str	r1, [r7, #8]
 8013f44:	607a      	str	r2, [r7, #4]
 8013f46:	603b      	str	r3, [r7, #0]
 8013f48:	4603      	mov	r3, r0
 8013f4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013f4c:	7bfb      	ldrb	r3, [r7, #15]
 8013f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8013f78 <disk_read+0x3c>)
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	4413      	add	r3, r2
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	689c      	ldr	r4, [r3, #8]
 8013f58:	7bfb      	ldrb	r3, [r7, #15]
 8013f5a:	4a07      	ldr	r2, [pc, #28]	@ (8013f78 <disk_read+0x3c>)
 8013f5c:	4413      	add	r3, r2
 8013f5e:	7a18      	ldrb	r0, [r3, #8]
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	68b9      	ldr	r1, [r7, #8]
 8013f66:	47a0      	blx	r4
 8013f68:	4603      	mov	r3, r0
 8013f6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8013f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	371c      	adds	r7, #28
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd90      	pop	{r4, r7, pc}
 8013f76:	bf00      	nop
 8013f78:	20001804 	.word	0x20001804

08013f7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013f7c:	b590      	push	{r4, r7, lr}
 8013f7e:	b087      	sub	sp, #28
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60b9      	str	r1, [r7, #8]
 8013f84:	607a      	str	r2, [r7, #4]
 8013f86:	603b      	str	r3, [r7, #0]
 8013f88:	4603      	mov	r3, r0
 8013f8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013f8c:	7bfb      	ldrb	r3, [r7, #15]
 8013f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8013fb8 <disk_write+0x3c>)
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	4413      	add	r3, r2
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	68dc      	ldr	r4, [r3, #12]
 8013f98:	7bfb      	ldrb	r3, [r7, #15]
 8013f9a:	4a07      	ldr	r2, [pc, #28]	@ (8013fb8 <disk_write+0x3c>)
 8013f9c:	4413      	add	r3, r2
 8013f9e:	7a18      	ldrb	r0, [r3, #8]
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	68b9      	ldr	r1, [r7, #8]
 8013fa6:	47a0      	blx	r4
 8013fa8:	4603      	mov	r3, r0
 8013faa:	75fb      	strb	r3, [r7, #23]
  return res;
 8013fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	371c      	adds	r7, #28
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd90      	pop	{r4, r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	20001804 	.word	0x20001804

08013fbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	603a      	str	r2, [r7, #0]
 8013fc6:	71fb      	strb	r3, [r7, #7]
 8013fc8:	460b      	mov	r3, r1
 8013fca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013fcc:	79fb      	ldrb	r3, [r7, #7]
 8013fce:	4a09      	ldr	r2, [pc, #36]	@ (8013ff4 <disk_ioctl+0x38>)
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	4413      	add	r3, r2
 8013fd4:	685b      	ldr	r3, [r3, #4]
 8013fd6:	691b      	ldr	r3, [r3, #16]
 8013fd8:	79fa      	ldrb	r2, [r7, #7]
 8013fda:	4906      	ldr	r1, [pc, #24]	@ (8013ff4 <disk_ioctl+0x38>)
 8013fdc:	440a      	add	r2, r1
 8013fde:	7a10      	ldrb	r0, [r2, #8]
 8013fe0:	79b9      	ldrb	r1, [r7, #6]
 8013fe2:	683a      	ldr	r2, [r7, #0]
 8013fe4:	4798      	blx	r3
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	73fb      	strb	r3, [r7, #15]
  return res;
 8013fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3710      	adds	r7, #16
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	20001804 	.word	0x20001804

08013ff8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b085      	sub	sp, #20
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	3301      	adds	r3, #1
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014008:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801400c:	021b      	lsls	r3, r3, #8
 801400e:	b21a      	sxth	r2, r3
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	781b      	ldrb	r3, [r3, #0]
 8014014:	b21b      	sxth	r3, r3
 8014016:	4313      	orrs	r3, r2
 8014018:	b21b      	sxth	r3, r3
 801401a:	81fb      	strh	r3, [r7, #14]
	return rv;
 801401c:	89fb      	ldrh	r3, [r7, #14]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3714      	adds	r7, #20
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr

0801402a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801402a:	b480      	push	{r7}
 801402c:	b085      	sub	sp, #20
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	3303      	adds	r3, #3
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	021b      	lsls	r3, r3, #8
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	3202      	adds	r2, #2
 8014042:	7812      	ldrb	r2, [r2, #0]
 8014044:	4313      	orrs	r3, r2
 8014046:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	021b      	lsls	r3, r3, #8
 801404c:	687a      	ldr	r2, [r7, #4]
 801404e:	3201      	adds	r2, #1
 8014050:	7812      	ldrb	r2, [r2, #0]
 8014052:	4313      	orrs	r3, r2
 8014054:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	021b      	lsls	r3, r3, #8
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	7812      	ldrb	r2, [r2, #0]
 801405e:	4313      	orrs	r3, r2
 8014060:	60fb      	str	r3, [r7, #12]
	return rv;
 8014062:	68fb      	ldr	r3, [r7, #12]
}
 8014064:	4618      	mov	r0, r3
 8014066:	3714      	adds	r7, #20
 8014068:	46bd      	mov	sp, r7
 801406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406e:	4770      	bx	lr

08014070 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014070:	b480      	push	{r7}
 8014072:	b083      	sub	sp, #12
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	460b      	mov	r3, r1
 801407a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	607a      	str	r2, [r7, #4]
 8014082:	887a      	ldrh	r2, [r7, #2]
 8014084:	b2d2      	uxtb	r2, r2
 8014086:	701a      	strb	r2, [r3, #0]
 8014088:	887b      	ldrh	r3, [r7, #2]
 801408a:	0a1b      	lsrs	r3, r3, #8
 801408c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	1c5a      	adds	r2, r3, #1
 8014092:	607a      	str	r2, [r7, #4]
 8014094:	887a      	ldrh	r2, [r7, #2]
 8014096:	b2d2      	uxtb	r2, r2
 8014098:	701a      	strb	r2, [r3, #0]
}
 801409a:	bf00      	nop
 801409c:	370c      	adds	r7, #12
 801409e:	46bd      	mov	sp, r7
 80140a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a4:	4770      	bx	lr

080140a6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80140a6:	b480      	push	{r7}
 80140a8:	b083      	sub	sp, #12
 80140aa:	af00      	add	r7, sp, #0
 80140ac:	6078      	str	r0, [r7, #4]
 80140ae:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	1c5a      	adds	r2, r3, #1
 80140b4:	607a      	str	r2, [r7, #4]
 80140b6:	683a      	ldr	r2, [r7, #0]
 80140b8:	b2d2      	uxtb	r2, r2
 80140ba:	701a      	strb	r2, [r3, #0]
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	0a1b      	lsrs	r3, r3, #8
 80140c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	1c5a      	adds	r2, r3, #1
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	683a      	ldr	r2, [r7, #0]
 80140ca:	b2d2      	uxtb	r2, r2
 80140cc:	701a      	strb	r2, [r3, #0]
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	0a1b      	lsrs	r3, r3, #8
 80140d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	1c5a      	adds	r2, r3, #1
 80140d8:	607a      	str	r2, [r7, #4]
 80140da:	683a      	ldr	r2, [r7, #0]
 80140dc:	b2d2      	uxtb	r2, r2
 80140de:	701a      	strb	r2, [r3, #0]
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	0a1b      	lsrs	r3, r3, #8
 80140e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	1c5a      	adds	r2, r3, #1
 80140ea:	607a      	str	r2, [r7, #4]
 80140ec:	683a      	ldr	r2, [r7, #0]
 80140ee:	b2d2      	uxtb	r2, r2
 80140f0:	701a      	strb	r2, [r3, #0]
}
 80140f2:	bf00      	nop
 80140f4:	370c      	adds	r7, #12
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr

080140fe <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80140fe:	b480      	push	{r7}
 8014100:	b087      	sub	sp, #28
 8014102:	af00      	add	r7, sp, #0
 8014104:	60f8      	str	r0, [r7, #12]
 8014106:	60b9      	str	r1, [r7, #8]
 8014108:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d00d      	beq.n	8014134 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014118:	693a      	ldr	r2, [r7, #16]
 801411a:	1c53      	adds	r3, r2, #1
 801411c:	613b      	str	r3, [r7, #16]
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	1c59      	adds	r1, r3, #1
 8014122:	6179      	str	r1, [r7, #20]
 8014124:	7812      	ldrb	r2, [r2, #0]
 8014126:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	3b01      	subs	r3, #1
 801412c:	607b      	str	r3, [r7, #4]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d1f1      	bne.n	8014118 <mem_cpy+0x1a>
	}
}
 8014134:	bf00      	nop
 8014136:	371c      	adds	r7, #28
 8014138:	46bd      	mov	sp, r7
 801413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413e:	4770      	bx	lr

08014140 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014140:	b480      	push	{r7}
 8014142:	b087      	sub	sp, #28
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	1c5a      	adds	r2, r3, #1
 8014154:	617a      	str	r2, [r7, #20]
 8014156:	68ba      	ldr	r2, [r7, #8]
 8014158:	b2d2      	uxtb	r2, r2
 801415a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	3b01      	subs	r3, #1
 8014160:	607b      	str	r3, [r7, #4]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d1f3      	bne.n	8014150 <mem_set+0x10>
}
 8014168:	bf00      	nop
 801416a:	bf00      	nop
 801416c:	371c      	adds	r7, #28
 801416e:	46bd      	mov	sp, r7
 8014170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014174:	4770      	bx	lr

08014176 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014176:	b480      	push	{r7}
 8014178:	b089      	sub	sp, #36	@ 0x24
 801417a:	af00      	add	r7, sp, #0
 801417c:	60f8      	str	r0, [r7, #12]
 801417e:	60b9      	str	r1, [r7, #8]
 8014180:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	61fb      	str	r3, [r7, #28]
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801418a:	2300      	movs	r3, #0
 801418c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	1c5a      	adds	r2, r3, #1
 8014192:	61fa      	str	r2, [r7, #28]
 8014194:	781b      	ldrb	r3, [r3, #0]
 8014196:	4619      	mov	r1, r3
 8014198:	69bb      	ldr	r3, [r7, #24]
 801419a:	1c5a      	adds	r2, r3, #1
 801419c:	61ba      	str	r2, [r7, #24]
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	1acb      	subs	r3, r1, r3
 80141a2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	3b01      	subs	r3, #1
 80141a8:	607b      	str	r3, [r7, #4]
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d002      	beq.n	80141b6 <mem_cmp+0x40>
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d0eb      	beq.n	801418e <mem_cmp+0x18>

	return r;
 80141b6:	697b      	ldr	r3, [r7, #20]
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3724      	adds	r7, #36	@ 0x24
 80141bc:	46bd      	mov	sp, r7
 80141be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c2:	4770      	bx	lr

080141c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80141c4:	b480      	push	{r7}
 80141c6:	b083      	sub	sp, #12
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80141ce:	e002      	b.n	80141d6 <chk_chr+0x12>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	3301      	adds	r3, #1
 80141d4:	607b      	str	r3, [r7, #4]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	781b      	ldrb	r3, [r3, #0]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d005      	beq.n	80141ea <chk_chr+0x26>
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	461a      	mov	r2, r3
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	4293      	cmp	r3, r2
 80141e8:	d1f2      	bne.n	80141d0 <chk_chr+0xc>
	return *str;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	781b      	ldrb	r3, [r3, #0]
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	370c      	adds	r7, #12
 80141f2:	46bd      	mov	sp, r7
 80141f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f8:	4770      	bx	lr

080141fa <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80141fa:	b580      	push	{r7, lr}
 80141fc:	b082      	sub	sp, #8
 80141fe:	af00      	add	r7, sp, #0
 8014200:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d009      	beq.n	801421c <lock_fs+0x22>
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	4618      	mov	r0, r3
 801420e:	f002 f9f2 	bl	80165f6 <ff_req_grant>
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d001      	beq.n	801421c <lock_fs+0x22>
 8014218:	2301      	movs	r3, #1
 801421a:	e000      	b.n	801421e <lock_fs+0x24>
 801421c:	2300      	movs	r3, #0
}
 801421e:	4618      	mov	r0, r3
 8014220:	3708      	adds	r7, #8
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}

08014226 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8014226:	b580      	push	{r7, lr}
 8014228:	b082      	sub	sp, #8
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
 801422e:	460b      	mov	r3, r1
 8014230:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00d      	beq.n	8014254 <unlock_fs+0x2e>
 8014238:	78fb      	ldrb	r3, [r7, #3]
 801423a:	2b0c      	cmp	r3, #12
 801423c:	d00a      	beq.n	8014254 <unlock_fs+0x2e>
 801423e:	78fb      	ldrb	r3, [r7, #3]
 8014240:	2b0b      	cmp	r3, #11
 8014242:	d007      	beq.n	8014254 <unlock_fs+0x2e>
 8014244:	78fb      	ldrb	r3, [r7, #3]
 8014246:	2b0f      	cmp	r3, #15
 8014248:	d004      	beq.n	8014254 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	4618      	mov	r0, r3
 8014250:	f002 f9e6 	bl	8016620 <ff_rel_grant>
	}
}
 8014254:	bf00      	nop
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014266:	2300      	movs	r3, #0
 8014268:	60bb      	str	r3, [r7, #8]
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	60fb      	str	r3, [r7, #12]
 801426e:	e029      	b.n	80142c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014270:	4a27      	ldr	r2, [pc, #156]	@ (8014310 <chk_lock+0xb4>)
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	011b      	lsls	r3, r3, #4
 8014276:	4413      	add	r3, r2
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d01d      	beq.n	80142ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801427e:	4a24      	ldr	r2, [pc, #144]	@ (8014310 <chk_lock+0xb4>)
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	011b      	lsls	r3, r3, #4
 8014284:	4413      	add	r3, r2
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	429a      	cmp	r2, r3
 801428e:	d116      	bne.n	80142be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014290:	4a1f      	ldr	r2, [pc, #124]	@ (8014310 <chk_lock+0xb4>)
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	011b      	lsls	r3, r3, #4
 8014296:	4413      	add	r3, r2
 8014298:	3304      	adds	r3, #4
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d10c      	bne.n	80142be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80142a4:	4a1a      	ldr	r2, [pc, #104]	@ (8014310 <chk_lock+0xb4>)
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	011b      	lsls	r3, r3, #4
 80142aa:	4413      	add	r3, r2
 80142ac:	3308      	adds	r3, #8
 80142ae:	681a      	ldr	r2, [r3, #0]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d102      	bne.n	80142be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80142b8:	e007      	b.n	80142ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80142ba:	2301      	movs	r3, #1
 80142bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	3301      	adds	r3, #1
 80142c2:	60fb      	str	r3, [r7, #12]
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2b01      	cmp	r3, #1
 80142c8:	d9d2      	bls.n	8014270 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	2b02      	cmp	r3, #2
 80142ce:	d109      	bne.n	80142e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d102      	bne.n	80142dc <chk_lock+0x80>
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	2b02      	cmp	r3, #2
 80142da:	d101      	bne.n	80142e0 <chk_lock+0x84>
 80142dc:	2300      	movs	r3, #0
 80142de:	e010      	b.n	8014302 <chk_lock+0xa6>
 80142e0:	2312      	movs	r3, #18
 80142e2:	e00e      	b.n	8014302 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d108      	bne.n	80142fc <chk_lock+0xa0>
 80142ea:	4a09      	ldr	r2, [pc, #36]	@ (8014310 <chk_lock+0xb4>)
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	011b      	lsls	r3, r3, #4
 80142f0:	4413      	add	r3, r2
 80142f2:	330c      	adds	r3, #12
 80142f4:	881b      	ldrh	r3, [r3, #0]
 80142f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80142fa:	d101      	bne.n	8014300 <chk_lock+0xa4>
 80142fc:	2310      	movs	r3, #16
 80142fe:	e000      	b.n	8014302 <chk_lock+0xa6>
 8014300:	2300      	movs	r3, #0
}
 8014302:	4618      	mov	r0, r3
 8014304:	3714      	adds	r7, #20
 8014306:	46bd      	mov	sp, r7
 8014308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop
 8014310:	200017e4 	.word	0x200017e4

08014314 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014314:	b480      	push	{r7}
 8014316:	b083      	sub	sp, #12
 8014318:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801431a:	2300      	movs	r3, #0
 801431c:	607b      	str	r3, [r7, #4]
 801431e:	e002      	b.n	8014326 <enq_lock+0x12>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	3301      	adds	r3, #1
 8014324:	607b      	str	r3, [r7, #4]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2b01      	cmp	r3, #1
 801432a:	d806      	bhi.n	801433a <enq_lock+0x26>
 801432c:	4a09      	ldr	r2, [pc, #36]	@ (8014354 <enq_lock+0x40>)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	011b      	lsls	r3, r3, #4
 8014332:	4413      	add	r3, r2
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d1f2      	bne.n	8014320 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2b02      	cmp	r3, #2
 801433e:	bf14      	ite	ne
 8014340:	2301      	movne	r3, #1
 8014342:	2300      	moveq	r3, #0
 8014344:	b2db      	uxtb	r3, r3
}
 8014346:	4618      	mov	r0, r3
 8014348:	370c      	adds	r7, #12
 801434a:	46bd      	mov	sp, r7
 801434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014350:	4770      	bx	lr
 8014352:	bf00      	nop
 8014354:	200017e4 	.word	0x200017e4

08014358 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014358:	b480      	push	{r7}
 801435a:	b085      	sub	sp, #20
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014362:	2300      	movs	r3, #0
 8014364:	60fb      	str	r3, [r7, #12]
 8014366:	e01f      	b.n	80143a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014368:	4a41      	ldr	r2, [pc, #260]	@ (8014470 <inc_lock+0x118>)
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	011b      	lsls	r3, r3, #4
 801436e:	4413      	add	r3, r2
 8014370:	681a      	ldr	r2, [r3, #0]
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	429a      	cmp	r2, r3
 8014378:	d113      	bne.n	80143a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801437a:	4a3d      	ldr	r2, [pc, #244]	@ (8014470 <inc_lock+0x118>)
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	011b      	lsls	r3, r3, #4
 8014380:	4413      	add	r3, r2
 8014382:	3304      	adds	r3, #4
 8014384:	681a      	ldr	r2, [r3, #0]
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801438a:	429a      	cmp	r2, r3
 801438c:	d109      	bne.n	80143a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801438e:	4a38      	ldr	r2, [pc, #224]	@ (8014470 <inc_lock+0x118>)
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	011b      	lsls	r3, r3, #4
 8014394:	4413      	add	r3, r2
 8014396:	3308      	adds	r3, #8
 8014398:	681a      	ldr	r2, [r3, #0]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801439e:	429a      	cmp	r2, r3
 80143a0:	d006      	beq.n	80143b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	3301      	adds	r3, #1
 80143a6:	60fb      	str	r3, [r7, #12]
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d9dc      	bls.n	8014368 <inc_lock+0x10>
 80143ae:	e000      	b.n	80143b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80143b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	2b02      	cmp	r3, #2
 80143b6:	d132      	bne.n	801441e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80143b8:	2300      	movs	r3, #0
 80143ba:	60fb      	str	r3, [r7, #12]
 80143bc:	e002      	b.n	80143c4 <inc_lock+0x6c>
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	3301      	adds	r3, #1
 80143c2:	60fb      	str	r3, [r7, #12]
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2b01      	cmp	r3, #1
 80143c8:	d806      	bhi.n	80143d8 <inc_lock+0x80>
 80143ca:	4a29      	ldr	r2, [pc, #164]	@ (8014470 <inc_lock+0x118>)
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	011b      	lsls	r3, r3, #4
 80143d0:	4413      	add	r3, r2
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d1f2      	bne.n	80143be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	2b02      	cmp	r3, #2
 80143dc:	d101      	bne.n	80143e2 <inc_lock+0x8a>
 80143de:	2300      	movs	r3, #0
 80143e0:	e040      	b.n	8014464 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681a      	ldr	r2, [r3, #0]
 80143e6:	4922      	ldr	r1, [pc, #136]	@ (8014470 <inc_lock+0x118>)
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	011b      	lsls	r3, r3, #4
 80143ec:	440b      	add	r3, r1
 80143ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	689a      	ldr	r2, [r3, #8]
 80143f4:	491e      	ldr	r1, [pc, #120]	@ (8014470 <inc_lock+0x118>)
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	011b      	lsls	r3, r3, #4
 80143fa:	440b      	add	r3, r1
 80143fc:	3304      	adds	r3, #4
 80143fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	695a      	ldr	r2, [r3, #20]
 8014404:	491a      	ldr	r1, [pc, #104]	@ (8014470 <inc_lock+0x118>)
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	011b      	lsls	r3, r3, #4
 801440a:	440b      	add	r3, r1
 801440c:	3308      	adds	r3, #8
 801440e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014410:	4a17      	ldr	r2, [pc, #92]	@ (8014470 <inc_lock+0x118>)
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	011b      	lsls	r3, r3, #4
 8014416:	4413      	add	r3, r2
 8014418:	330c      	adds	r3, #12
 801441a:	2200      	movs	r2, #0
 801441c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d009      	beq.n	8014438 <inc_lock+0xe0>
 8014424:	4a12      	ldr	r2, [pc, #72]	@ (8014470 <inc_lock+0x118>)
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	011b      	lsls	r3, r3, #4
 801442a:	4413      	add	r3, r2
 801442c:	330c      	adds	r3, #12
 801442e:	881b      	ldrh	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d001      	beq.n	8014438 <inc_lock+0xe0>
 8014434:	2300      	movs	r3, #0
 8014436:	e015      	b.n	8014464 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d108      	bne.n	8014450 <inc_lock+0xf8>
 801443e:	4a0c      	ldr	r2, [pc, #48]	@ (8014470 <inc_lock+0x118>)
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	011b      	lsls	r3, r3, #4
 8014444:	4413      	add	r3, r2
 8014446:	330c      	adds	r3, #12
 8014448:	881b      	ldrh	r3, [r3, #0]
 801444a:	3301      	adds	r3, #1
 801444c:	b29a      	uxth	r2, r3
 801444e:	e001      	b.n	8014454 <inc_lock+0xfc>
 8014450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014454:	4906      	ldr	r1, [pc, #24]	@ (8014470 <inc_lock+0x118>)
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	011b      	lsls	r3, r3, #4
 801445a:	440b      	add	r3, r1
 801445c:	330c      	adds	r3, #12
 801445e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	3301      	adds	r3, #1
}
 8014464:	4618      	mov	r0, r3
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr
 8014470:	200017e4 	.word	0x200017e4

08014474 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8014474:	b480      	push	{r7}
 8014476:	b085      	sub	sp, #20
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	3b01      	subs	r3, #1
 8014480:	607b      	str	r3, [r7, #4]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2b01      	cmp	r3, #1
 8014486:	d825      	bhi.n	80144d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8014488:	4a17      	ldr	r2, [pc, #92]	@ (80144e8 <dec_lock+0x74>)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	011b      	lsls	r3, r3, #4
 801448e:	4413      	add	r3, r2
 8014490:	330c      	adds	r3, #12
 8014492:	881b      	ldrh	r3, [r3, #0]
 8014494:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8014496:	89fb      	ldrh	r3, [r7, #14]
 8014498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801449c:	d101      	bne.n	80144a2 <dec_lock+0x2e>
 801449e:	2300      	movs	r3, #0
 80144a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80144a2:	89fb      	ldrh	r3, [r7, #14]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d002      	beq.n	80144ae <dec_lock+0x3a>
 80144a8:	89fb      	ldrh	r3, [r7, #14]
 80144aa:	3b01      	subs	r3, #1
 80144ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80144ae:	4a0e      	ldr	r2, [pc, #56]	@ (80144e8 <dec_lock+0x74>)
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	011b      	lsls	r3, r3, #4
 80144b4:	4413      	add	r3, r2
 80144b6:	330c      	adds	r3, #12
 80144b8:	89fa      	ldrh	r2, [r7, #14]
 80144ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80144bc:	89fb      	ldrh	r3, [r7, #14]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d105      	bne.n	80144ce <dec_lock+0x5a>
 80144c2:	4a09      	ldr	r2, [pc, #36]	@ (80144e8 <dec_lock+0x74>)
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	011b      	lsls	r3, r3, #4
 80144c8:	4413      	add	r3, r2
 80144ca:	2200      	movs	r2, #0
 80144cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80144ce:	2300      	movs	r3, #0
 80144d0:	737b      	strb	r3, [r7, #13]
 80144d2:	e001      	b.n	80144d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80144d4:	2302      	movs	r3, #2
 80144d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80144d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3714      	adds	r7, #20
 80144de:	46bd      	mov	sp, r7
 80144e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop
 80144e8:	200017e4 	.word	0x200017e4

080144ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80144ec:	b480      	push	{r7}
 80144ee:	b085      	sub	sp, #20
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80144f4:	2300      	movs	r3, #0
 80144f6:	60fb      	str	r3, [r7, #12]
 80144f8:	e010      	b.n	801451c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80144fa:	4a0d      	ldr	r2, [pc, #52]	@ (8014530 <clear_lock+0x44>)
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	011b      	lsls	r3, r3, #4
 8014500:	4413      	add	r3, r2
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	687a      	ldr	r2, [r7, #4]
 8014506:	429a      	cmp	r2, r3
 8014508:	d105      	bne.n	8014516 <clear_lock+0x2a>
 801450a:	4a09      	ldr	r2, [pc, #36]	@ (8014530 <clear_lock+0x44>)
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	011b      	lsls	r3, r3, #4
 8014510:	4413      	add	r3, r2
 8014512:	2200      	movs	r2, #0
 8014514:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	3301      	adds	r3, #1
 801451a:	60fb      	str	r3, [r7, #12]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	2b01      	cmp	r3, #1
 8014520:	d9eb      	bls.n	80144fa <clear_lock+0xe>
	}
}
 8014522:	bf00      	nop
 8014524:	bf00      	nop
 8014526:	3714      	adds	r7, #20
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr
 8014530:	200017e4 	.word	0x200017e4

08014534 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b086      	sub	sp, #24
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	78db      	ldrb	r3, [r3, #3]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d034      	beq.n	80145b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801454c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	7858      	ldrb	r0, [r3, #1]
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014558:	2301      	movs	r3, #1
 801455a:	697a      	ldr	r2, [r7, #20]
 801455c:	f7ff fd0e 	bl	8013f7c <disk_write>
 8014560:	4603      	mov	r3, r0
 8014562:	2b00      	cmp	r3, #0
 8014564:	d002      	beq.n	801456c <sync_window+0x38>
			res = FR_DISK_ERR;
 8014566:	2301      	movs	r3, #1
 8014568:	73fb      	strb	r3, [r7, #15]
 801456a:	e022      	b.n	80145b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2200      	movs	r2, #0
 8014570:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014576:	697a      	ldr	r2, [r7, #20]
 8014578:	1ad2      	subs	r2, r2, r3
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	69db      	ldr	r3, [r3, #28]
 801457e:	429a      	cmp	r2, r3
 8014580:	d217      	bcs.n	80145b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	789b      	ldrb	r3, [r3, #2]
 8014586:	613b      	str	r3, [r7, #16]
 8014588:	e010      	b.n	80145ac <sync_window+0x78>
					wsect += fs->fsize;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	69db      	ldr	r3, [r3, #28]
 801458e:	697a      	ldr	r2, [r7, #20]
 8014590:	4413      	add	r3, r2
 8014592:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	7858      	ldrb	r0, [r3, #1]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801459e:	2301      	movs	r3, #1
 80145a0:	697a      	ldr	r2, [r7, #20]
 80145a2:	f7ff fceb 	bl	8013f7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	613b      	str	r3, [r7, #16]
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	2b01      	cmp	r3, #1
 80145b0:	d8eb      	bhi.n	801458a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80145b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3718      	adds	r7, #24
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80145c6:	2300      	movs	r3, #0
 80145c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145ce:	683a      	ldr	r2, [r7, #0]
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d01b      	beq.n	801460c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f7ff ffad 	bl	8014534 <sync_window>
 80145da:	4603      	mov	r3, r0
 80145dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80145de:	7bfb      	ldrb	r3, [r7, #15]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d113      	bne.n	801460c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	7858      	ldrb	r0, [r3, #1]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80145ee:	2301      	movs	r3, #1
 80145f0:	683a      	ldr	r2, [r7, #0]
 80145f2:	f7ff fca3 	bl	8013f3c <disk_read>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d004      	beq.n	8014606 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80145fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014600:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014602:	2301      	movs	r3, #1
 8014604:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	683a      	ldr	r2, [r7, #0]
 801460a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 801460c:	7bfb      	ldrb	r3, [r7, #15]
}
 801460e:	4618      	mov	r0, r3
 8014610:	3710      	adds	r7, #16
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
	...

08014618 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f7ff ff87 	bl	8014534 <sync_window>
 8014626:	4603      	mov	r3, r0
 8014628:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801462a:	7bfb      	ldrb	r3, [r7, #15]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d158      	bne.n	80146e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	781b      	ldrb	r3, [r3, #0]
 8014634:	2b03      	cmp	r3, #3
 8014636:	d148      	bne.n	80146ca <sync_fs+0xb2>
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	791b      	ldrb	r3, [r3, #4]
 801463c:	2b01      	cmp	r3, #1
 801463e:	d144      	bne.n	80146ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	3334      	adds	r3, #52	@ 0x34
 8014644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014648:	2100      	movs	r1, #0
 801464a:	4618      	mov	r0, r3
 801464c:	f7ff fd78 	bl	8014140 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	3334      	adds	r3, #52	@ 0x34
 8014654:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014658:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801465c:	4618      	mov	r0, r3
 801465e:	f7ff fd07 	bl	8014070 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	3334      	adds	r3, #52	@ 0x34
 8014666:	4921      	ldr	r1, [pc, #132]	@ (80146ec <sync_fs+0xd4>)
 8014668:	4618      	mov	r0, r3
 801466a:	f7ff fd1c 	bl	80140a6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	3334      	adds	r3, #52	@ 0x34
 8014672:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014676:	491e      	ldr	r1, [pc, #120]	@ (80146f0 <sync_fs+0xd8>)
 8014678:	4618      	mov	r0, r3
 801467a:	f7ff fd14 	bl	80140a6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	3334      	adds	r3, #52	@ 0x34
 8014682:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	695b      	ldr	r3, [r3, #20]
 801468a:	4619      	mov	r1, r3
 801468c:	4610      	mov	r0, r2
 801468e:	f7ff fd0a 	bl	80140a6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	3334      	adds	r3, #52	@ 0x34
 8014696:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	691b      	ldr	r3, [r3, #16]
 801469e:	4619      	mov	r1, r3
 80146a0:	4610      	mov	r0, r2
 80146a2:	f7ff fd00 	bl	80140a6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6a1b      	ldr	r3, [r3, #32]
 80146aa:	1c5a      	adds	r2, r3, #1
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	7858      	ldrb	r0, [r3, #1]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80146be:	2301      	movs	r3, #1
 80146c0:	f7ff fc5c 	bl	8013f7c <disk_write>
			fs->fsi_flag = 0;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2200      	movs	r2, #0
 80146c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	785b      	ldrb	r3, [r3, #1]
 80146ce:	2200      	movs	r2, #0
 80146d0:	2100      	movs	r1, #0
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7ff fc72 	bl	8013fbc <disk_ioctl>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d001      	beq.n	80146e2 <sync_fs+0xca>
 80146de:	2301      	movs	r3, #1
 80146e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80146e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3710      	adds	r7, #16
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	41615252 	.word	0x41615252
 80146f0:	61417272 	.word	0x61417272

080146f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b083      	sub	sp, #12
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	3b02      	subs	r3, #2
 8014702:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	699b      	ldr	r3, [r3, #24]
 8014708:	3b02      	subs	r3, #2
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	429a      	cmp	r2, r3
 801470e:	d301      	bcc.n	8014714 <clust2sect+0x20>
 8014710:	2300      	movs	r3, #0
 8014712:	e008      	b.n	8014726 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	895b      	ldrh	r3, [r3, #10]
 8014718:	461a      	mov	r2, r3
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	fb03 f202 	mul.w	r2, r3, r2
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014724:	4413      	add	r3, r2
}
 8014726:	4618      	mov	r0, r3
 8014728:	370c      	adds	r7, #12
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr

08014732 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b086      	sub	sp, #24
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
 801473a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	2b01      	cmp	r3, #1
 8014746:	d904      	bls.n	8014752 <get_fat+0x20>
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	699b      	ldr	r3, [r3, #24]
 801474c:	683a      	ldr	r2, [r7, #0]
 801474e:	429a      	cmp	r2, r3
 8014750:	d302      	bcc.n	8014758 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014752:	2301      	movs	r3, #1
 8014754:	617b      	str	r3, [r7, #20]
 8014756:	e08e      	b.n	8014876 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014758:	f04f 33ff 	mov.w	r3, #4294967295
 801475c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	781b      	ldrb	r3, [r3, #0]
 8014762:	2b03      	cmp	r3, #3
 8014764:	d061      	beq.n	801482a <get_fat+0xf8>
 8014766:	2b03      	cmp	r3, #3
 8014768:	dc7b      	bgt.n	8014862 <get_fat+0x130>
 801476a:	2b01      	cmp	r3, #1
 801476c:	d002      	beq.n	8014774 <get_fat+0x42>
 801476e:	2b02      	cmp	r3, #2
 8014770:	d041      	beq.n	80147f6 <get_fat+0xc4>
 8014772:	e076      	b.n	8014862 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	60fb      	str	r3, [r7, #12]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	085b      	lsrs	r3, r3, #1
 801477c:	68fa      	ldr	r2, [r7, #12]
 801477e:	4413      	add	r3, r2
 8014780:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	0a5b      	lsrs	r3, r3, #9
 801478a:	4413      	add	r3, r2
 801478c:	4619      	mov	r1, r3
 801478e:	6938      	ldr	r0, [r7, #16]
 8014790:	f7ff ff14 	bl	80145bc <move_window>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d166      	bne.n	8014868 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	1c5a      	adds	r2, r3, #1
 801479e:	60fa      	str	r2, [r7, #12]
 80147a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147a4:	693a      	ldr	r2, [r7, #16]
 80147a6:	4413      	add	r3, r2
 80147a8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80147ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	0a5b      	lsrs	r3, r3, #9
 80147b6:	4413      	add	r3, r2
 80147b8:	4619      	mov	r1, r3
 80147ba:	6938      	ldr	r0, [r7, #16]
 80147bc:	f7ff fefe 	bl	80145bc <move_window>
 80147c0:	4603      	mov	r3, r0
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d152      	bne.n	801486c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147cc:	693a      	ldr	r2, [r7, #16]
 80147ce:	4413      	add	r3, r2
 80147d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80147d4:	021b      	lsls	r3, r3, #8
 80147d6:	68ba      	ldr	r2, [r7, #8]
 80147d8:	4313      	orrs	r3, r2
 80147da:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	f003 0301 	and.w	r3, r3, #1
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d002      	beq.n	80147ec <get_fat+0xba>
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	091b      	lsrs	r3, r3, #4
 80147ea:	e002      	b.n	80147f2 <get_fat+0xc0>
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80147f2:	617b      	str	r3, [r7, #20]
			break;
 80147f4:	e03f      	b.n	8014876 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	0a1b      	lsrs	r3, r3, #8
 80147fe:	4413      	add	r3, r2
 8014800:	4619      	mov	r1, r3
 8014802:	6938      	ldr	r0, [r7, #16]
 8014804:	f7ff feda 	bl	80145bc <move_window>
 8014808:	4603      	mov	r3, r0
 801480a:	2b00      	cmp	r3, #0
 801480c:	d130      	bne.n	8014870 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801480e:	693b      	ldr	r3, [r7, #16]
 8014810:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	005b      	lsls	r3, r3, #1
 8014818:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801481c:	4413      	add	r3, r2
 801481e:	4618      	mov	r0, r3
 8014820:	f7ff fbea 	bl	8013ff8 <ld_word>
 8014824:	4603      	mov	r3, r0
 8014826:	617b      	str	r3, [r7, #20]
			break;
 8014828:	e025      	b.n	8014876 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	09db      	lsrs	r3, r3, #7
 8014832:	4413      	add	r3, r2
 8014834:	4619      	mov	r1, r3
 8014836:	6938      	ldr	r0, [r7, #16]
 8014838:	f7ff fec0 	bl	80145bc <move_window>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d118      	bne.n	8014874 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	009b      	lsls	r3, r3, #2
 801484c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014850:	4413      	add	r3, r2
 8014852:	4618      	mov	r0, r3
 8014854:	f7ff fbe9 	bl	801402a <ld_dword>
 8014858:	4603      	mov	r3, r0
 801485a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801485e:	617b      	str	r3, [r7, #20]
			break;
 8014860:	e009      	b.n	8014876 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014862:	2301      	movs	r3, #1
 8014864:	617b      	str	r3, [r7, #20]
 8014866:	e006      	b.n	8014876 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014868:	bf00      	nop
 801486a:	e004      	b.n	8014876 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801486c:	bf00      	nop
 801486e:	e002      	b.n	8014876 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014870:	bf00      	nop
 8014872:	e000      	b.n	8014876 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014874:	bf00      	nop
		}
	}

	return val;
 8014876:	697b      	ldr	r3, [r7, #20]
}
 8014878:	4618      	mov	r0, r3
 801487a:	3718      	adds	r7, #24
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}

08014880 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014880:	b590      	push	{r4, r7, lr}
 8014882:	b089      	sub	sp, #36	@ 0x24
 8014884:	af00      	add	r7, sp, #0
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	60b9      	str	r1, [r7, #8]
 801488a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801488c:	2302      	movs	r3, #2
 801488e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	2b01      	cmp	r3, #1
 8014894:	f240 80d9 	bls.w	8014a4a <put_fat+0x1ca>
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	699b      	ldr	r3, [r3, #24]
 801489c:	68ba      	ldr	r2, [r7, #8]
 801489e:	429a      	cmp	r2, r3
 80148a0:	f080 80d3 	bcs.w	8014a4a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	2b03      	cmp	r3, #3
 80148aa:	f000 8096 	beq.w	80149da <put_fat+0x15a>
 80148ae:	2b03      	cmp	r3, #3
 80148b0:	f300 80cb 	bgt.w	8014a4a <put_fat+0x1ca>
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d002      	beq.n	80148be <put_fat+0x3e>
 80148b8:	2b02      	cmp	r3, #2
 80148ba:	d06e      	beq.n	801499a <put_fat+0x11a>
 80148bc:	e0c5      	b.n	8014a4a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	61bb      	str	r3, [r7, #24]
 80148c2:	69bb      	ldr	r3, [r7, #24]
 80148c4:	085b      	lsrs	r3, r3, #1
 80148c6:	69ba      	ldr	r2, [r7, #24]
 80148c8:	4413      	add	r3, r2
 80148ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148d0:	69bb      	ldr	r3, [r7, #24]
 80148d2:	0a5b      	lsrs	r3, r3, #9
 80148d4:	4413      	add	r3, r2
 80148d6:	4619      	mov	r1, r3
 80148d8:	68f8      	ldr	r0, [r7, #12]
 80148da:	f7ff fe6f 	bl	80145bc <move_window>
 80148de:	4603      	mov	r3, r0
 80148e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80148e2:	7ffb      	ldrb	r3, [r7, #31]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	f040 80a9 	bne.w	8014a3c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80148f0:	69bb      	ldr	r3, [r7, #24]
 80148f2:	1c59      	adds	r1, r3, #1
 80148f4:	61b9      	str	r1, [r7, #24]
 80148f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148fa:	4413      	add	r3, r2
 80148fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	f003 0301 	and.w	r3, r3, #1
 8014904:	2b00      	cmp	r3, #0
 8014906:	d00d      	beq.n	8014924 <put_fat+0xa4>
 8014908:	697b      	ldr	r3, [r7, #20]
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	b25b      	sxtb	r3, r3
 801490e:	f003 030f 	and.w	r3, r3, #15
 8014912:	b25a      	sxtb	r2, r3
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	b25b      	sxtb	r3, r3
 8014918:	011b      	lsls	r3, r3, #4
 801491a:	b25b      	sxtb	r3, r3
 801491c:	4313      	orrs	r3, r2
 801491e:	b25b      	sxtb	r3, r3
 8014920:	b2db      	uxtb	r3, r3
 8014922:	e001      	b.n	8014928 <put_fat+0xa8>
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	b2db      	uxtb	r3, r3
 8014928:	697a      	ldr	r2, [r7, #20]
 801492a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2201      	movs	r2, #1
 8014930:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014936:	69bb      	ldr	r3, [r7, #24]
 8014938:	0a5b      	lsrs	r3, r3, #9
 801493a:	4413      	add	r3, r2
 801493c:	4619      	mov	r1, r3
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f7ff fe3c 	bl	80145bc <move_window>
 8014944:	4603      	mov	r3, r0
 8014946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014948:	7ffb      	ldrb	r3, [r7, #31]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d178      	bne.n	8014a40 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014954:	69bb      	ldr	r3, [r7, #24]
 8014956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801495a:	4413      	add	r3, r2
 801495c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	f003 0301 	and.w	r3, r3, #1
 8014964:	2b00      	cmp	r3, #0
 8014966:	d003      	beq.n	8014970 <put_fat+0xf0>
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	091b      	lsrs	r3, r3, #4
 801496c:	b2db      	uxtb	r3, r3
 801496e:	e00e      	b.n	801498e <put_fat+0x10e>
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	b25b      	sxtb	r3, r3
 8014976:	f023 030f 	bic.w	r3, r3, #15
 801497a:	b25a      	sxtb	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	0a1b      	lsrs	r3, r3, #8
 8014980:	b25b      	sxtb	r3, r3
 8014982:	f003 030f 	and.w	r3, r3, #15
 8014986:	b25b      	sxtb	r3, r3
 8014988:	4313      	orrs	r3, r2
 801498a:	b25b      	sxtb	r3, r3
 801498c:	b2db      	uxtb	r3, r3
 801498e:	697a      	ldr	r2, [r7, #20]
 8014990:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2201      	movs	r2, #1
 8014996:	70da      	strb	r2, [r3, #3]
			break;
 8014998:	e057      	b.n	8014a4a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	0a1b      	lsrs	r3, r3, #8
 80149a2:	4413      	add	r3, r2
 80149a4:	4619      	mov	r1, r3
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f7ff fe08 	bl	80145bc <move_window>
 80149ac:	4603      	mov	r3, r0
 80149ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80149b0:	7ffb      	ldrb	r3, [r7, #31]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d146      	bne.n	8014a44 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	005b      	lsls	r3, r3, #1
 80149c0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80149c4:	4413      	add	r3, r2
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	b292      	uxth	r2, r2
 80149ca:	4611      	mov	r1, r2
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7ff fb4f 	bl	8014070 <st_word>
			fs->wflag = 1;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2201      	movs	r2, #1
 80149d6:	70da      	strb	r2, [r3, #3]
			break;
 80149d8:	e037      	b.n	8014a4a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	09db      	lsrs	r3, r3, #7
 80149e2:	4413      	add	r3, r2
 80149e4:	4619      	mov	r1, r3
 80149e6:	68f8      	ldr	r0, [r7, #12]
 80149e8:	f7ff fde8 	bl	80145bc <move_window>
 80149ec:	4603      	mov	r3, r0
 80149ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80149f0:	7ffb      	ldrb	r3, [r7, #31]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d128      	bne.n	8014a48 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	009b      	lsls	r3, r3, #2
 8014a06:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014a0a:	4413      	add	r3, r2
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7ff fb0c 	bl	801402a <ld_dword>
 8014a12:	4603      	mov	r3, r0
 8014a14:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8014a18:	4323      	orrs	r3, r4
 8014a1a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	009b      	lsls	r3, r3, #2
 8014a26:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014a2a:	4413      	add	r3, r2
 8014a2c:	6879      	ldr	r1, [r7, #4]
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7ff fb39 	bl	80140a6 <st_dword>
			fs->wflag = 1;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	2201      	movs	r2, #1
 8014a38:	70da      	strb	r2, [r3, #3]
			break;
 8014a3a:	e006      	b.n	8014a4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a3c:	bf00      	nop
 8014a3e:	e004      	b.n	8014a4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a40:	bf00      	nop
 8014a42:	e002      	b.n	8014a4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a44:	bf00      	nop
 8014a46:	e000      	b.n	8014a4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a48:	bf00      	nop
		}
	}
	return res;
 8014a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3724      	adds	r7, #36	@ 0x24
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd90      	pop	{r4, r7, pc}

08014a54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b088      	sub	sp, #32
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014a60:	2300      	movs	r3, #0
 8014a62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d904      	bls.n	8014a7a <remove_chain+0x26>
 8014a70:	69bb      	ldr	r3, [r7, #24]
 8014a72:	699b      	ldr	r3, [r3, #24]
 8014a74:	68ba      	ldr	r2, [r7, #8]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d301      	bcc.n	8014a7e <remove_chain+0x2a>
 8014a7a:	2302      	movs	r3, #2
 8014a7c:	e04b      	b.n	8014b16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d00c      	beq.n	8014a9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014a84:	f04f 32ff 	mov.w	r2, #4294967295
 8014a88:	6879      	ldr	r1, [r7, #4]
 8014a8a:	69b8      	ldr	r0, [r7, #24]
 8014a8c:	f7ff fef8 	bl	8014880 <put_fat>
 8014a90:	4603      	mov	r3, r0
 8014a92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014a94:	7ffb      	ldrb	r3, [r7, #31]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d001      	beq.n	8014a9e <remove_chain+0x4a>
 8014a9a:	7ffb      	ldrb	r3, [r7, #31]
 8014a9c:	e03b      	b.n	8014b16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014a9e:	68b9      	ldr	r1, [r7, #8]
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	f7ff fe46 	bl	8014732 <get_fat>
 8014aa6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d031      	beq.n	8014b12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	2b01      	cmp	r3, #1
 8014ab2:	d101      	bne.n	8014ab8 <remove_chain+0x64>
 8014ab4:	2302      	movs	r3, #2
 8014ab6:	e02e      	b.n	8014b16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014abe:	d101      	bne.n	8014ac4 <remove_chain+0x70>
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	e028      	b.n	8014b16 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	68b9      	ldr	r1, [r7, #8]
 8014ac8:	69b8      	ldr	r0, [r7, #24]
 8014aca:	f7ff fed9 	bl	8014880 <put_fat>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014ad2:	7ffb      	ldrb	r3, [r7, #31]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d001      	beq.n	8014adc <remove_chain+0x88>
 8014ad8:	7ffb      	ldrb	r3, [r7, #31]
 8014ada:	e01c      	b.n	8014b16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014adc:	69bb      	ldr	r3, [r7, #24]
 8014ade:	695a      	ldr	r2, [r3, #20]
 8014ae0:	69bb      	ldr	r3, [r7, #24]
 8014ae2:	699b      	ldr	r3, [r3, #24]
 8014ae4:	3b02      	subs	r3, #2
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d20b      	bcs.n	8014b02 <remove_chain+0xae>
			fs->free_clst++;
 8014aea:	69bb      	ldr	r3, [r7, #24]
 8014aec:	695b      	ldr	r3, [r3, #20]
 8014aee:	1c5a      	adds	r2, r3, #1
 8014af0:	69bb      	ldr	r3, [r7, #24]
 8014af2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8014af4:	69bb      	ldr	r3, [r7, #24]
 8014af6:	791b      	ldrb	r3, [r3, #4]
 8014af8:	f043 0301 	orr.w	r3, r3, #1
 8014afc:	b2da      	uxtb	r2, r3
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014b06:	69bb      	ldr	r3, [r7, #24]
 8014b08:	699b      	ldr	r3, [r3, #24]
 8014b0a:	68ba      	ldr	r2, [r7, #8]
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d3c6      	bcc.n	8014a9e <remove_chain+0x4a>
 8014b10:	e000      	b.n	8014b14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014b12:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014b14:	2300      	movs	r3, #0
}
 8014b16:	4618      	mov	r0, r3
 8014b18:	3720      	adds	r7, #32
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd80      	pop	{r7, pc}

08014b1e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014b1e:	b580      	push	{r7, lr}
 8014b20:	b088      	sub	sp, #32
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	6078      	str	r0, [r7, #4]
 8014b26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d10d      	bne.n	8014b50 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	691b      	ldr	r3, [r3, #16]
 8014b38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d004      	beq.n	8014b4a <create_chain+0x2c>
 8014b40:	693b      	ldr	r3, [r7, #16]
 8014b42:	699b      	ldr	r3, [r3, #24]
 8014b44:	69ba      	ldr	r2, [r7, #24]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d31b      	bcc.n	8014b82 <create_chain+0x64>
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	61bb      	str	r3, [r7, #24]
 8014b4e:	e018      	b.n	8014b82 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014b50:	6839      	ldr	r1, [r7, #0]
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f7ff fded 	bl	8014732 <get_fat>
 8014b58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2b01      	cmp	r3, #1
 8014b5e:	d801      	bhi.n	8014b64 <create_chain+0x46>
 8014b60:	2301      	movs	r3, #1
 8014b62:	e070      	b.n	8014c46 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b6a:	d101      	bne.n	8014b70 <create_chain+0x52>
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	e06a      	b.n	8014c46 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014b70:	693b      	ldr	r3, [r7, #16]
 8014b72:	699b      	ldr	r3, [r3, #24]
 8014b74:	68fa      	ldr	r2, [r7, #12]
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d201      	bcs.n	8014b7e <create_chain+0x60>
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	e063      	b.n	8014c46 <create_chain+0x128>
		scl = clst;
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014b82:	69bb      	ldr	r3, [r7, #24]
 8014b84:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014b86:	69fb      	ldr	r3, [r7, #28]
 8014b88:	3301      	adds	r3, #1
 8014b8a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	699b      	ldr	r3, [r3, #24]
 8014b90:	69fa      	ldr	r2, [r7, #28]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d307      	bcc.n	8014ba6 <create_chain+0x88>
				ncl = 2;
 8014b96:	2302      	movs	r3, #2
 8014b98:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014b9a:	69fa      	ldr	r2, [r7, #28]
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	d901      	bls.n	8014ba6 <create_chain+0x88>
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	e04f      	b.n	8014c46 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014ba6:	69f9      	ldr	r1, [r7, #28]
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f7ff fdc2 	bl	8014732 <get_fat>
 8014bae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00e      	beq.n	8014bd4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2b01      	cmp	r3, #1
 8014bba:	d003      	beq.n	8014bc4 <create_chain+0xa6>
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc2:	d101      	bne.n	8014bc8 <create_chain+0xaa>
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	e03e      	b.n	8014c46 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014bc8:	69fa      	ldr	r2, [r7, #28]
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	d1da      	bne.n	8014b86 <create_chain+0x68>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	e038      	b.n	8014c46 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014bd4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8014bda:	69f9      	ldr	r1, [r7, #28]
 8014bdc:	6938      	ldr	r0, [r7, #16]
 8014bde:	f7ff fe4f 	bl	8014880 <put_fat>
 8014be2:	4603      	mov	r3, r0
 8014be4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014be6:	7dfb      	ldrb	r3, [r7, #23]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d109      	bne.n	8014c00 <create_chain+0xe2>
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d006      	beq.n	8014c00 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014bf2:	69fa      	ldr	r2, [r7, #28]
 8014bf4:	6839      	ldr	r1, [r7, #0]
 8014bf6:	6938      	ldr	r0, [r7, #16]
 8014bf8:	f7ff fe42 	bl	8014880 <put_fat>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014c00:	7dfb      	ldrb	r3, [r7, #23]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d116      	bne.n	8014c34 <create_chain+0x116>
		fs->last_clst = ncl;
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	69fa      	ldr	r2, [r7, #28]
 8014c0a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	695a      	ldr	r2, [r3, #20]
 8014c10:	693b      	ldr	r3, [r7, #16]
 8014c12:	699b      	ldr	r3, [r3, #24]
 8014c14:	3b02      	subs	r3, #2
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d804      	bhi.n	8014c24 <create_chain+0x106>
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	695b      	ldr	r3, [r3, #20]
 8014c1e:	1e5a      	subs	r2, r3, #1
 8014c20:	693b      	ldr	r3, [r7, #16]
 8014c22:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8014c24:	693b      	ldr	r3, [r7, #16]
 8014c26:	791b      	ldrb	r3, [r3, #4]
 8014c28:	f043 0301 	orr.w	r3, r3, #1
 8014c2c:	b2da      	uxtb	r2, r3
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	711a      	strb	r2, [r3, #4]
 8014c32:	e007      	b.n	8014c44 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014c34:	7dfb      	ldrb	r3, [r7, #23]
 8014c36:	2b01      	cmp	r3, #1
 8014c38:	d102      	bne.n	8014c40 <create_chain+0x122>
 8014c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c3e:	e000      	b.n	8014c42 <create_chain+0x124>
 8014c40:	2301      	movs	r3, #1
 8014c42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014c44:	69fb      	ldr	r3, [r7, #28]
}
 8014c46:	4618      	mov	r0, r3
 8014c48:	3720      	adds	r7, #32
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}

08014c4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014c4e:	b480      	push	{r7}
 8014c50:	b087      	sub	sp, #28
 8014c52:	af00      	add	r7, sp, #0
 8014c54:	6078      	str	r0, [r7, #4]
 8014c56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c62:	3304      	adds	r3, #4
 8014c64:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	0a5b      	lsrs	r3, r3, #9
 8014c6a:	68fa      	ldr	r2, [r7, #12]
 8014c6c:	8952      	ldrh	r2, [r2, #10]
 8014c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c72:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	1d1a      	adds	r2, r3, #4
 8014c78:	613a      	str	r2, [r7, #16]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d101      	bne.n	8014c88 <clmt_clust+0x3a>
 8014c84:	2300      	movs	r3, #0
 8014c86:	e010      	b.n	8014caa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8014c88:	697a      	ldr	r2, [r7, #20]
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d307      	bcc.n	8014ca0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8014c90:	697a      	ldr	r2, [r7, #20]
 8014c92:	68bb      	ldr	r3, [r7, #8]
 8014c94:	1ad3      	subs	r3, r2, r3
 8014c96:	617b      	str	r3, [r7, #20]
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	3304      	adds	r3, #4
 8014c9c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014c9e:	e7e9      	b.n	8014c74 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014ca0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	681a      	ldr	r2, [r3, #0]
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	4413      	add	r3, r2
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	371c      	adds	r7, #28
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb4:	4770      	bx	lr

08014cb6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014cb6:	b580      	push	{r7, lr}
 8014cb8:	b086      	sub	sp, #24
 8014cba:	af00      	add	r7, sp, #0
 8014cbc:	6078      	str	r0, [r7, #4]
 8014cbe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014ccc:	d204      	bcs.n	8014cd8 <dir_sdi+0x22>
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	f003 031f 	and.w	r3, r3, #31
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d001      	beq.n	8014cdc <dir_sdi+0x26>
		return FR_INT_ERR;
 8014cd8:	2302      	movs	r3, #2
 8014cda:	e063      	b.n	8014da4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	683a      	ldr	r2, [r7, #0]
 8014ce0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	689b      	ldr	r3, [r3, #8]
 8014ce6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d106      	bne.n	8014cfc <dir_sdi+0x46>
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	781b      	ldrb	r3, [r3, #0]
 8014cf2:	2b02      	cmp	r3, #2
 8014cf4:	d902      	bls.n	8014cfc <dir_sdi+0x46>
		clst = fs->dirbase;
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cfa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d10c      	bne.n	8014d1c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	095b      	lsrs	r3, r3, #5
 8014d06:	693a      	ldr	r2, [r7, #16]
 8014d08:	8912      	ldrh	r2, [r2, #8]
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	d301      	bcc.n	8014d12 <dir_sdi+0x5c>
 8014d0e:	2302      	movs	r3, #2
 8014d10:	e048      	b.n	8014da4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	61da      	str	r2, [r3, #28]
 8014d1a:	e029      	b.n	8014d70 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	895b      	ldrh	r3, [r3, #10]
 8014d20:	025b      	lsls	r3, r3, #9
 8014d22:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d24:	e019      	b.n	8014d5a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	6979      	ldr	r1, [r7, #20]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7ff fd01 	bl	8014732 <get_fat>
 8014d30:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d38:	d101      	bne.n	8014d3e <dir_sdi+0x88>
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	e032      	b.n	8014da4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	2b01      	cmp	r3, #1
 8014d42:	d904      	bls.n	8014d4e <dir_sdi+0x98>
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	699b      	ldr	r3, [r3, #24]
 8014d48:	697a      	ldr	r2, [r7, #20]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d301      	bcc.n	8014d52 <dir_sdi+0x9c>
 8014d4e:	2302      	movs	r3, #2
 8014d50:	e028      	b.n	8014da4 <dir_sdi+0xee>
			ofs -= csz;
 8014d52:	683a      	ldr	r2, [r7, #0]
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d5a:	683a      	ldr	r2, [r7, #0]
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d2e1      	bcs.n	8014d26 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014d62:	6979      	ldr	r1, [r7, #20]
 8014d64:	6938      	ldr	r0, [r7, #16]
 8014d66:	f7ff fcc5 	bl	80146f4 <clust2sect>
 8014d6a:	4602      	mov	r2, r0
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	697a      	ldr	r2, [r7, #20]
 8014d74:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	69db      	ldr	r3, [r3, #28]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d101      	bne.n	8014d82 <dir_sdi+0xcc>
 8014d7e:	2302      	movs	r3, #2
 8014d80:	e010      	b.n	8014da4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	69da      	ldr	r2, [r3, #28]
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	0a5b      	lsrs	r3, r3, #9
 8014d8a:	441a      	add	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d9c:	441a      	add	r2, r3
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014da2:	2300      	movs	r3, #0
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3718      	adds	r7, #24
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}

08014dac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b086      	sub	sp, #24
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	695b      	ldr	r3, [r3, #20]
 8014dc0:	3320      	adds	r3, #32
 8014dc2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	69db      	ldr	r3, [r3, #28]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d003      	beq.n	8014dd4 <dir_next+0x28>
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014dd2:	d301      	bcc.n	8014dd8 <dir_next+0x2c>
 8014dd4:	2304      	movs	r3, #4
 8014dd6:	e0aa      	b.n	8014f2e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	f040 8098 	bne.w	8014f14 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	69db      	ldr	r3, [r3, #28]
 8014de8:	1c5a      	adds	r2, r3, #1
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	699b      	ldr	r3, [r3, #24]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d10b      	bne.n	8014e0e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	095b      	lsrs	r3, r3, #5
 8014dfa:	68fa      	ldr	r2, [r7, #12]
 8014dfc:	8912      	ldrh	r2, [r2, #8]
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	f0c0 8088 	bcc.w	8014f14 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2200      	movs	r2, #0
 8014e08:	61da      	str	r2, [r3, #28]
 8014e0a:	2304      	movs	r3, #4
 8014e0c:	e08f      	b.n	8014f2e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	0a5b      	lsrs	r3, r3, #9
 8014e12:	68fa      	ldr	r2, [r7, #12]
 8014e14:	8952      	ldrh	r2, [r2, #10]
 8014e16:	3a01      	subs	r2, #1
 8014e18:	4013      	ands	r3, r2
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d17a      	bne.n	8014f14 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	699b      	ldr	r3, [r3, #24]
 8014e24:	4619      	mov	r1, r3
 8014e26:	4610      	mov	r0, r2
 8014e28:	f7ff fc83 	bl	8014732 <get_fat>
 8014e2c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	2b01      	cmp	r3, #1
 8014e32:	d801      	bhi.n	8014e38 <dir_next+0x8c>
 8014e34:	2302      	movs	r3, #2
 8014e36:	e07a      	b.n	8014f2e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e3e:	d101      	bne.n	8014e44 <dir_next+0x98>
 8014e40:	2301      	movs	r3, #1
 8014e42:	e074      	b.n	8014f2e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	699b      	ldr	r3, [r3, #24]
 8014e48:	697a      	ldr	r2, [r7, #20]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d358      	bcc.n	8014f00 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d104      	bne.n	8014e5e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2200      	movs	r2, #0
 8014e58:	61da      	str	r2, [r3, #28]
 8014e5a:	2304      	movs	r3, #4
 8014e5c:	e067      	b.n	8014f2e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	699b      	ldr	r3, [r3, #24]
 8014e64:	4619      	mov	r1, r3
 8014e66:	4610      	mov	r0, r2
 8014e68:	f7ff fe59 	bl	8014b1e <create_chain>
 8014e6c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d101      	bne.n	8014e78 <dir_next+0xcc>
 8014e74:	2307      	movs	r3, #7
 8014e76:	e05a      	b.n	8014f2e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	d101      	bne.n	8014e82 <dir_next+0xd6>
 8014e7e:	2302      	movs	r3, #2
 8014e80:	e055      	b.n	8014f2e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e88:	d101      	bne.n	8014e8e <dir_next+0xe2>
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	e04f      	b.n	8014f2e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	f7ff fb50 	bl	8014534 <sync_window>
 8014e94:	4603      	mov	r3, r0
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d001      	beq.n	8014e9e <dir_next+0xf2>
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	e047      	b.n	8014f2e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	3334      	adds	r3, #52	@ 0x34
 8014ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ea6:	2100      	movs	r1, #0
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7ff f949 	bl	8014140 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014eae:	2300      	movs	r3, #0
 8014eb0:	613b      	str	r3, [r7, #16]
 8014eb2:	6979      	ldr	r1, [r7, #20]
 8014eb4:	68f8      	ldr	r0, [r7, #12]
 8014eb6:	f7ff fc1d 	bl	80146f4 <clust2sect>
 8014eba:	4602      	mov	r2, r0
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ec0:	e012      	b.n	8014ee8 <dir_next+0x13c>
						fs->wflag = 1;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f7ff fb33 	bl	8014534 <sync_window>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d001      	beq.n	8014ed8 <dir_next+0x12c>
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	e02a      	b.n	8014f2e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	3301      	adds	r3, #1
 8014edc:	613b      	str	r3, [r7, #16]
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ee2:	1c5a      	adds	r2, r3, #1
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	895b      	ldrh	r3, [r3, #10]
 8014eec:	461a      	mov	r2, r3
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	d3e6      	bcc.n	8014ec2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	1ad2      	subs	r2, r2, r3
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	697a      	ldr	r2, [r7, #20]
 8014f04:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8014f06:	6979      	ldr	r1, [r7, #20]
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f7ff fbf3 	bl	80146f4 <clust2sect>
 8014f0e:	4602      	mov	r2, r0
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	68ba      	ldr	r2, [r7, #8]
 8014f18:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f26:	441a      	add	r2, r3
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014f2c:	2300      	movs	r3, #0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3718      	adds	r7, #24
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}

08014f36 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014f36:	b580      	push	{r7, lr}
 8014f38:	b086      	sub	sp, #24
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
 8014f3e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014f46:	2100      	movs	r1, #0
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f7ff feb4 	bl	8014cb6 <dir_sdi>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014f52:	7dfb      	ldrb	r3, [r7, #23]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d12b      	bne.n	8014fb0 <dir_alloc+0x7a>
		n = 0;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	69db      	ldr	r3, [r3, #28]
 8014f60:	4619      	mov	r1, r3
 8014f62:	68f8      	ldr	r0, [r7, #12]
 8014f64:	f7ff fb2a 	bl	80145bc <move_window>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014f6c:	7dfb      	ldrb	r3, [r7, #23]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d11d      	bne.n	8014fae <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	6a1b      	ldr	r3, [r3, #32]
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	2be5      	cmp	r3, #229	@ 0xe5
 8014f7a:	d004      	beq.n	8014f86 <dir_alloc+0x50>
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6a1b      	ldr	r3, [r3, #32]
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d107      	bne.n	8014f96 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	3301      	adds	r3, #1
 8014f8a:	613b      	str	r3, [r7, #16]
 8014f8c:	693a      	ldr	r2, [r7, #16]
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d102      	bne.n	8014f9a <dir_alloc+0x64>
 8014f94:	e00c      	b.n	8014fb0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014f96:	2300      	movs	r3, #0
 8014f98:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014f9a:	2101      	movs	r1, #1
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7ff ff05 	bl	8014dac <dir_next>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014fa6:	7dfb      	ldrb	r3, [r7, #23]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d0d7      	beq.n	8014f5c <dir_alloc+0x26>
 8014fac:	e000      	b.n	8014fb0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014fae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014fb0:	7dfb      	ldrb	r3, [r7, #23]
 8014fb2:	2b04      	cmp	r3, #4
 8014fb4:	d101      	bne.n	8014fba <dir_alloc+0x84>
 8014fb6:	2307      	movs	r3, #7
 8014fb8:	75fb      	strb	r3, [r7, #23]
	return res;
 8014fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3718      	adds	r7, #24
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}

08014fc4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	331a      	adds	r3, #26
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7ff f810 	bl	8013ff8 <ld_word>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	2b03      	cmp	r3, #3
 8014fe2:	d109      	bne.n	8014ff8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	3314      	adds	r3, #20
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7ff f805 	bl	8013ff8 <ld_word>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	041b      	lsls	r3, r3, #16
 8014ff2:	68fa      	ldr	r2, [r7, #12]
 8014ff4:	4313      	orrs	r3, r2
 8014ff6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
}
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	3710      	adds	r7, #16
 8014ffe:	46bd      	mov	sp, r7
 8015000:	bd80      	pop	{r7, pc}

08015002 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015002:	b580      	push	{r7, lr}
 8015004:	b084      	sub	sp, #16
 8015006:	af00      	add	r7, sp, #0
 8015008:	60f8      	str	r0, [r7, #12]
 801500a:	60b9      	str	r1, [r7, #8]
 801500c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	331a      	adds	r3, #26
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	b292      	uxth	r2, r2
 8015016:	4611      	mov	r1, r2
 8015018:	4618      	mov	r0, r3
 801501a:	f7ff f829 	bl	8014070 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	2b03      	cmp	r3, #3
 8015024:	d109      	bne.n	801503a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	f103 0214 	add.w	r2, r3, #20
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	0c1b      	lsrs	r3, r3, #16
 8015030:	b29b      	uxth	r3, r3
 8015032:	4619      	mov	r1, r3
 8015034:	4610      	mov	r0, r2
 8015036:	f7ff f81b 	bl	8014070 <st_word>
	}
}
 801503a:	bf00      	nop
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b086      	sub	sp, #24
 8015046:	af00      	add	r7, sp, #0
 8015048:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015050:	2100      	movs	r1, #0
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f7ff fe2f 	bl	8014cb6 <dir_sdi>
 8015058:	4603      	mov	r3, r0
 801505a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801505c:	7dfb      	ldrb	r3, [r7, #23]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d001      	beq.n	8015066 <dir_find+0x24>
 8015062:	7dfb      	ldrb	r3, [r7, #23]
 8015064:	e03e      	b.n	80150e4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	69db      	ldr	r3, [r3, #28]
 801506a:	4619      	mov	r1, r3
 801506c:	6938      	ldr	r0, [r7, #16]
 801506e:	f7ff faa5 	bl	80145bc <move_window>
 8015072:	4603      	mov	r3, r0
 8015074:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015076:	7dfb      	ldrb	r3, [r7, #23]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d12f      	bne.n	80150dc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6a1b      	ldr	r3, [r3, #32]
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015084:	7bfb      	ldrb	r3, [r7, #15]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d102      	bne.n	8015090 <dir_find+0x4e>
 801508a:	2304      	movs	r3, #4
 801508c:	75fb      	strb	r3, [r7, #23]
 801508e:	e028      	b.n	80150e2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6a1b      	ldr	r3, [r3, #32]
 8015094:	330b      	adds	r3, #11
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801509c:	b2da      	uxtb	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6a1b      	ldr	r3, [r3, #32]
 80150a6:	330b      	adds	r3, #11
 80150a8:	781b      	ldrb	r3, [r3, #0]
 80150aa:	f003 0308 	and.w	r3, r3, #8
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d10a      	bne.n	80150c8 <dir_find+0x86>
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6a18      	ldr	r0, [r3, #32]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	3324      	adds	r3, #36	@ 0x24
 80150ba:	220b      	movs	r2, #11
 80150bc:	4619      	mov	r1, r3
 80150be:	f7ff f85a 	bl	8014176 <mem_cmp>
 80150c2:	4603      	mov	r3, r0
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d00b      	beq.n	80150e0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80150c8:	2100      	movs	r1, #0
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7ff fe6e 	bl	8014dac <dir_next>
 80150d0:	4603      	mov	r3, r0
 80150d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80150d4:	7dfb      	ldrb	r3, [r7, #23]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d0c5      	beq.n	8015066 <dir_find+0x24>
 80150da:	e002      	b.n	80150e2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80150dc:	bf00      	nop
 80150de:	e000      	b.n	80150e2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80150e0:	bf00      	nop

	return res;
 80150e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3718      	adds	r7, #24
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80150fa:	2101      	movs	r1, #1
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f7ff ff1a 	bl	8014f36 <dir_alloc>
 8015102:	4603      	mov	r3, r0
 8015104:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015106:	7bfb      	ldrb	r3, [r7, #15]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d11c      	bne.n	8015146 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	69db      	ldr	r3, [r3, #28]
 8015110:	4619      	mov	r1, r3
 8015112:	68b8      	ldr	r0, [r7, #8]
 8015114:	f7ff fa52 	bl	80145bc <move_window>
 8015118:	4603      	mov	r3, r0
 801511a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801511c:	7bfb      	ldrb	r3, [r7, #15]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d111      	bne.n	8015146 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	6a1b      	ldr	r3, [r3, #32]
 8015126:	2220      	movs	r2, #32
 8015128:	2100      	movs	r1, #0
 801512a:	4618      	mov	r0, r3
 801512c:	f7ff f808 	bl	8014140 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6a18      	ldr	r0, [r3, #32]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	3324      	adds	r3, #36	@ 0x24
 8015138:	220b      	movs	r2, #11
 801513a:	4619      	mov	r1, r3
 801513c:	f7fe ffdf 	bl	80140fe <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	2201      	movs	r2, #1
 8015144:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015146:	7bfb      	ldrb	r3, [r7, #15]
}
 8015148:	4618      	mov	r0, r3
 801514a:	3710      	adds	r7, #16
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b088      	sub	sp, #32
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	60fb      	str	r3, [r7, #12]
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	3324      	adds	r3, #36	@ 0x24
 8015164:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8015166:	220b      	movs	r2, #11
 8015168:	2120      	movs	r1, #32
 801516a:	68b8      	ldr	r0, [r7, #8]
 801516c:	f7fe ffe8 	bl	8014140 <mem_set>
	si = i = 0; ni = 8;
 8015170:	2300      	movs	r3, #0
 8015172:	613b      	str	r3, [r7, #16]
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	61fb      	str	r3, [r7, #28]
 8015178:	2308      	movs	r3, #8
 801517a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801517c:	69fb      	ldr	r3, [r7, #28]
 801517e:	1c5a      	adds	r2, r3, #1
 8015180:	61fa      	str	r2, [r7, #28]
 8015182:	68fa      	ldr	r2, [r7, #12]
 8015184:	4413      	add	r3, r2
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801518a:	7efb      	ldrb	r3, [r7, #27]
 801518c:	2b20      	cmp	r3, #32
 801518e:	d94e      	bls.n	801522e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8015190:	7efb      	ldrb	r3, [r7, #27]
 8015192:	2b2f      	cmp	r3, #47	@ 0x2f
 8015194:	d006      	beq.n	80151a4 <create_name+0x54>
 8015196:	7efb      	ldrb	r3, [r7, #27]
 8015198:	2b5c      	cmp	r3, #92	@ 0x5c
 801519a:	d110      	bne.n	80151be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801519c:	e002      	b.n	80151a4 <create_name+0x54>
 801519e:	69fb      	ldr	r3, [r7, #28]
 80151a0:	3301      	adds	r3, #1
 80151a2:	61fb      	str	r3, [r7, #28]
 80151a4:	68fa      	ldr	r2, [r7, #12]
 80151a6:	69fb      	ldr	r3, [r7, #28]
 80151a8:	4413      	add	r3, r2
 80151aa:	781b      	ldrb	r3, [r3, #0]
 80151ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80151ae:	d0f6      	beq.n	801519e <create_name+0x4e>
 80151b0:	68fa      	ldr	r2, [r7, #12]
 80151b2:	69fb      	ldr	r3, [r7, #28]
 80151b4:	4413      	add	r3, r2
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80151ba:	d0f0      	beq.n	801519e <create_name+0x4e>
			break;
 80151bc:	e038      	b.n	8015230 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80151be:	7efb      	ldrb	r3, [r7, #27]
 80151c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80151c2:	d003      	beq.n	80151cc <create_name+0x7c>
 80151c4:	693a      	ldr	r2, [r7, #16]
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d30c      	bcc.n	80151e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	2b0b      	cmp	r3, #11
 80151d0:	d002      	beq.n	80151d8 <create_name+0x88>
 80151d2:	7efb      	ldrb	r3, [r7, #27]
 80151d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80151d6:	d001      	beq.n	80151dc <create_name+0x8c>
 80151d8:	2306      	movs	r3, #6
 80151da:	e044      	b.n	8015266 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80151dc:	2308      	movs	r3, #8
 80151de:	613b      	str	r3, [r7, #16]
 80151e0:	230b      	movs	r3, #11
 80151e2:	617b      	str	r3, [r7, #20]
			continue;
 80151e4:	e022      	b.n	801522c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80151e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	da04      	bge.n	80151f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80151ee:	7efb      	ldrb	r3, [r7, #27]
 80151f0:	3b80      	subs	r3, #128	@ 0x80
 80151f2:	4a1f      	ldr	r2, [pc, #124]	@ (8015270 <create_name+0x120>)
 80151f4:	5cd3      	ldrb	r3, [r2, r3]
 80151f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80151f8:	7efb      	ldrb	r3, [r7, #27]
 80151fa:	4619      	mov	r1, r3
 80151fc:	481d      	ldr	r0, [pc, #116]	@ (8015274 <create_name+0x124>)
 80151fe:	f7fe ffe1 	bl	80141c4 <chk_chr>
 8015202:	4603      	mov	r3, r0
 8015204:	2b00      	cmp	r3, #0
 8015206:	d001      	beq.n	801520c <create_name+0xbc>
 8015208:	2306      	movs	r3, #6
 801520a:	e02c      	b.n	8015266 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801520c:	7efb      	ldrb	r3, [r7, #27]
 801520e:	2b60      	cmp	r3, #96	@ 0x60
 8015210:	d905      	bls.n	801521e <create_name+0xce>
 8015212:	7efb      	ldrb	r3, [r7, #27]
 8015214:	2b7a      	cmp	r3, #122	@ 0x7a
 8015216:	d802      	bhi.n	801521e <create_name+0xce>
 8015218:	7efb      	ldrb	r3, [r7, #27]
 801521a:	3b20      	subs	r3, #32
 801521c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	1c5a      	adds	r2, r3, #1
 8015222:	613a      	str	r2, [r7, #16]
 8015224:	68ba      	ldr	r2, [r7, #8]
 8015226:	4413      	add	r3, r2
 8015228:	7efa      	ldrb	r2, [r7, #27]
 801522a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801522c:	e7a6      	b.n	801517c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801522e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8015230:	68fa      	ldr	r2, [r7, #12]
 8015232:	69fb      	ldr	r3, [r7, #28]
 8015234:	441a      	add	r2, r3
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d101      	bne.n	8015244 <create_name+0xf4>
 8015240:	2306      	movs	r3, #6
 8015242:	e010      	b.n	8015266 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	2be5      	cmp	r3, #229	@ 0xe5
 801524a:	d102      	bne.n	8015252 <create_name+0x102>
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	2205      	movs	r2, #5
 8015250:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015252:	7efb      	ldrb	r3, [r7, #27]
 8015254:	2b20      	cmp	r3, #32
 8015256:	d801      	bhi.n	801525c <create_name+0x10c>
 8015258:	2204      	movs	r2, #4
 801525a:	e000      	b.n	801525e <create_name+0x10e>
 801525c:	2200      	movs	r2, #0
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	330b      	adds	r3, #11
 8015262:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8015264:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8015266:	4618      	mov	r0, r3
 8015268:	3720      	adds	r7, #32
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}
 801526e:	bf00      	nop
 8015270:	0801c5ec 	.word	0x0801c5ec
 8015274:	0801c56c 	.word	0x0801c56c

08015278 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b086      	sub	sp, #24
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801528c:	e002      	b.n	8015294 <follow_path+0x1c>
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	3301      	adds	r3, #1
 8015292:	603b      	str	r3, [r7, #0]
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	2b2f      	cmp	r3, #47	@ 0x2f
 801529a:	d0f8      	beq.n	801528e <follow_path+0x16>
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80152a2:	d0f4      	beq.n	801528e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	2200      	movs	r2, #0
 80152a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	781b      	ldrb	r3, [r3, #0]
 80152ae:	2b1f      	cmp	r3, #31
 80152b0:	d80a      	bhi.n	80152c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2280      	movs	r2, #128	@ 0x80
 80152b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80152ba:	2100      	movs	r1, #0
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f7ff fcfa 	bl	8014cb6 <dir_sdi>
 80152c2:	4603      	mov	r3, r0
 80152c4:	75fb      	strb	r3, [r7, #23]
 80152c6:	e043      	b.n	8015350 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80152c8:	463b      	mov	r3, r7
 80152ca:	4619      	mov	r1, r3
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f7ff ff3f 	bl	8015150 <create_name>
 80152d2:	4603      	mov	r3, r0
 80152d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80152d6:	7dfb      	ldrb	r3, [r7, #23]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d134      	bne.n	8015346 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80152dc:	6878      	ldr	r0, [r7, #4]
 80152de:	f7ff feb0 	bl	8015042 <dir_find>
 80152e2:	4603      	mov	r3, r0
 80152e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80152ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80152ee:	7dfb      	ldrb	r3, [r7, #23]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d00a      	beq.n	801530a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80152f4:	7dfb      	ldrb	r3, [r7, #23]
 80152f6:	2b04      	cmp	r3, #4
 80152f8:	d127      	bne.n	801534a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80152fa:	7afb      	ldrb	r3, [r7, #11]
 80152fc:	f003 0304 	and.w	r3, r3, #4
 8015300:	2b00      	cmp	r3, #0
 8015302:	d122      	bne.n	801534a <follow_path+0xd2>
 8015304:	2305      	movs	r3, #5
 8015306:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015308:	e01f      	b.n	801534a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801530a:	7afb      	ldrb	r3, [r7, #11]
 801530c:	f003 0304 	and.w	r3, r3, #4
 8015310:	2b00      	cmp	r3, #0
 8015312:	d11c      	bne.n	801534e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	799b      	ldrb	r3, [r3, #6]
 8015318:	f003 0310 	and.w	r3, r3, #16
 801531c:	2b00      	cmp	r3, #0
 801531e:	d102      	bne.n	8015326 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015320:	2305      	movs	r3, #5
 8015322:	75fb      	strb	r3, [r7, #23]
 8015324:	e014      	b.n	8015350 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	695b      	ldr	r3, [r3, #20]
 8015330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015334:	4413      	add	r3, r2
 8015336:	4619      	mov	r1, r3
 8015338:	68f8      	ldr	r0, [r7, #12]
 801533a:	f7ff fe43 	bl	8014fc4 <ld_clust>
 801533e:	4602      	mov	r2, r0
 8015340:	693b      	ldr	r3, [r7, #16]
 8015342:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015344:	e7c0      	b.n	80152c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8015346:	bf00      	nop
 8015348:	e002      	b.n	8015350 <follow_path+0xd8>
				break;
 801534a:	bf00      	nop
 801534c:	e000      	b.n	8015350 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801534e:	bf00      	nop
			}
		}
	}

	return res;
 8015350:	7dfb      	ldrb	r3, [r7, #23]
}
 8015352:	4618      	mov	r0, r3
 8015354:	3718      	adds	r7, #24
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}

0801535a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801535a:	b480      	push	{r7}
 801535c:	b087      	sub	sp, #28
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015362:	f04f 33ff 	mov.w	r3, #4294967295
 8015366:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d031      	beq.n	80153d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	617b      	str	r3, [r7, #20]
 8015376:	e002      	b.n	801537e <get_ldnumber+0x24>
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	3301      	adds	r3, #1
 801537c:	617b      	str	r3, [r7, #20]
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	2b20      	cmp	r3, #32
 8015384:	d903      	bls.n	801538e <get_ldnumber+0x34>
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	781b      	ldrb	r3, [r3, #0]
 801538a:	2b3a      	cmp	r3, #58	@ 0x3a
 801538c:	d1f4      	bne.n	8015378 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	781b      	ldrb	r3, [r3, #0]
 8015392:	2b3a      	cmp	r3, #58	@ 0x3a
 8015394:	d11c      	bne.n	80153d0 <get_ldnumber+0x76>
			tp = *path;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	1c5a      	adds	r2, r3, #1
 80153a0:	60fa      	str	r2, [r7, #12]
 80153a2:	781b      	ldrb	r3, [r3, #0]
 80153a4:	3b30      	subs	r3, #48	@ 0x30
 80153a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	2b09      	cmp	r3, #9
 80153ac:	d80e      	bhi.n	80153cc <get_ldnumber+0x72>
 80153ae:	68fa      	ldr	r2, [r7, #12]
 80153b0:	697b      	ldr	r3, [r7, #20]
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d10a      	bne.n	80153cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80153b6:	68bb      	ldr	r3, [r7, #8]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d107      	bne.n	80153cc <get_ldnumber+0x72>
					vol = (int)i;
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	3301      	adds	r3, #1
 80153c4:	617b      	str	r3, [r7, #20]
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	697a      	ldr	r2, [r7, #20]
 80153ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	e002      	b.n	80153d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80153d0:	2300      	movs	r3, #0
 80153d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80153d4:	693b      	ldr	r3, [r7, #16]
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	371c      	adds	r7, #28
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr
	...

080153e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	2200      	movs	r2, #0
 80153f2:	70da      	strb	r2, [r3, #3]
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f04f 32ff 	mov.w	r2, #4294967295
 80153fa:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80153fc:	6839      	ldr	r1, [r7, #0]
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f7ff f8dc 	bl	80145bc <move_window>
 8015404:	4603      	mov	r3, r0
 8015406:	2b00      	cmp	r3, #0
 8015408:	d001      	beq.n	801540e <check_fs+0x2a>
 801540a:	2304      	movs	r3, #4
 801540c:	e038      	b.n	8015480 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	3334      	adds	r3, #52	@ 0x34
 8015412:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015416:	4618      	mov	r0, r3
 8015418:	f7fe fdee 	bl	8013ff8 <ld_word>
 801541c:	4603      	mov	r3, r0
 801541e:	461a      	mov	r2, r3
 8015420:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8015424:	429a      	cmp	r2, r3
 8015426:	d001      	beq.n	801542c <check_fs+0x48>
 8015428:	2303      	movs	r3, #3
 801542a:	e029      	b.n	8015480 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015432:	2be9      	cmp	r3, #233	@ 0xe9
 8015434:	d009      	beq.n	801544a <check_fs+0x66>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801543c:	2beb      	cmp	r3, #235	@ 0xeb
 801543e:	d11e      	bne.n	801547e <check_fs+0x9a>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8015446:	2b90      	cmp	r3, #144	@ 0x90
 8015448:	d119      	bne.n	801547e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	3334      	adds	r3, #52	@ 0x34
 801544e:	3336      	adds	r3, #54	@ 0x36
 8015450:	4618      	mov	r0, r3
 8015452:	f7fe fdea 	bl	801402a <ld_dword>
 8015456:	4603      	mov	r3, r0
 8015458:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801545c:	4a0a      	ldr	r2, [pc, #40]	@ (8015488 <check_fs+0xa4>)
 801545e:	4293      	cmp	r3, r2
 8015460:	d101      	bne.n	8015466 <check_fs+0x82>
 8015462:	2300      	movs	r3, #0
 8015464:	e00c      	b.n	8015480 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	3334      	adds	r3, #52	@ 0x34
 801546a:	3352      	adds	r3, #82	@ 0x52
 801546c:	4618      	mov	r0, r3
 801546e:	f7fe fddc 	bl	801402a <ld_dword>
 8015472:	4603      	mov	r3, r0
 8015474:	4a05      	ldr	r2, [pc, #20]	@ (801548c <check_fs+0xa8>)
 8015476:	4293      	cmp	r3, r2
 8015478:	d101      	bne.n	801547e <check_fs+0x9a>
 801547a:	2300      	movs	r3, #0
 801547c:	e000      	b.n	8015480 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801547e:	2302      	movs	r3, #2
}
 8015480:	4618      	mov	r0, r3
 8015482:	3708      	adds	r7, #8
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}
 8015488:	00544146 	.word	0x00544146
 801548c:	33544146 	.word	0x33544146

08015490 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b096      	sub	sp, #88	@ 0x58
 8015494:	af00      	add	r7, sp, #0
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	4613      	mov	r3, r2
 801549c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801549e:	68bb      	ldr	r3, [r7, #8]
 80154a0:	2200      	movs	r2, #0
 80154a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	f7ff ff58 	bl	801535a <get_ldnumber>
 80154aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80154ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	da01      	bge.n	80154b6 <find_volume+0x26>
 80154b2:	230b      	movs	r3, #11
 80154b4:	e235      	b.n	8015922 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80154b6:	4aa5      	ldr	r2, [pc, #660]	@ (801574c <find_volume+0x2bc>)
 80154b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80154c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d101      	bne.n	80154ca <find_volume+0x3a>
 80154c6:	230c      	movs	r3, #12
 80154c8:	e22b      	b.n	8015922 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80154ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80154cc:	f7fe fe95 	bl	80141fa <lock_fs>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d101      	bne.n	80154da <find_volume+0x4a>
 80154d6:	230f      	movs	r3, #15
 80154d8:	e223      	b.n	8015922 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80154da:	68bb      	ldr	r3, [r7, #8]
 80154dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80154de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80154e0:	79fb      	ldrb	r3, [r7, #7]
 80154e2:	f023 0301 	bic.w	r3, r3, #1
 80154e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80154e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154ea:	781b      	ldrb	r3, [r3, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d01a      	beq.n	8015526 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80154f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154f2:	785b      	ldrb	r3, [r3, #1]
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7fe fce1 	bl	8013ebc <disk_status>
 80154fa:	4603      	mov	r3, r0
 80154fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015500:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015504:	f003 0301 	and.w	r3, r3, #1
 8015508:	2b00      	cmp	r3, #0
 801550a:	d10c      	bne.n	8015526 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801550c:	79fb      	ldrb	r3, [r7, #7]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d007      	beq.n	8015522 <find_volume+0x92>
 8015512:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015516:	f003 0304 	and.w	r3, r3, #4
 801551a:	2b00      	cmp	r3, #0
 801551c:	d001      	beq.n	8015522 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801551e:	230a      	movs	r3, #10
 8015520:	e1ff      	b.n	8015922 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8015522:	2300      	movs	r3, #0
 8015524:	e1fd      	b.n	8015922 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015528:	2200      	movs	r2, #0
 801552a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801552c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801552e:	b2da      	uxtb	r2, r3
 8015530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015532:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015536:	785b      	ldrb	r3, [r3, #1]
 8015538:	4618      	mov	r0, r3
 801553a:	f7fe fcd9 	bl	8013ef0 <disk_initialize>
 801553e:	4603      	mov	r3, r0
 8015540:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015544:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015548:	f003 0301 	and.w	r3, r3, #1
 801554c:	2b00      	cmp	r3, #0
 801554e:	d001      	beq.n	8015554 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015550:	2303      	movs	r3, #3
 8015552:	e1e6      	b.n	8015922 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015554:	79fb      	ldrb	r3, [r7, #7]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d007      	beq.n	801556a <find_volume+0xda>
 801555a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801555e:	f003 0304 	and.w	r3, r3, #4
 8015562:	2b00      	cmp	r3, #0
 8015564:	d001      	beq.n	801556a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8015566:	230a      	movs	r3, #10
 8015568:	e1db      	b.n	8015922 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801556a:	2300      	movs	r3, #0
 801556c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801556e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015570:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015572:	f7ff ff37 	bl	80153e4 <check_fs>
 8015576:	4603      	mov	r3, r0
 8015578:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801557c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015580:	2b02      	cmp	r3, #2
 8015582:	d149      	bne.n	8015618 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015584:	2300      	movs	r3, #0
 8015586:	643b      	str	r3, [r7, #64]	@ 0x40
 8015588:	e01e      	b.n	80155c8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801558c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015592:	011b      	lsls	r3, r3, #4
 8015594:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8015598:	4413      	add	r3, r2
 801559a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801559e:	3304      	adds	r3, #4
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d006      	beq.n	80155b4 <find_volume+0x124>
 80155a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155a8:	3308      	adds	r3, #8
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7fe fd3d 	bl	801402a <ld_dword>
 80155b0:	4602      	mov	r2, r0
 80155b2:	e000      	b.n	80155b6 <find_volume+0x126>
 80155b4:	2200      	movs	r2, #0
 80155b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155b8:	009b      	lsls	r3, r3, #2
 80155ba:	3358      	adds	r3, #88	@ 0x58
 80155bc:	443b      	add	r3, r7
 80155be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80155c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155c4:	3301      	adds	r3, #1
 80155c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80155c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155ca:	2b03      	cmp	r3, #3
 80155cc:	d9dd      	bls.n	801558a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80155ce:	2300      	movs	r3, #0
 80155d0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80155d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d002      	beq.n	80155de <find_volume+0x14e>
 80155d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155da:	3b01      	subs	r3, #1
 80155dc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80155de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155e0:	009b      	lsls	r3, r3, #2
 80155e2:	3358      	adds	r3, #88	@ 0x58
 80155e4:	443b      	add	r3, r7
 80155e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80155ea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80155ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d005      	beq.n	80155fe <find_volume+0x16e>
 80155f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80155f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80155f6:	f7ff fef5 	bl	80153e4 <check_fs>
 80155fa:	4603      	mov	r3, r0
 80155fc:	e000      	b.n	8015600 <find_volume+0x170>
 80155fe:	2303      	movs	r3, #3
 8015600:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015604:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015608:	2b01      	cmp	r3, #1
 801560a:	d905      	bls.n	8015618 <find_volume+0x188>
 801560c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801560e:	3301      	adds	r3, #1
 8015610:	643b      	str	r3, [r7, #64]	@ 0x40
 8015612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015614:	2b03      	cmp	r3, #3
 8015616:	d9e2      	bls.n	80155de <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015618:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801561c:	2b04      	cmp	r3, #4
 801561e:	d101      	bne.n	8015624 <find_volume+0x194>
 8015620:	2301      	movs	r3, #1
 8015622:	e17e      	b.n	8015922 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015624:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015628:	2b01      	cmp	r3, #1
 801562a:	d901      	bls.n	8015630 <find_volume+0x1a0>
 801562c:	230d      	movs	r3, #13
 801562e:	e178      	b.n	8015922 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015632:	3334      	adds	r3, #52	@ 0x34
 8015634:	330b      	adds	r3, #11
 8015636:	4618      	mov	r0, r3
 8015638:	f7fe fcde 	bl	8013ff8 <ld_word>
 801563c:	4603      	mov	r3, r0
 801563e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015642:	d001      	beq.n	8015648 <find_volume+0x1b8>
 8015644:	230d      	movs	r3, #13
 8015646:	e16c      	b.n	8015922 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801564a:	3334      	adds	r3, #52	@ 0x34
 801564c:	3316      	adds	r3, #22
 801564e:	4618      	mov	r0, r3
 8015650:	f7fe fcd2 	bl	8013ff8 <ld_word>
 8015654:	4603      	mov	r3, r0
 8015656:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801565a:	2b00      	cmp	r3, #0
 801565c:	d106      	bne.n	801566c <find_volume+0x1dc>
 801565e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015660:	3334      	adds	r3, #52	@ 0x34
 8015662:	3324      	adds	r3, #36	@ 0x24
 8015664:	4618      	mov	r0, r3
 8015666:	f7fe fce0 	bl	801402a <ld_dword>
 801566a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801566e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015670:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015674:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8015678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801567a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801567e:	789b      	ldrb	r3, [r3, #2]
 8015680:	2b01      	cmp	r3, #1
 8015682:	d005      	beq.n	8015690 <find_volume+0x200>
 8015684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015686:	789b      	ldrb	r3, [r3, #2]
 8015688:	2b02      	cmp	r3, #2
 801568a:	d001      	beq.n	8015690 <find_volume+0x200>
 801568c:	230d      	movs	r3, #13
 801568e:	e148      	b.n	8015922 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015692:	789b      	ldrb	r3, [r3, #2]
 8015694:	461a      	mov	r2, r3
 8015696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015698:	fb02 f303 	mul.w	r3, r2, r3
 801569c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80156a4:	461a      	mov	r2, r3
 80156a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80156aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ac:	895b      	ldrh	r3, [r3, #10]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d008      	beq.n	80156c4 <find_volume+0x234>
 80156b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b4:	895b      	ldrh	r3, [r3, #10]
 80156b6:	461a      	mov	r2, r3
 80156b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ba:	895b      	ldrh	r3, [r3, #10]
 80156bc:	3b01      	subs	r3, #1
 80156be:	4013      	ands	r3, r2
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d001      	beq.n	80156c8 <find_volume+0x238>
 80156c4:	230d      	movs	r3, #13
 80156c6:	e12c      	b.n	8015922 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80156c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ca:	3334      	adds	r3, #52	@ 0x34
 80156cc:	3311      	adds	r3, #17
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fe fc92 	bl	8013ff8 <ld_word>
 80156d4:	4603      	mov	r3, r0
 80156d6:	461a      	mov	r2, r3
 80156d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80156dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156de:	891b      	ldrh	r3, [r3, #8]
 80156e0:	f003 030f 	and.w	r3, r3, #15
 80156e4:	b29b      	uxth	r3, r3
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d001      	beq.n	80156ee <find_volume+0x25e>
 80156ea:	230d      	movs	r3, #13
 80156ec:	e119      	b.n	8015922 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80156ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156f0:	3334      	adds	r3, #52	@ 0x34
 80156f2:	3313      	adds	r3, #19
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7fe fc7f 	bl	8013ff8 <ld_word>
 80156fa:	4603      	mov	r3, r0
 80156fc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80156fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015700:	2b00      	cmp	r3, #0
 8015702:	d106      	bne.n	8015712 <find_volume+0x282>
 8015704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015706:	3334      	adds	r3, #52	@ 0x34
 8015708:	3320      	adds	r3, #32
 801570a:	4618      	mov	r0, r3
 801570c:	f7fe fc8d 	bl	801402a <ld_dword>
 8015710:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015714:	3334      	adds	r3, #52	@ 0x34
 8015716:	330e      	adds	r3, #14
 8015718:	4618      	mov	r0, r3
 801571a:	f7fe fc6d 	bl	8013ff8 <ld_word>
 801571e:	4603      	mov	r3, r0
 8015720:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015722:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015724:	2b00      	cmp	r3, #0
 8015726:	d101      	bne.n	801572c <find_volume+0x29c>
 8015728:	230d      	movs	r3, #13
 801572a:	e0fa      	b.n	8015922 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801572c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801572e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015730:	4413      	add	r3, r2
 8015732:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015734:	8912      	ldrh	r2, [r2, #8]
 8015736:	0912      	lsrs	r2, r2, #4
 8015738:	b292      	uxth	r2, r2
 801573a:	4413      	add	r3, r2
 801573c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801573e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015742:	429a      	cmp	r2, r3
 8015744:	d204      	bcs.n	8015750 <find_volume+0x2c0>
 8015746:	230d      	movs	r3, #13
 8015748:	e0eb      	b.n	8015922 <find_volume+0x492>
 801574a:	bf00      	nop
 801574c:	200017dc 	.word	0x200017dc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015754:	1ad3      	subs	r3, r2, r3
 8015756:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015758:	8952      	ldrh	r2, [r2, #10]
 801575a:	fbb3 f3f2 	udiv	r3, r3, r2
 801575e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015762:	2b00      	cmp	r3, #0
 8015764:	d101      	bne.n	801576a <find_volume+0x2da>
 8015766:	230d      	movs	r3, #13
 8015768:	e0db      	b.n	8015922 <find_volume+0x492>
		fmt = FS_FAT32;
 801576a:	2303      	movs	r3, #3
 801576c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015772:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8015776:	4293      	cmp	r3, r2
 8015778:	d802      	bhi.n	8015780 <find_volume+0x2f0>
 801577a:	2302      	movs	r3, #2
 801577c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015782:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8015786:	4293      	cmp	r3, r2
 8015788:	d802      	bhi.n	8015790 <find_volume+0x300>
 801578a:	2301      	movs	r3, #1
 801578c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015792:	1c9a      	adds	r2, r3, #2
 8015794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015796:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8015798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801579a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801579c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801579e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80157a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80157a2:	441a      	add	r2, r3
 80157a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80157a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80157aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ac:	441a      	add	r2, r3
 80157ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157b0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80157b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80157b6:	2b03      	cmp	r3, #3
 80157b8:	d11e      	bne.n	80157f8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80157ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157bc:	3334      	adds	r3, #52	@ 0x34
 80157be:	332a      	adds	r3, #42	@ 0x2a
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7fe fc19 	bl	8013ff8 <ld_word>
 80157c6:	4603      	mov	r3, r0
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d001      	beq.n	80157d0 <find_volume+0x340>
 80157cc:	230d      	movs	r3, #13
 80157ce:	e0a8      	b.n	8015922 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80157d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157d2:	891b      	ldrh	r3, [r3, #8]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d001      	beq.n	80157dc <find_volume+0x34c>
 80157d8:	230d      	movs	r3, #13
 80157da:	e0a2      	b.n	8015922 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80157dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157de:	3334      	adds	r3, #52	@ 0x34
 80157e0:	332c      	adds	r3, #44	@ 0x2c
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7fe fc21 	bl	801402a <ld_dword>
 80157e8:	4602      	mov	r2, r0
 80157ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ec:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80157ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157f0:	699b      	ldr	r3, [r3, #24]
 80157f2:	009b      	lsls	r3, r3, #2
 80157f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80157f6:	e01f      	b.n	8015838 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80157f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157fa:	891b      	ldrh	r3, [r3, #8]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d101      	bne.n	8015804 <find_volume+0x374>
 8015800:	230d      	movs	r3, #13
 8015802:	e08e      	b.n	8015922 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801580a:	441a      	add	r2, r3
 801580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801580e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015810:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015814:	2b02      	cmp	r3, #2
 8015816:	d103      	bne.n	8015820 <find_volume+0x390>
 8015818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801581a:	699b      	ldr	r3, [r3, #24]
 801581c:	005b      	lsls	r3, r3, #1
 801581e:	e00a      	b.n	8015836 <find_volume+0x3a6>
 8015820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015822:	699a      	ldr	r2, [r3, #24]
 8015824:	4613      	mov	r3, r2
 8015826:	005b      	lsls	r3, r3, #1
 8015828:	4413      	add	r3, r2
 801582a:	085a      	lsrs	r2, r3, #1
 801582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801582e:	699b      	ldr	r3, [r3, #24]
 8015830:	f003 0301 	and.w	r3, r3, #1
 8015834:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015836:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801583a:	69da      	ldr	r2, [r3, #28]
 801583c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801583e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8015842:	0a5b      	lsrs	r3, r3, #9
 8015844:	429a      	cmp	r2, r3
 8015846:	d201      	bcs.n	801584c <find_volume+0x3bc>
 8015848:	230d      	movs	r3, #13
 801584a:	e06a      	b.n	8015922 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801584e:	f04f 32ff 	mov.w	r2, #4294967295
 8015852:	615a      	str	r2, [r3, #20]
 8015854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015856:	695a      	ldr	r2, [r3, #20]
 8015858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801585a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801585e:	2280      	movs	r2, #128	@ 0x80
 8015860:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015862:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015866:	2b03      	cmp	r3, #3
 8015868:	d149      	bne.n	80158fe <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801586c:	3334      	adds	r3, #52	@ 0x34
 801586e:	3330      	adds	r3, #48	@ 0x30
 8015870:	4618      	mov	r0, r3
 8015872:	f7fe fbc1 	bl	8013ff8 <ld_word>
 8015876:	4603      	mov	r3, r0
 8015878:	2b01      	cmp	r3, #1
 801587a:	d140      	bne.n	80158fe <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801587c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801587e:	3301      	adds	r3, #1
 8015880:	4619      	mov	r1, r3
 8015882:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015884:	f7fe fe9a 	bl	80145bc <move_window>
 8015888:	4603      	mov	r3, r0
 801588a:	2b00      	cmp	r3, #0
 801588c:	d137      	bne.n	80158fe <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015890:	2200      	movs	r2, #0
 8015892:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015896:	3334      	adds	r3, #52	@ 0x34
 8015898:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801589c:	4618      	mov	r0, r3
 801589e:	f7fe fbab 	bl	8013ff8 <ld_word>
 80158a2:	4603      	mov	r3, r0
 80158a4:	461a      	mov	r2, r3
 80158a6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d127      	bne.n	80158fe <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80158ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158b0:	3334      	adds	r3, #52	@ 0x34
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7fe fbb9 	bl	801402a <ld_dword>
 80158b8:	4603      	mov	r3, r0
 80158ba:	4a1c      	ldr	r2, [pc, #112]	@ (801592c <find_volume+0x49c>)
 80158bc:	4293      	cmp	r3, r2
 80158be:	d11e      	bne.n	80158fe <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80158c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158c2:	3334      	adds	r3, #52	@ 0x34
 80158c4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7fe fbae 	bl	801402a <ld_dword>
 80158ce:	4603      	mov	r3, r0
 80158d0:	4a17      	ldr	r2, [pc, #92]	@ (8015930 <find_volume+0x4a0>)
 80158d2:	4293      	cmp	r3, r2
 80158d4:	d113      	bne.n	80158fe <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80158d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158d8:	3334      	adds	r3, #52	@ 0x34
 80158da:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80158de:	4618      	mov	r0, r3
 80158e0:	f7fe fba3 	bl	801402a <ld_dword>
 80158e4:	4602      	mov	r2, r0
 80158e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158e8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80158ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158ec:	3334      	adds	r3, #52	@ 0x34
 80158ee:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fe fb99 	bl	801402a <ld_dword>
 80158f8:	4602      	mov	r2, r0
 80158fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158fc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80158fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015900:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8015904:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015906:	4b0b      	ldr	r3, [pc, #44]	@ (8015934 <find_volume+0x4a4>)
 8015908:	881b      	ldrh	r3, [r3, #0]
 801590a:	3301      	adds	r3, #1
 801590c:	b29a      	uxth	r2, r3
 801590e:	4b09      	ldr	r3, [pc, #36]	@ (8015934 <find_volume+0x4a4>)
 8015910:	801a      	strh	r2, [r3, #0]
 8015912:	4b08      	ldr	r3, [pc, #32]	@ (8015934 <find_volume+0x4a4>)
 8015914:	881a      	ldrh	r2, [r3, #0]
 8015916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015918:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801591a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801591c:	f7fe fde6 	bl	80144ec <clear_lock>
#endif
	return FR_OK;
 8015920:	2300      	movs	r3, #0
}
 8015922:	4618      	mov	r0, r3
 8015924:	3758      	adds	r7, #88	@ 0x58
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	41615252 	.word	0x41615252
 8015930:	61417272 	.word	0x61417272
 8015934:	200017e0 	.word	0x200017e0

08015938 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
 8015940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015942:	2309      	movs	r3, #9
 8015944:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d02e      	beq.n	80159aa <validate+0x72>
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d02a      	beq.n	80159aa <validate+0x72>
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	781b      	ldrb	r3, [r3, #0]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d025      	beq.n	80159aa <validate+0x72>
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	889a      	ldrh	r2, [r3, #4]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	88db      	ldrh	r3, [r3, #6]
 8015968:	429a      	cmp	r2, r3
 801596a:	d11e      	bne.n	80159aa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	4618      	mov	r0, r3
 8015972:	f7fe fc42 	bl	80141fa <lock_fs>
 8015976:	4603      	mov	r3, r0
 8015978:	2b00      	cmp	r3, #0
 801597a:	d014      	beq.n	80159a6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	785b      	ldrb	r3, [r3, #1]
 8015982:	4618      	mov	r0, r3
 8015984:	f7fe fa9a 	bl	8013ebc <disk_status>
 8015988:	4603      	mov	r3, r0
 801598a:	f003 0301 	and.w	r3, r3, #1
 801598e:	2b00      	cmp	r3, #0
 8015990:	d102      	bne.n	8015998 <validate+0x60>
				res = FR_OK;
 8015992:	2300      	movs	r3, #0
 8015994:	73fb      	strb	r3, [r7, #15]
 8015996:	e008      	b.n	80159aa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2100      	movs	r1, #0
 801599e:	4618      	mov	r0, r3
 80159a0:	f7fe fc41 	bl	8014226 <unlock_fs>
 80159a4:	e001      	b.n	80159aa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80159a6:	230f      	movs	r3, #15
 80159a8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80159aa:	7bfb      	ldrb	r3, [r7, #15]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d102      	bne.n	80159b6 <validate+0x7e>
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	e000      	b.n	80159b8 <validate+0x80>
 80159b6:	2300      	movs	r3, #0
 80159b8:	683a      	ldr	r2, [r7, #0]
 80159ba:	6013      	str	r3, [r2, #0]
	return res;
 80159bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80159be:	4618      	mov	r0, r3
 80159c0:	3710      	adds	r7, #16
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
	...

080159c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b088      	sub	sp, #32
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	60b9      	str	r1, [r7, #8]
 80159d2:	4613      	mov	r3, r2
 80159d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80159da:	f107 0310 	add.w	r3, r7, #16
 80159de:	4618      	mov	r0, r3
 80159e0:	f7ff fcbb 	bl	801535a <get_ldnumber>
 80159e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80159e6:	69fb      	ldr	r3, [r7, #28]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	da01      	bge.n	80159f0 <f_mount+0x28>
 80159ec:	230b      	movs	r3, #11
 80159ee:	e048      	b.n	8015a82 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80159f0:	4a26      	ldr	r2, [pc, #152]	@ (8015a8c <f_mount+0xc4>)
 80159f2:	69fb      	ldr	r3, [r7, #28]
 80159f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80159fa:	69bb      	ldr	r3, [r7, #24]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d00f      	beq.n	8015a20 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8015a00:	69b8      	ldr	r0, [r7, #24]
 8015a02:	f7fe fd73 	bl	80144ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8015a06:	69bb      	ldr	r3, [r7, #24]
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f000 fde7 	bl	80165de <ff_del_syncobj>
 8015a10:	4603      	mov	r3, r0
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d101      	bne.n	8015a1a <f_mount+0x52>
 8015a16:	2302      	movs	r3, #2
 8015a18:	e033      	b.n	8015a82 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015a1a:	69bb      	ldr	r3, [r7, #24]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d00f      	beq.n	8015a46 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	b2da      	uxtb	r2, r3
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	330c      	adds	r3, #12
 8015a34:	4619      	mov	r1, r3
 8015a36:	4610      	mov	r0, r2
 8015a38:	f000 fdb1 	bl	801659e <ff_cre_syncobj>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d101      	bne.n	8015a46 <f_mount+0x7e>
 8015a42:	2302      	movs	r3, #2
 8015a44:	e01d      	b.n	8015a82 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015a46:	68fa      	ldr	r2, [r7, #12]
 8015a48:	4910      	ldr	r1, [pc, #64]	@ (8015a8c <f_mount+0xc4>)
 8015a4a:	69fb      	ldr	r3, [r7, #28]
 8015a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d002      	beq.n	8015a5c <f_mount+0x94>
 8015a56:	79fb      	ldrb	r3, [r7, #7]
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d001      	beq.n	8015a60 <f_mount+0x98>
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	e010      	b.n	8015a82 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015a60:	f107 010c 	add.w	r1, r7, #12
 8015a64:	f107 0308 	add.w	r3, r7, #8
 8015a68:	2200      	movs	r2, #0
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7ff fd10 	bl	8015490 <find_volume>
 8015a70:	4603      	mov	r3, r0
 8015a72:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	7dfa      	ldrb	r2, [r7, #23]
 8015a78:	4611      	mov	r1, r2
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7fe fbd3 	bl	8014226 <unlock_fs>
 8015a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3720      	adds	r7, #32
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}
 8015a8a:	bf00      	nop
 8015a8c:	200017dc 	.word	0x200017dc

08015a90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b098      	sub	sp, #96	@ 0x60
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	4613      	mov	r3, r2
 8015a9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d101      	bne.n	8015aa8 <f_open+0x18>
 8015aa4:	2309      	movs	r3, #9
 8015aa6:	e1b0      	b.n	8015e0a <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015aa8:	79fb      	ldrb	r3, [r7, #7]
 8015aaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015aae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015ab0:	79fa      	ldrb	r2, [r7, #7]
 8015ab2:	f107 0110 	add.w	r1, r7, #16
 8015ab6:	f107 0308 	add.w	r3, r7, #8
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7ff fce8 	bl	8015490 <find_volume>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8015ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	f040 818d 	bne.w	8015dea <f_open+0x35a>
		dj.obj.fs = fs;
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015ad4:	68ba      	ldr	r2, [r7, #8]
 8015ad6:	f107 0314 	add.w	r3, r7, #20
 8015ada:	4611      	mov	r1, r2
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7ff fbcb 	bl	8015278 <follow_path>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d118      	bne.n	8015b22 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015af0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015af4:	b25b      	sxtb	r3, r3
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	da03      	bge.n	8015b02 <f_open+0x72>
				res = FR_INVALID_NAME;
 8015afa:	2306      	movs	r3, #6
 8015afc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015b00:	e00f      	b.n	8015b22 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015b02:	79fb      	ldrb	r3, [r7, #7]
 8015b04:	2b01      	cmp	r3, #1
 8015b06:	bf8c      	ite	hi
 8015b08:	2301      	movhi	r3, #1
 8015b0a:	2300      	movls	r3, #0
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	461a      	mov	r2, r3
 8015b10:	f107 0314 	add.w	r3, r7, #20
 8015b14:	4611      	mov	r1, r2
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7fe fba0 	bl	801425c <chk_lock>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015b22:	79fb      	ldrb	r3, [r7, #7]
 8015b24:	f003 031c 	and.w	r3, r3, #28
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d07f      	beq.n	8015c2c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8015b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d017      	beq.n	8015b64 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015b34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b38:	2b04      	cmp	r3, #4
 8015b3a:	d10e      	bne.n	8015b5a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015b3c:	f7fe fbea 	bl	8014314 <enq_lock>
 8015b40:	4603      	mov	r3, r0
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d006      	beq.n	8015b54 <f_open+0xc4>
 8015b46:	f107 0314 	add.w	r3, r7, #20
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7ff face 	bl	80150ec <dir_register>
 8015b50:	4603      	mov	r3, r0
 8015b52:	e000      	b.n	8015b56 <f_open+0xc6>
 8015b54:	2312      	movs	r3, #18
 8015b56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015b5a:	79fb      	ldrb	r3, [r7, #7]
 8015b5c:	f043 0308 	orr.w	r3, r3, #8
 8015b60:	71fb      	strb	r3, [r7, #7]
 8015b62:	e010      	b.n	8015b86 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015b64:	7ebb      	ldrb	r3, [r7, #26]
 8015b66:	f003 0311 	and.w	r3, r3, #17
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d003      	beq.n	8015b76 <f_open+0xe6>
					res = FR_DENIED;
 8015b6e:	2307      	movs	r3, #7
 8015b70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015b74:	e007      	b.n	8015b86 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015b76:	79fb      	ldrb	r3, [r7, #7]
 8015b78:	f003 0304 	and.w	r3, r3, #4
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d002      	beq.n	8015b86 <f_open+0xf6>
 8015b80:	2308      	movs	r3, #8
 8015b82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015b86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d168      	bne.n	8015c60 <f_open+0x1d0>
 8015b8e:	79fb      	ldrb	r3, [r7, #7]
 8015b90:	f003 0308 	and.w	r3, r3, #8
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d063      	beq.n	8015c60 <f_open+0x1d0>
				dw = GET_FATTIME();
 8015b98:	f7fb fdcc 	bl	8011734 <get_fattime>
 8015b9c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ba0:	330e      	adds	r3, #14
 8015ba2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7fe fa7e 	bl	80140a6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bac:	3316      	adds	r3, #22
 8015bae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7fe fa78 	bl	80140a6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bb8:	330b      	adds	r3, #11
 8015bba:	2220      	movs	r2, #32
 8015bbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015bc2:	4611      	mov	r1, r2
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7ff f9fd 	bl	8014fc4 <ld_clust>
 8015bca:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7ff fa15 	bl	8015002 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bda:	331c      	adds	r3, #28
 8015bdc:	2100      	movs	r1, #0
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7fe fa61 	bl	80140a6 <st_dword>
					fs->wflag = 1;
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	2201      	movs	r2, #1
 8015be8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8015bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d037      	beq.n	8015c60 <f_open+0x1d0>
						dw = fs->winsect;
 8015bf0:	693b      	ldr	r3, [r7, #16]
 8015bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015bf4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8015bf6:	f107 0314 	add.w	r3, r7, #20
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7fe ff28 	bl	8014a54 <remove_chain>
 8015c04:	4603      	mov	r3, r0
 8015c06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8015c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d126      	bne.n	8015c60 <f_open+0x1d0>
							res = move_window(fs, dw);
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fe fcd0 	bl	80145bc <move_window>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015c26:	3a01      	subs	r2, #1
 8015c28:	611a      	str	r2, [r3, #16]
 8015c2a:	e019      	b.n	8015c60 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d115      	bne.n	8015c60 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015c34:	7ebb      	ldrb	r3, [r7, #26]
 8015c36:	f003 0310 	and.w	r3, r3, #16
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d003      	beq.n	8015c46 <f_open+0x1b6>
					res = FR_NO_FILE;
 8015c3e:	2304      	movs	r3, #4
 8015c40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015c44:	e00c      	b.n	8015c60 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015c46:	79fb      	ldrb	r3, [r7, #7]
 8015c48:	f003 0302 	and.w	r3, r3, #2
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d007      	beq.n	8015c60 <f_open+0x1d0>
 8015c50:	7ebb      	ldrb	r3, [r7, #26]
 8015c52:	f003 0301 	and.w	r3, r3, #1
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d002      	beq.n	8015c60 <f_open+0x1d0>
						res = FR_DENIED;
 8015c5a:	2307      	movs	r3, #7
 8015c5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8015c60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d126      	bne.n	8015cb6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015c68:	79fb      	ldrb	r3, [r7, #7]
 8015c6a:	f003 0308 	and.w	r3, r3, #8
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d003      	beq.n	8015c7a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8015c72:	79fb      	ldrb	r3, [r7, #7]
 8015c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8015c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015c88:	79fb      	ldrb	r3, [r7, #7]
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	bf8c      	ite	hi
 8015c8e:	2301      	movhi	r3, #1
 8015c90:	2300      	movls	r3, #0
 8015c92:	b2db      	uxtb	r3, r3
 8015c94:	461a      	mov	r2, r3
 8015c96:	f107 0314 	add.w	r3, r7, #20
 8015c9a:	4611      	mov	r1, r2
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7fe fb5b 	bl	8014358 <inc_lock>
 8015ca2:	4602      	mov	r2, r0
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	691b      	ldr	r3, [r3, #16]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d102      	bne.n	8015cb6 <f_open+0x226>
 8015cb0:	2302      	movs	r3, #2
 8015cb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f040 8095 	bne.w	8015dea <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015cc4:	4611      	mov	r1, r2
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7ff f97c 	bl	8014fc4 <ld_clust>
 8015ccc:	4602      	mov	r2, r0
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cd4:	331c      	adds	r3, #28
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7fe f9a7 	bl	801402a <ld_dword>
 8015cdc:	4602      	mov	r2, r0
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015ce8:	693a      	ldr	r2, [r7, #16]
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	88da      	ldrh	r2, [r3, #6]
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	79fa      	ldrb	r2, [r7, #7]
 8015cfa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	2200      	movs	r2, #0
 8015d06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	3330      	adds	r3, #48	@ 0x30
 8015d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015d16:	2100      	movs	r1, #0
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7fe fa11 	bl	8014140 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015d1e:	79fb      	ldrb	r3, [r7, #7]
 8015d20:	f003 0320 	and.w	r3, r3, #32
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d060      	beq.n	8015dea <f_open+0x35a>
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	68db      	ldr	r3, [r3, #12]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d05c      	beq.n	8015dea <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	68da      	ldr	r2, [r3, #12]
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	895b      	ldrh	r3, [r3, #10]
 8015d3c:	025b      	lsls	r3, r3, #9
 8015d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	689b      	ldr	r3, [r3, #8]
 8015d44:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	68db      	ldr	r3, [r3, #12]
 8015d4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8015d4c:	e016      	b.n	8015d7c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7fe fced 	bl	8014732 <get_fat>
 8015d58:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8015d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015d5c:	2b01      	cmp	r3, #1
 8015d5e:	d802      	bhi.n	8015d66 <f_open+0x2d6>
 8015d60:	2302      	movs	r3, #2
 8015d62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d6c:	d102      	bne.n	8015d74 <f_open+0x2e4>
 8015d6e:	2301      	movs	r3, #1
 8015d70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015d74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d78:	1ad3      	subs	r3, r2, r3
 8015d7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8015d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d103      	bne.n	8015d8c <f_open+0x2fc>
 8015d84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d88:	429a      	cmp	r2, r3
 8015d8a:	d8e0      	bhi.n	8015d4e <f_open+0x2be>
				}
				fp->clust = clst;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015d90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015d92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d127      	bne.n	8015dea <f_open+0x35a>
 8015d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d022      	beq.n	8015dea <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015da4:	693b      	ldr	r3, [r7, #16]
 8015da6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7fe fca3 	bl	80146f4 <clust2sect>
 8015dae:	6478      	str	r0, [r7, #68]	@ 0x44
 8015db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d103      	bne.n	8015dbe <f_open+0x32e>
						res = FR_INT_ERR;
 8015db6:	2302      	movs	r3, #2
 8015db8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015dbc:	e015      	b.n	8015dea <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015dc0:	0a5a      	lsrs	r2, r3, #9
 8015dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015dc4:	441a      	add	r2, r3
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	7858      	ldrb	r0, [r3, #1]
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	6a1a      	ldr	r2, [r3, #32]
 8015dd8:	2301      	movs	r3, #1
 8015dda:	f7fe f8af 	bl	8013f3c <disk_read>
 8015dde:	4603      	mov	r3, r0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d002      	beq.n	8015dea <f_open+0x35a>
 8015de4:	2301      	movs	r3, #1
 8015de6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015dea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d002      	beq.n	8015df8 <f_open+0x368>
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2200      	movs	r2, #0
 8015df6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8015dfe:	4611      	mov	r1, r2
 8015e00:	4618      	mov	r0, r3
 8015e02:	f7fe fa10 	bl	8014226 <unlock_fs>
 8015e06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3760      	adds	r7, #96	@ 0x60
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b08c      	sub	sp, #48	@ 0x30
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	60f8      	str	r0, [r7, #12]
 8015e1a:	60b9      	str	r1, [r7, #8]
 8015e1c:	607a      	str	r2, [r7, #4]
 8015e1e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	2200      	movs	r2, #0
 8015e28:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	f107 0210 	add.w	r2, r7, #16
 8015e30:	4611      	mov	r1, r2
 8015e32:	4618      	mov	r0, r3
 8015e34:	f7ff fd80 	bl	8015938 <validate>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d107      	bne.n	8015e56 <f_write+0x44>
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	7d5b      	ldrb	r3, [r3, #21]
 8015e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8015e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d009      	beq.n	8015e6a <f_write+0x58>
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8015e5c:	4611      	mov	r1, r2
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7fe f9e1 	bl	8014226 <unlock_fs>
 8015e64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015e68:	e173      	b.n	8016152 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	7d1b      	ldrb	r3, [r3, #20]
 8015e6e:	f003 0302 	and.w	r3, r3, #2
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d106      	bne.n	8015e84 <f_write+0x72>
 8015e76:	693b      	ldr	r3, [r7, #16]
 8015e78:	2107      	movs	r1, #7
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7fe f9d3 	bl	8014226 <unlock_fs>
 8015e80:	2307      	movs	r3, #7
 8015e82:	e166      	b.n	8016152 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	699a      	ldr	r2, [r3, #24]
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	441a      	add	r2, r3
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	699b      	ldr	r3, [r3, #24]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	f080 814b 	bcs.w	801612c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	699b      	ldr	r3, [r3, #24]
 8015e9a:	43db      	mvns	r3, r3
 8015e9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015e9e:	e145      	b.n	801612c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	699b      	ldr	r3, [r3, #24]
 8015ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	f040 8101 	bne.w	80160b0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	699b      	ldr	r3, [r3, #24]
 8015eb2:	0a5b      	lsrs	r3, r3, #9
 8015eb4:	693a      	ldr	r2, [r7, #16]
 8015eb6:	8952      	ldrh	r2, [r2, #10]
 8015eb8:	3a01      	subs	r2, #1
 8015eba:	4013      	ands	r3, r2
 8015ebc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015ebe:	69bb      	ldr	r3, [r7, #24]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d14d      	bne.n	8015f60 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	699b      	ldr	r3, [r3, #24]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d10c      	bne.n	8015ee6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	689b      	ldr	r3, [r3, #8]
 8015ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d11a      	bne.n	8015f0e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2100      	movs	r1, #0
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fe fe1e 	bl	8014b1e <create_chain>
 8015ee2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015ee4:	e013      	b.n	8015f0e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d007      	beq.n	8015efe <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	699b      	ldr	r3, [r3, #24]
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	68f8      	ldr	r0, [r7, #12]
 8015ef6:	f7fe feaa 	bl	8014c4e <clmt_clust>
 8015efa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015efc:	e007      	b.n	8015f0e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015efe:	68fa      	ldr	r2, [r7, #12]
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	69db      	ldr	r3, [r3, #28]
 8015f04:	4619      	mov	r1, r3
 8015f06:	4610      	mov	r0, r2
 8015f08:	f7fe fe09 	bl	8014b1e <create_chain>
 8015f0c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	f000 8110 	beq.w	8016136 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d109      	bne.n	8015f30 <f_write+0x11e>
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	2202      	movs	r2, #2
 8015f20:	755a      	strb	r2, [r3, #21]
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	2102      	movs	r1, #2
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7fe f97d 	bl	8014226 <unlock_fs>
 8015f2c:	2302      	movs	r3, #2
 8015f2e:	e110      	b.n	8016152 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f36:	d109      	bne.n	8015f4c <f_write+0x13a>
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	755a      	strb	r2, [r3, #21]
 8015f3e:	693b      	ldr	r3, [r7, #16]
 8015f40:	2101      	movs	r1, #1
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7fe f96f 	bl	8014226 <unlock_fs>
 8015f48:	2301      	movs	r3, #1
 8015f4a:	e102      	b.n	8016152 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f50:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	689b      	ldr	r3, [r3, #8]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d102      	bne.n	8015f60 <f_write+0x14e>
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f5e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	7d1b      	ldrb	r3, [r3, #20]
 8015f64:	b25b      	sxtb	r3, r3
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	da1d      	bge.n	8015fa6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	7858      	ldrb	r0, [r3, #1]
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	6a1a      	ldr	r2, [r3, #32]
 8015f78:	2301      	movs	r3, #1
 8015f7a:	f7fd ffff 	bl	8013f7c <disk_write>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d009      	beq.n	8015f98 <f_write+0x186>
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	2201      	movs	r2, #1
 8015f88:	755a      	strb	r2, [r3, #21]
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	2101      	movs	r1, #1
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f7fe f949 	bl	8014226 <unlock_fs>
 8015f94:	2301      	movs	r3, #1
 8015f96:	e0dc      	b.n	8016152 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	7d1b      	ldrb	r3, [r3, #20]
 8015f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015fa0:	b2da      	uxtb	r2, r3
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015fa6:	693a      	ldr	r2, [r7, #16]
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	69db      	ldr	r3, [r3, #28]
 8015fac:	4619      	mov	r1, r3
 8015fae:	4610      	mov	r0, r2
 8015fb0:	f7fe fba0 	bl	80146f4 <clust2sect>
 8015fb4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d109      	bne.n	8015fd0 <f_write+0x1be>
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	2202      	movs	r2, #2
 8015fc0:	755a      	strb	r2, [r3, #21]
 8015fc2:	693b      	ldr	r3, [r7, #16]
 8015fc4:	2102      	movs	r1, #2
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fe f92d 	bl	8014226 <unlock_fs>
 8015fcc:	2302      	movs	r3, #2
 8015fce:	e0c0      	b.n	8016152 <f_write+0x340>
			sect += csect;
 8015fd0:	697a      	ldr	r2, [r7, #20]
 8015fd2:	69bb      	ldr	r3, [r7, #24]
 8015fd4:	4413      	add	r3, r2
 8015fd6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	0a5b      	lsrs	r3, r3, #9
 8015fdc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015fde:	6a3b      	ldr	r3, [r7, #32]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d041      	beq.n	8016068 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015fe4:	69ba      	ldr	r2, [r7, #24]
 8015fe6:	6a3b      	ldr	r3, [r7, #32]
 8015fe8:	4413      	add	r3, r2
 8015fea:	693a      	ldr	r2, [r7, #16]
 8015fec:	8952      	ldrh	r2, [r2, #10]
 8015fee:	4293      	cmp	r3, r2
 8015ff0:	d905      	bls.n	8015ffe <f_write+0x1ec>
					cc = fs->csize - csect;
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	895b      	ldrh	r3, [r3, #10]
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	69bb      	ldr	r3, [r7, #24]
 8015ffa:	1ad3      	subs	r3, r2, r3
 8015ffc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	7858      	ldrb	r0, [r3, #1]
 8016002:	6a3b      	ldr	r3, [r7, #32]
 8016004:	697a      	ldr	r2, [r7, #20]
 8016006:	69f9      	ldr	r1, [r7, #28]
 8016008:	f7fd ffb8 	bl	8013f7c <disk_write>
 801600c:	4603      	mov	r3, r0
 801600e:	2b00      	cmp	r3, #0
 8016010:	d009      	beq.n	8016026 <f_write+0x214>
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	2201      	movs	r2, #1
 8016016:	755a      	strb	r2, [r3, #21]
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	2101      	movs	r1, #1
 801601c:	4618      	mov	r0, r3
 801601e:	f7fe f902 	bl	8014226 <unlock_fs>
 8016022:	2301      	movs	r3, #1
 8016024:	e095      	b.n	8016152 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	6a1a      	ldr	r2, [r3, #32]
 801602a:	697b      	ldr	r3, [r7, #20]
 801602c:	1ad3      	subs	r3, r2, r3
 801602e:	6a3a      	ldr	r2, [r7, #32]
 8016030:	429a      	cmp	r2, r3
 8016032:	d915      	bls.n	8016060 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	6a1a      	ldr	r2, [r3, #32]
 801603e:	697b      	ldr	r3, [r7, #20]
 8016040:	1ad3      	subs	r3, r2, r3
 8016042:	025b      	lsls	r3, r3, #9
 8016044:	69fa      	ldr	r2, [r7, #28]
 8016046:	4413      	add	r3, r2
 8016048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801604c:	4619      	mov	r1, r3
 801604e:	f7fe f856 	bl	80140fe <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	7d1b      	ldrb	r3, [r3, #20]
 8016056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801605a:	b2da      	uxtb	r2, r3
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016060:	6a3b      	ldr	r3, [r7, #32]
 8016062:	025b      	lsls	r3, r3, #9
 8016064:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8016066:	e044      	b.n	80160f2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	6a1b      	ldr	r3, [r3, #32]
 801606c:	697a      	ldr	r2, [r7, #20]
 801606e:	429a      	cmp	r2, r3
 8016070:	d01b      	beq.n	80160aa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	699a      	ldr	r2, [r3, #24]
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801607a:	429a      	cmp	r2, r3
 801607c:	d215      	bcs.n	80160aa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	7858      	ldrb	r0, [r3, #1]
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016088:	2301      	movs	r3, #1
 801608a:	697a      	ldr	r2, [r7, #20]
 801608c:	f7fd ff56 	bl	8013f3c <disk_read>
 8016090:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016092:	2b00      	cmp	r3, #0
 8016094:	d009      	beq.n	80160aa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	2201      	movs	r2, #1
 801609a:	755a      	strb	r2, [r3, #21]
 801609c:	693b      	ldr	r3, [r7, #16]
 801609e:	2101      	movs	r1, #1
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7fe f8c0 	bl	8014226 <unlock_fs>
 80160a6:	2301      	movs	r3, #1
 80160a8:	e053      	b.n	8016152 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	697a      	ldr	r2, [r7, #20]
 80160ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	699b      	ldr	r3, [r3, #24]
 80160b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80160bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80160be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d901      	bls.n	80160ca <f_write+0x2b8>
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	699b      	ldr	r3, [r3, #24]
 80160d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160d8:	4413      	add	r3, r2
 80160da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160dc:	69f9      	ldr	r1, [r7, #28]
 80160de:	4618      	mov	r0, r3
 80160e0:	f7fe f80d 	bl	80140fe <mem_cpy>
		fp->flag |= FA_DIRTY;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	7d1b      	ldrb	r3, [r3, #20]
 80160e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80160ec:	b2da      	uxtb	r2, r3
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80160f2:	69fa      	ldr	r2, [r7, #28]
 80160f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160f6:	4413      	add	r3, r2
 80160f8:	61fb      	str	r3, [r7, #28]
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	699a      	ldr	r2, [r3, #24]
 80160fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016100:	441a      	add	r2, r3
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	619a      	str	r2, [r3, #24]
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	68da      	ldr	r2, [r3, #12]
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	699b      	ldr	r3, [r3, #24]
 801610e:	429a      	cmp	r2, r3
 8016110:	bf38      	it	cc
 8016112:	461a      	movcc	r2, r3
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	60da      	str	r2, [r3, #12]
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	681a      	ldr	r2, [r3, #0]
 801611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801611e:	441a      	add	r2, r3
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	601a      	str	r2, [r3, #0]
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016128:	1ad3      	subs	r3, r2, r3
 801612a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2b00      	cmp	r3, #0
 8016130:	f47f aeb6 	bne.w	8015ea0 <f_write+0x8e>
 8016134:	e000      	b.n	8016138 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016136:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	7d1b      	ldrb	r3, [r3, #20]
 801613c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016140:	b2da      	uxtb	r2, r3
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	2100      	movs	r1, #0
 801614a:	4618      	mov	r0, r3
 801614c:	f7fe f86b 	bl	8014226 <unlock_fs>
 8016150:	2300      	movs	r3, #0
}
 8016152:	4618      	mov	r0, r3
 8016154:	3730      	adds	r7, #48	@ 0x30
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}

0801615a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801615a:	b580      	push	{r7, lr}
 801615c:	b086      	sub	sp, #24
 801615e:	af00      	add	r7, sp, #0
 8016160:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f107 0208 	add.w	r2, r7, #8
 8016168:	4611      	mov	r1, r2
 801616a:	4618      	mov	r0, r3
 801616c:	f7ff fbe4 	bl	8015938 <validate>
 8016170:	4603      	mov	r3, r0
 8016172:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016174:	7dfb      	ldrb	r3, [r7, #23]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d16d      	bne.n	8016256 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	7d1b      	ldrb	r3, [r3, #20]
 801617e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016182:	2b00      	cmp	r3, #0
 8016184:	d067      	beq.n	8016256 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	7d1b      	ldrb	r3, [r3, #20]
 801618a:	b25b      	sxtb	r3, r3
 801618c:	2b00      	cmp	r3, #0
 801618e:	da1a      	bge.n	80161c6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	7858      	ldrb	r0, [r3, #1]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6a1a      	ldr	r2, [r3, #32]
 801619e:	2301      	movs	r3, #1
 80161a0:	f7fd feec 	bl	8013f7c <disk_write>
 80161a4:	4603      	mov	r3, r0
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d006      	beq.n	80161b8 <f_sync+0x5e>
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	2101      	movs	r1, #1
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7fe f839 	bl	8014226 <unlock_fs>
 80161b4:	2301      	movs	r3, #1
 80161b6:	e055      	b.n	8016264 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	7d1b      	ldrb	r3, [r3, #20]
 80161bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80161c0:	b2da      	uxtb	r2, r3
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80161c6:	f7fb fab5 	bl	8011734 <get_fattime>
 80161ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80161cc:	68ba      	ldr	r2, [r7, #8]
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161d2:	4619      	mov	r1, r3
 80161d4:	4610      	mov	r0, r2
 80161d6:	f7fe f9f1 	bl	80145bc <move_window>
 80161da:	4603      	mov	r3, r0
 80161dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80161de:	7dfb      	ldrb	r3, [r7, #23]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d138      	bne.n	8016256 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	330b      	adds	r3, #11
 80161ee:	781a      	ldrb	r2, [r3, #0]
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	330b      	adds	r3, #11
 80161f4:	f042 0220 	orr.w	r2, r2, #32
 80161f8:	b2d2      	uxtb	r2, r2
 80161fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	6818      	ldr	r0, [r3, #0]
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	689b      	ldr	r3, [r3, #8]
 8016204:	461a      	mov	r2, r3
 8016206:	68f9      	ldr	r1, [r7, #12]
 8016208:	f7fe fefb 	bl	8015002 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	f103 021c 	add.w	r2, r3, #28
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	68db      	ldr	r3, [r3, #12]
 8016216:	4619      	mov	r1, r3
 8016218:	4610      	mov	r0, r2
 801621a:	f7fd ff44 	bl	80140a6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	3316      	adds	r3, #22
 8016222:	6939      	ldr	r1, [r7, #16]
 8016224:	4618      	mov	r0, r3
 8016226:	f7fd ff3e 	bl	80140a6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	3312      	adds	r3, #18
 801622e:	2100      	movs	r1, #0
 8016230:	4618      	mov	r0, r3
 8016232:	f7fd ff1d 	bl	8014070 <st_word>
					fs->wflag = 1;
 8016236:	68bb      	ldr	r3, [r7, #8]
 8016238:	2201      	movs	r2, #1
 801623a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	4618      	mov	r0, r3
 8016240:	f7fe f9ea 	bl	8014618 <sync_fs>
 8016244:	4603      	mov	r3, r0
 8016246:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	7d1b      	ldrb	r3, [r3, #20]
 801624c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016250:	b2da      	uxtb	r2, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016256:	68bb      	ldr	r3, [r7, #8]
 8016258:	7dfa      	ldrb	r2, [r7, #23]
 801625a:	4611      	mov	r1, r2
 801625c:	4618      	mov	r0, r3
 801625e:	f7fd ffe2 	bl	8014226 <unlock_fs>
 8016262:	7dfb      	ldrb	r3, [r7, #23]
}
 8016264:	4618      	mov	r0, r3
 8016266:	3718      	adds	r7, #24
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}

0801626c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b084      	sub	sp, #16
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f7ff ff70 	bl	801615a <f_sync>
 801627a:	4603      	mov	r3, r0
 801627c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801627e:	7bfb      	ldrb	r3, [r7, #15]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d11d      	bne.n	80162c0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f107 0208 	add.w	r2, r7, #8
 801628a:	4611      	mov	r1, r2
 801628c:	4618      	mov	r0, r3
 801628e:	f7ff fb53 	bl	8015938 <validate>
 8016292:	4603      	mov	r3, r0
 8016294:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016296:	7bfb      	ldrb	r3, [r7, #15]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d111      	bne.n	80162c0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	691b      	ldr	r3, [r3, #16]
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7fe f8e7 	bl	8014474 <dec_lock>
 80162a6:	4603      	mov	r3, r0
 80162a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80162aa:	7bfb      	ldrb	r3, [r7, #15]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d102      	bne.n	80162b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2200      	movs	r2, #0
 80162b4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	2100      	movs	r1, #0
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fd ffb3 	bl	8014226 <unlock_fs>
#endif
		}
	}
	return res;
 80162c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80162c2:	4618      	mov	r0, r3
 80162c4:	3710      	adds	r7, #16
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}

080162ca <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80162ca:	b580      	push	{r7, lr}
 80162cc:	b096      	sub	sp, #88	@ 0x58
 80162ce:	af00      	add	r7, sp, #0
 80162d0:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80162d2:	f107 0108 	add.w	r1, r7, #8
 80162d6:	1d3b      	adds	r3, r7, #4
 80162d8:	2202      	movs	r2, #2
 80162da:	4618      	mov	r0, r3
 80162dc:	f7ff f8d8 	bl	8015490 <find_volume>
 80162e0:	4603      	mov	r3, r0
 80162e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80162ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	f040 80ec 	bne.w	80164cc <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	f107 030c 	add.w	r3, r7, #12
 80162fa:	4611      	mov	r1, r2
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7fe ffbb 	bl	8015278 <follow_path>
 8016302:	4603      	mov	r3, r0
 8016304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016308:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801630c:	2b00      	cmp	r3, #0
 801630e:	d102      	bne.n	8016316 <f_mkdir+0x4c>
 8016310:	2308      	movs	r3, #8
 8016312:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016316:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801631a:	2b04      	cmp	r3, #4
 801631c:	f040 80d6 	bne.w	80164cc <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016320:	f107 030c 	add.w	r3, r7, #12
 8016324:	2100      	movs	r1, #0
 8016326:	4618      	mov	r0, r3
 8016328:	f7fe fbf9 	bl	8014b1e <create_chain>
 801632c:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	895b      	ldrh	r3, [r3, #10]
 8016332:	025b      	lsls	r3, r3, #9
 8016334:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8016336:	2300      	movs	r3, #0
 8016338:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801633c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801633e:	2b00      	cmp	r3, #0
 8016340:	d102      	bne.n	8016348 <f_mkdir+0x7e>
 8016342:	2307      	movs	r3, #7
 8016344:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8016348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801634a:	2b01      	cmp	r3, #1
 801634c:	d102      	bne.n	8016354 <f_mkdir+0x8a>
 801634e:	2302      	movs	r3, #2
 8016350:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801635a:	d102      	bne.n	8016362 <f_mkdir+0x98>
 801635c:	2301      	movs	r3, #1
 801635e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016362:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016366:	2b00      	cmp	r3, #0
 8016368:	d106      	bne.n	8016378 <f_mkdir+0xae>
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	4618      	mov	r0, r3
 801636e:	f7fe f8e1 	bl	8014534 <sync_window>
 8016372:	4603      	mov	r3, r0
 8016374:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8016378:	f7fb f9dc 	bl	8011734 <get_fattime>
 801637c:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801637e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016382:	2b00      	cmp	r3, #0
 8016384:	d16a      	bne.n	801645c <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8016386:	68bb      	ldr	r3, [r7, #8]
 8016388:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801638a:	4618      	mov	r0, r3
 801638c:	f7fe f9b2 	bl	80146f4 <clust2sect>
 8016390:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8016392:	68bb      	ldr	r3, [r7, #8]
 8016394:	3334      	adds	r3, #52	@ 0x34
 8016396:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8016398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801639c:	2100      	movs	r1, #0
 801639e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80163a0:	f7fd fece 	bl	8014140 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80163a4:	220b      	movs	r2, #11
 80163a6:	2120      	movs	r1, #32
 80163a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80163aa:	f7fd fec9 	bl	8014140 <mem_set>
					dir[DIR_Name] = '.';
 80163ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163b0:	222e      	movs	r2, #46	@ 0x2e
 80163b2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80163b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163b6:	330b      	adds	r3, #11
 80163b8:	2210      	movs	r2, #16
 80163ba:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80163bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163be:	3316      	adds	r3, #22
 80163c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7fd fe6f 	bl	80140a6 <st_dword>
					st_clust(fs, dir, dcl);
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80163cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7fe fe17 	bl	8015002 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80163d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163d6:	3320      	adds	r3, #32
 80163d8:	2220      	movs	r2, #32
 80163da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80163dc:	4618      	mov	r0, r3
 80163de:	f7fd fe8e 	bl	80140fe <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80163e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163e4:	3321      	adds	r3, #33	@ 0x21
 80163e6:	222e      	movs	r2, #46	@ 0x2e
 80163e8:	701a      	strb	r2, [r3, #0]
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	2b03      	cmp	r3, #3
 80163f4:	d106      	bne.n	8016404 <f_mkdir+0x13a>
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d101      	bne.n	8016404 <f_mkdir+0x13a>
 8016400:	2300      	movs	r3, #0
 8016402:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8016404:	68b8      	ldr	r0, [r7, #8]
 8016406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016408:	3320      	adds	r3, #32
 801640a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801640c:	4619      	mov	r1, r3
 801640e:	f7fe fdf8 	bl	8015002 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	895b      	ldrh	r3, [r3, #10]
 8016416:	653b      	str	r3, [r7, #80]	@ 0x50
 8016418:	e01b      	b.n	8016452 <f_mkdir+0x188>
					fs->winsect = dsc++;
 801641a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801641c:	1c5a      	adds	r2, r3, #1
 801641e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	2201      	movs	r2, #1
 8016428:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801642a:	68bb      	ldr	r3, [r7, #8]
 801642c:	4618      	mov	r0, r3
 801642e:	f7fe f881 	bl	8014534 <sync_window>
 8016432:	4603      	mov	r3, r0
 8016434:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8016438:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801643c:	2b00      	cmp	r3, #0
 801643e:	d10c      	bne.n	801645a <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8016440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016444:	2100      	movs	r1, #0
 8016446:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016448:	f7fd fe7a 	bl	8014140 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801644c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801644e:	3b01      	subs	r3, #1
 8016450:	653b      	str	r3, [r7, #80]	@ 0x50
 8016452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016454:	2b00      	cmp	r3, #0
 8016456:	d1e0      	bne.n	801641a <f_mkdir+0x150>
 8016458:	e000      	b.n	801645c <f_mkdir+0x192>
					if (res != FR_OK) break;
 801645a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801645c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016460:	2b00      	cmp	r3, #0
 8016462:	d107      	bne.n	8016474 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016464:	f107 030c 	add.w	r3, r7, #12
 8016468:	4618      	mov	r0, r3
 801646a:	f7fe fe3f 	bl	80150ec <dir_register>
 801646e:	4603      	mov	r3, r0
 8016470:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8016474:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016478:	2b00      	cmp	r3, #0
 801647a:	d120      	bne.n	80164be <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801647e:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016482:	3316      	adds	r3, #22
 8016484:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016486:	4618      	mov	r0, r3
 8016488:	f7fd fe0d 	bl	80140a6 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016490:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016492:	4618      	mov	r0, r3
 8016494:	f7fe fdb5 	bl	8015002 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8016498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801649a:	330b      	adds	r3, #11
 801649c:	2210      	movs	r2, #16
 801649e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	2201      	movs	r2, #1
 80164a4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80164a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d10e      	bne.n	80164cc <f_mkdir+0x202>
					res = sync_fs(fs);
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	4618      	mov	r0, r3
 80164b2:	f7fe f8b1 	bl	8014618 <sync_fs>
 80164b6:	4603      	mov	r3, r0
 80164b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80164bc:	e006      	b.n	80164cc <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80164be:	f107 030c 	add.w	r3, r7, #12
 80164c2:	2200      	movs	r2, #0
 80164c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7fe fac4 	bl	8014a54 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80164cc:	68bb      	ldr	r3, [r7, #8]
 80164ce:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80164d2:	4611      	mov	r1, r2
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7fd fea6 	bl	8014226 <unlock_fs>
 80164da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80164de:	4618      	mov	r0, r3
 80164e0:	3758      	adds	r7, #88	@ 0x58
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}
	...

080164e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80164e8:	b480      	push	{r7}
 80164ea:	b087      	sub	sp, #28
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	60f8      	str	r0, [r7, #12]
 80164f0:	60b9      	str	r1, [r7, #8]
 80164f2:	4613      	mov	r3, r2
 80164f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80164f6:	2301      	movs	r3, #1
 80164f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80164fa:	2300      	movs	r3, #0
 80164fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80164fe:	4b1f      	ldr	r3, [pc, #124]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 8016500:	7a5b      	ldrb	r3, [r3, #9]
 8016502:	b2db      	uxtb	r3, r3
 8016504:	2b00      	cmp	r3, #0
 8016506:	d131      	bne.n	801656c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016508:	4b1c      	ldr	r3, [pc, #112]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 801650a:	7a5b      	ldrb	r3, [r3, #9]
 801650c:	b2db      	uxtb	r3, r3
 801650e:	461a      	mov	r2, r3
 8016510:	4b1a      	ldr	r3, [pc, #104]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 8016512:	2100      	movs	r1, #0
 8016514:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016516:	4b19      	ldr	r3, [pc, #100]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 8016518:	7a5b      	ldrb	r3, [r3, #9]
 801651a:	b2db      	uxtb	r3, r3
 801651c:	4a17      	ldr	r2, [pc, #92]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 801651e:	009b      	lsls	r3, r3, #2
 8016520:	4413      	add	r3, r2
 8016522:	68fa      	ldr	r2, [r7, #12]
 8016524:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016526:	4b15      	ldr	r3, [pc, #84]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 8016528:	7a5b      	ldrb	r3, [r3, #9]
 801652a:	b2db      	uxtb	r3, r3
 801652c:	461a      	mov	r2, r3
 801652e:	4b13      	ldr	r3, [pc, #76]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 8016530:	4413      	add	r3, r2
 8016532:	79fa      	ldrb	r2, [r7, #7]
 8016534:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016536:	4b11      	ldr	r3, [pc, #68]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 8016538:	7a5b      	ldrb	r3, [r3, #9]
 801653a:	b2db      	uxtb	r3, r3
 801653c:	1c5a      	adds	r2, r3, #1
 801653e:	b2d1      	uxtb	r1, r2
 8016540:	4a0e      	ldr	r2, [pc, #56]	@ (801657c <FATFS_LinkDriverEx+0x94>)
 8016542:	7251      	strb	r1, [r2, #9]
 8016544:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016546:	7dbb      	ldrb	r3, [r7, #22]
 8016548:	3330      	adds	r3, #48	@ 0x30
 801654a:	b2da      	uxtb	r2, r3
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	3301      	adds	r3, #1
 8016554:	223a      	movs	r2, #58	@ 0x3a
 8016556:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	3302      	adds	r3, #2
 801655c:	222f      	movs	r2, #47	@ 0x2f
 801655e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	3303      	adds	r3, #3
 8016564:	2200      	movs	r2, #0
 8016566:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016568:	2300      	movs	r3, #0
 801656a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801656c:	7dfb      	ldrb	r3, [r7, #23]
}
 801656e:	4618      	mov	r0, r3
 8016570:	371c      	adds	r7, #28
 8016572:	46bd      	mov	sp, r7
 8016574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016578:	4770      	bx	lr
 801657a:	bf00      	nop
 801657c:	20001804 	.word	0x20001804

08016580 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b082      	sub	sp, #8
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801658a:	2200      	movs	r2, #0
 801658c:	6839      	ldr	r1, [r7, #0]
 801658e:	6878      	ldr	r0, [r7, #4]
 8016590:	f7ff ffaa 	bl	80164e8 <FATFS_LinkDriverEx>
 8016594:	4603      	mov	r3, r0
}
 8016596:	4618      	mov	r0, r3
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}

0801659e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801659e:	b580      	push	{r7, lr}
 80165a0:	b086      	sub	sp, #24
 80165a2:	af00      	add	r7, sp, #0
 80165a4:	4603      	mov	r3, r0
 80165a6:	6039      	str	r1, [r7, #0]
 80165a8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80165aa:	2300      	movs	r3, #0
 80165ac:	60fb      	str	r3, [r7, #12]
 80165ae:	2300      	movs	r3, #0
 80165b0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80165b2:	f107 030c 	add.w	r3, r7, #12
 80165b6:	2101      	movs	r1, #1
 80165b8:	4618      	mov	r0, r3
 80165ba:	f000 f8e9 	bl	8016790 <osSemaphoreCreate>
 80165be:	4602      	mov	r2, r0
 80165c0:	683b      	ldr	r3, [r7, #0]
 80165c2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	bf14      	ite	ne
 80165cc:	2301      	movne	r3, #1
 80165ce:	2300      	moveq	r3, #0
 80165d0:	b2db      	uxtb	r3, r3
 80165d2:	617b      	str	r3, [r7, #20]

    return ret;
 80165d4:	697b      	ldr	r3, [r7, #20]
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	3718      	adds	r7, #24
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}

080165de <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80165de:	b580      	push	{r7, lr}
 80165e0:	b082      	sub	sp, #8
 80165e2:	af00      	add	r7, sp, #0
 80165e4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f000 f996 	bl	8016918 <osSemaphoreDelete>
#endif
    return 1;
 80165ec:	2301      	movs	r3, #1
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3708      	adds	r7, #8
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b084      	sub	sp, #16
 80165fa:	af00      	add	r7, sp, #0
 80165fc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80165fe:	2300      	movs	r3, #0
 8016600:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8016602:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f000 f902 	bl	8016810 <osSemaphoreWait>
 801660c:	4603      	mov	r3, r0
 801660e:	2b00      	cmp	r3, #0
 8016610:	d101      	bne.n	8016616 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8016612:	2301      	movs	r3, #1
 8016614:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016616:	68fb      	ldr	r3, [r7, #12]
}
 8016618:	4618      	mov	r0, r3
 801661a:	3710      	adds	r7, #16
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}

08016620 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f000 f93f 	bl	80168ac <osSemaphoreRelease>
#endif
}
 801662e:	bf00      	nop
 8016630:	3708      	adds	r7, #8
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}

08016636 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8016636:	b480      	push	{r7}
 8016638:	b085      	sub	sp, #20
 801663a:	af00      	add	r7, sp, #0
 801663c:	4603      	mov	r3, r0
 801663e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016640:	2300      	movs	r3, #0
 8016642:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8016644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016648:	2b84      	cmp	r3, #132	@ 0x84
 801664a:	d005      	beq.n	8016658 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801664c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	4413      	add	r3, r2
 8016654:	3303      	adds	r3, #3
 8016656:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016658:	68fb      	ldr	r3, [r7, #12]
}
 801665a:	4618      	mov	r0, r3
 801665c:	3714      	adds	r7, #20
 801665e:	46bd      	mov	sp, r7
 8016660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016664:	4770      	bx	lr

08016666 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8016666:	b480      	push	{r7}
 8016668:	b083      	sub	sp, #12
 801666a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801666c:	f3ef 8305 	mrs	r3, IPSR
 8016670:	607b      	str	r3, [r7, #4]
  return(result);
 8016672:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8016674:	2b00      	cmp	r3, #0
 8016676:	bf14      	ite	ne
 8016678:	2301      	movne	r3, #1
 801667a:	2300      	moveq	r3, #0
 801667c:	b2db      	uxtb	r3, r3
}
 801667e:	4618      	mov	r0, r3
 8016680:	370c      	adds	r7, #12
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr

0801668a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801668a:	b580      	push	{r7, lr}
 801668c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801668e:	f001 fd33 	bl	80180f8 <vTaskStartScheduler>
  
  return osOK;
 8016692:	2300      	movs	r3, #0
}
 8016694:	4618      	mov	r0, r3
 8016696:	bd80      	pop	{r7, pc}

08016698 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801669c:	f002 f994 	bl	80189c8 <xTaskGetSchedulerState>
 80166a0:	4603      	mov	r3, r0
 80166a2:	2b01      	cmp	r3, #1
 80166a4:	d101      	bne.n	80166aa <osKernelRunning+0x12>
    return 0;
 80166a6:	2300      	movs	r3, #0
 80166a8:	e000      	b.n	80166ac <osKernelRunning+0x14>
  else
    return 1;
 80166aa:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80166ac:	4618      	mov	r0, r3
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80166b4:	f7ff ffd7 	bl	8016666 <inHandlerMode>
 80166b8:	4603      	mov	r3, r0
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d003      	beq.n	80166c6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80166be:	f001 fe3f 	bl	8018340 <xTaskGetTickCountFromISR>
 80166c2:	4603      	mov	r3, r0
 80166c4:	e002      	b.n	80166cc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80166c6:	f001 fe2b 	bl	8018320 <xTaskGetTickCount>
 80166ca:	4603      	mov	r3, r0
  }
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	bd80      	pop	{r7, pc}

080166d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80166d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166d2:	b089      	sub	sp, #36	@ 0x24
 80166d4:	af04      	add	r7, sp, #16
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	695b      	ldr	r3, [r3, #20]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d020      	beq.n	8016724 <osThreadCreate+0x54>
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	699b      	ldr	r3, [r3, #24]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d01c      	beq.n	8016724 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	685c      	ldr	r4, [r3, #4]
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	691e      	ldr	r6, [r3, #16]
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80166fc:	4618      	mov	r0, r3
 80166fe:	f7ff ff9a 	bl	8016636 <makeFreeRtosPriority>
 8016702:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	695b      	ldr	r3, [r3, #20]
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801670c:	9202      	str	r2, [sp, #8]
 801670e:	9301      	str	r3, [sp, #4]
 8016710:	9100      	str	r1, [sp, #0]
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	4632      	mov	r2, r6
 8016716:	4629      	mov	r1, r5
 8016718:	4620      	mov	r0, r4
 801671a:	f001 fb0b 	bl	8017d34 <xTaskCreateStatic>
 801671e:	4603      	mov	r3, r0
 8016720:	60fb      	str	r3, [r7, #12]
 8016722:	e01c      	b.n	801675e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	685c      	ldr	r4, [r3, #4]
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016730:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016738:	4618      	mov	r0, r3
 801673a:	f7ff ff7c 	bl	8016636 <makeFreeRtosPriority>
 801673e:	4602      	mov	r2, r0
 8016740:	f107 030c 	add.w	r3, r7, #12
 8016744:	9301      	str	r3, [sp, #4]
 8016746:	9200      	str	r2, [sp, #0]
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	4632      	mov	r2, r6
 801674c:	4629      	mov	r1, r5
 801674e:	4620      	mov	r0, r4
 8016750:	f001 fb56 	bl	8017e00 <xTaskCreate>
 8016754:	4603      	mov	r3, r0
 8016756:	2b01      	cmp	r3, #1
 8016758:	d001      	beq.n	801675e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801675a:	2300      	movs	r3, #0
 801675c:	e000      	b.n	8016760 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801675e:	68fb      	ldr	r3, [r7, #12]
}
 8016760:	4618      	mov	r0, r3
 8016762:	3714      	adds	r7, #20
 8016764:	46bd      	mov	sp, r7
 8016766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016768 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d001      	beq.n	801677e <osDelay+0x16>
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	e000      	b.n	8016780 <osDelay+0x18>
 801677e:	2301      	movs	r3, #1
 8016780:	4618      	mov	r0, r3
 8016782:	f001 fc81 	bl	8018088 <vTaskDelay>
  
  return osOK;
 8016786:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016788:	4618      	mov	r0, r3
 801678a:	3710      	adds	r7, #16
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}

08016790 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8016790:	b580      	push	{r7, lr}
 8016792:	b086      	sub	sp, #24
 8016794:	af02      	add	r7, sp, #8
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	685b      	ldr	r3, [r3, #4]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d016      	beq.n	80167d0 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	2b01      	cmp	r3, #1
 80167a6:	d10a      	bne.n	80167be <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	685b      	ldr	r3, [r3, #4]
 80167ac:	2203      	movs	r2, #3
 80167ae:	9200      	str	r2, [sp, #0]
 80167b0:	2200      	movs	r2, #0
 80167b2:	2100      	movs	r1, #0
 80167b4:	2001      	movs	r0, #1
 80167b6:	f000 fad5 	bl	8016d64 <xQueueGenericCreateStatic>
 80167ba:	4603      	mov	r3, r0
 80167bc:	e023      	b.n	8016806 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80167be:	6838      	ldr	r0, [r7, #0]
 80167c0:	6839      	ldr	r1, [r7, #0]
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	685b      	ldr	r3, [r3, #4]
 80167c6:	461a      	mov	r2, r3
 80167c8:	f000 fbb5 	bl	8016f36 <xQueueCreateCountingSemaphoreStatic>
 80167cc:	4603      	mov	r3, r0
 80167ce:	e01a      	b.n	8016806 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	2b01      	cmp	r3, #1
 80167d4:	d110      	bne.n	80167f8 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80167d6:	2203      	movs	r2, #3
 80167d8:	2100      	movs	r1, #0
 80167da:	2001      	movs	r0, #1
 80167dc:	f000 fb49 	bl	8016e72 <xQueueGenericCreate>
 80167e0:	60f8      	str	r0, [r7, #12]
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d005      	beq.n	80167f4 <osSemaphoreCreate+0x64>
 80167e8:	2300      	movs	r3, #0
 80167ea:	2200      	movs	r2, #0
 80167ec:	2100      	movs	r1, #0
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f000 fc18 	bl	8017024 <xQueueGenericSend>
      return sema;
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	e006      	b.n	8016806 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	683a      	ldr	r2, [r7, #0]
 80167fc:	4611      	mov	r1, r2
 80167fe:	4618      	mov	r0, r3
 8016800:	f000 fbd6 	bl	8016fb0 <xQueueCreateCountingSemaphore>
 8016804:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8016806:	4618      	mov	r0, r3
 8016808:	3710      	adds	r7, #16
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}
	...

08016810 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b084      	sub	sp, #16
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801681a:	2300      	movs	r3, #0
 801681c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d101      	bne.n	8016828 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8016824:	2380      	movs	r3, #128	@ 0x80
 8016826:	e03a      	b.n	801689e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8016828:	2300      	movs	r3, #0
 801682a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016832:	d103      	bne.n	801683c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8016834:	f04f 33ff 	mov.w	r3, #4294967295
 8016838:	60fb      	str	r3, [r7, #12]
 801683a:	e009      	b.n	8016850 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d006      	beq.n	8016850 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d101      	bne.n	8016850 <osSemaphoreWait+0x40>
      ticks = 1;
 801684c:	2301      	movs	r3, #1
 801684e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016850:	f7ff ff09 	bl	8016666 <inHandlerMode>
 8016854:	4603      	mov	r3, r0
 8016856:	2b00      	cmp	r3, #0
 8016858:	d017      	beq.n	801688a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801685a:	f107 0308 	add.w	r3, r7, #8
 801685e:	461a      	mov	r2, r3
 8016860:	2100      	movs	r1, #0
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f001 f824 	bl	80178b0 <xQueueReceiveFromISR>
 8016868:	4603      	mov	r3, r0
 801686a:	2b01      	cmp	r3, #1
 801686c:	d001      	beq.n	8016872 <osSemaphoreWait+0x62>
      return osErrorOS;
 801686e:	23ff      	movs	r3, #255	@ 0xff
 8016870:	e015      	b.n	801689e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8016872:	68bb      	ldr	r3, [r7, #8]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d011      	beq.n	801689c <osSemaphoreWait+0x8c>
 8016878:	4b0b      	ldr	r3, [pc, #44]	@ (80168a8 <osSemaphoreWait+0x98>)
 801687a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801687e:	601a      	str	r2, [r3, #0]
 8016880:	f3bf 8f4f 	dsb	sy
 8016884:	f3bf 8f6f 	isb	sy
 8016888:	e008      	b.n	801689c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801688a:	68f9      	ldr	r1, [r7, #12]
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f000 fef7 	bl	8017680 <xQueueSemaphoreTake>
 8016892:	4603      	mov	r3, r0
 8016894:	2b01      	cmp	r3, #1
 8016896:	d001      	beq.n	801689c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8016898:	23ff      	movs	r3, #255	@ 0xff
 801689a:	e000      	b.n	801689e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801689c:	2300      	movs	r3, #0
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3710      	adds	r7, #16
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	e000ed04 	.word	0xe000ed04

080168ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80168b4:	2300      	movs	r3, #0
 80168b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80168b8:	2300      	movs	r3, #0
 80168ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80168bc:	f7ff fed3 	bl	8016666 <inHandlerMode>
 80168c0:	4603      	mov	r3, r0
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d016      	beq.n	80168f4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80168c6:	f107 0308 	add.w	r3, r7, #8
 80168ca:	4619      	mov	r1, r3
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	f000 fd56 	bl	801737e <xQueueGiveFromISR>
 80168d2:	4603      	mov	r3, r0
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d001      	beq.n	80168dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80168d8:	23ff      	movs	r3, #255	@ 0xff
 80168da:	e017      	b.n	801690c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80168dc:	68bb      	ldr	r3, [r7, #8]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d013      	beq.n	801690a <osSemaphoreRelease+0x5e>
 80168e2:	4b0c      	ldr	r3, [pc, #48]	@ (8016914 <osSemaphoreRelease+0x68>)
 80168e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168e8:	601a      	str	r2, [r3, #0]
 80168ea:	f3bf 8f4f 	dsb	sy
 80168ee:	f3bf 8f6f 	isb	sy
 80168f2:	e00a      	b.n	801690a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80168f4:	2300      	movs	r3, #0
 80168f6:	2200      	movs	r2, #0
 80168f8:	2100      	movs	r1, #0
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f000 fb92 	bl	8017024 <xQueueGenericSend>
 8016900:	4603      	mov	r3, r0
 8016902:	2b01      	cmp	r3, #1
 8016904:	d001      	beq.n	801690a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8016906:	23ff      	movs	r3, #255	@ 0xff
 8016908:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801690a:	68fb      	ldr	r3, [r7, #12]
}
 801690c:	4618      	mov	r0, r3
 801690e:	3710      	adds	r7, #16
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}
 8016914:	e000ed04 	.word	0xe000ed04

08016918 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016920:	f7ff fea1 	bl	8016666 <inHandlerMode>
 8016924:	4603      	mov	r3, r0
 8016926:	2b00      	cmp	r3, #0
 8016928:	d001      	beq.n	801692e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801692a:	2382      	movs	r3, #130	@ 0x82
 801692c:	e003      	b.n	8016936 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f001 f888 	bl	8017a44 <vQueueDelete>

  return osOK; 
 8016934:	2300      	movs	r3, #0
}
 8016936:	4618      	mov	r0, r3
 8016938:	3708      	adds	r7, #8
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}

0801693e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801693e:	b590      	push	{r4, r7, lr}
 8016940:	b085      	sub	sp, #20
 8016942:	af02      	add	r7, sp, #8
 8016944:	6078      	str	r0, [r7, #4]
 8016946:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	689b      	ldr	r3, [r3, #8]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d011      	beq.n	8016974 <osMessageCreate+0x36>
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	68db      	ldr	r3, [r3, #12]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d00d      	beq.n	8016974 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6818      	ldr	r0, [r3, #0]
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	6859      	ldr	r1, [r3, #4]
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	689a      	ldr	r2, [r3, #8]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	68db      	ldr	r3, [r3, #12]
 8016968:	2400      	movs	r4, #0
 801696a:	9400      	str	r4, [sp, #0]
 801696c:	f000 f9fa 	bl	8016d64 <xQueueGenericCreateStatic>
 8016970:	4603      	mov	r3, r0
 8016972:	e008      	b.n	8016986 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6818      	ldr	r0, [r3, #0]
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	685b      	ldr	r3, [r3, #4]
 801697c:	2200      	movs	r2, #0
 801697e:	4619      	mov	r1, r3
 8016980:	f000 fa77 	bl	8016e72 <xQueueGenericCreate>
 8016984:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8016986:	4618      	mov	r0, r3
 8016988:	370c      	adds	r7, #12
 801698a:	46bd      	mov	sp, r7
 801698c:	bd90      	pop	{r4, r7, pc}
	...

08016990 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b086      	sub	sp, #24
 8016994:	af00      	add	r7, sp, #0
 8016996:	60f8      	str	r0, [r7, #12]
 8016998:	60b9      	str	r1, [r7, #8]
 801699a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801699c:	2300      	movs	r3, #0
 801699e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80169a4:	697b      	ldr	r3, [r7, #20]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d101      	bne.n	80169ae <osMessagePut+0x1e>
    ticks = 1;
 80169aa:	2301      	movs	r3, #1
 80169ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80169ae:	f7ff fe5a 	bl	8016666 <inHandlerMode>
 80169b2:	4603      	mov	r3, r0
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d018      	beq.n	80169ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80169b8:	f107 0210 	add.w	r2, r7, #16
 80169bc:	f107 0108 	add.w	r1, r7, #8
 80169c0:	2300      	movs	r3, #0
 80169c2:	68f8      	ldr	r0, [r7, #12]
 80169c4:	f000 fc38 	bl	8017238 <xQueueGenericSendFromISR>
 80169c8:	4603      	mov	r3, r0
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d001      	beq.n	80169d2 <osMessagePut+0x42>
      return osErrorOS;
 80169ce:	23ff      	movs	r3, #255	@ 0xff
 80169d0:	e018      	b.n	8016a04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d014      	beq.n	8016a02 <osMessagePut+0x72>
 80169d8:	4b0c      	ldr	r3, [pc, #48]	@ (8016a0c <osMessagePut+0x7c>)
 80169da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80169de:	601a      	str	r2, [r3, #0]
 80169e0:	f3bf 8f4f 	dsb	sy
 80169e4:	f3bf 8f6f 	isb	sy
 80169e8:	e00b      	b.n	8016a02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80169ea:	f107 0108 	add.w	r1, r7, #8
 80169ee:	2300      	movs	r3, #0
 80169f0:	697a      	ldr	r2, [r7, #20]
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f000 fb16 	bl	8017024 <xQueueGenericSend>
 80169f8:	4603      	mov	r3, r0
 80169fa:	2b01      	cmp	r3, #1
 80169fc:	d001      	beq.n	8016a02 <osMessagePut+0x72>
      return osErrorOS;
 80169fe:	23ff      	movs	r3, #255	@ 0xff
 8016a00:	e000      	b.n	8016a04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016a02:	2300      	movs	r3, #0
}
 8016a04:	4618      	mov	r0, r3
 8016a06:	3718      	adds	r7, #24
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	e000ed04 	.word	0xe000ed04

08016a10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016a10:	b590      	push	{r4, r7, lr}
 8016a12:	b08b      	sub	sp, #44	@ 0x2c
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8016a1c:	68bb      	ldr	r3, [r7, #8]
 8016a1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8016a20:	2300      	movs	r3, #0
 8016a22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016a24:	68bb      	ldr	r3, [r7, #8]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d10a      	bne.n	8016a40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8016a2a:	2380      	movs	r3, #128	@ 0x80
 8016a2c:	617b      	str	r3, [r7, #20]
    return event;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	461c      	mov	r4, r3
 8016a32:	f107 0314 	add.w	r3, r7, #20
 8016a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016a3e:	e054      	b.n	8016aea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8016a40:	2300      	movs	r3, #0
 8016a42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016a44:	2300      	movs	r3, #0
 8016a46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a4e:	d103      	bne.n	8016a58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016a50:	f04f 33ff 	mov.w	r3, #4294967295
 8016a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a56:	e009      	b.n	8016a6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d006      	beq.n	8016a6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8016a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d101      	bne.n	8016a6c <osMessageGet+0x5c>
      ticks = 1;
 8016a68:	2301      	movs	r3, #1
 8016a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8016a6c:	f7ff fdfb 	bl	8016666 <inHandlerMode>
 8016a70:	4603      	mov	r3, r0
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d01c      	beq.n	8016ab0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016a76:	f107 0220 	add.w	r2, r7, #32
 8016a7a:	f107 0314 	add.w	r3, r7, #20
 8016a7e:	3304      	adds	r3, #4
 8016a80:	4619      	mov	r1, r3
 8016a82:	68b8      	ldr	r0, [r7, #8]
 8016a84:	f000 ff14 	bl	80178b0 <xQueueReceiveFromISR>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	2b01      	cmp	r3, #1
 8016a8c:	d102      	bne.n	8016a94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8016a8e:	2310      	movs	r3, #16
 8016a90:	617b      	str	r3, [r7, #20]
 8016a92:	e001      	b.n	8016a98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016a94:	2300      	movs	r3, #0
 8016a96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016a98:	6a3b      	ldr	r3, [r7, #32]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d01d      	beq.n	8016ada <osMessageGet+0xca>
 8016a9e:	4b15      	ldr	r3, [pc, #84]	@ (8016af4 <osMessageGet+0xe4>)
 8016aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016aa4:	601a      	str	r2, [r3, #0]
 8016aa6:	f3bf 8f4f 	dsb	sy
 8016aaa:	f3bf 8f6f 	isb	sy
 8016aae:	e014      	b.n	8016ada <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8016ab0:	f107 0314 	add.w	r3, r7, #20
 8016ab4:	3304      	adds	r3, #4
 8016ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ab8:	4619      	mov	r1, r3
 8016aba:	68b8      	ldr	r0, [r7, #8]
 8016abc:	f000 fcf8 	bl	80174b0 <xQueueReceive>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d102      	bne.n	8016acc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016ac6:	2310      	movs	r3, #16
 8016ac8:	617b      	str	r3, [r7, #20]
 8016aca:	e006      	b.n	8016ada <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8016acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d101      	bne.n	8016ad6 <osMessageGet+0xc6>
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	e000      	b.n	8016ad8 <osMessageGet+0xc8>
 8016ad6:	2340      	movs	r3, #64	@ 0x40
 8016ad8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	461c      	mov	r4, r3
 8016ade:	f107 0314 	add.w	r3, r7, #20
 8016ae2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016aea:	68f8      	ldr	r0, [r7, #12]
 8016aec:	372c      	adds	r7, #44	@ 0x2c
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd90      	pop	{r4, r7, pc}
 8016af2:	bf00      	nop
 8016af4:	e000ed04 	.word	0xe000ed04

08016af8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016b00:	f7ff fdb1 	bl	8016666 <inHandlerMode>
 8016b04:	4603      	mov	r3, r0
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d004      	beq.n	8016b14 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f000 ff79 	bl	8017a02 <uxQueueMessagesWaitingFromISR>
 8016b10:	4603      	mov	r3, r0
 8016b12:	e003      	b.n	8016b1c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f000 ff53 	bl	80179c0 <uxQueueMessagesWaiting>
 8016b1a:	4603      	mov	r3, r0
  }
}
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3708      	adds	r7, #8
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}

08016b24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016b24:	b480      	push	{r7}
 8016b26:	b083      	sub	sp, #12
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	f103 0208 	add.w	r2, r3, #8
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f04f 32ff 	mov.w	r2, #4294967295
 8016b3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f103 0208 	add.w	r2, r3, #8
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	f103 0208 	add.w	r2, r3, #8
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	2200      	movs	r2, #0
 8016b56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016b58:	bf00      	nop
 8016b5a:	370c      	adds	r7, #12
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b62:	4770      	bx	lr

08016b64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016b64:	b480      	push	{r7}
 8016b66:	b083      	sub	sp, #12
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2200      	movs	r2, #0
 8016b70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016b72:	bf00      	nop
 8016b74:	370c      	adds	r7, #12
 8016b76:	46bd      	mov	sp, r7
 8016b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7c:	4770      	bx	lr

08016b7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016b7e:	b480      	push	{r7}
 8016b80:	b085      	sub	sp, #20
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
 8016b86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	68fa      	ldr	r2, [r7, #12]
 8016b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	689a      	ldr	r2, [r3, #8]
 8016b98:	683b      	ldr	r3, [r7, #0]
 8016b9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	689b      	ldr	r3, [r3, #8]
 8016ba0:	683a      	ldr	r2, [r7, #0]
 8016ba2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	683a      	ldr	r2, [r7, #0]
 8016ba8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016baa:	683b      	ldr	r3, [r7, #0]
 8016bac:	687a      	ldr	r2, [r7, #4]
 8016bae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	1c5a      	adds	r2, r3, #1
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	601a      	str	r2, [r3, #0]
}
 8016bba:	bf00      	nop
 8016bbc:	3714      	adds	r7, #20
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr

08016bc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016bc6:	b480      	push	{r7}
 8016bc8:	b085      	sub	sp, #20
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	6078      	str	r0, [r7, #4]
 8016bce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bdc:	d103      	bne.n	8016be6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	691b      	ldr	r3, [r3, #16]
 8016be2:	60fb      	str	r3, [r7, #12]
 8016be4:	e00c      	b.n	8016c00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	3308      	adds	r3, #8
 8016bea:	60fb      	str	r3, [r7, #12]
 8016bec:	e002      	b.n	8016bf4 <vListInsert+0x2e>
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	685b      	ldr	r3, [r3, #4]
 8016bf2:	60fb      	str	r3, [r7, #12]
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	685b      	ldr	r3, [r3, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	68ba      	ldr	r2, [r7, #8]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d2f6      	bcs.n	8016bee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	685a      	ldr	r2, [r3, #4]
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	685b      	ldr	r3, [r3, #4]
 8016c0c:	683a      	ldr	r2, [r7, #0]
 8016c0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	68fa      	ldr	r2, [r7, #12]
 8016c14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	683a      	ldr	r2, [r7, #0]
 8016c1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	687a      	ldr	r2, [r7, #4]
 8016c20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	1c5a      	adds	r2, r3, #1
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	601a      	str	r2, [r3, #0]
}
 8016c2c:	bf00      	nop
 8016c2e:	3714      	adds	r7, #20
 8016c30:	46bd      	mov	sp, r7
 8016c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c36:	4770      	bx	lr

08016c38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016c38:	b480      	push	{r7}
 8016c3a:	b085      	sub	sp, #20
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	691b      	ldr	r3, [r3, #16]
 8016c44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	685b      	ldr	r3, [r3, #4]
 8016c4a:	687a      	ldr	r2, [r7, #4]
 8016c4c:	6892      	ldr	r2, [r2, #8]
 8016c4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	6852      	ldr	r2, [r2, #4]
 8016c58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	685b      	ldr	r3, [r3, #4]
 8016c5e:	687a      	ldr	r2, [r7, #4]
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d103      	bne.n	8016c6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	689a      	ldr	r2, [r3, #8]
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2200      	movs	r2, #0
 8016c70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	1e5a      	subs	r2, r3, #1
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681b      	ldr	r3, [r3, #0]
}
 8016c80:	4618      	mov	r0, r3
 8016c82:	3714      	adds	r7, #20
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b084      	sub	sp, #16
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d10d      	bne.n	8016cbc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ca4:	b672      	cpsid	i
 8016ca6:	f383 8811 	msr	BASEPRI, r3
 8016caa:	f3bf 8f6f 	isb	sy
 8016cae:	f3bf 8f4f 	dsb	sy
 8016cb2:	b662      	cpsie	i
 8016cb4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016cb6:	bf00      	nop
 8016cb8:	bf00      	nop
 8016cba:	e7fd      	b.n	8016cb8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8016cbc:	f002 f9d6 	bl	801906c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	681a      	ldr	r2, [r3, #0]
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016cc8:	68f9      	ldr	r1, [r7, #12]
 8016cca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016ccc:	fb01 f303 	mul.w	r3, r1, r3
 8016cd0:	441a      	add	r2, r3
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681a      	ldr	r2, [r3, #0]
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	681a      	ldr	r2, [r3, #0]
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016cec:	3b01      	subs	r3, #1
 8016cee:	68f9      	ldr	r1, [r7, #12]
 8016cf0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016cf2:	fb01 f303 	mul.w	r3, r1, r3
 8016cf6:	441a      	add	r2, r3
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	22ff      	movs	r2, #255	@ 0xff
 8016d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	22ff      	movs	r2, #255	@ 0xff
 8016d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8016d0c:	683b      	ldr	r3, [r7, #0]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d114      	bne.n	8016d3c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	691b      	ldr	r3, [r3, #16]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d01a      	beq.n	8016d50 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	3310      	adds	r3, #16
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f001 fc88 	bl	8018634 <xTaskRemoveFromEventList>
 8016d24:	4603      	mov	r3, r0
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d012      	beq.n	8016d50 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d60 <xQueueGenericReset+0xd4>)
 8016d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016d30:	601a      	str	r2, [r3, #0]
 8016d32:	f3bf 8f4f 	dsb	sy
 8016d36:	f3bf 8f6f 	isb	sy
 8016d3a:	e009      	b.n	8016d50 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	3310      	adds	r3, #16
 8016d40:	4618      	mov	r0, r3
 8016d42:	f7ff feef 	bl	8016b24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	3324      	adds	r3, #36	@ 0x24
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7ff feea 	bl	8016b24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016d50:	f002 f9c2 	bl	80190d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016d54:	2301      	movs	r3, #1
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
 8016d5e:	bf00      	nop
 8016d60:	e000ed04 	.word	0xe000ed04

08016d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b08e      	sub	sp, #56	@ 0x38
 8016d68:	af02      	add	r7, sp, #8
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	60b9      	str	r1, [r7, #8]
 8016d6e:	607a      	str	r2, [r7, #4]
 8016d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d10d      	bne.n	8016d94 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8016d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d7c:	b672      	cpsid	i
 8016d7e:	f383 8811 	msr	BASEPRI, r3
 8016d82:	f3bf 8f6f 	isb	sy
 8016d86:	f3bf 8f4f 	dsb	sy
 8016d8a:	b662      	cpsie	i
 8016d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016d8e:	bf00      	nop
 8016d90:	bf00      	nop
 8016d92:	e7fd      	b.n	8016d90 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d10d      	bne.n	8016db6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8016d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d9e:	b672      	cpsid	i
 8016da0:	f383 8811 	msr	BASEPRI, r3
 8016da4:	f3bf 8f6f 	isb	sy
 8016da8:	f3bf 8f4f 	dsb	sy
 8016dac:	b662      	cpsie	i
 8016dae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016db0:	bf00      	nop
 8016db2:	bf00      	nop
 8016db4:	e7fd      	b.n	8016db2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d002      	beq.n	8016dc2 <xQueueGenericCreateStatic+0x5e>
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d001      	beq.n	8016dc6 <xQueueGenericCreateStatic+0x62>
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	e000      	b.n	8016dc8 <xQueueGenericCreateStatic+0x64>
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d10d      	bne.n	8016de8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8016dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dd0:	b672      	cpsid	i
 8016dd2:	f383 8811 	msr	BASEPRI, r3
 8016dd6:	f3bf 8f6f 	isb	sy
 8016dda:	f3bf 8f4f 	dsb	sy
 8016dde:	b662      	cpsie	i
 8016de0:	623b      	str	r3, [r7, #32]
}
 8016de2:	bf00      	nop
 8016de4:	bf00      	nop
 8016de6:	e7fd      	b.n	8016de4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d102      	bne.n	8016df4 <xQueueGenericCreateStatic+0x90>
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d101      	bne.n	8016df8 <xQueueGenericCreateStatic+0x94>
 8016df4:	2301      	movs	r3, #1
 8016df6:	e000      	b.n	8016dfa <xQueueGenericCreateStatic+0x96>
 8016df8:	2300      	movs	r3, #0
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d10d      	bne.n	8016e1a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8016dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e02:	b672      	cpsid	i
 8016e04:	f383 8811 	msr	BASEPRI, r3
 8016e08:	f3bf 8f6f 	isb	sy
 8016e0c:	f3bf 8f4f 	dsb	sy
 8016e10:	b662      	cpsie	i
 8016e12:	61fb      	str	r3, [r7, #28]
}
 8016e14:	bf00      	nop
 8016e16:	bf00      	nop
 8016e18:	e7fd      	b.n	8016e16 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016e1a:	2348      	movs	r3, #72	@ 0x48
 8016e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016e1e:	697b      	ldr	r3, [r7, #20]
 8016e20:	2b48      	cmp	r3, #72	@ 0x48
 8016e22:	d00d      	beq.n	8016e40 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8016e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e28:	b672      	cpsid	i
 8016e2a:	f383 8811 	msr	BASEPRI, r3
 8016e2e:	f3bf 8f6f 	isb	sy
 8016e32:	f3bf 8f4f 	dsb	sy
 8016e36:	b662      	cpsie	i
 8016e38:	61bb      	str	r3, [r7, #24]
}
 8016e3a:	bf00      	nop
 8016e3c:	bf00      	nop
 8016e3e:	e7fd      	b.n	8016e3c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016e40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8016e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d00d      	beq.n	8016e68 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e4e:	2201      	movs	r2, #1
 8016e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e5a:	9300      	str	r3, [sp, #0]
 8016e5c:	4613      	mov	r3, r2
 8016e5e:	687a      	ldr	r2, [r7, #4]
 8016e60:	68b9      	ldr	r1, [r7, #8]
 8016e62:	68f8      	ldr	r0, [r7, #12]
 8016e64:	f000 f848 	bl	8016ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3730      	adds	r7, #48	@ 0x30
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}

08016e72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016e72:	b580      	push	{r7, lr}
 8016e74:	b08a      	sub	sp, #40	@ 0x28
 8016e76:	af02      	add	r7, sp, #8
 8016e78:	60f8      	str	r0, [r7, #12]
 8016e7a:	60b9      	str	r1, [r7, #8]
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d10d      	bne.n	8016ea2 <xQueueGenericCreate+0x30>
	__asm volatile
 8016e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e8a:	b672      	cpsid	i
 8016e8c:	f383 8811 	msr	BASEPRI, r3
 8016e90:	f3bf 8f6f 	isb	sy
 8016e94:	f3bf 8f4f 	dsb	sy
 8016e98:	b662      	cpsie	i
 8016e9a:	613b      	str	r3, [r7, #16]
}
 8016e9c:	bf00      	nop
 8016e9e:	bf00      	nop
 8016ea0:	e7fd      	b.n	8016e9e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d102      	bne.n	8016eae <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	61fb      	str	r3, [r7, #28]
 8016eac:	e004      	b.n	8016eb8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	68ba      	ldr	r2, [r7, #8]
 8016eb2:	fb02 f303 	mul.w	r3, r2, r3
 8016eb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016eb8:	69fb      	ldr	r3, [r7, #28]
 8016eba:	3348      	adds	r3, #72	@ 0x48
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f002 fa03 	bl	80192c8 <pvPortMalloc>
 8016ec2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016ec4:	69bb      	ldr	r3, [r7, #24]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d011      	beq.n	8016eee <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016eca:	69bb      	ldr	r3, [r7, #24]
 8016ecc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016ece:	697b      	ldr	r3, [r7, #20]
 8016ed0:	3348      	adds	r3, #72	@ 0x48
 8016ed2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016ed4:	69bb      	ldr	r3, [r7, #24]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016edc:	79fa      	ldrb	r2, [r7, #7]
 8016ede:	69bb      	ldr	r3, [r7, #24]
 8016ee0:	9300      	str	r3, [sp, #0]
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	697a      	ldr	r2, [r7, #20]
 8016ee6:	68b9      	ldr	r1, [r7, #8]
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	f000 f805 	bl	8016ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016eee:	69bb      	ldr	r3, [r7, #24]
	}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	3720      	adds	r7, #32
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}

08016ef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b084      	sub	sp, #16
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	60b9      	str	r1, [r7, #8]
 8016f02:	607a      	str	r2, [r7, #4]
 8016f04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016f06:	68bb      	ldr	r3, [r7, #8]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d103      	bne.n	8016f14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016f0c:	69bb      	ldr	r3, [r7, #24]
 8016f0e:	69ba      	ldr	r2, [r7, #24]
 8016f10:	601a      	str	r2, [r3, #0]
 8016f12:	e002      	b.n	8016f1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016f14:	69bb      	ldr	r3, [r7, #24]
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016f1a:	69bb      	ldr	r3, [r7, #24]
 8016f1c:	68fa      	ldr	r2, [r7, #12]
 8016f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016f20:	69bb      	ldr	r3, [r7, #24]
 8016f22:	68ba      	ldr	r2, [r7, #8]
 8016f24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016f26:	2101      	movs	r1, #1
 8016f28:	69b8      	ldr	r0, [r7, #24]
 8016f2a:	f7ff feaf 	bl	8016c8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016f2e:	bf00      	nop
 8016f30:	3710      	adds	r7, #16
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}

08016f36 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016f36:	b580      	push	{r7, lr}
 8016f38:	b08a      	sub	sp, #40	@ 0x28
 8016f3a:	af02      	add	r7, sp, #8
 8016f3c:	60f8      	str	r0, [r7, #12]
 8016f3e:	60b9      	str	r1, [r7, #8]
 8016f40:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d10d      	bne.n	8016f64 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8016f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f4c:	b672      	cpsid	i
 8016f4e:	f383 8811 	msr	BASEPRI, r3
 8016f52:	f3bf 8f6f 	isb	sy
 8016f56:	f3bf 8f4f 	dsb	sy
 8016f5a:	b662      	cpsie	i
 8016f5c:	61bb      	str	r3, [r7, #24]
}
 8016f5e:	bf00      	nop
 8016f60:	bf00      	nop
 8016f62:	e7fd      	b.n	8016f60 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016f64:	68ba      	ldr	r2, [r7, #8]
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	429a      	cmp	r2, r3
 8016f6a:	d90d      	bls.n	8016f88 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8016f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f70:	b672      	cpsid	i
 8016f72:	f383 8811 	msr	BASEPRI, r3
 8016f76:	f3bf 8f6f 	isb	sy
 8016f7a:	f3bf 8f4f 	dsb	sy
 8016f7e:	b662      	cpsie	i
 8016f80:	617b      	str	r3, [r7, #20]
}
 8016f82:	bf00      	nop
 8016f84:	bf00      	nop
 8016f86:	e7fd      	b.n	8016f84 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016f88:	2302      	movs	r3, #2
 8016f8a:	9300      	str	r3, [sp, #0]
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	2100      	movs	r1, #0
 8016f92:	68f8      	ldr	r0, [r7, #12]
 8016f94:	f7ff fee6 	bl	8016d64 <xQueueGenericCreateStatic>
 8016f98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016f9a:	69fb      	ldr	r3, [r7, #28]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d002      	beq.n	8016fa6 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016fa0:	69fb      	ldr	r3, [r7, #28]
 8016fa2:	68ba      	ldr	r2, [r7, #8]
 8016fa4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016fa6:	69fb      	ldr	r3, [r7, #28]
	}
 8016fa8:	4618      	mov	r0, r3
 8016faa:	3720      	adds	r7, #32
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd80      	pop	{r7, pc}

08016fb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b086      	sub	sp, #24
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d10d      	bne.n	8016fdc <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8016fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fc4:	b672      	cpsid	i
 8016fc6:	f383 8811 	msr	BASEPRI, r3
 8016fca:	f3bf 8f6f 	isb	sy
 8016fce:	f3bf 8f4f 	dsb	sy
 8016fd2:	b662      	cpsie	i
 8016fd4:	613b      	str	r3, [r7, #16]
}
 8016fd6:	bf00      	nop
 8016fd8:	bf00      	nop
 8016fda:	e7fd      	b.n	8016fd8 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016fdc:	683a      	ldr	r2, [r7, #0]
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	429a      	cmp	r2, r3
 8016fe2:	d90d      	bls.n	8017000 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8016fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fe8:	b672      	cpsid	i
 8016fea:	f383 8811 	msr	BASEPRI, r3
 8016fee:	f3bf 8f6f 	isb	sy
 8016ff2:	f3bf 8f4f 	dsb	sy
 8016ff6:	b662      	cpsie	i
 8016ff8:	60fb      	str	r3, [r7, #12]
}
 8016ffa:	bf00      	nop
 8016ffc:	bf00      	nop
 8016ffe:	e7fd      	b.n	8016ffc <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017000:	2202      	movs	r2, #2
 8017002:	2100      	movs	r1, #0
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	f7ff ff34 	bl	8016e72 <xQueueGenericCreate>
 801700a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801700c:	697b      	ldr	r3, [r7, #20]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d002      	beq.n	8017018 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017012:	697b      	ldr	r3, [r7, #20]
 8017014:	683a      	ldr	r2, [r7, #0]
 8017016:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017018:	697b      	ldr	r3, [r7, #20]
	}
 801701a:	4618      	mov	r0, r3
 801701c:	3718      	adds	r7, #24
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
	...

08017024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b08e      	sub	sp, #56	@ 0x38
 8017028:	af00      	add	r7, sp, #0
 801702a:	60f8      	str	r0, [r7, #12]
 801702c:	60b9      	str	r1, [r7, #8]
 801702e:	607a      	str	r2, [r7, #4]
 8017030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017032:	2300      	movs	r3, #0
 8017034:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801703c:	2b00      	cmp	r3, #0
 801703e:	d10d      	bne.n	801705c <xQueueGenericSend+0x38>
	__asm volatile
 8017040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017044:	b672      	cpsid	i
 8017046:	f383 8811 	msr	BASEPRI, r3
 801704a:	f3bf 8f6f 	isb	sy
 801704e:	f3bf 8f4f 	dsb	sy
 8017052:	b662      	cpsie	i
 8017054:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8017056:	bf00      	nop
 8017058:	bf00      	nop
 801705a:	e7fd      	b.n	8017058 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d103      	bne.n	801706a <xQueueGenericSend+0x46>
 8017062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017066:	2b00      	cmp	r3, #0
 8017068:	d101      	bne.n	801706e <xQueueGenericSend+0x4a>
 801706a:	2301      	movs	r3, #1
 801706c:	e000      	b.n	8017070 <xQueueGenericSend+0x4c>
 801706e:	2300      	movs	r3, #0
 8017070:	2b00      	cmp	r3, #0
 8017072:	d10d      	bne.n	8017090 <xQueueGenericSend+0x6c>
	__asm volatile
 8017074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017078:	b672      	cpsid	i
 801707a:	f383 8811 	msr	BASEPRI, r3
 801707e:	f3bf 8f6f 	isb	sy
 8017082:	f3bf 8f4f 	dsb	sy
 8017086:	b662      	cpsie	i
 8017088:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801708a:	bf00      	nop
 801708c:	bf00      	nop
 801708e:	e7fd      	b.n	801708c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	2b02      	cmp	r3, #2
 8017094:	d103      	bne.n	801709e <xQueueGenericSend+0x7a>
 8017096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801709a:	2b01      	cmp	r3, #1
 801709c:	d101      	bne.n	80170a2 <xQueueGenericSend+0x7e>
 801709e:	2301      	movs	r3, #1
 80170a0:	e000      	b.n	80170a4 <xQueueGenericSend+0x80>
 80170a2:	2300      	movs	r3, #0
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d10d      	bne.n	80170c4 <xQueueGenericSend+0xa0>
	__asm volatile
 80170a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170ac:	b672      	cpsid	i
 80170ae:	f383 8811 	msr	BASEPRI, r3
 80170b2:	f3bf 8f6f 	isb	sy
 80170b6:	f3bf 8f4f 	dsb	sy
 80170ba:	b662      	cpsie	i
 80170bc:	623b      	str	r3, [r7, #32]
}
 80170be:	bf00      	nop
 80170c0:	bf00      	nop
 80170c2:	e7fd      	b.n	80170c0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80170c4:	f001 fc80 	bl	80189c8 <xTaskGetSchedulerState>
 80170c8:	4603      	mov	r3, r0
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d102      	bne.n	80170d4 <xQueueGenericSend+0xb0>
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d101      	bne.n	80170d8 <xQueueGenericSend+0xb4>
 80170d4:	2301      	movs	r3, #1
 80170d6:	e000      	b.n	80170da <xQueueGenericSend+0xb6>
 80170d8:	2300      	movs	r3, #0
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d10d      	bne.n	80170fa <xQueueGenericSend+0xd6>
	__asm volatile
 80170de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170e2:	b672      	cpsid	i
 80170e4:	f383 8811 	msr	BASEPRI, r3
 80170e8:	f3bf 8f6f 	isb	sy
 80170ec:	f3bf 8f4f 	dsb	sy
 80170f0:	b662      	cpsie	i
 80170f2:	61fb      	str	r3, [r7, #28]
}
 80170f4:	bf00      	nop
 80170f6:	bf00      	nop
 80170f8:	e7fd      	b.n	80170f6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80170fa:	f001 ffb7 	bl	801906c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80170fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017106:	429a      	cmp	r2, r3
 8017108:	d302      	bcc.n	8017110 <xQueueGenericSend+0xec>
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	2b02      	cmp	r3, #2
 801710e:	d129      	bne.n	8017164 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017110:	683a      	ldr	r2, [r7, #0]
 8017112:	68b9      	ldr	r1, [r7, #8]
 8017114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017116:	f000 fcd3 	bl	8017ac0 <prvCopyDataToQueue>
 801711a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017120:	2b00      	cmp	r3, #0
 8017122:	d010      	beq.n	8017146 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017126:	3324      	adds	r3, #36	@ 0x24
 8017128:	4618      	mov	r0, r3
 801712a:	f001 fa83 	bl	8018634 <xTaskRemoveFromEventList>
 801712e:	4603      	mov	r3, r0
 8017130:	2b00      	cmp	r3, #0
 8017132:	d013      	beq.n	801715c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017134:	4b3f      	ldr	r3, [pc, #252]	@ (8017234 <xQueueGenericSend+0x210>)
 8017136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801713a:	601a      	str	r2, [r3, #0]
 801713c:	f3bf 8f4f 	dsb	sy
 8017140:	f3bf 8f6f 	isb	sy
 8017144:	e00a      	b.n	801715c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017148:	2b00      	cmp	r3, #0
 801714a:	d007      	beq.n	801715c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801714c:	4b39      	ldr	r3, [pc, #228]	@ (8017234 <xQueueGenericSend+0x210>)
 801714e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017152:	601a      	str	r2, [r3, #0]
 8017154:	f3bf 8f4f 	dsb	sy
 8017158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801715c:	f001 ffbc 	bl	80190d8 <vPortExitCritical>
				return pdPASS;
 8017160:	2301      	movs	r3, #1
 8017162:	e063      	b.n	801722c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d103      	bne.n	8017172 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801716a:	f001 ffb5 	bl	80190d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801716e:	2300      	movs	r3, #0
 8017170:	e05c      	b.n	801722c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017174:	2b00      	cmp	r3, #0
 8017176:	d106      	bne.n	8017186 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017178:	f107 0314 	add.w	r3, r7, #20
 801717c:	4618      	mov	r0, r3
 801717e:	f001 fabf 	bl	8018700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017182:	2301      	movs	r3, #1
 8017184:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017186:	f001 ffa7 	bl	80190d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801718a:	f001 f81b 	bl	80181c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801718e:	f001 ff6d 	bl	801906c <vPortEnterCritical>
 8017192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017198:	b25b      	sxtb	r3, r3
 801719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801719e:	d103      	bne.n	80171a8 <xQueueGenericSend+0x184>
 80171a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171a2:	2200      	movs	r2, #0
 80171a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80171a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80171ae:	b25b      	sxtb	r3, r3
 80171b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171b4:	d103      	bne.n	80171be <xQueueGenericSend+0x19a>
 80171b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171b8:	2200      	movs	r2, #0
 80171ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80171be:	f001 ff8b 	bl	80190d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80171c2:	1d3a      	adds	r2, r7, #4
 80171c4:	f107 0314 	add.w	r3, r7, #20
 80171c8:	4611      	mov	r1, r2
 80171ca:	4618      	mov	r0, r3
 80171cc:	f001 faae 	bl	801872c <xTaskCheckForTimeOut>
 80171d0:	4603      	mov	r3, r0
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d124      	bne.n	8017220 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80171d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171d8:	f000 fd6a 	bl	8017cb0 <prvIsQueueFull>
 80171dc:	4603      	mov	r3, r0
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d018      	beq.n	8017214 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80171e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171e4:	3310      	adds	r3, #16
 80171e6:	687a      	ldr	r2, [r7, #4]
 80171e8:	4611      	mov	r1, r2
 80171ea:	4618      	mov	r0, r3
 80171ec:	f001 f9fa 	bl	80185e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80171f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171f2:	f000 fcf5 	bl	8017be0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80171f6:	f000 fff3 	bl	80181e0 <xTaskResumeAll>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	f47f af7c 	bne.w	80170fa <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8017202:	4b0c      	ldr	r3, [pc, #48]	@ (8017234 <xQueueGenericSend+0x210>)
 8017204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017208:	601a      	str	r2, [r3, #0]
 801720a:	f3bf 8f4f 	dsb	sy
 801720e:	f3bf 8f6f 	isb	sy
 8017212:	e772      	b.n	80170fa <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017216:	f000 fce3 	bl	8017be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801721a:	f000 ffe1 	bl	80181e0 <xTaskResumeAll>
 801721e:	e76c      	b.n	80170fa <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017222:	f000 fcdd 	bl	8017be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017226:	f000 ffdb 	bl	80181e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801722a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801722c:	4618      	mov	r0, r3
 801722e:	3738      	adds	r7, #56	@ 0x38
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}
 8017234:	e000ed04 	.word	0xe000ed04

08017238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b08e      	sub	sp, #56	@ 0x38
 801723c:	af00      	add	r7, sp, #0
 801723e:	60f8      	str	r0, [r7, #12]
 8017240:	60b9      	str	r1, [r7, #8]
 8017242:	607a      	str	r2, [r7, #4]
 8017244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801724c:	2b00      	cmp	r3, #0
 801724e:	d10d      	bne.n	801726c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8017250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017254:	b672      	cpsid	i
 8017256:	f383 8811 	msr	BASEPRI, r3
 801725a:	f3bf 8f6f 	isb	sy
 801725e:	f3bf 8f4f 	dsb	sy
 8017262:	b662      	cpsie	i
 8017264:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8017266:	bf00      	nop
 8017268:	bf00      	nop
 801726a:	e7fd      	b.n	8017268 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d103      	bne.n	801727a <xQueueGenericSendFromISR+0x42>
 8017272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017276:	2b00      	cmp	r3, #0
 8017278:	d101      	bne.n	801727e <xQueueGenericSendFromISR+0x46>
 801727a:	2301      	movs	r3, #1
 801727c:	e000      	b.n	8017280 <xQueueGenericSendFromISR+0x48>
 801727e:	2300      	movs	r3, #0
 8017280:	2b00      	cmp	r3, #0
 8017282:	d10d      	bne.n	80172a0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8017284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017288:	b672      	cpsid	i
 801728a:	f383 8811 	msr	BASEPRI, r3
 801728e:	f3bf 8f6f 	isb	sy
 8017292:	f3bf 8f4f 	dsb	sy
 8017296:	b662      	cpsie	i
 8017298:	623b      	str	r3, [r7, #32]
}
 801729a:	bf00      	nop
 801729c:	bf00      	nop
 801729e:	e7fd      	b.n	801729c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	2b02      	cmp	r3, #2
 80172a4:	d103      	bne.n	80172ae <xQueueGenericSendFromISR+0x76>
 80172a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80172aa:	2b01      	cmp	r3, #1
 80172ac:	d101      	bne.n	80172b2 <xQueueGenericSendFromISR+0x7a>
 80172ae:	2301      	movs	r3, #1
 80172b0:	e000      	b.n	80172b4 <xQueueGenericSendFromISR+0x7c>
 80172b2:	2300      	movs	r3, #0
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d10d      	bne.n	80172d4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80172b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172bc:	b672      	cpsid	i
 80172be:	f383 8811 	msr	BASEPRI, r3
 80172c2:	f3bf 8f6f 	isb	sy
 80172c6:	f3bf 8f4f 	dsb	sy
 80172ca:	b662      	cpsie	i
 80172cc:	61fb      	str	r3, [r7, #28]
}
 80172ce:	bf00      	nop
 80172d0:	bf00      	nop
 80172d2:	e7fd      	b.n	80172d0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80172d4:	f001 ffb2 	bl	801923c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80172d8:	f3ef 8211 	mrs	r2, BASEPRI
 80172dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172e0:	b672      	cpsid	i
 80172e2:	f383 8811 	msr	BASEPRI, r3
 80172e6:	f3bf 8f6f 	isb	sy
 80172ea:	f3bf 8f4f 	dsb	sy
 80172ee:	b662      	cpsie	i
 80172f0:	61ba      	str	r2, [r7, #24]
 80172f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80172f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80172f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80172f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80172fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017300:	429a      	cmp	r2, r3
 8017302:	d302      	bcc.n	801730a <xQueueGenericSendFromISR+0xd2>
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	2b02      	cmp	r3, #2
 8017308:	d12c      	bne.n	8017364 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801730c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017314:	683a      	ldr	r2, [r7, #0]
 8017316:	68b9      	ldr	r1, [r7, #8]
 8017318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801731a:	f000 fbd1 	bl	8017ac0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801731e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8017322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017326:	d112      	bne.n	801734e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801732c:	2b00      	cmp	r3, #0
 801732e:	d016      	beq.n	801735e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017332:	3324      	adds	r3, #36	@ 0x24
 8017334:	4618      	mov	r0, r3
 8017336:	f001 f97d 	bl	8018634 <xTaskRemoveFromEventList>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d00e      	beq.n	801735e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d00b      	beq.n	801735e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2201      	movs	r2, #1
 801734a:	601a      	str	r2, [r3, #0]
 801734c:	e007      	b.n	801735e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801734e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017352:	3301      	adds	r3, #1
 8017354:	b2db      	uxtb	r3, r3
 8017356:	b25a      	sxtb	r2, r3
 8017358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801735a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801735e:	2301      	movs	r3, #1
 8017360:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8017362:	e001      	b.n	8017368 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017364:	2300      	movs	r3, #0
 8017366:	637b      	str	r3, [r7, #52]	@ 0x34
 8017368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801736a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017372:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8017376:	4618      	mov	r0, r3
 8017378:	3738      	adds	r7, #56	@ 0x38
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}

0801737e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801737e:	b580      	push	{r7, lr}
 8017380:	b08e      	sub	sp, #56	@ 0x38
 8017382:	af00      	add	r7, sp, #0
 8017384:	6078      	str	r0, [r7, #4]
 8017386:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801738c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801738e:	2b00      	cmp	r3, #0
 8017390:	d10d      	bne.n	80173ae <xQueueGiveFromISR+0x30>
	__asm volatile
 8017392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017396:	b672      	cpsid	i
 8017398:	f383 8811 	msr	BASEPRI, r3
 801739c:	f3bf 8f6f 	isb	sy
 80173a0:	f3bf 8f4f 	dsb	sy
 80173a4:	b662      	cpsie	i
 80173a6:	623b      	str	r3, [r7, #32]
}
 80173a8:	bf00      	nop
 80173aa:	bf00      	nop
 80173ac:	e7fd      	b.n	80173aa <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80173ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d00d      	beq.n	80173d2 <xQueueGiveFromISR+0x54>
	__asm volatile
 80173b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173ba:	b672      	cpsid	i
 80173bc:	f383 8811 	msr	BASEPRI, r3
 80173c0:	f3bf 8f6f 	isb	sy
 80173c4:	f3bf 8f4f 	dsb	sy
 80173c8:	b662      	cpsie	i
 80173ca:	61fb      	str	r3, [r7, #28]
}
 80173cc:	bf00      	nop
 80173ce:	bf00      	nop
 80173d0:	e7fd      	b.n	80173ce <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80173d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d103      	bne.n	80173e2 <xQueueGiveFromISR+0x64>
 80173da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173dc:	689b      	ldr	r3, [r3, #8]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d101      	bne.n	80173e6 <xQueueGiveFromISR+0x68>
 80173e2:	2301      	movs	r3, #1
 80173e4:	e000      	b.n	80173e8 <xQueueGiveFromISR+0x6a>
 80173e6:	2300      	movs	r3, #0
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d10d      	bne.n	8017408 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80173ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173f0:	b672      	cpsid	i
 80173f2:	f383 8811 	msr	BASEPRI, r3
 80173f6:	f3bf 8f6f 	isb	sy
 80173fa:	f3bf 8f4f 	dsb	sy
 80173fe:	b662      	cpsie	i
 8017400:	61bb      	str	r3, [r7, #24]
}
 8017402:	bf00      	nop
 8017404:	bf00      	nop
 8017406:	e7fd      	b.n	8017404 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017408:	f001 ff18 	bl	801923c <vPortValidateInterruptPriority>
	__asm volatile
 801740c:	f3ef 8211 	mrs	r2, BASEPRI
 8017410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017414:	b672      	cpsid	i
 8017416:	f383 8811 	msr	BASEPRI, r3
 801741a:	f3bf 8f6f 	isb	sy
 801741e:	f3bf 8f4f 	dsb	sy
 8017422:	b662      	cpsie	i
 8017424:	617a      	str	r2, [r7, #20]
 8017426:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017428:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801742a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017430:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017436:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017438:	429a      	cmp	r2, r3
 801743a:	d22b      	bcs.n	8017494 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801743e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017448:	1c5a      	adds	r2, r3, #1
 801744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801744c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801744e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017456:	d112      	bne.n	801747e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801745a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801745c:	2b00      	cmp	r3, #0
 801745e:	d016      	beq.n	801748e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017462:	3324      	adds	r3, #36	@ 0x24
 8017464:	4618      	mov	r0, r3
 8017466:	f001 f8e5 	bl	8018634 <xTaskRemoveFromEventList>
 801746a:	4603      	mov	r3, r0
 801746c:	2b00      	cmp	r3, #0
 801746e:	d00e      	beq.n	801748e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d00b      	beq.n	801748e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	2201      	movs	r2, #1
 801747a:	601a      	str	r2, [r3, #0]
 801747c:	e007      	b.n	801748e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801747e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017482:	3301      	adds	r3, #1
 8017484:	b2db      	uxtb	r3, r3
 8017486:	b25a      	sxtb	r2, r3
 8017488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801748a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801748e:	2301      	movs	r3, #1
 8017490:	637b      	str	r3, [r7, #52]	@ 0x34
 8017492:	e001      	b.n	8017498 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017494:	2300      	movs	r3, #0
 8017496:	637b      	str	r3, [r7, #52]	@ 0x34
 8017498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801749a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	f383 8811 	msr	BASEPRI, r3
}
 80174a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80174a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80174a6:	4618      	mov	r0, r3
 80174a8:	3738      	adds	r7, #56	@ 0x38
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd80      	pop	{r7, pc}
	...

080174b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b08c      	sub	sp, #48	@ 0x30
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	60f8      	str	r0, [r7, #12]
 80174b8:	60b9      	str	r1, [r7, #8]
 80174ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80174bc:	2300      	movs	r3, #0
 80174be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80174c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d10d      	bne.n	80174e6 <xQueueReceive+0x36>
	__asm volatile
 80174ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174ce:	b672      	cpsid	i
 80174d0:	f383 8811 	msr	BASEPRI, r3
 80174d4:	f3bf 8f6f 	isb	sy
 80174d8:	f3bf 8f4f 	dsb	sy
 80174dc:	b662      	cpsie	i
 80174de:	623b      	str	r3, [r7, #32]
}
 80174e0:	bf00      	nop
 80174e2:	bf00      	nop
 80174e4:	e7fd      	b.n	80174e2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d103      	bne.n	80174f4 <xQueueReceive+0x44>
 80174ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d101      	bne.n	80174f8 <xQueueReceive+0x48>
 80174f4:	2301      	movs	r3, #1
 80174f6:	e000      	b.n	80174fa <xQueueReceive+0x4a>
 80174f8:	2300      	movs	r3, #0
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d10d      	bne.n	801751a <xQueueReceive+0x6a>
	__asm volatile
 80174fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017502:	b672      	cpsid	i
 8017504:	f383 8811 	msr	BASEPRI, r3
 8017508:	f3bf 8f6f 	isb	sy
 801750c:	f3bf 8f4f 	dsb	sy
 8017510:	b662      	cpsie	i
 8017512:	61fb      	str	r3, [r7, #28]
}
 8017514:	bf00      	nop
 8017516:	bf00      	nop
 8017518:	e7fd      	b.n	8017516 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801751a:	f001 fa55 	bl	80189c8 <xTaskGetSchedulerState>
 801751e:	4603      	mov	r3, r0
 8017520:	2b00      	cmp	r3, #0
 8017522:	d102      	bne.n	801752a <xQueueReceive+0x7a>
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d101      	bne.n	801752e <xQueueReceive+0x7e>
 801752a:	2301      	movs	r3, #1
 801752c:	e000      	b.n	8017530 <xQueueReceive+0x80>
 801752e:	2300      	movs	r3, #0
 8017530:	2b00      	cmp	r3, #0
 8017532:	d10d      	bne.n	8017550 <xQueueReceive+0xa0>
	__asm volatile
 8017534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017538:	b672      	cpsid	i
 801753a:	f383 8811 	msr	BASEPRI, r3
 801753e:	f3bf 8f6f 	isb	sy
 8017542:	f3bf 8f4f 	dsb	sy
 8017546:	b662      	cpsie	i
 8017548:	61bb      	str	r3, [r7, #24]
}
 801754a:	bf00      	nop
 801754c:	bf00      	nop
 801754e:	e7fd      	b.n	801754c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017550:	f001 fd8c 	bl	801906c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017558:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801755c:	2b00      	cmp	r3, #0
 801755e:	d01f      	beq.n	80175a0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017560:	68b9      	ldr	r1, [r7, #8]
 8017562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017564:	f000 fb16 	bl	8017b94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756a:	1e5a      	subs	r2, r3, #1
 801756c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801756e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017572:	691b      	ldr	r3, [r3, #16]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d00f      	beq.n	8017598 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801757a:	3310      	adds	r3, #16
 801757c:	4618      	mov	r0, r3
 801757e:	f001 f859 	bl	8018634 <xTaskRemoveFromEventList>
 8017582:	4603      	mov	r3, r0
 8017584:	2b00      	cmp	r3, #0
 8017586:	d007      	beq.n	8017598 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017588:	4b3c      	ldr	r3, [pc, #240]	@ (801767c <xQueueReceive+0x1cc>)
 801758a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801758e:	601a      	str	r2, [r3, #0]
 8017590:	f3bf 8f4f 	dsb	sy
 8017594:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017598:	f001 fd9e 	bl	80190d8 <vPortExitCritical>
				return pdPASS;
 801759c:	2301      	movs	r3, #1
 801759e:	e069      	b.n	8017674 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d103      	bne.n	80175ae <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80175a6:	f001 fd97 	bl	80190d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80175aa:	2300      	movs	r3, #0
 80175ac:	e062      	b.n	8017674 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80175ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d106      	bne.n	80175c2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80175b4:	f107 0310 	add.w	r3, r7, #16
 80175b8:	4618      	mov	r0, r3
 80175ba:	f001 f8a1 	bl	8018700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80175be:	2301      	movs	r3, #1
 80175c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80175c2:	f001 fd89 	bl	80190d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80175c6:	f000 fdfd 	bl	80181c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80175ca:	f001 fd4f 	bl	801906c <vPortEnterCritical>
 80175ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80175d4:	b25b      	sxtb	r3, r3
 80175d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175da:	d103      	bne.n	80175e4 <xQueueReceive+0x134>
 80175dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175de:	2200      	movs	r2, #0
 80175e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80175e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80175ea:	b25b      	sxtb	r3, r3
 80175ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175f0:	d103      	bne.n	80175fa <xQueueReceive+0x14a>
 80175f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175f4:	2200      	movs	r2, #0
 80175f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80175fa:	f001 fd6d 	bl	80190d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80175fe:	1d3a      	adds	r2, r7, #4
 8017600:	f107 0310 	add.w	r3, r7, #16
 8017604:	4611      	mov	r1, r2
 8017606:	4618      	mov	r0, r3
 8017608:	f001 f890 	bl	801872c <xTaskCheckForTimeOut>
 801760c:	4603      	mov	r3, r0
 801760e:	2b00      	cmp	r3, #0
 8017610:	d123      	bne.n	801765a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017614:	f000 fb36 	bl	8017c84 <prvIsQueueEmpty>
 8017618:	4603      	mov	r3, r0
 801761a:	2b00      	cmp	r3, #0
 801761c:	d017      	beq.n	801764e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801761e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017620:	3324      	adds	r3, #36	@ 0x24
 8017622:	687a      	ldr	r2, [r7, #4]
 8017624:	4611      	mov	r1, r2
 8017626:	4618      	mov	r0, r3
 8017628:	f000 ffdc 	bl	80185e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801762c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801762e:	f000 fad7 	bl	8017be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017632:	f000 fdd5 	bl	80181e0 <xTaskResumeAll>
 8017636:	4603      	mov	r3, r0
 8017638:	2b00      	cmp	r3, #0
 801763a:	d189      	bne.n	8017550 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 801763c:	4b0f      	ldr	r3, [pc, #60]	@ (801767c <xQueueReceive+0x1cc>)
 801763e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017642:	601a      	str	r2, [r3, #0]
 8017644:	f3bf 8f4f 	dsb	sy
 8017648:	f3bf 8f6f 	isb	sy
 801764c:	e780      	b.n	8017550 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801764e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017650:	f000 fac6 	bl	8017be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017654:	f000 fdc4 	bl	80181e0 <xTaskResumeAll>
 8017658:	e77a      	b.n	8017550 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801765a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801765c:	f000 fac0 	bl	8017be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017660:	f000 fdbe 	bl	80181e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017664:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017666:	f000 fb0d 	bl	8017c84 <prvIsQueueEmpty>
 801766a:	4603      	mov	r3, r0
 801766c:	2b00      	cmp	r3, #0
 801766e:	f43f af6f 	beq.w	8017550 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017672:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017674:	4618      	mov	r0, r3
 8017676:	3730      	adds	r7, #48	@ 0x30
 8017678:	46bd      	mov	sp, r7
 801767a:	bd80      	pop	{r7, pc}
 801767c:	e000ed04 	.word	0xe000ed04

08017680 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b08e      	sub	sp, #56	@ 0x38
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801768a:	2300      	movs	r3, #0
 801768c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017692:	2300      	movs	r3, #0
 8017694:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017698:	2b00      	cmp	r3, #0
 801769a:	d10d      	bne.n	80176b8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 801769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176a0:	b672      	cpsid	i
 80176a2:	f383 8811 	msr	BASEPRI, r3
 80176a6:	f3bf 8f6f 	isb	sy
 80176aa:	f3bf 8f4f 	dsb	sy
 80176ae:	b662      	cpsie	i
 80176b0:	623b      	str	r3, [r7, #32]
}
 80176b2:	bf00      	nop
 80176b4:	bf00      	nop
 80176b6:	e7fd      	b.n	80176b4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80176b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d00d      	beq.n	80176dc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80176c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176c4:	b672      	cpsid	i
 80176c6:	f383 8811 	msr	BASEPRI, r3
 80176ca:	f3bf 8f6f 	isb	sy
 80176ce:	f3bf 8f4f 	dsb	sy
 80176d2:	b662      	cpsie	i
 80176d4:	61fb      	str	r3, [r7, #28]
}
 80176d6:	bf00      	nop
 80176d8:	bf00      	nop
 80176da:	e7fd      	b.n	80176d8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80176dc:	f001 f974 	bl	80189c8 <xTaskGetSchedulerState>
 80176e0:	4603      	mov	r3, r0
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d102      	bne.n	80176ec <xQueueSemaphoreTake+0x6c>
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d101      	bne.n	80176f0 <xQueueSemaphoreTake+0x70>
 80176ec:	2301      	movs	r3, #1
 80176ee:	e000      	b.n	80176f2 <xQueueSemaphoreTake+0x72>
 80176f0:	2300      	movs	r3, #0
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d10d      	bne.n	8017712 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80176f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176fa:	b672      	cpsid	i
 80176fc:	f383 8811 	msr	BASEPRI, r3
 8017700:	f3bf 8f6f 	isb	sy
 8017704:	f3bf 8f4f 	dsb	sy
 8017708:	b662      	cpsie	i
 801770a:	61bb      	str	r3, [r7, #24]
}
 801770c:	bf00      	nop
 801770e:	bf00      	nop
 8017710:	e7fd      	b.n	801770e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017712:	f001 fcab 	bl	801906c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801771a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801771e:	2b00      	cmp	r3, #0
 8017720:	d024      	beq.n	801776c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017724:	1e5a      	subs	r2, r3, #1
 8017726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017728:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d104      	bne.n	801773c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017732:	f001 fb13 	bl	8018d5c <pvTaskIncrementMutexHeldCount>
 8017736:	4602      	mov	r2, r0
 8017738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801773a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801773c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801773e:	691b      	ldr	r3, [r3, #16]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d00f      	beq.n	8017764 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017746:	3310      	adds	r3, #16
 8017748:	4618      	mov	r0, r3
 801774a:	f000 ff73 	bl	8018634 <xTaskRemoveFromEventList>
 801774e:	4603      	mov	r3, r0
 8017750:	2b00      	cmp	r3, #0
 8017752:	d007      	beq.n	8017764 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017754:	4b55      	ldr	r3, [pc, #340]	@ (80178ac <xQueueSemaphoreTake+0x22c>)
 8017756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801775a:	601a      	str	r2, [r3, #0]
 801775c:	f3bf 8f4f 	dsb	sy
 8017760:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017764:	f001 fcb8 	bl	80190d8 <vPortExitCritical>
				return pdPASS;
 8017768:	2301      	movs	r3, #1
 801776a:	e09a      	b.n	80178a2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d114      	bne.n	801779c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017774:	2b00      	cmp	r3, #0
 8017776:	d00d      	beq.n	8017794 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8017778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801777c:	b672      	cpsid	i
 801777e:	f383 8811 	msr	BASEPRI, r3
 8017782:	f3bf 8f6f 	isb	sy
 8017786:	f3bf 8f4f 	dsb	sy
 801778a:	b662      	cpsie	i
 801778c:	617b      	str	r3, [r7, #20]
}
 801778e:	bf00      	nop
 8017790:	bf00      	nop
 8017792:	e7fd      	b.n	8017790 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017794:	f001 fca0 	bl	80190d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017798:	2300      	movs	r3, #0
 801779a:	e082      	b.n	80178a2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 801779c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d106      	bne.n	80177b0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80177a2:	f107 030c 	add.w	r3, r7, #12
 80177a6:	4618      	mov	r0, r3
 80177a8:	f000 ffaa 	bl	8018700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80177ac:	2301      	movs	r3, #1
 80177ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80177b0:	f001 fc92 	bl	80190d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80177b4:	f000 fd06 	bl	80181c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80177b8:	f001 fc58 	bl	801906c <vPortEnterCritical>
 80177bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80177c2:	b25b      	sxtb	r3, r3
 80177c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177c8:	d103      	bne.n	80177d2 <xQueueSemaphoreTake+0x152>
 80177ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177cc:	2200      	movs	r2, #0
 80177ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80177d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80177d8:	b25b      	sxtb	r3, r3
 80177da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177de:	d103      	bne.n	80177e8 <xQueueSemaphoreTake+0x168>
 80177e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177e2:	2200      	movs	r2, #0
 80177e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80177e8:	f001 fc76 	bl	80190d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80177ec:	463a      	mov	r2, r7
 80177ee:	f107 030c 	add.w	r3, r7, #12
 80177f2:	4611      	mov	r1, r2
 80177f4:	4618      	mov	r0, r3
 80177f6:	f000 ff99 	bl	801872c <xTaskCheckForTimeOut>
 80177fa:	4603      	mov	r3, r0
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d132      	bne.n	8017866 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017802:	f000 fa3f 	bl	8017c84 <prvIsQueueEmpty>
 8017806:	4603      	mov	r3, r0
 8017808:	2b00      	cmp	r3, #0
 801780a:	d026      	beq.n	801785a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801780c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d109      	bne.n	8017828 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8017814:	f001 fc2a 	bl	801906c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801781a:	689b      	ldr	r3, [r3, #8]
 801781c:	4618      	mov	r0, r3
 801781e:	f001 f8f1 	bl	8018a04 <xTaskPriorityInherit>
 8017822:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8017824:	f001 fc58 	bl	80190d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801782a:	3324      	adds	r3, #36	@ 0x24
 801782c:	683a      	ldr	r2, [r7, #0]
 801782e:	4611      	mov	r1, r2
 8017830:	4618      	mov	r0, r3
 8017832:	f000 fed7 	bl	80185e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017836:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017838:	f000 f9d2 	bl	8017be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801783c:	f000 fcd0 	bl	80181e0 <xTaskResumeAll>
 8017840:	4603      	mov	r3, r0
 8017842:	2b00      	cmp	r3, #0
 8017844:	f47f af65 	bne.w	8017712 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8017848:	4b18      	ldr	r3, [pc, #96]	@ (80178ac <xQueueSemaphoreTake+0x22c>)
 801784a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801784e:	601a      	str	r2, [r3, #0]
 8017850:	f3bf 8f4f 	dsb	sy
 8017854:	f3bf 8f6f 	isb	sy
 8017858:	e75b      	b.n	8017712 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801785a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801785c:	f000 f9c0 	bl	8017be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017860:	f000 fcbe 	bl	80181e0 <xTaskResumeAll>
 8017864:	e755      	b.n	8017712 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017866:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017868:	f000 f9ba 	bl	8017be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801786c:	f000 fcb8 	bl	80181e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017870:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017872:	f000 fa07 	bl	8017c84 <prvIsQueueEmpty>
 8017876:	4603      	mov	r3, r0
 8017878:	2b00      	cmp	r3, #0
 801787a:	f43f af4a 	beq.w	8017712 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017880:	2b00      	cmp	r3, #0
 8017882:	d00d      	beq.n	80178a0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8017884:	f001 fbf2 	bl	801906c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801788a:	f000 f901 	bl	8017a90 <prvGetDisinheritPriorityAfterTimeout>
 801788e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017892:	689b      	ldr	r3, [r3, #8]
 8017894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017896:	4618      	mov	r0, r3
 8017898:	f001 f9c0 	bl	8018c1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801789c:	f001 fc1c 	bl	80190d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80178a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3738      	adds	r7, #56	@ 0x38
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	e000ed04 	.word	0xe000ed04

080178b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b08e      	sub	sp, #56	@ 0x38
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	60f8      	str	r0, [r7, #12]
 80178b8:	60b9      	str	r1, [r7, #8]
 80178ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80178c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d10d      	bne.n	80178e2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80178c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178ca:	b672      	cpsid	i
 80178cc:	f383 8811 	msr	BASEPRI, r3
 80178d0:	f3bf 8f6f 	isb	sy
 80178d4:	f3bf 8f4f 	dsb	sy
 80178d8:	b662      	cpsie	i
 80178da:	623b      	str	r3, [r7, #32]
}
 80178dc:	bf00      	nop
 80178de:	bf00      	nop
 80178e0:	e7fd      	b.n	80178de <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80178e2:	68bb      	ldr	r3, [r7, #8]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d103      	bne.n	80178f0 <xQueueReceiveFromISR+0x40>
 80178e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d101      	bne.n	80178f4 <xQueueReceiveFromISR+0x44>
 80178f0:	2301      	movs	r3, #1
 80178f2:	e000      	b.n	80178f6 <xQueueReceiveFromISR+0x46>
 80178f4:	2300      	movs	r3, #0
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d10d      	bne.n	8017916 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80178fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178fe:	b672      	cpsid	i
 8017900:	f383 8811 	msr	BASEPRI, r3
 8017904:	f3bf 8f6f 	isb	sy
 8017908:	f3bf 8f4f 	dsb	sy
 801790c:	b662      	cpsie	i
 801790e:	61fb      	str	r3, [r7, #28]
}
 8017910:	bf00      	nop
 8017912:	bf00      	nop
 8017914:	e7fd      	b.n	8017912 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017916:	f001 fc91 	bl	801923c <vPortValidateInterruptPriority>
	__asm volatile
 801791a:	f3ef 8211 	mrs	r2, BASEPRI
 801791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017922:	b672      	cpsid	i
 8017924:	f383 8811 	msr	BASEPRI, r3
 8017928:	f3bf 8f6f 	isb	sy
 801792c:	f3bf 8f4f 	dsb	sy
 8017930:	b662      	cpsie	i
 8017932:	61ba      	str	r2, [r7, #24]
 8017934:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017936:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017938:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801793e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017942:	2b00      	cmp	r3, #0
 8017944:	d02f      	beq.n	80179a6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801794c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017950:	68b9      	ldr	r1, [r7, #8]
 8017952:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017954:	f000 f91e 	bl	8017b94 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801795a:	1e5a      	subs	r2, r3, #1
 801795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801795e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017960:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017968:	d112      	bne.n	8017990 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801796c:	691b      	ldr	r3, [r3, #16]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d016      	beq.n	80179a0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017974:	3310      	adds	r3, #16
 8017976:	4618      	mov	r0, r3
 8017978:	f000 fe5c 	bl	8018634 <xTaskRemoveFromEventList>
 801797c:	4603      	mov	r3, r0
 801797e:	2b00      	cmp	r3, #0
 8017980:	d00e      	beq.n	80179a0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d00b      	beq.n	80179a0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	2201      	movs	r2, #1
 801798c:	601a      	str	r2, [r3, #0]
 801798e:	e007      	b.n	80179a0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017994:	3301      	adds	r3, #1
 8017996:	b2db      	uxtb	r3, r3
 8017998:	b25a      	sxtb	r2, r3
 801799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801799c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80179a0:	2301      	movs	r3, #1
 80179a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80179a4:	e001      	b.n	80179aa <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80179a6:	2300      	movs	r3, #0
 80179a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80179aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	f383 8811 	msr	BASEPRI, r3
}
 80179b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80179b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	3738      	adds	r7, #56	@ 0x38
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}

080179c0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b084      	sub	sp, #16
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d10d      	bne.n	80179ea <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80179ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179d2:	b672      	cpsid	i
 80179d4:	f383 8811 	msr	BASEPRI, r3
 80179d8:	f3bf 8f6f 	isb	sy
 80179dc:	f3bf 8f4f 	dsb	sy
 80179e0:	b662      	cpsie	i
 80179e2:	60bb      	str	r3, [r7, #8]
}
 80179e4:	bf00      	nop
 80179e6:	bf00      	nop
 80179e8:	e7fd      	b.n	80179e6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80179ea:	f001 fb3f 	bl	801906c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179f2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80179f4:	f001 fb70 	bl	80190d8 <vPortExitCritical>

	return uxReturn;
 80179f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80179fa:	4618      	mov	r0, r3
 80179fc:	3710      	adds	r7, #16
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}

08017a02 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8017a02:	b480      	push	{r7}
 8017a04:	b087      	sub	sp, #28
 8017a06:	af00      	add	r7, sp, #0
 8017a08:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d10d      	bne.n	8017a30 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8017a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a18:	b672      	cpsid	i
 8017a1a:	f383 8811 	msr	BASEPRI, r3
 8017a1e:	f3bf 8f6f 	isb	sy
 8017a22:	f3bf 8f4f 	dsb	sy
 8017a26:	b662      	cpsie	i
 8017a28:	60fb      	str	r3, [r7, #12]
}
 8017a2a:	bf00      	nop
 8017a2c:	bf00      	nop
 8017a2e:	e7fd      	b.n	8017a2c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a34:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8017a36:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8017a38:	4618      	mov	r0, r3
 8017a3a:	371c      	adds	r7, #28
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a42:	4770      	bx	lr

08017a44 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b084      	sub	sp, #16
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d10d      	bne.n	8017a72 <vQueueDelete+0x2e>
	__asm volatile
 8017a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a5a:	b672      	cpsid	i
 8017a5c:	f383 8811 	msr	BASEPRI, r3
 8017a60:	f3bf 8f6f 	isb	sy
 8017a64:	f3bf 8f4f 	dsb	sy
 8017a68:	b662      	cpsie	i
 8017a6a:	60bb      	str	r3, [r7, #8]
}
 8017a6c:	bf00      	nop
 8017a6e:	bf00      	nop
 8017a70:	e7fd      	b.n	8017a6e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017a72:	68f8      	ldr	r0, [r7, #12]
 8017a74:	f000 f934 	bl	8017ce0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d102      	bne.n	8017a88 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8017a82:	68f8      	ldr	r0, [r7, #12]
 8017a84:	f001 fcf2 	bl	801946c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017a88:	bf00      	nop
 8017a8a:	3710      	adds	r7, #16
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}

08017a90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017a90:	b480      	push	{r7}
 8017a92:	b085      	sub	sp, #20
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d006      	beq.n	8017aae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	f1c3 0307 	rsb	r3, r3, #7
 8017aaa:	60fb      	str	r3, [r7, #12]
 8017aac:	e001      	b.n	8017ab2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
	}
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	3714      	adds	r7, #20
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abe:	4770      	bx	lr

08017ac0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b086      	sub	sp, #24
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017acc:	2300      	movs	r3, #0
 8017ace:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ad4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d10d      	bne.n	8017afa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d14d      	bne.n	8017b82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	689b      	ldr	r3, [r3, #8]
 8017aea:	4618      	mov	r0, r3
 8017aec:	f001 f80a 	bl	8018b04 <xTaskPriorityDisinherit>
 8017af0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	2200      	movs	r2, #0
 8017af6:	609a      	str	r2, [r3, #8]
 8017af8:	e043      	b.n	8017b82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d119      	bne.n	8017b34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	6858      	ldr	r0, [r3, #4]
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b08:	461a      	mov	r2, r3
 8017b0a:	68b9      	ldr	r1, [r7, #8]
 8017b0c:	f002 fa82 	bl	801a014 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	685a      	ldr	r2, [r3, #4]
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b18:	441a      	add	r2, r3
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	685a      	ldr	r2, [r3, #4]
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	689b      	ldr	r3, [r3, #8]
 8017b26:	429a      	cmp	r2, r3
 8017b28:	d32b      	bcc.n	8017b82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	681a      	ldr	r2, [r3, #0]
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	605a      	str	r2, [r3, #4]
 8017b32:	e026      	b.n	8017b82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	68d8      	ldr	r0, [r3, #12]
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b3c:	461a      	mov	r2, r3
 8017b3e:	68b9      	ldr	r1, [r7, #8]
 8017b40:	f002 fa68 	bl	801a014 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	68da      	ldr	r2, [r3, #12]
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b4c:	425b      	negs	r3, r3
 8017b4e:	441a      	add	r2, r3
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	68da      	ldr	r2, [r3, #12]
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d207      	bcs.n	8017b70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	689a      	ldr	r2, [r3, #8]
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b68:	425b      	negs	r3, r3
 8017b6a:	441a      	add	r2, r3
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2b02      	cmp	r3, #2
 8017b74:	d105      	bne.n	8017b82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d002      	beq.n	8017b82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017b7c:	693b      	ldr	r3, [r7, #16]
 8017b7e:	3b01      	subs	r3, #1
 8017b80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	1c5a      	adds	r2, r3, #1
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017b8a:	697b      	ldr	r3, [r7, #20]
}
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	3718      	adds	r7, #24
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bd80      	pop	{r7, pc}

08017b94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b082      	sub	sp, #8
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
 8017b9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d018      	beq.n	8017bd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	68da      	ldr	r2, [r3, #12]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017bae:	441a      	add	r2, r3
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	68da      	ldr	r2, [r3, #12]
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	689b      	ldr	r3, [r3, #8]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d303      	bcc.n	8017bc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	681a      	ldr	r2, [r3, #0]
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	68d9      	ldr	r1, [r3, #12]
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017bd0:	461a      	mov	r2, r3
 8017bd2:	6838      	ldr	r0, [r7, #0]
 8017bd4:	f002 fa1e 	bl	801a014 <memcpy>
	}
}
 8017bd8:	bf00      	nop
 8017bda:	3708      	adds	r7, #8
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}

08017be0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017be8:	f001 fa40 	bl	801906c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017bf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bf4:	e011      	b.n	8017c1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d012      	beq.n	8017c24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	3324      	adds	r3, #36	@ 0x24
 8017c02:	4618      	mov	r0, r3
 8017c04:	f000 fd16 	bl	8018634 <xTaskRemoveFromEventList>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d001      	beq.n	8017c12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017c0e:	f000 fdf5 	bl	80187fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017c12:	7bfb      	ldrb	r3, [r7, #15]
 8017c14:	3b01      	subs	r3, #1
 8017c16:	b2db      	uxtb	r3, r3
 8017c18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	dce9      	bgt.n	8017bf6 <prvUnlockQueue+0x16>
 8017c22:	e000      	b.n	8017c26 <prvUnlockQueue+0x46>
					break;
 8017c24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	22ff      	movs	r2, #255	@ 0xff
 8017c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8017c2e:	f001 fa53 	bl	80190d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017c32:	f001 fa1b 	bl	801906c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017c3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c3e:	e011      	b.n	8017c64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	691b      	ldr	r3, [r3, #16]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d012      	beq.n	8017c6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	3310      	adds	r3, #16
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f000 fcf1 	bl	8018634 <xTaskRemoveFromEventList>
 8017c52:	4603      	mov	r3, r0
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d001      	beq.n	8017c5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017c58:	f000 fdd0 	bl	80187fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017c5c:	7bbb      	ldrb	r3, [r7, #14]
 8017c5e:	3b01      	subs	r3, #1
 8017c60:	b2db      	uxtb	r3, r3
 8017c62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	dce9      	bgt.n	8017c40 <prvUnlockQueue+0x60>
 8017c6c:	e000      	b.n	8017c70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017c6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	22ff      	movs	r2, #255	@ 0xff
 8017c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8017c78:	f001 fa2e 	bl	80190d8 <vPortExitCritical>
}
 8017c7c:	bf00      	nop
 8017c7e:	3710      	adds	r7, #16
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}

08017c84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b084      	sub	sp, #16
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c8c:	f001 f9ee 	bl	801906c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d102      	bne.n	8017c9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017c98:	2301      	movs	r3, #1
 8017c9a:	60fb      	str	r3, [r7, #12]
 8017c9c:	e001      	b.n	8017ca2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017ca2:	f001 fa19 	bl	80190d8 <vPortExitCritical>

	return xReturn;
 8017ca6:	68fb      	ldr	r3, [r7, #12]
}
 8017ca8:	4618      	mov	r0, r3
 8017caa:	3710      	adds	r7, #16
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}

08017cb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b084      	sub	sp, #16
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017cb8:	f001 f9d8 	bl	801906c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	d102      	bne.n	8017cce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017cc8:	2301      	movs	r3, #1
 8017cca:	60fb      	str	r3, [r7, #12]
 8017ccc:	e001      	b.n	8017cd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017cd2:	f001 fa01 	bl	80190d8 <vPortExitCritical>

	return xReturn;
 8017cd6:	68fb      	ldr	r3, [r7, #12]
}
 8017cd8:	4618      	mov	r0, r3
 8017cda:	3710      	adds	r7, #16
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	bd80      	pop	{r7, pc}

08017ce0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017ce0:	b480      	push	{r7}
 8017ce2:	b085      	sub	sp, #20
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017ce8:	2300      	movs	r3, #0
 8017cea:	60fb      	str	r3, [r7, #12]
 8017cec:	e016      	b.n	8017d1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017cee:	4a10      	ldr	r2, [pc, #64]	@ (8017d30 <vQueueUnregisterQueue+0x50>)
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	00db      	lsls	r3, r3, #3
 8017cf4:	4413      	add	r3, r2
 8017cf6:	685b      	ldr	r3, [r3, #4]
 8017cf8:	687a      	ldr	r2, [r7, #4]
 8017cfa:	429a      	cmp	r2, r3
 8017cfc:	d10b      	bne.n	8017d16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8017d30 <vQueueUnregisterQueue+0x50>)
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	2100      	movs	r1, #0
 8017d04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017d08:	4a09      	ldr	r2, [pc, #36]	@ (8017d30 <vQueueUnregisterQueue+0x50>)
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	00db      	lsls	r3, r3, #3
 8017d0e:	4413      	add	r3, r2
 8017d10:	2200      	movs	r2, #0
 8017d12:	605a      	str	r2, [r3, #4]
				break;
 8017d14:	e006      	b.n	8017d24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	3301      	adds	r3, #1
 8017d1a:	60fb      	str	r3, [r7, #12]
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	2b07      	cmp	r3, #7
 8017d20:	d9e5      	bls.n	8017cee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017d22:	bf00      	nop
 8017d24:	bf00      	nop
 8017d26:	3714      	adds	r7, #20
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2e:	4770      	bx	lr
 8017d30:	20001810 	.word	0x20001810

08017d34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b08e      	sub	sp, #56	@ 0x38
 8017d38:	af04      	add	r7, sp, #16
 8017d3a:	60f8      	str	r0, [r7, #12]
 8017d3c:	60b9      	str	r1, [r7, #8]
 8017d3e:	607a      	str	r2, [r7, #4]
 8017d40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d10d      	bne.n	8017d64 <xTaskCreateStatic+0x30>
	__asm volatile
 8017d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d4c:	b672      	cpsid	i
 8017d4e:	f383 8811 	msr	BASEPRI, r3
 8017d52:	f3bf 8f6f 	isb	sy
 8017d56:	f3bf 8f4f 	dsb	sy
 8017d5a:	b662      	cpsie	i
 8017d5c:	623b      	str	r3, [r7, #32]
}
 8017d5e:	bf00      	nop
 8017d60:	bf00      	nop
 8017d62:	e7fd      	b.n	8017d60 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8017d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d10d      	bne.n	8017d86 <xTaskCreateStatic+0x52>
	__asm volatile
 8017d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d6e:	b672      	cpsid	i
 8017d70:	f383 8811 	msr	BASEPRI, r3
 8017d74:	f3bf 8f6f 	isb	sy
 8017d78:	f3bf 8f4f 	dsb	sy
 8017d7c:	b662      	cpsie	i
 8017d7e:	61fb      	str	r3, [r7, #28]
}
 8017d80:	bf00      	nop
 8017d82:	bf00      	nop
 8017d84:	e7fd      	b.n	8017d82 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017d86:	2358      	movs	r3, #88	@ 0x58
 8017d88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017d8a:	693b      	ldr	r3, [r7, #16]
 8017d8c:	2b58      	cmp	r3, #88	@ 0x58
 8017d8e:	d00d      	beq.n	8017dac <xTaskCreateStatic+0x78>
	__asm volatile
 8017d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d94:	b672      	cpsid	i
 8017d96:	f383 8811 	msr	BASEPRI, r3
 8017d9a:	f3bf 8f6f 	isb	sy
 8017d9e:	f3bf 8f4f 	dsb	sy
 8017da2:	b662      	cpsie	i
 8017da4:	61bb      	str	r3, [r7, #24]
}
 8017da6:	bf00      	nop
 8017da8:	bf00      	nop
 8017daa:	e7fd      	b.n	8017da8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017dac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d01e      	beq.n	8017df2 <xTaskCreateStatic+0xbe>
 8017db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d01b      	beq.n	8017df2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017dc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dc6:	2202      	movs	r2, #2
 8017dc8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017dcc:	2300      	movs	r3, #0
 8017dce:	9303      	str	r3, [sp, #12]
 8017dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dd2:	9302      	str	r3, [sp, #8]
 8017dd4:	f107 0314 	add.w	r3, r7, #20
 8017dd8:	9301      	str	r3, [sp, #4]
 8017dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ddc:	9300      	str	r3, [sp, #0]
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	687a      	ldr	r2, [r7, #4]
 8017de2:	68b9      	ldr	r1, [r7, #8]
 8017de4:	68f8      	ldr	r0, [r7, #12]
 8017de6:	f000 f850 	bl	8017e8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017dea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017dec:	f000 f8e2 	bl	8017fb4 <prvAddNewTaskToReadyList>
 8017df0:	e001      	b.n	8017df6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8017df2:	2300      	movs	r3, #0
 8017df4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017df6:	697b      	ldr	r3, [r7, #20]
	}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3728      	adds	r7, #40	@ 0x28
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b08c      	sub	sp, #48	@ 0x30
 8017e04:	af04      	add	r7, sp, #16
 8017e06:	60f8      	str	r0, [r7, #12]
 8017e08:	60b9      	str	r1, [r7, #8]
 8017e0a:	603b      	str	r3, [r7, #0]
 8017e0c:	4613      	mov	r3, r2
 8017e0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017e10:	88fb      	ldrh	r3, [r7, #6]
 8017e12:	009b      	lsls	r3, r3, #2
 8017e14:	4618      	mov	r0, r3
 8017e16:	f001 fa57 	bl	80192c8 <pvPortMalloc>
 8017e1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017e1c:	697b      	ldr	r3, [r7, #20]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d00e      	beq.n	8017e40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017e22:	2058      	movs	r0, #88	@ 0x58
 8017e24:	f001 fa50 	bl	80192c8 <pvPortMalloc>
 8017e28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017e2a:	69fb      	ldr	r3, [r7, #28]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d003      	beq.n	8017e38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017e30:	69fb      	ldr	r3, [r7, #28]
 8017e32:	697a      	ldr	r2, [r7, #20]
 8017e34:	631a      	str	r2, [r3, #48]	@ 0x30
 8017e36:	e005      	b.n	8017e44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017e38:	6978      	ldr	r0, [r7, #20]
 8017e3a:	f001 fb17 	bl	801946c <vPortFree>
 8017e3e:	e001      	b.n	8017e44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017e40:	2300      	movs	r3, #0
 8017e42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017e44:	69fb      	ldr	r3, [r7, #28]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d017      	beq.n	8017e7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017e4a:	69fb      	ldr	r3, [r7, #28]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017e52:	88fa      	ldrh	r2, [r7, #6]
 8017e54:	2300      	movs	r3, #0
 8017e56:	9303      	str	r3, [sp, #12]
 8017e58:	69fb      	ldr	r3, [r7, #28]
 8017e5a:	9302      	str	r3, [sp, #8]
 8017e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e5e:	9301      	str	r3, [sp, #4]
 8017e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e62:	9300      	str	r3, [sp, #0]
 8017e64:	683b      	ldr	r3, [r7, #0]
 8017e66:	68b9      	ldr	r1, [r7, #8]
 8017e68:	68f8      	ldr	r0, [r7, #12]
 8017e6a:	f000 f80e 	bl	8017e8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e6e:	69f8      	ldr	r0, [r7, #28]
 8017e70:	f000 f8a0 	bl	8017fb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017e74:	2301      	movs	r3, #1
 8017e76:	61bb      	str	r3, [r7, #24]
 8017e78:	e002      	b.n	8017e80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8017e7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017e80:	69bb      	ldr	r3, [r7, #24]
	}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3720      	adds	r7, #32
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}

08017e8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017e8a:	b580      	push	{r7, lr}
 8017e8c:	b088      	sub	sp, #32
 8017e8e:	af00      	add	r7, sp, #0
 8017e90:	60f8      	str	r0, [r7, #12]
 8017e92:	60b9      	str	r1, [r7, #8]
 8017e94:	607a      	str	r2, [r7, #4]
 8017e96:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	009b      	lsls	r3, r3, #2
 8017ea0:	461a      	mov	r2, r3
 8017ea2:	21a5      	movs	r1, #165	@ 0xa5
 8017ea4:	f002 f848 	bl	8019f38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017eac:	6879      	ldr	r1, [r7, #4]
 8017eae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017eb2:	440b      	add	r3, r1
 8017eb4:	009b      	lsls	r3, r3, #2
 8017eb6:	4413      	add	r3, r2
 8017eb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017eba:	69bb      	ldr	r3, [r7, #24]
 8017ebc:	f023 0307 	bic.w	r3, r3, #7
 8017ec0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017ec2:	69bb      	ldr	r3, [r7, #24]
 8017ec4:	f003 0307 	and.w	r3, r3, #7
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d00d      	beq.n	8017ee8 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8017ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ed0:	b672      	cpsid	i
 8017ed2:	f383 8811 	msr	BASEPRI, r3
 8017ed6:	f3bf 8f6f 	isb	sy
 8017eda:	f3bf 8f4f 	dsb	sy
 8017ede:	b662      	cpsie	i
 8017ee0:	617b      	str	r3, [r7, #20]
}
 8017ee2:	bf00      	nop
 8017ee4:	bf00      	nop
 8017ee6:	e7fd      	b.n	8017ee4 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d01f      	beq.n	8017f2e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017eee:	2300      	movs	r3, #0
 8017ef0:	61fb      	str	r3, [r7, #28]
 8017ef2:	e012      	b.n	8017f1a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017ef4:	68ba      	ldr	r2, [r7, #8]
 8017ef6:	69fb      	ldr	r3, [r7, #28]
 8017ef8:	4413      	add	r3, r2
 8017efa:	7819      	ldrb	r1, [r3, #0]
 8017efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	4413      	add	r3, r2
 8017f02:	3334      	adds	r3, #52	@ 0x34
 8017f04:	460a      	mov	r2, r1
 8017f06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017f08:	68ba      	ldr	r2, [r7, #8]
 8017f0a:	69fb      	ldr	r3, [r7, #28]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	781b      	ldrb	r3, [r3, #0]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d006      	beq.n	8017f22 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017f14:	69fb      	ldr	r3, [r7, #28]
 8017f16:	3301      	adds	r3, #1
 8017f18:	61fb      	str	r3, [r7, #28]
 8017f1a:	69fb      	ldr	r3, [r7, #28]
 8017f1c:	2b0f      	cmp	r3, #15
 8017f1e:	d9e9      	bls.n	8017ef4 <prvInitialiseNewTask+0x6a>
 8017f20:	e000      	b.n	8017f24 <prvInitialiseNewTask+0x9a>
			{
				break;
 8017f22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f26:	2200      	movs	r2, #0
 8017f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017f2c:	e003      	b.n	8017f36 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f30:	2200      	movs	r2, #0
 8017f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f38:	2b06      	cmp	r3, #6
 8017f3a:	d901      	bls.n	8017f40 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017f3c:	2306      	movs	r3, #6
 8017f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f44:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f4a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f4e:	2200      	movs	r2, #0
 8017f50:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f54:	3304      	adds	r3, #4
 8017f56:	4618      	mov	r0, r3
 8017f58:	f7fe fe04 	bl	8016b64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f5e:	3318      	adds	r3, #24
 8017f60:	4618      	mov	r0, r3
 8017f62:	f7fe fdff 	bl	8016b64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f6e:	f1c3 0207 	rsb	r2, r3, #7
 8017f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f7a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f7e:	2200      	movs	r2, #0
 8017f80:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f84:	2200      	movs	r2, #0
 8017f86:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017f90:	683a      	ldr	r2, [r7, #0]
 8017f92:	68f9      	ldr	r1, [r7, #12]
 8017f94:	69b8      	ldr	r0, [r7, #24]
 8017f96:	f000 ff5b 	bl	8018e50 <pxPortInitialiseStack>
 8017f9a:	4602      	mov	r2, r0
 8017f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d002      	beq.n	8017fac <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017faa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017fac:	bf00      	nop
 8017fae:	3720      	adds	r7, #32
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}

08017fb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b082      	sub	sp, #8
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017fbc:	f001 f856 	bl	801906c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017fc0:	4b2a      	ldr	r3, [pc, #168]	@ (801806c <prvAddNewTaskToReadyList+0xb8>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	3301      	adds	r3, #1
 8017fc6:	4a29      	ldr	r2, [pc, #164]	@ (801806c <prvAddNewTaskToReadyList+0xb8>)
 8017fc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017fca:	4b29      	ldr	r3, [pc, #164]	@ (8018070 <prvAddNewTaskToReadyList+0xbc>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d109      	bne.n	8017fe6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017fd2:	4a27      	ldr	r2, [pc, #156]	@ (8018070 <prvAddNewTaskToReadyList+0xbc>)
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017fd8:	4b24      	ldr	r3, [pc, #144]	@ (801806c <prvAddNewTaskToReadyList+0xb8>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2b01      	cmp	r3, #1
 8017fde:	d110      	bne.n	8018002 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017fe0:	f000 fc32 	bl	8018848 <prvInitialiseTaskLists>
 8017fe4:	e00d      	b.n	8018002 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017fe6:	4b23      	ldr	r3, [pc, #140]	@ (8018074 <prvAddNewTaskToReadyList+0xc0>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d109      	bne.n	8018002 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017fee:	4b20      	ldr	r3, [pc, #128]	@ (8018070 <prvAddNewTaskToReadyList+0xbc>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d802      	bhi.n	8018002 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8018070 <prvAddNewTaskToReadyList+0xbc>)
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018002:	4b1d      	ldr	r3, [pc, #116]	@ (8018078 <prvAddNewTaskToReadyList+0xc4>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	3301      	adds	r3, #1
 8018008:	4a1b      	ldr	r2, [pc, #108]	@ (8018078 <prvAddNewTaskToReadyList+0xc4>)
 801800a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018010:	2201      	movs	r2, #1
 8018012:	409a      	lsls	r2, r3
 8018014:	4b19      	ldr	r3, [pc, #100]	@ (801807c <prvAddNewTaskToReadyList+0xc8>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	4313      	orrs	r3, r2
 801801a:	4a18      	ldr	r2, [pc, #96]	@ (801807c <prvAddNewTaskToReadyList+0xc8>)
 801801c:	6013      	str	r3, [r2, #0]
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018022:	4613      	mov	r3, r2
 8018024:	009b      	lsls	r3, r3, #2
 8018026:	4413      	add	r3, r2
 8018028:	009b      	lsls	r3, r3, #2
 801802a:	4a15      	ldr	r2, [pc, #84]	@ (8018080 <prvAddNewTaskToReadyList+0xcc>)
 801802c:	441a      	add	r2, r3
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	3304      	adds	r3, #4
 8018032:	4619      	mov	r1, r3
 8018034:	4610      	mov	r0, r2
 8018036:	f7fe fda2 	bl	8016b7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801803a:	f001 f84d 	bl	80190d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801803e:	4b0d      	ldr	r3, [pc, #52]	@ (8018074 <prvAddNewTaskToReadyList+0xc0>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d00e      	beq.n	8018064 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018046:	4b0a      	ldr	r3, [pc, #40]	@ (8018070 <prvAddNewTaskToReadyList+0xbc>)
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018050:	429a      	cmp	r2, r3
 8018052:	d207      	bcs.n	8018064 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018054:	4b0b      	ldr	r3, [pc, #44]	@ (8018084 <prvAddNewTaskToReadyList+0xd0>)
 8018056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801805a:	601a      	str	r2, [r3, #0]
 801805c:	f3bf 8f4f 	dsb	sy
 8018060:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018064:	bf00      	nop
 8018066:	3708      	adds	r7, #8
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}
 801806c:	20001950 	.word	0x20001950
 8018070:	20001850 	.word	0x20001850
 8018074:	2000195c 	.word	0x2000195c
 8018078:	2000196c 	.word	0x2000196c
 801807c:	20001958 	.word	0x20001958
 8018080:	20001854 	.word	0x20001854
 8018084:	e000ed04 	.word	0xe000ed04

08018088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018088:	b580      	push	{r7, lr}
 801808a:	b084      	sub	sp, #16
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018090:	2300      	movs	r3, #0
 8018092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d01a      	beq.n	80180d0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801809a:	4b15      	ldr	r3, [pc, #84]	@ (80180f0 <vTaskDelay+0x68>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d00d      	beq.n	80180be <vTaskDelay+0x36>
	__asm volatile
 80180a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180a6:	b672      	cpsid	i
 80180a8:	f383 8811 	msr	BASEPRI, r3
 80180ac:	f3bf 8f6f 	isb	sy
 80180b0:	f3bf 8f4f 	dsb	sy
 80180b4:	b662      	cpsie	i
 80180b6:	60bb      	str	r3, [r7, #8]
}
 80180b8:	bf00      	nop
 80180ba:	bf00      	nop
 80180bc:	e7fd      	b.n	80180ba <vTaskDelay+0x32>
			vTaskSuspendAll();
 80180be:	f000 f881 	bl	80181c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80180c2:	2100      	movs	r1, #0
 80180c4:	6878      	ldr	r0, [r7, #4]
 80180c6:	f000 fe5d 	bl	8018d84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80180ca:	f000 f889 	bl	80181e0 <xTaskResumeAll>
 80180ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d107      	bne.n	80180e6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80180d6:	4b07      	ldr	r3, [pc, #28]	@ (80180f4 <vTaskDelay+0x6c>)
 80180d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80180dc:	601a      	str	r2, [r3, #0]
 80180de:	f3bf 8f4f 	dsb	sy
 80180e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80180e6:	bf00      	nop
 80180e8:	3710      	adds	r7, #16
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	20001978 	.word	0x20001978
 80180f4:	e000ed04 	.word	0xe000ed04

080180f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b08a      	sub	sp, #40	@ 0x28
 80180fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80180fe:	2300      	movs	r3, #0
 8018100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018102:	2300      	movs	r3, #0
 8018104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018106:	463a      	mov	r2, r7
 8018108:	1d39      	adds	r1, r7, #4
 801810a:	f107 0308 	add.w	r3, r7, #8
 801810e:	4618      	mov	r0, r3
 8018110:	f7e9 f992 	bl	8001438 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018114:	6839      	ldr	r1, [r7, #0]
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	68ba      	ldr	r2, [r7, #8]
 801811a:	9202      	str	r2, [sp, #8]
 801811c:	9301      	str	r3, [sp, #4]
 801811e:	2300      	movs	r3, #0
 8018120:	9300      	str	r3, [sp, #0]
 8018122:	2300      	movs	r3, #0
 8018124:	460a      	mov	r2, r1
 8018126:	4921      	ldr	r1, [pc, #132]	@ (80181ac <vTaskStartScheduler+0xb4>)
 8018128:	4821      	ldr	r0, [pc, #132]	@ (80181b0 <vTaskStartScheduler+0xb8>)
 801812a:	f7ff fe03 	bl	8017d34 <xTaskCreateStatic>
 801812e:	4603      	mov	r3, r0
 8018130:	4a20      	ldr	r2, [pc, #128]	@ (80181b4 <vTaskStartScheduler+0xbc>)
 8018132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018134:	4b1f      	ldr	r3, [pc, #124]	@ (80181b4 <vTaskStartScheduler+0xbc>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d002      	beq.n	8018142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801813c:	2301      	movs	r3, #1
 801813e:	617b      	str	r3, [r7, #20]
 8018140:	e001      	b.n	8018146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018142:	2300      	movs	r3, #0
 8018144:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018146:	697b      	ldr	r3, [r7, #20]
 8018148:	2b01      	cmp	r3, #1
 801814a:	d118      	bne.n	801817e <vTaskStartScheduler+0x86>
	__asm volatile
 801814c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018150:	b672      	cpsid	i
 8018152:	f383 8811 	msr	BASEPRI, r3
 8018156:	f3bf 8f6f 	isb	sy
 801815a:	f3bf 8f4f 	dsb	sy
 801815e:	b662      	cpsie	i
 8018160:	613b      	str	r3, [r7, #16]
}
 8018162:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018164:	4b14      	ldr	r3, [pc, #80]	@ (80181b8 <vTaskStartScheduler+0xc0>)
 8018166:	f04f 32ff 	mov.w	r2, #4294967295
 801816a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801816c:	4b13      	ldr	r3, [pc, #76]	@ (80181bc <vTaskStartScheduler+0xc4>)
 801816e:	2201      	movs	r2, #1
 8018170:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018172:	4b13      	ldr	r3, [pc, #76]	@ (80181c0 <vTaskStartScheduler+0xc8>)
 8018174:	2200      	movs	r2, #0
 8018176:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018178:	f000 fefa 	bl	8018f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801817c:	e011      	b.n	80181a2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801817e:	697b      	ldr	r3, [r7, #20]
 8018180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018184:	d10d      	bne.n	80181a2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8018186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801818a:	b672      	cpsid	i
 801818c:	f383 8811 	msr	BASEPRI, r3
 8018190:	f3bf 8f6f 	isb	sy
 8018194:	f3bf 8f4f 	dsb	sy
 8018198:	b662      	cpsie	i
 801819a:	60fb      	str	r3, [r7, #12]
}
 801819c:	bf00      	nop
 801819e:	bf00      	nop
 80181a0:	e7fd      	b.n	801819e <vTaskStartScheduler+0xa6>
}
 80181a2:	bf00      	nop
 80181a4:	3718      	adds	r7, #24
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	bf00      	nop
 80181ac:	0801c5b0 	.word	0x0801c5b0
 80181b0:	08018815 	.word	0x08018815
 80181b4:	20001974 	.word	0x20001974
 80181b8:	20001970 	.word	0x20001970
 80181bc:	2000195c 	.word	0x2000195c
 80181c0:	20001954 	.word	0x20001954

080181c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80181c4:	b480      	push	{r7}
 80181c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80181c8:	4b04      	ldr	r3, [pc, #16]	@ (80181dc <vTaskSuspendAll+0x18>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	3301      	adds	r3, #1
 80181ce:	4a03      	ldr	r2, [pc, #12]	@ (80181dc <vTaskSuspendAll+0x18>)
 80181d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80181d2:	bf00      	nop
 80181d4:	46bd      	mov	sp, r7
 80181d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181da:	4770      	bx	lr
 80181dc:	20001978 	.word	0x20001978

080181e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b084      	sub	sp, #16
 80181e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80181e6:	2300      	movs	r3, #0
 80181e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80181ea:	2300      	movs	r3, #0
 80181ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80181ee:	4b43      	ldr	r3, [pc, #268]	@ (80182fc <xTaskResumeAll+0x11c>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d10d      	bne.n	8018212 <xTaskResumeAll+0x32>
	__asm volatile
 80181f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181fa:	b672      	cpsid	i
 80181fc:	f383 8811 	msr	BASEPRI, r3
 8018200:	f3bf 8f6f 	isb	sy
 8018204:	f3bf 8f4f 	dsb	sy
 8018208:	b662      	cpsie	i
 801820a:	603b      	str	r3, [r7, #0]
}
 801820c:	bf00      	nop
 801820e:	bf00      	nop
 8018210:	e7fd      	b.n	801820e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018212:	f000 ff2b 	bl	801906c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018216:	4b39      	ldr	r3, [pc, #228]	@ (80182fc <xTaskResumeAll+0x11c>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	3b01      	subs	r3, #1
 801821c:	4a37      	ldr	r2, [pc, #220]	@ (80182fc <xTaskResumeAll+0x11c>)
 801821e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018220:	4b36      	ldr	r3, [pc, #216]	@ (80182fc <xTaskResumeAll+0x11c>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d161      	bne.n	80182ec <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018228:	4b35      	ldr	r3, [pc, #212]	@ (8018300 <xTaskResumeAll+0x120>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d05d      	beq.n	80182ec <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018230:	e02e      	b.n	8018290 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018232:	4b34      	ldr	r3, [pc, #208]	@ (8018304 <xTaskResumeAll+0x124>)
 8018234:	68db      	ldr	r3, [r3, #12]
 8018236:	68db      	ldr	r3, [r3, #12]
 8018238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	3318      	adds	r3, #24
 801823e:	4618      	mov	r0, r3
 8018240:	f7fe fcfa 	bl	8016c38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	3304      	adds	r3, #4
 8018248:	4618      	mov	r0, r3
 801824a:	f7fe fcf5 	bl	8016c38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018252:	2201      	movs	r2, #1
 8018254:	409a      	lsls	r2, r3
 8018256:	4b2c      	ldr	r3, [pc, #176]	@ (8018308 <xTaskResumeAll+0x128>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	4313      	orrs	r3, r2
 801825c:	4a2a      	ldr	r2, [pc, #168]	@ (8018308 <xTaskResumeAll+0x128>)
 801825e:	6013      	str	r3, [r2, #0]
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018264:	4613      	mov	r3, r2
 8018266:	009b      	lsls	r3, r3, #2
 8018268:	4413      	add	r3, r2
 801826a:	009b      	lsls	r3, r3, #2
 801826c:	4a27      	ldr	r2, [pc, #156]	@ (801830c <xTaskResumeAll+0x12c>)
 801826e:	441a      	add	r2, r3
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	3304      	adds	r3, #4
 8018274:	4619      	mov	r1, r3
 8018276:	4610      	mov	r0, r2
 8018278:	f7fe fc81 	bl	8016b7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018280:	4b23      	ldr	r3, [pc, #140]	@ (8018310 <xTaskResumeAll+0x130>)
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018286:	429a      	cmp	r2, r3
 8018288:	d302      	bcc.n	8018290 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801828a:	4b22      	ldr	r3, [pc, #136]	@ (8018314 <xTaskResumeAll+0x134>)
 801828c:	2201      	movs	r2, #1
 801828e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018290:	4b1c      	ldr	r3, [pc, #112]	@ (8018304 <xTaskResumeAll+0x124>)
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d1cc      	bne.n	8018232 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d001      	beq.n	80182a2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801829e:	f000 fb73 	bl	8018988 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80182a2:	4b1d      	ldr	r3, [pc, #116]	@ (8018318 <xTaskResumeAll+0x138>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d010      	beq.n	80182d0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80182ae:	f000 f859 	bl	8018364 <xTaskIncrementTick>
 80182b2:	4603      	mov	r3, r0
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d002      	beq.n	80182be <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80182b8:	4b16      	ldr	r3, [pc, #88]	@ (8018314 <xTaskResumeAll+0x134>)
 80182ba:	2201      	movs	r2, #1
 80182bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	3b01      	subs	r3, #1
 80182c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d1f1      	bne.n	80182ae <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80182ca:	4b13      	ldr	r3, [pc, #76]	@ (8018318 <xTaskResumeAll+0x138>)
 80182cc:	2200      	movs	r2, #0
 80182ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80182d0:	4b10      	ldr	r3, [pc, #64]	@ (8018314 <xTaskResumeAll+0x134>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d009      	beq.n	80182ec <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80182d8:	2301      	movs	r3, #1
 80182da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80182dc:	4b0f      	ldr	r3, [pc, #60]	@ (801831c <xTaskResumeAll+0x13c>)
 80182de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80182e2:	601a      	str	r2, [r3, #0]
 80182e4:	f3bf 8f4f 	dsb	sy
 80182e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80182ec:	f000 fef4 	bl	80190d8 <vPortExitCritical>

	return xAlreadyYielded;
 80182f0:	68bb      	ldr	r3, [r7, #8]
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3710      	adds	r7, #16
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}
 80182fa:	bf00      	nop
 80182fc:	20001978 	.word	0x20001978
 8018300:	20001950 	.word	0x20001950
 8018304:	20001910 	.word	0x20001910
 8018308:	20001958 	.word	0x20001958
 801830c:	20001854 	.word	0x20001854
 8018310:	20001850 	.word	0x20001850
 8018314:	20001964 	.word	0x20001964
 8018318:	20001960 	.word	0x20001960
 801831c:	e000ed04 	.word	0xe000ed04

08018320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018320:	b480      	push	{r7}
 8018322:	b083      	sub	sp, #12
 8018324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018326:	4b05      	ldr	r3, [pc, #20]	@ (801833c <xTaskGetTickCount+0x1c>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801832c:	687b      	ldr	r3, [r7, #4]
}
 801832e:	4618      	mov	r0, r3
 8018330:	370c      	adds	r7, #12
 8018332:	46bd      	mov	sp, r7
 8018334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018338:	4770      	bx	lr
 801833a:	bf00      	nop
 801833c:	20001954 	.word	0x20001954

08018340 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b082      	sub	sp, #8
 8018344:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018346:	f000 ff79 	bl	801923c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801834a:	2300      	movs	r3, #0
 801834c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801834e:	4b04      	ldr	r3, [pc, #16]	@ (8018360 <xTaskGetTickCountFromISR+0x20>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018354:	683b      	ldr	r3, [r7, #0]
}
 8018356:	4618      	mov	r0, r3
 8018358:	3708      	adds	r7, #8
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	20001954 	.word	0x20001954

08018364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b086      	sub	sp, #24
 8018368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801836a:	2300      	movs	r3, #0
 801836c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801836e:	4b50      	ldr	r3, [pc, #320]	@ (80184b0 <xTaskIncrementTick+0x14c>)
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	2b00      	cmp	r3, #0
 8018374:	f040 808b 	bne.w	801848e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018378:	4b4e      	ldr	r3, [pc, #312]	@ (80184b4 <xTaskIncrementTick+0x150>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	3301      	adds	r3, #1
 801837e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018380:	4a4c      	ldr	r2, [pc, #304]	@ (80184b4 <xTaskIncrementTick+0x150>)
 8018382:	693b      	ldr	r3, [r7, #16]
 8018384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018386:	693b      	ldr	r3, [r7, #16]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d123      	bne.n	80183d4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 801838c:	4b4a      	ldr	r3, [pc, #296]	@ (80184b8 <xTaskIncrementTick+0x154>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d00d      	beq.n	80183b2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8018396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801839a:	b672      	cpsid	i
 801839c:	f383 8811 	msr	BASEPRI, r3
 80183a0:	f3bf 8f6f 	isb	sy
 80183a4:	f3bf 8f4f 	dsb	sy
 80183a8:	b662      	cpsie	i
 80183aa:	603b      	str	r3, [r7, #0]
}
 80183ac:	bf00      	nop
 80183ae:	bf00      	nop
 80183b0:	e7fd      	b.n	80183ae <xTaskIncrementTick+0x4a>
 80183b2:	4b41      	ldr	r3, [pc, #260]	@ (80184b8 <xTaskIncrementTick+0x154>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	60fb      	str	r3, [r7, #12]
 80183b8:	4b40      	ldr	r3, [pc, #256]	@ (80184bc <xTaskIncrementTick+0x158>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	4a3e      	ldr	r2, [pc, #248]	@ (80184b8 <xTaskIncrementTick+0x154>)
 80183be:	6013      	str	r3, [r2, #0]
 80183c0:	4a3e      	ldr	r2, [pc, #248]	@ (80184bc <xTaskIncrementTick+0x158>)
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	6013      	str	r3, [r2, #0]
 80183c6:	4b3e      	ldr	r3, [pc, #248]	@ (80184c0 <xTaskIncrementTick+0x15c>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	3301      	adds	r3, #1
 80183cc:	4a3c      	ldr	r2, [pc, #240]	@ (80184c0 <xTaskIncrementTick+0x15c>)
 80183ce:	6013      	str	r3, [r2, #0]
 80183d0:	f000 fada 	bl	8018988 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80183d4:	4b3b      	ldr	r3, [pc, #236]	@ (80184c4 <xTaskIncrementTick+0x160>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	693a      	ldr	r2, [r7, #16]
 80183da:	429a      	cmp	r2, r3
 80183dc:	d348      	bcc.n	8018470 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80183de:	4b36      	ldr	r3, [pc, #216]	@ (80184b8 <xTaskIncrementTick+0x154>)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d104      	bne.n	80183f2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80183e8:	4b36      	ldr	r3, [pc, #216]	@ (80184c4 <xTaskIncrementTick+0x160>)
 80183ea:	f04f 32ff 	mov.w	r2, #4294967295
 80183ee:	601a      	str	r2, [r3, #0]
					break;
 80183f0:	e03e      	b.n	8018470 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183f2:	4b31      	ldr	r3, [pc, #196]	@ (80184b8 <xTaskIncrementTick+0x154>)
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	68db      	ldr	r3, [r3, #12]
 80183f8:	68db      	ldr	r3, [r3, #12]
 80183fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80183fc:	68bb      	ldr	r3, [r7, #8]
 80183fe:	685b      	ldr	r3, [r3, #4]
 8018400:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018402:	693a      	ldr	r2, [r7, #16]
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	429a      	cmp	r2, r3
 8018408:	d203      	bcs.n	8018412 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801840a:	4a2e      	ldr	r2, [pc, #184]	@ (80184c4 <xTaskIncrementTick+0x160>)
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018410:	e02e      	b.n	8018470 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018412:	68bb      	ldr	r3, [r7, #8]
 8018414:	3304      	adds	r3, #4
 8018416:	4618      	mov	r0, r3
 8018418:	f7fe fc0e 	bl	8016c38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018420:	2b00      	cmp	r3, #0
 8018422:	d004      	beq.n	801842e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018424:	68bb      	ldr	r3, [r7, #8]
 8018426:	3318      	adds	r3, #24
 8018428:	4618      	mov	r0, r3
 801842a:	f7fe fc05 	bl	8016c38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018432:	2201      	movs	r2, #1
 8018434:	409a      	lsls	r2, r3
 8018436:	4b24      	ldr	r3, [pc, #144]	@ (80184c8 <xTaskIncrementTick+0x164>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	4313      	orrs	r3, r2
 801843c:	4a22      	ldr	r2, [pc, #136]	@ (80184c8 <xTaskIncrementTick+0x164>)
 801843e:	6013      	str	r3, [r2, #0]
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018444:	4613      	mov	r3, r2
 8018446:	009b      	lsls	r3, r3, #2
 8018448:	4413      	add	r3, r2
 801844a:	009b      	lsls	r3, r3, #2
 801844c:	4a1f      	ldr	r2, [pc, #124]	@ (80184cc <xTaskIncrementTick+0x168>)
 801844e:	441a      	add	r2, r3
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	3304      	adds	r3, #4
 8018454:	4619      	mov	r1, r3
 8018456:	4610      	mov	r0, r2
 8018458:	f7fe fb91 	bl	8016b7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018460:	4b1b      	ldr	r3, [pc, #108]	@ (80184d0 <xTaskIncrementTick+0x16c>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018466:	429a      	cmp	r2, r3
 8018468:	d3b9      	bcc.n	80183de <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801846a:	2301      	movs	r3, #1
 801846c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801846e:	e7b6      	b.n	80183de <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018470:	4b17      	ldr	r3, [pc, #92]	@ (80184d0 <xTaskIncrementTick+0x16c>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018476:	4915      	ldr	r1, [pc, #84]	@ (80184cc <xTaskIncrementTick+0x168>)
 8018478:	4613      	mov	r3, r2
 801847a:	009b      	lsls	r3, r3, #2
 801847c:	4413      	add	r3, r2
 801847e:	009b      	lsls	r3, r3, #2
 8018480:	440b      	add	r3, r1
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	2b01      	cmp	r3, #1
 8018486:	d907      	bls.n	8018498 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8018488:	2301      	movs	r3, #1
 801848a:	617b      	str	r3, [r7, #20]
 801848c:	e004      	b.n	8018498 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801848e:	4b11      	ldr	r3, [pc, #68]	@ (80184d4 <xTaskIncrementTick+0x170>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	3301      	adds	r3, #1
 8018494:	4a0f      	ldr	r2, [pc, #60]	@ (80184d4 <xTaskIncrementTick+0x170>)
 8018496:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8018498:	4b0f      	ldr	r3, [pc, #60]	@ (80184d8 <xTaskIncrementTick+0x174>)
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d001      	beq.n	80184a4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80184a0:	2301      	movs	r3, #1
 80184a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80184a4:	697b      	ldr	r3, [r7, #20]
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3718      	adds	r7, #24
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
 80184ae:	bf00      	nop
 80184b0:	20001978 	.word	0x20001978
 80184b4:	20001954 	.word	0x20001954
 80184b8:	20001908 	.word	0x20001908
 80184bc:	2000190c 	.word	0x2000190c
 80184c0:	20001968 	.word	0x20001968
 80184c4:	20001970 	.word	0x20001970
 80184c8:	20001958 	.word	0x20001958
 80184cc:	20001854 	.word	0x20001854
 80184d0:	20001850 	.word	0x20001850
 80184d4:	20001960 	.word	0x20001960
 80184d8:	20001964 	.word	0x20001964

080184dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b088      	sub	sp, #32
 80184e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80184e2:	4b3b      	ldr	r3, [pc, #236]	@ (80185d0 <vTaskSwitchContext+0xf4>)
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d003      	beq.n	80184f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80184ea:	4b3a      	ldr	r3, [pc, #232]	@ (80185d4 <vTaskSwitchContext+0xf8>)
 80184ec:	2201      	movs	r2, #1
 80184ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80184f0:	e069      	b.n	80185c6 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80184f2:	4b38      	ldr	r3, [pc, #224]	@ (80185d4 <vTaskSwitchContext+0xf8>)
 80184f4:	2200      	movs	r2, #0
 80184f6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80184f8:	4b37      	ldr	r3, [pc, #220]	@ (80185d8 <vTaskSwitchContext+0xfc>)
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80184fe:	61fb      	str	r3, [r7, #28]
 8018500:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8018504:	61bb      	str	r3, [r7, #24]
 8018506:	69fb      	ldr	r3, [r7, #28]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	69ba      	ldr	r2, [r7, #24]
 801850c:	429a      	cmp	r2, r3
 801850e:	d111      	bne.n	8018534 <vTaskSwitchContext+0x58>
 8018510:	69fb      	ldr	r3, [r7, #28]
 8018512:	3304      	adds	r3, #4
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	69ba      	ldr	r2, [r7, #24]
 8018518:	429a      	cmp	r2, r3
 801851a:	d10b      	bne.n	8018534 <vTaskSwitchContext+0x58>
 801851c:	69fb      	ldr	r3, [r7, #28]
 801851e:	3308      	adds	r3, #8
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	69ba      	ldr	r2, [r7, #24]
 8018524:	429a      	cmp	r2, r3
 8018526:	d105      	bne.n	8018534 <vTaskSwitchContext+0x58>
 8018528:	69fb      	ldr	r3, [r7, #28]
 801852a:	330c      	adds	r3, #12
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	69ba      	ldr	r2, [r7, #24]
 8018530:	429a      	cmp	r2, r3
 8018532:	d008      	beq.n	8018546 <vTaskSwitchContext+0x6a>
 8018534:	4b28      	ldr	r3, [pc, #160]	@ (80185d8 <vTaskSwitchContext+0xfc>)
 8018536:	681a      	ldr	r2, [r3, #0]
 8018538:	4b27      	ldr	r3, [pc, #156]	@ (80185d8 <vTaskSwitchContext+0xfc>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	3334      	adds	r3, #52	@ 0x34
 801853e:	4619      	mov	r1, r3
 8018540:	4610      	mov	r0, r2
 8018542:	f7e8 ff67 	bl	8001414 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018546:	4b25      	ldr	r3, [pc, #148]	@ (80185dc <vTaskSwitchContext+0x100>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	fab3 f383 	clz	r3, r3
 8018552:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018554:	7afb      	ldrb	r3, [r7, #11]
 8018556:	f1c3 031f 	rsb	r3, r3, #31
 801855a:	617b      	str	r3, [r7, #20]
 801855c:	4920      	ldr	r1, [pc, #128]	@ (80185e0 <vTaskSwitchContext+0x104>)
 801855e:	697a      	ldr	r2, [r7, #20]
 8018560:	4613      	mov	r3, r2
 8018562:	009b      	lsls	r3, r3, #2
 8018564:	4413      	add	r3, r2
 8018566:	009b      	lsls	r3, r3, #2
 8018568:	440b      	add	r3, r1
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d10d      	bne.n	801858c <vTaskSwitchContext+0xb0>
	__asm volatile
 8018570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018574:	b672      	cpsid	i
 8018576:	f383 8811 	msr	BASEPRI, r3
 801857a:	f3bf 8f6f 	isb	sy
 801857e:	f3bf 8f4f 	dsb	sy
 8018582:	b662      	cpsie	i
 8018584:	607b      	str	r3, [r7, #4]
}
 8018586:	bf00      	nop
 8018588:	bf00      	nop
 801858a:	e7fd      	b.n	8018588 <vTaskSwitchContext+0xac>
 801858c:	697a      	ldr	r2, [r7, #20]
 801858e:	4613      	mov	r3, r2
 8018590:	009b      	lsls	r3, r3, #2
 8018592:	4413      	add	r3, r2
 8018594:	009b      	lsls	r3, r3, #2
 8018596:	4a12      	ldr	r2, [pc, #72]	@ (80185e0 <vTaskSwitchContext+0x104>)
 8018598:	4413      	add	r3, r2
 801859a:	613b      	str	r3, [r7, #16]
 801859c:	693b      	ldr	r3, [r7, #16]
 801859e:	685b      	ldr	r3, [r3, #4]
 80185a0:	685a      	ldr	r2, [r3, #4]
 80185a2:	693b      	ldr	r3, [r7, #16]
 80185a4:	605a      	str	r2, [r3, #4]
 80185a6:	693b      	ldr	r3, [r7, #16]
 80185a8:	685a      	ldr	r2, [r3, #4]
 80185aa:	693b      	ldr	r3, [r7, #16]
 80185ac:	3308      	adds	r3, #8
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d104      	bne.n	80185bc <vTaskSwitchContext+0xe0>
 80185b2:	693b      	ldr	r3, [r7, #16]
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	685a      	ldr	r2, [r3, #4]
 80185b8:	693b      	ldr	r3, [r7, #16]
 80185ba:	605a      	str	r2, [r3, #4]
 80185bc:	693b      	ldr	r3, [r7, #16]
 80185be:	685b      	ldr	r3, [r3, #4]
 80185c0:	68db      	ldr	r3, [r3, #12]
 80185c2:	4a05      	ldr	r2, [pc, #20]	@ (80185d8 <vTaskSwitchContext+0xfc>)
 80185c4:	6013      	str	r3, [r2, #0]
}
 80185c6:	bf00      	nop
 80185c8:	3720      	adds	r7, #32
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}
 80185ce:	bf00      	nop
 80185d0:	20001978 	.word	0x20001978
 80185d4:	20001964 	.word	0x20001964
 80185d8:	20001850 	.word	0x20001850
 80185dc:	20001958 	.word	0x20001958
 80185e0:	20001854 	.word	0x20001854

080185e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b084      	sub	sp, #16
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	6078      	str	r0, [r7, #4]
 80185ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d10d      	bne.n	8018610 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80185f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185f8:	b672      	cpsid	i
 80185fa:	f383 8811 	msr	BASEPRI, r3
 80185fe:	f3bf 8f6f 	isb	sy
 8018602:	f3bf 8f4f 	dsb	sy
 8018606:	b662      	cpsie	i
 8018608:	60fb      	str	r3, [r7, #12]
}
 801860a:	bf00      	nop
 801860c:	bf00      	nop
 801860e:	e7fd      	b.n	801860c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018610:	4b07      	ldr	r3, [pc, #28]	@ (8018630 <vTaskPlaceOnEventList+0x4c>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	3318      	adds	r3, #24
 8018616:	4619      	mov	r1, r3
 8018618:	6878      	ldr	r0, [r7, #4]
 801861a:	f7fe fad4 	bl	8016bc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801861e:	2101      	movs	r1, #1
 8018620:	6838      	ldr	r0, [r7, #0]
 8018622:	f000 fbaf 	bl	8018d84 <prvAddCurrentTaskToDelayedList>
}
 8018626:	bf00      	nop
 8018628:	3710      	adds	r7, #16
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
 801862e:	bf00      	nop
 8018630:	20001850 	.word	0x20001850

08018634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b086      	sub	sp, #24
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	68db      	ldr	r3, [r3, #12]
 8018640:	68db      	ldr	r3, [r3, #12]
 8018642:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018644:	693b      	ldr	r3, [r7, #16]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d10d      	bne.n	8018666 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801864a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801864e:	b672      	cpsid	i
 8018650:	f383 8811 	msr	BASEPRI, r3
 8018654:	f3bf 8f6f 	isb	sy
 8018658:	f3bf 8f4f 	dsb	sy
 801865c:	b662      	cpsie	i
 801865e:	60fb      	str	r3, [r7, #12]
}
 8018660:	bf00      	nop
 8018662:	bf00      	nop
 8018664:	e7fd      	b.n	8018662 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	3318      	adds	r3, #24
 801866a:	4618      	mov	r0, r3
 801866c:	f7fe fae4 	bl	8016c38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018670:	4b1d      	ldr	r3, [pc, #116]	@ (80186e8 <xTaskRemoveFromEventList+0xb4>)
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d11c      	bne.n	80186b2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018678:	693b      	ldr	r3, [r7, #16]
 801867a:	3304      	adds	r3, #4
 801867c:	4618      	mov	r0, r3
 801867e:	f7fe fadb 	bl	8016c38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018682:	693b      	ldr	r3, [r7, #16]
 8018684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018686:	2201      	movs	r2, #1
 8018688:	409a      	lsls	r2, r3
 801868a:	4b18      	ldr	r3, [pc, #96]	@ (80186ec <xTaskRemoveFromEventList+0xb8>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	4313      	orrs	r3, r2
 8018690:	4a16      	ldr	r2, [pc, #88]	@ (80186ec <xTaskRemoveFromEventList+0xb8>)
 8018692:	6013      	str	r3, [r2, #0]
 8018694:	693b      	ldr	r3, [r7, #16]
 8018696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018698:	4613      	mov	r3, r2
 801869a:	009b      	lsls	r3, r3, #2
 801869c:	4413      	add	r3, r2
 801869e:	009b      	lsls	r3, r3, #2
 80186a0:	4a13      	ldr	r2, [pc, #76]	@ (80186f0 <xTaskRemoveFromEventList+0xbc>)
 80186a2:	441a      	add	r2, r3
 80186a4:	693b      	ldr	r3, [r7, #16]
 80186a6:	3304      	adds	r3, #4
 80186a8:	4619      	mov	r1, r3
 80186aa:	4610      	mov	r0, r2
 80186ac:	f7fe fa67 	bl	8016b7e <vListInsertEnd>
 80186b0:	e005      	b.n	80186be <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80186b2:	693b      	ldr	r3, [r7, #16]
 80186b4:	3318      	adds	r3, #24
 80186b6:	4619      	mov	r1, r3
 80186b8:	480e      	ldr	r0, [pc, #56]	@ (80186f4 <xTaskRemoveFromEventList+0xc0>)
 80186ba:	f7fe fa60 	bl	8016b7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80186be:	693b      	ldr	r3, [r7, #16]
 80186c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186c2:	4b0d      	ldr	r3, [pc, #52]	@ (80186f8 <xTaskRemoveFromEventList+0xc4>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186c8:	429a      	cmp	r2, r3
 80186ca:	d905      	bls.n	80186d8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80186cc:	2301      	movs	r3, #1
 80186ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80186d0:	4b0a      	ldr	r3, [pc, #40]	@ (80186fc <xTaskRemoveFromEventList+0xc8>)
 80186d2:	2201      	movs	r2, #1
 80186d4:	601a      	str	r2, [r3, #0]
 80186d6:	e001      	b.n	80186dc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80186d8:	2300      	movs	r3, #0
 80186da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80186dc:	697b      	ldr	r3, [r7, #20]
}
 80186de:	4618      	mov	r0, r3
 80186e0:	3718      	adds	r7, #24
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}
 80186e6:	bf00      	nop
 80186e8:	20001978 	.word	0x20001978
 80186ec:	20001958 	.word	0x20001958
 80186f0:	20001854 	.word	0x20001854
 80186f4:	20001910 	.word	0x20001910
 80186f8:	20001850 	.word	0x20001850
 80186fc:	20001964 	.word	0x20001964

08018700 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018700:	b480      	push	{r7}
 8018702:	b083      	sub	sp, #12
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018708:	4b06      	ldr	r3, [pc, #24]	@ (8018724 <vTaskInternalSetTimeOutState+0x24>)
 801870a:	681a      	ldr	r2, [r3, #0]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018710:	4b05      	ldr	r3, [pc, #20]	@ (8018728 <vTaskInternalSetTimeOutState+0x28>)
 8018712:	681a      	ldr	r2, [r3, #0]
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	605a      	str	r2, [r3, #4]
}
 8018718:	bf00      	nop
 801871a:	370c      	adds	r7, #12
 801871c:	46bd      	mov	sp, r7
 801871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018722:	4770      	bx	lr
 8018724:	20001968 	.word	0x20001968
 8018728:	20001954 	.word	0x20001954

0801872c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801872c:	b580      	push	{r7, lr}
 801872e:	b088      	sub	sp, #32
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
 8018734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d10d      	bne.n	8018758 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 801873c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018740:	b672      	cpsid	i
 8018742:	f383 8811 	msr	BASEPRI, r3
 8018746:	f3bf 8f6f 	isb	sy
 801874a:	f3bf 8f4f 	dsb	sy
 801874e:	b662      	cpsie	i
 8018750:	613b      	str	r3, [r7, #16]
}
 8018752:	bf00      	nop
 8018754:	bf00      	nop
 8018756:	e7fd      	b.n	8018754 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d10d      	bne.n	801877a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018762:	b672      	cpsid	i
 8018764:	f383 8811 	msr	BASEPRI, r3
 8018768:	f3bf 8f6f 	isb	sy
 801876c:	f3bf 8f4f 	dsb	sy
 8018770:	b662      	cpsie	i
 8018772:	60fb      	str	r3, [r7, #12]
}
 8018774:	bf00      	nop
 8018776:	bf00      	nop
 8018778:	e7fd      	b.n	8018776 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801877a:	f000 fc77 	bl	801906c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801877e:	4b1d      	ldr	r3, [pc, #116]	@ (80187f4 <xTaskCheckForTimeOut+0xc8>)
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	69ba      	ldr	r2, [r7, #24]
 801878a:	1ad3      	subs	r3, r2, r3
 801878c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801878e:	683b      	ldr	r3, [r7, #0]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018796:	d102      	bne.n	801879e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018798:	2300      	movs	r3, #0
 801879a:	61fb      	str	r3, [r7, #28]
 801879c:	e023      	b.n	80187e6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	681a      	ldr	r2, [r3, #0]
 80187a2:	4b15      	ldr	r3, [pc, #84]	@ (80187f8 <xTaskCheckForTimeOut+0xcc>)
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	429a      	cmp	r2, r3
 80187a8:	d007      	beq.n	80187ba <xTaskCheckForTimeOut+0x8e>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	685b      	ldr	r3, [r3, #4]
 80187ae:	69ba      	ldr	r2, [r7, #24]
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d302      	bcc.n	80187ba <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80187b4:	2301      	movs	r3, #1
 80187b6:	61fb      	str	r3, [r7, #28]
 80187b8:	e015      	b.n	80187e6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	697a      	ldr	r2, [r7, #20]
 80187c0:	429a      	cmp	r2, r3
 80187c2:	d20b      	bcs.n	80187dc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	681a      	ldr	r2, [r3, #0]
 80187c8:	697b      	ldr	r3, [r7, #20]
 80187ca:	1ad2      	subs	r2, r2, r3
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	f7ff ff95 	bl	8018700 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80187d6:	2300      	movs	r3, #0
 80187d8:	61fb      	str	r3, [r7, #28]
 80187da:	e004      	b.n	80187e6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	2200      	movs	r2, #0
 80187e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80187e2:	2301      	movs	r3, #1
 80187e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80187e6:	f000 fc77 	bl	80190d8 <vPortExitCritical>

	return xReturn;
 80187ea:	69fb      	ldr	r3, [r7, #28]
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3720      	adds	r7, #32
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	20001954 	.word	0x20001954
 80187f8:	20001968 	.word	0x20001968

080187fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80187fc:	b480      	push	{r7}
 80187fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018800:	4b03      	ldr	r3, [pc, #12]	@ (8018810 <vTaskMissedYield+0x14>)
 8018802:	2201      	movs	r2, #1
 8018804:	601a      	str	r2, [r3, #0]
}
 8018806:	bf00      	nop
 8018808:	46bd      	mov	sp, r7
 801880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880e:	4770      	bx	lr
 8018810:	20001964 	.word	0x20001964

08018814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801881c:	f000 f854 	bl	80188c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018820:	4b07      	ldr	r3, [pc, #28]	@ (8018840 <prvIdleTask+0x2c>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	2b01      	cmp	r3, #1
 8018826:	d907      	bls.n	8018838 <prvIdleTask+0x24>
			{
				taskYIELD();
 8018828:	4b06      	ldr	r3, [pc, #24]	@ (8018844 <prvIdleTask+0x30>)
 801882a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801882e:	601a      	str	r2, [r3, #0]
 8018830:	f3bf 8f4f 	dsb	sy
 8018834:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8018838:	f7e8 fde5 	bl	8001406 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801883c:	e7ee      	b.n	801881c <prvIdleTask+0x8>
 801883e:	bf00      	nop
 8018840:	20001854 	.word	0x20001854
 8018844:	e000ed04 	.word	0xe000ed04

08018848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b082      	sub	sp, #8
 801884c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801884e:	2300      	movs	r3, #0
 8018850:	607b      	str	r3, [r7, #4]
 8018852:	e00c      	b.n	801886e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018854:	687a      	ldr	r2, [r7, #4]
 8018856:	4613      	mov	r3, r2
 8018858:	009b      	lsls	r3, r3, #2
 801885a:	4413      	add	r3, r2
 801885c:	009b      	lsls	r3, r3, #2
 801885e:	4a12      	ldr	r2, [pc, #72]	@ (80188a8 <prvInitialiseTaskLists+0x60>)
 8018860:	4413      	add	r3, r2
 8018862:	4618      	mov	r0, r3
 8018864:	f7fe f95e 	bl	8016b24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	3301      	adds	r3, #1
 801886c:	607b      	str	r3, [r7, #4]
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	2b06      	cmp	r3, #6
 8018872:	d9ef      	bls.n	8018854 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018874:	480d      	ldr	r0, [pc, #52]	@ (80188ac <prvInitialiseTaskLists+0x64>)
 8018876:	f7fe f955 	bl	8016b24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801887a:	480d      	ldr	r0, [pc, #52]	@ (80188b0 <prvInitialiseTaskLists+0x68>)
 801887c:	f7fe f952 	bl	8016b24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018880:	480c      	ldr	r0, [pc, #48]	@ (80188b4 <prvInitialiseTaskLists+0x6c>)
 8018882:	f7fe f94f 	bl	8016b24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018886:	480c      	ldr	r0, [pc, #48]	@ (80188b8 <prvInitialiseTaskLists+0x70>)
 8018888:	f7fe f94c 	bl	8016b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801888c:	480b      	ldr	r0, [pc, #44]	@ (80188bc <prvInitialiseTaskLists+0x74>)
 801888e:	f7fe f949 	bl	8016b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018892:	4b0b      	ldr	r3, [pc, #44]	@ (80188c0 <prvInitialiseTaskLists+0x78>)
 8018894:	4a05      	ldr	r2, [pc, #20]	@ (80188ac <prvInitialiseTaskLists+0x64>)
 8018896:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018898:	4b0a      	ldr	r3, [pc, #40]	@ (80188c4 <prvInitialiseTaskLists+0x7c>)
 801889a:	4a05      	ldr	r2, [pc, #20]	@ (80188b0 <prvInitialiseTaskLists+0x68>)
 801889c:	601a      	str	r2, [r3, #0]
}
 801889e:	bf00      	nop
 80188a0:	3708      	adds	r7, #8
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	20001854 	.word	0x20001854
 80188ac:	200018e0 	.word	0x200018e0
 80188b0:	200018f4 	.word	0x200018f4
 80188b4:	20001910 	.word	0x20001910
 80188b8:	20001924 	.word	0x20001924
 80188bc:	2000193c 	.word	0x2000193c
 80188c0:	20001908 	.word	0x20001908
 80188c4:	2000190c 	.word	0x2000190c

080188c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b082      	sub	sp, #8
 80188cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80188ce:	e019      	b.n	8018904 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80188d0:	f000 fbcc 	bl	801906c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188d4:	4b10      	ldr	r3, [pc, #64]	@ (8018918 <prvCheckTasksWaitingTermination+0x50>)
 80188d6:	68db      	ldr	r3, [r3, #12]
 80188d8:	68db      	ldr	r3, [r3, #12]
 80188da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	3304      	adds	r3, #4
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7fe f9a9 	bl	8016c38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80188e6:	4b0d      	ldr	r3, [pc, #52]	@ (801891c <prvCheckTasksWaitingTermination+0x54>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	3b01      	subs	r3, #1
 80188ec:	4a0b      	ldr	r2, [pc, #44]	@ (801891c <prvCheckTasksWaitingTermination+0x54>)
 80188ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80188f0:	4b0b      	ldr	r3, [pc, #44]	@ (8018920 <prvCheckTasksWaitingTermination+0x58>)
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	3b01      	subs	r3, #1
 80188f6:	4a0a      	ldr	r2, [pc, #40]	@ (8018920 <prvCheckTasksWaitingTermination+0x58>)
 80188f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80188fa:	f000 fbed 	bl	80190d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80188fe:	6878      	ldr	r0, [r7, #4]
 8018900:	f000 f810 	bl	8018924 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018904:	4b06      	ldr	r3, [pc, #24]	@ (8018920 <prvCheckTasksWaitingTermination+0x58>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d1e1      	bne.n	80188d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801890c:	bf00      	nop
 801890e:	bf00      	nop
 8018910:	3708      	adds	r7, #8
 8018912:	46bd      	mov	sp, r7
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop
 8018918:	20001924 	.word	0x20001924
 801891c:	20001950 	.word	0x20001950
 8018920:	20001938 	.word	0x20001938

08018924 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018924:	b580      	push	{r7, lr}
 8018926:	b084      	sub	sp, #16
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018932:	2b00      	cmp	r3, #0
 8018934:	d108      	bne.n	8018948 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801893a:	4618      	mov	r0, r3
 801893c:	f000 fd96 	bl	801946c <vPortFree>
				vPortFree( pxTCB );
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f000 fd93 	bl	801946c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018946:	e01b      	b.n	8018980 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801894e:	2b01      	cmp	r3, #1
 8018950:	d103      	bne.n	801895a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018952:	6878      	ldr	r0, [r7, #4]
 8018954:	f000 fd8a 	bl	801946c <vPortFree>
	}
 8018958:	e012      	b.n	8018980 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018960:	2b02      	cmp	r3, #2
 8018962:	d00d      	beq.n	8018980 <prvDeleteTCB+0x5c>
	__asm volatile
 8018964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018968:	b672      	cpsid	i
 801896a:	f383 8811 	msr	BASEPRI, r3
 801896e:	f3bf 8f6f 	isb	sy
 8018972:	f3bf 8f4f 	dsb	sy
 8018976:	b662      	cpsie	i
 8018978:	60fb      	str	r3, [r7, #12]
}
 801897a:	bf00      	nop
 801897c:	bf00      	nop
 801897e:	e7fd      	b.n	801897c <prvDeleteTCB+0x58>
	}
 8018980:	bf00      	nop
 8018982:	3710      	adds	r7, #16
 8018984:	46bd      	mov	sp, r7
 8018986:	bd80      	pop	{r7, pc}

08018988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018988:	b480      	push	{r7}
 801898a:	b083      	sub	sp, #12
 801898c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801898e:	4b0c      	ldr	r3, [pc, #48]	@ (80189c0 <prvResetNextTaskUnblockTime+0x38>)
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d104      	bne.n	80189a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018998:	4b0a      	ldr	r3, [pc, #40]	@ (80189c4 <prvResetNextTaskUnblockTime+0x3c>)
 801899a:	f04f 32ff 	mov.w	r2, #4294967295
 801899e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80189a0:	e008      	b.n	80189b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189a2:	4b07      	ldr	r3, [pc, #28]	@ (80189c0 <prvResetNextTaskUnblockTime+0x38>)
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	68db      	ldr	r3, [r3, #12]
 80189a8:	68db      	ldr	r3, [r3, #12]
 80189aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	685b      	ldr	r3, [r3, #4]
 80189b0:	4a04      	ldr	r2, [pc, #16]	@ (80189c4 <prvResetNextTaskUnblockTime+0x3c>)
 80189b2:	6013      	str	r3, [r2, #0]
}
 80189b4:	bf00      	nop
 80189b6:	370c      	adds	r7, #12
 80189b8:	46bd      	mov	sp, r7
 80189ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189be:	4770      	bx	lr
 80189c0:	20001908 	.word	0x20001908
 80189c4:	20001970 	.word	0x20001970

080189c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80189c8:	b480      	push	{r7}
 80189ca:	b083      	sub	sp, #12
 80189cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80189ce:	4b0b      	ldr	r3, [pc, #44]	@ (80189fc <xTaskGetSchedulerState+0x34>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d102      	bne.n	80189dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80189d6:	2301      	movs	r3, #1
 80189d8:	607b      	str	r3, [r7, #4]
 80189da:	e008      	b.n	80189ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80189dc:	4b08      	ldr	r3, [pc, #32]	@ (8018a00 <xTaskGetSchedulerState+0x38>)
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d102      	bne.n	80189ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80189e4:	2302      	movs	r3, #2
 80189e6:	607b      	str	r3, [r7, #4]
 80189e8:	e001      	b.n	80189ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80189ea:	2300      	movs	r3, #0
 80189ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80189ee:	687b      	ldr	r3, [r7, #4]
	}
 80189f0:	4618      	mov	r0, r3
 80189f2:	370c      	adds	r7, #12
 80189f4:	46bd      	mov	sp, r7
 80189f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fa:	4770      	bx	lr
 80189fc:	2000195c 	.word	0x2000195c
 8018a00:	20001978 	.word	0x20001978

08018a04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b084      	sub	sp, #16
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018a10:	2300      	movs	r3, #0
 8018a12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d069      	beq.n	8018aee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018a1a:	68bb      	ldr	r3, [r7, #8]
 8018a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a1e:	4b36      	ldr	r3, [pc, #216]	@ (8018af8 <xTaskPriorityInherit+0xf4>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a24:	429a      	cmp	r2, r3
 8018a26:	d259      	bcs.n	8018adc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018a28:	68bb      	ldr	r3, [r7, #8]
 8018a2a:	699b      	ldr	r3, [r3, #24]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	db06      	blt.n	8018a3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a30:	4b31      	ldr	r3, [pc, #196]	@ (8018af8 <xTaskPriorityInherit+0xf4>)
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a36:	f1c3 0207 	rsb	r2, r3, #7
 8018a3a:	68bb      	ldr	r3, [r7, #8]
 8018a3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018a3e:	68bb      	ldr	r3, [r7, #8]
 8018a40:	6959      	ldr	r1, [r3, #20]
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a46:	4613      	mov	r3, r2
 8018a48:	009b      	lsls	r3, r3, #2
 8018a4a:	4413      	add	r3, r2
 8018a4c:	009b      	lsls	r3, r3, #2
 8018a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8018afc <xTaskPriorityInherit+0xf8>)
 8018a50:	4413      	add	r3, r2
 8018a52:	4299      	cmp	r1, r3
 8018a54:	d13a      	bne.n	8018acc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a56:	68bb      	ldr	r3, [r7, #8]
 8018a58:	3304      	adds	r3, #4
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	f7fe f8ec 	bl	8016c38 <uxListRemove>
 8018a60:	4603      	mov	r3, r0
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d115      	bne.n	8018a92 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a6a:	4924      	ldr	r1, [pc, #144]	@ (8018afc <xTaskPriorityInherit+0xf8>)
 8018a6c:	4613      	mov	r3, r2
 8018a6e:	009b      	lsls	r3, r3, #2
 8018a70:	4413      	add	r3, r2
 8018a72:	009b      	lsls	r3, r3, #2
 8018a74:	440b      	add	r3, r1
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d10a      	bne.n	8018a92 <xTaskPriorityInherit+0x8e>
 8018a7c:	68bb      	ldr	r3, [r7, #8]
 8018a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a80:	2201      	movs	r2, #1
 8018a82:	fa02 f303 	lsl.w	r3, r2, r3
 8018a86:	43da      	mvns	r2, r3
 8018a88:	4b1d      	ldr	r3, [pc, #116]	@ (8018b00 <xTaskPriorityInherit+0xfc>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	4013      	ands	r3, r2
 8018a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8018b00 <xTaskPriorityInherit+0xfc>)
 8018a90:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018a92:	4b19      	ldr	r3, [pc, #100]	@ (8018af8 <xTaskPriorityInherit+0xf4>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018a9c:	68bb      	ldr	r3, [r7, #8]
 8018a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018aa0:	2201      	movs	r2, #1
 8018aa2:	409a      	lsls	r2, r3
 8018aa4:	4b16      	ldr	r3, [pc, #88]	@ (8018b00 <xTaskPriorityInherit+0xfc>)
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	4313      	orrs	r3, r2
 8018aaa:	4a15      	ldr	r2, [pc, #84]	@ (8018b00 <xTaskPriorityInherit+0xfc>)
 8018aac:	6013      	str	r3, [r2, #0]
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ab2:	4613      	mov	r3, r2
 8018ab4:	009b      	lsls	r3, r3, #2
 8018ab6:	4413      	add	r3, r2
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	4a10      	ldr	r2, [pc, #64]	@ (8018afc <xTaskPriorityInherit+0xf8>)
 8018abc:	441a      	add	r2, r3
 8018abe:	68bb      	ldr	r3, [r7, #8]
 8018ac0:	3304      	adds	r3, #4
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	4610      	mov	r0, r2
 8018ac6:	f7fe f85a 	bl	8016b7e <vListInsertEnd>
 8018aca:	e004      	b.n	8018ad6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018acc:	4b0a      	ldr	r3, [pc, #40]	@ (8018af8 <xTaskPriorityInherit+0xf4>)
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ad2:	68bb      	ldr	r3, [r7, #8]
 8018ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018ad6:	2301      	movs	r3, #1
 8018ad8:	60fb      	str	r3, [r7, #12]
 8018ada:	e008      	b.n	8018aee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018ae0:	4b05      	ldr	r3, [pc, #20]	@ (8018af8 <xTaskPriorityInherit+0xf4>)
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	d201      	bcs.n	8018aee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018aea:	2301      	movs	r3, #1
 8018aec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018aee:	68fb      	ldr	r3, [r7, #12]
	}
 8018af0:	4618      	mov	r0, r3
 8018af2:	3710      	adds	r7, #16
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bd80      	pop	{r7, pc}
 8018af8:	20001850 	.word	0x20001850
 8018afc:	20001854 	.word	0x20001854
 8018b00:	20001958 	.word	0x20001958

08018b04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b086      	sub	sp, #24
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b10:	2300      	movs	r3, #0
 8018b12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d074      	beq.n	8018c04 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8018c10 <xTaskPriorityDisinherit+0x10c>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	693a      	ldr	r2, [r7, #16]
 8018b20:	429a      	cmp	r2, r3
 8018b22:	d00d      	beq.n	8018b40 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8018b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b28:	b672      	cpsid	i
 8018b2a:	f383 8811 	msr	BASEPRI, r3
 8018b2e:	f3bf 8f6f 	isb	sy
 8018b32:	f3bf 8f4f 	dsb	sy
 8018b36:	b662      	cpsie	i
 8018b38:	60fb      	str	r3, [r7, #12]
}
 8018b3a:	bf00      	nop
 8018b3c:	bf00      	nop
 8018b3e:	e7fd      	b.n	8018b3c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8018b40:	693b      	ldr	r3, [r7, #16]
 8018b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d10d      	bne.n	8018b64 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8018b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b4c:	b672      	cpsid	i
 8018b4e:	f383 8811 	msr	BASEPRI, r3
 8018b52:	f3bf 8f6f 	isb	sy
 8018b56:	f3bf 8f4f 	dsb	sy
 8018b5a:	b662      	cpsie	i
 8018b5c:	60bb      	str	r3, [r7, #8]
}
 8018b5e:	bf00      	nop
 8018b60:	bf00      	nop
 8018b62:	e7fd      	b.n	8018b60 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8018b64:	693b      	ldr	r3, [r7, #16]
 8018b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b68:	1e5a      	subs	r2, r3, #1
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018b6e:	693b      	ldr	r3, [r7, #16]
 8018b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b76:	429a      	cmp	r2, r3
 8018b78:	d044      	beq.n	8018c04 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018b7a:	693b      	ldr	r3, [r7, #16]
 8018b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d140      	bne.n	8018c04 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b82:	693b      	ldr	r3, [r7, #16]
 8018b84:	3304      	adds	r3, #4
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7fe f856 	bl	8016c38 <uxListRemove>
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d115      	bne.n	8018bbe <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018b92:	693b      	ldr	r3, [r7, #16]
 8018b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018b96:	491f      	ldr	r1, [pc, #124]	@ (8018c14 <xTaskPriorityDisinherit+0x110>)
 8018b98:	4613      	mov	r3, r2
 8018b9a:	009b      	lsls	r3, r3, #2
 8018b9c:	4413      	add	r3, r2
 8018b9e:	009b      	lsls	r3, r3, #2
 8018ba0:	440b      	add	r3, r1
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d10a      	bne.n	8018bbe <xTaskPriorityDisinherit+0xba>
 8018ba8:	693b      	ldr	r3, [r7, #16]
 8018baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bac:	2201      	movs	r2, #1
 8018bae:	fa02 f303 	lsl.w	r3, r2, r3
 8018bb2:	43da      	mvns	r2, r3
 8018bb4:	4b18      	ldr	r3, [pc, #96]	@ (8018c18 <xTaskPriorityDisinherit+0x114>)
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	4013      	ands	r3, r2
 8018bba:	4a17      	ldr	r2, [pc, #92]	@ (8018c18 <xTaskPriorityDisinherit+0x114>)
 8018bbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018bbe:	693b      	ldr	r3, [r7, #16]
 8018bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018bc2:	693b      	ldr	r3, [r7, #16]
 8018bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bc6:	693b      	ldr	r3, [r7, #16]
 8018bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bca:	f1c3 0207 	rsb	r2, r3, #7
 8018bce:	693b      	ldr	r3, [r7, #16]
 8018bd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018bd2:	693b      	ldr	r3, [r7, #16]
 8018bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bd6:	2201      	movs	r2, #1
 8018bd8:	409a      	lsls	r2, r3
 8018bda:	4b0f      	ldr	r3, [pc, #60]	@ (8018c18 <xTaskPriorityDisinherit+0x114>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	4313      	orrs	r3, r2
 8018be0:	4a0d      	ldr	r2, [pc, #52]	@ (8018c18 <xTaskPriorityDisinherit+0x114>)
 8018be2:	6013      	str	r3, [r2, #0]
 8018be4:	693b      	ldr	r3, [r7, #16]
 8018be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018be8:	4613      	mov	r3, r2
 8018bea:	009b      	lsls	r3, r3, #2
 8018bec:	4413      	add	r3, r2
 8018bee:	009b      	lsls	r3, r3, #2
 8018bf0:	4a08      	ldr	r2, [pc, #32]	@ (8018c14 <xTaskPriorityDisinherit+0x110>)
 8018bf2:	441a      	add	r2, r3
 8018bf4:	693b      	ldr	r3, [r7, #16]
 8018bf6:	3304      	adds	r3, #4
 8018bf8:	4619      	mov	r1, r3
 8018bfa:	4610      	mov	r0, r2
 8018bfc:	f7fd ffbf 	bl	8016b7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018c00:	2301      	movs	r3, #1
 8018c02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c04:	697b      	ldr	r3, [r7, #20]
	}
 8018c06:	4618      	mov	r0, r3
 8018c08:	3718      	adds	r7, #24
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	20001850 	.word	0x20001850
 8018c14:	20001854 	.word	0x20001854
 8018c18:	20001958 	.word	0x20001958

08018c1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b088      	sub	sp, #32
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
 8018c24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	f000 8089 	beq.w	8018d48 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018c36:	69bb      	ldr	r3, [r7, #24]
 8018c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d10d      	bne.n	8018c5a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8018c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c42:	b672      	cpsid	i
 8018c44:	f383 8811 	msr	BASEPRI, r3
 8018c48:	f3bf 8f6f 	isb	sy
 8018c4c:	f3bf 8f4f 	dsb	sy
 8018c50:	b662      	cpsie	i
 8018c52:	60fb      	str	r3, [r7, #12]
}
 8018c54:	bf00      	nop
 8018c56:	bf00      	nop
 8018c58:	e7fd      	b.n	8018c56 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018c5a:	69bb      	ldr	r3, [r7, #24]
 8018c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c5e:	683a      	ldr	r2, [r7, #0]
 8018c60:	429a      	cmp	r2, r3
 8018c62:	d902      	bls.n	8018c6a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	61fb      	str	r3, [r7, #28]
 8018c68:	e002      	b.n	8018c70 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018c6a:	69bb      	ldr	r3, [r7, #24]
 8018c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c6e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018c70:	69bb      	ldr	r3, [r7, #24]
 8018c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c74:	69fa      	ldr	r2, [r7, #28]
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d066      	beq.n	8018d48 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018c7a:	69bb      	ldr	r3, [r7, #24]
 8018c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c7e:	697a      	ldr	r2, [r7, #20]
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d161      	bne.n	8018d48 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018c84:	4b32      	ldr	r3, [pc, #200]	@ (8018d50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	69ba      	ldr	r2, [r7, #24]
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d10d      	bne.n	8018caa <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8018c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c92:	b672      	cpsid	i
 8018c94:	f383 8811 	msr	BASEPRI, r3
 8018c98:	f3bf 8f6f 	isb	sy
 8018c9c:	f3bf 8f4f 	dsb	sy
 8018ca0:	b662      	cpsie	i
 8018ca2:	60bb      	str	r3, [r7, #8]
}
 8018ca4:	bf00      	nop
 8018ca6:	bf00      	nop
 8018ca8:	e7fd      	b.n	8018ca6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018caa:	69bb      	ldr	r3, [r7, #24]
 8018cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018cb0:	69bb      	ldr	r3, [r7, #24]
 8018cb2:	69fa      	ldr	r2, [r7, #28]
 8018cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018cb6:	69bb      	ldr	r3, [r7, #24]
 8018cb8:	699b      	ldr	r3, [r3, #24]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	db04      	blt.n	8018cc8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cbe:	69fb      	ldr	r3, [r7, #28]
 8018cc0:	f1c3 0207 	rsb	r2, r3, #7
 8018cc4:	69bb      	ldr	r3, [r7, #24]
 8018cc6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018cc8:	69bb      	ldr	r3, [r7, #24]
 8018cca:	6959      	ldr	r1, [r3, #20]
 8018ccc:	693a      	ldr	r2, [r7, #16]
 8018cce:	4613      	mov	r3, r2
 8018cd0:	009b      	lsls	r3, r3, #2
 8018cd2:	4413      	add	r3, r2
 8018cd4:	009b      	lsls	r3, r3, #2
 8018cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8018d54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018cd8:	4413      	add	r3, r2
 8018cda:	4299      	cmp	r1, r3
 8018cdc:	d134      	bne.n	8018d48 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018cde:	69bb      	ldr	r3, [r7, #24]
 8018ce0:	3304      	adds	r3, #4
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	f7fd ffa8 	bl	8016c38 <uxListRemove>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d115      	bne.n	8018d1a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018cee:	69bb      	ldr	r3, [r7, #24]
 8018cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018cf2:	4918      	ldr	r1, [pc, #96]	@ (8018d54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018cf4:	4613      	mov	r3, r2
 8018cf6:	009b      	lsls	r3, r3, #2
 8018cf8:	4413      	add	r3, r2
 8018cfa:	009b      	lsls	r3, r3, #2
 8018cfc:	440b      	add	r3, r1
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d10a      	bne.n	8018d1a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8018d04:	69bb      	ldr	r3, [r7, #24]
 8018d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d08:	2201      	movs	r2, #1
 8018d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8018d0e:	43da      	mvns	r2, r3
 8018d10:	4b11      	ldr	r3, [pc, #68]	@ (8018d58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	4013      	ands	r3, r2
 8018d16:	4a10      	ldr	r2, [pc, #64]	@ (8018d58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018d18:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018d1a:	69bb      	ldr	r3, [r7, #24]
 8018d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d1e:	2201      	movs	r2, #1
 8018d20:	409a      	lsls	r2, r3
 8018d22:	4b0d      	ldr	r3, [pc, #52]	@ (8018d58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	4313      	orrs	r3, r2
 8018d28:	4a0b      	ldr	r2, [pc, #44]	@ (8018d58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018d2a:	6013      	str	r3, [r2, #0]
 8018d2c:	69bb      	ldr	r3, [r7, #24]
 8018d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018d30:	4613      	mov	r3, r2
 8018d32:	009b      	lsls	r3, r3, #2
 8018d34:	4413      	add	r3, r2
 8018d36:	009b      	lsls	r3, r3, #2
 8018d38:	4a06      	ldr	r2, [pc, #24]	@ (8018d54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018d3a:	441a      	add	r2, r3
 8018d3c:	69bb      	ldr	r3, [r7, #24]
 8018d3e:	3304      	adds	r3, #4
 8018d40:	4619      	mov	r1, r3
 8018d42:	4610      	mov	r0, r2
 8018d44:	f7fd ff1b 	bl	8016b7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018d48:	bf00      	nop
 8018d4a:	3720      	adds	r7, #32
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}
 8018d50:	20001850 	.word	0x20001850
 8018d54:	20001854 	.word	0x20001854
 8018d58:	20001958 	.word	0x20001958

08018d5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018d5c:	b480      	push	{r7}
 8018d5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018d60:	4b07      	ldr	r3, [pc, #28]	@ (8018d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d004      	beq.n	8018d72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018d68:	4b05      	ldr	r3, [pc, #20]	@ (8018d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018d6e:	3201      	adds	r2, #1
 8018d70:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8018d72:	4b03      	ldr	r3, [pc, #12]	@ (8018d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d74:	681b      	ldr	r3, [r3, #0]
	}
 8018d76:	4618      	mov	r0, r3
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7e:	4770      	bx	lr
 8018d80:	20001850 	.word	0x20001850

08018d84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b084      	sub	sp, #16
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	6078      	str	r0, [r7, #4]
 8018d8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018d8e:	4b29      	ldr	r3, [pc, #164]	@ (8018e34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d94:	4b28      	ldr	r3, [pc, #160]	@ (8018e38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	3304      	adds	r3, #4
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7fd ff4c 	bl	8016c38 <uxListRemove>
 8018da0:	4603      	mov	r3, r0
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d10b      	bne.n	8018dbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018da6:	4b24      	ldr	r3, [pc, #144]	@ (8018e38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018dac:	2201      	movs	r2, #1
 8018dae:	fa02 f303 	lsl.w	r3, r2, r3
 8018db2:	43da      	mvns	r2, r3
 8018db4:	4b21      	ldr	r3, [pc, #132]	@ (8018e3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	4013      	ands	r3, r2
 8018dba:	4a20      	ldr	r2, [pc, #128]	@ (8018e3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8018dbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dc4:	d10a      	bne.n	8018ddc <prvAddCurrentTaskToDelayedList+0x58>
 8018dc6:	683b      	ldr	r3, [r7, #0]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d007      	beq.n	8018ddc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8018e38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	3304      	adds	r3, #4
 8018dd2:	4619      	mov	r1, r3
 8018dd4:	481a      	ldr	r0, [pc, #104]	@ (8018e40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8018dd6:	f7fd fed2 	bl	8016b7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018dda:	e026      	b.n	8018e2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018ddc:	68fa      	ldr	r2, [r7, #12]
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	4413      	add	r3, r2
 8018de2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018de4:	4b14      	ldr	r3, [pc, #80]	@ (8018e38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	68ba      	ldr	r2, [r7, #8]
 8018dea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018dec:	68ba      	ldr	r2, [r7, #8]
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	429a      	cmp	r2, r3
 8018df2:	d209      	bcs.n	8018e08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018df4:	4b13      	ldr	r3, [pc, #76]	@ (8018e44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018df6:	681a      	ldr	r2, [r3, #0]
 8018df8:	4b0f      	ldr	r3, [pc, #60]	@ (8018e38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	3304      	adds	r3, #4
 8018dfe:	4619      	mov	r1, r3
 8018e00:	4610      	mov	r0, r2
 8018e02:	f7fd fee0 	bl	8016bc6 <vListInsert>
}
 8018e06:	e010      	b.n	8018e2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018e08:	4b0f      	ldr	r3, [pc, #60]	@ (8018e48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8018e0a:	681a      	ldr	r2, [r3, #0]
 8018e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8018e38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	3304      	adds	r3, #4
 8018e12:	4619      	mov	r1, r3
 8018e14:	4610      	mov	r0, r2
 8018e16:	f7fd fed6 	bl	8016bc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8018e4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	68ba      	ldr	r2, [r7, #8]
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d202      	bcs.n	8018e2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018e24:	4a09      	ldr	r2, [pc, #36]	@ (8018e4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	6013      	str	r3, [r2, #0]
}
 8018e2a:	bf00      	nop
 8018e2c:	3710      	adds	r7, #16
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}
 8018e32:	bf00      	nop
 8018e34:	20001954 	.word	0x20001954
 8018e38:	20001850 	.word	0x20001850
 8018e3c:	20001958 	.word	0x20001958
 8018e40:	2000193c 	.word	0x2000193c
 8018e44:	2000190c 	.word	0x2000190c
 8018e48:	20001908 	.word	0x20001908
 8018e4c:	20001970 	.word	0x20001970

08018e50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018e50:	b480      	push	{r7}
 8018e52:	b085      	sub	sp, #20
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	60f8      	str	r0, [r7, #12]
 8018e58:	60b9      	str	r1, [r7, #8]
 8018e5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	3b04      	subs	r3, #4
 8018e60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	3b04      	subs	r3, #4
 8018e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018e70:	68bb      	ldr	r3, [r7, #8]
 8018e72:	f023 0201 	bic.w	r2, r3, #1
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	3b04      	subs	r3, #4
 8018e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018e80:	4a0c      	ldr	r2, [pc, #48]	@ (8018eb4 <pxPortInitialiseStack+0x64>)
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	3b14      	subs	r3, #20
 8018e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018e8c:	687a      	ldr	r2, [r7, #4]
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	3b04      	subs	r3, #4
 8018e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	f06f 0202 	mvn.w	r2, #2
 8018e9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	3b20      	subs	r3, #32
 8018ea4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018ea6:	68fb      	ldr	r3, [r7, #12]
}
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	3714      	adds	r7, #20
 8018eac:	46bd      	mov	sp, r7
 8018eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb2:	4770      	bx	lr
 8018eb4:	08018eb9 	.word	0x08018eb9

08018eb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018eb8:	b480      	push	{r7}
 8018eba:	b085      	sub	sp, #20
 8018ebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018ec2:	4b15      	ldr	r3, [pc, #84]	@ (8018f18 <prvTaskExitError+0x60>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018eca:	d00d      	beq.n	8018ee8 <prvTaskExitError+0x30>
	__asm volatile
 8018ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ed0:	b672      	cpsid	i
 8018ed2:	f383 8811 	msr	BASEPRI, r3
 8018ed6:	f3bf 8f6f 	isb	sy
 8018eda:	f3bf 8f4f 	dsb	sy
 8018ede:	b662      	cpsie	i
 8018ee0:	60fb      	str	r3, [r7, #12]
}
 8018ee2:	bf00      	nop
 8018ee4:	bf00      	nop
 8018ee6:	e7fd      	b.n	8018ee4 <prvTaskExitError+0x2c>
	__asm volatile
 8018ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018eec:	b672      	cpsid	i
 8018eee:	f383 8811 	msr	BASEPRI, r3
 8018ef2:	f3bf 8f6f 	isb	sy
 8018ef6:	f3bf 8f4f 	dsb	sy
 8018efa:	b662      	cpsie	i
 8018efc:	60bb      	str	r3, [r7, #8]
}
 8018efe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018f00:	bf00      	nop
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d0fc      	beq.n	8018f02 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018f08:	bf00      	nop
 8018f0a:	bf00      	nop
 8018f0c:	3714      	adds	r7, #20
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f14:	4770      	bx	lr
 8018f16:	bf00      	nop
 8018f18:	20000088 	.word	0x20000088
 8018f1c:	00000000 	.word	0x00000000

08018f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018f20:	4b07      	ldr	r3, [pc, #28]	@ (8018f40 <pxCurrentTCBConst2>)
 8018f22:	6819      	ldr	r1, [r3, #0]
 8018f24:	6808      	ldr	r0, [r1, #0]
 8018f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f2a:	f380 8809 	msr	PSP, r0
 8018f2e:	f3bf 8f6f 	isb	sy
 8018f32:	f04f 0000 	mov.w	r0, #0
 8018f36:	f380 8811 	msr	BASEPRI, r0
 8018f3a:	4770      	bx	lr
 8018f3c:	f3af 8000 	nop.w

08018f40 <pxCurrentTCBConst2>:
 8018f40:	20001850 	.word	0x20001850
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018f44:	bf00      	nop
 8018f46:	bf00      	nop

08018f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018f48:	4808      	ldr	r0, [pc, #32]	@ (8018f6c <prvPortStartFirstTask+0x24>)
 8018f4a:	6800      	ldr	r0, [r0, #0]
 8018f4c:	6800      	ldr	r0, [r0, #0]
 8018f4e:	f380 8808 	msr	MSP, r0
 8018f52:	f04f 0000 	mov.w	r0, #0
 8018f56:	f380 8814 	msr	CONTROL, r0
 8018f5a:	b662      	cpsie	i
 8018f5c:	b661      	cpsie	f
 8018f5e:	f3bf 8f4f 	dsb	sy
 8018f62:	f3bf 8f6f 	isb	sy
 8018f66:	df00      	svc	0
 8018f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018f6a:	bf00      	nop
 8018f6c:	e000ed08 	.word	0xe000ed08

08018f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b084      	sub	sp, #16
 8018f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018f76:	4b37      	ldr	r3, [pc, #220]	@ (8019054 <xPortStartScheduler+0xe4>)
 8018f78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	781b      	ldrb	r3, [r3, #0]
 8018f7e:	b2db      	uxtb	r3, r3
 8018f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	22ff      	movs	r2, #255	@ 0xff
 8018f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	781b      	ldrb	r3, [r3, #0]
 8018f8c:	b2db      	uxtb	r3, r3
 8018f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018f90:	78fb      	ldrb	r3, [r7, #3]
 8018f92:	b2db      	uxtb	r3, r3
 8018f94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018f98:	b2da      	uxtb	r2, r3
 8018f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8019058 <xPortStartScheduler+0xe8>)
 8018f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018f9e:	4b2f      	ldr	r3, [pc, #188]	@ (801905c <xPortStartScheduler+0xec>)
 8018fa0:	2207      	movs	r2, #7
 8018fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018fa4:	e009      	b.n	8018fba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018fa6:	4b2d      	ldr	r3, [pc, #180]	@ (801905c <xPortStartScheduler+0xec>)
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	3b01      	subs	r3, #1
 8018fac:	4a2b      	ldr	r2, [pc, #172]	@ (801905c <xPortStartScheduler+0xec>)
 8018fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018fb0:	78fb      	ldrb	r3, [r7, #3]
 8018fb2:	b2db      	uxtb	r3, r3
 8018fb4:	005b      	lsls	r3, r3, #1
 8018fb6:	b2db      	uxtb	r3, r3
 8018fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018fba:	78fb      	ldrb	r3, [r7, #3]
 8018fbc:	b2db      	uxtb	r3, r3
 8018fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018fc2:	2b80      	cmp	r3, #128	@ 0x80
 8018fc4:	d0ef      	beq.n	8018fa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018fc6:	4b25      	ldr	r3, [pc, #148]	@ (801905c <xPortStartScheduler+0xec>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	f1c3 0307 	rsb	r3, r3, #7
 8018fce:	2b04      	cmp	r3, #4
 8018fd0:	d00d      	beq.n	8018fee <xPortStartScheduler+0x7e>
	__asm volatile
 8018fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fd6:	b672      	cpsid	i
 8018fd8:	f383 8811 	msr	BASEPRI, r3
 8018fdc:	f3bf 8f6f 	isb	sy
 8018fe0:	f3bf 8f4f 	dsb	sy
 8018fe4:	b662      	cpsie	i
 8018fe6:	60bb      	str	r3, [r7, #8]
}
 8018fe8:	bf00      	nop
 8018fea:	bf00      	nop
 8018fec:	e7fd      	b.n	8018fea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018fee:	4b1b      	ldr	r3, [pc, #108]	@ (801905c <xPortStartScheduler+0xec>)
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	021b      	lsls	r3, r3, #8
 8018ff4:	4a19      	ldr	r2, [pc, #100]	@ (801905c <xPortStartScheduler+0xec>)
 8018ff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018ff8:	4b18      	ldr	r3, [pc, #96]	@ (801905c <xPortStartScheduler+0xec>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019000:	4a16      	ldr	r2, [pc, #88]	@ (801905c <xPortStartScheduler+0xec>)
 8019002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	b2da      	uxtb	r2, r3
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801900c:	4b14      	ldr	r3, [pc, #80]	@ (8019060 <xPortStartScheduler+0xf0>)
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	4a13      	ldr	r2, [pc, #76]	@ (8019060 <xPortStartScheduler+0xf0>)
 8019012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019018:	4b11      	ldr	r3, [pc, #68]	@ (8019060 <xPortStartScheduler+0xf0>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	4a10      	ldr	r2, [pc, #64]	@ (8019060 <xPortStartScheduler+0xf0>)
 801901e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019024:	f000 f8dc 	bl	80191e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019028:	4b0e      	ldr	r3, [pc, #56]	@ (8019064 <xPortStartScheduler+0xf4>)
 801902a:	2200      	movs	r2, #0
 801902c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801902e:	f000 f8fb 	bl	8019228 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019032:	4b0d      	ldr	r3, [pc, #52]	@ (8019068 <xPortStartScheduler+0xf8>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	4a0c      	ldr	r2, [pc, #48]	@ (8019068 <xPortStartScheduler+0xf8>)
 8019038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801903c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801903e:	f7ff ff83 	bl	8018f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019042:	f7ff fa4b 	bl	80184dc <vTaskSwitchContext>
	prvTaskExitError();
 8019046:	f7ff ff37 	bl	8018eb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801904a:	2300      	movs	r3, #0
}
 801904c:	4618      	mov	r0, r3
 801904e:	3710      	adds	r7, #16
 8019050:	46bd      	mov	sp, r7
 8019052:	bd80      	pop	{r7, pc}
 8019054:	e000e400 	.word	0xe000e400
 8019058:	2000197c 	.word	0x2000197c
 801905c:	20001980 	.word	0x20001980
 8019060:	e000ed20 	.word	0xe000ed20
 8019064:	20000088 	.word	0x20000088
 8019068:	e000ef34 	.word	0xe000ef34

0801906c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801906c:	b480      	push	{r7}
 801906e:	b083      	sub	sp, #12
 8019070:	af00      	add	r7, sp, #0
	__asm volatile
 8019072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019076:	b672      	cpsid	i
 8019078:	f383 8811 	msr	BASEPRI, r3
 801907c:	f3bf 8f6f 	isb	sy
 8019080:	f3bf 8f4f 	dsb	sy
 8019084:	b662      	cpsie	i
 8019086:	607b      	str	r3, [r7, #4]
}
 8019088:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801908a:	4b11      	ldr	r3, [pc, #68]	@ (80190d0 <vPortEnterCritical+0x64>)
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	3301      	adds	r3, #1
 8019090:	4a0f      	ldr	r2, [pc, #60]	@ (80190d0 <vPortEnterCritical+0x64>)
 8019092:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019094:	4b0e      	ldr	r3, [pc, #56]	@ (80190d0 <vPortEnterCritical+0x64>)
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	2b01      	cmp	r3, #1
 801909a:	d112      	bne.n	80190c2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801909c:	4b0d      	ldr	r3, [pc, #52]	@ (80190d4 <vPortEnterCritical+0x68>)
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	b2db      	uxtb	r3, r3
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d00d      	beq.n	80190c2 <vPortEnterCritical+0x56>
	__asm volatile
 80190a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190aa:	b672      	cpsid	i
 80190ac:	f383 8811 	msr	BASEPRI, r3
 80190b0:	f3bf 8f6f 	isb	sy
 80190b4:	f3bf 8f4f 	dsb	sy
 80190b8:	b662      	cpsie	i
 80190ba:	603b      	str	r3, [r7, #0]
}
 80190bc:	bf00      	nop
 80190be:	bf00      	nop
 80190c0:	e7fd      	b.n	80190be <vPortEnterCritical+0x52>
	}
}
 80190c2:	bf00      	nop
 80190c4:	370c      	adds	r7, #12
 80190c6:	46bd      	mov	sp, r7
 80190c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190cc:	4770      	bx	lr
 80190ce:	bf00      	nop
 80190d0:	20000088 	.word	0x20000088
 80190d4:	e000ed04 	.word	0xe000ed04

080190d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80190d8:	b480      	push	{r7}
 80190da:	b083      	sub	sp, #12
 80190dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80190de:	4b13      	ldr	r3, [pc, #76]	@ (801912c <vPortExitCritical+0x54>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d10d      	bne.n	8019102 <vPortExitCritical+0x2a>
	__asm volatile
 80190e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190ea:	b672      	cpsid	i
 80190ec:	f383 8811 	msr	BASEPRI, r3
 80190f0:	f3bf 8f6f 	isb	sy
 80190f4:	f3bf 8f4f 	dsb	sy
 80190f8:	b662      	cpsie	i
 80190fa:	607b      	str	r3, [r7, #4]
}
 80190fc:	bf00      	nop
 80190fe:	bf00      	nop
 8019100:	e7fd      	b.n	80190fe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8019102:	4b0a      	ldr	r3, [pc, #40]	@ (801912c <vPortExitCritical+0x54>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	3b01      	subs	r3, #1
 8019108:	4a08      	ldr	r2, [pc, #32]	@ (801912c <vPortExitCritical+0x54>)
 801910a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801910c:	4b07      	ldr	r3, [pc, #28]	@ (801912c <vPortExitCritical+0x54>)
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d105      	bne.n	8019120 <vPortExitCritical+0x48>
 8019114:	2300      	movs	r3, #0
 8019116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	f383 8811 	msr	BASEPRI, r3
}
 801911e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019120:	bf00      	nop
 8019122:	370c      	adds	r7, #12
 8019124:	46bd      	mov	sp, r7
 8019126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912a:	4770      	bx	lr
 801912c:	20000088 	.word	0x20000088

08019130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019130:	f3ef 8009 	mrs	r0, PSP
 8019134:	f3bf 8f6f 	isb	sy
 8019138:	4b15      	ldr	r3, [pc, #84]	@ (8019190 <pxCurrentTCBConst>)
 801913a:	681a      	ldr	r2, [r3, #0]
 801913c:	f01e 0f10 	tst.w	lr, #16
 8019140:	bf08      	it	eq
 8019142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801914a:	6010      	str	r0, [r2, #0]
 801914c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019154:	b672      	cpsid	i
 8019156:	f380 8811 	msr	BASEPRI, r0
 801915a:	f3bf 8f4f 	dsb	sy
 801915e:	f3bf 8f6f 	isb	sy
 8019162:	b662      	cpsie	i
 8019164:	f7ff f9ba 	bl	80184dc <vTaskSwitchContext>
 8019168:	f04f 0000 	mov.w	r0, #0
 801916c:	f380 8811 	msr	BASEPRI, r0
 8019170:	bc09      	pop	{r0, r3}
 8019172:	6819      	ldr	r1, [r3, #0]
 8019174:	6808      	ldr	r0, [r1, #0]
 8019176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801917a:	f01e 0f10 	tst.w	lr, #16
 801917e:	bf08      	it	eq
 8019180:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019184:	f380 8809 	msr	PSP, r0
 8019188:	f3bf 8f6f 	isb	sy
 801918c:	4770      	bx	lr
 801918e:	bf00      	nop

08019190 <pxCurrentTCBConst>:
 8019190:	20001850 	.word	0x20001850
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019194:	bf00      	nop
 8019196:	bf00      	nop

08019198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b082      	sub	sp, #8
 801919c:	af00      	add	r7, sp, #0
	__asm volatile
 801919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191a2:	b672      	cpsid	i
 80191a4:	f383 8811 	msr	BASEPRI, r3
 80191a8:	f3bf 8f6f 	isb	sy
 80191ac:	f3bf 8f4f 	dsb	sy
 80191b0:	b662      	cpsie	i
 80191b2:	607b      	str	r3, [r7, #4]
}
 80191b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80191b6:	f7ff f8d5 	bl	8018364 <xTaskIncrementTick>
 80191ba:	4603      	mov	r3, r0
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d003      	beq.n	80191c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80191c0:	4b06      	ldr	r3, [pc, #24]	@ (80191dc <SysTick_Handler+0x44>)
 80191c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191c6:	601a      	str	r2, [r3, #0]
 80191c8:	2300      	movs	r3, #0
 80191ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80191cc:	683b      	ldr	r3, [r7, #0]
 80191ce:	f383 8811 	msr	BASEPRI, r3
}
 80191d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80191d4:	bf00      	nop
 80191d6:	3708      	adds	r7, #8
 80191d8:	46bd      	mov	sp, r7
 80191da:	bd80      	pop	{r7, pc}
 80191dc:	e000ed04 	.word	0xe000ed04

080191e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80191e0:	b480      	push	{r7}
 80191e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80191e4:	4b0b      	ldr	r3, [pc, #44]	@ (8019214 <vPortSetupTimerInterrupt+0x34>)
 80191e6:	2200      	movs	r2, #0
 80191e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80191ea:	4b0b      	ldr	r3, [pc, #44]	@ (8019218 <vPortSetupTimerInterrupt+0x38>)
 80191ec:	2200      	movs	r2, #0
 80191ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80191f0:	4b0a      	ldr	r3, [pc, #40]	@ (801921c <vPortSetupTimerInterrupt+0x3c>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	4a0a      	ldr	r2, [pc, #40]	@ (8019220 <vPortSetupTimerInterrupt+0x40>)
 80191f6:	fba2 2303 	umull	r2, r3, r2, r3
 80191fa:	099b      	lsrs	r3, r3, #6
 80191fc:	4a09      	ldr	r2, [pc, #36]	@ (8019224 <vPortSetupTimerInterrupt+0x44>)
 80191fe:	3b01      	subs	r3, #1
 8019200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019202:	4b04      	ldr	r3, [pc, #16]	@ (8019214 <vPortSetupTimerInterrupt+0x34>)
 8019204:	2207      	movs	r2, #7
 8019206:	601a      	str	r2, [r3, #0]
}
 8019208:	bf00      	nop
 801920a:	46bd      	mov	sp, r7
 801920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019210:	4770      	bx	lr
 8019212:	bf00      	nop
 8019214:	e000e010 	.word	0xe000e010
 8019218:	e000e018 	.word	0xe000e018
 801921c:	20000014 	.word	0x20000014
 8019220:	10624dd3 	.word	0x10624dd3
 8019224:	e000e014 	.word	0xe000e014

08019228 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019228:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019238 <vPortEnableVFP+0x10>
 801922c:	6801      	ldr	r1, [r0, #0]
 801922e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8019232:	6001      	str	r1, [r0, #0]
 8019234:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019236:	bf00      	nop
 8019238:	e000ed88 	.word	0xe000ed88

0801923c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801923c:	b480      	push	{r7}
 801923e:	b085      	sub	sp, #20
 8019240:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019242:	f3ef 8305 	mrs	r3, IPSR
 8019246:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	2b0f      	cmp	r3, #15
 801924c:	d917      	bls.n	801927e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801924e:	4a1a      	ldr	r2, [pc, #104]	@ (80192b8 <vPortValidateInterruptPriority+0x7c>)
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	4413      	add	r3, r2
 8019254:	781b      	ldrb	r3, [r3, #0]
 8019256:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019258:	4b18      	ldr	r3, [pc, #96]	@ (80192bc <vPortValidateInterruptPriority+0x80>)
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	7afa      	ldrb	r2, [r7, #11]
 801925e:	429a      	cmp	r2, r3
 8019260:	d20d      	bcs.n	801927e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8019262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019266:	b672      	cpsid	i
 8019268:	f383 8811 	msr	BASEPRI, r3
 801926c:	f3bf 8f6f 	isb	sy
 8019270:	f3bf 8f4f 	dsb	sy
 8019274:	b662      	cpsie	i
 8019276:	607b      	str	r3, [r7, #4]
}
 8019278:	bf00      	nop
 801927a:	bf00      	nop
 801927c:	e7fd      	b.n	801927a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801927e:	4b10      	ldr	r3, [pc, #64]	@ (80192c0 <vPortValidateInterruptPriority+0x84>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8019286:	4b0f      	ldr	r3, [pc, #60]	@ (80192c4 <vPortValidateInterruptPriority+0x88>)
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	429a      	cmp	r2, r3
 801928c:	d90d      	bls.n	80192aa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019292:	b672      	cpsid	i
 8019294:	f383 8811 	msr	BASEPRI, r3
 8019298:	f3bf 8f6f 	isb	sy
 801929c:	f3bf 8f4f 	dsb	sy
 80192a0:	b662      	cpsie	i
 80192a2:	603b      	str	r3, [r7, #0]
}
 80192a4:	bf00      	nop
 80192a6:	bf00      	nop
 80192a8:	e7fd      	b.n	80192a6 <vPortValidateInterruptPriority+0x6a>
	}
 80192aa:	bf00      	nop
 80192ac:	3714      	adds	r7, #20
 80192ae:	46bd      	mov	sp, r7
 80192b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b4:	4770      	bx	lr
 80192b6:	bf00      	nop
 80192b8:	e000e3f0 	.word	0xe000e3f0
 80192bc:	2000197c 	.word	0x2000197c
 80192c0:	e000ed0c 	.word	0xe000ed0c
 80192c4:	20001980 	.word	0x20001980

080192c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b08a      	sub	sp, #40	@ 0x28
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80192d0:	2300      	movs	r3, #0
 80192d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80192d4:	f7fe ff76 	bl	80181c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80192d8:	4b5f      	ldr	r3, [pc, #380]	@ (8019458 <pvPortMalloc+0x190>)
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d101      	bne.n	80192e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80192e0:	f000 f924 	bl	801952c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80192e4:	4b5d      	ldr	r3, [pc, #372]	@ (801945c <pvPortMalloc+0x194>)
 80192e6:	681a      	ldr	r2, [r3, #0]
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	4013      	ands	r3, r2
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	f040 8094 	bne.w	801941a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d020      	beq.n	801933a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80192f8:	2208      	movs	r2, #8
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	4413      	add	r3, r2
 80192fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	f003 0307 	and.w	r3, r3, #7
 8019306:	2b00      	cmp	r3, #0
 8019308:	d017      	beq.n	801933a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	f023 0307 	bic.w	r3, r3, #7
 8019310:	3308      	adds	r3, #8
 8019312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	f003 0307 	and.w	r3, r3, #7
 801931a:	2b00      	cmp	r3, #0
 801931c:	d00d      	beq.n	801933a <pvPortMalloc+0x72>
	__asm volatile
 801931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019322:	b672      	cpsid	i
 8019324:	f383 8811 	msr	BASEPRI, r3
 8019328:	f3bf 8f6f 	isb	sy
 801932c:	f3bf 8f4f 	dsb	sy
 8019330:	b662      	cpsie	i
 8019332:	617b      	str	r3, [r7, #20]
}
 8019334:	bf00      	nop
 8019336:	bf00      	nop
 8019338:	e7fd      	b.n	8019336 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d06c      	beq.n	801941a <pvPortMalloc+0x152>
 8019340:	4b47      	ldr	r3, [pc, #284]	@ (8019460 <pvPortMalloc+0x198>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	687a      	ldr	r2, [r7, #4]
 8019346:	429a      	cmp	r2, r3
 8019348:	d867      	bhi.n	801941a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801934a:	4b46      	ldr	r3, [pc, #280]	@ (8019464 <pvPortMalloc+0x19c>)
 801934c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801934e:	4b45      	ldr	r3, [pc, #276]	@ (8019464 <pvPortMalloc+0x19c>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019354:	e004      	b.n	8019360 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8019356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019358:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019362:	685b      	ldr	r3, [r3, #4]
 8019364:	687a      	ldr	r2, [r7, #4]
 8019366:	429a      	cmp	r2, r3
 8019368:	d903      	bls.n	8019372 <pvPortMalloc+0xaa>
 801936a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d1f1      	bne.n	8019356 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019372:	4b39      	ldr	r3, [pc, #228]	@ (8019458 <pvPortMalloc+0x190>)
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019378:	429a      	cmp	r2, r3
 801937a:	d04e      	beq.n	801941a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801937c:	6a3b      	ldr	r3, [r7, #32]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	2208      	movs	r2, #8
 8019382:	4413      	add	r3, r2
 8019384:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019388:	681a      	ldr	r2, [r3, #0]
 801938a:	6a3b      	ldr	r3, [r7, #32]
 801938c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019390:	685a      	ldr	r2, [r3, #4]
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	1ad2      	subs	r2, r2, r3
 8019396:	2308      	movs	r3, #8
 8019398:	005b      	lsls	r3, r3, #1
 801939a:	429a      	cmp	r2, r3
 801939c:	d922      	bls.n	80193e4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801939e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	4413      	add	r3, r2
 80193a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80193a6:	69bb      	ldr	r3, [r7, #24]
 80193a8:	f003 0307 	and.w	r3, r3, #7
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d00d      	beq.n	80193cc <pvPortMalloc+0x104>
	__asm volatile
 80193b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193b4:	b672      	cpsid	i
 80193b6:	f383 8811 	msr	BASEPRI, r3
 80193ba:	f3bf 8f6f 	isb	sy
 80193be:	f3bf 8f4f 	dsb	sy
 80193c2:	b662      	cpsie	i
 80193c4:	613b      	str	r3, [r7, #16]
}
 80193c6:	bf00      	nop
 80193c8:	bf00      	nop
 80193ca:	e7fd      	b.n	80193c8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80193cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ce:	685a      	ldr	r2, [r3, #4]
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	1ad2      	subs	r2, r2, r3
 80193d4:	69bb      	ldr	r3, [r7, #24]
 80193d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80193d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193da:	687a      	ldr	r2, [r7, #4]
 80193dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80193de:	69b8      	ldr	r0, [r7, #24]
 80193e0:	f000 f906 	bl	80195f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80193e4:	4b1e      	ldr	r3, [pc, #120]	@ (8019460 <pvPortMalloc+0x198>)
 80193e6:	681a      	ldr	r2, [r3, #0]
 80193e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ea:	685b      	ldr	r3, [r3, #4]
 80193ec:	1ad3      	subs	r3, r2, r3
 80193ee:	4a1c      	ldr	r2, [pc, #112]	@ (8019460 <pvPortMalloc+0x198>)
 80193f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80193f2:	4b1b      	ldr	r3, [pc, #108]	@ (8019460 <pvPortMalloc+0x198>)
 80193f4:	681a      	ldr	r2, [r3, #0]
 80193f6:	4b1c      	ldr	r3, [pc, #112]	@ (8019468 <pvPortMalloc+0x1a0>)
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	429a      	cmp	r2, r3
 80193fc:	d203      	bcs.n	8019406 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80193fe:	4b18      	ldr	r3, [pc, #96]	@ (8019460 <pvPortMalloc+0x198>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	4a19      	ldr	r2, [pc, #100]	@ (8019468 <pvPortMalloc+0x1a0>)
 8019404:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019408:	685a      	ldr	r2, [r3, #4]
 801940a:	4b14      	ldr	r3, [pc, #80]	@ (801945c <pvPortMalloc+0x194>)
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	431a      	orrs	r2, r3
 8019410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019412:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019416:	2200      	movs	r2, #0
 8019418:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801941a:	f7fe fee1 	bl	80181e0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801941e:	69fb      	ldr	r3, [r7, #28]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d101      	bne.n	8019428 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8019424:	f7e8 f801 	bl	800142a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019428:	69fb      	ldr	r3, [r7, #28]
 801942a:	f003 0307 	and.w	r3, r3, #7
 801942e:	2b00      	cmp	r3, #0
 8019430:	d00d      	beq.n	801944e <pvPortMalloc+0x186>
	__asm volatile
 8019432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019436:	b672      	cpsid	i
 8019438:	f383 8811 	msr	BASEPRI, r3
 801943c:	f3bf 8f6f 	isb	sy
 8019440:	f3bf 8f4f 	dsb	sy
 8019444:	b662      	cpsie	i
 8019446:	60fb      	str	r3, [r7, #12]
}
 8019448:	bf00      	nop
 801944a:	bf00      	nop
 801944c:	e7fd      	b.n	801944a <pvPortMalloc+0x182>
	return pvReturn;
 801944e:	69fb      	ldr	r3, [r7, #28]
}
 8019450:	4618      	mov	r0, r3
 8019452:	3728      	adds	r7, #40	@ 0x28
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}
 8019458:	2000998c 	.word	0x2000998c
 801945c:	20009998 	.word	0x20009998
 8019460:	20009990 	.word	0x20009990
 8019464:	20009984 	.word	0x20009984
 8019468:	20009994 	.word	0x20009994

0801946c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b086      	sub	sp, #24
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	2b00      	cmp	r3, #0
 801947c:	d04e      	beq.n	801951c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801947e:	2308      	movs	r3, #8
 8019480:	425b      	negs	r3, r3
 8019482:	697a      	ldr	r2, [r7, #20]
 8019484:	4413      	add	r3, r2
 8019486:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019488:	697b      	ldr	r3, [r7, #20]
 801948a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801948c:	693b      	ldr	r3, [r7, #16]
 801948e:	685a      	ldr	r2, [r3, #4]
 8019490:	4b24      	ldr	r3, [pc, #144]	@ (8019524 <vPortFree+0xb8>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	4013      	ands	r3, r2
 8019496:	2b00      	cmp	r3, #0
 8019498:	d10d      	bne.n	80194b6 <vPortFree+0x4a>
	__asm volatile
 801949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801949e:	b672      	cpsid	i
 80194a0:	f383 8811 	msr	BASEPRI, r3
 80194a4:	f3bf 8f6f 	isb	sy
 80194a8:	f3bf 8f4f 	dsb	sy
 80194ac:	b662      	cpsie	i
 80194ae:	60fb      	str	r3, [r7, #12]
}
 80194b0:	bf00      	nop
 80194b2:	bf00      	nop
 80194b4:	e7fd      	b.n	80194b2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80194b6:	693b      	ldr	r3, [r7, #16]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d00d      	beq.n	80194da <vPortFree+0x6e>
	__asm volatile
 80194be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194c2:	b672      	cpsid	i
 80194c4:	f383 8811 	msr	BASEPRI, r3
 80194c8:	f3bf 8f6f 	isb	sy
 80194cc:	f3bf 8f4f 	dsb	sy
 80194d0:	b662      	cpsie	i
 80194d2:	60bb      	str	r3, [r7, #8]
}
 80194d4:	bf00      	nop
 80194d6:	bf00      	nop
 80194d8:	e7fd      	b.n	80194d6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	685a      	ldr	r2, [r3, #4]
 80194de:	4b11      	ldr	r3, [pc, #68]	@ (8019524 <vPortFree+0xb8>)
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	4013      	ands	r3, r2
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d019      	beq.n	801951c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80194e8:	693b      	ldr	r3, [r7, #16]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d115      	bne.n	801951c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80194f0:	693b      	ldr	r3, [r7, #16]
 80194f2:	685a      	ldr	r2, [r3, #4]
 80194f4:	4b0b      	ldr	r3, [pc, #44]	@ (8019524 <vPortFree+0xb8>)
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	43db      	mvns	r3, r3
 80194fa:	401a      	ands	r2, r3
 80194fc:	693b      	ldr	r3, [r7, #16]
 80194fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019500:	f7fe fe60 	bl	80181c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019504:	693b      	ldr	r3, [r7, #16]
 8019506:	685a      	ldr	r2, [r3, #4]
 8019508:	4b07      	ldr	r3, [pc, #28]	@ (8019528 <vPortFree+0xbc>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	4413      	add	r3, r2
 801950e:	4a06      	ldr	r2, [pc, #24]	@ (8019528 <vPortFree+0xbc>)
 8019510:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019512:	6938      	ldr	r0, [r7, #16]
 8019514:	f000 f86c 	bl	80195f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8019518:	f7fe fe62 	bl	80181e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801951c:	bf00      	nop
 801951e:	3718      	adds	r7, #24
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}
 8019524:	20009998 	.word	0x20009998
 8019528:	20009990 	.word	0x20009990

0801952c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801952c:	b480      	push	{r7}
 801952e:	b085      	sub	sp, #20
 8019530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019538:	4b27      	ldr	r3, [pc, #156]	@ (80195d8 <prvHeapInit+0xac>)
 801953a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	f003 0307 	and.w	r3, r3, #7
 8019542:	2b00      	cmp	r3, #0
 8019544:	d00c      	beq.n	8019560 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	3307      	adds	r3, #7
 801954a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	f023 0307 	bic.w	r3, r3, #7
 8019552:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019554:	68ba      	ldr	r2, [r7, #8]
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	1ad3      	subs	r3, r2, r3
 801955a:	4a1f      	ldr	r2, [pc, #124]	@ (80195d8 <prvHeapInit+0xac>)
 801955c:	4413      	add	r3, r2
 801955e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019564:	4a1d      	ldr	r2, [pc, #116]	@ (80195dc <prvHeapInit+0xb0>)
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801956a:	4b1c      	ldr	r3, [pc, #112]	@ (80195dc <prvHeapInit+0xb0>)
 801956c:	2200      	movs	r2, #0
 801956e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	68ba      	ldr	r2, [r7, #8]
 8019574:	4413      	add	r3, r2
 8019576:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019578:	2208      	movs	r2, #8
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	1a9b      	subs	r3, r3, r2
 801957e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	f023 0307 	bic.w	r3, r3, #7
 8019586:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	4a15      	ldr	r2, [pc, #84]	@ (80195e0 <prvHeapInit+0xb4>)
 801958c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801958e:	4b14      	ldr	r3, [pc, #80]	@ (80195e0 <prvHeapInit+0xb4>)
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	2200      	movs	r2, #0
 8019594:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019596:	4b12      	ldr	r3, [pc, #72]	@ (80195e0 <prvHeapInit+0xb4>)
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	2200      	movs	r2, #0
 801959c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80195a2:	683b      	ldr	r3, [r7, #0]
 80195a4:	68fa      	ldr	r2, [r7, #12]
 80195a6:	1ad2      	subs	r2, r2, r3
 80195a8:	683b      	ldr	r3, [r7, #0]
 80195aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80195ac:	4b0c      	ldr	r3, [pc, #48]	@ (80195e0 <prvHeapInit+0xb4>)
 80195ae:	681a      	ldr	r2, [r3, #0]
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80195b4:	683b      	ldr	r3, [r7, #0]
 80195b6:	685b      	ldr	r3, [r3, #4]
 80195b8:	4a0a      	ldr	r2, [pc, #40]	@ (80195e4 <prvHeapInit+0xb8>)
 80195ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80195bc:	683b      	ldr	r3, [r7, #0]
 80195be:	685b      	ldr	r3, [r3, #4]
 80195c0:	4a09      	ldr	r2, [pc, #36]	@ (80195e8 <prvHeapInit+0xbc>)
 80195c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80195c4:	4b09      	ldr	r3, [pc, #36]	@ (80195ec <prvHeapInit+0xc0>)
 80195c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80195ca:	601a      	str	r2, [r3, #0]
}
 80195cc:	bf00      	nop
 80195ce:	3714      	adds	r7, #20
 80195d0:	46bd      	mov	sp, r7
 80195d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d6:	4770      	bx	lr
 80195d8:	20001984 	.word	0x20001984
 80195dc:	20009984 	.word	0x20009984
 80195e0:	2000998c 	.word	0x2000998c
 80195e4:	20009994 	.word	0x20009994
 80195e8:	20009990 	.word	0x20009990
 80195ec:	20009998 	.word	0x20009998

080195f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80195f0:	b480      	push	{r7}
 80195f2:	b085      	sub	sp, #20
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80195f8:	4b28      	ldr	r3, [pc, #160]	@ (801969c <prvInsertBlockIntoFreeList+0xac>)
 80195fa:	60fb      	str	r3, [r7, #12]
 80195fc:	e002      	b.n	8019604 <prvInsertBlockIntoFreeList+0x14>
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	60fb      	str	r3, [r7, #12]
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	687a      	ldr	r2, [r7, #4]
 801960a:	429a      	cmp	r2, r3
 801960c:	d8f7      	bhi.n	80195fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	685b      	ldr	r3, [r3, #4]
 8019616:	68ba      	ldr	r2, [r7, #8]
 8019618:	4413      	add	r3, r2
 801961a:	687a      	ldr	r2, [r7, #4]
 801961c:	429a      	cmp	r2, r3
 801961e:	d108      	bne.n	8019632 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	685a      	ldr	r2, [r3, #4]
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	685b      	ldr	r3, [r3, #4]
 8019628:	441a      	add	r2, r3
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	685b      	ldr	r3, [r3, #4]
 801963a:	68ba      	ldr	r2, [r7, #8]
 801963c:	441a      	add	r2, r3
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	429a      	cmp	r2, r3
 8019644:	d118      	bne.n	8019678 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	681a      	ldr	r2, [r3, #0]
 801964a:	4b15      	ldr	r3, [pc, #84]	@ (80196a0 <prvInsertBlockIntoFreeList+0xb0>)
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	429a      	cmp	r2, r3
 8019650:	d00d      	beq.n	801966e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	685a      	ldr	r2, [r3, #4]
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	685b      	ldr	r3, [r3, #4]
 801965c:	441a      	add	r2, r3
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	681a      	ldr	r2, [r3, #0]
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	601a      	str	r2, [r3, #0]
 801966c:	e008      	b.n	8019680 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801966e:	4b0c      	ldr	r3, [pc, #48]	@ (80196a0 <prvInsertBlockIntoFreeList+0xb0>)
 8019670:	681a      	ldr	r2, [r3, #0]
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	601a      	str	r2, [r3, #0]
 8019676:	e003      	b.n	8019680 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	681a      	ldr	r2, [r3, #0]
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019680:	68fa      	ldr	r2, [r7, #12]
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	429a      	cmp	r2, r3
 8019686:	d002      	beq.n	801968e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	687a      	ldr	r2, [r7, #4]
 801968c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801968e:	bf00      	nop
 8019690:	3714      	adds	r7, #20
 8019692:	46bd      	mov	sp, r7
 8019694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019698:	4770      	bx	lr
 801969a:	bf00      	nop
 801969c:	20009984 	.word	0x20009984
 80196a0:	2000998c 	.word	0x2000998c

080196a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80196a8:	2201      	movs	r2, #1
 80196aa:	490e      	ldr	r1, [pc, #56]	@ (80196e4 <MX_USB_HOST_Init+0x40>)
 80196ac:	480e      	ldr	r0, [pc, #56]	@ (80196e8 <MX_USB_HOST_Init+0x44>)
 80196ae:	f7f8 fde5 	bl	801227c <USBH_Init>
 80196b2:	4603      	mov	r3, r0
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d001      	beq.n	80196bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80196b8:	f7e9 fccc 	bl	8003054 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80196bc:	490b      	ldr	r1, [pc, #44]	@ (80196ec <MX_USB_HOST_Init+0x48>)
 80196be:	480a      	ldr	r0, [pc, #40]	@ (80196e8 <MX_USB_HOST_Init+0x44>)
 80196c0:	f7f8 feaf 	bl	8012422 <USBH_RegisterClass>
 80196c4:	4603      	mov	r3, r0
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d001      	beq.n	80196ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80196ca:	f7e9 fcc3 	bl	8003054 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80196ce:	4806      	ldr	r0, [pc, #24]	@ (80196e8 <MX_USB_HOST_Init+0x44>)
 80196d0:	f7f8 ff33 	bl	801253a <USBH_Start>
 80196d4:	4603      	mov	r3, r0
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d001      	beq.n	80196de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80196da:	f7e9 fcbb 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80196de:	bf00      	nop
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	080196f1 	.word	0x080196f1
 80196e8:	2000999c 	.word	0x2000999c
 80196ec:	20000068 	.word	0x20000068

080196f0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80196f0:	b480      	push	{r7}
 80196f2:	b083      	sub	sp, #12
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	6078      	str	r0, [r7, #4]
 80196f8:	460b      	mov	r3, r1
 80196fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80196fc:	78fb      	ldrb	r3, [r7, #3]
 80196fe:	3b01      	subs	r3, #1
 8019700:	2b04      	cmp	r3, #4
 8019702:	d819      	bhi.n	8019738 <USBH_UserProcess+0x48>
 8019704:	a201      	add	r2, pc, #4	@ (adr r2, 801970c <USBH_UserProcess+0x1c>)
 8019706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801970a:	bf00      	nop
 801970c:	08019739 	.word	0x08019739
 8019710:	08019729 	.word	0x08019729
 8019714:	08019739 	.word	0x08019739
 8019718:	08019731 	.word	0x08019731
 801971c:	08019721 	.word	0x08019721
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019720:	4b09      	ldr	r3, [pc, #36]	@ (8019748 <USBH_UserProcess+0x58>)
 8019722:	2203      	movs	r2, #3
 8019724:	701a      	strb	r2, [r3, #0]
  break;
 8019726:	e008      	b.n	801973a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8019728:	4b07      	ldr	r3, [pc, #28]	@ (8019748 <USBH_UserProcess+0x58>)
 801972a:	2202      	movs	r2, #2
 801972c:	701a      	strb	r2, [r3, #0]
  break;
 801972e:	e004      	b.n	801973a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019730:	4b05      	ldr	r3, [pc, #20]	@ (8019748 <USBH_UserProcess+0x58>)
 8019732:	2201      	movs	r2, #1
 8019734:	701a      	strb	r2, [r3, #0]
  break;
 8019736:	e000      	b.n	801973a <USBH_UserProcess+0x4a>

  default:
  break;
 8019738:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801973a:	bf00      	nop
 801973c:	370c      	adds	r7, #12
 801973e:	46bd      	mov	sp, r7
 8019740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019744:	4770      	bx	lr
 8019746:	bf00      	nop
 8019748:	20009d80 	.word	0x20009d80

0801974c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b08a      	sub	sp, #40	@ 0x28
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019754:	f107 0314 	add.w	r3, r7, #20
 8019758:	2200      	movs	r2, #0
 801975a:	601a      	str	r2, [r3, #0]
 801975c:	605a      	str	r2, [r3, #4]
 801975e:	609a      	str	r2, [r3, #8]
 8019760:	60da      	str	r2, [r3, #12]
 8019762:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801976c:	d13c      	bne.n	80197e8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801976e:	4b20      	ldr	r3, [pc, #128]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 8019770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019772:	4a1f      	ldr	r2, [pc, #124]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 8019774:	f043 0301 	orr.w	r3, r3, #1
 8019778:	6313      	str	r3, [r2, #48]	@ 0x30
 801977a:	4b1d      	ldr	r3, [pc, #116]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 801977c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801977e:	f003 0301 	and.w	r3, r3, #1
 8019782:	613b      	str	r3, [r7, #16]
 8019784:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8019786:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801978a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801978c:	2302      	movs	r3, #2
 801978e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019790:	2300      	movs	r3, #0
 8019792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019794:	2303      	movs	r3, #3
 8019796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019798:	230a      	movs	r3, #10
 801979a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801979c:	f107 0314 	add.w	r3, r7, #20
 80197a0:	4619      	mov	r1, r3
 80197a2:	4814      	ldr	r0, [pc, #80]	@ (80197f4 <HAL_HCD_MspInit+0xa8>)
 80197a4:	f7ed fb3e 	bl	8006e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80197a8:	4b11      	ldr	r3, [pc, #68]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 80197aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80197ac:	4a10      	ldr	r2, [pc, #64]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 80197ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80197b2:	6353      	str	r3, [r2, #52]	@ 0x34
 80197b4:	4b0e      	ldr	r3, [pc, #56]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 80197b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80197b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80197bc:	60fb      	str	r3, [r7, #12]
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	4b0b      	ldr	r3, [pc, #44]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 80197c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197c4:	4a0a      	ldr	r2, [pc, #40]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 80197c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80197ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80197cc:	4b08      	ldr	r3, [pc, #32]	@ (80197f0 <HAL_HCD_MspInit+0xa4>)
 80197ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80197d4:	60bb      	str	r3, [r7, #8]
 80197d6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80197d8:	2200      	movs	r2, #0
 80197da:	2105      	movs	r1, #5
 80197dc:	2043      	movs	r0, #67	@ 0x43
 80197de:	f7eb ffdd 	bl	800579c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80197e2:	2043      	movs	r0, #67	@ 0x43
 80197e4:	f7eb fff6 	bl	80057d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80197e8:	bf00      	nop
 80197ea:	3728      	adds	r7, #40	@ 0x28
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd80      	pop	{r7, pc}
 80197f0:	40023800 	.word	0x40023800
 80197f4:	40020000 	.word	0x40020000

080197f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80197f8:	b580      	push	{r7, lr}
 80197fa:	b082      	sub	sp, #8
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019806:	4618      	mov	r0, r3
 8019808:	f7f9 facf 	bl	8012daa <USBH_LL_IncTimer>
}
 801980c:	bf00      	nop
 801980e:	3708      	adds	r7, #8
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}

08019814 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b082      	sub	sp, #8
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019822:	4618      	mov	r0, r3
 8019824:	f7f9 fb0f 	bl	8012e46 <USBH_LL_Connect>
}
 8019828:	bf00      	nop
 801982a:	3708      	adds	r7, #8
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}

08019830 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b082      	sub	sp, #8
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801983e:	4618      	mov	r0, r3
 8019840:	f7f9 fb1c 	bl	8012e7c <USBH_LL_Disconnect>
}
 8019844:	bf00      	nop
 8019846:	3708      	adds	r7, #8
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}

0801984c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801984c:	b580      	push	{r7, lr}
 801984e:	b082      	sub	sp, #8
 8019850:	af00      	add	r7, sp, #0
 8019852:	6078      	str	r0, [r7, #4]
 8019854:	460b      	mov	r3, r1
 8019856:	70fb      	strb	r3, [r7, #3]
 8019858:	4613      	mov	r3, r2
 801985a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019862:	4618      	mov	r0, r3
 8019864:	f7f9 fb70 	bl	8012f48 <USBH_LL_NotifyURBChange>
#endif
}
 8019868:	bf00      	nop
 801986a:	3708      	adds	r7, #8
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}

08019870 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b082      	sub	sp, #8
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801987e:	4618      	mov	r0, r3
 8019880:	f7f9 fabd 	bl	8012dfe <USBH_LL_PortEnabled>
}
 8019884:	bf00      	nop
 8019886:	3708      	adds	r7, #8
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}

0801988c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b082      	sub	sp, #8
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801989a:	4618      	mov	r0, r3
 801989c:	f7f9 fac1 	bl	8012e22 <USBH_LL_PortDisabled>
}
 80198a0:	bf00      	nop
 80198a2:	3708      	adds	r7, #8
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}

080198a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b082      	sub	sp, #8
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80198b6:	2b01      	cmp	r3, #1
 80198b8:	d12a      	bne.n	8019910 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80198ba:	4a18      	ldr	r2, [pc, #96]	@ (801991c <USBH_LL_Init+0x74>)
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	4a15      	ldr	r2, [pc, #84]	@ (801991c <USBH_LL_Init+0x74>)
 80198c6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80198ca:	4b14      	ldr	r3, [pc, #80]	@ (801991c <USBH_LL_Init+0x74>)
 80198cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80198d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80198d2:	4b12      	ldr	r3, [pc, #72]	@ (801991c <USBH_LL_Init+0x74>)
 80198d4:	2208      	movs	r2, #8
 80198d6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80198d8:	4b10      	ldr	r3, [pc, #64]	@ (801991c <USBH_LL_Init+0x74>)
 80198da:	2201      	movs	r2, #1
 80198dc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80198de:	4b0f      	ldr	r3, [pc, #60]	@ (801991c <USBH_LL_Init+0x74>)
 80198e0:	2200      	movs	r2, #0
 80198e2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80198e4:	4b0d      	ldr	r3, [pc, #52]	@ (801991c <USBH_LL_Init+0x74>)
 80198e6:	2202      	movs	r2, #2
 80198e8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80198ea:	4b0c      	ldr	r3, [pc, #48]	@ (801991c <USBH_LL_Init+0x74>)
 80198ec:	2200      	movs	r2, #0
 80198ee:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80198f0:	480a      	ldr	r0, [pc, #40]	@ (801991c <USBH_LL_Init+0x74>)
 80198f2:	f7ed fc5c 	bl	80071ae <HAL_HCD_Init>
 80198f6:	4603      	mov	r3, r0
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d001      	beq.n	8019900 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80198fc:	f7e9 fbaa 	bl	8003054 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019900:	4806      	ldr	r0, [pc, #24]	@ (801991c <USBH_LL_Init+0x74>)
 8019902:	f7ee f8bd 	bl	8007a80 <HAL_HCD_GetCurrentFrame>
 8019906:	4603      	mov	r3, r0
 8019908:	4619      	mov	r1, r3
 801990a:	6878      	ldr	r0, [r7, #4]
 801990c:	f7f9 fa3e 	bl	8012d8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019910:	2300      	movs	r3, #0
}
 8019912:	4618      	mov	r0, r3
 8019914:	3708      	adds	r7, #8
 8019916:	46bd      	mov	sp, r7
 8019918:	bd80      	pop	{r7, pc}
 801991a:	bf00      	nop
 801991c:	20009d84 	.word	0x20009d84

08019920 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b084      	sub	sp, #16
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019928:	2300      	movs	r3, #0
 801992a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801992c:	2300      	movs	r3, #0
 801992e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019936:	4618      	mov	r0, r3
 8019938:	f7ee f82a 	bl	8007990 <HAL_HCD_Start>
 801993c:	4603      	mov	r3, r0
 801993e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019940:	7bfb      	ldrb	r3, [r7, #15]
 8019942:	4618      	mov	r0, r3
 8019944:	f000 f95e 	bl	8019c04 <USBH_Get_USB_Status>
 8019948:	4603      	mov	r3, r0
 801994a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801994c:	7bbb      	ldrb	r3, [r7, #14]
}
 801994e:	4618      	mov	r0, r3
 8019950:	3710      	adds	r7, #16
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}

08019956 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019956:	b580      	push	{r7, lr}
 8019958:	b084      	sub	sp, #16
 801995a:	af00      	add	r7, sp, #0
 801995c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801995e:	2300      	movs	r3, #0
 8019960:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019962:	2300      	movs	r3, #0
 8019964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801996c:	4618      	mov	r0, r3
 801996e:	f7ee f832 	bl	80079d6 <HAL_HCD_Stop>
 8019972:	4603      	mov	r3, r0
 8019974:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019976:	7bfb      	ldrb	r3, [r7, #15]
 8019978:	4618      	mov	r0, r3
 801997a:	f000 f943 	bl	8019c04 <USBH_Get_USB_Status>
 801997e:	4603      	mov	r3, r0
 8019980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019982:	7bbb      	ldrb	r3, [r7, #14]
}
 8019984:	4618      	mov	r0, r3
 8019986:	3710      	adds	r7, #16
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}

0801998c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b084      	sub	sp, #16
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019994:	2301      	movs	r3, #1
 8019996:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801999e:	4618      	mov	r0, r3
 80199a0:	f7ee f87c 	bl	8007a9c <HAL_HCD_GetCurrentSpeed>
 80199a4:	4603      	mov	r3, r0
 80199a6:	2b02      	cmp	r3, #2
 80199a8:	d00c      	beq.n	80199c4 <USBH_LL_GetSpeed+0x38>
 80199aa:	2b02      	cmp	r3, #2
 80199ac:	d80d      	bhi.n	80199ca <USBH_LL_GetSpeed+0x3e>
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d002      	beq.n	80199b8 <USBH_LL_GetSpeed+0x2c>
 80199b2:	2b01      	cmp	r3, #1
 80199b4:	d003      	beq.n	80199be <USBH_LL_GetSpeed+0x32>
 80199b6:	e008      	b.n	80199ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80199b8:	2300      	movs	r3, #0
 80199ba:	73fb      	strb	r3, [r7, #15]
    break;
 80199bc:	e008      	b.n	80199d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80199be:	2301      	movs	r3, #1
 80199c0:	73fb      	strb	r3, [r7, #15]
    break;
 80199c2:	e005      	b.n	80199d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80199c4:	2302      	movs	r3, #2
 80199c6:	73fb      	strb	r3, [r7, #15]
    break;
 80199c8:	e002      	b.n	80199d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80199ca:	2301      	movs	r3, #1
 80199cc:	73fb      	strb	r3, [r7, #15]
    break;
 80199ce:	bf00      	nop
  }
  return  speed;
 80199d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80199d2:	4618      	mov	r0, r3
 80199d4:	3710      	adds	r7, #16
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd80      	pop	{r7, pc}

080199da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80199da:	b580      	push	{r7, lr}
 80199dc:	b084      	sub	sp, #16
 80199de:	af00      	add	r7, sp, #0
 80199e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199e2:	2300      	movs	r3, #0
 80199e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80199e6:	2300      	movs	r3, #0
 80199e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80199f0:	4618      	mov	r0, r3
 80199f2:	f7ee f80d 	bl	8007a10 <HAL_HCD_ResetPort>
 80199f6:	4603      	mov	r3, r0
 80199f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80199fa:	7bfb      	ldrb	r3, [r7, #15]
 80199fc:	4618      	mov	r0, r3
 80199fe:	f000 f901 	bl	8019c04 <USBH_Get_USB_Status>
 8019a02:	4603      	mov	r3, r0
 8019a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	3710      	adds	r7, #16
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd80      	pop	{r7, pc}

08019a10 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b082      	sub	sp, #8
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
 8019a18:	460b      	mov	r3, r1
 8019a1a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019a22:	78fa      	ldrb	r2, [r7, #3]
 8019a24:	4611      	mov	r1, r2
 8019a26:	4618      	mov	r0, r3
 8019a28:	f7ee f815 	bl	8007a56 <HAL_HCD_HC_GetXferCount>
 8019a2c:	4603      	mov	r3, r0
}
 8019a2e:	4618      	mov	r0, r3
 8019a30:	3708      	adds	r7, #8
 8019a32:	46bd      	mov	sp, r7
 8019a34:	bd80      	pop	{r7, pc}

08019a36 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019a36:	b590      	push	{r4, r7, lr}
 8019a38:	b089      	sub	sp, #36	@ 0x24
 8019a3a:	af04      	add	r7, sp, #16
 8019a3c:	6078      	str	r0, [r7, #4]
 8019a3e:	4608      	mov	r0, r1
 8019a40:	4611      	mov	r1, r2
 8019a42:	461a      	mov	r2, r3
 8019a44:	4603      	mov	r3, r0
 8019a46:	70fb      	strb	r3, [r7, #3]
 8019a48:	460b      	mov	r3, r1
 8019a4a:	70bb      	strb	r3, [r7, #2]
 8019a4c:	4613      	mov	r3, r2
 8019a4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a50:	2300      	movs	r3, #0
 8019a52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a54:	2300      	movs	r3, #0
 8019a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8019a5e:	787c      	ldrb	r4, [r7, #1]
 8019a60:	78ba      	ldrb	r2, [r7, #2]
 8019a62:	78f9      	ldrb	r1, [r7, #3]
 8019a64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019a66:	9302      	str	r3, [sp, #8]
 8019a68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019a6c:	9301      	str	r3, [sp, #4]
 8019a6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019a72:	9300      	str	r3, [sp, #0]
 8019a74:	4623      	mov	r3, r4
 8019a76:	f7ed fc01 	bl	800727c <HAL_HCD_HC_Init>
 8019a7a:	4603      	mov	r3, r0
 8019a7c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019a7e:	7bfb      	ldrb	r3, [r7, #15]
 8019a80:	4618      	mov	r0, r3
 8019a82:	f000 f8bf 	bl	8019c04 <USBH_Get_USB_Status>
 8019a86:	4603      	mov	r3, r0
 8019a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	3714      	adds	r7, #20
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd90      	pop	{r4, r7, pc}

08019a94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b084      	sub	sp, #16
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	6078      	str	r0, [r7, #4]
 8019a9c:	460b      	mov	r3, r1
 8019a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019aae:	78fa      	ldrb	r2, [r7, #3]
 8019ab0:	4611      	mov	r1, r2
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7ed fc9a 	bl	80073ec <HAL_HCD_HC_Halt>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019abc:	7bfb      	ldrb	r3, [r7, #15]
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f000 f8a0 	bl	8019c04 <USBH_Get_USB_Status>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8019aca:	4618      	mov	r0, r3
 8019acc:	3710      	adds	r7, #16
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}

08019ad2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019ad2:	b590      	push	{r4, r7, lr}
 8019ad4:	b089      	sub	sp, #36	@ 0x24
 8019ad6:	af04      	add	r7, sp, #16
 8019ad8:	6078      	str	r0, [r7, #4]
 8019ada:	4608      	mov	r0, r1
 8019adc:	4611      	mov	r1, r2
 8019ade:	461a      	mov	r2, r3
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	70fb      	strb	r3, [r7, #3]
 8019ae4:	460b      	mov	r3, r1
 8019ae6:	70bb      	strb	r3, [r7, #2]
 8019ae8:	4613      	mov	r3, r2
 8019aea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aec:	2300      	movs	r3, #0
 8019aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019af0:	2300      	movs	r3, #0
 8019af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8019afa:	787c      	ldrb	r4, [r7, #1]
 8019afc:	78ba      	ldrb	r2, [r7, #2]
 8019afe:	78f9      	ldrb	r1, [r7, #3]
 8019b00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019b04:	9303      	str	r3, [sp, #12]
 8019b06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019b08:	9302      	str	r3, [sp, #8]
 8019b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b0c:	9301      	str	r3, [sp, #4]
 8019b0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019b12:	9300      	str	r3, [sp, #0]
 8019b14:	4623      	mov	r3, r4
 8019b16:	f7ed fc8d 	bl	8007434 <HAL_HCD_HC_SubmitRequest>
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019b1e:	7bfb      	ldrb	r3, [r7, #15]
 8019b20:	4618      	mov	r0, r3
 8019b22:	f000 f86f 	bl	8019c04 <USBH_Get_USB_Status>
 8019b26:	4603      	mov	r3, r0
 8019b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	3714      	adds	r7, #20
 8019b30:	46bd      	mov	sp, r7
 8019b32:	bd90      	pop	{r4, r7, pc}

08019b34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019b34:	b580      	push	{r7, lr}
 8019b36:	b082      	sub	sp, #8
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
 8019b3c:	460b      	mov	r3, r1
 8019b3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019b46:	78fa      	ldrb	r2, [r7, #3]
 8019b48:	4611      	mov	r1, r2
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f7ed ff6e 	bl	8007a2c <HAL_HCD_HC_GetURBState>
 8019b50:	4603      	mov	r3, r0
}
 8019b52:	4618      	mov	r0, r3
 8019b54:	3708      	adds	r7, #8
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}

08019b5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019b5a:	b580      	push	{r7, lr}
 8019b5c:	b082      	sub	sp, #8
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	6078      	str	r0, [r7, #4]
 8019b62:	460b      	mov	r3, r1
 8019b64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8019b6c:	2b01      	cmp	r3, #1
 8019b6e:	d103      	bne.n	8019b78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019b70:	78fb      	ldrb	r3, [r7, #3]
 8019b72:	4618      	mov	r0, r3
 8019b74:	f000 f872 	bl	8019c5c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019b78:	20c8      	movs	r0, #200	@ 0xc8
 8019b7a:	f7eb fa9b 	bl	80050b4 <HAL_Delay>
  return USBH_OK;
 8019b7e:	2300      	movs	r3, #0
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3708      	adds	r7, #8
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b085      	sub	sp, #20
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
 8019b90:	460b      	mov	r3, r1
 8019b92:	70fb      	strb	r3, [r7, #3]
 8019b94:	4613      	mov	r3, r2
 8019b96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019b9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019ba0:	78fa      	ldrb	r2, [r7, #3]
 8019ba2:	68f9      	ldr	r1, [r7, #12]
 8019ba4:	4613      	mov	r3, r2
 8019ba6:	011b      	lsls	r3, r3, #4
 8019ba8:	1a9b      	subs	r3, r3, r2
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	440b      	add	r3, r1
 8019bae:	3317      	adds	r3, #23
 8019bb0:	781b      	ldrb	r3, [r3, #0]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d00a      	beq.n	8019bcc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019bb6:	78fa      	ldrb	r2, [r7, #3]
 8019bb8:	68f9      	ldr	r1, [r7, #12]
 8019bba:	4613      	mov	r3, r2
 8019bbc:	011b      	lsls	r3, r3, #4
 8019bbe:	1a9b      	subs	r3, r3, r2
 8019bc0:	009b      	lsls	r3, r3, #2
 8019bc2:	440b      	add	r3, r1
 8019bc4:	333c      	adds	r3, #60	@ 0x3c
 8019bc6:	78ba      	ldrb	r2, [r7, #2]
 8019bc8:	701a      	strb	r2, [r3, #0]
 8019bca:	e009      	b.n	8019be0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019bcc:	78fa      	ldrb	r2, [r7, #3]
 8019bce:	68f9      	ldr	r1, [r7, #12]
 8019bd0:	4613      	mov	r3, r2
 8019bd2:	011b      	lsls	r3, r3, #4
 8019bd4:	1a9b      	subs	r3, r3, r2
 8019bd6:	009b      	lsls	r3, r3, #2
 8019bd8:	440b      	add	r3, r1
 8019bda:	333d      	adds	r3, #61	@ 0x3d
 8019bdc:	78ba      	ldrb	r2, [r7, #2]
 8019bde:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019be0:	2300      	movs	r3, #0
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3714      	adds	r7, #20
 8019be6:	46bd      	mov	sp, r7
 8019be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bec:	4770      	bx	lr

08019bee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019bee:	b580      	push	{r7, lr}
 8019bf0:	b082      	sub	sp, #8
 8019bf2:	af00      	add	r7, sp, #0
 8019bf4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019bf6:	6878      	ldr	r0, [r7, #4]
 8019bf8:	f7eb fa5c 	bl	80050b4 <HAL_Delay>
}
 8019bfc:	bf00      	nop
 8019bfe:	3708      	adds	r7, #8
 8019c00:	46bd      	mov	sp, r7
 8019c02:	bd80      	pop	{r7, pc}

08019c04 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019c04:	b480      	push	{r7}
 8019c06:	b085      	sub	sp, #20
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	4603      	mov	r3, r0
 8019c0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c0e:	2300      	movs	r3, #0
 8019c10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019c12:	79fb      	ldrb	r3, [r7, #7]
 8019c14:	2b03      	cmp	r3, #3
 8019c16:	d817      	bhi.n	8019c48 <USBH_Get_USB_Status+0x44>
 8019c18:	a201      	add	r2, pc, #4	@ (adr r2, 8019c20 <USBH_Get_USB_Status+0x1c>)
 8019c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c1e:	bf00      	nop
 8019c20:	08019c31 	.word	0x08019c31
 8019c24:	08019c37 	.word	0x08019c37
 8019c28:	08019c3d 	.word	0x08019c3d
 8019c2c:	08019c43 	.word	0x08019c43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019c30:	2300      	movs	r3, #0
 8019c32:	73fb      	strb	r3, [r7, #15]
    break;
 8019c34:	e00b      	b.n	8019c4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019c36:	2302      	movs	r3, #2
 8019c38:	73fb      	strb	r3, [r7, #15]
    break;
 8019c3a:	e008      	b.n	8019c4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019c3c:	2301      	movs	r3, #1
 8019c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8019c40:	e005      	b.n	8019c4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019c42:	2302      	movs	r3, #2
 8019c44:	73fb      	strb	r3, [r7, #15]
    break;
 8019c46:	e002      	b.n	8019c4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019c48:	2302      	movs	r3, #2
 8019c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c4c:	bf00      	nop
  }
  return usb_status;
 8019c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	3714      	adds	r7, #20
 8019c54:	46bd      	mov	sp, r7
 8019c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5a:	4770      	bx	lr

08019c5c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b084      	sub	sp, #16
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	4603      	mov	r3, r0
 8019c64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019c66:	79fb      	ldrb	r3, [r7, #7]
 8019c68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019c6a:	79fb      	ldrb	r3, [r7, #7]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d102      	bne.n	8019c76 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8019c70:	2300      	movs	r3, #0
 8019c72:	73fb      	strb	r3, [r7, #15]
 8019c74:	e001      	b.n	8019c7a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8019c76:	2301      	movs	r3, #1
 8019c78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8019c7a:	7bfb      	ldrb	r3, [r7, #15]
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	2120      	movs	r1, #32
 8019c80:	4803      	ldr	r0, [pc, #12]	@ (8019c90 <MX_DriverVbusFS+0x34>)
 8019c82:	f7ed fa7b 	bl	800717c <HAL_GPIO_WritePin>
}
 8019c86:	bf00      	nop
 8019c88:	3710      	adds	r7, #16
 8019c8a:	46bd      	mov	sp, r7
 8019c8c:	bd80      	pop	{r7, pc}
 8019c8e:	bf00      	nop
 8019c90:	40020c00 	.word	0x40020c00

08019c94 <malloc>:
 8019c94:	4b02      	ldr	r3, [pc, #8]	@ (8019ca0 <malloc+0xc>)
 8019c96:	4601      	mov	r1, r0
 8019c98:	6818      	ldr	r0, [r3, #0]
 8019c9a:	f000 b82d 	b.w	8019cf8 <_malloc_r>
 8019c9e:	bf00      	nop
 8019ca0:	2000008c 	.word	0x2000008c

08019ca4 <free>:
 8019ca4:	4b02      	ldr	r3, [pc, #8]	@ (8019cb0 <free+0xc>)
 8019ca6:	4601      	mov	r1, r0
 8019ca8:	6818      	ldr	r0, [r3, #0]
 8019caa:	f000 b9c1 	b.w	801a030 <_free_r>
 8019cae:	bf00      	nop
 8019cb0:	2000008c 	.word	0x2000008c

08019cb4 <sbrk_aligned>:
 8019cb4:	b570      	push	{r4, r5, r6, lr}
 8019cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8019cf4 <sbrk_aligned+0x40>)
 8019cb8:	460c      	mov	r4, r1
 8019cba:	6831      	ldr	r1, [r6, #0]
 8019cbc:	4605      	mov	r5, r0
 8019cbe:	b911      	cbnz	r1, 8019cc6 <sbrk_aligned+0x12>
 8019cc0:	f000 f96c 	bl	8019f9c <_sbrk_r>
 8019cc4:	6030      	str	r0, [r6, #0]
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	4628      	mov	r0, r5
 8019cca:	f000 f967 	bl	8019f9c <_sbrk_r>
 8019cce:	1c43      	adds	r3, r0, #1
 8019cd0:	d103      	bne.n	8019cda <sbrk_aligned+0x26>
 8019cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8019cd6:	4620      	mov	r0, r4
 8019cd8:	bd70      	pop	{r4, r5, r6, pc}
 8019cda:	1cc4      	adds	r4, r0, #3
 8019cdc:	f024 0403 	bic.w	r4, r4, #3
 8019ce0:	42a0      	cmp	r0, r4
 8019ce2:	d0f8      	beq.n	8019cd6 <sbrk_aligned+0x22>
 8019ce4:	1a21      	subs	r1, r4, r0
 8019ce6:	4628      	mov	r0, r5
 8019ce8:	f000 f958 	bl	8019f9c <_sbrk_r>
 8019cec:	3001      	adds	r0, #1
 8019cee:	d1f2      	bne.n	8019cd6 <sbrk_aligned+0x22>
 8019cf0:	e7ef      	b.n	8019cd2 <sbrk_aligned+0x1e>
 8019cf2:	bf00      	nop
 8019cf4:	2000a164 	.word	0x2000a164

08019cf8 <_malloc_r>:
 8019cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cfc:	1ccd      	adds	r5, r1, #3
 8019cfe:	f025 0503 	bic.w	r5, r5, #3
 8019d02:	3508      	adds	r5, #8
 8019d04:	2d0c      	cmp	r5, #12
 8019d06:	bf38      	it	cc
 8019d08:	250c      	movcc	r5, #12
 8019d0a:	2d00      	cmp	r5, #0
 8019d0c:	4606      	mov	r6, r0
 8019d0e:	db01      	blt.n	8019d14 <_malloc_r+0x1c>
 8019d10:	42a9      	cmp	r1, r5
 8019d12:	d904      	bls.n	8019d1e <_malloc_r+0x26>
 8019d14:	230c      	movs	r3, #12
 8019d16:	6033      	str	r3, [r6, #0]
 8019d18:	2000      	movs	r0, #0
 8019d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019df4 <_malloc_r+0xfc>
 8019d22:	f000 f869 	bl	8019df8 <__malloc_lock>
 8019d26:	f8d8 3000 	ldr.w	r3, [r8]
 8019d2a:	461c      	mov	r4, r3
 8019d2c:	bb44      	cbnz	r4, 8019d80 <_malloc_r+0x88>
 8019d2e:	4629      	mov	r1, r5
 8019d30:	4630      	mov	r0, r6
 8019d32:	f7ff ffbf 	bl	8019cb4 <sbrk_aligned>
 8019d36:	1c43      	adds	r3, r0, #1
 8019d38:	4604      	mov	r4, r0
 8019d3a:	d158      	bne.n	8019dee <_malloc_r+0xf6>
 8019d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8019d40:	4627      	mov	r7, r4
 8019d42:	2f00      	cmp	r7, #0
 8019d44:	d143      	bne.n	8019dce <_malloc_r+0xd6>
 8019d46:	2c00      	cmp	r4, #0
 8019d48:	d04b      	beq.n	8019de2 <_malloc_r+0xea>
 8019d4a:	6823      	ldr	r3, [r4, #0]
 8019d4c:	4639      	mov	r1, r7
 8019d4e:	4630      	mov	r0, r6
 8019d50:	eb04 0903 	add.w	r9, r4, r3
 8019d54:	f000 f922 	bl	8019f9c <_sbrk_r>
 8019d58:	4581      	cmp	r9, r0
 8019d5a:	d142      	bne.n	8019de2 <_malloc_r+0xea>
 8019d5c:	6821      	ldr	r1, [r4, #0]
 8019d5e:	1a6d      	subs	r5, r5, r1
 8019d60:	4629      	mov	r1, r5
 8019d62:	4630      	mov	r0, r6
 8019d64:	f7ff ffa6 	bl	8019cb4 <sbrk_aligned>
 8019d68:	3001      	adds	r0, #1
 8019d6a:	d03a      	beq.n	8019de2 <_malloc_r+0xea>
 8019d6c:	6823      	ldr	r3, [r4, #0]
 8019d6e:	442b      	add	r3, r5
 8019d70:	6023      	str	r3, [r4, #0]
 8019d72:	f8d8 3000 	ldr.w	r3, [r8]
 8019d76:	685a      	ldr	r2, [r3, #4]
 8019d78:	bb62      	cbnz	r2, 8019dd4 <_malloc_r+0xdc>
 8019d7a:	f8c8 7000 	str.w	r7, [r8]
 8019d7e:	e00f      	b.n	8019da0 <_malloc_r+0xa8>
 8019d80:	6822      	ldr	r2, [r4, #0]
 8019d82:	1b52      	subs	r2, r2, r5
 8019d84:	d420      	bmi.n	8019dc8 <_malloc_r+0xd0>
 8019d86:	2a0b      	cmp	r2, #11
 8019d88:	d917      	bls.n	8019dba <_malloc_r+0xc2>
 8019d8a:	1961      	adds	r1, r4, r5
 8019d8c:	42a3      	cmp	r3, r4
 8019d8e:	6025      	str	r5, [r4, #0]
 8019d90:	bf18      	it	ne
 8019d92:	6059      	strne	r1, [r3, #4]
 8019d94:	6863      	ldr	r3, [r4, #4]
 8019d96:	bf08      	it	eq
 8019d98:	f8c8 1000 	streq.w	r1, [r8]
 8019d9c:	5162      	str	r2, [r4, r5]
 8019d9e:	604b      	str	r3, [r1, #4]
 8019da0:	4630      	mov	r0, r6
 8019da2:	f000 f82f 	bl	8019e04 <__malloc_unlock>
 8019da6:	f104 000b 	add.w	r0, r4, #11
 8019daa:	1d23      	adds	r3, r4, #4
 8019dac:	f020 0007 	bic.w	r0, r0, #7
 8019db0:	1ac2      	subs	r2, r0, r3
 8019db2:	bf1c      	itt	ne
 8019db4:	1a1b      	subne	r3, r3, r0
 8019db6:	50a3      	strne	r3, [r4, r2]
 8019db8:	e7af      	b.n	8019d1a <_malloc_r+0x22>
 8019dba:	6862      	ldr	r2, [r4, #4]
 8019dbc:	42a3      	cmp	r3, r4
 8019dbe:	bf0c      	ite	eq
 8019dc0:	f8c8 2000 	streq.w	r2, [r8]
 8019dc4:	605a      	strne	r2, [r3, #4]
 8019dc6:	e7eb      	b.n	8019da0 <_malloc_r+0xa8>
 8019dc8:	4623      	mov	r3, r4
 8019dca:	6864      	ldr	r4, [r4, #4]
 8019dcc:	e7ae      	b.n	8019d2c <_malloc_r+0x34>
 8019dce:	463c      	mov	r4, r7
 8019dd0:	687f      	ldr	r7, [r7, #4]
 8019dd2:	e7b6      	b.n	8019d42 <_malloc_r+0x4a>
 8019dd4:	461a      	mov	r2, r3
 8019dd6:	685b      	ldr	r3, [r3, #4]
 8019dd8:	42a3      	cmp	r3, r4
 8019dda:	d1fb      	bne.n	8019dd4 <_malloc_r+0xdc>
 8019ddc:	2300      	movs	r3, #0
 8019dde:	6053      	str	r3, [r2, #4]
 8019de0:	e7de      	b.n	8019da0 <_malloc_r+0xa8>
 8019de2:	230c      	movs	r3, #12
 8019de4:	6033      	str	r3, [r6, #0]
 8019de6:	4630      	mov	r0, r6
 8019de8:	f000 f80c 	bl	8019e04 <__malloc_unlock>
 8019dec:	e794      	b.n	8019d18 <_malloc_r+0x20>
 8019dee:	6005      	str	r5, [r0, #0]
 8019df0:	e7d6      	b.n	8019da0 <_malloc_r+0xa8>
 8019df2:	bf00      	nop
 8019df4:	2000a168 	.word	0x2000a168

08019df8 <__malloc_lock>:
 8019df8:	4801      	ldr	r0, [pc, #4]	@ (8019e00 <__malloc_lock+0x8>)
 8019dfa:	f000 b909 	b.w	801a010 <__retarget_lock_acquire_recursive>
 8019dfe:	bf00      	nop
 8019e00:	2000a2a8 	.word	0x2000a2a8

08019e04 <__malloc_unlock>:
 8019e04:	4801      	ldr	r0, [pc, #4]	@ (8019e0c <__malloc_unlock+0x8>)
 8019e06:	f000 b904 	b.w	801a012 <__retarget_lock_release_recursive>
 8019e0a:	bf00      	nop
 8019e0c:	2000a2a8 	.word	0x2000a2a8

08019e10 <sniprintf>:
 8019e10:	b40c      	push	{r2, r3}
 8019e12:	b530      	push	{r4, r5, lr}
 8019e14:	4b18      	ldr	r3, [pc, #96]	@ (8019e78 <sniprintf+0x68>)
 8019e16:	1e0c      	subs	r4, r1, #0
 8019e18:	681d      	ldr	r5, [r3, #0]
 8019e1a:	b09d      	sub	sp, #116	@ 0x74
 8019e1c:	da08      	bge.n	8019e30 <sniprintf+0x20>
 8019e1e:	238b      	movs	r3, #139	@ 0x8b
 8019e20:	602b      	str	r3, [r5, #0]
 8019e22:	f04f 30ff 	mov.w	r0, #4294967295
 8019e26:	b01d      	add	sp, #116	@ 0x74
 8019e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e2c:	b002      	add	sp, #8
 8019e2e:	4770      	bx	lr
 8019e30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019e34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e38:	f04f 0300 	mov.w	r3, #0
 8019e3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019e3e:	bf14      	ite	ne
 8019e40:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019e44:	4623      	moveq	r3, r4
 8019e46:	9304      	str	r3, [sp, #16]
 8019e48:	9307      	str	r3, [sp, #28]
 8019e4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019e4e:	9002      	str	r0, [sp, #8]
 8019e50:	9006      	str	r0, [sp, #24]
 8019e52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019e58:	ab21      	add	r3, sp, #132	@ 0x84
 8019e5a:	a902      	add	r1, sp, #8
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	9301      	str	r3, [sp, #4]
 8019e60:	f000 f98c 	bl	801a17c <_svfiprintf_r>
 8019e64:	1c43      	adds	r3, r0, #1
 8019e66:	bfbc      	itt	lt
 8019e68:	238b      	movlt	r3, #139	@ 0x8b
 8019e6a:	602b      	strlt	r3, [r5, #0]
 8019e6c:	2c00      	cmp	r4, #0
 8019e6e:	d0da      	beq.n	8019e26 <sniprintf+0x16>
 8019e70:	9b02      	ldr	r3, [sp, #8]
 8019e72:	2200      	movs	r2, #0
 8019e74:	701a      	strb	r2, [r3, #0]
 8019e76:	e7d6      	b.n	8019e26 <sniprintf+0x16>
 8019e78:	2000008c 	.word	0x2000008c

08019e7c <siprintf>:
 8019e7c:	b40e      	push	{r1, r2, r3}
 8019e7e:	b510      	push	{r4, lr}
 8019e80:	b09d      	sub	sp, #116	@ 0x74
 8019e82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019e84:	9002      	str	r0, [sp, #8]
 8019e86:	9006      	str	r0, [sp, #24]
 8019e88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019e8c:	480a      	ldr	r0, [pc, #40]	@ (8019eb8 <siprintf+0x3c>)
 8019e8e:	9107      	str	r1, [sp, #28]
 8019e90:	9104      	str	r1, [sp, #16]
 8019e92:	490a      	ldr	r1, [pc, #40]	@ (8019ebc <siprintf+0x40>)
 8019e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e98:	9105      	str	r1, [sp, #20]
 8019e9a:	2400      	movs	r4, #0
 8019e9c:	a902      	add	r1, sp, #8
 8019e9e:	6800      	ldr	r0, [r0, #0]
 8019ea0:	9301      	str	r3, [sp, #4]
 8019ea2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019ea4:	f000 f96a 	bl	801a17c <_svfiprintf_r>
 8019ea8:	9b02      	ldr	r3, [sp, #8]
 8019eaa:	701c      	strb	r4, [r3, #0]
 8019eac:	b01d      	add	sp, #116	@ 0x74
 8019eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019eb2:	b003      	add	sp, #12
 8019eb4:	4770      	bx	lr
 8019eb6:	bf00      	nop
 8019eb8:	2000008c 	.word	0x2000008c
 8019ebc:	ffff0208 	.word	0xffff0208

08019ec0 <_vsniprintf_r>:
 8019ec0:	b530      	push	{r4, r5, lr}
 8019ec2:	4614      	mov	r4, r2
 8019ec4:	2c00      	cmp	r4, #0
 8019ec6:	b09b      	sub	sp, #108	@ 0x6c
 8019ec8:	4605      	mov	r5, r0
 8019eca:	461a      	mov	r2, r3
 8019ecc:	da05      	bge.n	8019eda <_vsniprintf_r+0x1a>
 8019ece:	238b      	movs	r3, #139	@ 0x8b
 8019ed0:	6003      	str	r3, [r0, #0]
 8019ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8019ed6:	b01b      	add	sp, #108	@ 0x6c
 8019ed8:	bd30      	pop	{r4, r5, pc}
 8019eda:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019ede:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019ee2:	f04f 0300 	mov.w	r3, #0
 8019ee6:	9319      	str	r3, [sp, #100]	@ 0x64
 8019ee8:	bf14      	ite	ne
 8019eea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019eee:	4623      	moveq	r3, r4
 8019ef0:	9302      	str	r3, [sp, #8]
 8019ef2:	9305      	str	r3, [sp, #20]
 8019ef4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ef8:	9100      	str	r1, [sp, #0]
 8019efa:	9104      	str	r1, [sp, #16]
 8019efc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019f00:	4669      	mov	r1, sp
 8019f02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019f04:	f000 f93a 	bl	801a17c <_svfiprintf_r>
 8019f08:	1c43      	adds	r3, r0, #1
 8019f0a:	bfbc      	itt	lt
 8019f0c:	238b      	movlt	r3, #139	@ 0x8b
 8019f0e:	602b      	strlt	r3, [r5, #0]
 8019f10:	2c00      	cmp	r4, #0
 8019f12:	d0e0      	beq.n	8019ed6 <_vsniprintf_r+0x16>
 8019f14:	9b00      	ldr	r3, [sp, #0]
 8019f16:	2200      	movs	r2, #0
 8019f18:	701a      	strb	r2, [r3, #0]
 8019f1a:	e7dc      	b.n	8019ed6 <_vsniprintf_r+0x16>

08019f1c <vsniprintf>:
 8019f1c:	b507      	push	{r0, r1, r2, lr}
 8019f1e:	9300      	str	r3, [sp, #0]
 8019f20:	4613      	mov	r3, r2
 8019f22:	460a      	mov	r2, r1
 8019f24:	4601      	mov	r1, r0
 8019f26:	4803      	ldr	r0, [pc, #12]	@ (8019f34 <vsniprintf+0x18>)
 8019f28:	6800      	ldr	r0, [r0, #0]
 8019f2a:	f7ff ffc9 	bl	8019ec0 <_vsniprintf_r>
 8019f2e:	b003      	add	sp, #12
 8019f30:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f34:	2000008c 	.word	0x2000008c

08019f38 <memset>:
 8019f38:	4402      	add	r2, r0
 8019f3a:	4603      	mov	r3, r0
 8019f3c:	4293      	cmp	r3, r2
 8019f3e:	d100      	bne.n	8019f42 <memset+0xa>
 8019f40:	4770      	bx	lr
 8019f42:	f803 1b01 	strb.w	r1, [r3], #1
 8019f46:	e7f9      	b.n	8019f3c <memset+0x4>

08019f48 <strncpy>:
 8019f48:	b510      	push	{r4, lr}
 8019f4a:	3901      	subs	r1, #1
 8019f4c:	4603      	mov	r3, r0
 8019f4e:	b132      	cbz	r2, 8019f5e <strncpy+0x16>
 8019f50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019f54:	f803 4b01 	strb.w	r4, [r3], #1
 8019f58:	3a01      	subs	r2, #1
 8019f5a:	2c00      	cmp	r4, #0
 8019f5c:	d1f7      	bne.n	8019f4e <strncpy+0x6>
 8019f5e:	441a      	add	r2, r3
 8019f60:	2100      	movs	r1, #0
 8019f62:	4293      	cmp	r3, r2
 8019f64:	d100      	bne.n	8019f68 <strncpy+0x20>
 8019f66:	bd10      	pop	{r4, pc}
 8019f68:	f803 1b01 	strb.w	r1, [r3], #1
 8019f6c:	e7f9      	b.n	8019f62 <strncpy+0x1a>

08019f6e <strstr>:
 8019f6e:	780a      	ldrb	r2, [r1, #0]
 8019f70:	b570      	push	{r4, r5, r6, lr}
 8019f72:	b96a      	cbnz	r2, 8019f90 <strstr+0x22>
 8019f74:	bd70      	pop	{r4, r5, r6, pc}
 8019f76:	429a      	cmp	r2, r3
 8019f78:	d109      	bne.n	8019f8e <strstr+0x20>
 8019f7a:	460c      	mov	r4, r1
 8019f7c:	4605      	mov	r5, r0
 8019f7e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d0f6      	beq.n	8019f74 <strstr+0x6>
 8019f86:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019f8a:	429e      	cmp	r6, r3
 8019f8c:	d0f7      	beq.n	8019f7e <strstr+0x10>
 8019f8e:	3001      	adds	r0, #1
 8019f90:	7803      	ldrb	r3, [r0, #0]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d1ef      	bne.n	8019f76 <strstr+0x8>
 8019f96:	4618      	mov	r0, r3
 8019f98:	e7ec      	b.n	8019f74 <strstr+0x6>
	...

08019f9c <_sbrk_r>:
 8019f9c:	b538      	push	{r3, r4, r5, lr}
 8019f9e:	4d06      	ldr	r5, [pc, #24]	@ (8019fb8 <_sbrk_r+0x1c>)
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	4608      	mov	r0, r1
 8019fa6:	602b      	str	r3, [r5, #0]
 8019fa8:	f7ea fa36 	bl	8004418 <_sbrk>
 8019fac:	1c43      	adds	r3, r0, #1
 8019fae:	d102      	bne.n	8019fb6 <_sbrk_r+0x1a>
 8019fb0:	682b      	ldr	r3, [r5, #0]
 8019fb2:	b103      	cbz	r3, 8019fb6 <_sbrk_r+0x1a>
 8019fb4:	6023      	str	r3, [r4, #0]
 8019fb6:	bd38      	pop	{r3, r4, r5, pc}
 8019fb8:	2000a2a4 	.word	0x2000a2a4

08019fbc <__errno>:
 8019fbc:	4b01      	ldr	r3, [pc, #4]	@ (8019fc4 <__errno+0x8>)
 8019fbe:	6818      	ldr	r0, [r3, #0]
 8019fc0:	4770      	bx	lr
 8019fc2:	bf00      	nop
 8019fc4:	2000008c 	.word	0x2000008c

08019fc8 <__libc_init_array>:
 8019fc8:	b570      	push	{r4, r5, r6, lr}
 8019fca:	4d0d      	ldr	r5, [pc, #52]	@ (801a000 <__libc_init_array+0x38>)
 8019fcc:	4c0d      	ldr	r4, [pc, #52]	@ (801a004 <__libc_init_array+0x3c>)
 8019fce:	1b64      	subs	r4, r4, r5
 8019fd0:	10a4      	asrs	r4, r4, #2
 8019fd2:	2600      	movs	r6, #0
 8019fd4:	42a6      	cmp	r6, r4
 8019fd6:	d109      	bne.n	8019fec <__libc_init_array+0x24>
 8019fd8:	4d0b      	ldr	r5, [pc, #44]	@ (801a008 <__libc_init_array+0x40>)
 8019fda:	4c0c      	ldr	r4, [pc, #48]	@ (801a00c <__libc_init_array+0x44>)
 8019fdc:	f000 fba6 	bl	801a72c <_init>
 8019fe0:	1b64      	subs	r4, r4, r5
 8019fe2:	10a4      	asrs	r4, r4, #2
 8019fe4:	2600      	movs	r6, #0
 8019fe6:	42a6      	cmp	r6, r4
 8019fe8:	d105      	bne.n	8019ff6 <__libc_init_array+0x2e>
 8019fea:	bd70      	pop	{r4, r5, r6, pc}
 8019fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ff0:	4798      	blx	r3
 8019ff2:	3601      	adds	r6, #1
 8019ff4:	e7ee      	b.n	8019fd4 <__libc_init_array+0xc>
 8019ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ffa:	4798      	blx	r3
 8019ffc:	3601      	adds	r6, #1
 8019ffe:	e7f2      	b.n	8019fe6 <__libc_init_array+0x1e>
 801a000:	0801c6a8 	.word	0x0801c6a8
 801a004:	0801c6a8 	.word	0x0801c6a8
 801a008:	0801c6a8 	.word	0x0801c6a8
 801a00c:	0801c6ac 	.word	0x0801c6ac

0801a010 <__retarget_lock_acquire_recursive>:
 801a010:	4770      	bx	lr

0801a012 <__retarget_lock_release_recursive>:
 801a012:	4770      	bx	lr

0801a014 <memcpy>:
 801a014:	440a      	add	r2, r1
 801a016:	4291      	cmp	r1, r2
 801a018:	f100 33ff 	add.w	r3, r0, #4294967295
 801a01c:	d100      	bne.n	801a020 <memcpy+0xc>
 801a01e:	4770      	bx	lr
 801a020:	b510      	push	{r4, lr}
 801a022:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a026:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a02a:	4291      	cmp	r1, r2
 801a02c:	d1f9      	bne.n	801a022 <memcpy+0xe>
 801a02e:	bd10      	pop	{r4, pc}

0801a030 <_free_r>:
 801a030:	b538      	push	{r3, r4, r5, lr}
 801a032:	4605      	mov	r5, r0
 801a034:	2900      	cmp	r1, #0
 801a036:	d041      	beq.n	801a0bc <_free_r+0x8c>
 801a038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a03c:	1f0c      	subs	r4, r1, #4
 801a03e:	2b00      	cmp	r3, #0
 801a040:	bfb8      	it	lt
 801a042:	18e4      	addlt	r4, r4, r3
 801a044:	f7ff fed8 	bl	8019df8 <__malloc_lock>
 801a048:	4a1d      	ldr	r2, [pc, #116]	@ (801a0c0 <_free_r+0x90>)
 801a04a:	6813      	ldr	r3, [r2, #0]
 801a04c:	b933      	cbnz	r3, 801a05c <_free_r+0x2c>
 801a04e:	6063      	str	r3, [r4, #4]
 801a050:	6014      	str	r4, [r2, #0]
 801a052:	4628      	mov	r0, r5
 801a054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a058:	f7ff bed4 	b.w	8019e04 <__malloc_unlock>
 801a05c:	42a3      	cmp	r3, r4
 801a05e:	d908      	bls.n	801a072 <_free_r+0x42>
 801a060:	6820      	ldr	r0, [r4, #0]
 801a062:	1821      	adds	r1, r4, r0
 801a064:	428b      	cmp	r3, r1
 801a066:	bf01      	itttt	eq
 801a068:	6819      	ldreq	r1, [r3, #0]
 801a06a:	685b      	ldreq	r3, [r3, #4]
 801a06c:	1809      	addeq	r1, r1, r0
 801a06e:	6021      	streq	r1, [r4, #0]
 801a070:	e7ed      	b.n	801a04e <_free_r+0x1e>
 801a072:	461a      	mov	r2, r3
 801a074:	685b      	ldr	r3, [r3, #4]
 801a076:	b10b      	cbz	r3, 801a07c <_free_r+0x4c>
 801a078:	42a3      	cmp	r3, r4
 801a07a:	d9fa      	bls.n	801a072 <_free_r+0x42>
 801a07c:	6811      	ldr	r1, [r2, #0]
 801a07e:	1850      	adds	r0, r2, r1
 801a080:	42a0      	cmp	r0, r4
 801a082:	d10b      	bne.n	801a09c <_free_r+0x6c>
 801a084:	6820      	ldr	r0, [r4, #0]
 801a086:	4401      	add	r1, r0
 801a088:	1850      	adds	r0, r2, r1
 801a08a:	4283      	cmp	r3, r0
 801a08c:	6011      	str	r1, [r2, #0]
 801a08e:	d1e0      	bne.n	801a052 <_free_r+0x22>
 801a090:	6818      	ldr	r0, [r3, #0]
 801a092:	685b      	ldr	r3, [r3, #4]
 801a094:	6053      	str	r3, [r2, #4]
 801a096:	4408      	add	r0, r1
 801a098:	6010      	str	r0, [r2, #0]
 801a09a:	e7da      	b.n	801a052 <_free_r+0x22>
 801a09c:	d902      	bls.n	801a0a4 <_free_r+0x74>
 801a09e:	230c      	movs	r3, #12
 801a0a0:	602b      	str	r3, [r5, #0]
 801a0a2:	e7d6      	b.n	801a052 <_free_r+0x22>
 801a0a4:	6820      	ldr	r0, [r4, #0]
 801a0a6:	1821      	adds	r1, r4, r0
 801a0a8:	428b      	cmp	r3, r1
 801a0aa:	bf04      	itt	eq
 801a0ac:	6819      	ldreq	r1, [r3, #0]
 801a0ae:	685b      	ldreq	r3, [r3, #4]
 801a0b0:	6063      	str	r3, [r4, #4]
 801a0b2:	bf04      	itt	eq
 801a0b4:	1809      	addeq	r1, r1, r0
 801a0b6:	6021      	streq	r1, [r4, #0]
 801a0b8:	6054      	str	r4, [r2, #4]
 801a0ba:	e7ca      	b.n	801a052 <_free_r+0x22>
 801a0bc:	bd38      	pop	{r3, r4, r5, pc}
 801a0be:	bf00      	nop
 801a0c0:	2000a168 	.word	0x2000a168

0801a0c4 <__ssputs_r>:
 801a0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0c8:	688e      	ldr	r6, [r1, #8]
 801a0ca:	461f      	mov	r7, r3
 801a0cc:	42be      	cmp	r6, r7
 801a0ce:	680b      	ldr	r3, [r1, #0]
 801a0d0:	4682      	mov	sl, r0
 801a0d2:	460c      	mov	r4, r1
 801a0d4:	4690      	mov	r8, r2
 801a0d6:	d82d      	bhi.n	801a134 <__ssputs_r+0x70>
 801a0d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a0dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a0e0:	d026      	beq.n	801a130 <__ssputs_r+0x6c>
 801a0e2:	6965      	ldr	r5, [r4, #20]
 801a0e4:	6909      	ldr	r1, [r1, #16]
 801a0e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a0ea:	eba3 0901 	sub.w	r9, r3, r1
 801a0ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a0f2:	1c7b      	adds	r3, r7, #1
 801a0f4:	444b      	add	r3, r9
 801a0f6:	106d      	asrs	r5, r5, #1
 801a0f8:	429d      	cmp	r5, r3
 801a0fa:	bf38      	it	cc
 801a0fc:	461d      	movcc	r5, r3
 801a0fe:	0553      	lsls	r3, r2, #21
 801a100:	d527      	bpl.n	801a152 <__ssputs_r+0x8e>
 801a102:	4629      	mov	r1, r5
 801a104:	f7ff fdf8 	bl	8019cf8 <_malloc_r>
 801a108:	4606      	mov	r6, r0
 801a10a:	b360      	cbz	r0, 801a166 <__ssputs_r+0xa2>
 801a10c:	6921      	ldr	r1, [r4, #16]
 801a10e:	464a      	mov	r2, r9
 801a110:	f7ff ff80 	bl	801a014 <memcpy>
 801a114:	89a3      	ldrh	r3, [r4, #12]
 801a116:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a11e:	81a3      	strh	r3, [r4, #12]
 801a120:	6126      	str	r6, [r4, #16]
 801a122:	6165      	str	r5, [r4, #20]
 801a124:	444e      	add	r6, r9
 801a126:	eba5 0509 	sub.w	r5, r5, r9
 801a12a:	6026      	str	r6, [r4, #0]
 801a12c:	60a5      	str	r5, [r4, #8]
 801a12e:	463e      	mov	r6, r7
 801a130:	42be      	cmp	r6, r7
 801a132:	d900      	bls.n	801a136 <__ssputs_r+0x72>
 801a134:	463e      	mov	r6, r7
 801a136:	6820      	ldr	r0, [r4, #0]
 801a138:	4632      	mov	r2, r6
 801a13a:	4641      	mov	r1, r8
 801a13c:	f000 faa6 	bl	801a68c <memmove>
 801a140:	68a3      	ldr	r3, [r4, #8]
 801a142:	1b9b      	subs	r3, r3, r6
 801a144:	60a3      	str	r3, [r4, #8]
 801a146:	6823      	ldr	r3, [r4, #0]
 801a148:	4433      	add	r3, r6
 801a14a:	6023      	str	r3, [r4, #0]
 801a14c:	2000      	movs	r0, #0
 801a14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a152:	462a      	mov	r2, r5
 801a154:	f000 fab4 	bl	801a6c0 <_realloc_r>
 801a158:	4606      	mov	r6, r0
 801a15a:	2800      	cmp	r0, #0
 801a15c:	d1e0      	bne.n	801a120 <__ssputs_r+0x5c>
 801a15e:	6921      	ldr	r1, [r4, #16]
 801a160:	4650      	mov	r0, sl
 801a162:	f7ff ff65 	bl	801a030 <_free_r>
 801a166:	230c      	movs	r3, #12
 801a168:	f8ca 3000 	str.w	r3, [sl]
 801a16c:	89a3      	ldrh	r3, [r4, #12]
 801a16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a172:	81a3      	strh	r3, [r4, #12]
 801a174:	f04f 30ff 	mov.w	r0, #4294967295
 801a178:	e7e9      	b.n	801a14e <__ssputs_r+0x8a>
	...

0801a17c <_svfiprintf_r>:
 801a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a180:	4698      	mov	r8, r3
 801a182:	898b      	ldrh	r3, [r1, #12]
 801a184:	061b      	lsls	r3, r3, #24
 801a186:	b09d      	sub	sp, #116	@ 0x74
 801a188:	4607      	mov	r7, r0
 801a18a:	460d      	mov	r5, r1
 801a18c:	4614      	mov	r4, r2
 801a18e:	d510      	bpl.n	801a1b2 <_svfiprintf_r+0x36>
 801a190:	690b      	ldr	r3, [r1, #16]
 801a192:	b973      	cbnz	r3, 801a1b2 <_svfiprintf_r+0x36>
 801a194:	2140      	movs	r1, #64	@ 0x40
 801a196:	f7ff fdaf 	bl	8019cf8 <_malloc_r>
 801a19a:	6028      	str	r0, [r5, #0]
 801a19c:	6128      	str	r0, [r5, #16]
 801a19e:	b930      	cbnz	r0, 801a1ae <_svfiprintf_r+0x32>
 801a1a0:	230c      	movs	r3, #12
 801a1a2:	603b      	str	r3, [r7, #0]
 801a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1a8:	b01d      	add	sp, #116	@ 0x74
 801a1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ae:	2340      	movs	r3, #64	@ 0x40
 801a1b0:	616b      	str	r3, [r5, #20]
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a1b6:	2320      	movs	r3, #32
 801a1b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1c0:	2330      	movs	r3, #48	@ 0x30
 801a1c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a360 <_svfiprintf_r+0x1e4>
 801a1c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a1ca:	f04f 0901 	mov.w	r9, #1
 801a1ce:	4623      	mov	r3, r4
 801a1d0:	469a      	mov	sl, r3
 801a1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1d6:	b10a      	cbz	r2, 801a1dc <_svfiprintf_r+0x60>
 801a1d8:	2a25      	cmp	r2, #37	@ 0x25
 801a1da:	d1f9      	bne.n	801a1d0 <_svfiprintf_r+0x54>
 801a1dc:	ebba 0b04 	subs.w	fp, sl, r4
 801a1e0:	d00b      	beq.n	801a1fa <_svfiprintf_r+0x7e>
 801a1e2:	465b      	mov	r3, fp
 801a1e4:	4622      	mov	r2, r4
 801a1e6:	4629      	mov	r1, r5
 801a1e8:	4638      	mov	r0, r7
 801a1ea:	f7ff ff6b 	bl	801a0c4 <__ssputs_r>
 801a1ee:	3001      	adds	r0, #1
 801a1f0:	f000 80a7 	beq.w	801a342 <_svfiprintf_r+0x1c6>
 801a1f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1f6:	445a      	add	r2, fp
 801a1f8:	9209      	str	r2, [sp, #36]	@ 0x24
 801a1fa:	f89a 3000 	ldrb.w	r3, [sl]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	f000 809f 	beq.w	801a342 <_svfiprintf_r+0x1c6>
 801a204:	2300      	movs	r3, #0
 801a206:	f04f 32ff 	mov.w	r2, #4294967295
 801a20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a20e:	f10a 0a01 	add.w	sl, sl, #1
 801a212:	9304      	str	r3, [sp, #16]
 801a214:	9307      	str	r3, [sp, #28]
 801a216:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a21a:	931a      	str	r3, [sp, #104]	@ 0x68
 801a21c:	4654      	mov	r4, sl
 801a21e:	2205      	movs	r2, #5
 801a220:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a224:	484e      	ldr	r0, [pc, #312]	@ (801a360 <_svfiprintf_r+0x1e4>)
 801a226:	f7e6 f80b 	bl	8000240 <memchr>
 801a22a:	9a04      	ldr	r2, [sp, #16]
 801a22c:	b9d8      	cbnz	r0, 801a266 <_svfiprintf_r+0xea>
 801a22e:	06d0      	lsls	r0, r2, #27
 801a230:	bf44      	itt	mi
 801a232:	2320      	movmi	r3, #32
 801a234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a238:	0711      	lsls	r1, r2, #28
 801a23a:	bf44      	itt	mi
 801a23c:	232b      	movmi	r3, #43	@ 0x2b
 801a23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a242:	f89a 3000 	ldrb.w	r3, [sl]
 801a246:	2b2a      	cmp	r3, #42	@ 0x2a
 801a248:	d015      	beq.n	801a276 <_svfiprintf_r+0xfa>
 801a24a:	9a07      	ldr	r2, [sp, #28]
 801a24c:	4654      	mov	r4, sl
 801a24e:	2000      	movs	r0, #0
 801a250:	f04f 0c0a 	mov.w	ip, #10
 801a254:	4621      	mov	r1, r4
 801a256:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a25a:	3b30      	subs	r3, #48	@ 0x30
 801a25c:	2b09      	cmp	r3, #9
 801a25e:	d94b      	bls.n	801a2f8 <_svfiprintf_r+0x17c>
 801a260:	b1b0      	cbz	r0, 801a290 <_svfiprintf_r+0x114>
 801a262:	9207      	str	r2, [sp, #28]
 801a264:	e014      	b.n	801a290 <_svfiprintf_r+0x114>
 801a266:	eba0 0308 	sub.w	r3, r0, r8
 801a26a:	fa09 f303 	lsl.w	r3, r9, r3
 801a26e:	4313      	orrs	r3, r2
 801a270:	9304      	str	r3, [sp, #16]
 801a272:	46a2      	mov	sl, r4
 801a274:	e7d2      	b.n	801a21c <_svfiprintf_r+0xa0>
 801a276:	9b03      	ldr	r3, [sp, #12]
 801a278:	1d19      	adds	r1, r3, #4
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	9103      	str	r1, [sp, #12]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	bfbb      	ittet	lt
 801a282:	425b      	neglt	r3, r3
 801a284:	f042 0202 	orrlt.w	r2, r2, #2
 801a288:	9307      	strge	r3, [sp, #28]
 801a28a:	9307      	strlt	r3, [sp, #28]
 801a28c:	bfb8      	it	lt
 801a28e:	9204      	strlt	r2, [sp, #16]
 801a290:	7823      	ldrb	r3, [r4, #0]
 801a292:	2b2e      	cmp	r3, #46	@ 0x2e
 801a294:	d10a      	bne.n	801a2ac <_svfiprintf_r+0x130>
 801a296:	7863      	ldrb	r3, [r4, #1]
 801a298:	2b2a      	cmp	r3, #42	@ 0x2a
 801a29a:	d132      	bne.n	801a302 <_svfiprintf_r+0x186>
 801a29c:	9b03      	ldr	r3, [sp, #12]
 801a29e:	1d1a      	adds	r2, r3, #4
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	9203      	str	r2, [sp, #12]
 801a2a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a2a8:	3402      	adds	r4, #2
 801a2aa:	9305      	str	r3, [sp, #20]
 801a2ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a370 <_svfiprintf_r+0x1f4>
 801a2b0:	7821      	ldrb	r1, [r4, #0]
 801a2b2:	2203      	movs	r2, #3
 801a2b4:	4650      	mov	r0, sl
 801a2b6:	f7e5 ffc3 	bl	8000240 <memchr>
 801a2ba:	b138      	cbz	r0, 801a2cc <_svfiprintf_r+0x150>
 801a2bc:	9b04      	ldr	r3, [sp, #16]
 801a2be:	eba0 000a 	sub.w	r0, r0, sl
 801a2c2:	2240      	movs	r2, #64	@ 0x40
 801a2c4:	4082      	lsls	r2, r0
 801a2c6:	4313      	orrs	r3, r2
 801a2c8:	3401      	adds	r4, #1
 801a2ca:	9304      	str	r3, [sp, #16]
 801a2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2d0:	4824      	ldr	r0, [pc, #144]	@ (801a364 <_svfiprintf_r+0x1e8>)
 801a2d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a2d6:	2206      	movs	r2, #6
 801a2d8:	f7e5 ffb2 	bl	8000240 <memchr>
 801a2dc:	2800      	cmp	r0, #0
 801a2de:	d036      	beq.n	801a34e <_svfiprintf_r+0x1d2>
 801a2e0:	4b21      	ldr	r3, [pc, #132]	@ (801a368 <_svfiprintf_r+0x1ec>)
 801a2e2:	bb1b      	cbnz	r3, 801a32c <_svfiprintf_r+0x1b0>
 801a2e4:	9b03      	ldr	r3, [sp, #12]
 801a2e6:	3307      	adds	r3, #7
 801a2e8:	f023 0307 	bic.w	r3, r3, #7
 801a2ec:	3308      	adds	r3, #8
 801a2ee:	9303      	str	r3, [sp, #12]
 801a2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2f2:	4433      	add	r3, r6
 801a2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a2f6:	e76a      	b.n	801a1ce <_svfiprintf_r+0x52>
 801a2f8:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2fc:	460c      	mov	r4, r1
 801a2fe:	2001      	movs	r0, #1
 801a300:	e7a8      	b.n	801a254 <_svfiprintf_r+0xd8>
 801a302:	2300      	movs	r3, #0
 801a304:	3401      	adds	r4, #1
 801a306:	9305      	str	r3, [sp, #20]
 801a308:	4619      	mov	r1, r3
 801a30a:	f04f 0c0a 	mov.w	ip, #10
 801a30e:	4620      	mov	r0, r4
 801a310:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a314:	3a30      	subs	r2, #48	@ 0x30
 801a316:	2a09      	cmp	r2, #9
 801a318:	d903      	bls.n	801a322 <_svfiprintf_r+0x1a6>
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d0c6      	beq.n	801a2ac <_svfiprintf_r+0x130>
 801a31e:	9105      	str	r1, [sp, #20]
 801a320:	e7c4      	b.n	801a2ac <_svfiprintf_r+0x130>
 801a322:	fb0c 2101 	mla	r1, ip, r1, r2
 801a326:	4604      	mov	r4, r0
 801a328:	2301      	movs	r3, #1
 801a32a:	e7f0      	b.n	801a30e <_svfiprintf_r+0x192>
 801a32c:	ab03      	add	r3, sp, #12
 801a32e:	9300      	str	r3, [sp, #0]
 801a330:	462a      	mov	r2, r5
 801a332:	4b0e      	ldr	r3, [pc, #56]	@ (801a36c <_svfiprintf_r+0x1f0>)
 801a334:	a904      	add	r1, sp, #16
 801a336:	4638      	mov	r0, r7
 801a338:	f3af 8000 	nop.w
 801a33c:	1c42      	adds	r2, r0, #1
 801a33e:	4606      	mov	r6, r0
 801a340:	d1d6      	bne.n	801a2f0 <_svfiprintf_r+0x174>
 801a342:	89ab      	ldrh	r3, [r5, #12]
 801a344:	065b      	lsls	r3, r3, #25
 801a346:	f53f af2d 	bmi.w	801a1a4 <_svfiprintf_r+0x28>
 801a34a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a34c:	e72c      	b.n	801a1a8 <_svfiprintf_r+0x2c>
 801a34e:	ab03      	add	r3, sp, #12
 801a350:	9300      	str	r3, [sp, #0]
 801a352:	462a      	mov	r2, r5
 801a354:	4b05      	ldr	r3, [pc, #20]	@ (801a36c <_svfiprintf_r+0x1f0>)
 801a356:	a904      	add	r1, sp, #16
 801a358:	4638      	mov	r0, r7
 801a35a:	f000 f879 	bl	801a450 <_printf_i>
 801a35e:	e7ed      	b.n	801a33c <_svfiprintf_r+0x1c0>
 801a360:	0801c66c 	.word	0x0801c66c
 801a364:	0801c676 	.word	0x0801c676
 801a368:	00000000 	.word	0x00000000
 801a36c:	0801a0c5 	.word	0x0801a0c5
 801a370:	0801c672 	.word	0x0801c672

0801a374 <_printf_common>:
 801a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a378:	4616      	mov	r6, r2
 801a37a:	4698      	mov	r8, r3
 801a37c:	688a      	ldr	r2, [r1, #8]
 801a37e:	690b      	ldr	r3, [r1, #16]
 801a380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a384:	4293      	cmp	r3, r2
 801a386:	bfb8      	it	lt
 801a388:	4613      	movlt	r3, r2
 801a38a:	6033      	str	r3, [r6, #0]
 801a38c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a390:	4607      	mov	r7, r0
 801a392:	460c      	mov	r4, r1
 801a394:	b10a      	cbz	r2, 801a39a <_printf_common+0x26>
 801a396:	3301      	adds	r3, #1
 801a398:	6033      	str	r3, [r6, #0]
 801a39a:	6823      	ldr	r3, [r4, #0]
 801a39c:	0699      	lsls	r1, r3, #26
 801a39e:	bf42      	ittt	mi
 801a3a0:	6833      	ldrmi	r3, [r6, #0]
 801a3a2:	3302      	addmi	r3, #2
 801a3a4:	6033      	strmi	r3, [r6, #0]
 801a3a6:	6825      	ldr	r5, [r4, #0]
 801a3a8:	f015 0506 	ands.w	r5, r5, #6
 801a3ac:	d106      	bne.n	801a3bc <_printf_common+0x48>
 801a3ae:	f104 0a19 	add.w	sl, r4, #25
 801a3b2:	68e3      	ldr	r3, [r4, #12]
 801a3b4:	6832      	ldr	r2, [r6, #0]
 801a3b6:	1a9b      	subs	r3, r3, r2
 801a3b8:	42ab      	cmp	r3, r5
 801a3ba:	dc26      	bgt.n	801a40a <_printf_common+0x96>
 801a3bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a3c0:	6822      	ldr	r2, [r4, #0]
 801a3c2:	3b00      	subs	r3, #0
 801a3c4:	bf18      	it	ne
 801a3c6:	2301      	movne	r3, #1
 801a3c8:	0692      	lsls	r2, r2, #26
 801a3ca:	d42b      	bmi.n	801a424 <_printf_common+0xb0>
 801a3cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a3d0:	4641      	mov	r1, r8
 801a3d2:	4638      	mov	r0, r7
 801a3d4:	47c8      	blx	r9
 801a3d6:	3001      	adds	r0, #1
 801a3d8:	d01e      	beq.n	801a418 <_printf_common+0xa4>
 801a3da:	6823      	ldr	r3, [r4, #0]
 801a3dc:	6922      	ldr	r2, [r4, #16]
 801a3de:	f003 0306 	and.w	r3, r3, #6
 801a3e2:	2b04      	cmp	r3, #4
 801a3e4:	bf02      	ittt	eq
 801a3e6:	68e5      	ldreq	r5, [r4, #12]
 801a3e8:	6833      	ldreq	r3, [r6, #0]
 801a3ea:	1aed      	subeq	r5, r5, r3
 801a3ec:	68a3      	ldr	r3, [r4, #8]
 801a3ee:	bf0c      	ite	eq
 801a3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a3f4:	2500      	movne	r5, #0
 801a3f6:	4293      	cmp	r3, r2
 801a3f8:	bfc4      	itt	gt
 801a3fa:	1a9b      	subgt	r3, r3, r2
 801a3fc:	18ed      	addgt	r5, r5, r3
 801a3fe:	2600      	movs	r6, #0
 801a400:	341a      	adds	r4, #26
 801a402:	42b5      	cmp	r5, r6
 801a404:	d11a      	bne.n	801a43c <_printf_common+0xc8>
 801a406:	2000      	movs	r0, #0
 801a408:	e008      	b.n	801a41c <_printf_common+0xa8>
 801a40a:	2301      	movs	r3, #1
 801a40c:	4652      	mov	r2, sl
 801a40e:	4641      	mov	r1, r8
 801a410:	4638      	mov	r0, r7
 801a412:	47c8      	blx	r9
 801a414:	3001      	adds	r0, #1
 801a416:	d103      	bne.n	801a420 <_printf_common+0xac>
 801a418:	f04f 30ff 	mov.w	r0, #4294967295
 801a41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a420:	3501      	adds	r5, #1
 801a422:	e7c6      	b.n	801a3b2 <_printf_common+0x3e>
 801a424:	18e1      	adds	r1, r4, r3
 801a426:	1c5a      	adds	r2, r3, #1
 801a428:	2030      	movs	r0, #48	@ 0x30
 801a42a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a42e:	4422      	add	r2, r4
 801a430:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a438:	3302      	adds	r3, #2
 801a43a:	e7c7      	b.n	801a3cc <_printf_common+0x58>
 801a43c:	2301      	movs	r3, #1
 801a43e:	4622      	mov	r2, r4
 801a440:	4641      	mov	r1, r8
 801a442:	4638      	mov	r0, r7
 801a444:	47c8      	blx	r9
 801a446:	3001      	adds	r0, #1
 801a448:	d0e6      	beq.n	801a418 <_printf_common+0xa4>
 801a44a:	3601      	adds	r6, #1
 801a44c:	e7d9      	b.n	801a402 <_printf_common+0x8e>
	...

0801a450 <_printf_i>:
 801a450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a454:	7e0f      	ldrb	r7, [r1, #24]
 801a456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a458:	2f78      	cmp	r7, #120	@ 0x78
 801a45a:	4691      	mov	r9, r2
 801a45c:	4680      	mov	r8, r0
 801a45e:	460c      	mov	r4, r1
 801a460:	469a      	mov	sl, r3
 801a462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a466:	d807      	bhi.n	801a478 <_printf_i+0x28>
 801a468:	2f62      	cmp	r7, #98	@ 0x62
 801a46a:	d80a      	bhi.n	801a482 <_printf_i+0x32>
 801a46c:	2f00      	cmp	r7, #0
 801a46e:	f000 80d1 	beq.w	801a614 <_printf_i+0x1c4>
 801a472:	2f58      	cmp	r7, #88	@ 0x58
 801a474:	f000 80b8 	beq.w	801a5e8 <_printf_i+0x198>
 801a478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a47c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a480:	e03a      	b.n	801a4f8 <_printf_i+0xa8>
 801a482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a486:	2b15      	cmp	r3, #21
 801a488:	d8f6      	bhi.n	801a478 <_printf_i+0x28>
 801a48a:	a101      	add	r1, pc, #4	@ (adr r1, 801a490 <_printf_i+0x40>)
 801a48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a490:	0801a4e9 	.word	0x0801a4e9
 801a494:	0801a4fd 	.word	0x0801a4fd
 801a498:	0801a479 	.word	0x0801a479
 801a49c:	0801a479 	.word	0x0801a479
 801a4a0:	0801a479 	.word	0x0801a479
 801a4a4:	0801a479 	.word	0x0801a479
 801a4a8:	0801a4fd 	.word	0x0801a4fd
 801a4ac:	0801a479 	.word	0x0801a479
 801a4b0:	0801a479 	.word	0x0801a479
 801a4b4:	0801a479 	.word	0x0801a479
 801a4b8:	0801a479 	.word	0x0801a479
 801a4bc:	0801a5fb 	.word	0x0801a5fb
 801a4c0:	0801a527 	.word	0x0801a527
 801a4c4:	0801a5b5 	.word	0x0801a5b5
 801a4c8:	0801a479 	.word	0x0801a479
 801a4cc:	0801a479 	.word	0x0801a479
 801a4d0:	0801a61d 	.word	0x0801a61d
 801a4d4:	0801a479 	.word	0x0801a479
 801a4d8:	0801a527 	.word	0x0801a527
 801a4dc:	0801a479 	.word	0x0801a479
 801a4e0:	0801a479 	.word	0x0801a479
 801a4e4:	0801a5bd 	.word	0x0801a5bd
 801a4e8:	6833      	ldr	r3, [r6, #0]
 801a4ea:	1d1a      	adds	r2, r3, #4
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	6032      	str	r2, [r6, #0]
 801a4f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a4f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a4f8:	2301      	movs	r3, #1
 801a4fa:	e09c      	b.n	801a636 <_printf_i+0x1e6>
 801a4fc:	6833      	ldr	r3, [r6, #0]
 801a4fe:	6820      	ldr	r0, [r4, #0]
 801a500:	1d19      	adds	r1, r3, #4
 801a502:	6031      	str	r1, [r6, #0]
 801a504:	0606      	lsls	r6, r0, #24
 801a506:	d501      	bpl.n	801a50c <_printf_i+0xbc>
 801a508:	681d      	ldr	r5, [r3, #0]
 801a50a:	e003      	b.n	801a514 <_printf_i+0xc4>
 801a50c:	0645      	lsls	r5, r0, #25
 801a50e:	d5fb      	bpl.n	801a508 <_printf_i+0xb8>
 801a510:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a514:	2d00      	cmp	r5, #0
 801a516:	da03      	bge.n	801a520 <_printf_i+0xd0>
 801a518:	232d      	movs	r3, #45	@ 0x2d
 801a51a:	426d      	negs	r5, r5
 801a51c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a520:	4858      	ldr	r0, [pc, #352]	@ (801a684 <_printf_i+0x234>)
 801a522:	230a      	movs	r3, #10
 801a524:	e011      	b.n	801a54a <_printf_i+0xfa>
 801a526:	6821      	ldr	r1, [r4, #0]
 801a528:	6833      	ldr	r3, [r6, #0]
 801a52a:	0608      	lsls	r0, r1, #24
 801a52c:	f853 5b04 	ldr.w	r5, [r3], #4
 801a530:	d402      	bmi.n	801a538 <_printf_i+0xe8>
 801a532:	0649      	lsls	r1, r1, #25
 801a534:	bf48      	it	mi
 801a536:	b2ad      	uxthmi	r5, r5
 801a538:	2f6f      	cmp	r7, #111	@ 0x6f
 801a53a:	4852      	ldr	r0, [pc, #328]	@ (801a684 <_printf_i+0x234>)
 801a53c:	6033      	str	r3, [r6, #0]
 801a53e:	bf14      	ite	ne
 801a540:	230a      	movne	r3, #10
 801a542:	2308      	moveq	r3, #8
 801a544:	2100      	movs	r1, #0
 801a546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a54a:	6866      	ldr	r6, [r4, #4]
 801a54c:	60a6      	str	r6, [r4, #8]
 801a54e:	2e00      	cmp	r6, #0
 801a550:	db05      	blt.n	801a55e <_printf_i+0x10e>
 801a552:	6821      	ldr	r1, [r4, #0]
 801a554:	432e      	orrs	r6, r5
 801a556:	f021 0104 	bic.w	r1, r1, #4
 801a55a:	6021      	str	r1, [r4, #0]
 801a55c:	d04b      	beq.n	801a5f6 <_printf_i+0x1a6>
 801a55e:	4616      	mov	r6, r2
 801a560:	fbb5 f1f3 	udiv	r1, r5, r3
 801a564:	fb03 5711 	mls	r7, r3, r1, r5
 801a568:	5dc7      	ldrb	r7, [r0, r7]
 801a56a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a56e:	462f      	mov	r7, r5
 801a570:	42bb      	cmp	r3, r7
 801a572:	460d      	mov	r5, r1
 801a574:	d9f4      	bls.n	801a560 <_printf_i+0x110>
 801a576:	2b08      	cmp	r3, #8
 801a578:	d10b      	bne.n	801a592 <_printf_i+0x142>
 801a57a:	6823      	ldr	r3, [r4, #0]
 801a57c:	07df      	lsls	r7, r3, #31
 801a57e:	d508      	bpl.n	801a592 <_printf_i+0x142>
 801a580:	6923      	ldr	r3, [r4, #16]
 801a582:	6861      	ldr	r1, [r4, #4]
 801a584:	4299      	cmp	r1, r3
 801a586:	bfde      	ittt	le
 801a588:	2330      	movle	r3, #48	@ 0x30
 801a58a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a58e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a592:	1b92      	subs	r2, r2, r6
 801a594:	6122      	str	r2, [r4, #16]
 801a596:	f8cd a000 	str.w	sl, [sp]
 801a59a:	464b      	mov	r3, r9
 801a59c:	aa03      	add	r2, sp, #12
 801a59e:	4621      	mov	r1, r4
 801a5a0:	4640      	mov	r0, r8
 801a5a2:	f7ff fee7 	bl	801a374 <_printf_common>
 801a5a6:	3001      	adds	r0, #1
 801a5a8:	d14a      	bne.n	801a640 <_printf_i+0x1f0>
 801a5aa:	f04f 30ff 	mov.w	r0, #4294967295
 801a5ae:	b004      	add	sp, #16
 801a5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5b4:	6823      	ldr	r3, [r4, #0]
 801a5b6:	f043 0320 	orr.w	r3, r3, #32
 801a5ba:	6023      	str	r3, [r4, #0]
 801a5bc:	4832      	ldr	r0, [pc, #200]	@ (801a688 <_printf_i+0x238>)
 801a5be:	2778      	movs	r7, #120	@ 0x78
 801a5c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a5c4:	6823      	ldr	r3, [r4, #0]
 801a5c6:	6831      	ldr	r1, [r6, #0]
 801a5c8:	061f      	lsls	r7, r3, #24
 801a5ca:	f851 5b04 	ldr.w	r5, [r1], #4
 801a5ce:	d402      	bmi.n	801a5d6 <_printf_i+0x186>
 801a5d0:	065f      	lsls	r7, r3, #25
 801a5d2:	bf48      	it	mi
 801a5d4:	b2ad      	uxthmi	r5, r5
 801a5d6:	6031      	str	r1, [r6, #0]
 801a5d8:	07d9      	lsls	r1, r3, #31
 801a5da:	bf44      	itt	mi
 801a5dc:	f043 0320 	orrmi.w	r3, r3, #32
 801a5e0:	6023      	strmi	r3, [r4, #0]
 801a5e2:	b11d      	cbz	r5, 801a5ec <_printf_i+0x19c>
 801a5e4:	2310      	movs	r3, #16
 801a5e6:	e7ad      	b.n	801a544 <_printf_i+0xf4>
 801a5e8:	4826      	ldr	r0, [pc, #152]	@ (801a684 <_printf_i+0x234>)
 801a5ea:	e7e9      	b.n	801a5c0 <_printf_i+0x170>
 801a5ec:	6823      	ldr	r3, [r4, #0]
 801a5ee:	f023 0320 	bic.w	r3, r3, #32
 801a5f2:	6023      	str	r3, [r4, #0]
 801a5f4:	e7f6      	b.n	801a5e4 <_printf_i+0x194>
 801a5f6:	4616      	mov	r6, r2
 801a5f8:	e7bd      	b.n	801a576 <_printf_i+0x126>
 801a5fa:	6833      	ldr	r3, [r6, #0]
 801a5fc:	6825      	ldr	r5, [r4, #0]
 801a5fe:	6961      	ldr	r1, [r4, #20]
 801a600:	1d18      	adds	r0, r3, #4
 801a602:	6030      	str	r0, [r6, #0]
 801a604:	062e      	lsls	r6, r5, #24
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	d501      	bpl.n	801a60e <_printf_i+0x1be>
 801a60a:	6019      	str	r1, [r3, #0]
 801a60c:	e002      	b.n	801a614 <_printf_i+0x1c4>
 801a60e:	0668      	lsls	r0, r5, #25
 801a610:	d5fb      	bpl.n	801a60a <_printf_i+0x1ba>
 801a612:	8019      	strh	r1, [r3, #0]
 801a614:	2300      	movs	r3, #0
 801a616:	6123      	str	r3, [r4, #16]
 801a618:	4616      	mov	r6, r2
 801a61a:	e7bc      	b.n	801a596 <_printf_i+0x146>
 801a61c:	6833      	ldr	r3, [r6, #0]
 801a61e:	1d1a      	adds	r2, r3, #4
 801a620:	6032      	str	r2, [r6, #0]
 801a622:	681e      	ldr	r6, [r3, #0]
 801a624:	6862      	ldr	r2, [r4, #4]
 801a626:	2100      	movs	r1, #0
 801a628:	4630      	mov	r0, r6
 801a62a:	f7e5 fe09 	bl	8000240 <memchr>
 801a62e:	b108      	cbz	r0, 801a634 <_printf_i+0x1e4>
 801a630:	1b80      	subs	r0, r0, r6
 801a632:	6060      	str	r0, [r4, #4]
 801a634:	6863      	ldr	r3, [r4, #4]
 801a636:	6123      	str	r3, [r4, #16]
 801a638:	2300      	movs	r3, #0
 801a63a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a63e:	e7aa      	b.n	801a596 <_printf_i+0x146>
 801a640:	6923      	ldr	r3, [r4, #16]
 801a642:	4632      	mov	r2, r6
 801a644:	4649      	mov	r1, r9
 801a646:	4640      	mov	r0, r8
 801a648:	47d0      	blx	sl
 801a64a:	3001      	adds	r0, #1
 801a64c:	d0ad      	beq.n	801a5aa <_printf_i+0x15a>
 801a64e:	6823      	ldr	r3, [r4, #0]
 801a650:	079b      	lsls	r3, r3, #30
 801a652:	d413      	bmi.n	801a67c <_printf_i+0x22c>
 801a654:	68e0      	ldr	r0, [r4, #12]
 801a656:	9b03      	ldr	r3, [sp, #12]
 801a658:	4298      	cmp	r0, r3
 801a65a:	bfb8      	it	lt
 801a65c:	4618      	movlt	r0, r3
 801a65e:	e7a6      	b.n	801a5ae <_printf_i+0x15e>
 801a660:	2301      	movs	r3, #1
 801a662:	4632      	mov	r2, r6
 801a664:	4649      	mov	r1, r9
 801a666:	4640      	mov	r0, r8
 801a668:	47d0      	blx	sl
 801a66a:	3001      	adds	r0, #1
 801a66c:	d09d      	beq.n	801a5aa <_printf_i+0x15a>
 801a66e:	3501      	adds	r5, #1
 801a670:	68e3      	ldr	r3, [r4, #12]
 801a672:	9903      	ldr	r1, [sp, #12]
 801a674:	1a5b      	subs	r3, r3, r1
 801a676:	42ab      	cmp	r3, r5
 801a678:	dcf2      	bgt.n	801a660 <_printf_i+0x210>
 801a67a:	e7eb      	b.n	801a654 <_printf_i+0x204>
 801a67c:	2500      	movs	r5, #0
 801a67e:	f104 0619 	add.w	r6, r4, #25
 801a682:	e7f5      	b.n	801a670 <_printf_i+0x220>
 801a684:	0801c67d 	.word	0x0801c67d
 801a688:	0801c68e 	.word	0x0801c68e

0801a68c <memmove>:
 801a68c:	4288      	cmp	r0, r1
 801a68e:	b510      	push	{r4, lr}
 801a690:	eb01 0402 	add.w	r4, r1, r2
 801a694:	d902      	bls.n	801a69c <memmove+0x10>
 801a696:	4284      	cmp	r4, r0
 801a698:	4623      	mov	r3, r4
 801a69a:	d807      	bhi.n	801a6ac <memmove+0x20>
 801a69c:	1e43      	subs	r3, r0, #1
 801a69e:	42a1      	cmp	r1, r4
 801a6a0:	d008      	beq.n	801a6b4 <memmove+0x28>
 801a6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a6aa:	e7f8      	b.n	801a69e <memmove+0x12>
 801a6ac:	4402      	add	r2, r0
 801a6ae:	4601      	mov	r1, r0
 801a6b0:	428a      	cmp	r2, r1
 801a6b2:	d100      	bne.n	801a6b6 <memmove+0x2a>
 801a6b4:	bd10      	pop	{r4, pc}
 801a6b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a6ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a6be:	e7f7      	b.n	801a6b0 <memmove+0x24>

0801a6c0 <_realloc_r>:
 801a6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6c4:	4607      	mov	r7, r0
 801a6c6:	4614      	mov	r4, r2
 801a6c8:	460d      	mov	r5, r1
 801a6ca:	b921      	cbnz	r1, 801a6d6 <_realloc_r+0x16>
 801a6cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a6d0:	4611      	mov	r1, r2
 801a6d2:	f7ff bb11 	b.w	8019cf8 <_malloc_r>
 801a6d6:	b92a      	cbnz	r2, 801a6e4 <_realloc_r+0x24>
 801a6d8:	f7ff fcaa 	bl	801a030 <_free_r>
 801a6dc:	4625      	mov	r5, r4
 801a6de:	4628      	mov	r0, r5
 801a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6e4:	f000 f81a 	bl	801a71c <_malloc_usable_size_r>
 801a6e8:	4284      	cmp	r4, r0
 801a6ea:	4606      	mov	r6, r0
 801a6ec:	d802      	bhi.n	801a6f4 <_realloc_r+0x34>
 801a6ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a6f2:	d8f4      	bhi.n	801a6de <_realloc_r+0x1e>
 801a6f4:	4621      	mov	r1, r4
 801a6f6:	4638      	mov	r0, r7
 801a6f8:	f7ff fafe 	bl	8019cf8 <_malloc_r>
 801a6fc:	4680      	mov	r8, r0
 801a6fe:	b908      	cbnz	r0, 801a704 <_realloc_r+0x44>
 801a700:	4645      	mov	r5, r8
 801a702:	e7ec      	b.n	801a6de <_realloc_r+0x1e>
 801a704:	42b4      	cmp	r4, r6
 801a706:	4622      	mov	r2, r4
 801a708:	4629      	mov	r1, r5
 801a70a:	bf28      	it	cs
 801a70c:	4632      	movcs	r2, r6
 801a70e:	f7ff fc81 	bl	801a014 <memcpy>
 801a712:	4629      	mov	r1, r5
 801a714:	4638      	mov	r0, r7
 801a716:	f7ff fc8b 	bl	801a030 <_free_r>
 801a71a:	e7f1      	b.n	801a700 <_realloc_r+0x40>

0801a71c <_malloc_usable_size_r>:
 801a71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a720:	1f18      	subs	r0, r3, #4
 801a722:	2b00      	cmp	r3, #0
 801a724:	bfbc      	itt	lt
 801a726:	580b      	ldrlt	r3, [r1, r0]
 801a728:	18c0      	addlt	r0, r0, r3
 801a72a:	4770      	bx	lr

0801a72c <_init>:
 801a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a72e:	bf00      	nop
 801a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a732:	bc08      	pop	{r3}
 801a734:	469e      	mov	lr, r3
 801a736:	4770      	bx	lr

0801a738 <_fini>:
 801a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a73a:	bf00      	nop
 801a73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a73e:	bc08      	pop	{r3}
 801a740:	469e      	mov	lr, r3
 801a742:	4770      	bx	lr
